{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Ivy as a Transpiler Introduction"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "eNBrEawr7rcV"
      },
      "source": [
        "### To use the transpiler:\n",
        "1. Head to our [website](https://lets-unify.ai/) \n",
        "2. Create an account and generate an API Key\n",
        "3. Set the`IVY_API_KEY`environment variable to your generated key\n",
        "\n"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "V60dtcus--q9"
      },
      "source": [
        "\n",
        "## Transpiler Interface\n",
        "\n",
        "```python\n",
        "    def transpile(\n",
        "        self,\n",
        "        *objs,\n",
        "        to: Optional[str] = None,\n",
        "        args: Optional[tuple] = None,\n",
        "        kwargs: Optional[dict] = None,\n",
        "    ) -> Callable:\n",
        "        \"\"\"\n",
        "        objs\n",
        "            the functions, models or modules to be transpiled\n",
        "        to \n",
        "            the framework to be transpiled to\n",
        "        args\n",
        "            The positional arguments passed to the function for tracing\n",
        "        kwargs\n",
        "            The keyword arguments passed to the function for tracing\n",
        "        \"\"\"\n",
        "```\n",
        "\n",
        "\n",
        "1. Transpile either functions, trainable models or importable python modules, with any number and combo permitted\n",
        "\n",
        "2. If no ‚Äúobjs‚Äù are provided, the function returns a new transpilation function which receives only one object as input, making it usable as a decorator\n",
        "\n",
        "3. If neither ‚Äúargs‚Äù nor ‚Äúkwargs‚Äù are specified, then the transpilation will occur lazily, upon the first call of the transpiled function, otherwise transpilation is eager\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dfq6cy-Zum4z"
      },
      "source": [
        "### Telemetry\n",
        "\n",
        "Telemetry helps us better understand how users are interacting with the transpiler & how to make it better, we specifcally collect: \n",
        "1. Invocations of the transpiler\n",
        "2. graph representation of the transpiled object(s) \n",
        "3. General machine information (e.g. number of CPUs, GPUs, OS)\n",
        "\n",
        "*add option to opt-out?*"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "JUWIqoQKLmJV"
      },
      "source": [
        "### 1. Transpile Functions üî¢\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6w1sXBBO6mo4"
      },
      "outputs": [],
      "source": [
        "!pip install kornia ivy-core\n",
        "!wget https://raw.githubusercontent.com/unifyai/unifyai.github.io/master/img/externally_linked/logo.png -O image.png"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        },
        "id": "IJ9b__7H7THD",
        "outputId": "e3071303-5857-465e-f753-05ade187a0ed"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=957x359 at 0x7F94B23AEE80>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from google.colab.patches import cv2_imshow\n",
        "import cv2 \n",
        "\n",
        "img = cv2.imread(\"image.png\")\n",
        "cv2_imshow(img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qcQB4eZU6eT4"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import ivy\n",
        "import kornia\n",
        "import jax.numpy as jnp\n",
        "\n",
        "# set the API key\n",
        "os.envrion[\"IVY_API_KEY\"] = \"\"\n",
        "\n",
        "# load image into jax \n",
        "img = jnp.array(cv2.imread('image.png'))/255\n",
        "img = jnp.expand_dims(jnp.transpose(img, (2, 0, 1)), 0)\n",
        "\n",
        "# transpile function lazily\n",
        "canny = ivy.transpile(kornia.feature.canny,to='jax')\n",
        "\n",
        "cv2_imshow(canny(img))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PoHLs0KXP5XU"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "# load image in tensorflow\n",
        "original_img = tf.array(cv2.imread('image.png'))/255\n",
        "original_img = tf.expand_dims(tf.transpose(img, (2, 0, 1)), 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kvXPPKQ1STyW",
        "outputId": "5e8fff4d-3161-4b5a-9582-1f4cf938b96e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You selected Eager\n"
          ]
        }
      ],
      "source": [
        "#@title Run transpilation in eager/lazy mode { display-mode: \"form\" }\n",
        "import torch \n",
        "mode = \"Lazy\" #@param [\"Eager\", \"Lazy\"]\n",
        "fn_args = (original_img,) if mode == \"Eager\" else None\n",
        "\n",
        "@ivy.transpile(to=\"tensorflow\",args=fn_args)\n",
        "def dilate_edges(img):\n",
        "  edges = kornia.filters.canny(img)[1]\n",
        "  return kornia.morphology.dilation(edges,torch.ones(7,7))\n",
        "\n",
        "\n",
        "%%time\n",
        "new_img = dilate_edges(original_img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KSkxQDdf7des"
      },
      "outputs": [],
      "source": [
        "cv2_imshow(new_img)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dZPo6f6kLc0W"
      },
      "source": []
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "dG7BgxamMDpB"
      },
      "source": [
        "### 2. Transpile Libraries üìö\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6R7eAa5XMcwg"
      },
      "outputs": [],
      "source": [
        "# transpile module lazily\n",
        "kornia = ivy.transpile(kornia,to=\"tensorflow\")\n",
        "\n",
        "def dilate_edges(img):\n",
        "  edges = kornia.filters.canny(img)[1]\n",
        "  return kornia.morphology.dilation(edges,torch.ones(7,7))\n",
        "\n",
        "%%time\n",
        "new_img = dilate_edges(original_img)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oq8pXeIb7oCV"
      },
      "outputs": [],
      "source": [
        "cv2_imshow(img)"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "eqnqoSTeMHrS"
      },
      "source": [
        "### 3. Transpile Models üåê"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-qBWMGkkNzin"
      },
      "outputs": [],
      "source": [
        "import haiku as hk\n",
        "\n",
        "num_classes = 10\n",
        "hk_model = hk.nets.ResNet18(num_classes)\n",
        "\n",
        "# transpile to framework of your choice\n",
        "torch_model = ivy.transpile(hk_model,to=torch.nn.Module)\n",
        "keras_model = ivy.transpile(hk_model,to=tf.keras.Model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7BgkbFo9zOf1"
      },
      "outputs": [],
      "source": [
        "# visualize function counting as in the odsc talk"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
