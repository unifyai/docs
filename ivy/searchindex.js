Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_compile_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/compile", "overview/one_liners/transpile", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_compile_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/compile.rst", "overview/one_liners/transpile.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Compile code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Applied Libraries", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.compile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 161, 164, 167, 168, 169, 171, 175, 176, 190, 193, 203, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 388, 389, 390, 391, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 535, 541, 546, 547, 548, 549, 551, 553, 554, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 672, 674, 676, 677, 682, 683, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 728, 729, 731, 732, 733, 734, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "repo": [0, 10, 39, 749, 752, 755, 757, 760, 762, 763, 775, 776, 791], "hold": [0, 51, 52, 56, 64, 74, 79, 87, 91, 317, 330, 335, 349, 364, 430, 456, 479, 480, 485, 531, 532, 588, 591, 601, 630, 710, 747, 784, 802], "all": [0, 1, 3, 4, 5, 7, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 38, 39, 41, 42, 44, 46, 47, 51, 52, 55, 56, 58, 60, 65, 66, 68, 69, 70, 73, 74, 75, 78, 79, 81, 83, 88, 89, 91, 118, 131, 138, 141, 142, 143, 197, 204, 236, 240, 268, 269, 312, 313, 322, 339, 346, 349, 352, 353, 355, 364, 385, 394, 395, 401, 405, 413, 416, 444, 455, 484, 489, 492, 509, 529, 530, 546, 553, 554, 568, 571, 583, 585, 586, 588, 589, 590, 591, 593, 594, 595, 597, 598, 602, 613, 615, 616, 619, 632, 637, 638, 641, 646, 655, 659, 661, 667, 668, 669, 670, 671, 672, 681, 682, 683, 684, 690, 693, 698, 727, 728, 729, 735, 738, 743, 747, 748, 749, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 808], "jupyt": [0, 792, 803], "exampl": [0, 6, 8, 16, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 370, 371, 372, 373, 375, 376, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 411, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 443, 444, 449, 450, 451, 452, 453, 455, 456, 457, 461, 462, 463, 466, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 738, 741, 745, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 770, 771, 773, 774, 776, 777, 781, 783, 784, 785, 786, 787, 793, 798, 799, 802, 804, 807, 808], "tab": [0, 753, 754, 762, 784], "ivi": [0, 1, 2, 6, 8, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 752, 754, 756, 757, 759, 761, 763, 764, 766, 768, 769, 770, 771, 773, 779, 780, 787, 789, 792, 793, 794, 797, 808], "": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 40, 42, 43, 44, 47, 51, 52, 53, 56, 64, 74, 76, 79, 87, 114, 136, 141, 142, 162, 163, 192, 195, 196, 208, 243, 278, 313, 317, 319, 328, 330, 336, 340, 342, 346, 349, 350, 352, 353, 354, 355, 358, 359, 364, 367, 368, 374, 380, 385, 395, 399, 403, 408, 415, 419, 435, 436, 444, 458, 459, 460, 468, 478, 487, 505, 506, 526, 548, 549, 570, 572, 573, 574, 575, 577, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 595, 601, 605, 607, 609, 611, 621, 632, 639, 640, 646, 682, 716, 718, 727, 728, 729, 730, 731, 732, 733, 734, 738, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 789, 792, 793, 794, 795, 796, 797, 800, 801, 802, 804, 805, 806, 807], "web": 0, "relev": [0, 47, 70, 135, 583, 733, 747, 753, 754, 755, 758, 761, 762, 763, 765, 771, 772, 775, 776, 784, 788, 792, 799, 806, 807], "link": [0, 16, 25, 26, 40, 747, 749, 753, 754, 755, 760, 762, 763, 768, 774, 796, 797, 799], "list": [0, 4, 5, 6, 7, 41, 46, 47, 48, 50, 51, 52, 55, 58, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 131, 133, 136, 137, 138, 140, 145, 149, 151, 164, 168, 169, 176, 192, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 296, 298, 299, 301, 317, 318, 319, 321, 322, 323, 324, 325, 328, 329, 330, 336, 337, 338, 340, 341, 342, 349, 352, 353, 355, 362, 370, 371, 372, 374, 375, 376, 377, 388, 389, 390, 391, 401, 404, 407, 412, 413, 416, 417, 418, 420, 421, 424, 425, 426, 427, 429, 430, 439, 450, 452, 453, 456, 458, 460, 461, 462, 463, 465, 470, 478, 479, 480, 481, 489, 491, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 509, 511, 513, 515, 516, 517, 519, 520, 523, 527, 531, 532, 546, 547, 549, 551, 552, 553, 554, 555, 567, 568, 573, 578, 583, 584, 585, 586, 588, 590, 591, 593, 595, 596, 599, 600, 604, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 641, 643, 648, 649, 650, 651, 652, 655, 658, 659, 660, 661, 662, 665, 666, 670, 671, 672, 673, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 706, 707, 709, 710, 713, 715, 716, 718, 719, 720, 726, 727, 729, 735, 741, 752, 753, 754, 757, 758, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 773, 774, 775, 776, 777, 781, 784, 785, 786, 787, 795, 801, 802, 807], "open": [0, 3, 5, 6, 7, 8, 22, 25, 26, 39, 40, 41, 42, 52, 60, 83, 118, 583, 597, 691, 693, 747, 748, 754, 755, 760, 763, 766, 774, 775, 779, 788, 791, 792, 793, 795, 796, 799, 800, 801, 803, 804], "task": [0, 42, 594, 667, 668, 669, 747, 748, 755, 774, 775, 801, 807, 808], "avil": 0, "discuss": [0, 753, 755, 760, 763, 764, 773, 774, 776, 779, 782, 783, 784, 787, 793, 797, 802], "suggest": [0, 753, 754, 755, 760, 763, 768, 772, 774, 776, 777, 778, 788], "new": [0, 6, 8, 9, 10, 12, 14, 17, 23, 25, 26, 27, 41, 43, 51, 52, 53, 58, 59, 68, 70, 74, 75, 76, 79, 81, 82, 127, 130, 132, 133, 138, 139, 140, 144, 145, 182, 225, 271, 273, 277, 317, 320, 330, 335, 349, 355, 364, 422, 429, 443, 449, 485, 500, 501, 502, 504, 507, 508, 510, 531, 532, 535, 537, 544, 546, 547, 553, 570, 573, 575, 576, 577, 583, 584, 586, 588, 589, 593, 595, 596, 626, 634, 654, 658, 662, 675, 687, 688, 689, 726, 729, 732, 733, 738, 747, 748, 753, 754, 755, 756, 758, 759, 761, 762, 763, 765, 766, 768, 771, 773, 774, 775, 776, 777, 779, 780, 783, 786, 788, 789, 791, 792, 793, 795, 799, 803, 807, 808], "should": [0, 4, 42, 45, 47, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 67, 68, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 87, 89, 91, 93, 94, 104, 108, 117, 136, 138, 141, 142, 150, 175, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 301, 313, 327, 331, 332, 333, 334, 338, 343, 344, 346, 349, 351, 352, 353, 354, 355, 359, 364, 375, 376, 377, 379, 384, 404, 413, 416, 420, 443, 444, 464, 465, 478, 479, 480, 494, 517, 568, 570, 573, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 643, 645, 646, 658, 674, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 714, 715, 717, 718, 725, 726, 727, 728, 729, 731, 732, 733, 734, 741, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 790, 792, 796, 797, 798, 801, 803, 808], "comprehens": [0, 14, 755, 757], "possibl": [0, 3, 31, 47, 51, 70, 74, 81, 91, 120, 243, 286, 300, 346, 352, 354, 355, 374, 417, 424, 425, 426, 430, 432, 434, 435, 436, 443, 456, 527, 586, 588, 590, 601, 613, 654, 655, 656, 658, 660, 661, 663, 665, 712, 714, 744, 747, 748, 753, 754, 755, 757, 760, 761, 763, 765, 766, 768, 770, 772, 773, 774, 775, 776, 779, 781, 784, 787, 792, 799, 801, 807], "us": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 89, 91, 94, 101, 135, 138, 148, 160, 162, 163, 174, 175, 195, 196, 198, 203, 207, 208, 209, 210, 212, 215, 221, 229, 257, 258, 260, 261, 263, 264, 265, 267, 268, 270, 279, 283, 288, 300, 302, 303, 305, 306, 307, 311, 328, 331, 332, 335, 346, 349, 352, 353, 355, 358, 359, 360, 362, 364, 370, 371, 372, 374, 375, 376, 377, 378, 380, 385, 387, 388, 389, 390, 393, 395, 399, 401, 404, 408, 410, 412, 413, 414, 415, 416, 434, 438, 442, 444, 458, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 478, 485, 487, 505, 506, 515, 516, 527, 535, 537, 538, 540, 546, 547, 559, 560, 562, 569, 570, 575, 576, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 601, 614, 616, 617, 622, 624, 632, 640, 646, 648, 657, 658, 659, 663, 667, 668, 669, 670, 672, 673, 679, 680, 681, 683, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 711, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 741, 745, 748, 749, 752, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "easi": [0, 25, 26, 39, 754, 755, 758, 759, 761, 770, 772, 775, 776, 779, 792, 799, 801, 807, 808], "follow": [0, 19, 20, 25, 26, 29, 30, 31, 37, 40, 41, 51, 52, 53, 55, 56, 62, 68, 74, 75, 76, 78, 79, 131, 164, 209, 219, 236, 243, 269, 271, 278, 279, 307, 346, 352, 355, 358, 374, 387, 432, 444, 449, 458, 460, 515, 516, 517, 546, 547, 570, 573, 575, 576, 577, 583, 584, 585, 586, 588, 589, 590, 591, 595, 599, 616, 617, 630, 636, 646, 676, 682, 701, 702, 703, 704, 729, 733, 747, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 798, 801, 804], "attract": 0, "visual": [0, 43, 745, 747, 754, 774, 776, 787, 801, 803, 806], "graph": [0, 3, 5, 14, 15, 18, 22, 23, 26, 32, 33, 38, 43, 44, 62, 599, 701, 702, 703, 704, 730, 731, 747, 761, 770, 774, 779, 782, 787, 789, 793, 794, 795, 796, 797, 801, 804], "nice": [0, 776, 793, 801], "format": [0, 22, 23, 25, 26, 37, 39, 40, 41, 49, 52, 64, 67, 68, 69, 72, 109, 159, 193, 352, 363, 393, 474, 500, 580, 584, 585, 588, 590, 601, 602, 603, 604, 606, 607, 608, 610, 611, 711, 721, 722, 747, 755, 756, 762, 763, 764, 765, 766, 767, 774, 777, 781, 783, 784, 796, 797, 799, 801, 802], "result": [0, 3, 5, 6, 7, 8, 10, 12, 25, 26, 37, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 148, 150, 175, 176, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 403, 405, 406, 408, 409, 410, 411, 412, 417, 418, 419, 420, 421, 423, 429, 432, 434, 435, 436, 437, 438, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 495, 496, 500, 501, 502, 507, 508, 517, 524, 531, 532, 569, 570, 571, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 670, 673, 676, 677, 679, 683, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 735, 745, 747, 751, 753, 755, 757, 758, 760, 761, 762, 763, 765, 766, 769, 770, 772, 773, 774, 775, 776, 777, 781, 784, 787, 795, 796, 802, 804], "etc": [0, 28, 33, 40, 47, 51, 60, 62, 66, 70, 74, 83, 89, 126, 134, 135, 138, 352, 359, 380, 385, 395, 464, 465, 467, 468, 583, 597, 599, 690, 691, 692, 693, 701, 702, 703, 704, 728, 729, 730, 731, 732, 733, 734, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 767, 769, 774, 775, 776, 777, 781, 783, 784, 787, 789, 793, 795, 799, 801, 807], "gener": [0, 5, 14, 18, 25, 26, 28, 31, 39, 41, 43, 44, 47, 50, 51, 55, 60, 66, 70, 73, 74, 78, 83, 89, 118, 134, 135, 143, 151, 236, 239, 249, 250, 265, 269, 278, 300, 303, 307, 308, 309, 310, 311, 312, 346, 353, 359, 364, 414, 466, 478, 583, 584, 586, 590, 591, 593, 597, 601, 613, 637, 641, 644, 666, 690, 691, 693, 694, 716, 733, 741, 753, 754, 755, 756, 757, 758, 760, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 777, 780, 781, 783, 785, 786, 787, 789, 799, 800, 801, 802, 803, 804, 805, 806, 807], "tone": [0, 4], "feel": [0, 40, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 747, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 788, 795], "free": [0, 5, 39, 40, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 747, 749, 751, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 788, 795, 802, 804], "includ": [0, 14, 18, 28, 33, 47, 50, 51, 52, 56, 61, 64, 65, 68, 70, 73, 74, 75, 79, 84, 87, 88, 118, 119, 120, 134, 135, 137, 143, 216, 240, 244, 245, 246, 249, 251, 254, 262, 270, 283, 288, 302, 305, 306, 307, 312, 314, 316, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 334, 335, 336, 337, 340, 341, 346, 352, 355, 364, 370, 371, 372, 397, 400, 402, 435, 436, 438, 441, 443, 445, 448, 466, 468, 469, 477, 481, 483, 484, 486, 487, 513, 567, 583, 586, 588, 591, 595, 597, 598, 601, 602, 623, 644, 646, 670, 693, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 732, 743, 747, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 776, 777, 779, 781, 787, 792, 795, 796, 798, 799, 801, 803, 806, 807, 808], "emoji": [0, 753], "don": [0, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 39, 41, 66, 89, 747, 753, 754, 755, 762, 763, 764, 768, 772, 776, 779, 785, 787, 793, 795], "t": [0, 4, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 37, 39, 40, 41, 51, 55, 66, 74, 78, 89, 91, 93, 328, 343, 349, 351, 353, 401, 517, 535, 549, 571, 588, 589, 590, 595, 614, 615, 678, 729, 747, 749, 750, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 768, 770, 771, 772, 773, 776, 777, 779, 781, 783, 784, 785, 786, 787, 788, 792, 793, 795, 796, 799, 801, 803], "keep": [0, 1, 10, 12, 16, 22, 23, 25, 51, 58, 68, 74, 81, 91, 339, 353, 416, 593, 665, 752, 753, 754, 755, 757, 759, 760, 761, 762, 767, 773, 774, 776, 777, 779, 784, 786, 788, 796], "thing": [0, 23, 37, 39, 741, 752, 753, 754, 755, 759, 774, 776, 779, 783, 784, 791, 792, 793, 801], "super": [0, 3, 5, 10, 12, 25, 26, 39, 51, 74, 353, 401, 747, 767, 781, 784, 785, 786, 796], "seriou": 0, "given": [0, 3, 16, 25, 38, 51, 52, 57, 58, 60, 68, 74, 75, 76, 80, 81, 83, 91, 93, 94, 118, 127, 134, 135, 154, 155, 156, 157, 158, 170, 175, 194, 203, 205, 207, 208, 209, 211, 215, 288, 314, 317, 321, 322, 328, 329, 330, 332, 335, 346, 349, 352, 353, 354, 355, 358, 359, 364, 370, 371, 372, 373, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 395, 401, 405, 418, 419, 420, 421, 422, 423, 431, 432, 433, 440, 442, 453, 457, 461, 462, 463, 464, 465, 466, 467, 468, 478, 479, 480, 481, 486, 508, 531, 532, 542, 569, 570, 573, 575, 576, 577, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 647, 648, 649, 650, 651, 654, 655, 656, 657, 659, 660, 664, 665, 677, 678, 687, 688, 691, 692, 693, 695, 707, 708, 709, 710, 725, 726, 728, 729, 731, 732, 733, 734, 735, 741, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 782, 783, 785, 792, 793, 798, 803, 804, 807, 808], "an": [0, 2, 3, 14, 15, 16, 18, 21, 23, 25, 26, 31, 37, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 161, 164, 167, 171, 175, 176, 206, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 298, 299, 301, 302, 304, 305, 306, 308, 309, 312, 313, 314, 315, 316, 319, 322, 324, 329, 333, 338, 344, 346, 349, 352, 353, 354, 355, 358, 359, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 383, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401, 402, 419, 423, 424, 425, 426, 429, 430, 432, 439, 443, 444, 449, 450, 455, 456, 458, 459, 460, 464, 465, 467, 470, 471, 476, 477, 478, 479, 480, 481, 482, 485, 488, 493, 495, 496, 504, 507, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 526, 532, 535, 536, 545, 549, 553, 554, 555, 568, 571, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 676, 689, 691, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 747, 749, 751, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 807, 808], "intern": [0, 68, 96, 97, 98, 595, 670, 680, 681, 728, 729, 730, 731, 732, 734, 758, 761, 764, 766, 773, 775, 776, 778], "releas": [0, 40, 753, 754, 763, 777, 779, 787, 793, 801, 807], "compil": [0, 3, 4, 5, 6, 7, 8, 14, 15, 19, 23, 29, 33, 42, 44, 287, 586, 730, 731, 733, 747, 761, 774, 777, 779, 780, 782, 787, 789, 794, 796, 797, 800, 801, 802, 805, 808], "i": [0, 3, 4, 5, 6, 7, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 188, 190, 192, 193, 195, 196, 198, 200, 203, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 304, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 380, 383, 385, 387, 388, 389, 390, 391, 394, 395, 398, 399, 400, 401, 403, 404, 405, 407, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 432, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 527, 528, 531, 532, 533, 535, 541, 545, 546, 547, 549, 551, 553, 554, 555, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 741, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "around": [0, 9, 10, 12, 14, 68, 94, 355, 444, 449, 755, 757, 758, 760, 764, 769, 770, 774, 777, 783, 787, 789, 795, 799, 801, 808], "corner": [0, 51, 74, 352, 387, 754, 755, 774], "anybodi": 0, "abl": [0, 3, 5, 27, 31, 42, 44, 68, 91, 754, 755, 757, 763, 770, 773, 774, 777, 781, 786, 795, 804, 807], "start": [0, 1, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 40, 41, 47, 51, 68, 70, 74, 78, 118, 131, 134, 135, 332, 342, 349, 350, 352, 355, 364, 394, 434, 437, 445, 447, 454, 486, 583, 727, 741, 747, 748, 749, 753, 754, 755, 756, 762, 763, 765, 766, 768, 769, 774, 776, 779, 780, 781, 783, 784, 785, 787, 795, 796, 801, 807], "work": [0, 23, 25, 26, 37, 38, 40, 44, 51, 74, 91, 364, 487, 595, 677, 678, 682, 687, 688, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 773, 774, 775, 776, 777, 780, 781, 783, 785, 786, 788, 793, 795, 796, 799, 801, 803, 805, 808], "shortli": 0, "so": [0, 1, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 349, 362, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 590, 595, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 635, 636, 637, 639, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 681, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 747, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 796, 801, 802, 803, 805], "worri": [0, 25, 26, 753, 754, 768], "about": [0, 14, 15, 16, 19, 21, 23, 25, 26, 29, 40, 41, 48, 71, 161, 164, 584, 747, 750, 752, 753, 754, 755, 756, 757, 760, 762, 763, 764, 768, 769, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 793, 802, 803, 806], "have": [0, 1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 37, 39, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 161, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 300, 301, 313, 318, 319, 327, 329, 331, 332, 333, 334, 338, 341, 344, 346, 349, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 388, 389, 390, 393, 395, 396, 397, 398, 400, 401, 405, 406, 409, 410, 411, 412, 415, 417, 418, 419, 420, 421, 425, 426, 429, 430, 432, 437, 445, 446, 447, 448, 450, 453, 454, 461, 462, 463, 464, 465, 467, 468, 469, 471, 478, 479, 480, 481, 485, 488, 495, 496, 500, 501, 502, 507, 508, 517, 531, 532, 535, 569, 570, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 670, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 731, 732, 733, 734, 741, 747, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 807, 808], "access": [0, 22, 25, 26, 68, 747, 753, 754, 755, 762, 763, 768, 773, 774, 788, 796, 801, 803, 805], "transpil": [0, 6, 8, 9, 14, 15, 18, 28, 753, 767, 774, 780, 781, 782, 789, 794, 795, 801, 807, 808], "code": [0, 4, 6, 8, 14, 15, 22, 23, 25, 27, 28, 29, 30, 31, 32, 39, 40, 49, 50, 68, 72, 73, 94, 210, 256, 364, 485, 493, 501, 502, 517, 531, 535, 549, 585, 588, 590, 591, 593, 612, 631, 632, 633, 662, 745, 747, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 771, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 808], "now": [0, 4, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 41, 729, 730, 731, 747, 754, 757, 758, 759, 760, 761, 762, 763, 764, 769, 771, 774, 775, 776, 777, 779, 783, 784, 786, 787, 793, 795, 796, 801], "you": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 74, 75, 91, 93, 94, 355, 364, 432, 485, 507, 508, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 616, 725, 726, 728, 729, 731, 732, 733, 734, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 801], "can": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 44, 47, 48, 51, 52, 56, 58, 60, 62, 70, 71, 74, 75, 79, 81, 83, 85, 91, 103, 106, 119, 120, 135, 137, 151, 190, 207, 208, 209, 294, 297, 307, 344, 346, 352, 353, 358, 359, 362, 364, 374, 387, 405, 410, 412, 415, 429, 458, 465, 466, 471, 478, 524, 535, 568, 571, 580, 583, 584, 585, 588, 589, 590, 591, 593, 597, 616, 622, 629, 639, 643, 658, 662, 691, 692, 693, 701, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 798, 799, 800, 801, 802, 804, 805, 807, 808], "style": [0, 39, 41, 355, 444, 598, 699, 755, 768, 801], "stori": 0, "If": [0, 1, 3, 4, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 40, 43, 44, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 118, 119, 120, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 176, 192, 208, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 317, 318, 319, 321, 322, 323, 325, 329, 330, 335, 336, 338, 340, 341, 342, 346, 349, 350, 352, 353, 354, 355, 358, 359, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 380, 383, 385, 387, 388, 389, 390, 395, 399, 401, 403, 404, 405, 410, 412, 414, 415, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 432, 434, 435, 436, 439, 443, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 523, 524, 531, 532, 536, 546, 547, 549, 551, 553, 554, 567, 568, 571, 573, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 613, 614, 616, 617, 618, 619, 621, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 682, 683, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 727, 728, 729, 731, 732, 738, 747, 748, 749, 750, 751, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 786, 787, 788, 791, 795, 796], "anyon": [0, 747, 748, 755, 762, 787, 792, 807], "ha": [0, 3, 5, 7, 10, 12, 16, 18, 22, 25, 26, 28, 31, 33, 37, 44, 47, 51, 56, 58, 62, 64, 68, 71, 74, 75, 79, 81, 85, 87, 91, 136, 192, 216, 236, 239, 241, 243, 253, 269, 271, 274, 276, 279, 281, 282, 286, 314, 315, 346, 352, 354, 355, 364, 387, 419, 428, 451, 452, 455, 477, 479, 480, 482, 513, 583, 585, 586, 590, 591, 593, 598, 599, 601, 616, 629, 630, 638, 639, 641, 643, 646, 654, 661, 699, 702, 703, 704, 709, 710, 713, 715, 716, 717, 718, 727, 738, 753, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 785, 786, 787, 788, 791, 792, 793, 795, 797, 800, 801, 803, 804, 807], "ani": [0, 5, 10, 12, 14, 15, 16, 17, 18, 27, 28, 31, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 52, 56, 65, 66, 70, 72, 73, 74, 75, 88, 89, 91, 93, 94, 114, 115, 117, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 151, 152, 167, 171, 175, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 297, 301, 312, 313, 319, 322, 344, 346, 349, 352, 353, 355, 358, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 395, 401, 405, 433, 444, 458, 459, 460, 478, 481, 484, 485, 489, 499, 500, 501, 502, 503, 507, 511, 513, 515, 519, 521, 522, 540, 547, 554, 555, 562, 568, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 676, 677, 679, 680, 687, 689, 693, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 725, 726, 728, 729, 731, 732, 733, 734, 738, 741, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 799, 800, 801, 802, 804, 807, 808], "question": [0, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 747, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793], "ping": 0, "me": [0, 755], "guillermo": 0, "commun": [0, 40, 748, 753, 754, 755, 787, 792, 800, 801, 803], "ux": 0, "team": [0, 747, 748, 753, 754, 755, 774, 788, 803], "discord": [0, 40, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 747, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793], "channel": [0, 23, 41, 51, 52, 55, 74, 75, 78, 93, 94, 352, 358, 375, 376, 377, 387, 458, 459, 460, 500, 504, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 725, 726, 728, 729, 731, 732, 733, 734, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779], "To": [0, 7, 10, 12, 16, 25, 26, 37, 40, 41, 42, 243, 354, 419, 541, 586, 588, 728, 749, 753, 754, 757, 758, 759, 760, 763, 765, 767, 768, 770, 771, 774, 775, 776, 777, 784, 785, 786, 788, 795, 796], "ensur": [0, 10, 12, 23, 51, 52, 74, 75, 352, 353, 388, 389, 390, 414, 517, 588, 747, 753, 754, 755, 758, 763, 764, 765, 767, 768, 769, 771, 773, 774, 775, 776, 777, 788, 801], "similar": [0, 16, 25, 26, 278, 586, 590, 616, 729, 751, 753, 754, 761, 762, 763, 764, 767, 768, 770, 771, 772, 774, 775, 776, 777, 784, 787, 791, 796, 797, 798, 799, 800, 807], "ar": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 43, 46, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 68, 70, 73, 74, 75, 78, 79, 81, 83, 84, 85, 91, 93, 94, 118, 133, 135, 138, 143, 197, 202, 204, 209, 233, 235, 236, 239, 243, 264, 265, 269, 274, 275, 279, 281, 286, 287, 288, 312, 314, 315, 317, 318, 320, 321, 322, 324, 325, 330, 335, 338, 342, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 367, 368, 374, 375, 376, 377, 380, 385, 387, 395, 400, 401, 404, 412, 413, 414, 416, 417, 420, 424, 425, 426, 434, 435, 436, 438, 444, 447, 449, 451, 458, 460, 464, 465, 466, 467, 468, 478, 483, 484, 485, 486, 487, 489, 492, 493, 494, 503, 509, 514, 518, 529, 530, 539, 549, 561, 571, 583, 585, 586, 588, 589, 590, 591, 593, 595, 597, 598, 599, 613, 614, 616, 617, 619, 623, 624, 625, 629, 630, 632, 635, 639, 640, 644, 645, 646, 651, 652, 655, 659, 661, 671, 676, 681, 682, 683, 691, 692, 693, 696, 697, 698, 699, 701, 703, 727, 728, 731, 734, 735, 741, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808], "across": [0, 37, 61, 68, 75, 84, 93, 207, 208, 236, 243, 269, 287, 358, 460, 492, 513, 548, 585, 586, 588, 590, 595, 598, 613, 616, 676, 696, 697, 729, 753, 757, 763, 765, 767, 769, 770, 772, 776, 779, 799, 801, 806], "templat": [0, 747, 760, 766, 776], "help": [0, 14, 41, 43, 490, 535, 588, 601, 717, 728, 747, 748, 749, 750, 753, 754, 758, 759, 760, 761, 762, 763, 765, 768, 770, 771, 773, 774, 776, 777, 783, 784, 785, 788, 789, 797, 801, 803, 807], "get": [0, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 39, 40, 42, 49, 56, 68, 72, 79, 93, 159, 160, 161, 164, 192, 193, 194, 197, 203, 208, 211, 215, 491, 509, 530, 548, 584, 585, 588, 591, 595, 646, 672, 727, 728, 729, 741, 747, 748, 752, 753, 754, 756, 757, 762, 763, 764, 770, 771, 772, 773, 774, 775, 776, 781, 782, 783, 784, 785, 789, 793, 796, 801, 807], "It": [0, 3, 17, 25, 26, 27, 28, 37, 38, 39, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 148, 150, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 300, 301, 313, 318, 319, 327, 329, 331, 332, 333, 334, 338, 344, 346, 349, 352, 353, 354, 355, 358, 359, 364, 365, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 388, 389, 390, 393, 396, 397, 398, 405, 406, 409, 410, 411, 412, 417, 418, 419, 420, 421, 429, 432, 437, 445, 446, 447, 448, 450, 454, 458, 461, 462, 463, 464, 465, 467, 468, 478, 479, 480, 481, 488, 495, 496, 500, 501, 502, 507, 508, 517, 531, 532, 533, 569, 570, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 638, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 669, 670, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 704, 705, 708, 709, 710, 713, 715, 716, 718, 719, 720, 728, 729, 747, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 771, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 794, 796, 799, 801, 802, 804, 805, 806, 807, 808], "locat": [0, 41, 138, 364, 479, 583, 595, 597, 600, 674, 690, 707, 753, 755, 759, 760, 764, 774, 775, 776, 777, 788, 799], "asset": [0, 789], "01_templat": 0, "ipynb": 0, "pleas": [0, 31, 40, 44, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 747, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793], "make": [0, 3, 5, 6, 7, 8, 17, 25, 26, 27, 39, 43, 738, 747, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 783, 784, 786, 788, 792, 793, 796, 799, 801, 802, 803, 804, 807, 808], "copi": [0, 41, 44, 47, 48, 49, 50, 51, 52, 58, 68, 70, 71, 72, 73, 74, 75, 81, 91, 92, 119, 120, 126, 130, 148, 210, 270, 355, 422, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 510, 536, 546, 553, 554, 583, 584, 585, 586, 588, 593, 595, 600, 654, 655, 656, 658, 660, 661, 663, 665, 671, 706, 708, 754, 755, 757, 759, 762, 763, 766, 774, 775, 781, 787, 795, 796], "firstli": [0, 17, 18, 21, 27, 28, 32, 37, 758, 763, 765, 766, 767, 770, 771, 773, 779, 784, 797, 807], "updat": [0, 4, 5, 6, 8, 19, 25, 26, 39, 41, 46, 52, 53, 68, 75, 76, 91, 517, 531, 532, 535, 536, 558, 569, 570, 573, 575, 576, 577, 588, 589, 590, 594, 595, 613, 615, 667, 668, 669, 677, 678, 682, 687, 688, 726, 732, 733, 738, 747, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 769, 771, 772, 774, 775, 776, 779, 781, 783, 784, 786, 787], "file": [0, 39, 40, 41, 52, 68, 544, 566, 588, 731, 753, 754, 755, 757, 758, 759, 760, 761, 762, 764, 766, 767, 768, 770, 774, 775, 776, 777, 781, 784, 788, 797, 800, 801, 802], "name": [0, 6, 25, 26, 37, 39, 40, 41, 51, 56, 62, 66, 79, 85, 89, 243, 353, 355, 400, 453, 455, 490, 491, 586, 588, 591, 599, 623, 624, 628, 636, 637, 639, 644, 701, 702, 703, 731, 738, 740, 753, 754, 755, 759, 760, 761, 762, 765, 766, 767, 769, 774, 775, 776, 777, 778, 779, 781, 784, 786, 801], "match": [0, 48, 51, 68, 71, 74, 148, 243, 278, 320, 322, 349, 352, 355, 395, 428, 449, 452, 527, 584, 586, 588, 591, 624, 625, 630, 646, 751, 753, 758, 760, 761, 765, 775, 802, 807], "topic": [0, 14, 17, 18, 19, 27, 28, 29, 30, 31, 32, 747, 771, 783, 801], "your": [0, 2, 3, 4, 6, 8, 10, 12, 14, 15, 16, 18, 19, 22, 25, 26, 29, 37, 39, 41, 43, 747, 748, 749, 751, 752, 753, 754, 757, 759, 760, 762, 766, 768, 772, 774, 777, 779, 784, 785, 787, 788, 792, 793, 795, 796, 801], "Then": [0, 44, 590, 616, 750, 753, 754, 755, 759, 760, 762, 768, 771, 773, 776, 777, 787], "place": [0, 39, 46, 47, 50, 51, 52, 56, 58, 68, 70, 72, 73, 74, 75, 79, 81, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 300, 301, 304, 312, 313, 317, 319, 322, 323, 327, 329, 330, 331, 332, 334, 335, 336, 340, 341, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 434, 444, 449, 465, 478, 481, 485, 493, 501, 502, 507, 511, 513, 515, 516, 517, 531, 535, 549, 554, 558, 578, 583, 584, 585, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 731, 733, 747, 749, 752, 755, 756, 757, 760, 761, 762, 764, 765, 766, 769, 770, 774, 775, 776, 777, 779, 786, 789, 803], "its": [0, 8, 16, 18, 25, 26, 28, 31, 38, 39, 41, 46, 48, 51, 58, 68, 71, 74, 75, 81, 103, 106, 109, 115, 149, 154, 155, 156, 157, 158, 209, 236, 269, 288, 294, 344, 352, 355, 364, 391, 455, 481, 504, 552, 580, 582, 584, 585, 586, 588, 591, 593, 595, 629, 654, 658, 659, 663, 676, 727, 747, 753, 754, 758, 761, 762, 763, 764, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 786, 787, 789, 795, 800, 801, 807], "folder": [0, 41, 747, 749, 754, 755, 757, 760, 762, 770, 774, 776, 777, 778], "next": [0, 5, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 39, 41, 51, 74, 161, 327, 331, 336, 340, 349, 584, 728, 730, 731, 733, 749, 753, 754, 755, 759, 763, 765, 766, 768, 771, 782, 783, 784, 793, 801, 803], "edit": [0, 749, 753, 754, 755, 768], "titl": [0, 11, 13, 24, 40, 43, 747, 753, 755, 760], "descript": [0, 1, 34, 35, 36, 41, 44, 47, 50, 51, 56, 73, 74, 79, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 313, 319, 322, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 444, 478, 481, 507, 511, 513, 515, 554, 578, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 753, 755, 766, 772, 773], "accordingli": [0, 56, 61, 62, 64, 65, 79, 84, 87, 88, 136, 236, 241, 243, 259, 269, 283, 583, 586, 591, 598, 599, 601, 602, 646, 697, 701, 702, 703, 704, 712, 713, 714, 715, 716, 717, 718, 719, 720, 774, 781, 788], "thei": [0, 32, 37, 42, 51, 56, 60, 62, 68, 79, 83, 85, 174, 288, 325, 349, 584, 586, 591, 594, 597, 599, 644, 667, 668, 690, 701, 734, 747, 752, 753, 756, 757, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 781, 783, 784, 785, 786, 787, 795, 798, 801, 803, 804, 807, 808], "render": [0, 760, 766], "correctli": [0, 22, 25, 26, 39, 51, 56, 61, 74, 79, 84, 321, 349, 364, 484, 485, 486, 487, 591, 598, 630, 696, 753, 754, 755, 758, 761, 763, 765, 767, 768, 769, 775, 776, 779, 785, 787, 795, 796], "webpag": [0, 14], "content": [0, 1, 11, 13, 24, 25, 40, 41, 51, 68, 74, 364, 485, 753, 755, 760, 764, 773, 781, 784, 788], "behind": [0, 16, 25, 747, 756, 769, 776, 780, 782], "exist": [0, 16, 25, 26, 39, 40, 41, 44, 47, 51, 52, 68, 70, 74, 75, 81, 120, 355, 424, 425, 429, 430, 432, 434, 435, 436, 443, 456, 499, 535, 588, 593, 652, 654, 655, 656, 658, 660, 661, 663, 665, 733, 735, 747, 753, 754, 757, 759, 764, 765, 766, 770, 771, 773, 774, 776, 779, 781, 787, 789, 791, 792, 799, 801, 804, 807], "cell": [0, 1, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 40, 55, 78, 590, 615, 729, 762, 781], "where": [0, 6, 18, 22, 28, 29, 33, 41, 47, 50, 51, 52, 56, 58, 60, 61, 64, 65, 68, 70, 73, 74, 75, 79, 81, 83, 84, 87, 88, 91, 132, 133, 136, 138, 143, 224, 234, 236, 239, 241, 243, 244, 253, 258, 259, 260, 267, 268, 269, 274, 276, 280, 282, 286, 292, 294, 312, 314, 315, 326, 330, 337, 344, 346, 349, 352, 353, 354, 355, 358, 359, 364, 366, 367, 368, 374, 379, 380, 384, 400, 401, 404, 405, 407, 413, 416, 417, 424, 425, 426, 438, 444, 458, 459, 460, 464, 465, 467, 468, 478, 486, 487, 517, 531, 568, 583, 586, 588, 590, 591, 593, 595, 597, 598, 601, 602, 616, 619, 623, 624, 628, 630, 632, 634, 635, 636, 639, 640, 643, 645, 651, 653, 654, 656, 662, 666, 674, 681, 690, 691, 692, 693, 698, 699, 716, 718, 719, 720, 728, 732, 747, 748, 751, 754, 755, 757, 758, 759, 760, 761, 763, 764, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 784, 785, 786, 787, 788, 791, 792, 793, 795, 799, 808], "The": [0, 3, 5, 6, 7, 8, 14, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 130, 131, 133, 135, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 182, 188, 189, 190, 191, 192, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 440, 443, 444, 449, 450, 452, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 526, 528, 531, 532, 535, 537, 538, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 728, 729, 730, 731, 732, 733, 738, 741, 747, 748, 749, 750, 751, 753, 754, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 784, 785, 786, 788, 789, 790, 791, 793, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "h2": [0, 1, 11, 13, 24], "tag": [0, 1, 11, 13, 24, 754, 755], "section": [0, 1, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 45, 51, 62, 74, 103, 352, 355, 385, 395, 430, 439, 456, 599, 701, 702, 703, 704, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 779, 780, 784, 785, 797, 804, 807], "h3": [0, 1, 11, 13, 24], "subsect": [0, 1, 11, 13, 24, 753, 754, 755, 757, 762], "step": [0, 1, 11, 12, 13, 24, 25, 26, 37, 39, 40, 41, 51, 53, 70, 74, 76, 118, 134, 355, 438, 569, 570, 573, 575, 576, 577, 583, 589, 594, 667, 668, 669, 727, 733, 747, 749, 753, 754, 755, 758, 759, 761, 762, 763, 764, 765, 772, 774, 776, 781, 784, 785, 786, 793, 801], "explan": [0, 1, 11, 13, 24, 753, 754, 755, 761, 766, 769, 774, 777, 783], "go": [0, 4, 10, 12, 16, 23, 26, 31, 46, 51, 78, 352, 394, 595, 670, 671, 680, 681, 682, 747, 748, 749, 751, 753, 754, 755, 756, 759, 760, 762, 763, 765, 768, 774, 775, 776, 777, 780, 784, 787, 797, 801, 802, 806, 808], "default": [0, 3, 5, 25, 26, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 168, 169, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 192, 193, 195, 196, 200, 203, 204, 205, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 541, 545, 546, 547, 549, 551, 553, 554, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 678, 680, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 741, 753, 754, 755, 759, 760, 763, 764, 765, 766, 767, 769, 770, 774, 776, 779, 781, 785, 789, 795, 801], "which": [0, 3, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 151, 153, 159, 161, 164, 166, 169, 176, 188, 193, 197, 202, 204, 207, 208, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 298, 299, 300, 301, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 327, 329, 330, 331, 332, 334, 335, 336, 338, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 362, 364, 374, 375, 376, 377, 379, 380, 384, 385, 394, 395, 398, 401, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 449, 450, 451, 452, 453, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 490, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 523, 524, 529, 530, 531, 532, 546, 547, 549, 551, 553, 554, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 613, 614, 616, 617, 618, 619, 621, 622, 624, 625, 626, 627, 629, 630, 632, 633, 634, 636, 637, 638, 639, 643, 645, 646, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 675, 676, 677, 678, 683, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 743, 747, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 808], "text": [0, 4, 39, 51, 52, 353, 412, 753, 755, 760, 765, 766], "paragraph": [0, 1, 11, 13, 24, 760], "p": [0, 1, 11, 13, 24, 37, 51, 52, 56, 74, 75, 79, 136, 240, 353, 358, 397, 463, 495, 496, 583, 586, 588, 591, 595, 630, 646, 678, 729, 747, 754, 755, 756], "without": [0, 3, 28, 37, 41, 44, 62, 68, 541, 555, 588, 593, 595, 599, 658, 671, 701, 702, 703, 704, 741, 755, 758, 759, 761, 762, 763, 764, 765, 767, 769, 770, 774, 776, 777, 779, 783, 784, 785, 787, 795, 798, 801, 802, 803, 807], "path": [0, 40, 41, 737, 754, 760, 773, 774, 775, 788, 801], "correspond": [0, 3, 6, 8, 12, 25, 26, 40, 48, 50, 51, 52, 55, 58, 61, 62, 64, 68, 71, 73, 74, 78, 81, 87, 91, 94, 149, 161, 164, 224, 274, 288, 314, 324, 325, 346, 349, 352, 353, 355, 358, 364, 374, 380, 391, 395, 397, 400, 401, 402, 435, 436, 449, 458, 459, 460, 479, 480, 546, 568, 584, 586, 588, 590, 591, 593, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 619, 623, 624, 630, 637, 638, 658, 659, 690, 696, 697, 701, 702, 703, 704, 709, 710, 715, 716, 717, 718, 741, 747, 753, 755, 758, 759, 761, 762, 763, 765, 766, 767, 769, 770, 772, 774, 776, 779, 781, 795, 796, 801], "toctre": [0, 760], "index": [0, 39, 40, 41, 44, 47, 51, 52, 58, 61, 62, 63, 68, 70, 74, 75, 81, 84, 85, 86, 129, 136, 205, 301, 308, 309, 314, 315, 346, 352, 353, 355, 360, 362, 364, 374, 380, 405, 407, 412, 428, 434, 437, 445, 447, 449, 452, 454, 469, 470, 479, 487, 490, 508, 510, 531, 532, 536, 581, 583, 585, 588, 593, 595, 598, 599, 600, 658, 662, 672, 673, 674, 677, 678, 679, 685, 687, 696, 697, 699, 701, 702, 703, 705, 707, 729, 743, 761, 762, 767, 770, 771, 772, 773, 775, 776, 783, 801], "rst": [0, 770], "left": [0, 18, 28, 39, 40, 51, 56, 61, 63, 74, 79, 84, 86, 112, 113, 228, 243, 321, 335, 342, 349, 350, 352, 353, 355, 364, 386, 400, 404, 408, 414, 415, 435, 445, 483, 484, 485, 486, 487, 500, 582, 586, 588, 591, 598, 600, 623, 624, 630, 639, 644, 696, 707, 754, 755, 757, 760, 762, 763, 765], "mai": [0, 49, 50, 51, 56, 62, 63, 72, 73, 79, 86, 93, 94, 118, 130, 210, 236, 237, 243, 248, 256, 264, 265, 269, 270, 272, 287, 380, 499, 535, 583, 585, 586, 588, 591, 599, 600, 601, 637, 646, 701, 702, 703, 704, 705, 708, 712, 713, 714, 716, 752, 753, 754, 755, 757, 761, 762, 763, 767, 770, 771, 772, 774, 775, 776, 779, 782, 783, 785, 793, 808], "need": [0, 3, 6, 8, 14, 16, 22, 23, 25, 26, 39, 40, 41, 51, 52, 58, 74, 75, 81, 352, 353, 364, 374, 379, 380, 384, 400, 485, 495, 496, 517, 588, 590, 591, 593, 595, 616, 623, 651, 654, 681, 747, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 777, 779, 781, 783, 784, 787, 788, 793, 795, 796, 797, 801, 802, 803, 807], "add": [0, 18, 28, 41, 43, 50, 51, 59, 66, 68, 73, 74, 82, 89, 93, 94, 342, 350, 352, 394, 527, 555, 586, 588, 591, 596, 601, 643, 689, 717, 729, 732, 747, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 769, 770, 771, 773, 774, 776, 777, 779, 781, 783, 787, 788, 797, 799, 801], "grid": [0, 41, 47, 136, 304, 346, 583, 765, 776], "item": [0, 4, 25, 26, 37, 39, 41, 46, 52, 66, 68, 70, 73, 74, 75, 131, 155, 192, 246, 262, 270, 322, 324, 337, 497, 507, 508, 512, 546, 547, 583, 584, 585, 588, 595, 602, 675, 676, 677, 678, 682, 687, 688, 722, 730, 731, 747, 753, 761, 763, 781, 783, 784, 786, 795], "card": [0, 51, 74, 339, 349, 806], "refer": [0, 5, 51, 58, 64, 65, 74, 76, 81, 87, 88, 129, 143, 241, 259, 301, 312, 337, 346, 349, 352, 353, 355, 380, 385, 395, 398, 416, 434, 569, 570, 583, 586, 589, 591, 593, 601, 602, 619, 621, 645, 658, 716, 718, 719, 720, 729, 747, 752, 753, 754, 755, 757, 758, 760, 762, 763, 769, 770, 771, 772, 773, 774, 775, 776, 787, 788, 789, 801], "also": [0, 3, 4, 6, 8, 10, 12, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 32, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 164, 167, 168, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 349, 352, 353, 355, 362, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 391, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 583, 584, 586, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 680, 681, 682, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 738, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 784, 785, 786, 787, 788, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 808], "look": [0, 5, 16, 25, 26, 39, 41, 44, 747, 749, 753, 754, 755, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 781, 783, 785, 786, 788, 791, 795, 797, 801], "document": [0, 16, 25, 58, 243, 568, 586, 588, 662, 748, 750, 752, 755, 760, 762, 763, 765, 773, 774, 775, 776, 784, 786], "sphinx": [0, 750, 760], "design": [0, 16, 25, 74, 243, 300, 305, 306, 346, 586, 747, 756, 760, 762, 763, 773, 774, 775, 779, 781, 783, 787, 791, 792, 797, 799, 801, 804, 805, 806], "websit": [0, 43, 754, 757, 792], "alreadi": [1, 17, 21, 23, 25, 26, 31, 39, 41, 44, 51, 56, 68, 74, 79, 232, 242, 269, 279, 289, 355, 364, 425, 426, 444, 476, 485, 586, 591, 626, 634, 741, 747, 753, 754, 755, 759, 761, 763, 764, 769, 773, 774, 779, 787, 788, 801, 803, 808], "instal": [1, 5, 6, 8, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 39, 41, 42, 43, 44, 749, 750, 754, 755, 759, 760, 768], "skip": [1, 4, 41, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 353, 355, 375, 376, 377, 405, 407, 412, 417, 418, 420, 421, 424, 425, 426, 429, 445, 448, 450, 452, 453, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 595, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 741, 760, 770, 776], "colab": [1, 4, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 39, 41, 43, 44], "manual": [1, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 595, 670, 680, 681, 753, 754, 755, 763, 768, 776, 785, 788], "do": [1, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 37, 39, 41, 51, 52, 68, 74, 75, 236, 269, 278, 355, 364, 429, 485, 487, 517, 586, 588, 595, 670, 677, 680, 681, 682, 687, 747, 751, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 777, 779, 781, 783, 784, 785, 786, 787, 789, 793, 802, 807, 808], "run": [1, 3, 4, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 39, 41, 42, 43, 51, 53, 74, 76, 358, 458, 460, 569, 570, 575, 589, 594, 667, 668, 669, 729, 730, 731, 732, 741, 747, 749, 750, 753, 754, 756, 758, 759, 762, 764, 765, 767, 768, 769, 771, 774, 775, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 799, 801, 802, 803, 804, 806, 807, 808], "below": [1, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 32, 37, 40, 41, 42, 47, 51, 56, 79, 87, 141, 142, 143, 243, 253, 276, 312, 313, 319, 346, 349, 583, 586, 591, 622, 643, 718, 747, 748, 753, 754, 756, 757, 761, 762, 763, 764, 765, 767, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 799, 804, 806], "mind": [1, 10, 12, 16, 22, 25, 29, 753, 758, 759, 761, 776, 788, 796], "packag": [1, 3, 5, 7, 10, 26, 39, 40, 41, 44, 740, 747, 749, 751, 754, 762, 774, 787, 788, 801, 803], "avail": [1, 3, 5, 7, 25, 26, 41, 52, 75, 192, 198, 200, 201, 212, 355, 449, 501, 585, 588, 747, 754, 755, 761, 762, 763, 764, 766, 767, 774, 776, 779, 787, 788, 791, 795, 796, 806, 807], "click": [1, 3, 41, 753, 754, 755, 762, 766, 768, 782], "runtim": [1, 3, 4, 5, 6, 7, 8, 18, 25, 28, 39, 40, 756, 770, 776, 779, 801], "restart": [1, 3, 4, 5, 7, 39, 40, 754], "pip": [1, 3, 4, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 43, 44, 749, 751, 754, 760, 768], "q": [1, 3, 4, 5, 6, 7, 8, 39, 40, 41, 51, 55, 56, 74, 78, 79, 341, 349, 353, 364, 400, 487, 590, 591, 595, 617, 623, 624, 636, 678, 754, 755, 756, 775, 787], "git": [1, 3, 4, 5, 7, 25, 39, 40, 41, 42, 747, 749, 750, 752, 754, 755, 757, 760, 762, 768, 776, 788], "clone": [1, 3, 5, 7, 25, 39, 41, 42, 747, 749, 750, 755, 788], "http": [1, 3, 4, 5, 6, 7, 8, 12, 22, 25, 26, 39, 40, 41, 42, 43, 44, 50, 73, 76, 143, 151, 239, 249, 250, 265, 312, 346, 364, 478, 569, 570, 583, 584, 586, 589, 591, 593, 601, 637, 666, 716, 747, 749, 750, 754, 755, 757, 760, 762, 763, 766, 788, 796], "github": [1, 3, 4, 5, 7, 25, 39, 40, 41, 42, 43, 747, 749, 750, 752, 755, 757, 762, 763, 765, 766, 768, 776, 788, 791], "com": [1, 3, 4, 5, 7, 12, 25, 39, 40, 41, 42, 43, 747, 749, 750, 754, 755, 757, 760, 762, 763, 788], "unifyai": [1, 3, 5, 7, 25, 39, 40, 41, 42, 43, 747, 749, 750, 754, 755, 760, 788], "model": [1, 2, 3, 9, 14, 15, 16, 42, 44, 51, 236, 269, 354, 417, 586, 747, 784, 785, 789, 795, 796, 799, 800, 801, 802, 803, 804, 805, 807, 808], "depth": [1, 3, 5, 7, 40, 47, 51, 55, 70, 74, 78, 138, 352, 355, 387, 431, 500, 512, 583, 588, 590, 595, 608, 609, 682, 727, 731, 755, 762, 784, 785, 786, 788], "1": [1, 3, 4, 5, 6, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 148, 149, 150, 151, 155, 159, 160, 161, 164, 169, 171, 176, 192, 193, 197, 201, 202, 204, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 527, 529, 531, 532, 536, 545, 546, 547, 548, 549, 551, 553, 554, 555, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 727, 728, 729, 730, 731, 732, 733, 734, 738, 741, 747, 751, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 776, 779, 780, 781, 783, 784, 785, 786, 787, 792, 793, 795, 796], "from": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 91, 94, 118, 120, 128, 130, 131, 132, 133, 136, 137, 140, 143, 145, 151, 169, 175, 176, 192, 197, 202, 208, 209, 235, 243, 244, 271, 275, 276, 283, 287, 300, 301, 307, 312, 314, 315, 320, 323, 325, 326, 328, 329, 341, 346, 349, 352, 353, 355, 359, 364, 375, 376, 377, 391, 395, 408, 414, 417, 428, 430, 439, 444, 450, 452, 455, 456, 464, 465, 466, 467, 468, 479, 480, 499, 507, 508, 510, 530, 541, 551, 568, 570, 571, 575, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 597, 598, 599, 601, 602, 604, 612, 613, 619, 622, 639, 643, 644, 645, 652, 655, 658, 661, 667, 668, 669, 671, 682, 683, 684, 690, 691, 692, 693, 697, 700, 701, 703, 709, 710, 715, 716, 717, 718, 719, 720, 726, 727, 728, 729, 731, 733, 738, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808], "repositori": [1, 3, 5, 7, 749, 750, 754, 755, 756, 757, 760, 793], "cd": [1, 3, 5, 7, 25, 42, 747, 749, 750, 754, 755, 788], "here": [1, 3, 11, 13, 16, 21, 24, 25, 26, 37, 39, 40, 41, 42, 44, 74, 279, 421, 586, 747, 751, 752, 753, 754, 755, 757, 759, 760, 761, 762, 763, 765, 768, 769, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 795, 796, 801, 802], "normal": [1, 3, 7, 10, 11, 12, 13, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 51, 59, 60, 74, 82, 83, 91, 338, 349, 352, 358, 364, 373, 374, 379, 380, 383, 384, 385, 395, 458, 459, 460, 461, 462, 463, 478, 481, 593, 596, 597, 652, 662, 689, 690, 692, 728, 729, 732, 747, 753, 773, 774, 779, 784, 795, 799], "resnet": [2, 8, 14, 25, 795, 796], "imag": [2, 3, 6, 8, 10, 14, 22, 25, 26, 39, 40, 41, 42, 43, 44, 50, 51, 55, 73, 74, 78, 93, 216, 217, 218, 219, 222, 225, 234, 237, 239, 241, 250, 251, 252, 257, 259, 272, 279, 280, 282, 283, 287, 352, 370, 371, 387, 388, 389, 391, 500, 586, 588, 590, 603, 604, 605, 606, 607, 610, 611, 612, 729, 747, 749, 754, 779, 781, 782, 784, 786, 788, 795, 796, 801], "classif": [2, 3, 7, 14, 39, 747, 801], "acceler": [2, 14, 747, 763, 774, 799, 803, 804, 805, 806], "pytorch": [2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 23, 25, 26, 37, 44, 279, 586, 733, 747, 752, 753, 758, 763, 764, 767, 769, 770, 773, 774, 775, 779, 781, 786, 787, 789, 792, 793, 795, 796, 802, 804, 805, 807, 808], "jax": [2, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 31, 37, 39, 43, 45, 50, 51, 52, 62, 67, 73, 75, 101, 103, 106, 109, 287, 328, 349, 364, 487, 517, 549, 568, 580, 586, 588, 599, 701, 702, 703, 704, 725, 738, 747, 751, 752, 753, 754, 755, 757, 759, 763, 764, 767, 769, 772, 773, 774, 775, 776, 777, 779, 781, 783, 786, 787, 792, 793, 795, 796, 802, 804, 807, 808], "convert": [2, 5, 6, 8, 10, 12, 14, 15, 17, 19, 22, 23, 25, 26, 27, 29, 31, 39, 42, 44, 46, 47, 50, 68, 69, 70, 73, 91, 119, 120, 137, 146, 147, 189, 190, 191, 192, 203, 211, 215, 235, 275, 355, 360, 424, 425, 426, 469, 533, 550, 552, 553, 554, 556, 583, 584, 585, 586, 588, 591, 595, 647, 671, 682, 683, 738, 741, 747, 753, 758, 759, 771, 772, 774, 776, 778, 781, 787, 789, 793, 796, 799, 800, 807], "them": [2, 3, 6, 8, 10, 12, 14, 25, 26, 31, 494, 530, 588, 729, 747, 750, 753, 755, 757, 758, 759, 760, 761, 762, 763, 767, 768, 771, 773, 774, 775, 776, 778, 781, 783, 784, 785, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 801, 803, 807], "faster": [2, 3, 6, 8, 14, 25, 26, 42, 44, 51, 56, 74, 79, 353, 415, 591, 639, 752, 789, 803, 806], "infer": [2, 6, 8, 14, 18, 28, 30, 31, 40, 42, 44, 47, 51, 52, 55, 58, 70, 74, 75, 78, 81, 118, 120, 128, 132, 133, 137, 140, 145, 154, 155, 156, 157, 158, 300, 301, 359, 466, 511, 545, 583, 584, 588, 590, 593, 613, 658, 738, 756, 759, 763, 764, 776, 781, 786, 796, 799, 800, 803, 805], "mmpretrain": [2, 14], "segment": [2, 14, 51, 74, 314, 315, 346, 760, 765], "unet": [2, 14], "alexnet": [2, 14], "In": [2, 3, 4, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 44, 49, 51, 52, 58, 72, 75, 81, 91, 203, 210, 211, 215, 219, 236, 237, 243, 251, 252, 269, 272, 278, 280, 352, 355, 358, 375, 376, 377, 424, 425, 426, 430, 432, 434, 435, 436, 437, 439, 443, 450, 456, 458, 460, 490, 510, 517, 535, 585, 586, 588, 591, 593, 597, 637, 654, 655, 656, 658, 660, 661, 663, 665, 693, 747, 749, 753, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 791, 793, 795, 796, 797, 799, 801, 802, 804, 807], "we": [2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 42, 43, 44, 51, 56, 57, 58, 66, 74, 79, 80, 89, 91, 109, 343, 351, 355, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 453, 456, 500, 510, 549, 571, 572, 574, 579, 580, 588, 589, 591, 592, 593, 632, 648, 654, 655, 656, 658, 660, 661, 663, 665, 727, 731, 738, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 801, 802, 806, 807], "show": [2, 3, 4, 7, 14, 20, 25, 26, 27, 28, 30, 37, 39, 41, 42, 534, 543, 565, 588, 727, 747, 753, 754, 755, 760, 762, 765, 768, 773, 774, 776, 778, 787, 795, 801], "how": [2, 3, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 37, 40, 43, 44, 45, 50, 51, 67, 73, 74, 101, 103, 106, 109, 236, 269, 287, 355, 428, 449, 452, 580, 586, 725, 727, 728, 729, 730, 731, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 791, 793, 797, 801], "written": [2, 3, 4, 14, 16, 25, 26, 39, 52, 747, 754, 757, 758, 766, 768, 769, 773, 774, 777, 781, 783, 786, 787, 791, 796, 799, 801, 805, 807, 808], "nativ": [3, 4, 16, 25, 26, 46, 47, 49, 52, 69, 72, 75, 93, 97, 137, 146, 147, 153, 154, 155, 156, 157, 158, 172, 175, 190, 191, 192, 193, 203, 211, 215, 517, 519, 523, 530, 535, 552, 583, 584, 585, 588, 726, 738, 747, 751, 753, 759, 763, 764, 767, 770, 771, 773, 774, 775, 776, 781, 783, 784, 789, 795, 796, 799, 808], "integr": [3, 4, 10, 12, 19, 26, 29, 48, 50, 51, 71, 73, 74, 148, 288, 334, 349, 364, 481, 584, 586, 747, 752, 754, 756, 771, 796, 799, 801, 803, 804, 805], "three": [3, 4, 14, 20, 30, 31, 41, 51, 136, 300, 346, 355, 426, 583, 754, 755, 761, 762, 763, 765, 774, 776, 779, 780, 781, 802, 807], "major": [3, 4, 598, 699, 763, 764, 775, 776, 787, 792, 798, 801], "ml": [3, 4, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 44, 747, 748, 752, 774, 780, 781, 782, 784, 785, 786, 790, 792, 793, 796, 797, 798, 799, 800, 801, 804, 806, 808], "framework": [3, 4, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 39, 41, 43, 46, 52, 166, 188, 198, 201, 212, 498, 514, 518, 549, 552, 584, 585, 588, 595, 672, 726, 733, 738, 751, 753, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 769, 770, 771, 773, 774, 776, 777, 779, 780, 781, 783, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 805], "sinc": [3, 5, 7, 22, 23, 25, 26, 39, 41, 51, 74, 349, 747, 754, 755, 757, 758, 759, 761, 762, 763, 764, 767, 773, 774, 787, 792, 801, 807], "want": [3, 5, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 38, 39, 41, 51, 66, 74, 89, 236, 269, 355, 432, 586, 727, 731, 747, 748, 750, 753, 754, 755, 760, 762, 764, 767, 768, 770, 771, 772, 773, 776, 779, 784, 785, 786, 787, 788, 792, 796], "after": [3, 4, 5, 6, 7, 8, 25, 26, 40, 51, 52, 53, 55, 59, 68, 74, 75, 76, 78, 82, 182, 283, 336, 349, 352, 353, 355, 374, 375, 376, 377, 394, 411, 433, 444, 517, 570, 573, 575, 576, 577, 584, 586, 588, 589, 590, 595, 596, 603, 604, 605, 606, 608, 610, 612, 613, 681, 689, 733, 738, 747, 749, 753, 754, 755, 757, 759, 760, 762, 763, 765, 767, 769, 772, 775, 776, 780, 788, 795, 796, 801], "first": [3, 4, 5, 7, 10, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 39, 42, 43, 44, 47, 50, 51, 56, 58, 60, 61, 62, 64, 70, 73, 74, 75, 79, 81, 83, 85, 87, 91, 93, 94, 114, 115, 134, 135, 143, 174, 182, 192, 219, 224, 226, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 269, 272, 274, 285, 286, 294, 300, 301, 312, 314, 315, 317, 326, 328, 329, 330, 336, 340, 341, 344, 346, 349, 352, 353, 354, 355, 362, 364, 374, 399, 400, 401, 403, 406, 420, 430, 434, 441, 444, 446, 447, 450, 455, 465, 467, 471, 479, 480, 481, 487, 492, 582, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 598, 599, 600, 601, 616, 619, 622, 623, 624, 626, 629, 634, 636, 637, 639, 641, 645, 658, 659, 662, 663, 667, 668, 669, 670, 671, 680, 681, 683, 695, 696, 697, 701, 702, 703, 706, 707, 709, 710, 728, 729, 730, 731, 733, 738, 747, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 764, 765, 768, 769, 770, 771, 773, 774, 776, 779, 781, 783, 784, 786, 788, 791, 792, 795, 796, 799, 801, 802, 806], "notebook": [3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31, 40, 731], "automat": [3, 5, 7, 25, 26, 31, 753, 754, 755, 756, 759, 760, 762, 763, 768, 770, 773, 776, 779, 780, 782, 785, 786, 788, 789, 793, 801, 804, 808], "sure": [3, 5, 6, 7, 8, 25, 39, 753, 754, 755, 757, 762, 767, 774, 775, 776, 779, 788], "gpu": [3, 4, 5, 6, 7, 8, 39, 41, 43, 44, 192, 194, 195, 198, 201, 203, 205, 207, 208, 211, 213, 215, 585, 747, 754, 755, 762, 764, 783, 788, 799, 801, 804, 805, 806], "enabl": [3, 4, 5, 6, 7, 8, 23, 40, 51, 56, 68, 79, 94, 352, 354, 374, 419, 535, 588, 591, 632, 747, 754, 755, 758, 761, 763, 770, 771, 772, 773, 774, 776, 777, 780, 782, 784, 786, 787, 789, 792, 795, 799, 800, 801, 802, 803, 804, 807, 808], "dm": [3, 4, 5, 6, 8, 25, 26, 37, 39], "haiku": [3, 4, 5, 6, 8, 23, 25, 26, 37, 39, 43, 726, 747, 786, 793, 796, 801], "exit": [3, 5, 7, 22, 25, 26, 764], "download": [3, 7, 10, 12, 25, 26, 40, 41, 44, 754, 776, 795, 796], "imagenet": [3, 12, 40, 42, 747], "class": [3, 5, 7, 10, 12, 16, 25, 26, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 131, 140, 145, 161, 164, 177, 179, 180, 239, 276, 319, 339, 349, 363, 364, 371, 372, 400, 484, 485, 491, 500, 504, 517, 527, 549, 583, 584, 585, 586, 588, 590, 592, 595, 596, 615, 617, 623, 634, 639, 648, 664, 670, 671, 682, 689, 704, 711, 715, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 741, 745, 747, 753, 759, 760, 761, 763, 764, 765, 766, 769, 771, 772, 775, 776, 779, 781, 782, 784, 785, 786, 787, 789, 795, 796, 799, 801, 802, 808], "preprocess": [3, 7, 25, 26, 39, 42, 795], "wget": [3, 5, 7, 39, 40, 43, 754], "raw": [3, 5, 6, 7, 8, 22, 25, 26, 39, 42, 43, 68, 747, 766, 796, 802], "githubusercont": [3, 5, 7, 39, 43], "hub": [3, 5, 7, 39, 42, 44], "master": [3, 5, 7, 17, 18, 19, 27, 28, 29, 30, 31, 32, 39, 41, 42, 43, 762, 801], "imagenet_class": [3, 7], "txt": [3, 7, 40, 52, 754, 757, 760], "r": [3, 7, 39, 40, 51, 56, 68, 74, 79, 91, 328, 343, 349, 351, 571, 589, 591, 593, 636, 665, 754, 755, 756, 772, 775], "f": [3, 4, 6, 7, 25, 26, 38, 39, 41, 51, 58, 74, 81, 294, 307, 344, 346, 355, 434, 593, 595, 658, 673, 677, 678, 679, 682, 687, 688, 747, 748, 755, 756, 761, 762, 781, 784, 793, 797], "categori": [3, 7, 753, 757, 758, 761, 763, 767, 774, 777, 780], "strip": [3, 7, 18, 28, 792], "readlin": [3, 7, 40], "cat": [3, 7, 40, 775, 779, 781, 786, 795, 796], "jpg": [3, 5, 6, 7, 8, 22, 25, 26, 41, 42, 747, 796], "filenam": [3, 5, 7, 25, 26, 39, 41, 44, 52, 731, 737, 784], "3": [3, 5, 6, 7, 10, 12, 16, 19, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 129, 131, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 148, 149, 150, 151, 155, 159, 161, 169, 171, 176, 190, 192, 193, 204, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 370, 371, 372, 373, 375, 378, 379, 380, 383, 384, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 411, 416, 417, 418, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 443, 444, 449, 450, 451, 452, 453, 455, 456, 457, 461, 462, 463, 466, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 527, 531, 532, 545, 546, 547, 551, 554, 555, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 741, 747, 753, 754, 757, 758, 759, 761, 762, 763, 765, 767, 770, 772, 775, 776, 781, 783, 784, 785, 786, 795, 796, 808], "import": [3, 6, 8, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 42, 43, 44, 51, 62, 66, 70, 74, 89, 190, 191, 195, 205, 207, 364, 478, 585, 594, 599, 669, 704, 738, 747, 749, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 781, 783, 784, 786, 787, 788, 792, 795, 796, 797, 799, 801, 804, 805, 807], "torchvis": [3, 6, 7, 39, 793], "transform": [3, 4, 6, 7, 8, 22, 25, 26, 39, 40, 42, 51, 55, 74, 78, 352, 353, 373, 374, 379, 380, 383, 384, 385, 395, 408, 590, 614, 729, 747, 771, 776, 786, 789, 795, 796, 799, 801, 802, 803], "pil": [3, 5, 6, 7, 8, 22, 25, 26, 40, 41, 42, 747, 796], "numpi": [3, 4, 5, 6, 8, 10, 12, 17, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 41, 42, 43, 44, 50, 51, 52, 64, 73, 74, 75, 143, 172, 190, 220, 280, 312, 346, 364, 478, 485, 493, 517, 546, 549, 553, 583, 584, 585, 586, 588, 601, 711, 738, 741, 747, 752, 753, 754, 755, 757, 758, 759, 762, 763, 764, 767, 769, 773, 775, 776, 777, 779, 781, 783, 786, 788, 789, 791, 792, 795, 796, 803, 808], "np": [3, 4, 5, 6, 8, 10, 12, 17, 20, 21, 22, 23, 25, 26, 27, 30, 31, 32, 37, 38, 39, 40, 41, 42, 44, 47, 50, 51, 73, 74, 75, 119, 120, 126, 137, 172, 249, 253, 352, 353, 379, 384, 396, 546, 583, 584, 586, 588, 595, 676, 738, 741, 747, 753, 758, 763, 764, 767, 769, 773, 774, 775, 776, 777, 779, 781, 783, 784, 786, 789], "warn": [3, 4, 5, 39, 40, 41, 44, 744, 755, 778, 795, 796], "time": [3, 4, 6, 8, 23, 25, 26, 31, 39, 41, 42, 43, 51, 53, 56, 62, 74, 76, 85, 91, 131, 322, 349, 352, 353, 355, 364, 380, 385, 412, 416, 444, 450, 478, 570, 575, 583, 589, 590, 591, 593, 594, 598, 599, 613, 615, 629, 664, 667, 668, 669, 696, 697, 701, 702, 729, 730, 731, 753, 754, 755, 759, 761, 762, 763, 765, 769, 770, 771, 773, 774, 776, 777, 781, 784, 786, 787, 788, 791, 792, 793, 795, 796, 799, 801, 802, 805, 806, 807], "filterwarn": [3, 4], "ignor": [3, 4, 38, 46, 47, 51, 68, 74, 136, 352, 353, 355, 375, 376, 377, 401, 446, 447, 451, 583, 590, 591, 595, 616, 628, 681, 682, 733, 760, 762, 765, 776, 787, 807], "compos": [3, 6, 7, 25, 26, 39, 51, 74, 352, 366, 367, 368, 727, 754, 761, 774, 776, 787, 795, 801, 808], "resiz": [3, 5, 6, 7, 39, 40, 51, 74, 352, 387, 779], "256": [3, 5, 7, 50, 75, 279, 280, 547, 590, 605, 607, 609], "centercrop": [3, 7], "224": [3, 7, 10, 12, 25, 26, 39, 40, 42, 747, 796], "totensor": [3, 6, 7, 39], "mean": [3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 51, 52, 55, 57, 58, 60, 64, 66, 68, 70, 74, 75, 78, 80, 81, 83, 87, 89, 91, 131, 209, 321, 349, 352, 353, 354, 355, 358, 359, 364, 380, 385, 398, 408, 417, 418, 419, 420, 421, 429, 434, 444, 458, 460, 465, 484, 485, 501, 571, 572, 574, 579, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 597, 601, 605, 607, 608, 609, 612, 613, 621, 648, 658, 667, 668, 669, 676, 691, 692, 728, 729, 732, 747, 754, 755, 756, 757, 759, 761, 763, 764, 765, 770, 772, 773, 774, 776, 777, 779, 781, 783, 784, 785, 786, 787, 789, 796, 798, 801], "0": [3, 4, 5, 6, 7, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 126, 129, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 159, 161, 164, 165, 169, 171, 176, 189, 192, 194, 197, 202, 203, 204, 205, 207, 208, 209, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 362, 364, 370, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 394, 395, 397, 398, 400, 401, 402, 404, 405, 407, 408, 409, 412, 413, 416, 417, 418, 419, 420, 421, 423, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 494, 495, 496, 499, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 523, 524, 527, 529, 531, 532, 536, 541, 545, 546, 547, 549, 551, 553, 554, 563, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 629, 630, 631, 632, 633, 635, 637, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 741, 747, 751, 754, 755, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 781, 783, 784, 785, 786, 787, 795, 796], "485": [3, 7, 39], "456": [3, 7, 39, 776], "406": [3, 7, 39, 51, 74, 373, 495, 588], "std": [3, 6, 7, 8, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 40, 55, 60, 64, 78, 83, 87, 359, 465, 590, 597, 601, 605, 607, 608, 609, 612, 691, 692, 747, 765], "229": [3, 7, 39, 275, 586], "225": [3, 7, 39, 41, 230, 586], "torch_img": [3, 5, 7], "unsqueez": [3, 5, 6, 7], "img": [3, 5, 7, 22, 25, 26, 39, 40, 41, 43, 747, 784, 796], "4": [3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 23, 25, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 108, 109, 117, 118, 119, 120, 126, 129, 131, 133, 134, 135, 136, 137, 138, 140, 143, 145, 149, 150, 151, 159, 161, 164, 169, 171, 176, 193, 194, 202, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 303, 308, 309, 312, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 370, 371, 372, 373, 375, 376, 378, 379, 380, 383, 384, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 408, 417, 418, 420, 422, 424, 425, 426, 428, 429, 430, 431, 434, 435, 436, 439, 440, 441, 443, 444, 449, 450, 451, 452, 453, 455, 456, 457, 461, 462, 463, 466, 468, 469, 471, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 510, 513, 515, 516, 517, 524, 531, 532, 546, 547, 548, 549, 551, 555, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 643, 644, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 733, 741, 747, 751, 753, 754, 759, 760, 761, 762, 763, 765, 772, 775, 776, 779, 781, 783, 784, 785, 786, 793, 795, 801, 807, 808], "ipython": [3, 5, 7, 25, 26, 44], "displai": [3, 5, 7, 22, 25, 26, 39, 40, 41, 43, 44, 754, 760, 762, 767, 776, 784], "end": [3, 5, 39, 40, 51, 74, 118, 224, 280, 332, 349, 355, 434, 444, 446, 447, 449, 583, 586, 727, 747, 754, 755, 759, 762, 773, 777, 779, 780, 787, 799, 804], "see": [3, 4, 6, 8, 17, 18, 23, 25, 26, 27, 28, 32, 37, 38, 44, 45, 48, 50, 56, 61, 62, 64, 65, 67, 73, 74, 79, 84, 87, 88, 91, 93, 94, 101, 103, 106, 109, 118, 130, 134, 143, 150, 169, 176, 219, 224, 226, 228, 229, 230, 231, 236, 237, 241, 243, 247, 248, 255, 256, 259, 261, 263, 265, 266, 269, 272, 274, 278, 285, 287, 290, 312, 346, 353, 397, 580, 583, 584, 586, 591, 598, 599, 601, 602, 619, 632, 635, 638, 645, 646, 697, 701, 702, 703, 704, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 747, 748, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 765, 768, 769, 770, 774, 775, 776, 779, 781, 783, 784, 787, 791, 797], "5": [3, 4, 5, 6, 7, 10, 18, 21, 22, 23, 25, 26, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 118, 119, 120, 131, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 149, 150, 151, 155, 159, 161, 169, 171, 176, 193, 202, 207, 210, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 316, 319, 321, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 360, 362, 364, 370, 371, 372, 373, 375, 376, 378, 379, 380, 383, 384, 388, 389, 390, 391, 393, 394, 395, 399, 400, 402, 403, 404, 413, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 434, 435, 438, 439, 440, 443, 444, 449, 450, 451, 452, 453, 456, 457, 462, 463, 466, 468, 469, 471, 476, 478, 479, 480, 481, 482, 483, 485, 487, 493, 494, 495, 496, 499, 500, 501, 502, 504, 507, 508, 510, 513, 515, 516, 517, 531, 532, 536, 546, 547, 548, 549, 551, 555, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 633, 634, 635, 637, 639, 640, 641, 643, 644, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 741, 747, 753, 754, 755, 757, 759, 761, 762, 763, 765, 767, 769, 772, 775, 776, 783, 784, 785, 796], "set_backend": [3, 4, 5, 7, 16, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 38, 40, 41, 42, 50, 52, 66, 73, 75, 163, 172, 190, 191, 205, 207, 220, 493, 517, 584, 585, 588, 594, 669, 738, 747, 757, 759, 763, 764, 770, 771, 772, 781, 783, 786, 795, 796], "ivy_model": [3, 4, 5, 7, 42], "ivy_alexnet": 3, "order": [3, 19, 29, 31, 39, 42, 44, 47, 51, 52, 55, 56, 58, 62, 63, 68, 74, 78, 79, 81, 85, 86, 91, 93, 94, 119, 120, 136, 143, 224, 243, 286, 312, 328, 346, 349, 353, 355, 358, 362, 397, 400, 401, 402, 403, 407, 411, 413, 416, 434, 435, 436, 441, 442, 453, 458, 459, 460, 471, 583, 586, 590, 591, 593, 594, 598, 599, 600, 604, 605, 606, 607, 608, 609, 612, 623, 624, 630, 639, 640, 644, 646, 655, 658, 667, 668, 699, 701, 702, 703, 704, 705, 707, 708, 727, 731, 732, 734, 747, 753, 754, 755, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 784, 786, 787, 791, 797, 800, 801, 802, 804, 807], "quick": [3, 14, 26, 755, 756, 775, 785], "call": [3, 6, 10, 12, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 39, 43, 51, 66, 71, 74, 89, 91, 94, 114, 168, 169, 209, 353, 364, 411, 485, 535, 541, 555, 571, 572, 574, 582, 585, 588, 589, 591, 595, 637, 670, 676, 680, 681, 727, 729, 730, 731, 733, 738, 747, 753, 755, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 783, 784, 785, 786, 787, 792, 795, 796, 801, 802, 805], "take": [3, 7, 16, 23, 25, 26, 31, 37, 39, 42, 51, 56, 58, 64, 74, 81, 91, 114, 115, 117, 138, 231, 276, 283, 294, 344, 352, 353, 355, 371, 379, 384, 389, 403, 428, 434, 452, 479, 480, 582, 583, 586, 590, 591, 593, 594, 616, 629, 633, 658, 669, 709, 728, 729, 741, 747, 748, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 779, 781, 783, 785, 786, 787, 788, 793, 795, 796, 798, 799, 807], "moment": [3, 53, 76, 569, 570, 575, 589, 733, 753, 759, 787, 795, 796], "one": [3, 6, 8, 10, 12, 14, 15, 18, 19, 22, 23, 25, 26, 28, 29, 41, 42, 43, 47, 51, 52, 55, 56, 58, 61, 62, 64, 68, 70, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 91, 118, 126, 136, 138, 139, 140, 149, 151, 209, 230, 236, 243, 244, 261, 267, 268, 269, 288, 294, 300, 303, 304, 317, 321, 326, 327, 330, 331, 332, 334, 335, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 364, 373, 375, 379, 380, 383, 384, 387, 396, 397, 405, 412, 420, 424, 425, 426, 434, 435, 436, 441, 443, 448, 451, 458, 459, 460, 464, 469, 479, 480, 483, 484, 485, 486, 487, 489, 527, 531, 532, 534, 551, 553, 554, 567, 569, 570, 573, 575, 577, 578, 583, 584, 585, 586, 588, 589, 590, 591, 593, 596, 598, 599, 601, 604, 605, 606, 607, 608, 609, 612, 626, 629, 630, 634, 636, 645, 646, 654, 655, 656, 659, 661, 665, 689, 696, 699, 701, 702, 703, 704, 709, 711, 732, 735, 738, 744, 747, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 783, 784, 786, 787, 788, 789, 792, 793, 796, 801, 802, 804, 807], "cost": [3, 53, 76, 569, 570, 573, 575, 576, 577, 589, 594, 667, 668, 669, 763, 779, 799], "arg": [3, 5, 6, 7, 10, 12, 20, 21, 23, 25, 26, 30, 31, 32, 43, 46, 68, 90, 97, 114, 199, 209, 555, 582, 583, 585, 588, 725, 726, 729, 731, 735, 738, 741, 745, 747, 758, 763, 764, 767, 772, 773, 774, 779, 781, 785, 795, 796], "asarrai": [3, 4, 5, 6, 7, 40, 47, 51, 52, 63, 70, 74, 75, 86, 119, 362, 470, 471, 500, 511, 515, 516, 546, 547, 583, 588, 590, 599, 600, 604, 702, 706, 767, 771, 774, 775], "cuda": [3, 4, 5, 6, 7, 8, 16, 25, 40, 41, 44, 47, 51, 60, 70, 74, 83, 134, 135, 138, 189, 190, 191, 205, 207, 359, 464, 465, 467, 468, 583, 585, 597, 690, 691, 692, 693, 728, 729, 730, 731, 732, 733, 734, 747, 781, 787, 789, 806], "7": [3, 5, 6, 8, 10, 12, 17, 18, 20, 21, 23, 37, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 103, 104, 105, 106, 118, 119, 120, 134, 137, 138, 155, 161, 164, 194, 216, 219, 222, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 261, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 279, 280, 281, 283, 286, 287, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 303, 306, 307, 317, 319, 321, 322, 328, 329, 330, 332, 334, 335, 342, 344, 346, 349, 350, 352, 353, 354, 355, 360, 364, 370, 371, 372, 373, 378, 379, 383, 384, 388, 391, 393, 394, 395, 399, 409, 417, 418, 419, 420, 421, 424, 425, 426, 430, 434, 439, 440, 443, 444, 449, 450, 452, 456, 457, 466, 468, 469, 476, 479, 480, 482, 483, 487, 493, 495, 496, 500, 501, 504, 515, 516, 517, 524, 531, 532, 546, 549, 569, 570, 572, 573, 574, 575, 577, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 607, 609, 612, 613, 614, 617, 619, 620, 621, 622, 625, 626, 629, 631, 634, 637, 639, 640, 641, 643, 644, 648, 649, 650, 651, 654, 655, 660, 662, 663, 665, 670, 671, 678, 682, 689, 690, 691, 692, 693, 695, 700, 701, 703, 705, 706, 708, 709, 710, 711, 713, 715, 717, 718, 754, 755, 759, 761, 762, 765, 770, 773, 776], "output": [3, 4, 5, 7, 16, 22, 23, 25, 26, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 150, 175, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 349, 351, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 401, 403, 405, 406, 409, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 428, 429, 432, 434, 435, 436, 437, 438, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 494, 495, 496, 500, 501, 502, 504, 508, 517, 524, 531, 532, 533, 556, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 670, 683, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 741, 747, 750, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 783, 785, 786, 787, 789, 795, 796, 802], "softmax": [3, 7, 10, 23, 25, 26, 41, 45, 55, 66, 67, 78, 580, 590, 616, 617, 725, 747], "pass": [3, 5, 6, 7, 8, 10, 12, 16, 23, 25, 26, 32, 38, 39, 41, 43, 44, 50, 51, 66, 68, 73, 74, 89, 94, 114, 115, 117, 153, 175, 190, 209, 224, 270, 355, 358, 359, 364, 434, 458, 460, 464, 484, 485, 517, 582, 584, 585, 586, 588, 594, 667, 668, 726, 730, 731, 733, 734, 738, 741, 745, 747, 751, 753, 755, 757, 758, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 787, 795, 796, 799], "argsort": [3, 7, 63, 86, 600, 707, 774], "descend": [3, 7, 63, 86, 591, 600, 639, 640, 705, 708], "true": [3, 4, 5, 6, 7, 8, 10, 12, 16, 19, 20, 22, 23, 25, 26, 30, 31, 32, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 117, 120, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 152, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 188, 192, 193, 195, 196, 200, 203, 204, 205, 206, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 316, 317, 318, 319, 321, 323, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 470, 471, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 531, 532, 533, 536, 539, 540, 542, 543, 545, 546, 547, 549, 551, 553, 554, 556, 561, 562, 564, 565, 567, 570, 571, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 678, 680, 681, 682, 683, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 727, 729, 730, 731, 732, 733, 735, 738, 741, 745, 747, 751, 754, 759, 761, 762, 763, 764, 765, 767, 769, 770, 771, 773, 774, 775, 776, 778, 779, 781, 784, 785, 786, 795, 796], "top": [3, 7, 9, 14, 23, 25, 26, 39, 40, 51, 58, 74, 307, 346, 355, 453, 500, 588, 652, 727, 747, 754, 755, 763, 774, 776, 779, 784, 785, 801, 805], "logit": [3, 4, 5, 7, 39, 40, 41, 42, 51, 57, 74, 80, 344, 359, 464, 467, 592, 648, 650, 725, 747, 795], "gather": [3, 7, 39, 51, 52, 74, 75, 314, 315, 346, 508, 510, 588, 808], "print": [3, 4, 6, 7, 10, 12, 16, 17, 19, 23, 25, 26, 27, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 148, 149, 150, 151, 153, 159, 160, 161, 162, 163, 166, 168, 169, 171, 176, 188, 189, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 308, 309, 312, 317, 319, 332, 333, 338, 342, 344, 346, 349, 352, 353, 354, 355, 358, 364, 370, 371, 372, 373, 375, 376, 378, 380, 383, 385, 388, 389, 390, 391, 393, 395, 399, 401, 403, 411, 417, 418, 419, 420, 421, 427, 428, 429, 440, 444, 449, 450, 452, 453, 457, 461, 462, 463, 478, 479, 480, 481, 487, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 527, 530, 531, 532, 536, 537, 538, 541, 544, 545, 546, 547, 549, 551, 553, 554, 555, 559, 560, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 637, 639, 640, 641, 643, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 727, 738, 741, 745, 747, 754, 755, 761, 763, 765, 775, 776, 778, 781, 783, 784, 785, 795], "indic": [3, 7, 47, 51, 52, 55, 56, 58, 59, 61, 62, 63, 68, 70, 71, 74, 75, 78, 79, 81, 82, 84, 85, 86, 91, 119, 120, 138, 141, 143, 164, 168, 169, 280, 312, 313, 328, 346, 349, 352, 353, 355, 360, 362, 370, 371, 372, 374, 378, 379, 380, 384, 385, 388, 389, 390, 391, 395, 401, 416, 424, 425, 426, 428, 430, 432, 434, 435, 436, 439, 443, 449, 450, 452, 453, 455, 456, 469, 470, 471, 492, 507, 508, 510, 531, 532, 536, 568, 571, 572, 583, 586, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 604, 606, 607, 608, 609, 612, 616, 632, 646, 654, 655, 656, 658, 659, 660, 661, 663, 665, 670, 673, 675, 677, 678, 679, 681, 685, 686, 687, 688, 689, 690, 696, 697, 698, 699, 701, 703, 705, 707, 708, 727, 729, 730, 731, 735, 741, 743, 762, 769, 772, 774, 786, 795], "to_list": [3, 7, 52, 75, 588], "arrai": [3, 4, 7, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 182, 192, 193, 197, 202, 204, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 535, 536, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 734, 738, 741, 743, 747, 751, 753, 754, 755, 756, 759, 760, 761, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 789, 796, 799, 800, 801, 803, 807, 808], "282": [3, 7], "281": [3, 7, 39, 41], "285": [3, 7, 74], "dev": [3, 6, 7, 8, 18, 39, 41, 44, 49, 68, 72, 197, 204, 585, 754, 764, 770, 783, 785], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 7, 10, 12, 16, 37, 39, 40, 41, 42, 44, 45, 50, 51, 56, 60, 67, 73, 74, 76, 79, 83, 103, 222, 257, 259, 261, 291, 344, 352, 364, 371, 373, 390, 393, 479, 569, 580, 586, 589, 591, 601, 626, 634, 692, 711], "tiger": [3, 7], "tabbi": [3, 7], "egyptian": [3, 7], "check": [3, 4, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 42, 44, 46, 48, 52, 56, 68, 71, 75, 79, 109, 152, 153, 162, 163, 166, 168, 169, 170, 173, 188, 195, 196, 203, 215, 493, 503, 505, 506, 513, 519, 520, 521, 522, 523, 539, 549, 561, 567, 580, 584, 585, 588, 591, 595, 624, 625, 632, 670, 671, 680, 681, 682, 727, 741, 747, 750, 752, 753, 754, 755, 757, 761, 762, 764, 765, 767, 771, 773, 774, 775, 776, 777, 778, 780, 781, 783, 784, 785, 788, 795], "confirm": [3, 40, 753], "same": [3, 4, 5, 6, 8, 12, 18, 20, 25, 28, 30, 32, 37, 38, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 85, 87, 91, 92, 93, 107, 118, 128, 133, 135, 136, 138, 140, 141, 142, 143, 145, 148, 149, 150, 161, 164, 209, 216, 217, 218, 219, 221, 223, 227, 229, 232, 236, 242, 243, 249, 269, 271, 273, 276, 278, 279, 280, 289, 293, 301, 311, 312, 313, 314, 315, 319, 325, 341, 344, 346, 349, 352, 353, 355, 358, 360, 362, 364, 370, 371, 372, 388, 389, 390, 391, 393, 394, 395, 400, 404, 405, 413, 414, 415, 416, 428, 429, 444, 452, 458, 460, 469, 471, 476, 477, 478, 479, 480, 481, 482, 487, 524, 578, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 652, 655, 656, 658, 659, 661, 662, 667, 668, 683, 693, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 729, 741, 747, 749, 754, 755, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 783, 785, 786, 787, 791, 793, 795, 796, 798, 800, 807, 808], "8": [3, 6, 17, 18, 20, 37, 39, 41, 44, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 93, 94, 101, 132, 133, 137, 140, 145, 154, 156, 157, 158, 161, 194, 211, 219, 221, 222, 226, 227, 230, 232, 234, 240, 243, 247, 248, 254, 255, 256, 261, 264, 265, 267, 268, 269, 274, 275, 278, 279, 280, 283, 284, 287, 288, 289, 295, 296, 298, 300, 301, 317, 325, 328, 330, 331, 332, 335, 342, 344, 346, 349, 352, 353, 354, 355, 364, 370, 371, 372, 373, 378, 379, 383, 384, 388, 389, 391, 393, 394, 399, 406, 417, 418, 420, 421, 422, 424, 425, 426, 430, 434, 439, 440, 449, 450, 452, 453, 456, 457, 466, 468, 480, 483, 484, 487, 493, 494, 496, 500, 501, 504, 507, 511, 515, 516, 517, 519, 520, 523, 526, 531, 532, 536, 546, 547, 548, 549, 569, 572, 574, 577, 579, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 604, 608, 609, 612, 613, 614, 616, 620, 621, 622, 625, 626, 629, 630, 631, 634, 637, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 655, 662, 663, 665, 671, 678, 682, 690, 691, 692, 693, 695, 700, 701, 703, 705, 706, 708, 710, 711, 713, 715, 717, 718, 729, 754, 761, 762, 765, 776, 780, 784], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 10, 12, 25, 26, 39, 40, 51, 53, 55, 57, 74, 76, 78, 80, 91, 303, 307, 332, 346, 349, 352, 353, 364, 378, 405, 476, 478, 481, 569, 570, 573, 575, 576, 577, 589, 590, 592, 594, 614, 615, 616, 617, 648, 669, 728, 729, 731, 733, 747, 761, 770, 776, 781, 785, 786, 800], "imagenet1k_v1": [3, 7], "dropout": [3, 55, 78, 352, 375, 376, 377, 590, 616, 617, 729, 784], "9": [3, 4, 5, 6, 7, 8, 17, 18, 20, 37, 39, 41, 44, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 67, 71, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 87, 93, 94, 101, 118, 119, 120, 137, 154, 155, 156, 157, 158, 161, 164, 217, 219, 221, 222, 225, 226, 227, 230, 236, 237, 243, 250, 256, 257, 258, 264, 265, 267, 268, 269, 272, 274, 275, 279, 280, 283, 284, 285, 290, 292, 295, 296, 323, 324, 328, 334, 335, 342, 344, 349, 350, 352, 354, 355, 362, 364, 370, 371, 372, 373, 378, 379, 383, 384, 388, 389, 391, 393, 394, 406, 417, 418, 420, 424, 425, 426, 430, 434, 439, 449, 450, 451, 453, 456, 466, 468, 471, 480, 496, 500, 501, 502, 504, 507, 515, 516, 519, 520, 523, 531, 532, 546, 548, 569, 570, 571, 575, 580, 583, 584, 586, 588, 589, 590, 591, 593, 595, 597, 598, 599, 600, 601, 604, 605, 606, 609, 612, 613, 614, 619, 620, 622, 625, 626, 629, 630, 631, 634, 637, 639, 640, 641, 643, 644, 651, 655, 659, 660, 662, 663, 665, 670, 671, 676, 678, 681, 682, 690, 691, 692, 693, 695, 700, 701, 703, 705, 706, 708, 710, 711, 713, 715, 717, 718, 733, 761, 763, 765, 772, 776, 784, 785, 797], "torch_output": [3, 5, 7], "dim": [3, 7, 41, 51, 68, 70, 74, 138, 301, 346, 352, 355, 369, 379, 380, 381, 384, 392, 434, 583, 590, 603, 610, 611, 729, 747, 763, 774, 775, 779], "torch_class": [3, 7], "torch_logit": [3, 7], "tensor": [3, 4, 6, 7, 8, 10, 12, 16, 17, 20, 21, 23, 25, 26, 27, 31, 37, 39, 47, 50, 51, 52, 55, 57, 58, 60, 68, 70, 73, 74, 75, 78, 79, 80, 81, 83, 90, 126, 134, 135, 138, 143, 159, 175, 267, 268, 294, 297, 307, 310, 311, 312, 318, 339, 344, 346, 349, 352, 353, 354, 355, 364, 365, 370, 371, 374, 378, 387, 388, 389, 390, 403, 404, 405, 408, 410, 412, 413, 416, 420, 434, 437, 442, 445, 446, 447, 448, 451, 454, 484, 488, 531, 532, 583, 584, 586, 588, 590, 591, 592, 593, 597, 613, 615, 616, 628, 641, 648, 658, 660, 690, 729, 738, 747, 758, 759, 763, 764, 769, 770, 773, 774, 775, 776, 777, 779, 781, 783, 784, 786, 787, 789, 791, 795, 796, 798, 799, 802, 804, 805, 808], "devic": [3, 5, 6, 7, 40, 41, 44, 47, 51, 60, 68, 70, 74, 83, 93, 96, 97, 98, 118, 119, 120, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 215, 300, 301, 312, 313, 346, 359, 432, 464, 465, 467, 468, 491, 505, 506, 583, 588, 597, 690, 691, 692, 693, 726, 728, 729, 730, 731, 732, 733, 734, 735, 738, 747, 755, 756, 759, 763, 767, 770, 771, 775, 776, 777, 779, 781, 786, 787, 788, 789, 792, 800, 801, 803, 804, 805, 806], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 7, 23, 37, 572, 579, 589, 784], "lt": [3, 7, 10, 12, 16, 20, 21, 23, 37, 39, 41, 94], "takebackward0": [3, 7], "gt": [3, 7, 10, 12, 16, 20, 21, 23, 37, 39, 41, 44, 94, 775, 781], "great": [3, 5, 747, 755, 776, 781, 783, 792, 793, 807], "With": [3, 18, 28, 37, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 61, 64, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 120, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 148, 149, 150, 151, 153, 159, 160, 161, 164, 171, 176, 177, 178, 179, 180, 190, 193, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 303, 319, 321, 327, 330, 331, 332, 334, 335, 338, 344, 346, 349, 352, 353, 354, 355, 364, 373, 375, 376, 383, 397, 398, 399, 401, 402, 403, 411, 420, 434, 435, 436, 438, 441, 443, 444, 450, 453, 455, 469, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 493, 494, 495, 496, 499, 500, 501, 502, 503, 507, 508, 511, 513, 515, 516, 517, 531, 532, 546, 547, 549, 551, 553, 554, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 617, 618, 619, 620, 621, 622, 624, 625, 627, 629, 630, 631, 632, 633, 637, 639, 640, 641, 643, 644, 648, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 754, 765, 774, 776, 779, 781, 792, 793, 795, 801, 804], "simpl": [3, 10, 14, 15, 17, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 37, 39, 41, 44, 51, 74, 364, 478, 729, 747, 753, 754, 755, 758, 760, 761, 763, 764, 765, 766, 770, 773, 774, 776, 777, 779, 783, 785, 786, 787, 789, 791, 795, 796, 800, 801, 802, 803], "chang": [3, 4, 16, 26, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 349, 355, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 580, 586, 593, 595, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 635, 636, 637, 639, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 682, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 747, 749, 753, 754, 755, 757, 759, 760, 761, 762, 763, 765, 766, 768, 774, 775, 776, 777, 778, 779, 781, 785, 787, 788, 793, 795, 804, 807], "backend": [3, 17, 18, 19, 26, 28, 29, 31, 46, 47, 51, 52, 56, 68, 74, 75, 79, 93, 126, 162, 163, 166, 188, 195, 196, 198, 201, 212, 353, 399, 401, 485, 493, 505, 506, 514, 517, 518, 528, 535, 549, 552, 583, 584, 585, 588, 591, 639, 726, 731, 733, 737, 738, 751, 752, 754, 755, 756, 757, 758, 762, 764, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 782, 783, 786, 789, 791, 795, 796, 801, 804, 807, 808], "let": [3, 4, 5, 6, 8, 10, 12, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 39, 40, 42, 44, 52, 64, 75, 216, 217, 218, 219, 222, 225, 234, 237, 239, 241, 250, 251, 252, 257, 259, 272, 280, 282, 283, 287, 507, 508, 586, 588, 591, 601, 643, 713, 715, 716, 717, 718, 747, 749, 753, 758, 760, 761, 763, 764, 765, 766, 767, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 793, 795, 796, 808], "u": [3, 6, 39, 41, 43, 44, 51, 56, 70, 74, 79, 91, 135, 353, 408, 414, 415, 591, 595, 618, 625, 639, 678, 747, 748, 754, 755, 756, 761, 762, 768, 771, 773, 774, 775, 776, 777, 779, 785, 787, 792], "differ": [3, 4, 6, 8, 10, 14, 15, 19, 20, 21, 25, 26, 29, 30, 31, 32, 50, 51, 52, 56, 64, 68, 74, 75, 87, 93, 94, 103, 106, 161, 219, 236, 243, 244, 269, 285, 317, 322, 325, 326, 330, 349, 352, 353, 355, 364, 385, 395, 413, 416, 435, 436, 450, 479, 480, 487, 507, 508, 580, 584, 586, 588, 590, 591, 593, 601, 613, 614, 626, 637, 652, 662, 709, 710, 715, 717, 718, 731, 747, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 796, 798, 799, 800, 801, 804, 807, 808], "ll": [3, 5, 6, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 40, 747, 748, 751, 753, 754, 755, 760, 765, 768, 772, 773, 784, 788, 793, 795, 796], "try": [3, 17, 27, 37, 40, 44, 68, 555, 588, 728, 738, 747, 753, 754, 755, 757, 758, 761, 762, 763, 767, 768, 773, 775, 781, 783, 787, 790, 792, 793], "10": [3, 5, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 39, 41, 43, 44, 47, 50, 51, 52, 53, 55, 56, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 118, 133, 134, 135, 218, 226, 227, 230, 234, 241, 246, 248, 254, 256, 258, 269, 275, 282, 283, 288, 293, 317, 320, 325, 327, 328, 330, 331, 332, 334, 335, 339, 342, 349, 352, 355, 364, 370, 371, 372, 373, 383, 388, 389, 391, 393, 394, 395, 426, 428, 430, 434, 439, 450, 456, 476, 479, 480, 483, 485, 487, 500, 501, 502, 504, 507, 508, 510, 515, 516, 524, 532, 536, 541, 546, 548, 560, 563, 575, 583, 586, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 607, 613, 620, 622, 626, 627, 629, 630, 631, 634, 639, 640, 641, 655, 660, 661, 662, 663, 665, 676, 678, 681, 682, 689, 690, 691, 692, 693, 699, 701, 707, 709, 710, 711, 712, 714, 715, 717, 718, 733, 747, 754, 757, 761, 762, 763, 765, 772, 775, 776, 781, 783, 784, 792, 806], "tf": [3, 5, 10, 12, 17, 20, 21, 23, 25, 26, 27, 28, 30, 32, 37, 42, 43, 747, 758, 759, 763, 764, 769, 773, 774, 776, 777, 779, 781, 786, 787, 789, 795, 796, 801], "onc": [3, 5, 25, 26, 37, 39, 56, 60, 79, 83, 209, 353, 400, 585, 591, 597, 623, 624, 625, 639, 690, 753, 754, 755, 761, 762, 763, 764, 765, 768, 773, 774, 776, 779, 781, 784, 787, 788, 793, 795], "set": [3, 10, 12, 18, 25, 26, 28, 31, 39, 40, 41, 42, 43, 46, 51, 52, 55, 56, 61, 63, 64, 68, 74, 75, 78, 79, 84, 86, 87, 106, 109, 117, 141, 143, 177, 178, 179, 180, 181, 192, 205, 206, 207, 208, 209, 224, 312, 321, 335, 337, 342, 346, 349, 350, 352, 353, 355, 364, 374, 398, 402, 404, 420, 434, 444, 447, 453, 478, 483, 484, 485, 486, 487, 489, 493, 500, 517, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 549, 557, 580, 582, 583, 584, 585, 586, 588, 590, 591, 595, 597, 598, 600, 601, 613, 617, 619, 630, 632, 635, 638, 639, 670, 677, 680, 681, 682, 687, 688, 694, 696, 697, 701, 703, 704, 705, 708, 716, 718, 727, 728, 729, 731, 733, 738, 744, 748, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 773, 774, 775, 776, 777, 779, 781, 783, 784, 791, 794, 795, 796, 799, 800, 801, 802, 803, 805, 808], "our": [3, 6, 8, 10, 12, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 37, 39, 40, 43, 66, 89, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 765, 767, 768, 771, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 791, 792, 795, 806, 807], "post": [3, 5, 39, 59, 82, 596, 689, 754, 772, 786, 788], "process": [3, 5, 20, 25, 26, 30, 39, 203, 215, 585, 748, 754, 755, 760, 761, 762, 768, 770, 772, 774, 775, 776, 779, 781, 786, 792, 793, 795, 799, 800, 801, 804, 805, 807, 808], "11": [3, 5, 16, 18, 20, 37, 39, 40, 41, 44, 50, 51, 52, 55, 56, 60, 64, 73, 74, 75, 78, 79, 81, 83, 87, 94, 219, 223, 226, 241, 278, 279, 285, 332, 349, 352, 353, 355, 370, 371, 383, 388, 389, 391, 393, 394, 402, 428, 430, 434, 439, 441, 456, 479, 480, 494, 500, 501, 507, 516, 532, 586, 588, 590, 591, 592, 593, 595, 597, 598, 599, 601, 604, 605, 613, 614, 622, 625, 626, 627, 629, 630, 634, 639, 640, 648, 650, 655, 660, 661, 663, 665, 676, 678, 688, 691, 692, 693, 700, 701, 709, 710, 711, 718, 761, 762, 763, 765, 772], "st": [3, 4, 6, 757, 775, 776], "perf_count": [3, 6], "raw_logit": 3, "latenc": [3, 6], "nn": [3, 5, 12, 23, 25, 26, 39, 43, 136, 583, 747, 770, 775, 779, 786, 796, 802], "axi": [3, 5, 40, 41, 42, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 104, 108, 134, 135, 138, 209, 283, 288, 321, 322, 328, 335, 349, 352, 354, 355, 358, 362, 364, 373, 374, 380, 383, 385, 395, 419, 423, 429, 430, 431, 434, 435, 436, 439, 444, 449, 450, 452, 453, 455, 456, 461, 462, 463, 471, 476, 479, 480, 481, 483, 484, 485, 486, 487, 500, 507, 568, 580, 583, 585, 586, 588, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 612, 619, 622, 630, 645, 646, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 695, 696, 697, 701, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 729, 730, 735, 761, 763, 765, 767, 769, 770, 773, 774, 776, 779, 781, 783, 786], "direct": [3, 51, 74, 322, 327, 331, 336, 340, 349, 352, 355, 385, 395, 435, 436, 450, 600, 708, 753, 758, 760, 774, 779, 785, 786, 797, 801, 802, 805], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 5, 10, 12, 18, 19, 20, 21, 25, 26, 31, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 204, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 318, 319, 320, 322, 325, 327, 329, 331, 332, 333, 334, 338, 339, 341, 344, 346, 349, 352, 353, 354, 355, 358, 359, 360, 362, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 388, 389, 390, 393, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 432, 437, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 477, 478, 479, 480, 481, 495, 496, 500, 501, 502, 504, 507, 508, 511, 517, 524, 531, 532, 542, 550, 552, 564, 568, 569, 570, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 711, 713, 715, 716, 718, 719, 720, 728, 729, 732, 741, 747, 755, 761, 763, 764, 765, 766, 767, 769, 773, 774, 775, 776, 777, 778, 781, 783, 784, 785, 786, 795, 796], "dtype": [3, 5, 7, 12, 18, 20, 21, 37, 40, 47, 48, 51, 52, 55, 56, 60, 61, 64, 70, 71, 73, 74, 75, 78, 79, 83, 84, 87, 93, 96, 97, 98, 118, 119, 120, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 204, 270, 300, 301, 302, 303, 304, 305, 306, 310, 311, 316, 319, 321, 335, 346, 349, 352, 359, 364, 373, 383, 395, 464, 465, 466, 467, 468, 478, 479, 480, 481, 484, 486, 487, 504, 505, 506, 508, 517, 526, 553, 583, 584, 585, 588, 590, 591, 594, 595, 597, 598, 600, 601, 602, 606, 613, 630, 646, 669, 670, 691, 692, 693, 696, 697, 698, 707, 708, 709, 710, 715, 717, 719, 720, 728, 729, 731, 732, 734, 735, 747, 751, 757, 759, 763, 764, 765, 767, 770, 771, 773, 774, 775, 776, 777, 781, 783, 796], "int32": [3, 37, 39, 48, 51, 52, 60, 61, 64, 71, 74, 75, 83, 84, 129, 134, 140, 145, 148, 151, 153, 155, 157, 159, 162, 164, 165, 169, 172, 176, 180, 184, 186, 204, 297, 344, 360, 364, 469, 479, 480, 481, 508, 517, 553, 583, 584, 585, 588, 597, 598, 601, 691, 692, 693, 697, 709, 710, 715, 717, 763, 774, 776, 781], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 5, 7, 10, 12, 17, 18, 37, 39, 40, 41, 47, 48, 52, 55, 70, 71, 75, 78, 87, 135, 138, 140, 145, 146, 147, 151, 155, 156, 159, 160, 161, 162, 165, 168, 169, 171, 176, 179, 185, 249, 276, 316, 325, 346, 349, 352, 364, 373, 383, 395, 481, 517, 553, 583, 584, 586, 588, 590, 591, 594, 606, 608, 609, 612, 637, 639, 640, 646, 669, 747, 763, 765, 775, 776, 777, 796], "As": [3, 5, 6, 8, 10, 12, 18, 22, 23, 25, 26, 28, 31, 37, 38, 62, 66, 89, 599, 701, 702, 703, 704, 747, 753, 754, 755, 758, 760, 761, 762, 763, 764, 767, 768, 769, 770, 773, 774, 775, 776, 779, 783, 784, 785, 787, 791, 795, 796, 801, 806], "expect": [3, 5, 6, 8, 18, 22, 25, 26, 28, 41, 42, 44, 51, 56, 57, 74, 80, 175, 243, 287, 352, 374, 395, 491, 584, 586, 588, 592, 634, 648, 727, 728, 729, 731, 747, 754, 755, 757, 763, 764, 767, 768, 771, 773, 775, 776, 779, 787, 788, 793, 795, 796], "ident": [3, 23, 40, 42, 56, 68, 129, 197, 510, 536, 583, 585, 588, 591, 595, 626, 631, 683, 729, 761, 770, 771, 774, 775, 777, 779, 783, 784, 787, 789, 791, 793], "had": [3, 761, 762, 773, 777, 781, 801, 802], "anoth": [3, 16, 18, 19, 22, 23, 25, 26, 28, 29, 41, 42, 130, 149, 151, 583, 584, 747, 753, 754, 755, 759, 761, 763, 764, 767, 768, 770, 773, 774, 776, 781, 783, 786, 789, 792, 794, 795, 796, 801, 807], "postprocess": 3, "routin": [3, 762, 773, 774, 779, 787, 801], "feed": [3, 209, 585, 795, 801, 802], "other": [3, 6, 8, 10, 12, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 48, 50, 51, 52, 58, 64, 68, 71, 73, 74, 75, 81, 87, 91, 93, 94, 118, 138, 149, 175, 236, 241, 243, 259, 268, 269, 318, 322, 349, 355, 429, 437, 449, 489, 490, 583, 584, 586, 588, 597, 601, 652, 662, 693, 716, 718, 747, 753, 754, 755, 757, 758, 761, 762, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 783, 785, 786, 787, 788, 789, 792, 795, 796, 797, 799, 800, 801, 807, 808], "carefulli": [3, 274, 586, 728, 774, 799, 804], "rewrit": 3, "easili": [3, 22, 25, 26, 37, 747, 754, 758, 762, 774, 779, 784, 785, 786, 787, 792, 801, 807, 808], "out": [3, 5, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 159, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 349, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 409, 410, 411, 412, 417, 418, 419, 420, 421, 427, 428, 429, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 495, 496, 500, 501, 502, 504, 507, 508, 517, 527, 531, 532, 569, 570, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 670, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 728, 729, 731, 732, 733, 734, 747, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793, 795, 796, 801, 808], "quickest": 3, "particular": [3, 25, 26, 264, 586, 754, 755, 757, 759, 762, 763, 765, 771, 773, 774, 776, 777, 797, 801, 807], "hardwar": [3, 39, 93, 97, 754, 779, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807], "again": [3, 5, 19, 20, 28, 29, 30, 31, 591, 637, 755, 758, 759, 760, 761, 765, 767, 768, 773, 774, 776, 777, 779, 784, 786, 787, 792, 793, 806, 807], "speed": [3, 6, 8, 25, 26, 39, 44, 52, 75, 524, 588, 776, 791, 804], "up": [3, 5, 6, 8, 25, 51, 52, 74, 75, 352, 355, 374, 387, 436, 524, 588, 590, 613, 727, 748, 749, 751, 753, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 795, 802, 807, 808], "12": [3, 5, 6, 7, 16, 18, 20, 21, 37, 39, 40, 41, 48, 50, 51, 52, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 82, 83, 87, 93, 94, 164, 219, 221, 226, 230, 231, 234, 236, 237, 238, 256, 269, 272, 279, 282, 289, 290, 305, 306, 328, 331, 332, 346, 349, 352, 355, 364, 370, 371, 372, 373, 375, 379, 380, 388, 389, 393, 394, 395, 428, 430, 434, 439, 456, 468, 479, 485, 486, 496, 500, 501, 532, 538, 546, 560, 586, 588, 590, 591, 593, 595, 596, 597, 598, 599, 601, 604, 608, 613, 614, 622, 626, 630, 634, 640, 641, 643, 655, 659, 661, 663, 665, 682, 689, 691, 692, 693, 700, 701, 709, 710, 711, 715, 717, 754, 759, 761, 763, 765, 772], "repeat": [3, 4, 19, 29, 51, 52, 58, 74, 75, 81, 352, 364, 380, 385, 478, 502, 588, 593, 594, 664, 669, 741, 749, 755, 758, 759, 765, 766, 773, 776], "previou": [3, 18, 19, 20, 22, 28, 29, 30, 32, 53, 76, 183, 184, 185, 186, 187, 343, 351, 556, 558, 559, 560, 561, 563, 564, 566, 570, 575, 584, 588, 589, 728, 744, 755, 757, 759, 762, 764, 769, 774, 776, 779, 786, 787, 804], "befor": [3, 4, 5, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 39, 51, 55, 56, 58, 62, 64, 68, 74, 78, 79, 206, 209, 214, 352, 355, 364, 379, 384, 394, 435, 436, 437, 444, 479, 480, 585, 590, 591, 593, 594, 595, 599, 601, 603, 604, 605, 606, 608, 610, 612, 616, 617, 629, 646, 652, 667, 668, 682, 701, 702, 703, 704, 709, 710, 715, 717, 727, 738, 741, 753, 754, 755, 757, 758, 760, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 781, 784, 787, 795, 796, 801], "13": [3, 5, 6, 7, 16, 21, 37, 39, 41, 45, 50, 51, 55, 56, 60, 64, 73, 74, 75, 76, 78, 81, 83, 87, 93, 109, 164, 194, 219, 231, 234, 243, 254, 274, 283, 328, 335, 342, 349, 352, 355, 372, 373, 383, 388, 394, 428, 430, 434, 439, 456, 468, 479, 480, 495, 496, 500, 501, 516, 538, 546, 569, 580, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 598, 599, 601, 604, 605, 613, 614, 622, 626, 634, 640, 665, 669, 682, 691, 692, 693, 700, 701, 709, 710, 711, 761, 765, 774], "026875037000081647": 3, "14": [3, 5, 6, 7, 21, 37, 39, 40, 41, 48, 50, 51, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 83, 148, 161, 164, 217, 222, 224, 231, 235, 261, 265, 269, 275, 282, 290, 324, 352, 353, 355, 364, 370, 371, 372, 373, 383, 390, 393, 394, 397, 403, 430, 434, 439, 456, 479, 546, 569, 584, 586, 588, 589, 590, 591, 593, 595, 599, 601, 604, 605, 607, 609, 613, 622, 626, 634, 643, 665, 682, 691, 692, 693, 701, 710, 711, 761, 765, 776], "overrid": [3, 5, 31, 40, 47, 51, 70, 74, 138, 364, 478, 583, 758, 760], "behavior": [3, 5, 51, 62, 236, 243, 269, 274, 278, 365, 488, 535, 558, 586, 588, 599, 701, 702, 703, 704, 753, 760, 761, 762, 763, 773, 774, 775, 776, 779, 781, 787, 798], "prealloc": [3, 5], "75": [3, 5, 37, 50, 51, 73, 74, 75, 78, 83, 110, 134, 222, 224, 236, 249, 303, 327, 328, 346, 349, 394, 487, 502, 515, 546, 580, 583, 586, 588, 591, 595, 597, 604, 627, 634, 678, 693], "memori": [3, 5, 47, 51, 58, 70, 74, 81, 120, 136, 191, 203, 209, 211, 215, 355, 364, 424, 425, 430, 432, 434, 435, 436, 443, 456, 485, 530, 535, 558, 583, 585, 588, 590, 593, 615, 654, 655, 656, 658, 660, 661, 663, 665, 747, 762, 763, 764, 773, 774, 779, 781, 787, 795, 801, 803, 804, 805], "temporari": [3, 5, 544, 566, 588, 763, 778], "fix": [3, 5, 41, 51, 74, 91, 349, 353, 416, 590, 616, 747, 754, 755, 757, 763, 768, 776, 777], "until": [3, 5, 755, 773, 781, 787, 792, 795, 808], "handl": [3, 5, 37, 39, 45, 49, 50, 51, 67, 68, 72, 73, 74, 94, 101, 103, 106, 109, 189, 190, 191, 192, 193, 197, 202, 203, 211, 215, 221, 233, 258, 274, 280, 281, 286, 287, 355, 428, 449, 452, 580, 585, 586, 591, 601, 643, 715, 717, 725, 733, 748, 756, 761, 762, 763, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 785, 798, 808], "o": [3, 5, 38, 39, 40, 41, 43, 527, 588, 747, 754, 756, 762, 781, 788], "environ": [3, 5, 40, 43, 747, 748, 749, 755, 788, 801, 803], "xla_python_client_alloc": [3, 5], "platform": [3, 5, 752, 799, 803, 805], "jit": [3, 6, 8, 25, 28, 781, 787, 795, 801], "img_jax": [3, 5], "device_put": [3, 6], "15": [3, 5, 7, 8, 21, 37, 39, 40, 41, 44, 50, 51, 52, 56, 60, 64, 70, 71, 73, 74, 75, 78, 79, 81, 83, 87, 94, 133, 161, 219, 226, 230, 236, 247, 254, 255, 261, 269, 278, 279, 280, 328, 342, 349, 350, 352, 353, 355, 364, 370, 371, 388, 390, 393, 394, 399, 430, 434, 439, 456, 479, 496, 500, 501, 504, 515, 516, 541, 546, 563, 583, 584, 586, 588, 590, 591, 593, 595, 597, 598, 599, 601, 604, 614, 622, 625, 626, 627, 634, 640, 641, 659, 665, 670, 682, 691, 692, 699, 701, 709, 710, 711, 754, 762, 765, 772, 804], "warm": 3, "_": [3, 6, 8, 25, 38, 39, 50, 68, 73, 76, 151, 239, 241, 249, 250, 265, 364, 416, 478, 500, 569, 570, 584, 586, 588, 589, 591, 593, 595, 601, 637, 640, 666, 677, 716, 766, 773, 784], "rang": [3, 25, 26, 37, 38, 39, 41, 47, 51, 64, 70, 74, 118, 134, 135, 283, 307, 346, 353, 355, 364, 401, 410, 437, 445, 447, 454, 479, 480, 481, 500, 568, 583, 586, 588, 599, 601, 701, 709, 710, 715, 717, 728, 747, 763, 767, 770, 776, 781, 784, 785, 786, 801, 807], "16": [3, 5, 8, 21, 37, 39, 41, 50, 51, 52, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 83, 93, 94, 164, 230, 259, 279, 286, 325, 328, 332, 349, 352, 355, 364, 370, 371, 373, 379, 383, 384, 388, 389, 391, 394, 434, 479, 485, 501, 504, 526, 546, 547, 579, 584, 586, 588, 589, 590, 591, 593, 595, 597, 598, 601, 612, 614, 618, 622, 625, 626, 634, 640, 665, 678, 682, 691, 692, 693, 700, 710, 711, 747, 755, 763, 765, 784], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 67, 68, 101, 352, 354, 387, 392, 419, 599, 701, 703, 725, 754, 755, 757, 765, 781], "note": [3, 5, 21, 25, 26, 31, 40, 41, 42, 51, 52, 56, 58, 62, 74, 79, 81, 91, 131, 143, 175, 243, 278, 279, 286, 312, 313, 328, 346, 349, 352, 353, 355, 374, 400, 404, 412, 413, 416, 434, 584, 586, 590, 591, 593, 599, 601, 616, 623, 624, 637, 639, 658, 662, 702, 704, 713, 729, 749, 751, 753, 754, 755, 758, 763, 765, 766, 768, 773, 774, 775, 776, 777, 779], "were": [3, 5, 42, 68, 71, 164, 168, 169, 243, 586, 755, 763, 767, 768, 772, 773, 775, 776, 777, 779, 781, 795, 801, 802, 807], "function": [3, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 161, 162, 163, 164, 167, 168, 169, 171, 175, 176, 193, 195, 196, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 391, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 527, 530, 531, 532, 535, 536, 539, 541, 543, 546, 547, 548, 549, 551, 553, 554, 555, 561, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 681, 682, 683, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 728, 731, 738, 743, 747, 751, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 773, 780, 782, 783, 784, 785, 789, 791, 795, 798, 799, 800, 801, 802, 807, 808], "calcul": [3, 39, 50, 51, 52, 57, 64, 68, 73, 74, 75, 79, 80, 87, 94, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 236, 239, 240, 241, 257, 258, 259, 260, 261, 262, 267, 268, 269, 274, 281, 282, 283, 285, 286, 287, 328, 338, 349, 352, 353, 355, 358, 364, 370, 371, 372, 401, 444, 458, 460, 485, 524, 586, 588, 591, 592, 601, 625, 634, 637, 648, 649, 650, 712, 713, 714, 715, 716, 717, 718, 728, 729, 732, 753, 766, 781, 792, 795], "dog": 3, "18": [3, 21, 37, 39, 41, 50, 51, 60, 73, 74, 78, 79, 83, 87, 104, 231, 236, 278, 282, 291, 328, 349, 352, 355, 373, 379, 383, 384, 388, 391, 394, 434, 580, 586, 591, 597, 601, 608, 622, 629, 634, 691, 692, 693, 710, 711, 715, 761, 763, 765], "19": [3, 21, 37, 39, 40, 41, 44, 50, 51, 60, 73, 74, 78, 79, 83, 222, 231, 259, 269, 286, 352, 353, 355, 364, 372, 373, 384, 388, 391, 394, 399, 434, 479, 586, 591, 595, 597, 600, 622, 630, 643, 681, 691, 692, 693, 708, 765], "006431100999861883": 3, "258": [3, 590, 605, 607, 609], "104": [3, 64, 591, 601, 634, 711], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 762], "predict": [3, 5, 7, 39, 40, 41, 42, 51, 57, 74, 80, 354, 417, 419, 421, 592, 648, 649, 650, 747, 763], "down": [3, 18, 28, 42, 51, 74, 352, 355, 387, 436, 727, 754, 776, 789, 801, 807], "itself": [3, 20, 30, 50, 91, 270, 490, 555, 586, 588, 595, 682, 751, 754, 755, 757, 760, 761, 762, 763, 764, 767, 768, 773, 774, 785, 787, 791, 795, 800, 801, 802, 807], "version": [3, 22, 28, 39, 40, 41, 44, 45, 51, 74, 91, 101, 287, 321, 323, 349, 364, 483, 487, 568, 586, 588, 591, 624, 625, 738, 747, 754, 755, 760, 762, 763, 766, 773, 775, 781, 791, 792, 793, 796, 807, 808], "return": [3, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 728, 729, 731, 733, 738, 741, 742, 743, 744, 747, 754, 755, 758, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 795, 796, 802], "20": [3, 12, 37, 39, 40, 41, 44, 50, 51, 55, 60, 64, 73, 74, 75, 78, 79, 83, 87, 231, 235, 239, 275, 279, 283, 328, 330, 332, 349, 352, 355, 370, 372, 388, 391, 394, 428, 500, 507, 508, 510, 532, 536, 546, 586, 588, 591, 597, 598, 601, 604, 605, 615, 622, 627, 630, 634, 641, 691, 699, 700, 709, 710, 711, 715, 717, 747, 762, 779, 783], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 792], "sourc": [3, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 753, 754, 755, 757, 758, 760, 761, 762, 774, 791, 792, 793, 794, 796, 800, 801, 802, 803, 804], "21": [3, 37, 39, 41, 44, 50, 51, 52, 60, 70, 73, 74, 78, 79, 83, 87, 93, 135, 164, 219, 222, 224, 230, 231, 254, 269, 335, 352, 353, 355, 364, 370, 373, 383, 388, 391, 394, 395, 397, 428, 479, 532, 583, 584, 586, 591, 592, 595, 601, 622, 634, 650, 676, 691, 692, 709, 710, 711, 767, 772], "modul": [3, 5, 6, 8, 10, 12, 14, 15, 16, 22, 23, 25, 26, 27, 31, 37, 38, 39, 41, 42, 43, 66, 68, 89, 94, 345, 347, 348, 356, 357, 361, 528, 588, 602, 721, 725, 726, 727, 729, 730, 732, 734, 737, 738, 747, 750, 754, 758, 759, 760, 767, 770, 773, 774, 776, 781, 782, 784, 786, 787, 793, 795, 801, 802, 804], "def": [3, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 43, 50, 73, 114, 220, 494, 582, 588, 594, 595, 669, 676, 741, 747, 753, 754, 757, 758, 761, 763, 764, 765, 767, 769, 770, 772, 773, 774, 775, 776, 777, 779, 781, 783, 784, 785, 786, 795, 796], "__init__": [3, 5, 10, 12, 25, 26, 37, 38, 39, 41, 68, 90, 91, 92, 93, 94, 96, 97, 725, 728, 729, 730, 731, 732, 733, 734, 737, 738, 741, 742, 745, 747, 753, 758, 759, 763, 767, 774, 777, 781, 783, 784, 785, 786, 796], "self": [3, 5, 10, 12, 25, 26, 37, 38, 39, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 590, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 733, 741, 747, 755, 758, 761, 767, 774, 775, 781, 783, 784, 785, 786, 796], "num_class": [3, 10, 12, 25, 26, 39, 41, 43, 747, 786, 796], "1000": [3, 6, 10, 25, 26, 39, 40, 41, 42, 44, 47, 70, 135, 583, 747, 784, 796], "v": [3, 4, 5, 14, 15, 18, 25, 26, 28, 31, 32, 37, 40, 41, 51, 55, 63, 70, 74, 78, 86, 135, 234, 239, 241, 282, 353, 355, 401, 408, 414, 433, 586, 590, 594, 600, 617, 669, 707, 727, 729, 730, 731, 732, 733, 734, 747, 749, 750, 754, 755, 756, 760, 781, 784, 785, 786], "none": [3, 5, 6, 8, 25, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 166, 167, 168, 169, 171, 173, 176, 186, 188, 191, 192, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 510, 511, 512, 513, 515, 516, 517, 519, 520, 523, 528, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 546, 547, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 740, 747, 751, 757, 758, 759, 761, 762, 763, 764, 765, 767, 769, 770, 773, 774, 775, 776, 777, 779, 781, 783, 785, 786, 795, 796], "_build": [3, 5, 747], "kwarg": [3, 4, 5, 8, 25, 39, 43, 46, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 94, 97, 199, 355, 444, 527, 555, 583, 585, 588, 725, 726, 729, 731, 738, 745, 747, 758, 763, 764, 767, 770, 773, 774, 779, 781, 785, 795, 796], "featur": [3, 8, 10, 12, 14, 16, 25, 26, 39, 43, 51, 74, 352, 366, 367, 368, 375, 376, 377, 728, 729, 747, 753, 754, 755, 758, 759, 762, 763, 769, 777, 779, 784, 787, 796, 801, 802, 803, 807], "sequenti": [3, 5, 23, 25, 26, 41, 747, 760, 761, 785, 796], "conv2d": [3, 5, 23, 25, 26, 41, 44, 55, 78, 590, 607, 729, 747], "64": [3, 5, 37, 39, 40, 41, 44, 50, 51, 55, 73, 74, 75, 78, 79, 83, 87, 94, 160, 230, 240, 274, 283, 284, 325, 349, 352, 373, 383, 500, 501, 547, 575, 584, 586, 588, 589, 590, 591, 595, 601, 605, 607, 609, 612, 631, 634, 644, 678, 682, 692, 711, 715, 747, 754, 763, 784, 785, 806], "2": [3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 22, 23, 25, 26, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 145, 148, 149, 150, 151, 155, 159, 161, 169, 171, 176, 192, 193, 194, 197, 200, 202, 204, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 312, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 362, 364, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 409, 411, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 443, 444, 449, 450, 451, 452, 453, 455, 456, 457, 461, 462, 463, 466, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 527, 529, 531, 532, 536, 545, 546, 547, 548, 549, 551, 555, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 728, 729, 738, 741, 747, 751, 754, 755, 757, 759, 760, 761, 762, 763, 765, 767, 769, 770, 772, 773, 774, 775, 776, 780, 781, 783, 784, 785, 786, 787, 795, 796, 807, 808], "data_format": [3, 41, 51, 55, 74, 78, 352, 358, 370, 371, 372, 375, 376, 377, 388, 389, 390, 391, 393, 458, 459, 460, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729, 732, 747], "nchw": [3, 41, 51, 55, 74, 78, 352, 371, 376, 389, 393, 590, 603, 606, 607, 610, 611, 612, 729, 747], "relu": [3, 5, 23, 25, 26, 37, 44, 45, 51, 66, 67, 74, 103, 294, 295, 299, 344, 580, 725, 747, 775, 784, 785], "maxpool2d": [3, 5, 39, 729, 747], "192": [3, 41, 741], "384": [3, 76, 569, 589], "avgpool": 3, "adaptiveavgpool2d": [3, 729], "6": [3, 6, 8, 10, 18, 20, 21, 22, 23, 25, 26, 37, 39, 40, 41, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 63, 64, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 101, 103, 108, 114, 119, 120, 132, 133, 136, 137, 140, 145, 149, 150, 151, 159, 161, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 261, 262, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 307, 319, 321, 328, 329, 331, 332, 333, 335, 342, 344, 346, 349, 350, 352, 353, 354, 355, 360, 362, 364, 373, 375, 378, 379, 383, 384, 388, 391, 394, 395, 399, 402, 403, 406, 418, 420, 421, 422, 424, 425, 426, 430, 434, 435, 439, 440, 443, 444, 449, 450, 452, 456, 457, 466, 468, 469, 471, 476, 478, 479, 480, 481, 483, 485, 486, 487, 493, 495, 496, 499, 500, 501, 507, 508, 515, 516, 517, 532, 546, 547, 548, 549, 551, 555, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 619, 620, 621, 622, 624, 625, 626, 629, 630, 631, 634, 637, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 681, 682, 688, 689, 690, 691, 692, 693, 695, 696, 697, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 728, 747, 751, 754, 757, 759, 761, 762, 763, 765, 772, 776, 779, 781, 783, 784, 785], "classifi": [3, 10, 12, 25, 26, 39, 41, 42, 747, 795, 796], "prob": [3, 41, 51, 55, 74, 78, 83, 352, 359, 375, 376, 377, 464, 590, 597, 613, 690, 729, 747], "linear": [3, 12, 24, 25, 26, 37, 38, 39, 41, 44, 51, 52, 55, 67, 74, 75, 78, 101, 103, 105, 106, 109, 295, 296, 298, 299, 332, 344, 349, 352, 355, 364, 387, 444, 487, 504, 527, 580, 588, 590, 595, 616, 638, 677, 728, 729, 747, 761, 766, 770, 771, 773, 774, 776, 779, 781, 784, 785, 786, 796, 799, 800, 801, 804], "4096": 3, "_forward": [3, 5, 6, 8, 25, 26, 37, 38, 41, 747, 766, 781, 784, 785], "x": [3, 5, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 118, 119, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 168, 169, 171, 176, 192, 193, 197, 202, 203, 204, 208, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 312, 313, 316, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 362, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 429, 431, 432, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 536, 537, 538, 541, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 567, 568, 570, 571, 572, 574, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 673, 676, 677, 678, 679, 680, 681, 682, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 732, 735, 738, 741, 745, 747, 753, 758, 759, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 779, 781, 783, 784, 785, 786, 795, 796], "reshap": [3, 25, 26, 41, 42, 51, 55, 56, 58, 68, 74, 78, 79, 81, 339, 349, 352, 353, 355, 370, 371, 372, 375, 388, 389, 390, 391, 393, 397, 411, 434, 568, 588, 590, 591, 593, 606, 608, 612, 630, 646, 747, 773, 774, 776, 779, 781, 783, 786], "bidirect": 4, "encod": [4, 10, 12, 25, 26, 39, 41, 52, 57, 75, 80, 504, 588, 592, 648, 747, 784, 792, 796], "mlm": 4, "support": [4, 16, 25, 28, 40, 49, 51, 52, 56, 72, 74, 75, 79, 143, 162, 166, 188, 195, 210, 219, 236, 243, 264, 265, 269, 279, 294, 312, 328, 344, 346, 349, 352, 353, 387, 400, 493, 505, 514, 517, 518, 535, 549, 583, 584, 585, 586, 588, 590, 591, 614, 623, 624, 625, 628, 630, 639, 646, 733, 738, 741, 749, 751, 753, 754, 755, 757, 758, 764, 765, 766, 769, 770, 772, 773, 775, 776, 777, 779, 780, 781, 783, 784, 786, 788, 789, 791, 792, 793, 796, 798, 800, 801, 804, 806, 807, 808], "googl": [4, 39, 40, 41, 43, 762, 792], "type": [4, 6, 10, 12, 16, 22, 25, 26, 31, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 728, 729, 731, 735, 738, 741, 742, 745, 747, 749, 753, 754, 755, 756, 757, 758, 761, 764, 765, 766, 767, 769, 771, 773, 775, 776, 777, 779, 781, 783, 784, 795, 796, 801, 802, 805], "choos": [4, 39, 41, 49, 61, 62, 72, 210, 236, 243, 264, 265, 269, 355, 585, 586, 598, 599, 601, 700, 701, 702, 703, 704, 712, 713, 714, 716, 753, 754, 755, 771, 776, 782, 786, 795], "librari": [4, 6, 8, 14, 15, 21, 23, 37, 39, 49, 62, 72, 210, 241, 243, 259, 264, 265, 287, 585, 586, 591, 599, 601, 624, 625, 701, 702, 703, 704, 712, 713, 714, 716, 747, 748, 750, 753, 754, 757, 786, 787, 789, 791, 792, 793, 795, 797, 798, 799, 801, 805, 808], "pretrain": [4, 6, 10, 11, 12, 25, 26, 44, 747, 796], "save": [4, 39, 51, 68, 74, 364, 485, 544, 566, 585, 588, 602, 731, 749, 754, 762, 768, 776, 787, 793, 800], "some": [4, 5, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 30, 31, 37, 41, 42, 68, 76, 241, 243, 259, 352, 375, 376, 377, 569, 570, 573, 575, 576, 577, 585, 586, 589, 595, 681, 729, 747, 751, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 787, 788, 789, 792, 793, 795, 796, 797, 798, 800, 801, 802, 807, 808], "mohame54": 4, "automodel": [4, 8, 25], "autotoken": 4, "load": [4, 6, 8, 22, 25, 39, 40, 41, 42, 43, 44, 68, 353, 414, 602, 731, 747, 776, 787, 800, 807], "token": [4, 41], "bert_bas": 4, "from_pretrain": [4, 8, 25, 42, 795, 796], "base": [4, 39, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 98, 135, 143, 175, 239, 240, 257, 258, 259, 260, 274, 307, 312, 318, 321, 325, 332, 346, 349, 352, 353, 362, 394, 414, 470, 537, 547, 559, 583, 584, 586, 588, 591, 593, 599, 601, 630, 654, 701, 702, 703, 704, 711, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 742, 745, 747, 754, 755, 757, 761, 762, 763, 767, 769, 771, 772, 773, 775, 776, 777, 778, 779, 781, 801, 806, 808], "uncas": 4, "eval": [4, 5, 7, 731], "evalu": [4, 50, 51, 68, 73, 74, 239, 241, 257, 258, 259, 260, 264, 271, 273, 280, 284, 333, 353, 355, 411, 441, 579, 586, 589, 595, 602, 680, 681, 719, 720, 730, 731, 755, 761, 763, 770, 771, 801], "bert_token": 4, "sampl": [4, 6, 8, 10, 12, 22, 25, 26, 40, 47, 50, 51, 60, 64, 70, 73, 74, 83, 87, 134, 135, 288, 307, 346, 352, 355, 359, 375, 376, 377, 387, 447, 464, 465, 466, 467, 468, 583, 586, 597, 601, 690, 691, 692, 693, 716, 718, 729, 775, 776], "test": [4, 17, 18, 20, 21, 27, 28, 30, 31, 32, 40, 41, 50, 52, 65, 73, 75, 88, 117, 167, 171, 250, 251, 252, 253, 276, 352, 375, 376, 377, 524, 582, 584, 586, 588, 602, 719, 720, 747, 751, 752, 753, 756, 760, 763, 765, 767, 768, 771, 774, 777, 787, 788, 793, 795, 796, 801], "did": [4, 39, 753, 760, 786, 792, 807], "realli": [4, 37, 754, 761, 787, 795, 806, 807], "like": [4, 6, 8, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 42, 44, 47, 50, 51, 58, 70, 73, 74, 78, 81, 86, 135, 152, 175, 220, 240, 246, 249, 262, 280, 322, 325, 337, 349, 352, 353, 355, 362, 364, 394, 395, 400, 425, 426, 434, 470, 471, 487, 583, 584, 586, 591, 593, 597, 600, 623, 658, 693, 706, 747, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 792, 795, 796, 801, 806], "input": [4, 5, 8, 10, 12, 22, 23, 25, 30, 31, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 190, 192, 193, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 531, 532, 533, 539, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 561, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 678, 679, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 728, 729, 731, 732, 741, 757, 758, 759, 761, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 795, 796, 802, 805], "pad": [4, 39, 41, 51, 55, 58, 74, 78, 81, 352, 355, 370, 371, 372, 373, 374, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 504, 588, 590, 593, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 653, 666, 729, 747], "longest": 4, "return_tensor": [4, 8, 25, 42, 795, 796], "pt": [4, 8, 25, 795], "max_length": [4, 68], "512": [4, 5, 39, 41, 79, 590, 605, 644, 747], "input_id": 4, "101": [4, 40, 590, 591, 595, 614, 627, 676], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 51, 74, 83, 373, 691], "token_type_id": 4, "attention_mask": [4, 55, 78, 590, 616], "pooler": 4, "compar": [4, 6, 8, 25, 38, 42, 44, 51, 52, 62, 63, 68, 74, 75, 86, 317, 330, 349, 489, 492, 588, 599, 600, 701, 702, 703, 704, 705, 708, 747, 759, 765, 767, 775, 776, 779, 784, 797, 799, 801, 807, 808], "no_grad": [4, 39, 795], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 6, 38, 41, 47, 51, 55, 56, 60, 70, 73, 74, 78, 79, 83, 91, 114, 129, 141, 142, 143, 263, 301, 312, 313, 346, 353, 355, 359, 362, 364, 398, 410, 450, 453, 464, 465, 466, 467, 468, 471, 481, 492, 582, 583, 588, 590, 591, 595, 597, 598, 617, 621, 629, 630, 636, 638, 639, 640, 643, 678, 691, 692, 693, 699, 747, 756, 757, 774, 775, 781, 795, 797, 801], "ivy_output": [4, 42], "logits_clos": 4, "allclos": [4, 6, 8, 10, 12, 25, 42, 44, 51, 74, 349], "detach": [4, 6, 8, 10, 12, 25, 772], "rtol": [4, 10, 12, 51, 56, 74, 79, 317, 330, 349, 591, 632, 635, 775], "005": [4, 51, 74, 317, 330, 349, 417], "atol": [4, 6, 8, 25, 51, 56, 74, 79, 317, 330, 349, 591, 632, 775], "equal": [4, 47, 48, 50, 51, 52, 56, 57, 58, 60, 62, 63, 64, 68, 71, 73, 74, 75, 79, 80, 81, 83, 86, 93, 94, 129, 131, 132, 133, 139, 140, 148, 228, 230, 234, 239, 241, 250, 251, 272, 274, 279, 282, 283, 287, 314, 315, 317, 330, 346, 349, 352, 355, 358, 364, 374, 430, 439, 456, 461, 462, 463, 481, 489, 492, 568, 583, 584, 586, 588, 591, 592, 593, 597, 598, 599, 600, 601, 622, 631, 632, 635, 637, 643, 648, 651, 653, 658, 660, 666, 693, 699, 701, 702, 703, 704, 705, 708, 713, 715, 716, 717, 718, 728, 729, 760, 761, 763, 765, 767, 775, 776], "els": [4, 5, 6, 40, 41, 43, 44, 51, 52, 60, 73, 74, 83, 154, 155, 156, 157, 158, 170, 276, 280, 353, 359, 404, 413, 415, 416, 465, 499, 503, 584, 586, 588, 595, 597, 680, 683, 691, 692, 693, 741, 747, 753, 754, 755, 757, 759, 763, 764, 767, 770, 773, 774, 775, 776, 777, 779, 781, 783, 785, 786, 787, 802], "768": 4, "fn": [4, 42, 44, 51, 68, 71, 74, 97, 121, 122, 123, 124, 125, 162, 163, 195, 196, 199, 355, 423, 490, 505, 506, 555, 583, 584, 585, 588, 595, 676, 677, 678, 680, 681, 682, 735, 738, 742, 743, 745, 764, 767, 773, 774, 781, 795], "finish": [4, 14, 25, 26, 37, 40, 747, 748, 753, 754, 756], "2f": [4, 6], "sec": 4, "89": [4, 37, 50, 60, 71, 73, 74, 83, 94, 164, 231, 584, 586, 591, 601, 641, 692, 693, 717], "43": [4, 37, 39, 41, 51, 74, 83, 94, 230, 352, 353, 364, 372, 399, 479, 586, 597, 598, 692, 693, 700], "procedur": [4, 760, 762, 765, 775], "60": [4, 37, 41, 50, 64, 73, 75, 83, 87, 220, 254, 508, 516, 532, 546, 568, 586, 588, 591, 595, 601, 634, 673, 691, 709, 711, 715, 762], "big": [4, 728, 748, 787, 801], "jnp": [4, 17, 22, 25, 26, 27, 28, 31, 37, 39, 43, 747, 763, 764, 767, 769, 773, 777, 781, 786, 796], "config": [4, 5, 6, 8, 19, 25, 26, 39, 40, 42, 68, 595, 683, 747, 749, 754, 757, 760, 762, 768, 775, 784, 795, 802], "jax_enable_x64": [4, 5, 6, 8, 19, 25, 26, 747], "ref": [4, 5, 75, 79, 255, 269, 272, 278, 285, 586, 593, 662, 754, 773], "initi": [4, 25, 26, 42, 51, 55, 68, 74, 78, 94, 353, 364, 404, 413, 416, 486, 590, 615, 726, 727, 729, 730, 731, 733, 734, 747, 755, 759, 763, 764, 775, 776, 781, 792, 795, 796, 801, 807, 808], "fast": [4, 20, 30, 51, 352, 374, 801], "valu": [4, 37, 38, 40, 41, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 93, 94, 96, 109, 114, 115, 117, 118, 129, 132, 133, 134, 135, 138, 143, 148, 165, 169, 175, 208, 209, 216, 217, 218, 219, 221, 223, 224, 225, 232, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 294, 299, 301, 308, 312, 314, 315, 317, 318, 319, 321, 322, 323, 324, 327, 328, 330, 331, 333, 336, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 363, 364, 374, 387, 394, 398, 401, 404, 408, 413, 414, 415, 416, 417, 418, 420, 428, 433, 438, 444, 449, 451, 452, 453, 455, 458, 460, 464, 465, 467, 468, 474, 476, 479, 480, 481, 484, 485, 486, 487, 493, 495, 496, 497, 499, 504, 507, 508, 510, 512, 515, 516, 517, 524, 531, 532, 536, 537, 538, 541, 549, 554, 559, 560, 563, 566, 567, 568, 569, 570, 571, 575, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 624, 625, 630, 631, 632, 635, 636, 637, 638, 639, 640, 643, 646, 651, 652, 653, 657, 658, 666, 667, 668, 672, 674, 675, 676, 677, 678, 683, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 727, 728, 729, 730, 731, 732, 733, 751, 754, 755, 757, 760, 761, 763, 764, 765, 766, 767, 769, 770, 773, 774, 776, 778, 779, 781, 783, 787, 795, 801, 802], "demo": [5, 6, 7, 8, 26, 33, 37, 41, 747, 749], "milesi": 5, "blob": [5, 39, 41], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 5, "util": [5, 23, 39, 42, 51, 74, 194, 353, 414, 585, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 754, 760, 764, 767, 770, 773, 776, 777, 781, 796, 799, 807, 808], "data_load": 5, "py": [5, 39, 41, 44, 87, 353, 414, 711, 738, 741, 747, 753, 754, 755, 757, 759, 762, 763, 764, 766, 767, 768, 769, 770, 774, 775, 776, 777, 781, 783, 785, 786], "l65": 5, "mask_valu": 5, "pil_img": 5, "scale": [5, 6, 39, 51, 55, 59, 74, 76, 78, 82, 103, 207, 208, 296, 307, 328, 344, 346, 349, 352, 353, 358, 369, 375, 376, 377, 385, 395, 406, 458, 459, 460, 576, 580, 585, 589, 590, 596, 613, 616, 617, 689, 728, 729, 733, 801, 803], "is_mask": 5, "w": [5, 40, 41, 51, 52, 53, 55, 68, 73, 74, 75, 76, 78, 91, 263, 328, 343, 349, 351, 352, 353, 370, 371, 372, 374, 388, 389, 390, 391, 402, 416, 477, 500, 502, 546, 569, 570, 571, 573, 575, 576, 577, 588, 589, 590, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 676, 747, 756, 772, 781, 784, 785, 796], "h": [5, 51, 52, 55, 74, 75, 78, 352, 371, 372, 389, 390, 500, 502, 588, 590, 595, 603, 606, 607, 608, 609, 610, 611, 612, 673, 677, 679, 682, 687, 756, 760, 761, 762, 796, 797], "size": [5, 10, 12, 17, 20, 21, 27, 28, 30, 31, 32, 39, 41, 44, 51, 52, 55, 56, 58, 60, 61, 68, 74, 75, 78, 79, 81, 83, 84, 91, 93, 94, 131, 134, 207, 208, 209, 300, 303, 307, 314, 315, 316, 321, 335, 342, 346, 349, 350, 352, 353, 355, 358, 359, 362, 364, 366, 367, 368, 369, 370, 371, 387, 388, 389, 391, 392, 401, 413, 416, 430, 442, 453, 459, 460, 466, 471, 483, 484, 485, 486, 487, 526, 531, 583, 585, 588, 590, 591, 593, 597, 598, 602, 617, 619, 622, 626, 630, 634, 636, 639, 645, 654, 659, 660, 661, 690, 696, 699, 719, 720, 729, 747, 773, 775, 776, 779, 784, 795], "neww": 5, "newh": 5, "int": [5, 39, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 97, 104, 108, 109, 119, 120, 129, 131, 132, 133, 134, 135, 138, 141, 142, 143, 150, 157, 160, 161, 164, 171, 186, 200, 201, 202, 209, 210, 219, 226, 227, 228, 229, 230, 231, 243, 246, 270, 279, 285, 288, 292, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 321, 322, 324, 328, 335, 337, 339, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 366, 367, 368, 370, 371, 372, 373, 374, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 397, 401, 403, 404, 405, 407, 410, 412, 413, 415, 416, 419, 422, 423, 427, 429, 430, 433, 434, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 490, 500, 501, 502, 504, 507, 508, 511, 526, 529, 531, 546, 547, 548, 552, 568, 569, 570, 571, 572, 575, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 619, 621, 622, 630, 631, 641, 643, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 679, 681, 682, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 741, 761, 763, 764, 765, 767, 769, 770, 773, 775, 776, 777, 779, 781, 786, 795], "assert": [5, 40, 42, 44, 68, 493, 588, 751, 756, 757, 770, 773, 774, 775, 776, 777, 783, 784], "too": [5, 219, 236, 243, 269, 586, 728, 753, 754, 755, 757, 763, 767, 777, 787], "small": [5, 41, 50, 51, 56, 59, 73, 74, 79, 82, 236, 243, 269, 270, 317, 330, 349, 353, 358, 408, 458, 459, 460, 586, 591, 596, 632, 635, 637, 689, 728, 732, 747, 754, 762, 765, 770, 775, 779, 781, 785, 787, 795, 796, 802], "would": [5, 19, 25, 26, 29, 31, 33, 41, 47, 49, 51, 70, 72, 74, 81, 104, 108, 120, 210, 352, 355, 379, 384, 424, 425, 430, 432, 434, 435, 436, 443, 447, 456, 580, 585, 654, 655, 656, 658, 660, 661, 663, 665, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 769, 771, 773, 774, 775, 776, 777, 779, 780, 781, 783, 785, 786, 787, 788, 792, 795, 801, 807], "pixel": [5, 39, 51, 74, 352, 387], "resampl": 5, "nearest": [5, 51, 74, 219, 236, 269, 279, 324, 349, 352, 364, 387, 487, 586, 779], "bicub": [5, 51, 74, 352, 387, 779], "zero": [5, 39, 47, 48, 50, 51, 53, 55, 56, 58, 61, 62, 64, 65, 70, 71, 73, 74, 76, 78, 79, 83, 84, 87, 88, 103, 105, 106, 107, 109, 126, 127, 129, 131, 136, 138, 139, 140, 141, 142, 145, 148, 149, 217, 218, 219, 221, 222, 223, 224, 225, 228, 230, 231, 233, 234, 235, 236, 241, 242, 243, 250, 251, 252, 253, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 289, 290, 291, 295, 296, 299, 301, 313, 320, 321, 322, 324, 332, 335, 337, 338, 339, 340, 344, 346, 349, 352, 353, 355, 362, 364, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 394, 395, 399, 401, 411, 438, 443, 444, 470, 479, 480, 496, 500, 507, 527, 569, 570, 575, 576, 577, 578, 580, 583, 584, 586, 588, 589, 590, 591, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 617, 618, 620, 625, 627, 628, 629, 630, 631, 632, 633, 635, 637, 645, 646, 653, 654, 655, 656, 658, 659, 666, 689, 691, 692, 693, 696, 697, 698, 699, 701, 702, 703, 704, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 733, 758, 761, 763, 764, 765, 769, 771, 772, 775, 781, 784, 785, 793, 800], "int64": [5, 51, 60, 61, 63, 64, 71, 83, 84, 86, 87, 139, 151, 157, 160, 162, 164, 168, 169, 173, 180, 297, 304, 344, 346, 362, 364, 471, 479, 480, 583, 584, 598, 600, 601, 691, 696, 697, 698, 707, 709, 710, 715, 717, 763, 774, 776, 781], "enumer": [5, 39, 41, 727, 747], "ndim": [5, 51, 56, 61, 74, 79, 84, 93, 97, 353, 355, 412, 413, 416, 424, 425, 426, 437, 445, 447, 454, 568, 588, 591, 598, 636, 639, 699, 761, 770, 776], "newaxi": [5, 581], "transpos": [5, 22, 25, 26, 43, 51, 55, 56, 68, 74, 78, 79, 93, 353, 396, 410, 412, 477, 590, 591, 603, 605, 607, 609, 610, 611, 629, 633, 635, 641, 729, 747, 773, 783, 786, 796], "255": [5, 22, 25, 26, 39, 40, 41, 43, 55, 74, 78, 230, 586, 612, 747, 796], "car": 5, "full_img": 5, "from_numpi": [5, 784], "fals": [5, 6, 8, 12, 16, 25, 28, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 120, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 192, 193, 198, 200, 203, 204, 206, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 316, 317, 318, 319, 321, 323, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 470, 471, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 527, 531, 532, 533, 536, 539, 540, 542, 543, 545, 546, 547, 549, 551, 553, 554, 556, 561, 562, 564, 565, 567, 570, 571, 573, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 680, 681, 682, 683, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 733, 735, 738, 741, 742, 745, 747, 751, 754, 757, 759, 762, 763, 764, 765, 767, 773, 774, 775, 776, 778, 779, 781, 784, 785, 786, 795, 796], "permut": [5, 7, 39, 58, 81, 93, 362, 470, 593, 656, 663, 796], "img_numpi": 5, "cpu": [5, 6, 8, 25, 39, 40, 41, 43, 44, 47, 49, 51, 60, 70, 72, 74, 83, 118, 129, 132, 134, 135, 138, 139, 140, 145, 189, 190, 192, 193, 194, 195, 200, 203, 205, 207, 210, 211, 213, 215, 359, 464, 465, 467, 468, 583, 585, 591, 597, 628, 690, 691, 692, 693, 728, 729, 730, 731, 732, 733, 734, 747, 751, 754, 755, 760, 763, 764, 774, 776, 787, 799, 801, 804, 806], "torch_unet": 5, "unet_carvana": 5, "when": [5, 7, 16, 18, 20, 21, 25, 26, 28, 30, 31, 32, 40, 42, 46, 47, 48, 50, 51, 56, 57, 60, 61, 64, 68, 70, 71, 73, 74, 79, 80, 83, 84, 87, 94, 138, 148, 219, 236, 241, 243, 259, 269, 274, 287, 288, 292, 344, 352, 353, 355, 358, 359, 364, 374, 387, 401, 404, 413, 416, 449, 458, 460, 465, 485, 487, 517, 533, 541, 547, 583, 584, 586, 588, 590, 591, 592, 593, 595, 597, 598, 601, 603, 616, 632, 637, 648, 649, 650, 658, 670, 671, 680, 681, 682, 691, 692, 693, 696, 697, 699, 700, 712, 714, 716, 718, 727, 728, 729, 730, 731, 732, 738, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 786, 787, 788, 791, 792, 795, 796, 799, 801, 804, 805, 806, 807], "ivy_unet": 5, "n_channel": 5, "n_class": 5, "forward": [5, 7, 12, 25, 26, 39, 41, 51, 74, 352, 374, 379, 380, 384, 385, 395, 726, 728, 730, 731, 733, 747, 754, 759, 766, 772, 776, 777, 779, 786, 787, 795, 801, 802], "effici": [5, 6, 7, 8, 14, 15, 17, 18, 25, 26, 27, 28, 56, 79, 353, 354, 408, 419, 591, 632, 747, 754, 755, 761, 770, 771, 773, 776, 781, 784, 787, 796, 801, 803, 804], "l62": 5, "mask_to_imag": 5, "ndarrai": [5, 47, 51, 52, 70, 74, 119, 120, 137, 352, 353, 355, 364, 395, 413, 449, 484, 485, 553, 583, 588, 738, 741, 753, 758, 763, 764, 767, 769, 773, 774, 775, 777, 779, 781, 783, 786, 789], "isinst": [5, 23, 25, 26, 767, 774, 776, 777, 785, 786], "len": [5, 39, 41, 47, 51, 56, 74, 79, 136, 304, 346, 352, 353, 364, 385, 395, 403, 405, 413, 416, 487, 583, 591, 644, 747, 761, 762, 767, 773, 774, 776, 783, 786, 795], "uint8": [5, 22, 25, 26, 41, 151, 158, 162, 173, 176, 181, 187, 297, 344, 584, 763, 776], "elif": [5, 6, 762, 767, 773, 774, 775], "bool": [5, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 119, 120, 126, 131, 132, 133, 134, 135, 136, 138, 140, 145, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 184, 188, 192, 193, 195, 196, 198, 200, 203, 204, 209, 210, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 313, 317, 318, 319, 321, 323, 329, 330, 335, 336, 338, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 364, 370, 371, 372, 374, 375, 376, 377, 387, 388, 389, 390, 393, 401, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 432, 433, 434, 435, 436, 439, 443, 447, 450, 452, 453, 456, 458, 460, 461, 462, 463, 465, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 531, 532, 536, 545, 546, 547, 549, 551, 553, 554, 567, 570, 571, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 616, 617, 618, 619, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 636, 637, 639, 643, 644, 646, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 676, 677, 678, 680, 681, 682, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 729, 732, 733, 741, 745, 763, 765, 767, 773, 774, 776, 777, 779, 781, 786, 795, 796], "argmax": [5, 40, 41, 42, 61, 84, 598, 747, 774, 795], "fromarrai": [5, 22, 25, 26, 41], "interpol": [5, 39, 51, 74, 332, 349, 352, 364, 487, 590, 616, 779, 801], "mode": [5, 31, 43, 51, 56, 68, 74, 79, 90, 91, 92, 206, 209, 214, 219, 236, 269, 311, 346, 352, 353, 355, 382, 387, 395, 403, 404, 410, 412, 413, 416, 428, 437, 442, 444, 445, 447, 449, 452, 454, 533, 534, 535, 539, 540, 542, 543, 556, 557, 561, 562, 564, 565, 585, 586, 588, 591, 636, 729, 730, 731, 744, 749, 754, 755, 756, 761, 764, 765, 779, 787, 801, 804], "bilinear": [5, 51, 74, 352, 387, 779], "torch_mask": 5, "squeez": [5, 39, 58, 81, 593, 801], "torch_result": 5, "to_numpi": [5, 25, 26, 37, 40, 41, 44, 52, 75, 588, 747, 775, 784], "give": [5, 17, 27, 37, 51, 55, 78, 175, 352, 394, 584, 590, 593, 603, 604, 605, 606, 608, 610, 612, 658, 727, 728, 747, 749, 754, 755, 756, 759, 762, 763, 765, 766, 768, 769, 776, 793, 801, 805], "img_tf": 5, "math": [5, 42, 286, 586, 773, 774, 775, 786, 799], "ve": [5, 14, 23, 25, 60, 83, 597, 690, 753, 754, 755, 776, 779, 780, 783, 789], "lot": [5, 747, 762, 763, 771, 776, 787, 792, 793, 800], "far": [5, 25, 26, 595, 670, 681, 764, 765, 782, 806, 807], "space": [5, 47, 50, 51, 52, 70, 73, 74, 75, 118, 134, 135, 288, 328, 349, 500, 504, 583, 586, 588, 779, 792], "del": [5, 762], "empty_cach": 5, "permute_dim": [5, 58, 81, 593], "usr": [5, 39, 40, 41, 44, 754], "local": [5, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 32, 39, 40, 41, 44, 748, 749, 754, 757, 760, 770, 775, 776], "lib": [5, 39, 40, 41, 44], "python3": [5, 7, 25, 39, 41, 44, 747, 749, 754, 755], "dist": [5, 39, 40, 41, 44], "func_wrapp": [5, 45, 50, 67, 73, 101, 103, 106, 109, 287, 580, 586, 725, 764, 774, 778], "242": [5, 74], "userwarn": [5, 44], "creat": [5, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 31, 32, 39, 40, 41, 43, 44, 47, 50, 51, 60, 68, 70, 73, 74, 79, 83, 118, 119, 120, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 270, 300, 301, 310, 311, 312, 346, 352, 353, 355, 359, 370, 371, 372, 393, 404, 413, 416, 422, 444, 449, 464, 465, 466, 467, 468, 535, 551, 568, 579, 583, 586, 588, 589, 597, 634, 690, 691, 692, 693, 695, 726, 728, 729, 730, 731, 732, 733, 734, 748, 749, 754, 755, 758, 759, 760, 762, 763, 764, 767, 770, 771, 773, 774, 775, 776, 779, 781, 782, 785, 788, 789, 792, 795, 796, 801, 802, 807], "mani": [5, 25, 26, 29, 58, 68, 81, 143, 312, 346, 583, 593, 660, 727, 747, 753, 754, 755, 758, 759, 761, 762, 763, 764, 765, 766, 769, 770, 771, 773, 774, 775, 776, 779, 781, 783, 784, 787, 791, 792, 793, 797, 801, 804, 807, 808], "view": [5, 51, 58, 74, 93, 130, 355, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 510, 583, 588, 593, 654, 655, 656, 658, 660, 661, 663, 665, 754, 755, 767, 801], "lead": [5, 56, 68, 79, 94, 243, 353, 408, 535, 586, 588, 591, 636, 639, 762, 763, 765, 777, 787, 792, 793], "overhead": [5, 18, 25, 26, 28, 787, 795, 804], "perform": [5, 18, 20, 22, 25, 26, 28, 30, 37, 39, 47, 51, 55, 56, 64, 65, 70, 74, 75, 78, 79, 87, 88, 104, 108, 134, 135, 206, 214, 236, 269, 290, 322, 342, 349, 350, 352, 353, 355, 362, 364, 374, 375, 376, 377, 379, 380, 384, 385, 393, 413, 423, 471, 479, 480, 500, 501, 502, 515, 516, 517, 533, 543, 580, 583, 585, 586, 588, 590, 591, 594, 595, 601, 602, 613, 615, 639, 641, 646, 667, 668, 669, 677, 678, 709, 710, 719, 720, 729, 757, 758, 759, 761, 763, 764, 765, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 784, 787, 793, 795, 796, 798, 801, 802, 803, 804, 805, 806, 808], "inplac": [5, 46, 52, 68, 75, 91, 491, 493, 514, 517, 518, 535, 536, 588, 595, 677, 678, 682, 687, 688, 726, 733, 756, 758, 765, 769, 771, 774, 779, 783, 785], "17": [5, 21, 37, 39, 41, 44, 45, 51, 56, 67, 73, 74, 75, 76, 78, 79, 83, 94, 103, 104, 135, 219, 236, 261, 269, 300, 342, 346, 352, 355, 370, 371, 379, 380, 383, 384, 388, 389, 391, 394, 434, 501, 516, 569, 571, 580, 583, 586, 588, 589, 590, 591, 595, 597, 604, 613, 614, 622, 626, 678, 691, 692, 693, 695, 761], "factor": [5, 51, 53, 55, 56, 74, 76, 78, 79, 90, 91, 207, 208, 209, 352, 353, 385, 395, 404, 405, 413, 416, 569, 570, 575, 576, 585, 589, 590, 591, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 728, 729, 733, 767, 792], "inc": 5, "unetdoubleconv": 5, "down1": 5, "unetdown": 5, "128": [5, 25, 26, 39, 48, 50, 55, 71, 73, 78, 94, 164, 240, 352, 373, 383, 500, 510, 584, 586, 588, 590, 591, 605, 607, 612, 634, 747], "down2": 5, "down3": 5, "down4": 5, "1024": [5, 39, 40, 747], "up1": 5, "unetup": 5, "up2": 5, "up3": 5, "up4": 5, "outc": 5, "unetoutconv": 5, "x1": [5, 16, 25, 26, 44, 48, 50, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 86, 93, 94, 98, 149, 159, 175, 182, 202, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 272, 274, 278, 285, 290, 301, 317, 320, 325, 326, 327, 329, 331, 336, 340, 346, 349, 355, 364, 438, 478, 489, 492, 584, 585, 586, 588, 591, 598, 600, 619, 626, 629, 634, 638, 641, 642, 645, 700, 707, 735, 747, 757, 763, 765, 767, 769, 773, 774, 796], "x2": [5, 16, 25, 26, 48, 50, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 93, 94, 98, 149, 175, 182, 202, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 272, 274, 278, 285, 290, 317, 320, 325, 326, 327, 329, 331, 336, 340, 349, 355, 364, 403, 438, 478, 489, 584, 585, 586, 588, 591, 598, 619, 626, 629, 634, 638, 641, 642, 645, 700, 735, 757, 763, 765, 767, 769, 773, 774], "x3": [5, 48, 52, 149, 489, 584, 588], "x4": 5, "x5": 5, "in_channel": 5, "out_channel": 5, "mid_channel": 5, "double_conv": 5, "with_bia": [5, 729, 747, 785, 796], "batchnorm2d": [5, 732], "downscal": [5, 52, 75, 495, 496, 517, 588], "maxpool": 5, "doubl": [5, 297, 344], "conv": [5, 590, 729, 779], "maxpool_conv": 5, "upscal": 5, "scale_factor": [5, 51, 74, 352, 387, 779], "align_corn": [5, 51, 74, 352, 387, 779], "conv2dtranspos": [5, 729], "valid": [5, 39, 41, 51, 55, 65, 74, 78, 88, 91, 153, 352, 353, 370, 371, 372, 388, 389, 390, 391, 393, 394, 411, 416, 520, 584, 588, 590, 593, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 654, 662, 719, 720, 729, 741, 754, 759, 763, 765, 768, 772, 775, 776, 795, 802], "bhwc": 5, "diff_h": 5, "diff_w": 5, "pad_width": [5, 51, 58, 74, 81, 355, 444, 593, 653, 666], "constant_pad": [5, 58, 81, 593], "concat": [5, 37, 42, 52, 58, 68, 81, 209, 504, 585, 588, 593, 666, 775, 779, 781, 795], "openmim": 6, "mim": 6, "0rc8": 6, "torch": [6, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 42, 43, 44, 47, 52, 56, 66, 75, 79, 126, 163, 190, 191, 205, 207, 279, 493, 517, 549, 583, 584, 585, 586, 588, 591, 594, 639, 669, 726, 738, 747, 751, 754, 755, 757, 758, 759, 760, 762, 763, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 783, 784, 786, 787, 789, 795, 796, 807], "request": [6, 8, 22, 25, 26, 39, 42, 51, 200, 359, 468, 585, 747, 748, 753, 765, 768, 777, 779, 793, 796], "get_model": 6, "list_model": 6, "mmengin": 6, "configdict": 6, "saniti": [6, 8, 25, 774], "checkpoint": [6, 42, 787], "correct": [6, 10, 12, 21, 31, 37, 39, 41, 64, 87, 182, 353, 414, 584, 593, 601, 651, 716, 718, 747, 753, 755, 756, 761, 762, 763, 764, 767, 769, 770, 773, 775, 776, 796], "against": [6, 48, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 149, 268, 287, 317, 318, 321, 330, 349, 364, 484, 485, 486, 487, 524, 584, 586, 588, 591, 598, 629, 630, 632, 635, 696, 776, 781, 787, 791, 801], "zoo": 6, "checkpoint_nam": [6, 8, 25], "convnext": 6, "tiny_32xb128": 6, "noema_in1k": 6, "openmmlab": 6, "dure": [6, 8, 18, 20, 25, 28, 30, 31, 49, 53, 64, 68, 72, 76, 87, 210, 352, 375, 376, 377, 535, 555, 569, 570, 575, 585, 588, 589, 590, 591, 594, 601, 613, 629, 667, 668, 669, 716, 718, 727, 730, 731, 732, 733, 754, 761, 763, 764, 767, 770, 771, 773, 774, 775, 776, 779, 787, 795, 801, 802, 807], "trace": [6, 8, 20, 22, 25, 26, 28, 30, 31, 43, 52, 56, 68, 75, 79, 519, 520, 523, 534, 543, 557, 565, 588, 591, 747, 757, 763, 778, 781, 787, 789, 795, 796, 802, 807], "appropri": [6, 16, 25, 26, 52, 61, 66, 84, 89, 219, 236, 243, 269, 317, 330, 349, 586, 598, 696, 753, 754, 755, 767, 771, 776], "get_scal": 6, "cfg": [6, 768], "kei": [6, 18, 19, 25, 26, 41, 43, 46, 51, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 317, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 362, 375, 376, 377, 417, 418, 420, 421, 429, 450, 453, 458, 460, 461, 462, 463, 465, 471, 478, 479, 480, 481, 489, 490, 492, 493, 495, 496, 497, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 588, 590, 594, 595, 604, 605, 606, 607, 613, 614, 616, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 667, 668, 673, 679, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 726, 727, 729, 733, 747, 760, 761, 762, 770, 773, 774, 775, 776, 784, 796, 801, 804, 808], "input_shap": [6, 12, 23, 25, 26, 352, 392, 747], "block": [6, 25, 26, 29, 30, 31, 32, 353, 406, 747, 755, 761, 763, 767, 770, 776, 780, 782, 786, 787, 789, 796, 806, 808], "url": [6, 8, 22, 25, 26, 39, 42, 747, 796], "cocodataset": [6, 8, 22, 25, 26, 42, 747, 796], "org": [6, 8, 22, 25, 26, 39, 41, 42, 44, 50, 73, 76, 143, 151, 239, 249, 250, 265, 312, 346, 364, 478, 569, 570, 583, 584, 586, 589, 591, 593, 601, 637, 666, 716, 747, 766, 796], "val2017": [6, 8, 25, 42], "000000039769": [6, 8, 25, 42], "stream": [6, 8, 22, 25, 26, 39, 42, 49, 72, 210, 585, 747, 796, 805], "_config": 6, "train_pipelin": 6, "tensor_imag": 6, "And": [6, 8, 10, 12, 17, 20, 25, 26, 27, 40, 71, 747, 757, 760, 768, 770, 776, 795], "final": [6, 8, 10, 12, 14, 22, 25, 26, 31, 37, 38, 47, 52, 74, 75, 91, 117, 134, 135, 352, 395, 504, 582, 583, 588, 590, 616, 753, 755, 757, 758, 759, 760, 762, 763, 765, 766, 770, 772, 773, 774, 779, 780, 784, 795, 796, 797, 807], "transpiled_graph": [6, 8, 25], "what": [6, 8, 14, 19, 25, 26, 29, 30, 33, 38, 39, 352, 385, 395, 747, 749, 755, 756, 761, 762, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 780, 781, 783, 784, 785, 786, 787, 792, 793, 797, 802, 803, 806], "improv": [6, 8, 25, 28, 755, 763, 769, 770, 779, 781, 789, 793, 795, 799, 801, 803, 804], "For": [6, 7, 8, 16, 18, 25, 26, 28, 31, 33, 47, 51, 56, 62, 74, 79, 118, 136, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 271, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 314, 315, 319, 338, 346, 349, 353, 355, 410, 412, 426, 444, 447, 583, 586, 591, 593, 599, 601, 637, 639, 643, 651, 662, 701, 702, 703, 704, 712, 714, 715, 717, 726, 749, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 798, 799, 802, 807, 808], "origin": [6, 8, 23, 25, 26, 27, 28, 29, 31, 38, 39, 40, 44, 51, 56, 58, 64, 68, 74, 79, 81, 87, 91, 93, 94, 224, 249, 276, 307, 346, 353, 355, 364, 413, 437, 443, 445, 448, 479, 480, 484, 485, 486, 487, 586, 591, 593, 601, 630, 658, 659, 710, 738, 747, 753, 754, 755, 759, 760, 762, 763, 771, 773, 774, 775, 781, 793, 795, 796, 801, 802], "_f": [6, 8, 25], "comp_model": [6, 8, 25], "equival": [6, 8, 25, 56, 79, 91, 118, 230, 243, 264, 265, 278, 279, 355, 455, 583, 586, 591, 632, 635, 638, 646, 738, 773, 774, 779, 784, 786, 788, 796], "just": [6, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 39, 41, 51, 56, 64, 79, 91, 143, 312, 346, 353, 412, 583, 591, 601, 632, 711, 729, 747, 754, 755, 757, 759, 762, 763, 764, 765, 766, 770, 771, 773, 774, 775, 776, 781, 783, 784, 787, 792, 793, 796, 801, 802, 807], "np_imag": [6, 22, 25, 26], "jax_imag": 6, "hk": [6, 8, 25, 39, 43, 747, 786, 796], "rng_kei": [6, 8, 25, 747, 796], "random": [6, 8, 10, 12, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 30, 31, 32, 39, 41, 42, 51, 55, 68, 74, 78, 310, 311, 346, 353, 404, 413, 416, 464, 465, 466, 467, 468, 590, 613, 690, 691, 692, 693, 694, 695, 728, 741, 747, 753, 764, 775, 776, 777, 786, 796, 801], "prngkei": [6, 8, 18, 19, 25, 26, 39, 747, 786, 796], "42": [6, 8, 18, 19, 25, 26, 37, 39, 40, 45, 60, 67, 76, 83, 109, 230, 352, 373, 383, 569, 573, 580, 586, 589, 591, 596, 597, 601, 630, 634, 689, 690, 691, 692, 693, 694, 709, 711, 747, 781, 786, 796], "jax_mlp_forward": 6, "param": [6, 8, 25, 39, 40, 41, 43, 68, 75, 94, 490, 507, 508, 588, 735, 747, 786, 796], "init": [6, 8, 25, 39, 41, 51, 74, 353, 404, 413, 416, 728, 747, 757, 786, 796], "rng": [6, 8, 25, 39, 747, 786, 796], "appli": [6, 8, 22, 25, 26, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 349, 350, 352, 353, 354, 355, 358, 364, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 387, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 580, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 632, 634, 635, 636, 637, 639, 643, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 676, 679, 682, 683, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 725, 729, 732, 747, 748, 750, 753, 754, 755, 758, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 779, 783, 784, 785, 786, 787, 789, 795, 796, 802], "both": [6, 7, 8, 10, 12, 20, 22, 25, 26, 30, 31, 38, 40, 47, 50, 51, 52, 55, 56, 70, 73, 74, 75, 78, 79, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 174, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 313, 319, 320, 322, 325, 330, 346, 349, 352, 353, 355, 359, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 438, 444, 464, 478, 481, 507, 511, 513, 515, 524, 554, 578, 579, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 747, 753, 755, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 773, 774, 776, 779, 781, 783, 784, 785, 786, 787, 795, 796, 801, 804, 806, 807, 808], "optim": [6, 8, 16, 25, 26, 39, 41, 42, 44, 53, 76, 300, 346, 354, 419, 491, 577, 588, 589, 594, 667, 668, 669, 728, 747, 763, 773, 779, 782, 784, 786, 793, 796, 799, 800, 801, 802, 803, 804, 805, 808], "each": [6, 8, 18, 19, 20, 25, 26, 28, 29, 30, 32, 39, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 61, 62, 64, 68, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 87, 91, 93, 94, 102, 103, 105, 106, 107, 109, 114, 136, 149, 161, 164, 209, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 295, 296, 298, 299, 304, 311, 314, 315, 319, 325, 329, 333, 338, 341, 344, 346, 349, 352, 353, 355, 359, 362, 364, 370, 371, 372, 375, 376, 377, 380, 388, 389, 390, 391, 394, 395, 400, 401, 405, 412, 413, 415, 416, 424, 425, 426, 429, 430, 435, 436, 438, 439, 441, 443, 444, 447, 455, 456, 464, 471, 476, 477, 478, 479, 480, 481, 489, 492, 500, 507, 508, 524, 548, 568, 570, 571, 573, 575, 576, 577, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 595, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 619, 620, 623, 624, 625, 629, 631, 632, 633, 635, 637, 638, 639, 644, 653, 657, 659, 660, 662, 664, 666, 676, 683, 690, 699, 701, 702, 704, 710, 711, 718, 729, 732, 733, 734, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 786, 787, 791, 792, 793, 795, 796, 797, 798, 802, 804, 807], "timeit": [6, 8, 18, 25, 26, 42, 44], "06": [6, 41, 48, 60, 73, 76, 92, 101, 161, 218, 234, 352, 373, 383, 575, 580, 584, 589, 693, 776, 784], "m": [6, 7, 8, 25, 38, 40, 42, 44, 47, 51, 56, 60, 73, 74, 79, 83, 93, 136, 141, 142, 143, 263, 312, 313, 346, 352, 353, 354, 355, 359, 374, 400, 404, 405, 407, 417, 426, 435, 436, 450, 464, 465, 466, 467, 468, 583, 591, 595, 597, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 678, 691, 692, 693, 747, 749, 754, 755, 756, 762, 781], "per": [6, 8, 18, 39, 41, 51, 55, 74, 78, 307, 346, 352, 353, 355, 370, 371, 372, 388, 389, 390, 391, 412, 451, 590, 604, 606, 607, 608, 609, 612, 616, 729, 755, 762, 771, 774, 784], "loop": [6, 8, 18, 33, 66, 89, 114, 117, 582, 594, 667, 668, 669, 747, 759, 787, 795], "100": [6, 8, 37, 39, 41, 47, 50, 51, 70, 73, 74, 75, 78, 92, 135, 143, 230, 270, 283, 312, 330, 339, 346, 349, 352, 353, 375, 376, 413, 416, 508, 516, 532, 583, 586, 588, 591, 595, 627, 676, 747, 762, 763, 776, 784, 785, 786, 787, 792, 793, 795], "block_until_readi": 6, "08": [6, 51, 64, 74, 83, 222, 317, 330, 349, 352, 373, 383, 586, 692, 693, 718, 768], "\u00b5": [6, 8, 18], "made": [6, 8, 25, 51, 58, 74, 353, 355, 406, 424, 425, 426, 662, 749, 753, 755, 757, 758, 761, 762, 767, 768, 770, 772, 773, 774, 777, 779, 781, 783, 792, 801], "significantli": [6, 8, 25, 51, 56, 74, 79, 353, 415, 591, 639, 762, 791, 799], "line": [6, 8, 14, 15, 18, 19, 22, 25, 26, 28, 29, 40, 41, 286, 586, 747, 754, 757, 758, 759, 762, 764, 765, 767, 774, 776, 779, 782, 783, 784, 785, 793, 796, 804], "even": [6, 22, 25, 26, 51, 74, 91, 236, 269, 274, 279, 355, 364, 444, 478, 586, 754, 755, 757, 762, 763, 764, 766, 769, 770, 773, 774, 775, 779, 783, 784, 785, 786, 787, 792, 793, 807], "better": [6, 28, 37, 43, 44, 749, 753, 756, 774, 775, 777, 779, 780, 783, 784, 785, 793, 804], "v100": 6, "3x": 6, "increas": [6, 8, 18, 25, 28, 51, 56, 58, 74, 79, 81, 355, 364, 444, 481, 591, 593, 595, 644, 653, 666, 682, 763, 767, 774, 777, 779, 791, 795, 801], "execut": [6, 8, 16, 17, 18, 20, 25, 26, 28, 30, 33, 40, 42, 44, 115, 117, 555, 582, 585, 588, 754, 755, 760, 761, 762, 763, 764, 765, 767, 770, 771, 773, 776, 779, 781, 783, 786, 787, 789, 795, 797, 801, 802, 803, 804, 805, 807], "train2017": [6, 8, 22, 25, 26, 747, 796], "000000283921": [6, 8, 25], "out_torch": [6, 8, 25], "et": [6, 590, 591, 616, 639], "took": [6, 73, 276], "out_jax": [6, 8, 25], "1e": [6, 8, 10, 12, 25, 37, 41, 48, 51, 53, 56, 57, 59, 71, 74, 76, 79, 80, 82, 92, 161, 317, 330, 349, 358, 458, 459, 460, 537, 538, 546, 559, 560, 569, 570, 575, 577, 584, 588, 589, 591, 592, 596, 639, 648, 649, 650, 689, 730, 732, 733, 747, 761, 770, 773, 775, 785, 786], "66m": 6, "53m": 6, "That": [6, 8, 10, 12, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 39, 278, 354, 419, 586, 741, 754, 755, 758, 776, 783, 784, 785, 802], "pretti": [6, 8, 25, 26, 39, 784, 807], "much": [6, 8, 16, 17, 23, 25, 26, 27, 28, 39, 317, 330, 349, 728, 753, 754, 755, 758, 761, 763, 770, 773, 774, 775, 777, 778, 779, 781, 783, 784, 792, 799, 801, 807, 808], "achiev": [6, 8, 25, 747, 762, 763, 770, 771, 776, 779, 784, 786, 789], "solid": [6, 8, 25], "associ": [7, 51, 56, 74, 79, 219, 269, 355, 364, 423, 481, 586, 591, 632, 635, 647, 755, 763, 770, 771, 774, 775, 776, 787], "python": [7, 10, 16, 28, 33, 37, 39, 40, 41, 43, 44, 51, 60, 74, 83, 118, 203, 215, 243, 278, 359, 464, 465, 466, 467, 468, 568, 583, 585, 586, 588, 597, 690, 691, 692, 693, 695, 738, 741, 752, 754, 755, 757, 760, 761, 762, 767, 774, 776, 781, 783, 784, 787, 789, 790, 791, 792, 795, 798, 801, 802, 803, 807, 808], "resnet34_weight": 7, "torch_resnet_34": 7, "resnet_34": 7, "ivy_resnet_34": 7, "comparison": [7, 51, 74, 237, 272, 318, 349, 354, 419, 586, 591, 640, 767], "shown": [7, 23, 25, 66, 68, 89, 253, 276, 319, 349, 586, 753, 754, 755, 757, 760, 762, 763, 765, 767, 768, 769, 774, 775, 776, 777, 778, 781, 783, 787], "8507": 7, "1351": 7, "0069": 7, "85072654": 7, "13506058": 7, "00688287": 7, "resnet50_weight": 7, "torch_resnet_50": 7, "imagenet1k_v2": 7, "resnet_50": 7, "ivy_resnet_50": 7, "3429": 7, "0408": 7, "0121": 7, "34288213": 7, "04077019": 7, "0121203": 7, "depend": [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 47, 48, 51, 52, 56, 62, 63, 71, 74, 79, 86, 87, 115, 126, 148, 216, 217, 218, 221, 222, 223, 224, 233, 234, 236, 239, 241, 257, 258, 259, 260, 269, 271, 274, 281, 282, 286, 287, 338, 349, 353, 400, 414, 549, 582, 583, 584, 586, 588, 591, 598, 600, 623, 624, 636, 637, 638, 639, 700, 705, 708, 718, 747, 749, 750, 751, 753, 754, 755, 760, 763, 764, 766, 771, 773, 774, 775, 776, 779, 781, 787, 788, 792, 795, 799, 801, 802], "yet": [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 41, 345, 347, 348, 356, 357, 361, 753, 754, 787, 795, 796], "doc": [8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 40, 41, 74, 143, 312, 346, 480, 583, 747, 748, 752, 753, 756, 765, 766, 768, 769, 776, 781, 784, 785, 795, 796], "autofeatureextractor": [8, 25], "extractor": [8, 10, 12, 25, 41, 747], "hug": [8, 25, 795], "face": [8, 25, 748, 754, 757, 768, 772, 779, 781, 795, 801, 807], "arch_nam": [8, 25], "microsoft": [8, 25, 792, 795, 796, 801, 806, 808], "50": [8, 25, 26, 37, 41, 51, 64, 73, 74, 75, 235, 275, 336, 349, 352, 353, 380, 399, 406, 502, 508, 515, 516, 532, 546, 586, 588, 591, 595, 598, 601, 627, 634, 671, 673, 699, 711, 772, 783, 795, 796], "feature_extractor": [8, 25], "inputs_jax": [8, 25], "last_hidden_st": [8, 25], "jax_forward": [8, 25], "jit_appli": 8, "67": [8, 37, 50, 52, 56, 73, 75, 78, 83, 93, 231, 234, 239, 279, 280, 282, 289, 364, 394, 479, 500, 501, 546, 572, 574, 586, 588, 589, 591, 626, 693], "28": [8, 23, 25, 26, 37, 39, 41, 44, 50, 51, 55, 59, 73, 74, 75, 78, 79, 83, 87, 235, 259, 275, 352, 353, 373, 383, 399, 485, 515, 569, 586, 588, 589, 590, 591, 596, 601, 605, 607, 609, 612, 614, 634, 689, 691, 692, 693, 711, 715, 747], "09": [8, 39, 45, 50, 76, 83, 109, 274, 284, 569, 580, 586, 589, 692], "48": [8, 37, 41, 50, 51, 73, 74, 75, 76, 83, 103, 218, 241, 283, 352, 371, 372, 373, 383, 389, 390, 393, 515, 569, 573, 580, 586, 588, 589, 591, 595, 601, 634, 671, 692, 711], "2x": [8, 25], "build": [9, 13, 14, 16, 23, 25, 26, 29, 30, 31, 32, 37, 39, 44, 62, 68, 94, 599, 701, 702, 703, 704, 729, 730, 731, 747, 748, 749, 754, 756, 762, 763, 770, 772, 780, 782, 785, 786, 787, 789, 792, 796, 799, 801, 803, 806, 807, 808], "timm": [9, 10, 14, 25, 26, 747, 796], "tensorflow": [9, 10, 14, 16, 17, 20, 21, 23, 25, 26, 27, 30, 31, 32, 37, 43, 50, 51, 52, 73, 74, 143, 190, 220, 312, 346, 353, 401, 549, 583, 585, 588, 738, 747, 751, 752, 753, 754, 755, 757, 759, 762, 763, 764, 769, 773, 774, 775, 776, 777, 779, 781, 786, 787, 789, 792, 793, 796, 799, 802, 804, 805, 807, 808], "kera": [9, 10, 12, 14, 15, 23, 25, 26, 42, 43, 726, 747, 793, 796, 807], "seen": [10, 12, 17, 23, 25, 353, 359, 405, 466, 738, 762, 763, 765, 767, 774, 776, 781, 783, 784, 791, 792, 807], "veri": [10, 18, 25, 26, 28, 50, 73, 270, 317, 330, 349, 586, 591, 637, 752, 753, 754, 755, 760, 761, 763, 764, 765, 767, 769, 770, 773, 774, 775, 776, 777, 779, 782, 784, 785, 786, 787, 791, 792, 797, 798, 799, 801, 802, 803, 806, 807, 808], "guid": [10, 23, 747, 748, 753, 754, 755, 760, 768, 774, 807], "focu": [10, 23, 753, 772, 799, 800, 803, 808], "more": [10, 13, 14, 16, 17, 18, 21, 23, 25, 26, 27, 28, 37, 39, 40, 41, 45, 50, 51, 56, 58, 62, 67, 73, 74, 79, 81, 85, 101, 103, 106, 109, 118, 149, 241, 243, 259, 274, 287, 342, 350, 353, 354, 355, 396, 397, 408, 411, 419, 424, 425, 426, 429, 450, 535, 580, 583, 584, 586, 588, 591, 593, 599, 622, 628, 629, 632, 635, 637, 639, 646, 655, 662, 701, 702, 703, 704, 725, 747, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 799, 800, 801, 802, 803, 804, 807, 808], "involv": [10, 13, 14, 21, 23, 48, 71, 176, 219, 236, 243, 269, 274, 584, 586, 748, 756, 762, 763, 765, 775, 779, 786, 792, 801, 807], "develop": [10, 24, 25, 26, 747, 748, 749, 751, 752, 753, 754, 755, 757, 760, 762, 777, 787, 789, 791, 792, 793, 795, 796, 799, 800, 801, 802, 803, 806, 807, 808], "usual": [10, 12, 42, 236, 269, 586, 741, 754, 757, 763, 774, 776, 779], "instead": [10, 12, 16, 25, 32, 39, 44, 50, 51, 56, 73, 74, 79, 190, 278, 304, 346, 352, 364, 388, 389, 390, 478, 481, 585, 586, 591, 632, 753, 754, 755, 757, 760, 762, 763, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 779, 781, 783, 784, 787, 795, 796, 799, 801, 807, 808], "own": [10, 12, 16, 25, 26, 31, 747, 754, 757, 762, 763, 766, 767, 773, 774, 777, 781, 787, 789, 792, 793, 797, 800, 801, 806, 807], "directli": [10, 12, 16, 19, 23, 25, 26, 29, 353, 405, 595, 682, 747, 755, 757, 758, 761, 762, 763, 764, 766, 768, 770, 771, 773, 774, 775, 777, 778, 781, 783, 785, 786, 787, 788, 793, 795, 796, 805, 806, 807], "case": [10, 12, 18, 20, 25, 26, 28, 29, 30, 31, 39, 46, 47, 51, 52, 58, 64, 68, 70, 74, 75, 81, 91, 94, 120, 136, 162, 163, 190, 195, 196, 203, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 244, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 326, 328, 338, 349, 352, 355, 358, 359, 365, 375, 376, 377, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 458, 460, 466, 488, 510, 517, 531, 532, 533, 583, 584, 585, 586, 588, 591, 593, 595, 601, 637, 643, 654, 655, 656, 658, 660, 661, 663, 665, 673, 679, 712, 713, 714, 715, 716, 717, 718, 730, 731, 733, 747, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 783, 785, 786, 787, 792, 795, 796, 800, 804], "mlp": 10, "mixer": 10, "onli": [10, 12, 25, 26, 31, 37, 39, 41, 43, 47, 50, 51, 56, 58, 60, 68, 70, 73, 74, 79, 81, 83, 91, 93, 109, 135, 174, 175, 204, 264, 265, 270, 276, 300, 323, 328, 346, 349, 352, 353, 355, 359, 364, 374, 387, 401, 405, 415, 416, 424, 425, 426, 434, 464, 465, 481, 494, 580, 583, 584, 585, 586, 588, 590, 591, 593, 595, 597, 598, 600, 601, 616, 629, 636, 639, 655, 658, 670, 671, 677, 678, 680, 681, 682, 687, 688, 691, 692, 693, 696, 697, 707, 713, 716, 729, 731, 733, 741, 747, 748, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 791, 795, 796, 800, 801, 802, 807, 808], "retriev": [10, 12, 16, 490, 588, 755, 774], "mlp_encod": [10, 25, 26, 747, 796], "create_model": [10, 25, 26, 747, 796], "mixer_b16_224": [10, 25, 26, 747, 796], "nois": [10, 12, 25, 26, 747, 795, 796], "randn": [10, 12, 25, 26, 747, 796], "tf_mlp_encod": [10, 25, 26], "been": [10, 12, 20, 22, 25, 26, 51, 52, 60, 74, 75, 83, 192, 279, 355, 451, 500, 501, 502, 585, 586, 588, 597, 690, 741, 753, 755, 757, 759, 761, 762, 763, 764, 766, 767, 769, 770, 773, 776, 781, 783, 787, 788, 789, 795, 801, 808], "within": [10, 12, 16, 25, 26, 46, 51, 74, 118, 317, 330, 349, 352, 388, 389, 390, 424, 425, 426, 583, 597, 693, 731, 747, 753, 755, 758, 762, 763, 774, 775, 776, 785, 787, 796, 797, 798, 802], "astyp": [10, 12, 17, 39, 40, 41, 48, 55, 71, 78, 584, 590, 606, 608, 609, 612, 747, 763, 773, 774, 779], "output_torch": [10, 12], "output_tf": [10, 12], "constant": [10, 12, 17, 20, 21, 27, 30, 32, 37, 51, 58, 59, 74, 81, 82, 91, 354, 355, 419, 444, 593, 595, 596, 653, 676, 689, 728, 730, 731, 732, 747, 770, 775, 777, 785, 786, 787, 795], "output_dens": [10, 25, 26, 747], "layer": [10, 12, 16, 22, 23, 25, 26, 37, 42, 51, 59, 74, 82, 596, 615, 616, 689, 726, 727, 728, 730, 731, 732, 733, 734, 747, 766, 774, 777, 779, 781, 782, 785, 791, 796, 799, 801, 805, 808], "dens": [10, 23, 25, 26, 304, 346, 729, 747], "unit": [10, 25, 26, 51, 67, 74, 91, 101, 103, 104, 105, 106, 107, 108, 109, 291, 295, 296, 298, 299, 344, 461, 462, 580, 747, 754, 757, 763, 774, 775, 776, 787, 802, 805], "activ": [10, 23, 25, 26, 51, 52, 55, 66, 74, 78, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 291, 295, 296, 298, 299, 549, 590, 616, 617, 728, 729, 747, 749, 754, 755, 763, 768, 777, 778, 785, 796, 801, 804], "mention": [10, 12, 25, 26, 31, 753, 754, 755, 758, 759, 765, 769, 770, 773, 774, 776, 779, 792, 796, 801], "learn": [10, 12, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 37, 39, 53, 76, 353, 414, 500, 570, 573, 575, 576, 577, 588, 589, 594, 667, 668, 669, 733, 747, 748, 752, 753, 754, 756, 757, 763, 768, 770, 772, 780, 789, 791, 792, 799, 803, 804, 805, 806, 807, 808], "basic": [10, 12, 16, 19, 23, 25, 26, 29, 32, 355, 451, 748, 753, 765, 776], "fulli": [10, 12, 14, 15, 18, 23, 25, 26, 39, 51, 74, 364, 485, 729, 747, 758, 763, 769, 772, 779, 781, 782, 783, 784, 785, 786, 787, 793, 799, 800, 801, 807, 808], "trainabl": [10, 12, 16, 22, 23, 25, 26, 43, 726, 730, 731, 734, 747, 766, 782, 784, 785, 796], "target": [10, 12, 18, 20, 21, 23, 25, 26, 28, 29, 30, 31, 32, 41, 51, 74, 191, 354, 418, 419, 420, 421, 585, 729, 731, 737, 747, 751, 754, 756, 759, 768, 775, 780, 784, 785, 786, 796, 797, 799, 800, 801, 804, 806, 807], "fine": [10, 12, 25, 26, 755, 763, 765, 774, 783, 786, 807], "tune": [10, 12, 25, 26, 806, 807], "train": [10, 12, 23, 25, 26, 42, 51, 53, 55, 74, 76, 78, 352, 358, 375, 376, 377, 458, 460, 569, 570, 575, 589, 590, 613, 616, 617, 728, 729, 730, 731, 732, 747, 761, 764, 770, 784, 785, 786, 787, 789, 793, 796, 799, 800, 805, 807, 808], "ground": [10, 12, 51, 354, 417, 751, 774, 776, 791], "ret": [10, 12, 25, 26, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 406, 409, 411, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 531, 532, 536, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 678, 679, 680, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 731, 733, 738, 743, 747, 763, 764, 766, 767, 772, 773, 774, 775, 777, 781, 786, 796], "op": [10, 16, 37, 738, 777, 781, 787], "eagertensor": [10, 16, 37, 738, 775], "readi": [10, 12, 17, 18, 19, 27, 28, 29, 30, 31, 32, 39, 41, 753, 754], "explor": [10, 12, 16, 20, 21, 22, 25, 26, 31, 32, 33, 753, 754, 755, 763, 779, 782, 786, 801, 804], "deepmind": [11, 793], "perceiverio": [11, 793], "backbon": [11, 39, 747, 781, 784], "TO": [11, 13, 24], "replac": [11, 13, 24, 40, 50, 52, 58, 60, 68, 73, 75, 81, 83, 129, 270, 301, 346, 531, 532, 536, 583, 586, 588, 593, 597, 651, 690, 755, 760, 761, 763, 764, 771, 774, 776, 783, 786, 787, 792, 796, 808], "efficientnet": 12, "include_top": [12, 747], "eff_encod": [12, 747], "applic": [12, 14, 39, 41, 44, 51, 55, 74, 78, 353, 416, 590, 591, 595, 601, 616, 617, 643, 676, 677, 678, 682, 683, 715, 717, 747, 754, 762, 763, 764, 771, 785, 798, 799, 801, 803, 805, 807], "efficientnet_v2": [12, 747], "efficientnetv2b0": [12, 747], "data": [12, 22, 26, 31, 39, 41, 44, 45, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 78, 79, 81, 83, 84, 85, 86, 87, 88, 93, 94, 96, 97, 98, 101, 103, 106, 109, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 188, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 294, 300, 301, 302, 303, 304, 305, 306, 313, 314, 315, 316, 318, 333, 338, 344, 346, 349, 352, 353, 355, 359, 363, 364, 375, 376, 377, 393, 398, 400, 415, 428, 449, 452, 464, 465, 466, 467, 468, 474, 478, 479, 480, 484, 486, 487, 504, 517, 519, 520, 523, 549, 580, 583, 585, 586, 588, 590, 591, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 613, 614, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 652, 655, 656, 658, 659, 661, 662, 666, 674, 691, 692, 693, 695, 696, 697, 699, 700, 705, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 731, 735, 747, 754, 756, 757, 758, 759, 760, 761, 764, 766, 769, 770, 771, 773, 775, 777, 779, 781, 783, 789, 790, 792, 801, 802, 803, 805, 806, 807], "storag": [12, 39, 40, 784, 792], "googleapi": [12, 39, 40], "efficientnetv2": 12, "b0_notop": 12, "h5": [12, 68], "24274472": 12, "0u": 12, "paramet": [12, 23, 25, 26, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 528, 531, 532, 535, 536, 537, 538, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 741, 743, 747, 753, 758, 766, 767, 769, 774, 775, 776, 777, 781, 783, 784, 795, 796, 802], "torch_eff_encod": [12, 747], "fc": [12, 39, 747, 785, 796], "1280": [12, 500, 588, 747], "state": [13, 24, 39, 55, 78, 183, 184, 185, 186, 187, 269, 556, 558, 561, 563, 564, 584, 586, 588, 590, 615, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 747, 751, 754, 760, 763, 764, 766, 767, 768, 769, 774, 776, 780, 781, 782, 784, 792, 796, 807, 808], "api": [13, 18, 23, 24, 28, 41, 43, 50, 56, 73, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 144, 145, 151, 161, 164, 174, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 319, 349, 364, 478, 583, 584, 586, 591, 593, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 652, 654, 655, 656, 658, 659, 661, 662, 666, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 751, 754, 755, 756, 758, 760, 763, 764, 765, 766, 767, 769, 771, 773, 774, 775, 776, 779, 780, 782, 784, 787, 789, 790, 791, 797, 799, 801, 803, 806, 808], "welcom": [14, 40, 747, 748, 754, 755], "goal": [14, 39, 243, 586, 747, 753, 792, 801, 807], "provid": [14, 16, 20, 23, 25, 26, 30, 31, 37, 43, 47, 51, 52, 56, 58, 61, 64, 65, 68, 70, 74, 75, 79, 81, 84, 87, 88, 114, 136, 138, 154, 155, 156, 157, 158, 166, 176, 188, 192, 288, 353, 355, 358, 364, 399, 403, 413, 416, 430, 439, 456, 458, 460, 487, 499, 531, 532, 582, 583, 584, 585, 586, 588, 590, 591, 593, 595, 598, 601, 602, 616, 631, 634, 645, 654, 655, 662, 674, 696, 716, 718, 719, 720, 729, 733, 738, 747, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 783, 785, 787, 791, 795, 796, 799, 800, 801, 802, 803, 804, 805, 808], "experi": [14, 41, 754, 767, 776, 782, 784, 787], "varieti": [14, 757, 762, 763, 764, 776, 778, 797, 799, 803, 804, 807, 808], "organ": [14, 758, 761, 770, 774, 777, 789, 792], "main": [14, 26, 47, 51, 56, 74, 79, 129, 141, 142, 143, 301, 312, 313, 346, 353, 355, 398, 433, 583, 591, 621, 622, 643, 753, 754, 755, 757, 760, 761, 771, 773, 799, 801, 802, 807], "find": [14, 40, 41, 44, 56, 62, 68, 79, 591, 595, 599, 632, 672, 701, 702, 703, 704, 741, 747, 748, 752, 753, 754, 755, 757, 760, 762, 772, 776, 779, 781, 784, 788, 789, 791, 795], "exactli": [14, 18, 28, 37, 38, 42, 286, 586, 761, 762, 763, 764, 765, 767, 776, 779, 791, 793, 796], "rush": [14, 793], "jump": [14, 775], "straight": [14, 747, 762, 774, 776, 783], "quickstart": 14, "introduct": [14, 16, 23, 25, 26, 801], "capabl": [14, 22, 26, 776, 779], "point": [14, 23, 48, 50, 51, 56, 60, 62, 64, 71, 73, 74, 79, 83, 87, 118, 119, 120, 127, 129, 132, 139, 140, 144, 148, 161, 165, 169, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 249, 250, 251, 252, 257, 258, 259, 260, 261, 269, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 300, 301, 303, 332, 333, 336, 338, 346, 349, 352, 353, 354, 359, 364, 375, 376, 377, 400, 415, 417, 464, 465, 466, 467, 468, 478, 479, 480, 487, 581, 583, 584, 586, 591, 597, 598, 599, 600, 601, 618, 620, 623, 624, 625, 627, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 646, 692, 693, 699, 701, 702, 703, 704, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 738, 751, 753, 754, 755, 757, 758, 759, 760, 762, 763, 765, 766, 769, 773, 774, 776, 777, 779, 781, 783, 784, 793, 795, 807], "those": [14, 38, 39, 56, 58, 68, 74, 79, 81, 118, 175, 236, 269, 452, 568, 583, 584, 586, 588, 591, 593, 595, 598, 636, 639, 651, 672, 699, 753, 754, 755, 758, 761, 762, 763, 771, 773, 774, 775, 776, 779, 791, 798], "who": [14, 756, 767, 780, 787, 801, 803], "dive": [14, 16, 25, 37, 747, 748, 750, 752, 753, 755, 757, 761, 763, 768, 775, 780, 783, 784, 787, 807], "deeper": [14, 16, 26, 46, 595, 670, 671, 680, 681, 682, 755, 756, 776, 780, 791], "project": [14, 19, 25, 26, 29, 590, 616, 729, 747, 750, 753, 754, 755, 758, 759, 760, 776, 785, 787, 791, 792, 793, 796, 797, 799, 801, 804, 808], "showcas": [14, 747], "real": [14, 22, 50, 51, 64, 73, 74, 87, 93, 103, 106, 109, 139, 140, 216, 217, 218, 219, 221, 222, 223, 224, 225, 234, 236, 237, 239, 241, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 266, 269, 271, 272, 274, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 323, 333, 349, 352, 353, 374, 395, 400, 401, 580, 583, 586, 591, 598, 601, 623, 624, 625, 630, 637, 639, 640, 643, 646, 699, 712, 714, 715, 716, 717, 761, 803], "world": [14, 22, 755, 803], "whether": [14, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 119, 120, 131, 133, 138, 140, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 176, 188, 192, 193, 195, 196, 198, 200, 203, 204, 206, 209, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 313, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 346, 349, 352, 353, 354, 355, 364, 370, 371, 372, 374, 375, 376, 377, 393, 408, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 432, 434, 435, 436, 439, 443, 450, 452, 453, 456, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 531, 532, 533, 534, 536, 539, 540, 542, 543, 545, 546, 547, 549, 551, 553, 554, 561, 562, 565, 567, 570, 571, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 601, 602, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 628, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 676, 677, 678, 680, 681, 682, 683, 687, 688, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 725, 726, 729, 730, 731, 732, 733, 741, 747, 748, 753, 754, 758, 761, 763, 765, 769, 773, 774, 776, 778, 779, 795, 796], "re": [14, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 42, 44, 51, 52, 61, 74, 84, 209, 307, 346, 355, 445, 446, 500, 585, 588, 591, 593, 598, 641, 659, 698, 700, 748, 753, 754, 755, 756, 757, 763, 772, 773, 774, 775, 777, 779, 783, 786, 787, 790, 791, 792, 801], "beginn": [14, 748, 801], "advanc": [14, 37, 754, 800], "user": [14, 25, 40, 41, 43, 270, 287, 355, 444, 535, 586, 588, 727, 729, 730, 731, 741, 747, 749, 754, 755, 756, 758, 759, 761, 762, 763, 764, 767, 771, 772, 773, 774, 776, 778, 779, 780, 781, 787, 788, 791, 792, 799, 801, 807, 808], "got": [14, 37, 767], "cover": [14, 25, 51, 74, 352, 388, 389, 390, 747, 753, 757, 758, 760, 763, 765, 766, 770, 771, 776, 779, 780], "write": [14, 15, 25, 26, 37, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 148, 150, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 313, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 331, 332, 333, 334, 337, 338, 339, 344, 346, 349, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 405, 406, 409, 410, 411, 412, 417, 418, 419, 420, 421, 429, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 495, 496, 500, 501, 502, 507, 508, 517, 531, 532, 569, 570, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 670, 689, 690, 691, 692, 693, 695, 697, 698, 700, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 747, 752, 753, 755, 756, 757, 759, 760, 762, 763, 765, 766, 767, 770, 773, 775, 777, 781, 783, 786, 793, 801, 808], "familiar": [14, 15, 16, 753, 754], "concept": [14, 15, 16], "agnost": [14, 15, 16, 17, 25, 26, 27, 31, 37, 747, 758, 769, 781, 783, 786, 787, 807, 808], "unifi": [14, 15, 16, 18, 19, 25, 28, 29, 33, 40, 68, 209, 585, 756, 757, 758, 763, 767, 771, 772, 774, 779, 781, 787, 790, 792, 794, 797, 798, 799, 801, 805, 808], "alongsid": [14, 15, 16, 17, 27, 590, 616, 792], "turn": [14, 15, 18, 28, 55, 78, 91, 375, 376, 377, 590, 613, 729, 754, 760, 761, 764, 765, 774, 776, 793], "remov": [14, 15, 18, 25, 26, 28, 56, 68, 79, 591, 593, 594, 595, 622, 629, 643, 661, 667, 668, 684, 744, 747, 753, 759, 760, 762, 763, 766, 770, 776, 779, 786, 795, 796, 801], "wrapper": [14, 15, 18, 758, 760, 761, 763, 767, 770, 773, 774, 783, 789, 797, 801], "unus": [14, 15, 18, 765, 773], "part": [14, 15, 18, 47, 50, 51, 73, 74, 79, 93, 103, 106, 109, 141, 142, 143, 249, 253, 276, 312, 313, 334, 346, 349, 353, 355, 364, 401, 444, 487, 580, 583, 586, 591, 624, 625, 730, 731, 747, 749, 753, 755, 757, 760, 763, 768, 770, 773, 774, 776, 777, 779, 781, 782, 786, 787, 795, 796, 799, 801, 806, 807, 808], "lazi": [14, 15, 18, 21, 28, 31, 32, 43], "eager": [14, 15, 18, 21, 23, 28, 31, 32, 43, 761, 787, 801], "understand": [14, 15, 16, 20, 37, 43, 749, 751, 752, 753, 754, 755, 756, 757, 760, 765, 766, 769, 775, 780, 793, 797, 807], "between": [14, 15, 20, 30, 31, 32, 37, 50, 51, 52, 55, 56, 57, 58, 62, 68, 73, 74, 78, 79, 80, 81, 94, 118, 161, 224, 237, 272, 274, 288, 317, 330, 332, 349, 352, 353, 354, 355, 364, 375, 376, 377, 388, 389, 390, 399, 403, 417, 418, 419, 420, 421, 444, 487, 583, 584, 586, 590, 592, 593, 595, 597, 599, 613, 634, 648, 649, 650, 654, 662, 676, 691, 702, 703, 704, 733, 758, 759, 763, 765, 769, 770, 771, 773, 774, 775, 776, 779, 780, 782, 783, 784, 786, 791, 795, 796, 797, 798, 800, 801, 802, 807], "decor": [14, 15, 20, 31, 43, 494, 588, 751, 757, 758, 761, 763, 764, 770, 773, 774, 775, 779], "wai": [14, 15, 16, 19, 21, 25, 29, 31, 37, 91, 747, 750, 752, 754, 757, 758, 759, 760, 762, 763, 764, 773, 774, 775, 776, 779, 783, 784, 785, 786, 787, 788, 791, 792, 796, 803, 807, 808], "kornia": [14, 15, 22, 25, 26, 39, 43, 747, 796], "roundup": 16, "over": [16, 23, 26, 28, 39, 51, 56, 64, 65, 66, 71, 74, 78, 79, 87, 88, 89, 91, 114, 308, 309, 328, 335, 346, 349, 352, 353, 355, 362, 364, 366, 367, 368, 371, 380, 385, 389, 393, 394, 395, 412, 423, 434, 449, 452, 471, 481, 486, 535, 568, 582, 588, 591, 596, 597, 601, 602, 619, 630, 641, 643, 645, 646, 689, 693, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 732, 738, 741, 747, 754, 755, 759, 765, 766, 772, 773, 775, 777, 781, 783, 787, 791, 793, 799, 801], "indep": [16, 25], "futur": [16, 25, 39, 591, 624, 625, 747, 754, 755, 762, 763, 776, 777, 779, 783, 787, 791, 793, 807], "proof": [16, 25], "delv": [16, 26], "theori": 16, "deep": [16, 23, 25, 37, 68, 500, 588, 747, 748, 750, 752, 753, 755, 757, 760, 761, 763, 768, 772, 775, 780, 783, 784, 791, 799, 801, 804, 805, 807, 808], "esenti": [16, 25], "abstract": [16, 25, 26, 728, 733, 761, 763, 773, 774, 776, 779, 785, 787, 791, 799, 801, 803, 804, 808], "multipl": [16, 25, 50, 51, 56, 59, 64, 65, 68, 73, 74, 75, 76, 79, 81, 82, 87, 88, 131, 230, 254, 261, 267, 268, 269, 271, 352, 353, 355, 362, 373, 380, 383, 385, 411, 430, 439, 456, 471, 489, 527, 569, 570, 573, 575, 577, 578, 583, 586, 588, 589, 590, 591, 593, 596, 598, 601, 602, 605, 606, 607, 608, 618, 627, 629, 630, 651, 654, 659, 660, 689, 696, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 747, 753, 755, 758, 759, 761, 765, 767, 768, 770, 773, 774, 775, 776, 779, 781, 787, 793, 795, 799, 800, 801, 808], "specif": [16, 17, 22, 23, 25, 26, 27, 29, 31, 39, 49, 51, 52, 72, 74, 75, 176, 207, 210, 243, 264, 265, 274, 359, 468, 500, 501, 502, 528, 584, 585, 586, 588, 591, 593, 594, 597, 600, 601, 624, 625, 641, 662, 667, 668, 669, 690, 707, 712, 713, 714, 716, 730, 731, 738, 743, 747, 751, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 767, 768, 769, 770, 773, 774, 775, 776, 777, 779, 781, 782, 783, 785, 786, 787, 788, 789, 791, 795, 796, 797, 799, 800, 802, 803, 804, 808], "quirk": [16, 25], "perk": [16, 25, 747, 758, 761], "manag": [16, 23, 25, 535, 558, 588, 747, 748, 759, 763, 764, 773, 787, 793, 803, 805], "under": [16, 25, 26, 354, 419, 741, 747, 753, 754, 756, 757, 764, 765, 766, 768, 774, 775, 776, 779, 780, 781, 784, 786, 787, 795, 796, 801, 804, 808], "hood": [16, 25, 26, 747, 756, 764, 765, 768, 774, 776, 779, 780, 781, 784, 786, 795, 796, 808], "simpli": [16, 25, 26, 28, 37, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 586, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 635, 636, 637, 639, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 747, 753, 754, 755, 758, 759, 760, 762, 763, 764, 765, 766, 769, 770, 773, 774, 775, 776, 779, 781, 785, 786, 787, 789, 802, 807], "appropi": 16, "string": [16, 25, 26, 41, 51, 52, 55, 68, 74, 78, 146, 147, 159, 166, 188, 189, 190, 191, 192, 194, 203, 210, 211, 215, 297, 344, 352, 353, 355, 394, 401, 444, 480, 498, 584, 585, 588, 590, 591, 603, 604, 605, 606, 608, 610, 612, 625, 727, 741, 759, 760, 762, 763, 764, 767, 774, 781, 784], "simplest": [16, 754, 765, 776, 779], "interact": [16, 25, 40, 43, 753, 800, 801, 806], "submodul": [16, 25, 39, 41, 93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 727, 728, 729, 731, 732, 733, 734, 753, 754, 755, 757, 760, 762, 764, 770, 771, 776, 780, 781, 785, 789], "track": [16, 25, 26, 38, 39, 595, 682, 727, 730, 731, 754, 755, 757, 772, 773, 795, 801], "current": [16, 25, 26, 39, 40, 51, 52, 68, 74, 94, 114, 162, 163, 166, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 202, 204, 353, 355, 399, 400, 444, 505, 506, 509, 514, 518, 529, 530, 549, 582, 584, 585, 588, 591, 595, 623, 670, 680, 681, 727, 731, 738, 744, 747, 750, 753, 754, 755, 757, 759, 761, 762, 763, 764, 767, 768, 770, 773, 774, 775, 776, 779, 781, 786, 787, 793, 795, 801, 807, 808], "object": [16, 21, 23, 25, 39, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 126, 130, 131, 152, 161, 164, 172, 175, 210, 268, 465, 571, 583, 584, 585, 589, 595, 597, 673, 674, 675, 677, 678, 679, 685, 686, 687, 688, 695, 726, 729, 730, 731, 738, 741, 747, 758, 759, 761, 762, 770, 771, 774, 775, 776, 779, 783, 786, 794, 795, 796, 801, 807], "ones": [16, 23, 25, 37, 43, 47, 51, 53, 55, 60, 68, 70, 74, 78, 83, 129, 133, 138, 140, 145, 195, 196, 232, 301, 346, 364, 486, 569, 583, 585, 586, 589, 590, 608, 609, 691, 692, 693, 747, 753, 758, 762, 765, 769, 770, 776, 783, 784, 801], "likewis": [16, 21, 25, 32, 747, 755, 761, 763, 766, 769, 770, 774, 779, 784, 795, 796, 807], "nativearrai": [16, 25, 26, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 119, 120, 126, 128, 133, 134, 135, 136, 137, 138, 140, 141, 142, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 171, 173, 175, 176, 182, 192, 193, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 478, 479, 480, 481, 482, 489, 492, 493, 495, 496, 500, 501, 502, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 520, 523, 524, 526, 531, 532, 533, 536, 545, 546, 547, 548, 549, 551, 553, 554, 556, 567, 569, 570, 571, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 672, 673, 677, 678, 679, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 734, 758, 761, 765, 767, 769, 770, 771, 773, 774, 777, 778, 781, 783, 789], "alia": [16, 25, 581, 753, 774, 794, 796], "select": [16, 25, 30, 43, 51, 64, 74, 87, 353, 355, 364, 401, 411, 452, 479, 480, 601, 709, 710, 753, 754, 755, 762, 773, 776, 781, 783, 786, 787, 801, 804, 805], "lastli": [16, 25, 747, 758], "contain": [16, 25, 26, 40, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 159, 161, 162, 163, 164, 167, 168, 169, 171, 173, 176, 193, 195, 196, 197, 202, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 351, 352, 353, 354, 355, 358, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 536, 539, 541, 546, 547, 548, 549, 551, 553, 554, 561, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 677, 678, 679, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 727, 729, 730, 731, 733, 734, 738, 741, 747, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 762, 763, 765, 766, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 785, 787, 788, 789, 791, 795, 801, 802, 807], "subclass": [16, 25, 26, 771, 774, 779, 796], "dict": [16, 25, 26, 39, 43, 46, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 162, 163, 164, 168, 169, 176, 192, 195, 196, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 296, 298, 299, 301, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 355, 374, 375, 376, 377, 417, 418, 420, 421, 424, 425, 426, 429, 444, 450, 452, 453, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 490, 492, 493, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 527, 531, 532, 546, 547, 549, 551, 553, 554, 567, 578, 584, 585, 588, 595, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 670, 671, 673, 676, 677, 678, 679, 681, 682, 683, 687, 688, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 726, 729, 731, 738, 758, 761, 784, 785, 789, 795, 796], "recurs": [16, 25, 26, 39, 41, 46, 68, 69, 162, 163, 195, 196, 505, 506, 584, 585, 588, 595, 670, 671, 674, 680, 681, 682, 754, 757, 760, 761, 770, 773, 785, 787], "oper": [16, 17, 22, 25, 26, 27, 31, 38, 41, 47, 48, 50, 51, 52, 55, 68, 70, 71, 73, 74, 75, 78, 94, 109, 134, 135, 176, 206, 214, 219, 221, 230, 233, 236, 243, 258, 260, 269, 270, 274, 278, 281, 286, 294, 314, 315, 343, 344, 346, 351, 352, 355, 366, 367, 368, 370, 371, 372, 378, 379, 380, 384, 388, 389, 390, 391, 393, 394, 395, 451, 493, 500, 501, 502, 549, 580, 583, 584, 585, 586, 588, 590, 591, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 641, 643, 715, 717, 729, 747, 753, 754, 756, 757, 758, 761, 763, 764, 765, 766, 767, 770, 773, 774, 776, 779, 781, 784, 785, 789, 791, 795, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808], "fashion": [16, 776, 796], "native_arrai": [16, 25, 26, 47, 48, 50, 70, 72, 73, 74, 75, 86, 101, 104, 133, 136, 138, 140, 145, 148, 149, 150, 151, 159, 164, 171, 193, 202, 210, 226, 230, 231, 235, 236, 237, 239, 243, 247, 255, 256, 264, 269, 272, 275, 278, 283, 342, 354, 355, 420, 444, 450, 453, 489, 519, 520, 523, 553, 580, 583, 584, 585, 586, 588, 590, 591, 592, 593, 597, 598, 601, 602, 604, 605, 612, 617, 620, 625, 631, 632, 640, 641, 643, 646, 648, 650, 651, 658, 690, 699, 708, 714, 717, 719, 738, 751, 775, 776], "data_class": [16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 371, 372, 500, 504, 639, 664], "doe": [16, 25, 38, 40, 50, 51, 52, 58, 68, 73, 74, 81, 91, 143, 231, 270, 272, 280, 312, 346, 353, 354, 364, 365, 400, 419, 484, 485, 488, 517, 583, 586, 588, 591, 593, 623, 660, 751, 753, 755, 756, 759, 762, 763, 765, 766, 768, 769, 770, 773, 774, 775, 776, 779, 781, 783, 784, 787, 789, 792, 795, 797, 801, 802, 808], "implement": [16, 17, 25, 27, 31, 39, 42, 48, 49, 51, 62, 63, 71, 72, 74, 79, 86, 91, 148, 162, 163, 176, 195, 196, 210, 216, 217, 218, 221, 222, 223, 224, 233, 234, 236, 239, 241, 243, 257, 258, 259, 260, 269, 271, 274, 278, 281, 282, 286, 287, 338, 349, 353, 364, 399, 400, 484, 485, 505, 506, 584, 585, 586, 588, 590, 591, 599, 600, 601, 616, 623, 624, 625, 634, 643, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 738, 747, 751, 753, 756, 757, 758, 759, 761, 763, 764, 766, 767, 769, 770, 771, 773, 775, 776, 777, 779, 781, 783, 784, 785, 786, 787, 789, 798, 799, 800, 801, 804, 807, 808], "low": [16, 25, 28, 44, 51, 55, 60, 78, 83, 352, 394, 590, 597, 603, 604, 605, 606, 608, 610, 612, 691, 693, 761, 767, 773, 774, 779, 781, 797, 799, 801, 802, 803, 805, 807], "level": [16, 25, 26, 28, 75, 492, 727, 747, 748, 753, 755, 761, 763, 767, 770, 772, 773, 774, 778, 779, 780, 781, 784, 785, 786, 787, 789, 793, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808], "c": [16, 25, 31, 40, 41, 47, 51, 52, 53, 55, 58, 64, 70, 71, 73, 74, 75, 76, 78, 79, 81, 85, 87, 91, 107, 119, 120, 135, 138, 161, 164, 219, 230, 236, 237, 257, 258, 269, 272, 280, 287, 352, 353, 355, 358, 364, 366, 367, 368, 379, 384, 396, 397, 399, 400, 402, 411, 424, 425, 426, 434, 458, 459, 460, 480, 492, 500, 501, 502, 503, 511, 515, 516, 554, 569, 570, 573, 575, 576, 577, 580, 583, 584, 586, 588, 589, 590, 591, 593, 595, 598, 599, 601, 604, 605, 606, 607, 608, 609, 623, 625, 627, 658, 662, 670, 673, 677, 678, 679, 681, 682, 687, 688, 699, 704, 710, 711, 716, 718, 732, 741, 748, 754, 756, 759, 760, 761, 765, 770, 772, 780, 781, 782, 784, 787, 789, 790, 792, 793, 796, 797, 801, 805, 806, 808], "wrap": [16, 18, 25, 26, 28, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 355, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 543, 546, 547, 548, 549, 551, 553, 554, 565, 567, 569, 570, 573, 575, 576, 577, 578, 588, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 635, 636, 637, 639, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 747, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 769, 770, 773, 774, 776, 781, 783, 786, 787, 789, 795, 796, 797, 801, 802, 807, 808], "fundament": [16, 25, 762, 774, 779, 781, 791, 801], "common": [16, 19, 25, 29, 50, 51, 68, 73, 175, 246, 254, 320, 325, 349, 584, 586, 748, 751, 753, 754, 760, 763, 764, 765, 770, 771, 774, 777, 779, 787, 791, 798, 801, 808], "signatur": [16, 25, 355, 364, 444, 478, 763, 764, 765, 766, 769, 773, 776, 777, 779, 792, 798, 807], "matmul": [16, 25, 26, 42, 56, 79, 568, 588, 591, 639, 759, 776, 777, 781], "to_n": [16, 25, 26, 37, 46, 69, 781], "jaxlib": [16, 22, 40, 738, 754, 758, 763, 764, 769, 777, 781, 783], "xla_extens": [16, 22, 738, 758, 763, 764, 769, 777, 781, 783], "arrayimpl": [16, 22, 738], "abov": [16, 21, 25, 26, 31, 32, 47, 50, 51, 56, 60, 67, 73, 74, 79, 83, 109, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 299, 301, 312, 313, 319, 322, 344, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 385, 388, 389, 390, 391, 395, 400, 401, 444, 478, 481, 507, 511, 513, 515, 517, 554, 578, 580, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 691, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 747, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 779, 781, 783, 784, 785, 786, 796, 801, 806], "instanc": [16, 22, 25, 26, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 161, 164, 167, 168, 169, 171, 176, 193, 205, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 349, 352, 353, 354, 355, 358, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 388, 389, 390, 391, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 542, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 749, 753, 754, 755, 757, 758, 759, 763, 765, 766, 767, 769, 770, 771, 772, 773, 776, 784, 785, 786, 789, 795, 802], "why": [16, 747, 755, 773, 783, 790, 792], "method": [16, 25, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 148, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 349, 353, 354, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 583, 584, 586, 588, 589, 591, 592, 595, 598, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 681, 682, 683, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 727, 728, 729, 730, 731, 753, 755, 757, 758, 759, 762, 763, 764, 765, 766, 769, 776, 777, 781, 782, 785, 786, 787, 795, 796, 802, 808], "underli": [16, 25, 26, 37, 51, 58, 74, 81, 226, 229, 231, 266, 355, 434, 586, 591, 593, 637, 658, 761, 773, 779, 795, 801], "howev": [16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 56, 79, 243, 286, 287, 358, 458, 460, 535, 586, 588, 591, 637, 639, 738, 753, 754, 757, 758, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 779, 781, 783, 784, 785, 786, 787, 792, 795, 800, 801, 807], "disabl": [16, 25, 760], "array_mod": [16, 25, 533, 556, 588, 778], "set_array_mod": [16, 25, 556, 588, 778], "composit": [16, 25, 162, 163, 195, 196, 288, 353, 406, 505, 506, 584, 585, 586, 588, 753, 756, 758, 759, 761, 763, 764, 771, 773, 774, 775, 776, 779, 781, 785, 786, 787, 789, 795, 802], "ultim": [16, 25, 795], "sigmoid": [16, 25, 26, 37, 45, 51, 67, 74, 293, 344, 359, 464, 580, 725, 781, 784, 785], "z": [16, 25, 26, 38, 39, 47, 50, 51, 52, 56, 57, 60, 62, 64, 70, 73, 74, 75, 79, 80, 81, 83, 87, 93, 94, 134, 135, 137, 138, 197, 219, 220, 224, 226, 229, 231, 236, 247, 248, 251, 252, 253, 255, 256, 261, 263, 265, 266, 267, 268, 276, 285, 292, 293, 319, 344, 349, 354, 364, 417, 418, 419, 420, 421, 427, 429, 440, 477, 478, 481, 487, 492, 504, 507, 508, 515, 516, 532, 545, 546, 547, 555, 568, 583, 585, 586, 588, 591, 592, 593, 595, 597, 598, 599, 601, 619, 629, 634, 635, 639, 646, 648, 649, 650, 651, 673, 677, 679, 687, 691, 692, 693, 696, 701, 711, 712, 714, 715, 716, 728, 747, 759, 761, 764, 765, 781, 783, 795], "divid": [16, 21, 25, 26, 42, 50, 51, 52, 58, 68, 73, 74, 81, 93, 94, 243, 358, 458, 459, 460, 546, 586, 588, 593, 660, 758, 761, 765, 768, 776], "exp": [16, 25, 26, 50, 51, 73, 74, 107, 109, 241, 261, 274, 293, 344, 352, 379, 384, 580, 586, 591, 637, 772, 774], "high": [16, 25, 26, 44, 51, 55, 60, 78, 83, 352, 394, 540, 588, 590, 597, 603, 604, 605, 606, 608, 610, 612, 691, 693, 753, 767, 772, 774, 784, 789, 793, 797, 798, 799, 800, 801, 805, 807, 808], "network": [16, 23, 25, 26, 37, 39, 44, 590, 614, 725, 727, 728, 729, 730, 731, 747, 761, 770, 781, 785, 792, 796, 797, 799, 800, 801, 805, 807, 808], "most": [16, 25, 26, 68, 70, 91, 138, 353, 400, 540, 562, 583, 588, 591, 623, 624, 744, 747, 752, 753, 754, 758, 761, 762, 763, 764, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 787, 792, 801, 802, 804, 805, 807, 808], "entir": [16, 25, 26, 28, 41, 51, 64, 65, 68, 74, 75, 87, 88, 209, 239, 241, 281, 282, 352, 355, 364, 375, 376, 377, 444, 481, 513, 585, 586, 601, 602, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 753, 754, 755, 757, 758, 761, 763, 765, 767, 773, 774, 775, 776, 779, 781, 784, 785, 786, 787, 792, 793, 796, 801, 807, 808], "further": [16, 68, 94, 755, 757, 758, 762, 765, 767, 769, 770, 773, 774, 776, 780, 781, 784, 785, 792, 793, 806, 807], "tutori": [16, 22, 23, 747, 755, 774, 788], "congratul": [16, 22], "There": [16, 23, 26, 31, 91, 345, 347, 348, 356, 357, 361, 747, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 770, 772, 774, 775, 778, 781, 784, 787, 791, 795, 802, 803, 807, 808], "come": [16, 39, 753, 754, 755, 758, 762, 774, 778, 779, 785, 789, 801], "independ": [16, 26, 51, 60, 74, 83, 219, 236, 269, 279, 359, 464, 586, 591, 597, 619, 638, 690, 747, 757, 763, 765, 771, 781, 786, 796, 799], "good": [16, 25, 26, 749, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 781, 782, 785], "foundat": [16, 792, 804], "tool": [16, 25, 26, 747, 754, 755, 765, 768, 782, 786, 787, 790, 793, 796, 799, 800, 801, 802, 804, 807, 808], "power": [16, 25, 26, 50, 51, 52, 56, 73, 74, 75, 79, 93, 94, 230, 239, 240, 274, 316, 325, 346, 349, 537, 547, 559, 586, 588, 591, 595, 631, 644, 676, 728, 778, 783, 784, 785, 801, 803, 807], "defin": [17, 23, 25, 26, 27, 47, 51, 52, 56, 70, 74, 75, 79, 107, 138, 141, 142, 143, 219, 236, 243, 269, 270, 278, 280, 283, 292, 302, 305, 306, 307, 312, 313, 314, 315, 319, 344, 346, 349, 352, 353, 355, 364, 387, 399, 444, 450, 481, 515, 516, 536, 580, 583, 586, 588, 591, 601, 619, 624, 625, 638, 712, 713, 714, 716, 747, 753, 754, 758, 759, 762, 763, 766, 769, 772, 774, 775, 776, 777, 783, 785, 787, 789, 798, 799, 800, 801, 802, 805, 807, 808], "div": [17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32], "sub": [17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 51, 56, 58, 68, 69, 73, 74, 75, 79, 81, 94, 268, 353, 355, 364, 401, 430, 439, 456, 484, 485, 591, 593, 594, 622, 660, 667, 668, 669, 727, 753, 755, 756, 761, 767, 774, 775, 776, 783, 784, 785, 797], "By": [17, 37, 44, 51, 57, 58, 64, 65, 74, 80, 81, 87, 88, 283, 316, 328, 335, 346, 349, 352, 354, 362, 364, 374, 419, 471, 478, 481, 535, 586, 588, 591, 592, 593, 601, 602, 619, 645, 648, 657, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 754, 759, 763, 765, 767, 770, 772, 773, 774, 781, 785, 786, 795], "uniform": [17, 18, 19, 20, 21, 25, 26, 27, 28, 30, 31, 32, 39, 51, 60, 74, 83, 364, 481, 597, 690, 691, 693, 728, 747, 785, 796, 808], "x_": [17, 27, 280, 586], "82997245": 17, "44733784": 17, "32163444": 17, "93330479": 17, "52438271": 17, "20438017": 17, "252316": 17, "0827222": 17, "26017165": 17, "88881904": 17, "compat": [17, 23, 27, 31, 37, 44, 50, 56, 58, 61, 64, 65, 73, 79, 81, 84, 87, 88, 93, 94, 150, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 290, 584, 586, 591, 593, 598, 601, 602, 619, 632, 635, 638, 641, 645, 646, 658, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 747, 759, 769, 774, 775, 777, 781, 787, 792], "sever": [17, 18, 27, 28, 30, 31, 32, 51, 74, 91, 352, 353, 366, 367, 368, 412, 754, 755, 777, 787, 799, 805], "pro": [17, 18, 19, 27, 28, 29, 30, 31, 32], "pick": [18, 28, 728], "off": [18, 28, 55, 56, 78, 79, 375, 376, 377, 590, 591, 613, 622, 643, 728, 729, 754, 780, 793, 795, 807], "last": [18, 23, 25, 28, 47, 51, 55, 56, 57, 58, 61, 63, 64, 65, 68, 70, 74, 78, 79, 80, 81, 86, 87, 88, 93, 134, 135, 138, 192, 301, 322, 346, 349, 352, 353, 354, 355, 362, 364, 380, 385, 395, 403, 419, 434, 444, 446, 471, 479, 480, 583, 585, 590, 591, 592, 593, 598, 600, 601, 602, 615, 616, 619, 622, 634, 643, 645, 649, 650, 652, 655, 658, 659, 660, 662, 696, 697, 705, 707, 708, 709, 710, 719, 720, 729, 738, 747, 755, 757, 759, 760, 763, 765, 773, 775, 776, 779, 781, 787, 793, 796, 801], "purpos": [18, 25, 26, 28, 39, 41, 143, 241, 259, 312, 346, 583, 586, 591, 637, 755, 756, 758, 761, 762, 764, 765, 767, 769, 770, 771, 774, 776, 779, 780, 783, 789, 800, 802, 805, 806, 807], "illustr": [18, 28, 759, 781], "trigger": [18, 28, 731, 753, 768], "unif": [18, 20, 21, 28, 30, 748, 783, 792, 797, 807], "detail": [18, 28, 41, 45, 50, 56, 58, 62, 67, 73, 74, 79, 81, 85, 101, 103, 106, 109, 130, 287, 353, 397, 429, 580, 583, 586, 599, 622, 629, 635, 639, 662, 701, 702, 703, 704, 725, 747, 753, 755, 757, 759, 760, 761, 762, 768, 769, 770, 771, 774, 775, 776, 777, 778, 781, 783, 784, 785, 803, 807], "55563945": 18, "65538704": 18, "14150524": 18, "46951997": 18, "30220294": 18, "14739668": 18, "57017946": 18, "91962677": 18, "51029003": 18, "59644395": 18, "stack": [18, 28, 37, 41, 51, 56, 58, 68, 74, 79, 81, 93, 141, 142, 313, 346, 353, 355, 400, 429, 431, 440, 457, 534, 543, 565, 583, 588, 591, 593, 595, 620, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 636, 637, 639, 640, 643, 670, 680, 681, 729, 747, 752, 757, 759, 773, 781, 797, 799, 806, 807], "arbitrari": [18, 28, 47, 48, 51, 68, 71, 136, 149, 176, 424, 425, 426, 571, 583, 584, 589, 769, 770, 772, 773, 774, 776, 785, 787, 795, 796, 802, 807], "constitu": [18, 28, 68, 786], "comp": [18, 28], "due": [18, 25, 26, 28, 42, 44, 269, 279, 586, 749, 754, 757, 762, 767, 773, 774, 792, 795, 796, 801], "manner": [18, 26, 28, 38, 46, 69, 595, 682, 754, 764, 766, 770, 774, 777, 784, 787, 791, 797, 799, 807, 808], "non": [18, 28, 48, 50, 51, 56, 60, 61, 64, 65, 71, 73, 74, 79, 83, 84, 87, 88, 131, 148, 166, 175, 244, 264, 265, 270, 321, 326, 339, 349, 353, 355, 364, 401, 404, 408, 425, 426, 481, 484, 583, 584, 586, 591, 595, 597, 598, 601, 602, 619, 620, 630, 632, 639, 641, 645, 646, 683, 692, 696, 697, 698, 699, 712, 713, 714, 715, 716, 718, 719, 720, 728, 730, 731, 733, 758, 761, 765, 781, 795, 796, 801], "5556394": 18, "655387": 18, "1415051": 18, "4695197": 18, "3022028": 18, "1473966": 18, "5701794": 18, "91962665": 18, "51028997": 18, "5964439": 18, "assess": [18, 28, 753, 779], "985": 18, "76": [18, 37, 50, 64, 71, 73, 74, 83, 164, 218, 234, 282, 383, 584, 586, 591, 595, 601, 641, 678, 692, 711], "000": [18, 73, 270, 751, 762], "69": [18, 37, 44, 50, 76, 83, 217, 259, 352, 373, 383, 573, 586, 589, 591, 630, 631, 692, 776, 784], "24": [18, 37, 39, 50, 51, 56, 64, 73, 74, 75, 78, 79, 83, 93, 231, 239, 254, 256, 269, 279, 280, 283, 328, 331, 349, 352, 364, 370, 372, 373, 383, 388, 389, 390, 391, 394, 479, 500, 501, 586, 588, 591, 595, 601, 604, 622, 630, 634, 671, 682, 691, 692, 693, 709, 711, 767, 784], "slower": [18, 774], "On": [18, 25, 26, 754, 763, 764, 768, 774, 776, 779, 782, 786], "hand": [18, 50, 747, 757, 763, 764, 768, 770, 776, 787], "singl": [18, 28, 37, 42, 50, 60, 68, 73, 83, 288, 330, 349, 353, 359, 411, 465, 554, 567, 571, 586, 588, 589, 590, 597, 599, 616, 691, 692, 693, 701, 729, 753, 754, 755, 757, 762, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 784, 785, 786, 787, 793], "learnt": [19, 29], "two": [19, 29, 31, 37, 47, 51, 56, 62, 74, 75, 79, 93, 94, 115, 118, 129, 136, 141, 142, 143, 174, 182, 230, 244, 245, 279, 312, 313, 317, 326, 327, 329, 330, 332, 334, 341, 346, 349, 352, 353, 354, 355, 364, 380, 398, 399, 400, 411, 420, 425, 444, 450, 453, 478, 487, 492, 582, 583, 584, 586, 588, 591, 593, 599, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 663, 701, 702, 703, 704, 729, 753, 754, 757, 758, 763, 764, 765, 766, 770, 774, 775, 776, 779, 780, 784, 786, 793, 798, 806], "workflow": [19, 29, 40, 753, 755, 759, 763, 772, 774, 784, 789, 793, 800, 807, 808], "ivy_norm": 19, "jax_norm": [19, 25, 26], "wider": [19, 29, 540, 562, 588, 763, 778, 807], "avoid": [19, 29, 31, 51, 58, 74, 236, 241, 243, 259, 269, 355, 358, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 458, 459, 460, 494, 510, 535, 540, 562, 586, 588, 593, 654, 655, 656, 658, 660, 661, 663, 665, 754, 755, 759, 760, 761, 762, 763, 767, 771, 774, 776, 777, 778, 779, 801], "conveni": [19, 29, 753, 763, 764, 769, 775, 782, 784, 785, 789, 807], "act": [19, 29, 51, 74, 342, 350, 755, 765, 778, 787, 808], "shorthand": [19, 29, 31, 776], "pair": [19, 29, 39, 51, 55, 78, 224, 243, 308, 341, 346, 349, 352, 385, 394, 395, 586, 590, 591, 603, 604, 605, 606, 608, 610, 612, 617, 619], "93968587": 19, "26075466": 19, "22723222": 19, "06276492": 19, "47426987": 19, "72835908": 19, "71737559": 19, "50411096": 19, "65419174": 19, "15576624": 19, "still": [19, 21, 22, 25, 26, 28, 29, 32, 56, 68, 79, 591, 639, 753, 755, 758, 759, 763, 766, 767, 768, 770, 773, 774, 776, 779, 785, 787, 792, 795, 796, 798, 801, 807], "variou": [19, 29, 31, 37, 747, 755, 757, 762, 763, 766, 767, 769, 771, 772, 774, 775, 776, 788, 789, 797, 799, 800, 801, 804, 807], "implic": [19, 29, 30, 33, 761], "either": [20, 21, 30, 31, 32, 33, 37, 43, 50, 51, 52, 55, 64, 68, 73, 74, 75, 78, 79, 103, 106, 109, 115, 130, 131, 216, 217, 218, 219, 224, 234, 236, 237, 239, 241, 243, 250, 251, 257, 258, 259, 260, 261, 269, 278, 280, 281, 283, 286, 287, 318, 338, 349, 352, 364, 373, 383, 393, 394, 479, 480, 499, 519, 527, 528, 536, 555, 580, 582, 583, 586, 588, 590, 591, 594, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 629, 634, 637, 641, 667, 668, 669, 709, 710, 715, 717, 727, 729, 730, 731, 738, 753, 754, 755, 759, 761, 763, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 779, 781, 784, 787, 788, 796, 801], "eagerli": [20, 21, 25, 26, 30, 31, 32, 39, 747, 795, 796], "lazili": [20, 21, 22, 25, 26, 30, 32, 43, 747, 795, 796], "actual": [20, 30, 751, 755, 756, 762, 770, 771, 773, 774, 775, 776, 779, 780, 785, 787, 802, 807], "occur": [20, 25, 26, 30, 43, 48, 50, 62, 71, 73, 85, 151, 270, 286, 584, 586, 598, 599, 696, 697, 701, 702, 703, 704, 757, 762, 764, 767, 778], "becaus": [20, 28, 30, 40, 51, 352, 374, 754, 755, 757, 758, 759, 760, 761, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 779, 781, 785, 786, 787, 801, 804, 807], "requir": [20, 30, 39, 40, 41, 44, 50, 51, 68, 73, 74, 270, 283, 287, 353, 355, 400, 401, 444, 586, 591, 593, 623, 624, 625, 662, 726, 749, 750, 753, 754, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 774, 775, 776, 777, 779, 781, 783, 787, 796, 801, 807], "argument": [20, 22, 23, 25, 26, 28, 30, 31, 32, 37, 39, 41, 43, 46, 47, 50, 51, 52, 56, 68, 69, 73, 74, 75, 91, 94, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 312, 313, 319, 322, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 388, 389, 390, 391, 401, 444, 478, 481, 485, 490, 491, 493, 494, 499, 501, 502, 507, 511, 513, 515, 517, 527, 531, 532, 549, 554, 555, 568, 578, 583, 584, 586, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 676, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 729, 730, 731, 738, 741, 743, 747, 753, 756, 757, 758, 759, 760, 761, 765, 766, 768, 770, 775, 776, 777, 779, 781, 783, 784, 789, 791, 795, 796, 801], "altern": [20, 30, 40, 51, 74, 79, 91, 317, 323, 327, 329, 330, 331, 332, 334, 335, 336, 340, 341, 349, 747, 753, 754, 760, 773, 784, 804], "consid": [20, 30, 31, 51, 56, 62, 74, 79, 109, 143, 264, 265, 312, 317, 320, 330, 346, 349, 353, 364, 401, 404, 413, 478, 580, 583, 586, 591, 599, 621, 632, 701, 702, 703, 704, 728, 758, 759, 762, 763, 770, 772, 777, 779, 782, 783, 784, 791, 792, 795, 798, 802, 806, 808], "dummi": [20, 21, 30, 31, 32, 38, 755], "assum": [20, 21, 30, 31, 32, 47, 50, 51, 52, 55, 56, 57, 73, 74, 75, 78, 79, 80, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 313, 319, 322, 338, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 412, 444, 478, 481, 507, 511, 513, 515, 524, 554, 578, 583, 584, 586, 588, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 741, 747, 754, 757, 759, 762, 763, 766, 775, 776, 779, 783, 784, 787], "slowli": [20, 30], "norm": [20, 30, 31, 51, 52, 56, 74, 75, 79, 90, 91, 352, 353, 373, 374, 378, 379, 380, 383, 384, 385, 395, 397, 401, 461, 462, 463, 495, 496, 517, 588, 591, 630, 646, 689, 729, 733, 777], "slow": [20, 30, 754], "54320029": 20, "30825614": 20, "17176882": 20, "14351968": 20, "98934778": 20, "82910388": 20, "89044143": 20, "71881472": 20, "1666683": 20, "14417601": 20, "norm_comp": [20, 30, 31], "float64": [20, 21, 48, 51, 60, 64, 70, 71, 73, 74, 75, 83, 87, 118, 131, 132, 148, 151, 155, 156, 161, 162, 165, 166, 171, 172, 176, 178, 179, 185, 188, 270, 325, 349, 364, 478, 526, 583, 584, 588, 591, 597, 624, 625, 630, 646, 692, 693, 710, 763, 775, 776], "norm_tran": [20, 30], "know": [20, 21, 30, 31, 32, 62, 599, 701, 702, 703, 704, 750, 753, 755, 764, 771, 775, 776, 779, 793, 802], "happen": [21, 25, 26, 288, 586, 747, 754, 755, 764, 773, 776, 784, 793, 795, 796], "09422972": 21, "46009917": 21, "0881108": 21, "86487021": 21, "83629996": 21, "10654466": 21, "89883457": 21, "02893805": 21, "15644584": 21, "41495672": 21, "wherea": [21, 32, 755, 758, 759, 761, 763, 764, 765, 769, 770, 776, 786, 798], "subtract": [21, 25, 26, 50, 73, 93, 94, 131, 355, 444, 583, 586, 758, 761, 765], "begin": [21, 51, 74, 280, 355, 444, 445, 446, 447, 448, 586, 595, 670, 681, 727, 754, 757, 762, 775], "demonstr": [22, 25, 26, 40, 763, 765, 767, 783], "scenario": [22, 763, 772], "often": [22, 752, 757, 767, 769, 770, 774, 776, 787, 793, 802, 805, 808], "fortun": [22, 23, 757], "everyth": [22, 40, 741, 747, 753, 754, 755, 756, 762, 765, 773, 774, 775, 776, 782, 787, 788, 793], "practic": [22, 755, 759, 762, 774, 804], "specifi": [22, 23, 25, 26, 30, 31, 32, 43, 45, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 87, 88, 91, 101, 103, 106, 109, 118, 127, 132, 134, 139, 141, 142, 144, 148, 150, 197, 202, 204, 208, 209, 210, 278, 287, 313, 317, 330, 335, 346, 349, 352, 353, 354, 355, 359, 364, 370, 371, 372, 374, 380, 385, 395, 401, 410, 412, 415, 419, 420, 422, 434, 437, 446, 447, 449, 450, 465, 476, 478, 479, 480, 483, 484, 487, 490, 507, 508, 510, 513, 526, 536, 568, 580, 583, 584, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 616, 617, 619, 621, 622, 624, 625, 630, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 659, 661, 662, 665, 666, 674, 675, 677, 678, 685, 686, 687, 688, 691, 692, 693, 695, 696, 697, 699, 702, 703, 704, 705, 709, 710, 711, 715, 717, 719, 720, 725, 727, 729, 730, 731, 754, 756, 760, 763, 764, 769, 770, 771, 773, 774, 775, 776, 781, 784, 785, 795, 796, 807], "everi": [22, 25, 26, 31, 39, 47, 51, 52, 74, 75, 132, 133, 293, 328, 344, 349, 352, 355, 388, 389, 390, 455, 489, 583, 588, 749, 753, 755, 757, 759, 760, 762, 763, 765, 768, 769, 770, 771, 773, 774, 775, 776, 781, 783, 785, 795, 796, 801], "jax_kornia": [22, 25, 26, 747, 796], "though": [22, 752, 753, 755, 763, 764, 766, 770, 773, 774, 779, 784, 787], "comput": [22, 23, 25, 26, 32, 33, 38, 39, 41, 45, 50, 51, 52, 53, 55, 56, 57, 62, 64, 67, 68, 73, 74, 75, 76, 78, 79, 80, 87, 91, 104, 108, 209, 219, 226, 229, 231, 236, 237, 238, 243, 244, 245, 247, 248, 254, 255, 256, 263, 264, 265, 266, 268, 269, 272, 277, 278, 292, 302, 305, 306, 314, 315, 319, 323, 326, 328, 329, 333, 335, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 358, 362, 364, 370, 371, 372, 373, 374, 379, 380, 383, 384, 385, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 402, 404, 406, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 438, 441, 453, 458, 460, 470, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 494, 495, 496, 540, 562, 569, 571, 572, 574, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 595, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 618, 619, 623, 624, 625, 628, 629, 630, 632, 634, 636, 638, 639, 641, 643, 645, 646, 648, 649, 650, 654, 676, 701, 702, 703, 704, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 729, 732, 747, 754, 761, 762, 763, 770, 772, 774, 776, 778, 779, 781, 784, 787, 789, 792, 793, 795, 796, 797, 799, 801, 802, 804, 805, 807], "000000000034": [22, 25, 26, 747, 796], "raw_img": [22, 25, 26, 747, 796], "expand_dim": [22, 25, 26, 41, 43, 58, 81, 590, 593, 612, 747, 774, 781, 784, 796], "enhanc": [22, 25, 26, 747, 796], "sharp": [22, 25, 26, 747], "verifi": [22, 753, 763, 764, 774, 776, 777], "prefer": [22, 25, 26, 243, 586, 747, 754, 761, 767, 771, 774, 788, 801], "leverag": [22, 25, 26, 747, 754, 773, 796, 799, 801], "whole": [23, 51, 74, 355, 358, 451, 461, 462, 463, 755, 760, 768], "machin": [23, 28, 29, 37, 43, 51, 56, 74, 79, 161, 164, 353, 401, 584, 591, 632, 635, 754, 757, 770, 789, 792, 799, 801, 803, 804, 805, 806, 807], "allow": [23, 25, 26, 37, 51, 74, 134, 274, 364, 481, 485, 527, 583, 586, 588, 600, 707, 727, 730, 731, 745, 747, 749, 753, 755, 758, 759, 762, 763, 767, 768, 770, 771, 772, 773, 774, 775, 776, 779, 781, 783, 787, 789, 792, 795, 796, 799, 801, 805, 806], "full": [23, 51, 56, 74, 78, 79, 91, 161, 248, 256, 310, 311, 346, 353, 354, 355, 415, 419, 445, 448, 534, 543, 557, 565, 583, 584, 586, 588, 590, 591, 605, 607, 608, 609, 632, 636, 638, 639, 747, 754, 755, 760, 763, 766, 767, 769, 770, 774, 776, 779, 781, 787, 792, 793, 799, 801, 807], "advantag": [23, 25, 26, 747, 754, 755, 763, 773, 774, 788, 796, 801], "complex": [23, 25, 26, 39, 45, 50, 51, 56, 67, 71, 73, 74, 79, 101, 103, 106, 109, 139, 140, 154, 168, 177, 183, 216, 217, 218, 219, 220, 221, 222, 225, 233, 234, 236, 237, 239, 241, 249, 250, 251, 252, 253, 257, 258, 259, 260, 269, 271, 274, 276, 279, 280, 281, 282, 283, 286, 287, 319, 349, 352, 353, 364, 374, 385, 395, 396, 400, 401, 402, 410, 412, 486, 546, 547, 580, 583, 584, 586, 588, 591, 598, 601, 623, 624, 625, 630, 637, 639, 641, 643, 646, 699, 715, 717, 725, 749, 753, 760, 763, 765, 771, 774, 776, 777, 779, 784, 785, 786, 787, 789, 796, 797, 799, 801, 803, 807, 808], "neccessari": 23, "convolut": [23, 51, 55, 74, 78, 352, 372, 390, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729, 796, 799, 801], "32": [23, 25, 26, 37, 39, 40, 41, 50, 51, 60, 73, 74, 78, 79, 83, 93, 94, 103, 160, 218, 230, 231, 240, 254, 276, 279, 280, 319, 349, 352, 353, 355, 364, 371, 372, 373, 383, 393, 394, 399, 403, 428, 479, 500, 516, 580, 584, 586, 588, 590, 591, 597, 598, 601, 605, 607, 608, 609, 612, 614, 629, 634, 691, 692, 693, 700, 711, 747, 762, 763, 772, 784, 806], "kernel_s": [23, 25, 26, 41, 51, 74, 352, 370, 371, 372, 729, 735], "flatten": [23, 25, 26, 39, 41, 44, 51, 52, 56, 58, 61, 62, 74, 75, 79, 81, 84, 85, 321, 335, 349, 353, 355, 364, 398, 443, 447, 452, 455, 476, 483, 484, 485, 486, 487, 500, 504, 588, 591, 593, 598, 599, 626, 634, 646, 652, 657, 659, 696, 697, 701, 702, 703, 704, 727, 747, 773, 779], "keyword": [23, 25, 26, 41, 43, 46, 47, 51, 68, 74, 94, 136, 270, 355, 364, 444, 478, 491, 494, 527, 555, 583, 586, 588, 595, 601, 676, 717, 730, 731, 741, 753, 758, 761, 763, 764, 771, 773, 774, 775, 776, 777, 779, 784, 795, 796], "input_arrai": [23, 25, 26, 773], "torch_model": [23, 25, 26, 43], "thank": [23, 784, 792], "fledg": [23, 754, 781, 782], "rand": [23, 25, 26, 41, 741, 747, 795], "output_arrai": [23, 25, 26], "0768": [23, 108, 580], "0727": 23, "0942": 23, "1300": 23, "1350": [23, 51, 74, 353, 408], "0839": 23, "1511": 23, "1061": 23, "0606": 23, "0896": 23, "softmaxbackward0": 23, "furthermor": 23, "relat": [23, 243, 586, 747, 749, 752, 753, 754, 755, 767, 774, 776, 777, 778, 779, 796, 804], "interest": [23, 25, 37, 236, 269, 586, 753, 755], "continu": [23, 25, 26, 41, 117, 283, 582, 586, 747, 752, 753, 754, 756, 757, 773, 776, 787, 792, 793, 801], "regress": [24, 801, 808], "checkout": [25, 40, 755, 757, 776], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 25, "e": [25, 42, 43, 47, 51, 56, 60, 62, 63, 64, 66, 73, 74, 79, 83, 86, 87, 89, 91, 93, 126, 135, 136, 139, 140, 143, 147, 176, 189, 216, 217, 218, 222, 224, 225, 228, 230, 232, 236, 237, 239, 242, 243, 249, 250, 257, 258, 259, 260, 267, 268, 269, 270, 272, 274, 276, 278, 279, 282, 283, 287, 293, 312, 346, 352, 353, 359, 364, 365, 370, 371, 374, 388, 389, 390, 391, 403, 405, 411, 464, 465, 466, 467, 468, 479, 480, 488, 581, 583, 584, 585, 586, 590, 591, 593, 595, 597, 599, 600, 601, 616, 619, 624, 625, 629, 630, 632, 635, 638, 639, 640, 643, 646, 654, 662, 673, 677, 678, 679, 682, 687, 688, 691, 692, 693, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 729, 741, 747, 748, 749, 751, 753, 754, 755, 756, 757, 759, 761, 763, 767, 772, 774, 776, 781, 784, 787, 788, 789, 792, 793, 795, 797], "pyvi": [25, 26], "theoret": 25, "aspect": [25, 26, 748, 772, 784, 801], "switch": [25, 37, 759, 767, 770, 771, 808], "easiest": [25, 747, 750, 754, 788], "defer": [25, 26, 753, 758, 763, 764, 770, 773, 774, 776, 807], "similarli": [25, 38, 136, 143, 219, 312, 346, 583, 586, 759, 763, 774, 779, 783, 807], "obtain": [25, 26, 44, 51, 74, 307, 346, 352, 391, 590, 616, 774, 795], "essenc": [25, 802, 807], "becom": [25, 51, 74, 91, 325, 349, 355, 426, 593, 651, 738, 755, 761, 763, 765, 767, 773, 787, 791, 793, 795], "regardless": [25, 26, 37, 68, 748, 763, 767, 783, 786, 793], "being": [25, 26, 37, 51, 68, 74, 89, 93, 97, 118, 353, 355, 408, 444, 541, 583, 588, 591, 625, 727, 728, 747, 754, 755, 757, 758, 759, 761, 763, 764, 765, 769, 771, 773, 774, 775, 776, 777, 779, 781, 784, 787, 792, 793, 797, 799, 800, 801, 802, 807, 808], "slide": [25, 51, 55, 74, 78, 352, 370, 371, 372, 388, 389, 390, 391, 394, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729], "A": [25, 26, 40, 47, 48, 51, 52, 58, 60, 64, 65, 68, 71, 73, 74, 75, 78, 79, 81, 83, 85, 88, 91, 94, 114, 115, 117, 129, 137, 143, 149, 190, 209, 271, 273, 277, 301, 312, 314, 315, 317, 327, 330, 334, 335, 346, 349, 352, 353, 355, 358, 359, 364, 380, 394, 401, 411, 420, 429, 432, 450, 453, 458, 459, 460, 461, 464, 465, 466, 467, 468, 476, 485, 487, 492, 494, 503, 515, 516, 546, 547, 548, 551, 579, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 595, 597, 601, 602, 613, 622, 624, 627, 628, 633, 634, 638, 639, 651, 654, 656, 660, 662, 670, 673, 675, 677, 678, 679, 680, 681, 685, 686, 687, 688, 690, 691, 692, 693, 695, 701, 711, 719, 720, 727, 728, 745, 747, 752, 753, 754, 756, 761, 763, 764, 767, 769, 770, 774, 775, 776, 781, 784, 787, 788, 789, 790, 791, 792, 793, 795, 796, 801, 802], "could": [25, 26, 31, 62, 599, 701, 702, 703, 704, 753, 754, 755, 757, 762, 763, 765, 771, 773, 774, 775, 776, 781, 783, 784, 785, 792, 793, 801, 806, 807], "regressor": [25, 26, 747], "input_dim": [25, 26, 40, 747], "output_dim": [25, 26, 40, 747], "linear0": [25, 26, 37, 747, 784, 785], "linear1": [25, 26, 37, 747, 784, 785], "instanti": [25, 26, 766], "adam": [25, 26, 37, 41, 53, 76, 491, 569, 570, 575, 588, 589, 733, 747, 784, 785, 786, 801], "well": [25, 26, 39, 40, 41, 75, 354, 419, 513, 588, 591, 638, 747, 750, 753, 755, 760, 762, 763, 767, 773, 774, 775, 776, 785, 786, 796, 800, 801, 802, 806], "n_training_exampl": [25, 26, 747], "2000": [25, 26, 74, 302, 346, 747], "random_norm": [25, 26, 55, 56, 60, 78, 79, 83, 500, 588, 590, 591, 597, 605, 607, 608, 609, 612, 615, 639, 747], "linspac": [25, 26, 47, 70, 118, 583, 747, 769, 779, 781, 808], "y": [25, 26, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 126, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 145, 148, 149, 150, 159, 161, 164, 176, 189, 193, 197, 202, 203, 204, 208, 210, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 301, 317, 323, 329, 330, 331, 332, 333, 338, 340, 342, 344, 346, 349, 352, 353, 354, 355, 358, 364, 371, 373, 375, 376, 380, 383, 385, 389, 397, 401, 406, 411, 417, 418, 419, 420, 421, 429, 431, 440, 444, 452, 453, 457, 461, 462, 463, 471, 477, 478, 479, 480, 481, 484, 486, 487, 489, 492, 495, 496, 499, 500, 502, 503, 504, 507, 508, 509, 513, 515, 516, 517, 519, 520, 523, 524, 529, 536, 537, 538, 541, 544, 545, 546, 547, 549, 551, 553, 554, 555, 559, 560, 563, 566, 567, 568, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 605, 607, 609, 612, 613, 614, 618, 619, 620, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 637, 639, 640, 641, 643, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 676, 677, 679, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 745, 747, 759, 761, 764, 765, 772, 774, 775, 776, 777, 779, 781, 783, 795], "loss_fn": [25, 26, 37, 39, 41, 747, 784, 785, 786], "pred": [25, 26, 40, 41, 51, 57, 74, 80, 354, 417, 419, 592, 648, 649, 650, 747, 761, 770, 773], "epoch": [25, 26, 39, 41, 747], "loss": [25, 26, 39, 41, 51, 74, 91, 417, 418, 419, 420, 421, 540, 562, 588, 648, 649, 650, 747, 762, 763, 770, 774, 777, 778, 784, 785, 786, 801, 808], "gradient": [25, 26, 39, 41, 51, 74, 91, 209, 343, 349, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 594, 667, 668, 669, 733, 747, 756, 777, 784, 785, 787, 801], "grad": [25, 26, 37, 41, 569, 589, 733, 747, 772, 784, 785, 786], "execute_with_gradi": [25, 26, 37, 41, 589, 747, 784, 785, 786, 787], "lambda": [25, 26, 42, 44, 115, 117, 499, 571, 572, 574, 579, 582, 588, 589, 591, 595, 624, 677, 678, 682, 747, 753, 770, 771, 772, 775, 779, 781, 784], "2d": [25, 26, 41, 51, 74, 91, 301, 346, 352, 353, 355, 364, 367, 368, 375, 376, 410, 415, 425, 433, 478, 729, 747, 774, 779], "5f": [25, 26, 747], "nonetheless": [25, 26], "slight": [25, 26, 763, 776, 785], "introduc": [25, 26, 243, 586, 593, 599, 659, 701, 761, 762, 763, 771, 775, 776, 779, 784, 791], "address": [25, 26, 52, 553, 588, 753, 755, 757, 758, 769, 781, 793, 797, 799, 801, 807], "extract": [25, 26, 33, 40, 51, 74, 355, 428, 452, 774, 777, 797, 801, 802, 807], "gc": [25, 26], "decompos": [25, 26, 51, 74, 91, 310, 311, 327, 334, 346, 349, 353, 408, 413, 416, 774], "said": [25, 26, 777, 793, 795], "otherwis": [25, 26, 43, 46, 47, 48, 50, 51, 52, 55, 56, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 118, 120, 126, 131, 133, 134, 135, 138, 140, 145, 148, 149, 151, 152, 154, 155, 156, 157, 158, 167, 171, 175, 176, 192, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 295, 296, 298, 299, 301, 310, 311, 317, 318, 319, 321, 322, 323, 329, 330, 336, 338, 340, 341, 342, 344, 346, 349, 352, 353, 358, 370, 371, 372, 375, 376, 377, 403, 414, 415, 417, 418, 420, 421, 424, 425, 426, 429, 430, 432, 434, 435, 436, 443, 450, 452, 453, 456, 458, 460, 461, 462, 463, 465, 477, 478, 479, 480, 481, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 524, 531, 532, 546, 547, 549, 551, 553, 554, 555, 567, 571, 573, 578, 582, 583, 584, 585, 586, 588, 589, 590, 591, 594, 595, 598, 599, 600, 601, 602, 604, 605, 606, 607, 613, 614, 616, 617, 618, 619, 620, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 639, 643, 645, 646, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 683, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 731, 732, 738, 747, 755, 758, 761, 763, 764, 765, 770, 771, 773, 776, 781, 788, 795, 796], "x0": [25, 26, 44, 75, 492, 588, 765], "normalize_comp": [25, 26], "html": [25, 26, 40, 50, 73, 143, 151, 239, 249, 250, 265, 312, 346, 364, 478, 583, 584, 586, 591, 593, 601, 637, 666, 716, 766, 792], "fname": [25, 26, 42, 44, 731, 784], "anticip": [25, 26], "than": [25, 26, 28, 31, 50, 51, 52, 55, 56, 58, 60, 61, 62, 64, 68, 73, 74, 75, 78, 79, 81, 83, 84, 85, 87, 93, 94, 118, 131, 161, 209, 217, 218, 221, 222, 224, 225, 228, 230, 232, 236, 242, 243, 257, 258, 259, 260, 267, 269, 274, 278, 280, 282, 283, 287, 288, 289, 294, 300, 317, 318, 330, 337, 346, 349, 352, 353, 355, 364, 373, 374, 379, 380, 383, 384, 385, 395, 396, 397, 413, 416, 435, 436, 479, 480, 481, 519, 520, 523, 540, 562, 583, 584, 585, 586, 588, 590, 591, 593, 597, 598, 599, 601, 617, 619, 629, 630, 631, 632, 635, 646, 651, 655, 661, 693, 699, 702, 703, 704, 709, 710, 715, 716, 717, 718, 729, 749, 751, 755, 757, 761, 762, 763, 765, 767, 773, 774, 775, 776, 777, 778, 779, 781, 784, 785, 786, 787, 788, 792, 798, 799, 800, 801, 807, 808], "addition": [25, 26, 761, 773, 774, 807], "return_backend_compiled_fn": [25, 26, 795], "normalize_native_comp": [25, 26], "immedi": [25, 26, 749, 754], "built": [25, 26, 31, 39, 41, 44, 118, 583, 729, 730, 731, 747, 754, 755, 760, 761, 776, 782, 788, 789, 795, 800, 801, 805], "summar": [25, 26, 91, 776], "eager_graph": [25, 26, 747, 795, 796], "lazy_graph": [25, 26, 747, 795, 796], "codebas": [25, 26, 207, 208, 585, 748, 756, 763, 768, 773, 774, 776, 777, 780, 793], "thought": [25, 26, 754, 755, 769, 792, 799], "research": [25, 26, 39, 747, 791, 796, 801, 808], "wa": [25, 26, 31, 40, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 300, 301, 317, 318, 319, 321, 323, 329, 330, 336, 337, 338, 340, 341, 342, 346, 349, 375, 376, 377, 417, 418, 420, 421, 424, 425, 426, 429, 450, 452, 453, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 555, 567, 573, 578, 586, 588, 595, 601, 602, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 738, 747, 751, 755, 757, 762, 765, 770, 772, 774, 781, 783, 792, 795, 796, 800, 801, 803], "No": [25, 26, 39, 51, 57, 74, 80, 354, 418, 419, 420, 421, 592, 648, 755, 762, 763, 801], "matter": [25, 26, 31, 765, 791], "job": [25, 26, 747, 760, 762, 796], "haven": [25, 26, 31, 788, 801], "jax_out": [25, 26], "ideal": [25, 26, 762, 763, 774, 779, 784], "But": [25, 26, 761, 762, 766, 768, 771, 779, 786], "bring": [25, 26, 757, 776, 781, 782, 789, 792], "wise": [25, 45, 50, 51, 56, 67, 73, 74, 79, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 216, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 277, 278, 285, 290, 291, 293, 295, 296, 298, 299, 317, 318, 323, 324, 325, 326, 329, 330, 331, 332, 336, 337, 340, 341, 344, 349, 352, 353, 355, 375, 376, 377, 399, 405, 431, 438, 440, 441, 457, 580, 586, 593, 619, 651, 733, 779], "vision": [25, 26, 44, 747, 749, 797, 807], "worth": [25, 26], "differenti": [25, 26, 801], "chosen": [25, 26, 44, 118, 224, 583, 586, 598, 700, 753, 762, 774], "while": [25, 26, 33, 51, 55, 68, 74, 78, 91, 94, 117, 138, 175, 243, 244, 264, 265, 326, 349, 352, 353, 355, 395, 411, 446, 447, 477, 582, 583, 584, 586, 590, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 701, 713, 716, 751, 753, 754, 755, 758, 759, 760, 762, 763, 764, 765, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 783, 785, 786, 787, 788, 791, 792, 795, 801, 807, 808], "plai": [25, 26, 354, 419, 747, 754, 758, 764, 774, 776, 786, 801, 804], "critic": [25, 26, 801, 807], "role": [25, 26, 747, 755, 764, 774, 782, 802, 804, 808], "dl": [25, 26], "cnn": [25, 26, 801], "effortlessli": [25, 26], "previous": [25, 26, 557, 588, 738, 754, 759, 770, 772, 776, 781], "pre": [25, 26, 747, 749, 751, 753, 776, 786, 787, 788, 801], "default_devic": [25, 26, 202, 205, 206, 207, 213, 214, 585, 764, 767], "as_n": [25, 26, 48, 49, 68, 71, 72, 154, 155, 156, 157, 158, 159, 165, 192, 193, 205, 584, 585, 763], "certainli": [25, 26, 747, 792, 807], "upon": [25, 26, 43, 755, 765, 773, 776, 779, 787, 800, 801], "unnecessari": [25, 26, 774], "consist": [25, 26, 64, 68, 236, 243, 269, 353, 400, 586, 591, 601, 623, 624, 711, 730, 731, 757, 758, 762, 763, 768, 773, 781, 791, 802], "extend": [25, 26, 51, 74, 355, 364, 444, 481, 759, 760, 763, 766, 767, 769, 774, 777, 787, 798, 801, 807], "infrastructur": [25, 26, 797, 803, 804], "least": [25, 50, 51, 56, 73, 74, 236, 254, 269, 352, 355, 364, 379, 384, 424, 425, 426, 433, 435, 478, 586, 591, 598, 629, 699, 747, 755, 758, 762, 763, 764, 765, 770, 773, 776, 796], "coco": 25, "dataset": [25, 68, 747, 784, 795, 796], "extra": [26, 68, 94, 114, 568, 582, 588, 758, 763, 765, 771, 773, 774, 775, 779, 781, 795, 796, 798, 803], "choic": [26, 43, 51, 64, 74, 87, 353, 355, 414, 428, 601, 716, 718, 747, 754, 762, 773, 774, 784, 793, 796, 801, 808], "structur": [26, 68, 71, 94, 161, 164, 497, 588, 595, 674, 683, 727, 747, 753, 755, 758, 761, 770, 775, 776, 777, 784, 785, 800, 801], "seamlessli": [26, 776], "benefit": [26, 754, 758, 761, 773, 779, 783, 784, 787, 792, 793, 799, 803, 806], "through": [26, 31, 39, 51, 74, 224, 364, 484, 485, 586, 595, 673, 679, 731, 741, 747, 748, 751, 752, 753, 755, 756, 759, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 784, 785, 786, 795, 799, 801, 802, 803], "therefor": [26, 31, 47, 50, 51, 56, 73, 74, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 175, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 312, 313, 319, 322, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 437, 444, 445, 447, 454, 478, 481, 485, 493, 501, 502, 507, 511, 513, 515, 517, 531, 549, 554, 578, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 747, 749, 753, 755, 757, 758, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 777, 779, 781, 783, 785, 787, 791, 798, 801, 807], "wide": [26, 747, 755, 776, 799, 801], "prepar": [26, 39, 41, 44, 747, 762], "plenti": 26, "resourc": [26, 748, 753, 754, 762], "visit": [26, 754, 755, 762], "page": [26, 747, 753, 754, 755, 760, 762, 782, 783, 786, 788], "newli": [27, 28, 40, 42, 48, 71, 148, 494, 584, 588, 755, 759, 762, 773, 776], "randon": [27, 28, 30, 31, 32], "mean_": 27, "std_": 27, "detect": [27, 31, 50, 68, 73, 251, 586, 595, 670, 681, 753, 754, 759, 761, 762, 768, 776, 784, 785], "inspect": [27, 31, 490, 588], "__": [27, 28, 29, 30, 31, 32, 68, 765, 784], "exhibit": [28, 807], "via": [28, 31, 243, 353, 413, 416, 586, 595, 680, 681, 755, 757, 761, 763, 764, 773, 777, 779, 781, 783, 784, 801], "script": [28, 747, 749, 754, 755, 762, 765, 781, 787, 801], "low_level": 28, "chain": [28, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 317, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 375, 376, 377, 417, 418, 420, 421, 429, 450, 453, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 594, 595, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 667, 668, 672, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 727, 734, 758, 761, 772, 774, 785, 786, 787, 801], "un": [28, 166, 584, 763, 781], "partial_comp": 28, "time_funct": 28, "slowest": [28, 51, 58, 74, 81, 355, 434, 593, 658], "express": [28, 50, 51, 73, 74, 217, 221, 223, 224, 233, 235, 275, 281, 286, 338, 349, 586, 735, 766, 774, 781, 786, 801, 802], "fastest": [28, 51, 58, 74, 81, 353, 355, 411, 434, 593, 658], "maxim": [28, 770, 773, 781, 798, 799, 803, 804, 805], "conclud": [29, 777], "collect": [29, 39, 41, 43, 44, 46, 68, 69, 580, 585, 588, 589, 590, 592, 595, 596, 597, 683, 725, 729, 730, 732, 733, 754, 762, 767, 771, 772, 775, 776, 799, 801, 804], "global": [30, 31, 41, 52, 68, 75, 94, 154, 155, 156, 157, 158, 207, 208, 209, 537, 538, 541, 546, 547, 559, 560, 563, 584, 585, 588, 732, 738, 754, 758, 759, 762, 763, 764, 767, 770, 774, 781, 801], "approach": [30, 753, 754, 755, 758, 761, 763, 764, 770, 774, 776, 777, 779, 783, 784, 787, 798, 805, 807], "b": [31, 45, 50, 51, 52, 55, 56, 64, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 119, 120, 126, 131, 132, 133, 135, 138, 140, 145, 148, 149, 150, 151, 159, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 349, 352, 353, 354, 355, 359, 362, 364, 370, 371, 372, 373, 375, 376, 379, 383, 384, 385, 388, 389, 390, 394, 399, 401, 403, 406, 411, 416, 417, 418, 420, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 443, 444, 450, 452, 453, 456, 457, 462, 463, 465, 466, 468, 469, 471, 478, 479, 480, 481, 483, 485, 487, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 524, 531, 532, 546, 547, 549, 553, 554, 567, 569, 570, 571, 573, 575, 577, 578, 580, 583, 584, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 673, 676, 677, 678, 679, 681, 682, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 741, 747, 748, 751, 755, 756, 757, 759, 761, 762, 765, 770, 772, 775, 780, 781, 782, 784, 785, 786, 790, 793, 795, 797], "option": [31, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 164, 166, 176, 188, 192, 204, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 352, 353, 354, 355, 358, 359, 360, 362, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 498, 500, 501, 502, 503, 504, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 523, 528, 531, 532, 536, 546, 547, 549, 551, 553, 554, 555, 567, 569, 570, 571, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 680, 681, 682, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 728, 731, 733, 734, 741, 745, 753, 754, 755, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 779, 781, 786, 787, 795, 796, 801, 807], "prioriti": [31, 68, 738, 755, 764, 773], "normalize_via_oper": 31, "determin": [31, 50, 51, 56, 58, 62, 65, 68, 73, 74, 75, 79, 86, 88, 91, 93, 94, 129, 151, 153, 160, 166, 167, 168, 169, 171, 172, 173, 188, 198, 200, 201, 212, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 239, 241, 243, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 266, 269, 274, 278, 281, 282, 283, 284, 285, 286, 287, 290, 333, 338, 349, 352, 353, 354, 364, 387, 401, 417, 478, 489, 492, 513, 514, 518, 519, 520, 521, 522, 523, 549, 567, 583, 584, 585, 586, 588, 591, 593, 594, 599, 602, 618, 619, 620, 622, 626, 627, 629, 631, 632, 634, 635, 637, 638, 643, 645, 646, 652, 667, 668, 669, 701, 702, 703, 704, 705, 719, 720, 728, 732, 761, 763, 764, 766, 770, 774, 776, 778, 779, 791], "might": [31, 52, 175, 499, 584, 588, 751, 753, 754, 755, 762, 763, 765, 768, 771, 774, 776, 777, 779, 781, 783, 784, 789], "think": [31, 753, 755, 762, 765, 779, 802], "uniqu": [31, 41, 51, 52, 62, 74, 75, 85, 355, 443, 444, 455, 524, 588, 594, 595, 599, 667, 668, 669, 672, 676, 701, 702, 703, 704, 747, 757, 761, 770, 774, 775, 779, 787, 791, 804], "rule": [31, 48, 50, 51, 56, 71, 73, 74, 79, 148, 151, 174, 175, 176, 225, 236, 269, 271, 278, 280, 288, 290, 355, 364, 432, 478, 584, 586, 591, 593, 618, 619, 626, 631, 634, 638, 652, 741, 757, 758, 761, 762, 763, 765, 768, 769, 770, 772, 776, 779, 802], "broadcast": [31, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 296, 298, 299, 300, 301, 313, 318, 319, 320, 321, 325, 327, 329, 331, 332, 333, 334, 338, 344, 346, 349, 352, 353, 354, 355, 358, 359, 364, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 388, 389, 390, 393, 396, 397, 398, 405, 406, 409, 410, 412, 417, 418, 419, 420, 421, 427, 429, 432, 437, 445, 446, 447, 448, 450, 453, 454, 458, 461, 462, 463, 464, 465, 467, 468, 478, 479, 480, 481, 484, 485, 486, 487, 495, 496, 500, 501, 502, 507, 508, 517, 531, 532, 569, 570, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 638, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 670, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 704, 705, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 741, 761, 763, 765, 766, 767, 776, 777, 781], "elementwis": [31, 51, 59, 74, 82, 292, 294, 341, 344, 591, 596, 644, 689, 770, 777, 781], "must": [31, 39, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 296, 298, 299, 300, 301, 303, 313, 314, 315, 318, 319, 320, 322, 325, 327, 329, 331, 332, 333, 334, 338, 341, 344, 346, 349, 352, 353, 354, 355, 358, 359, 362, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 393, 395, 396, 397, 398, 400, 405, 406, 409, 410, 411, 412, 415, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 432, 434, 435, 436, 437, 439, 443, 445, 446, 447, 448, 450, 452, 453, 454, 456, 461, 462, 463, 464, 465, 467, 468, 471, 478, 479, 480, 481, 487, 495, 496, 500, 501, 502, 507, 508, 510, 517, 531, 532, 568, 569, 570, 573, 575, 576, 577, 578, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 733, 735, 749, 752, 753, 754, 755, 757, 758, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 776, 777, 778, 779, 781, 785, 786, 791, 793, 796, 802, 808], "taken": [31, 51, 56, 74, 79, 322, 349, 352, 395, 591, 622, 753, 762, 774, 777, 786, 802], "account": [31, 41, 43, 51, 58, 74, 81, 283, 355, 434, 586, 593, 658, 728, 741, 754, 762, 766, 774, 777, 795], "rather": [31, 52, 68, 75, 118, 209, 519, 520, 523, 583, 585, 588, 751, 755, 757, 761, 763, 766, 774, 775, 776, 777, 786, 787, 792, 797, 800, 801], "fact": [31, 91, 755, 757, 762, 774, 776, 781, 784], "pure": [31, 41, 747, 766, 769, 774, 779, 783, 786, 787, 801, 807, 808], "consum": [31, 761, 762, 769, 775, 776], "conflict": [31, 754, 755, 762, 774, 784], "error": [31, 42, 44, 50, 51, 55, 68, 73, 74, 78, 101, 238, 286, 353, 354, 364, 365, 413, 416, 417, 418, 485, 488, 535, 580, 586, 588, 590, 591, 601, 617, 637, 640, 712, 714, 730, 731, 733, 744, 748, 752, 754, 755, 757, 758, 759, 762, 763, 764, 765, 768, 769, 774, 776, 777, 778, 783, 787, 793, 801], "thrown": [31, 517, 588, 758, 764, 767, 768, 787], "doesn": [31, 517, 535, 588, 729, 754, 759, 761, 762, 763, 764, 765, 768, 770, 772, 776, 779, 781, 787, 795, 799], "consider": [31, 753, 765, 769, 779, 791, 798, 799], "combin": [31, 51, 68, 74, 94, 352, 364, 385, 395, 478, 505, 506, 588, 591, 619, 629, 755, 758, 761, 762, 763, 765, 767, 770, 776, 786, 801], "effect": [31, 47, 51, 53, 64, 74, 76, 87, 136, 352, 354, 387, 419, 569, 577, 583, 589, 590, 601, 616, 716, 718, 753, 758, 761, 762, 766, 769, 773, 775, 779, 787, 792], "explain": [31, 51, 74, 352, 385, 395, 747, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 779, 781, 782, 783, 784, 785, 786, 797, 804, 807], "necessari": [31, 47, 51, 70, 74, 81, 120, 236, 269, 355, 424, 425, 426, 430, 432, 434, 435, 436, 443, 456, 540, 562, 586, 588, 654, 655, 656, 658, 660, 661, 663, 665, 747, 754, 758, 759, 761, 763, 765, 773, 774, 776, 778, 779, 795, 796], "standalon": [32, 753, 758, 776, 789, 797, 802, 807, 808], "These": [32, 51, 74, 353, 355, 364, 400, 443, 478, 590, 591, 616, 623, 624, 747, 749, 752, 753, 754, 755, 757, 761, 763, 765, 766, 769, 770, 773, 774, 776, 781, 782, 784, 785, 786, 787, 789, 791, 792, 793, 796, 801, 805, 807, 808], "dynam": [32, 593, 658, 738, 756, 762, 763, 764, 773, 774, 778, 781, 795, 801, 805], "static": [32, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 97, 98, 126, 307, 372, 385, 390, 413, 416, 450, 459, 549, 583, 634, 726, 731, 774, 778, 787, 800, 801, 802], "control": [33, 51, 74, 143, 291, 312, 344, 346, 352, 355, 375, 376, 377, 428, 452, 535, 583, 588, 591, 621, 727, 761, 763, 764, 772, 773, 774, 775, 779, 783, 784, 789, 795, 801, 807], "flow": [33, 761, 795, 801, 802], "statement": [33, 38, 762, 773, 776, 779, 787, 795, 796], "opposit": 33, "exclud": [33, 64, 74, 87, 118, 143, 312, 346, 479, 480, 583, 597, 693, 709, 738, 765, 781, 795], "todo": [34, 35, 36, 41, 44, 74, 480, 753, 763, 774], "aim": [37, 751, 755, 757, 771, 774, 776, 780, 799, 801, 804], "interfac": [37, 70, 131, 583, 783, 786, 787, 789, 792, 797, 798, 799, 800, 801, 805, 808], "set_framework": [37, 44], "44": [37, 41, 50, 51, 60, 73, 74, 83, 222, 269, 279, 283, 284, 320, 349, 352, 372, 373, 586, 590, 591, 595, 598, 601, 613, 634, 678, 691, 692, 700, 711], "45": [37, 39, 41, 50, 51, 64, 73, 74, 76, 78, 83, 94, 220, 224, 236, 279, 280, 336, 349, 352, 364, 373, 383, 394, 479, 485, 569, 575, 586, 589, 591, 593, 601, 634, 660, 692, 693, 711], "46": [37, 39, 41, 51, 60, 74, 78, 83, 135, 259, 280, 302, 346, 352, 371, 389, 390, 583, 586, 595, 671, 691, 692], "47": [37, 41, 50, 51, 56, 60, 73, 74, 75, 76, 78, 83, 225, 283, 352, 364, 371, 389, 390, 479, 500, 501, 573, 586, 588, 589, 590, 591, 597, 614, 626, 692, 693], "underneath": [37, 762, 799], "sai": [37, 753, 754, 771, 783, 793], "clip": [37, 50, 51, 58, 73, 74, 75, 81, 267, 268, 355, 428, 449, 452, 495, 496, 586, 588, 593, 761, 770, 772, 773, 784, 786], "a_min": 37, "a_max": 37, "tensforflow": 37, "clip_by_valu": [37, 786], "clip_value_min": 37, "clip_value_max": 37, "clamp": [37, 51, 74, 292, 344, 786], "min": [37, 41, 48, 51, 52, 56, 64, 71, 74, 75, 79, 87, 141, 143, 161, 164, 268, 312, 314, 346, 353, 401, 501, 531, 532, 546, 583, 584, 586, 588, 591, 601, 630, 636, 639, 640, 646, 747], "max": [37, 39, 48, 51, 52, 56, 64, 71, 74, 75, 79, 87, 161, 164, 267, 352, 353, 355, 370, 371, 372, 388, 389, 390, 391, 393, 401, 451, 495, 496, 501, 517, 531, 532, 584, 586, 588, 591, 601, 630, 632, 635, 729, 733, 762, 774], "n": [37, 40, 41, 42, 44, 47, 50, 51, 55, 56, 58, 60, 61, 64, 65, 73, 74, 78, 79, 81, 83, 84, 87, 88, 91, 93, 136, 141, 142, 143, 216, 286, 288, 312, 313, 322, 346, 349, 352, 353, 355, 358, 359, 362, 364, 366, 367, 368, 373, 374, 379, 380, 383, 384, 385, 393, 394, 395, 401, 402, 410, 412, 416, 426, 430, 433, 437, 439, 450, 456, 458, 459, 460, 464, 465, 466, 467, 468, 471, 478, 487, 583, 586, 590, 591, 593, 595, 597, 598, 601, 602, 603, 604, 605, 606, 608, 610, 612, 619, 622, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 643, 644, 645, 646, 653, 654, 656, 662, 666, 678, 691, 692, 693, 699, 713, 715, 716, 717, 718, 719, 720, 729, 732, 741, 747, 756, 760, 762, 776, 788, 796], "sole": [37, 769, 777, 800, 801, 802], "49": [37, 41, 51, 60, 74, 78, 79, 283, 352, 353, 364, 373, 383, 394, 411, 479, 586, 601, 644, 692, 711], "51": [37, 41, 50, 51, 73, 74, 75, 83, 231, 269, 282, 353, 373, 416, 586, 693], "93": [37, 51, 73, 75, 83, 194, 283, 339, 349, 500, 501, 585, 588, 692, 693], "devicearrai": [37, 758, 774, 781, 783], "concaten": [37, 51, 52, 58, 74, 79, 355, 429, 500, 504, 588, 590, 593, 616, 634, 652, 775, 779, 781, 784], "accept": [37, 46, 47, 50, 51, 56, 69, 73, 74, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 312, 313, 319, 322, 323, 343, 346, 349, 351, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 444, 478, 481, 485, 493, 501, 502, 507, 511, 513, 515, 517, 531, 549, 554, 578, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 747, 753, 754, 755, 758, 761, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 783, 789, 799], "jax_concat": 37, "tf_concat": 37, "np_concat": 37, "torch_concat": 37, "85": [37, 45, 51, 60, 67, 73, 74, 76, 78, 83, 94, 103, 221, 230, 231, 275, 291, 297, 344, 364, 479, 546, 573, 580, 586, 588, 589, 590, 597, 614, 691, 692, 693], "86": [37, 60, 74, 83, 352, 364, 383, 479, 569, 589, 692, 693], "mymodel": [37, 784], "87": [37, 76, 78, 230, 259, 364, 394, 479, 569, 586, 589], "88": [37, 76, 83, 103, 231, 364, 479, 573, 580, 586, 589, 591, 597, 601, 634, 693, 711], "x_in": [37, 784, 785, 786], "90": [37, 39, 41, 50, 51, 73, 74, 231, 235, 275, 279, 339, 349, 355, 364, 450, 479, 586, 591, 601, 634, 711, 792], "reduce_mean": [37, 747, 784, 785, 786], "91": [37, 51, 78, 83, 231, 339, 349, 394, 586, 590, 591, 597, 601, 614, 634, 692, 711], "49040043354034424": 37, "48975786566734314": 37, "4892795979976654": 37, "48886892199516296": 37, "4884953498840332": 37, "4881443977355957": 37, "4878086447715759": 37, "48748287558555603": 37, "48716384172439575": 37, "48684927821159363": 37, "48653748631477356": 37, "48622724413871765": 37, "4859171509742737": 37, "48560672998428345": 37, "48529526591300964": 37, "4849821627140045": 37, "48466697335243225": 37, "4843493402004242": 37, "4840289056301117": 37, "4837053418159485": 37, "4833785891532898": 37, "4830484390258789": 37, "22": [37, 39, 41, 44, 45, 50, 51, 52, 60, 64, 67, 74, 75, 78, 83, 104, 109, 231, 239, 352, 353, 355, 360, 364, 370, 371, 373, 388, 389, 390, 391, 394, 399, 428, 469, 479, 501, 532, 567, 580, 586, 590, 591, 595, 598, 601, 613, 614, 622, 627, 634, 678, 688, 691, 692, 693, 700, 710, 711, 754, 761, 767], "48271444439888": 37, "23": [37, 39, 41, 50, 51, 56, 60, 70, 73, 74, 75, 78, 83, 133, 231, 234, 251, 252, 253, 276, 278, 279, 280, 282, 289, 319, 320, 349, 352, 355, 364, 370, 371, 373, 383, 388, 389, 390, 391, 394, 428, 479, 485, 583, 586, 590, 591, 595, 598, 609, 622, 626, 630, 640, 671, 678, 682, 691, 692, 693, 700, 747, 762, 776, 781], "48237672448158264": 37, "48203518986701965": 37, "25": [37, 39, 40, 41, 50, 52, 56, 57, 60, 64, 67, 73, 74, 75, 78, 79, 82, 83, 87, 93, 94, 109, 134, 219, 220, 230, 236, 238, 249, 254, 269, 274, 277, 279, 282, 283, 284, 289, 303, 346, 354, 364, 394, 417, 419, 420, 479, 487, 515, 516, 532, 546, 583, 586, 588, 591, 592, 595, 596, 601, 604, 618, 622, 627, 644, 649, 671, 678, 682, 689, 691, 692, 693, 710, 711, 713, 718, 761, 772], "48168954253196716": 37, "26": [37, 39, 41, 44, 50, 51, 59, 60, 74, 75, 76, 83, 231, 236, 282, 352, 353, 373, 411, 515, 569, 586, 588, 589, 590, 591, 595, 596, 601, 612, 622, 634, 641, 671, 689, 691, 692, 711], "4813397228717804": 37, "27": [37, 39, 44, 50, 51, 56, 60, 73, 74, 78, 79, 83, 87, 230, 231, 234, 274, 282, 283, 325, 349, 352, 373, 383, 516, 586, 588, 591, 595, 601, 629, 634, 644, 671, 678, 692, 711, 715], "4809857904911041": 37, "48062753677368164": 37, "29": [37, 39, 41, 44, 56, 73, 75, 76, 78, 83, 224, 364, 394, 479, 500, 501, 571, 575, 586, 588, 589, 591, 626, 691, 692, 693], "48026490211486816": 37, "30": [37, 39, 50, 51, 74, 75, 83, 87, 94, 269, 328, 336, 349, 352, 355, 373, 383, 394, 428, 469, 500, 502, 507, 508, 515, 516, 532, 541, 546, 586, 588, 591, 595, 601, 627, 634, 679, 691, 692, 710, 711, 715, 728, 762], "479898065328598": 37, "31": [37, 39, 40, 44, 45, 50, 51, 73, 74, 75, 78, 83, 104, 109, 135, 230, 261, 269, 352, 355, 364, 372, 373, 428, 479, 495, 580, 583, 586, 588, 692, 693, 784], "47952669858932495": 37, "4791509211063385": 37, "33": [37, 39, 40, 50, 60, 64, 73, 75, 76, 78, 222, 223, 230, 279, 352, 355, 364, 371, 393, 394, 428, 479, 496, 546, 573, 586, 588, 589, 590, 591, 595, 601, 613, 614, 634, 688, 691, 711, 718], "4787706732749939": 37, "34": [37, 39, 73, 74, 75, 83, 164, 231, 234, 261, 282, 352, 364, 394, 485, 500, 501, 584, 586, 588, 590, 591, 597, 614, 631, 692, 693, 764], "47838595509529114": 37, "35": [37, 45, 55, 56, 67, 73, 74, 78, 79, 83, 104, 224, 283, 352, 373, 383, 586, 590, 591, 598, 601, 614, 619, 626, 692, 700, 711], "4779967665672302": 37, "36": [37, 41, 50, 51, 55, 64, 74, 75, 79, 224, 279, 280, 328, 349, 352, 364, 373, 383, 479, 500, 501, 547, 586, 588, 591, 595, 601, 614, 631, 634, 644, 681, 711], "47760307788848877": 37, "37": [37, 45, 50, 51, 67, 73, 74, 78, 93, 104, 222, 230, 279, 282, 286, 360, 394, 469, 586, 590, 591, 595, 597, 614, 631, 678, 692, 762], "4772048890590668": 37, "38": [37, 39, 41, 44, 48, 51, 73, 74, 83, 161, 286, 336, 349, 352, 364, 371, 390, 393, 394, 479, 584, 586, 591, 631, 765], "47680220007896423": 37, "47639501094818115": 37, "40": [37, 39, 41, 51, 52, 73, 74, 75, 83, 87, 94, 230, 234, 254, 283, 328, 349, 352, 371, 373, 383, 389, 500, 502, 507, 508, 532, 546, 568, 571, 586, 588, 589, 591, 595, 601, 627, 634, 679, 692, 711, 715, 747, 762], "47598329186439514": 37, "41": [37, 39, 44, 50, 51, 56, 73, 74, 75, 78, 79, 104, 223, 231, 269, 283, 352, 353, 360, 364, 371, 389, 394, 408, 469, 479, 495, 496, 580, 586, 588, 591, 601, 618, 626, 717], "4755673110485077": 37, "4751465618610382": 37, "4747215211391449": 37, "4742920398712158": 37, "47385817766189575": 37, "47341999411582947": 37, "47297725081443787": 37, "4725303053855896": 37, "47207894921302795": 37, "47162333130836487": 37, "47116345167160034": 37, "52": [37, 50, 73, 75, 76, 83, 224, 234, 236, 364, 479, 500, 501, 516, 569, 586, 588, 589, 590, 591, 601, 614, 634, 693, 711, 741], "470699280500412": 37, "53": [37, 56, 60, 73, 78, 155, 211, 241, 394, 572, 574, 584, 585, 589, 591, 596, 626, 689, 693], "47023090720176697": 37, "54": [37, 48, 50, 55, 73, 74, 78, 83, 164, 233, 234, 239, 254, 283, 289, 302, 346, 352, 364, 373, 383, 479, 586, 590, 591, 601, 614, 631, 634, 691, 692, 693, 711, 762, 765], "4697583019733429": 37, "55": [37, 45, 74, 83, 109, 230, 289, 364, 479, 515, 586, 588, 591, 597, 601, 627, 634, 692, 693, 711, 757], "46928152441978455": 37, "56": [37, 39, 50, 51, 55, 60, 73, 74, 78, 135, 269, 283, 286, 289, 352, 373, 383, 569, 583, 586, 589, 590, 591, 595, 601, 605, 607, 609, 614, 634, 670, 692, 711, 765], "46880054473876953": 37, "57": [37, 39, 50, 51, 73, 74, 194, 217, 218, 221, 222, 224, 231, 234, 235, 275, 291, 585, 586], "4683155119419098": 37, "58": [37, 495, 588], "4678264260292053": 37, "59": [37, 50, 231, 364, 479], "46733325719833374": 37, "46683603525161743": 37, "61": [37, 39, 50, 51, 56, 73, 74, 76, 80, 83, 222, 257, 259, 284, 373, 569, 586, 589, 590, 591, 592, 612, 626, 648, 650, 693], "4663347601890564": 37, "62": [37, 39, 45, 67, 73, 83, 104, 254, 282, 586, 596, 597, 689, 691, 693], "4658295214176178": 37, "63": [37, 41, 50, 67, 73, 78, 79, 109, 275, 282, 283, 352, 364, 373, 383, 394, 479, 586, 591, 595, 601, 618, 634, 671, 682, 711], "465320348739624": 37, "4648073613643646": 37, "65": [37, 39, 41, 44, 73, 76, 83, 230, 269, 515, 569, 586, 588, 589, 591, 601, 634, 692, 693, 711, 762], "46429020166397095": 37, "66": [37, 39, 41, 64, 74, 75, 76, 231, 352, 383, 500, 501, 573, 586, 588, 589, 591, 601, 634, 711], "4637692868709564": 37, "46324464678764343": 37, "68": [37, 41, 44, 50, 83, 104, 132, 224, 352, 373, 383, 580, 583, 586, 596, 689, 692, 693], "4627160429954529": 37, "4621836841106415": 37, "70": [37, 39, 51, 74, 75, 352, 373, 383, 508, 532, 591, 601, 634, 711, 792], "4616474211215973": 37, "71": [37, 50, 73, 78, 235, 275, 394, 586], "46110764145851135": 37, "72": [37, 51, 60, 74, 76, 241, 328, 349, 352, 373, 383, 573, 586, 589, 591, 601, 634, 692, 711], "460563987493515": 37, "73": [37, 50, 79, 283, 364, 479, 591, 597, 618, 692, 776], "4600166976451874": 37, "74": [37, 39, 50, 83, 231, 261, 586, 591, 631], "45946577191352844": 37, "45891112089157104": 37, "45835286378860474": 37, "77": [37, 41, 75, 231, 547, 586, 591, 601, 634, 711], "4577910006046295": 37, "78": [37, 53, 231, 280, 575, 586, 589, 591, 597, 601, 634, 692, 711], "45722562074661255": 37, "79": [37, 39, 51, 52, 74, 75, 78, 83, 93, 231, 236, 352, 373, 383, 394, 495, 496, 586, 588, 693], "45665669441223145": 37, "80": [37, 51, 74, 328, 349, 353, 364, 411, 479, 591, 595, 601, 634, 681, 711, 792], "4560841917991638": 37, "81": [37, 41, 50, 56, 71, 73, 79, 83, 164, 234, 259, 284, 364, 479, 584, 586, 591, 595, 597, 601, 626, 631, 644, 678, 693, 711, 776], "4555082619190216": 37, "82": [37, 39, 44, 45, 50, 76, 83, 104, 222, 364, 479, 569, 589, 692, 693, 751], "45492875576019287": 37, "83": [37, 56, 78, 83, 283, 352, 364, 373, 383, 394, 479, 586, 590, 591, 614, 626, 692], "45434585213661194": 37, "84": [37, 55, 64, 73, 83, 164, 194, 259, 584, 585, 591, 596, 601, 614, 634, 689, 692, 693, 711], "45375964045524597": 37, "4531698524951935": 37, "4525766670703888": 37, "45198020339012146": 37, "4513803720474243": 37, "4507772624492645": 37, "4501707851886749": 37, "4495610296726227": 37, "92": [37, 41, 51, 52, 83, 339, 349, 567, 577, 589, 591, 620, 692, 693], "4489481747150421": 37, "44833192229270935": 37, "94": [37, 50, 51, 53, 60, 73, 74, 76, 83, 203, 279, 280, 339, 349, 383, 573, 585, 589, 693], "4477125108242035": 37, "95": [37, 51, 53, 56, 60, 67, 76, 78, 83, 101, 339, 349, 394, 569, 573, 577, 580, 589, 591, 597, 626, 692, 693], "44708991050720215": 37, "96": [37, 51, 53, 73, 74, 75, 83, 233, 254, 286, 339, 349, 352, 373, 500, 501, 573, 586, 588, 589, 591, 601, 634, 693, 711], "44646409153938293": 37, "97": [37, 51, 53, 73, 76, 83, 222, 339, 349, 573, 586, 589, 692], "44583529233932495": 37, "98": [37, 45, 51, 53, 60, 67, 73, 76, 83, 104, 231, 234, 282, 339, 349, 573, 580, 586, 589, 591, 595, 598, 601, 634, 671, 682, 691, 693, 700, 711], "4452032148838043": 37, "99": [37, 50, 51, 53, 71, 73, 83, 132, 218, 233, 339, 349, 546, 573, 583, 586, 588, 589, 595, 601, 674, 682, 692, 711], "44456806778907776": 37, "4439": 37, "selectbackward0": 37, "hope": [37, 787, 792, 807], "short": [37, 590, 615, 753, 755, 763, 781, 785], "ivy_compil": 38, "ic": 38, "produc": [38, 51, 52, 55, 74, 78, 294, 297, 300, 303, 344, 346, 590, 617, 753, 763, 768, 773, 775, 776, 777, 795, 802, 804], "numer": [38, 47, 48, 50, 51, 52, 56, 60, 61, 64, 71, 73, 74, 75, 79, 83, 84, 86, 93, 94, 136, 148, 216, 219, 232, 236, 241, 242, 243, 250, 251, 252, 255, 264, 265, 269, 271, 272, 273, 274, 278, 279, 280, 284, 285, 289, 290, 359, 364, 465, 478, 537, 538, 546, 547, 559, 560, 583, 584, 586, 588, 591, 597, 598, 601, 619, 626, 629, 634, 637, 639, 641, 643, 645, 691, 692, 693, 695, 696, 697, 699, 700, 705, 712, 715, 717, 728, 751, 763, 772, 774, 775, 776, 777, 778, 779, 781, 785, 798, 801, 807], "anyth": [38, 51, 74, 364, 484, 485, 755, 767, 776, 777, 801, 802], "affect": [38, 44, 762, 774], "intermedi": [38, 799, 800, 801, 802, 807], "variabl": [38, 40, 41, 43, 51, 52, 53, 59, 68, 74, 75, 76, 82, 114, 115, 117, 353, 359, 364, 414, 466, 477, 478, 493, 517, 518, 519, 520, 523, 549, 570, 571, 573, 575, 576, 577, 582, 588, 589, 591, 594, 596, 638, 667, 668, 669, 689, 726, 727, 728, 729, 730, 731, 732, 733, 734, 755, 759, 763, 766, 769, 772, 773, 776, 777, 781, 784, 785, 786, 787, 788, 795, 802], "original_fn": 38, "100000": 38, "var": [38, 64, 87, 89, 114, 115, 116, 117, 582, 594, 601, 667, 668, 735, 754, 765, 781], "co": [38, 39, 50, 52, 73, 234, 239, 241, 282, 504, 586, 588, 752, 763, 781, 792], "sin": [38, 50, 52, 73, 234, 239, 241, 282, 504, 586, 588, 758, 781], "tan": [38, 50, 73, 491, 586, 588, 766, 769, 770, 773, 774, 781], "comp_fn": 38, "compile_graph": [38, 44, 781, 786], "expected_result": 38, "compiled_result": 38, "irrelev": [38, 762, 763, 765], "opeat": 38, "_layer": [38, 781], "net": [38, 43, 44, 781, 786, 792, 793], "compiled_net": 38, "proceed": 39, "latest": [39, 41, 50, 73, 151, 239, 249, 250, 265, 364, 478, 584, 586, 591, 593, 601, 637, 666, 716, 729, 747, 753, 754, 755, 757, 759, 762, 766, 777, 787, 788, 796, 806], "pypi": [39, 41, 44, 753, 754, 777, 787], "pkg": [39, 41, 44], "wheel": [39, 41, 44, 791], "public": [39, 41, 44, 497, 588, 762, 772, 783, 804], "revis": [39, 41, 755], "tmp": [39, 41, 544, 566, 588], "req": [39, 41], "tabqrujw": 39, "command": [39, 41, 747, 750, 754, 757, 760, 762, 768, 788], "filter": [39, 41, 43, 51, 55, 74, 78, 305, 306, 346, 352, 372, 390, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729, 747, 759, 762], "quiet": [39, 41], "resolv": [39, 41, 51, 64, 243, 364, 479, 480, 586, 593, 601, 654, 709, 710, 715, 717, 755, 760, 763, 768, 781], "commit": [39, 41, 749, 751, 753, 757, 765, 776], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 39, "metadata": [39, 41, 44, 773], "setup": [39, 41, 44, 749, 754, 755, 760, 762], "done": [39, 41, 44, 591, 625, 752, 753, 754, 755, 757, 760, 762, 764, 765, 768, 773, 774, 776, 784, 795, 796, 801], "satisfi": [39, 41, 44, 51, 352, 353, 374, 401, 763, 765], "core": [39, 40, 41, 43, 44, 51, 74, 91, 200, 353, 404, 413, 416, 585, 754, 764, 776, 786, 791, 799, 800, 801, 802, 806, 808], "einop": [39, 41, 44, 52, 75, 500, 501, 502, 588, 792], "py3": [39, 41, 44], "whl": [39, 40, 41, 44], "kb": [39, 41, 44], "psutil": [39, 41, 44], "cp39": [39, 41], "manylinux_2_12_x86_64": [39, 41], "manylinux2010_x86_64": [39, 41], "manylinux_2_17_x86_64": [39, 41], "manylinux2014_x86_64": [39, 40, 41], "mb": [39, 41, 44, 762], "eta": [39, 41, 44], "00": [39, 41, 44, 51, 52, 74, 75, 79, 241, 300, 346, 352, 373, 379, 383, 384, 504, 547, 586, 588, 591, 592, 625, 648, 768, 776], "termcolor": [39, 41, 44, 68, 94], "tar": [39, 40, 41, 44], "gz": [39, 40, 41, 44], "colorama": [39, 41], "py2": [39, 41], "nvidia": [39, 41, 44, 805, 806], "495": [39, 41], "nvidia_ml_pi": [39, 41], "diskcach": 39, "pypars": [39, 41, 44], "ivy_cor": [39, 41, 44, 754], "1338326": 39, "sha256": [39, 41, 44], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 39, "store": [39, 41, 44, 48, 51, 52, 56, 58, 68, 71, 74, 75, 79, 81, 150, 352, 353, 395, 399, 403, 504, 588, 591, 593, 643, 660, 729, 730, 731, 750, 755, 758, 759, 761, 766, 771, 773, 774, 775, 781, 783, 784, 785, 789, 795], "directori": [39, 40, 41, 44, 544, 566, 585, 588, 749, 750, 753, 754, 755, 760, 762, 774, 776, 788], "ephem": [39, 41], "cach": [39, 41, 44, 191, 494, 585, 588, 738, 768, 770, 773, 776], "njrc_e6b": 39, "07": [39, 41, 53, 57, 73, 76, 80, 83, 224, 257, 261, 280, 352, 383, 559, 569, 570, 572, 573, 574, 575, 586, 588, 589, 592, 649, 650, 692, 730, 733, 785], "2e": [39, 41], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [39, 41], "4845": [39, 41], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 39, "root": [39, 40, 41, 44, 50, 73, 283, 586, 727, 750, 754, 755, 760, 774, 784], "b6": [39, 41], "0d": [39, 41], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [39, 41], "successfulli": [39, 41, 44, 731, 754, 758], "attempt": [39, 41, 44, 754, 778, 787], "uninstal": [39, 41, 44], "found": [39, 41, 42, 44, 56, 58, 62, 68, 74, 79, 81, 85, 94, 197, 364, 429, 479, 585, 595, 622, 629, 662, 681, 701, 727, 749, 753, 754, 755, 758, 759, 760, 761, 763, 764, 766, 768, 771, 773, 774, 788, 803], "cannot": [39, 40, 41, 44, 51, 286, 424, 425, 426, 586, 755, 757, 759, 763, 774, 781, 786, 807], "vnd": [39, 41, 44], "json": [39, 41, 44, 68, 749, 754, 784], "psst": 39, "cv2": [39, 41, 43, 784], "pickl": [39, 40, 68, 731, 761, 784], "imageio": 39, "urllib": [39, 44], "_src": 39, "xla_bridg": 39, "tpu": [39, 190, 196, 207, 212, 585, 764, 801, 804], "fall": [39, 730, 731, 733, 753, 763, 780], "back": [39, 51, 58, 74, 81, 355, 434, 533, 556, 588, 590, 593, 616, 658, 728, 730, 731, 733, 754, 758, 763, 764, 767, 771, 772, 778, 780, 787, 788, 792, 799, 803], "tf_cpp_min_log_level": 39, "rerun": 39, "info": [39, 744, 747, 760, 766, 768], "mkdir": [39, 40, 41, 754, 762], "perceiv": [39, 40], "touch": 39, "io_processor": 39, "position_encod": 39, "absl": 39, "jmp": 39, "tabul": 39, "2023": 39, "04": [39, 40, 47, 53, 67, 71, 76, 103, 104, 135, 161, 241, 537, 569, 570, 575, 580, 583, 584, 586, 588, 589, 754, 776], "185": [39, 67], "199": [39, 222, 586], "111": [39, 595, 688], "133": [39, 55, 496, 588, 614], "108": [39, 590, 601, 614, 711], "109": [39, 56, 591, 626], "connect": [39, 729, 754, 785, 786, 792, 799], "443": [39, 281, 586], "sent": 39, "await": 39, "respons": [39, 755, 762, 763], "200": [39, 75, 78, 230, 352, 375, 376, 508, 532, 586, 588, 741, 784], "ok": [39, 754], "length": [39, 40, 47, 51, 57, 58, 68, 74, 80, 81, 91, 94, 118, 131, 136, 297, 302, 305, 306, 316, 322, 344, 346, 349, 352, 353, 355, 359, 362, 374, 379, 380, 383, 384, 385, 395, 405, 412, 444, 452, 466, 471, 568, 583, 588, 590, 591, 592, 593, 599, 616, 639, 640, 648, 658, 701, 727, 729, 776, 784], "29359": 39, "29k": 39, "plain": 39, "67k": 39, "002": 39, "110": 39, "30179": 39, "47k": 39, "8107": 39, "9k": 39, "92k": 39, "functool": [39, 767, 774, 783], "itertool": 39, "matplotlib": [39, 40, 41, 44], "pyplot": [39, 40, 41, 44], "plt": [39, 40, 41, 44], "preprocessor": 39, "vector": [39, 47, 51, 52, 55, 56, 74, 75, 78, 79, 91, 136, 352, 353, 355, 359, 364, 374, 400, 404, 410, 412, 415, 444, 446, 448, 466, 478, 496, 500, 517, 568, 583, 588, 590, 591, 614, 616, 619, 623, 624, 626, 629, 634, 639, 640, 644, 645, 646, 647, 729, 801], "perceiverbackbon": 39, "input_preprocessor": 39, "_input_preprocessor": 39, "_encod": 39, "__call__": [39, 729, 730, 731, 747, 796], "is_train": 39, "po": 39, "input_mask": 39, "network_input_is_1d": 39, "_input_is_1d": 39, "queri": [39, 40, 55, 68, 78, 194, 208, 510, 536, 585, 588, 590, 616, 617, 729, 761, 763, 783, 801], "decod": [39, 784], "cross": [39, 41, 56, 57, 79, 80, 591, 592, 648, 649, 650, 747, 762, 763], "attend": [39, 590, 616], "encoder_queri": 39, "latent": [39, 594, 669], "imagepreprocessor": 39, "deal": [39, 751, 764, 770, 772, 774, 787], "image_s": 39, "fourier_pos_config": 39, "position_encoding_typ": 39, "fourier": [39, 51, 74, 352, 374, 379, 380, 384, 385, 395, 504, 588], "fourier_position_encoding_kwarg": 39, "concat_po": 39, "max_resolut": 39, "num_band": [39, 52, 75, 504, 588], "sine_onli": 39, "prep_typ": 39, "spatial_downsampl": 39, "cross_attend_widening_factor": 39, "cross_attention_shape_for_attn": 39, "kv": 39, "dropout_prob": 39, "num_block": 39, "num_cross_attend_head": 39, "num_self_attend_head": 39, "num_self_attends_per_block": 39, "num_z_channel": 39, "self_attend_widening_factor": 39, "use_query_residu": 39, "z_index_dim": 39, "z_pos_enc_init_scal": 39, "02": [39, 47, 52, 53, 59, 60, 73, 76, 83, 135, 221, 222, 261, 352, 373, 383, 384, 546, 547, 569, 570, 575, 583, 586, 588, 589, 592, 596, 597, 648, 689, 692, 693, 775], "perceiver_backbon": [39, 747], "perceiverencod": 39, "At": [39, 753, 754, 755, 757, 776, 777, 792, 801], "almost": [39, 752, 761, 775, 782, 784, 791], "publish": [39, 747, 787, 793, 796], "thankfulli": [39, 776], "perceiver_io": [39, 40], "imagenet_fourier_position_encod": 39, "pystat": 39, "imagenet_checkpoint": 39, "rb": 39, "ckpt": 39, "read": [39, 41, 51, 58, 68, 70, 74, 81, 131, 355, 434, 583, 593, 658, 753, 754, 760, 762, 776, 778, 779, 801], "173": [39, 56, 591, 626], "194": 39, "217": [39, 767], "125": [39, 51, 56, 79, 230, 325, 349, 354, 417, 586, 591, 644], "177": [39, 41], "193776248": 39, "185m": 39, "octet": 39, "184": 39, "80m": 39, "144mb": 39, "144": 39, "mean_rgb": 39, "stddev_rgb": 39, "im": 39, "denorm": 39, "resize_and_center_crop": 39, "crop": [39, 51, 74, 352, 380, 385, 395], "center": [39, 728], "image_height": [39, 41, 747], "image_width": [39, 747], "padded_center_crop_s": 39, "minimum": [39, 50, 51, 52, 58, 61, 64, 73, 74, 75, 81, 84, 87, 216, 244, 271, 314, 325, 346, 349, 355, 364, 444, 476, 480, 537, 538, 546, 547, 559, 560, 586, 588, 593, 598, 601, 651, 697, 712, 714, 778, 798, 804, 808], "offset_height": 39, "offset_width": 39, "crop_window": 39, "inter_cub": 39, "ye": [39, 787], "dummy_input": [39, 747], "transpili": 39, "torch_perceiver_backbon": 39, "quicker": 39, "params_v": [39, 747, 796], "perceiverioclassifi": [39, 747], "max_pool": [39, 747], "huggingfac": [39, 795, 796], "Of": [39, 758, 773, 774, 784, 806, 807], "cours": [39, 754, 755, 757, 758, 765, 773, 774, 779, 784, 787, 806, 807], "468": 39, "huggingface_hub": 39, "dill": 39, "multiprocess": [39, 68, 94, 588, 784, 787], "py39": 39, "132": [39, 74], "pyarrow": 39, "xxhash": 39, "212": [39, 51, 55, 74, 338, 349, 614], "panda": [39, 41, 792], "pyyaml": 39, "fsspec": 39, "2021": [39, 51, 74, 341, 349, 747], "aiohttp": 39, "tqdm": [39, 41, 747], "async": 39, "timeout": [39, 68, 94, 541, 563, 588, 778], "0a3": 39, "async_timeout": 39, "frozenlist": 39, "manylinux_2_5_x86_64": [39, 44], "manylinux1_x86_64": [39, 44], "158": 39, "attr": 39, "aiosign": 39, "charset": 39, "multidict": 39, "114": [39, 352, 373, 383], "yarl": 39, "264": 39, "extens": [39, 50, 56, 73, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 319, 349, 364, 478, 583, 584, 586, 591, 593, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 652, 654, 655, 656, 658, 659, 661, 662, 666, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 747, 749, 752, 754, 755, 766, 768, 776, 798, 801, 808], "filelock": 39, "certifi": 39, "2017": [39, 590, 616], "2022": [39, 40], "idna": 39, "urllib3": 39, "pytz": 39, "2020": [39, 757, 801], "dateutil": [39, 44], "six": [39, 44, 754, 779], "wikiart": 39, "paint": [39, 747, 781, 791], "load_dataset": [39, 795, 796], "n_sampl": [39, 51, 74, 355, 447], "10000": [39, 41, 47, 70, 135, 583], "huggan": 39, "split": [39, 40, 41, 45, 50, 51, 58, 67, 68, 73, 74, 81, 101, 103, 106, 109, 207, 208, 209, 287, 327, 334, 355, 430, 439, 456, 500, 527, 580, 585, 586, 588, 590, 593, 603, 610, 611, 663, 725, 729, 747, 748, 755, 762, 780, 781, 787, 808], "wiki_art": 39, "gib": 39, "unknown": 39, "total": [39, 41, 51, 64, 68, 74, 87, 94, 131, 211, 314, 315, 321, 346, 349, 583, 585, 598, 601, 699, 716, 718, 747, 748, 755, 763, 764, 765, 776, 779, 784, 785, 787, 793], "huggan___parquet": 39, "36ee951979f9b56c": 39, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 39, "parquet": 39, "subsequ": [39, 738, 754, 758, 762, 763, 765, 769, 770, 773, 776, 785, 802], "reus": [39, 47, 70, 74, 81, 120, 424, 425, 430, 432, 434, 435, 436, 443, 456, 654, 655, 656, 658, 660, 661, 663, 665, 767, 776, 806], "curl": [39, 754], "server": [39, 747, 754, 755, 760, 788, 801], "row": [39, 51, 74, 129, 143, 312, 346, 353, 355, 362, 364, 405, 414, 436, 442, 457, 471, 477, 478, 583, 591, 597, 598, 630, 638, 639, 644, 690, 699, 728], "2fwikiart": 39, "label": [39, 40, 41, 51, 57, 74, 80, 354, 417, 419, 420, 421, 592, 648, 649, 650, 747, 753, 757, 774, 780, 781, 782, 786, 788, 801], "receiv": [39, 43, 91, 491, 527, 588, 594, 667, 668, 669, 729, 755, 763, 764, 776, 779], "xferd": 39, "averag": [39, 41, 51, 53, 57, 74, 76, 80, 352, 354, 364, 366, 367, 370, 371, 372, 418, 419, 420, 421, 478, 569, 570, 575, 589, 590, 592, 594, 616, 648, 667, 668, 728, 729], "dload": 39, "upload": [39, 776], "spent": [39, 793], "25936": 39, "278k": 39, "number": [39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 91, 93, 94, 97, 118, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 143, 149, 154, 155, 156, 157, 158, 160, 161, 164, 167, 168, 169, 171, 173, 176, 200, 201, 202, 216, 217, 218, 219, 220, 222, 224, 225, 232, 234, 236, 237, 239, 241, 242, 243, 249, 250, 251, 253, 257, 259, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 280, 282, 283, 287, 289, 297, 307, 310, 311, 312, 314, 315, 317, 319, 320, 321, 322, 330, 335, 339, 344, 346, 349, 352, 353, 355, 358, 364, 385, 395, 397, 400, 404, 405, 413, 415, 416, 424, 425, 426, 444, 445, 446, 447, 448, 450, 453, 455, 458, 459, 460, 476, 478, 479, 480, 481, 486, 504, 511, 529, 546, 547, 554, 567, 568, 581, 583, 584, 585, 586, 588, 590, 591, 592, 593, 594, 597, 598, 599, 601, 602, 603, 610, 611, 613, 616, 619, 623, 624, 625, 632, 637, 639, 643, 644, 645, 648, 651, 653, 654, 656, 657, 659, 660, 662, 664, 666, 667, 668, 669, 690, 694, 699, 701, 702, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 727, 728, 729, 732, 747, 754, 755, 761, 762, 763, 764, 765, 771, 772, 773, 776, 777, 778, 779, 781, 784, 790, 791, 795], "abstract_expression": 39, "action_paint": 39, "analytical_cub": 39, "art_nouveau": 39, "baroqu": 39, "color_field_paint": 39, "contemporary_r": 39, "cubism": 39, "early_renaiss": 39, "expression": 39, "fauvism": 39, "high_renaiss": 39, "impression": 39, "mannerism_late_renaiss": 39, "minim": [39, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 635, 636, 637, 639, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 766, 773, 775, 779, 781, 795, 799, 807], "naive_art_primitiv": 39, "new_real": 39, "northern_renaiss": 39, "pointil": 39, "pop_art": 39, "post_impression": 39, "realism": 39, "rococo": 39, "romantic": 39, "symbol": [39, 741, 753, 754, 801, 802], "synthetic_cub": 39, "ukiyo_": 39, "custom": [39, 51, 74, 299, 343, 344, 351, 741, 750, 762, 767, 771, 775, 776, 779, 785, 792, 801, 805, 806, 807], "hugginfac": 39, "customdataset": 39, "__len__": [39, 761], "__getitem__": [39, 68, 761], "idx": [39, 40, 41, 490, 588, 747, 764, 783], "random_split": 39, "224x224": 39, "train_siz": 39, "val_siz": 39, "test_siz": 39, "dataset_train": 39, "dataset_v": 39, "dataset_test": 39, "dataloader_train": 39, "batch_siz": [39, 41, 44, 51, 55, 60, 74, 78, 83, 352, 354, 370, 371, 372, 388, 389, 390, 391, 421, 590, 597, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 690, 747, 784], "dataloader_v": 39, "dataloader_test": 39, "batch": [39, 40, 41, 51, 52, 56, 68, 74, 75, 79, 207, 208, 352, 358, 366, 367, 368, 374, 387, 458, 459, 460, 504, 507, 508, 568, 585, 588, 590, 591, 594, 596, 614, 616, 628, 646, 667, 668, 669, 689, 729, 732, 747, 761, 770, 775, 784, 799], "iter": [39, 41, 46, 51, 52, 58, 66, 68, 74, 75, 81, 89, 94, 114, 115, 117, 209, 308, 309, 346, 353, 355, 404, 413, 416, 444, 489, 527, 582, 585, 588, 593, 595, 653, 657, 664, 666, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 685, 686, 688, 741, 757, 759, 761, 781, 784, 793, 795], "train_featur": 39, "train_label": 39, "imshow": [39, 40], "crossentropyloss": [39, 730], "sgd": [39, 733, 801], "lr": [39, 53, 76, 491, 570, 573, 575, 576, 577, 588, 589, 733, 784, 785], "001": [39, 50, 51, 59, 71, 74, 76, 161, 259, 276, 319, 330, 349, 570, 584, 586, 589, 596, 689, 784, 785], "momentum": [39, 51, 74, 358, 458, 460, 732, 792], "train_step": 39, "running_loss": [39, 41, 747], "last_loss": 39, "training_load": 39, "intra": 39, "report": [39, 753, 776], "zero_grad": 39, "backward": [39, 51, 65, 74, 88, 278, 352, 374, 379, 380, 384, 385, 395, 586, 591, 602, 619, 645, 719, 720, 729, 777, 787], "adjust": [39, 64, 87, 353, 414, 601, 716, 718, 738], "999": [39, 53, 73, 76, 287, 569, 570, 575, 577, 586, 589, 733, 785], "epoch_numb": 39, "best_vloss": 39, "1_000_000": 39, "avg_loss": 39, "running_vloss": 39, "vdata": 39, "vinput": 39, "vlabel": 39, "voutput": 39, "vloss": 39, "avg_vloss": 39, "best": [39, 527, 588, 747, 748, 752, 753, 754, 755, 756, 762, 763, 767, 776, 777, 788, 804, 805], "model_path": 39, "model_": 39, "state_dict": 39, "highest": [39, 51, 60, 74, 83, 307, 346, 597, 691, 763], "energi": 39, "sum": [39, 41, 50, 51, 52, 55, 56, 57, 64, 68, 73, 74, 75, 78, 79, 80, 87, 91, 93, 94, 209, 219, 261, 285, 315, 335, 346, 349, 353, 354, 364, 394, 399, 417, 418, 419, 420, 421, 484, 485, 501, 531, 532, 585, 586, 588, 590, 591, 592, 601, 613, 617, 630, 639, 643, 646, 648, 649, 650, 710, 711, 728, 730, 741, 747, 761, 763, 770, 772, 773, 774, 781, 795, 796], "accuraci": [39, 41, 44, 763], "augment": 39, "mayb": [39, 40, 46, 747, 754, 762, 781, 783], "meta": [39, 667, 668, 669, 758, 777, 801], "finetun": 39, "deploi": [39, 747, 762, 789, 796, 799, 800, 801, 803, 807], "present": [40, 51, 68, 74, 319, 349, 358, 458, 459, 460, 753, 755, 761, 763, 764, 769, 773, 781, 791, 798, 799, 808], "percieverio": 40, "ai": [40, 799, 803], "contribut": [40, 51, 74, 364, 481, 749, 752, 753, 754, 755, 760, 768, 774, 781, 788, 795, 805], "highli": [40, 747, 801], "invit": [40, 753, 774, 779], "g4ar9q7dtn": 40, "step1": 40, "printf": 40, "8packag": 40, "share": [40, 68, 182, 584, 747, 759, 761, 765, 770, 772, 774, 775, 776, 779, 781, 792, 799, 800, 807], "googledr": 40, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 40, "file_id": 40, "drive": [40, 41], "uc": 40, "export": [40, 762, 800, 807], "id": [40, 51, 74, 192, 314, 315, 346, 585, 730, 731, 747, 749, 752, 754, 758, 760, 761, 768, 772, 776, 788], "tee": [40, 754], "file_id_wget_cmd": 40, "perl": 40, "pe": 40, "g": [40, 42, 43, 51, 60, 62, 64, 66, 74, 83, 89, 91, 147, 176, 189, 236, 249, 269, 276, 279, 352, 353, 359, 364, 388, 390, 416, 464, 465, 466, 467, 468, 479, 480, 584, 585, 586, 591, 595, 597, 599, 601, 624, 625, 630, 637, 639, 640, 646, 673, 677, 679, 682, 687, 691, 692, 693, 701, 702, 703, 704, 709, 710, 712, 714, 715, 717, 728, 748, 753, 754, 756, 757, 759, 760, 761, 772, 774, 776, 781, 787, 789, 793, 797], "uuid": 40, "anywai": [40, 758, 771, 774], "bin": [40, 51, 74, 364, 476, 481, 749, 754, 755, 757, 761], "bash": [40, 754, 755, 757], "step2": 40, "interpret": [40, 47, 51, 70, 74, 119, 120, 131, 137, 364, 478, 583, 762, 802], "sudo": [40, 754], "apt": [40, 754], "yf": 40, "step3": 40, "delet": [40, 755, 762], "xvzf": 40, "rm": [40, 42, 749, 750, 755], "step4": 40, "symlink": 40, "unzip": [40, 41], "fr": 40, "l": [40, 56, 73, 79, 263, 353, 400, 591, 618, 623, 624, 625, 629, 643, 755, 756], "d": [40, 51, 52, 55, 56, 58, 70, 74, 75, 78, 79, 81, 107, 135, 143, 176, 219, 236, 237, 269, 272, 312, 346, 352, 353, 355, 359, 362, 370, 371, 372, 379, 384, 388, 389, 390, 391, 393, 398, 411, 426, 430, 432, 435, 439, 452, 456, 464, 470, 492, 503, 580, 583, 584, 586, 590, 591, 593, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 621, 622, 626, 630, 634, 644, 660, 673, 677, 678, 679, 682, 687, 688, 747, 748, 754, 756, 759, 760, 761, 772, 776, 779, 784, 792, 793, 797], "ln": 40, "sf": 40, "la": 40, "step5": 40, "regular": [40, 74, 353, 364, 411, 482, 591, 628, 754, 774, 801], "step6": 40, "ipkykernel": 40, "step7": 40, "engbjapanpython3": 40, "separ": [40, 51, 52, 74, 358, 459, 590, 616, 755, 758, 761, 762, 776, 781, 783, 784, 802, 806], "ipykernel": 40, "reconnect": 40, "sy": 40, "oct": 40, "gcc": [40, 799, 806], "lf": 40, "upgrad": 40, "cuda11": 40, "cudnn805": 40, "cp38": [40, 44], "helper": [40, 747, 760, 763, 767, 784, 789], "feedforward": 40, "prenorm": 40, "perceiveriospec": 40, "fetch": [40, 755, 757, 762], "ogbanugot": 40, "xmartlab": 40, "caffeflow": 40, "fetch_class": 40, "class_label": 40, "append": [40, 41, 51, 56, 68, 74, 228, 322, 349, 586, 591, 593, 622, 629, 654, 747, 762, 776, 781, 784], "ground_truth": 40, "127": [40, 48, 51, 56, 71, 74, 164, 338, 349, 584, 591, 626], "path_to_imag": 40, "get_imag": 40, "ax": [40, 45, 51, 56, 58, 61, 64, 65, 67, 74, 79, 81, 84, 87, 88, 93, 97, 104, 108, 209, 321, 322, 335, 342, 349, 350, 352, 355, 358, 364, 380, 385, 395, 443, 444, 450, 461, 483, 484, 485, 486, 487, 500, 568, 585, 588, 591, 593, 598, 601, 602, 619, 630, 638, 641, 642, 646, 653, 655, 656, 659, 661, 663, 666, 696, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 763, 765, 776, 777, 781, 783], "fig": [40, 41], "subplot": [40, 41], "spine": 40, "set_vis": 40, "right": [40, 51, 56, 68, 74, 79, 94, 112, 113, 228, 230, 283, 329, 349, 352, 353, 355, 386, 408, 414, 415, 435, 500, 582, 586, 588, 591, 600, 639, 644, 707, 748, 753, 754, 755, 756, 757, 765, 779, 784, 795], "bottom": [40, 500, 588, 753, 754, 762, 807], "tick_param": 40, "set_xticklabel": 40, "set_yticklabel": 40, "show_result": 40, "plot": [40, 747, 801], "along": [40, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 73, 74, 75, 79, 80, 81, 83, 84, 86, 87, 88, 91, 104, 108, 114, 134, 135, 209, 283, 286, 288, 314, 315, 321, 322, 335, 342, 346, 349, 350, 352, 353, 354, 355, 358, 364, 373, 379, 380, 383, 384, 385, 395, 413, 419, 429, 430, 431, 435, 436, 444, 449, 453, 461, 462, 463, 479, 480, 481, 483, 484, 485, 486, 487, 500, 507, 582, 583, 585, 586, 588, 591, 592, 593, 594, 597, 598, 600, 601, 602, 619, 634, 643, 645, 646, 648, 649, 650, 652, 655, 656, 657, 659, 660, 662, 664, 665, 667, 668, 669, 695, 696, 697, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 747, 753, 756, 765, 773, 777, 779, 781, 801], "figur": [40, 778], "figsiz": [40, 41], "listdir": [40, 41], "endswith": 40, "jpeg": [40, 41], "this_dir": 40, "dirnam": 40, "join": [40, 41, 58, 68, 74, 81, 429, 593, 652, 662, 747, 788], "add_subplot": 40, "xtick": 40, "ytick": 40, "set_titl": [40, 41], "color": [40, 68, 94, 746], "green": [40, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 746, 753, 754, 755], "red": 40, "io": [40, 43, 754, 762], "perceiver_io_img_classif": 40, "normalize_imag": 40, "batch_shap": [40, 55, 60, 70, 78, 83, 129, 138, 583, 590, 591, 597, 615, 616, 617, 647, 690, 729, 779, 781, 783], "img_dim": 40, "queries_dim": 40, "learn_queri": 40, "load_weight": 40, "num_input_ax": 40, "network_depth": 40, "num_lat_att_per_lay": 40, "query_shap": 40, "num_fourier_freq_band": 40, "weight_fpath": 40, "pretrained_weight": 40, "isfil": 40, "noinspect": [40, 783], "pybroadexcept": 40, "from_disk_as_pickl": 40, "except": [40, 41, 44, 51, 52, 58, 60, 65, 68, 74, 75, 79, 83, 88, 150, 322, 339, 349, 359, 364, 465, 484, 485, 499, 517, 534, 549, 555, 584, 588, 591, 593, 597, 598, 602, 635, 652, 654, 662, 691, 692, 693, 699, 719, 720, 731, 747, 755, 756, 757, 758, 762, 763, 764, 766, 769, 773, 774, 777, 778, 779, 783, 787], "larg": [40, 50, 51, 73, 74, 219, 236, 243, 269, 270, 364, 478, 586, 591, 637, 754, 755, 762, 784, 795, 801], "action": [40, 752, 762, 765, 768, 776], "fail": [40, 753, 754, 755, 757, 762, 763, 765, 768, 771, 773, 774, 775], "placehold": [40, 595, 677, 682, 687, 729, 755, 758, 769, 789], "rais": [40, 41, 47, 51, 52, 60, 62, 65, 68, 70, 74, 75, 81, 83, 85, 88, 120, 150, 239, 274, 325, 349, 352, 355, 359, 364, 385, 395, 424, 425, 430, 432, 434, 435, 436, 443, 449, 456, 465, 484, 485, 493, 517, 535, 537, 547, 549, 555, 559, 584, 586, 588, 591, 593, 597, 598, 599, 601, 602, 629, 631, 645, 654, 655, 656, 658, 660, 661, 662, 663, 665, 691, 692, 693, 699, 704, 712, 714, 719, 720, 730, 731, 733, 747, 755, 757, 759, 763, 764, 767, 773, 774, 777, 778, 781, 783, 788, 792], "pyunboundlocalvari": 40, "max_fourier_freq": 40, "random_uniform": [40, 44, 60, 83, 597, 764, 767, 776, 781, 785], "03": [40, 47, 50, 52, 53, 73, 76, 83, 135, 234, 259, 546, 547, 570, 575, 583, 586, 588, 589, 591, 592, 627, 648, 692], "817437": 40, "common_runtim": 40, "gpu_bfc_alloc": 40, "cc": 40, "orig_valu": 40, "tf_force_gpu_allow_growth": 40, "autograd": [40, 787], "declar": [40, 755], "_3r2_73j": 41, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 41, "1297564": 41, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 41, "le3bu3_v": 41, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 41, "third": [41, 91, 355, 431, 455, 591, 599, 639, 701, 760, 773, 787, 800, 801, 807], "parti": [41, 760, 787, 792, 800, 801, 807], "csv": [41, 747], "pd": 41, "mount": [41, 749, 750, 755], "mydriv": 41, "chdir": 41, "One": [41, 51, 52, 58, 60, 74, 75, 81, 83, 355, 424, 425, 426, 428, 444, 452, 501, 588, 593, 597, 658, 691, 758, 761, 763, 765, 770, 775, 776, 781, 783, 784], "kaggl": 41, "medium": 41, "articl": [41, 747, 768], "insert": [41, 51, 61, 74, 84, 355, 421, 429, 593, 595, 598, 600, 654, 674, 675, 696, 707, 762, 768], "www": 41, "your_kaggle_usernam": 41, "competit": 41, "digit": 41, "recogn": 41, "zip": [41, 781], "readabl": [41, 758, 761, 767, 768, 769, 776, 777, 783, 784], "system": [41, 591, 638, 747, 754, 755, 759, 762, 763, 787, 796, 799, 801, 804, 806, 808], "chmod": [41, 754, 762], "600": [41, 75, 78, 352, 375, 376, 508, 762], "recent": [41, 744, 754, 755, 776, 791, 792], "modifi": [41, 51, 68, 74, 91, 355, 364, 441, 444, 449, 485, 753, 754, 755, 757, 759, 760, 763, 764, 766, 768, 770, 773, 775, 776, 777, 781], "forc": [41, 760, 762, 764], "archiv": [41, 754], "inflat": [41, 763], "sample_submiss": 41, "frame": [41, 51, 74, 307, 346, 792, 801], "read_csv": 41, "later": [41, 68, 494, 588, 753, 768, 773, 776, 777, 801], "my": [41, 749, 762], "df": 41, "label_df": 41, "mod_train": 41, "drop": [41, 51, 74, 314, 346, 354, 355, 419, 452, 728, 729, 754, 787], "column": [41, 51, 56, 74, 79, 91, 129, 143, 312, 346, 353, 355, 362, 364, 400, 405, 414, 433, 435, 436, 440, 442, 471, 477, 478, 583, 591, 623, 624, 630, 636, 638, 639, 644, 728], "data_valu": 41, "test_data_valu": 41, "correct_label": 41, "train_path": 41, "str": [41, 43, 46, 47, 51, 52, 55, 56, 57, 58, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 136, 138, 140, 145, 146, 149, 151, 153, 154, 155, 156, 160, 161, 164, 165, 166, 167, 168, 169, 171, 173, 176, 177, 178, 179, 180, 181, 188, 189, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 296, 298, 299, 301, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 352, 353, 354, 355, 358, 364, 370, 371, 372, 374, 375, 376, 377, 379, 380, 384, 385, 388, 389, 390, 391, 393, 394, 395, 397, 401, 413, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 434, 450, 452, 453, 458, 459, 460, 461, 462, 463, 465, 467, 478, 479, 480, 481, 487, 489, 490, 492, 493, 495, 496, 498, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 528, 531, 532, 534, 535, 544, 546, 547, 549, 551, 553, 554, 567, 571, 578, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 676, 677, 682, 687, 690, 691, 692, 693, 695, 698, 701, 702, 703, 705, 709, 710, 711, 713, 715, 716, 718, 719, 720, 729, 731, 732, 741, 763, 764, 767, 770, 773, 774, 777, 781, 786, 795, 796], "makedir": 41, "valid_path": 41, "28x28": 41, "pic": 41, "pictur": [41, 747, 753, 781, 791], "int8": [41, 48, 60, 70, 71, 83, 131, 157, 162, 164, 165, 169, 297, 344, 583, 584, 691, 763, 776], "new_img": [41, 43], "builder": [41, 747, 750, 787, 789], "batchwis": 41, "subset": [41, 758, 762, 766, 769, 772, 774, 776, 781, 801], "goe": [41, 355, 428, 756, 759, 768, 773, 779], "seed": [41, 42, 51, 55, 60, 62, 68, 74, 78, 83, 310, 311, 346, 353, 359, 404, 413, 416, 464, 465, 466, 467, 468, 590, 597, 599, 613, 690, 691, 692, 693, 695, 701, 726, 728, 771, 775, 776], "seed_valu": [41, 68, 597, 694], "randomize_dataset": 41, "shuffl": [41, 51, 60, 68, 74, 83, 466, 597], "create_dataset": 41, "num_examples_per_class": 41, "img_arrai": 41, "class_nam": 41, "dir": [41, 749, 784], "img_path": 41, "imread": [41, 43, 784], "imread_grayscal": 41, "generate_batch": [41, 747], "dataset_s": [41, 747], "y_train": [41, 747], "ivyerror": [41, 742, 747, 767], "smaller": [41, 51, 58, 64, 74, 81, 294, 317, 330, 344, 349, 352, 364, 380, 385, 395, 478, 479, 480, 500, 588, 593, 601, 651, 659, 709, 710, 715, 717, 747, 755, 767, 781], "yield": [41, 61, 308, 309, 346, 355, 444, 598, 700, 747, 762], "x_batch_inst": 41, "form": [41, 43, 46, 47, 51, 56, 68, 70, 79, 90, 91, 119, 120, 137, 141, 142, 300, 303, 313, 319, 346, 349, 353, 355, 400, 408, 431, 440, 444, 457, 490, 550, 552, 583, 588, 590, 591, 595, 618, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 671, 682, 728, 748, 753, 770, 776, 779, 785, 786, 792, 801, 802, 807], "intialis": 41, "num_epoch": [41, 747], "inherit": [41, 758, 761, 767, 783, 787, 789], "creation": [41, 51, 68, 74, 94, 760, 763, 764, 769, 771, 774, 775, 776, 777, 781, 795, 801, 803, 807], "inform": [41, 43, 48, 51, 53, 71, 76, 161, 164, 307, 346, 490, 578, 584, 588, 589, 594, 669, 747, 752, 753, 754, 755, 757, 761, 762, 767, 770, 771, 773, 775, 776, 804], "insid": [41, 56, 79, 94, 355, 453, 591, 632, 754, 755, 758, 761, 763, 764, 770, 771, 776, 777, 795, 807], "ivynet": [41, 747], "h_w": [41, 747], "input_channel": [41, 729, 747, 781, 785], "output_channel": [41, 729, 747, 785], "gelu": [41, 42, 45, 67, 580, 725, 747], "image_widht": 41, "start_dim": [41, 51, 74, 355, 434, 747], "end_dim": [41, 51, 74, 355, 434, 747], "gpu_is_avail": [41, 585, 747], "120": [41, 64, 87, 94, 591, 634, 709, 747], "model_nam": [41, 747], "__name__": [41, 42, 44, 555, 588, 747, 767], "lower": [41, 47, 50, 51, 56, 60, 73, 74, 79, 83, 129, 141, 267, 301, 307, 312, 313, 346, 364, 481, 482, 487, 583, 586, 591, 597, 618, 624, 625, 632, 693, 727, 728, 747, 755, 763, 765, 774, 776, 781, 787, 789, 797, 798, 799, 801, 802, 807, 808], "heavi": [41, 754, 774, 775, 779, 802], "lift": [41, 775, 802], "num_correct": [41, 747], "y_pred": [41, 747], "cross_entropi": [41, 57, 80, 592, 650, 747, 761, 770, 773], "epoch_loss": [41, 747], "field": [41, 56, 62, 79, 85, 353, 355, 400, 455, 591, 599, 623, 624, 636, 637, 639, 701, 702, 703, 747, 762, 799, 807], "training_accuraci": [41, 747], "train_loss": [41, 747], "train_correct": [41, 747], "train_loop": [41, 747], "posit": [41, 43, 46, 50, 51, 52, 56, 57, 58, 73, 74, 75, 79, 80, 81, 91, 129, 131, 143, 161, 216, 217, 218, 222, 225, 236, 243, 250, 251, 257, 259, 269, 270, 277, 278, 282, 283, 287, 301, 312, 317, 320, 330, 346, 349, 353, 355, 398, 414, 420, 443, 494, 504, 568, 581, 583, 584, 586, 588, 591, 592, 593, 597, 598, 602, 618, 621, 643, 648, 654, 659, 694, 699, 719, 720, 726, 747, 753, 755, 757, 761, 774, 776, 777, 784, 795, 803], "leav": [41, 46, 51, 69, 71, 73, 74, 75, 78, 79, 81, 87, 94, 161, 164, 236, 292, 293, 355, 429, 434, 446, 447, 448, 461, 462, 463, 479, 480, 485, 504, 551, 593, 595, 609, 617, 622, 639, 653, 657, 662, 664, 665, 670, 671, 680, 681, 682, 683, 709, 710, 741, 747, 753, 761, 762, 763, 765, 766, 769, 770, 773, 774, 776, 784, 785], "xbatch": [41, 747], "ybatch": [41, 747], "to_devic": [41, 49, 72, 192, 585, 747], "entropi": [41, 57, 80, 592, 648, 649, 650, 747], "hot": [41, 47, 70, 138, 583, 747], "ybatch_encod": [41, 747], "one_hot": [41, 47, 70, 583, 747, 786], "loss_prob": [41, 747], "ret_grad_idx": [41, 571, 589, 772], "xs_grad_idx": [41, 571, 589, 772], "batch_loss": [41, 747], "set_descript": [41, 747], "set_postfix": [41, 747], "accuracy_percentag": [41, 747], "naverag": [41, 747], "6f": [41, 747], "_train_summari": [41, 747], "writer": [41, 747], "writerow": [41, 747], "157it": 41, "01": [41, 47, 51, 52, 53, 74, 75, 76, 79, 83, 135, 261, 279, 280, 300, 306, 330, 346, 352, 373, 383, 384, 504, 546, 547, 569, 570, 575, 583, 586, 588, 589, 591, 594, 597, 625, 669, 692, 693, 759, 786], "06it": 41, "475401": 41, "11it": 41, "081436": 41, "13it": 41, "0187": 41, "029279": 41, "0324": 41, "008382": 41, "07it": 41, "00456": 41, "003816": 41, "82it": 41, "00277": 41, "002179": 41, "05it": 41, "00175": 41, "001569": 41, "00147": 41, "001235": 41, "09it": 41, "00128": 41, "001005": 41, "106": 41, "10it": 41, "00112": 41, "000837": 41, "129": 41, "12it": 41, "000989": 41, "000709": 41, "145": 41, "000873": 41, "000606": 41, "168": [41, 495, 588], "08it": 41, "000774": 41, "000524": 41, "000688": 41, "000455": 41, "000613": 41, "000398": 41, "05": [41, 47, 50, 51, 53, 59, 73, 74, 76, 82, 135, 261, 306, 317, 330, 346, 349, 358, 458, 459, 460, 515, 537, 559, 569, 570, 575, 583, 586, 588, 589, 591, 596, 630, 689, 728, 732, 775, 776], "000547": 41, "000350": 41, "205": 41, "000488": 41, "000308": 41, "218": 41, "000437": 41, "000273": 41, "000391": 41, "000243": 41, "238": [41, 243, 586], "98it": 41, "000351": 41, "000216": 41, "260": 41, "plot_summari": 41, "seaborn": 41, "whitegrid": 41, "ax1": 41, "ax2": 41, "nrow": 41, "ncol": 41, "legend": [41, 753], "fontweight": 41, "bold": 41, "set_xlabel": 41, "set_ylabel": 41, "tight_layout": 41, "savefig": 41, "summary_plot": 41, "png": [41, 43, 44, 784], "close": [41, 56, 241, 259, 279, 300, 346, 586, 591, 593, 639, 654, 753, 754, 755, 763, 766, 774, 779, 801], "save_weight": [41, 731], "model_param": 41, "ivynet_weight": 41, "hdf5": [41, 68, 731, 784], "deitimageprocessor": 42, "tfdeitforimageclassif": 42, "tfdeitforimageclassificationwithteach": 42, "head": [42, 43, 590, 616, 729, 747, 752, 754, 762, 774], "distillation_classifi": 42, "cls_classifi": 42, "randomli": [42, 352, 375, 376, 377, 590, 613, 729], "henc": [42, 62, 219, 319, 349, 586, 593, 599, 654, 701, 702, 703, 704, 738, 754, 761, 762, 763, 773, 776], "reproduc": [42, 55, 78, 590, 613, 751, 757], "set_random_se": 42, "image_processor": [42, 795, 796], "facebook": 42, "distil": [42, 802], "patch16": 42, "outputs_from_original_model": 42, "predicted_class_idx": 42, "id2label": [42, 795], "architectur": [42, 747, 754, 786, 787, 799, 800, 801, 804, 805, 806], "bertforsequenceclassif": 42, "bertforpretrain": 42, "NOT": [42, 264, 586, 741, 753], "probabl": [42, 51, 55, 57, 60, 74, 78, 80, 83, 352, 359, 364, 375, 376, 377, 464, 478, 481, 485, 590, 592, 597, 613, 616, 617, 648, 690, 728, 729, 747, 776, 788, 793], "ptarmigan": 42, "rf": [42, 755], "branch": [42, 224, 236, 239, 241, 269, 281, 282, 283, 286, 586, 754, 755, 757, 762, 768, 787, 795, 801], "moduleconvert": [42, 726, 731], "mc": 42, "from_keras_modul": [42, 726], "compiled_func": 42, "return_graph": [42, 44], "compiled_output": 42, "diverg": [42, 243, 586], "_all_funct": [42, 44], "convert_to_tensor_v2_with_dispatch": 42, "transpose_v2": 42, "convolution_v2": 42, "bias_add": 42, "binary_op_wrapp": 42, "cast": [42, 48, 50, 51, 56, 64, 71, 73, 79, 148, 151, 176, 270, 364, 479, 480, 584, 586, 591, 601, 646, 709, 710, 715, 717, 770, 775, 781], "moments_v2": 42, "batch_norm": [42, 44, 51, 74, 358], "tensordot": [42, 56, 79, 591, 763], "softmax_v2": 42, "_slice_help": 42, "save_to_disk": [42, 44, 731], "12265048989200113": 42, "11038777417100028": 42, "1167045795539998": 42, "ivy_api_kei": 43, "obj": [43, 119, 120, 583, 795, 796], "tupl": [43, 46, 47, 48, 50, 51, 52, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 119, 120, 131, 133, 137, 138, 140, 143, 145, 149, 150, 151, 162, 163, 164, 168, 169, 175, 176, 182, 192, 195, 196, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 304, 309, 312, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 346, 349, 351, 352, 353, 355, 358, 359, 360, 362, 364, 370, 371, 372, 374, 375, 376, 377, 379, 384, 385, 388, 389, 390, 391, 393, 394, 395, 400, 401, 404, 408, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 427, 429, 439, 444, 450, 452, 453, 455, 458, 460, 461, 462, 463, 465, 466, 468, 469, 470, 478, 479, 480, 481, 483, 484, 485, 486, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 536, 546, 547, 548, 549, 551, 552, 553, 554, 567, 568, 569, 570, 571, 573, 575, 578, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 639, 641, 642, 643, 646, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 690, 691, 692, 693, 695, 698, 699, 701, 702, 703, 704, 705, 706, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 729, 731, 741, 758, 763, 769, 770, 773, 775, 776, 781, 784, 785, 787, 795, 796], "callabl": [43, 51, 52, 66, 74, 75, 78, 89, 114, 115, 117, 121, 122, 123, 124, 125, 162, 163, 195, 196, 209, 342, 350, 352, 355, 394, 423, 444, 490, 494, 499, 501, 505, 506, 527, 555, 568, 572, 574, 579, 582, 583, 584, 585, 588, 589, 594, 595, 667, 668, 669, 676, 677, 678, 680, 681, 682, 683, 733, 742, 761, 767, 772, 774, 781, 794, 795, 796], "combo": [43, 784], "permit": [43, 758, 769, 774, 776, 779], "usabl": [43, 747, 769, 777], "neither": [43, 219, 236, 243, 269, 586, 591, 641, 762, 774, 779], "nor": [43, 219, 236, 243, 269, 586, 762, 774, 805], "specifc": 43, "invoc": 43, "represent": [43, 51, 52, 68, 74, 75, 94, 146, 147, 161, 164, 189, 190, 216, 219, 226, 229, 231, 236, 243, 266, 269, 271, 286, 304, 327, 331, 336, 340, 346, 349, 490, 551, 581, 584, 585, 586, 588, 729, 763, 799, 800, 802, 806, 807], "opt": [43, 754, 759, 763, 773, 776, 779], "externally_link": 43, "logo": 43, "patch": [43, 287, 586, 763, 801], "cv2_imshow": 43, "envrion": 43, "canni": 43, "original_img": 43, "fn_arg": 43, "dilate_edg": 43, "edg": [43, 51, 58, 74, 81, 307, 346, 352, 355, 364, 387, 444, 481, 593, 651, 653, 666, 757, 776, 796, 801, 803, 807], "morphologi": 43, "dilat": [43, 51, 55, 74, 78, 352, 355, 388, 389, 390, 393, 394, 444, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729], "hk_model": 43, "resnet18": [43, 44], "keras_model": 43, "count": [43, 51, 58, 62, 65, 70, 74, 81, 85, 88, 131, 202, 321, 349, 355, 364, 455, 476, 481, 583, 585, 591, 593, 599, 602, 619, 645, 652, 655, 701, 702, 719, 720, 760, 761, 765, 784], "odsc": 43, "talk": [43, 806], "networkx": 44, "228": 44, "352": [44, 78, 590, 614, 767], "nvidia_ml_py3": 44, "19190": 44, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 44, "b9": 44, "b1": 44, "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 44, "cycler": 44, "fonttool": 44, "965": 44, "pillow": 44, "kiwisolv": 44, "show_graph": [44, 731], "to_ivy_modul": [44, 726, 786], "image_dim": 44, "v0": [44, 785], "urlerror": 44, "dev_str": 44, "comp_network": 44, "time_chronolog": 44, "ret0_nc": 44, "ret1_nc": 44, "ret0_c": 44, "ret1_c": 44, "pytorch_vision_v0": 44, "distribut": [44, 51, 57, 60, 74, 80, 83, 352, 353, 354, 359, 375, 376, 377, 404, 413, 416, 419, 421, 464, 465, 466, 467, 468, 592, 597, 648, 649, 650, 690, 691, 692, 693, 695, 728, 729, 730, 731, 753, 754, 762, 764, 787, 801, 804], "distributed_c10d": 44, "262": 44, "reduce_op": 44, "deprec": 44, "reduceop": 44, "004645566477999864": 44, "0044566806820000695": 44, "attribut": [44, 68, 161, 162, 163, 164, 195, 196, 204, 505, 506, 584, 585, 588, 759, 760, 761, 763, 766, 767, 770, 771, 773, 774, 779, 782, 783, 784, 785], "definit": [44, 50, 56, 73, 79, 288, 586, 591, 618, 747, 755, 758, 763, 770, 783, 796], "max_pool2d": [44, 51, 74, 352, 371], "__iadd__": 44, "adaptive_avg_pool2d": [44, 51, 74, 352], "_arraywithactiv": [45, 93], "abc": [45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 97, 503, 588, 595, 688, 727, 728, 733, 741, 783], "_abc_impl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "_abc": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "_abc_data": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "approxim": [45, 50, 51, 56, 67, 73, 74, 79, 91, 101, 217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 243, 257, 258, 259, 260, 274, 281, 282, 286, 287, 288, 328, 338, 349, 354, 419, 580, 586, 591, 632, 635, 725, 766, 774], "complex_mod": [45, 50, 67, 73, 101, 103, 106, 109, 287, 580, 586, 725, 771], "variant": [45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 569, 570, 573, 575, 576, 577, 578, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 632, 635, 636, 637, 639, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 758, 765, 766, 779], "docstr": [45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 349, 364, 370, 371, 372, 373, 375, 376, 377, 379, 383, 384, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 521, 523, 524, 526, 531, 532, 546, 547, 548, 549, 551, 553, 554, 567, 568, 569, 570, 573, 575, 576, 577, 578, 583, 584, 586, 588, 591, 593, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 752, 753, 756, 760, 768, 769, 770, 771, 774, 777], "liter": [45, 50, 51, 56, 67, 73, 74, 79, 101, 103, 106, 109, 287, 352, 353, 355, 373, 383, 387, 404, 408, 413, 416, 444, 580, 586, 591, 600, 630, 646, 707, 725, 779], "magnitud": [45, 50, 67, 73, 101, 103, 106, 109, 216, 219, 236, 243, 269, 287, 580, 586, 591, 639, 640, 725, 763], "handle_complex_input": [45, 50, 67, 73, 101, 103, 106, 109, 287, 580, 586, 725, 771], "element": [45, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 64, 67, 68, 70, 71, 73, 74, 75, 78, 79, 81, 83, 84, 85, 87, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 126, 132, 133, 141, 142, 143, 159, 161, 164, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 312, 313, 314, 315, 317, 318, 319, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 349, 352, 353, 355, 364, 365, 375, 376, 377, 380, 385, 388, 389, 390, 394, 395, 399, 400, 401, 424, 425, 426, 434, 435, 436, 438, 441, 451, 453, 455, 476, 477, 479, 480, 481, 482, 483, 484, 486, 488, 492, 495, 496, 507, 508, 524, 526, 546, 547, 549, 553, 554, 580, 583, 586, 588, 590, 591, 593, 595, 597, 598, 599, 600, 601, 602, 613, 619, 621, 623, 624, 629, 634, 636, 637, 639, 643, 651, 654, 655, 656, 657, 658, 659, 660, 661, 670, 673, 679, 690, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 766, 775, 776, 779, 781, 805], "138": [45, 101, 580], "165": [45, 101, 580, 590, 614], "hardswish": [45, 67, 580, 725], "leaky_relu": [45, 67, 580], "alpha": [45, 50, 51, 67, 73, 74, 98, 103, 219, 285, 291, 302, 344, 346, 353, 359, 401, 465, 466, 467, 580, 586, 725, 769, 774, 775], "float": [45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 60, 62, 64, 67, 70, 71, 73, 74, 75, 76, 78, 79, 80, 82, 83, 87, 91, 93, 103, 109, 118, 119, 120, 127, 129, 131, 132, 133, 134, 135, 139, 140, 144, 148, 152, 156, 161, 165, 169, 175, 176, 179, 185, 194, 203, 207, 208, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 297, 299, 300, 301, 302, 303, 305, 306, 307, 317, 318, 324, 325, 330, 332, 333, 336, 337, 338, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 364, 375, 376, 377, 394, 397, 400, 401, 403, 413, 415, 416, 417, 420, 433, 451, 458, 459, 460, 463, 464, 465, 466, 467, 468, 478, 479, 480, 481, 486, 487, 494, 495, 496, 504, 513, 537, 538, 541, 546, 547, 567, 569, 570, 573, 575, 576, 577, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 613, 616, 617, 618, 620, 623, 624, 625, 627, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 646, 648, 649, 650, 667, 668, 669, 676, 689, 692, 693, 699, 701, 702, 703, 704, 709, 710, 712, 713, 714, 715, 716, 717, 718, 725, 728, 729, 732, 733, 757, 761, 763, 766, 767, 769, 770, 772, 773, 775, 776, 777, 779, 781, 783, 785], "slope": [45, 51, 67, 74, 103, 291, 294, 344, 580, 725], "neg": [45, 50, 51, 56, 58, 60, 65, 67, 73, 74, 79, 81, 83, 88, 91, 103, 106, 109, 118, 129, 131, 143, 236, 243, 250, 251, 269, 270, 274, 278, 283, 301, 312, 314, 346, 353, 359, 398, 404, 408, 468, 580, 583, 586, 591, 593, 597, 602, 619, 621, 639, 643, 645, 646, 652, 654, 655, 659, 692, 719, 720, 725, 761, 773], "leaki": [45, 67, 103, 580, 725], "log_softmax": [45, 67, 580], "0719": [45, 67, 104], "221": [45, 104], "mish": [45, 67, 580, 725], "30340147": [45, 105, 580], "86509842": [45, 67, 105, 580], "269": [45, 107], "731": [45, 107], "881": [45, 50, 73, 107, 222, 235, 275, 586], "422": [45, 108, 580], "155": [45, 78, 108, 580, 590, 614], "softplu": [45, 67, 580, 725, 779], "beta": [45, 51, 59, 67, 74, 82, 109, 302, 305, 306, 346, 353, 354, 359, 401, 420, 466, 467, 580, 596, 689, 725, 779], "threshold": [45, 50, 51, 67, 73, 74, 109, 267, 268, 299, 318, 344, 349, 354, 355, 417, 420, 451, 580, 586, 725, 779], "union": [45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 513, 515, 516, 517, 519, 520, 523, 524, 526, 527, 531, 532, 536, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 733, 734, 758, 761, 763, 764, 765, 767, 769, 770, 773, 777, 779, 781, 786, 795, 796], "3461": [45, 67, 109, 580], "6491": [45, 67, 109, 580], "535": [45, 67, 109, 580, 767], "_to_ivi": 46, "_to_n": 46, "to_ignor": [46, 66, 89, 595, 681, 682], "args_to_ivi": 46, "include_deriv": [46, 69, 595, 671, 682], "nest": [46, 68, 69, 94, 97, 239, 522, 551, 568, 571, 586, 588, 589, 594, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 727, 730, 731, 733, 758, 760, 761, 770, 772, 777, 784, 785, 787, 789, 801], "unchang": [46, 50, 352, 355, 395, 434, 590, 613], "deriv": [46, 47, 51, 53, 69, 70, 74, 76, 128, 133, 140, 145, 301, 305, 323, 346, 349, 569, 570, 573, 574, 575, 576, 577, 583, 589, 594, 595, 669, 671, 682, 731, 733, 734, 763, 764, 783, 785], "word": [46, 118, 355, 437, 583, 597, 693, 726, 729, 761, 773, 774, 789], "args_to_n": [46, 773], "cont_inplac": 46, "decid": [46, 68, 595, 670, 671, 680, 681, 682, 747, 753, 754, 763, 779], "to_ivi": [46, 69, 595, 683, 773], "leaf": [46, 68, 75, 87, 94, 503, 595, 680, 681, 683, 710, 761, 770, 784], "travers": [46, 69, 595, 674, 682, 761, 763, 767, 781], "lowest": [46, 51, 60, 69, 74, 83, 364, 481, 595, 597, 682, 691, 770, 787, 789, 798, 802, 806], "search": [46, 51, 69, 74, 696, 697, 752, 754, 761, 765, 776, 777, 791], "_arraywithcr": [47, 93], "boolean": [47, 48, 50, 51, 52, 58, 61, 64, 68, 70, 71, 73, 74, 75, 81, 84, 87, 93, 94, 115, 117, 119, 120, 126, 132, 148, 164, 166, 168, 169, 172, 188, 198, 206, 212, 226, 227, 228, 229, 230, 231, 263, 264, 265, 266, 330, 349, 353, 355, 404, 413, 416, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 489, 492, 503, 510, 513, 514, 518, 519, 520, 521, 522, 523, 524, 533, 536, 539, 540, 542, 543, 567, 582, 583, 584, 585, 586, 588, 593, 594, 595, 598, 601, 654, 655, 656, 658, 660, 661, 663, 665, 667, 668, 680, 698, 699, 700, 712, 714, 732, 761, 763, 770, 774, 776, 779], "alwai": [47, 48, 51, 52, 58, 70, 71, 74, 81, 101, 120, 148, 219, 269, 325, 349, 353, 355, 414, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 510, 517, 580, 584, 586, 588, 593, 654, 655, 656, 658, 660, 661, 663, 665, 747, 753, 754, 755, 758, 759, 761, 763, 766, 768, 769, 770, 773, 774, 775, 776, 777, 779, 781, 787, 795], "never": [47, 51, 58, 70, 74, 81, 120, 355, 424, 425, 426, 430, 432, 434, 435, 436, 439, 443, 450, 456, 510, 588, 593, 654, 655, 656, 658, 660, 661, 663, 665, 755, 763, 773, 774, 776], "valueerror": [47, 58, 70, 74, 81, 85, 120, 352, 355, 385, 395, 424, 425, 430, 432, 434, 435, 436, 443, 449, 456, 593, 654, 655, 656, 658, 660, 661, 663, 665, 704, 742, 767], "buffer": [47, 70, 74, 81, 120, 131, 424, 425, 430, 432, 434, 435, 436, 443, 456, 583, 654, 655, 656, 658, 660, 661, 663, 665, 731, 773, 787], "nativedtyp": [47, 48, 51, 55, 56, 60, 61, 64, 70, 74, 79, 83, 84, 87, 118, 119, 120, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 170, 172, 174, 178, 188, 300, 301, 302, 303, 304, 305, 306, 316, 321, 335, 346, 349, 359, 364, 464, 465, 466, 467, 468, 478, 479, 480, 481, 484, 486, 583, 584, 590, 591, 597, 598, 600, 601, 613, 646, 691, 692, 693, 696, 697, 707, 709, 710, 715, 717, 728, 763, 764, 769, 777, 781], "datatyp": [47, 68, 70, 120, 133, 137, 153, 174, 178, 583, 584, 777, 795], "nativedevic": [47, 49, 51, 60, 70, 72, 74, 83, 118, 119, 120, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 190, 191, 192, 193, 194, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 300, 301, 312, 346, 359, 464, 465, 467, 468, 583, 585, 597, 690, 691, 692, 693, 728, 733, 734, 763, 764, 767, 769, 777], "39999998": [47, 119, 120, 583, 599, 702], "5999999": [47, 78, 119, 120, 583, 590, 613, 617], "0999999": [47, 64, 119, 120, 332, 349, 583, 713], "10000038": [47, 119, 120, 583], "90786433e": [47, 119, 120, 583], "310": [47, 119, 120, 583], "copy_arrai": [47, 70, 583], "to_ivy_arrai": [47, 70, 126, 583], "empty_lik": [47, 51, 70, 74, 353, 399, 583], "deafult": [47, 61, 84, 128, 583, 696], "uniniti": [47, 127, 128, 583, 768], "from_dlpack": [47, 70, 583], "full_lik": [47, 70, 583, 777], "fill_valu": [47, 51, 61, 70, 74, 84, 132, 133, 248, 256, 359, 468, 583, 586, 598, 699, 735, 763, 775, 777], "scalar": [47, 50, 51, 52, 56, 67, 70, 73, 74, 75, 79, 91, 103, 133, 138, 219, 240, 285, 297, 319, 320, 322, 325, 328, 330, 332, 337, 344, 349, 353, 355, 401, 424, 425, 426, 438, 554, 567, 583, 586, 588, 591, 646, 763, 772, 774, 787, 801], "fill": [47, 50, 51, 60, 61, 68, 70, 73, 74, 83, 84, 127, 132, 133, 135, 138, 139, 140, 144, 145, 270, 301, 346, 353, 355, 359, 404, 408, 413, 416, 433, 452, 465, 467, 468, 583, 586, 597, 598, 691, 699, 728, 753, 775], "000123": [47, 133, 583], "stop": [47, 51, 53, 70, 74, 76, 118, 134, 135, 209, 353, 413, 416, 533, 570, 573, 575, 576, 577, 578, 583, 585, 588, 589, 594, 595, 667, 668, 669, 681, 733, 769, 772, 779, 781, 787, 801], "num": [47, 70, 134, 135, 583, 755, 769, 781], "endpoint": [47, 70, 134, 135, 583, 728, 769], "logspac": [47, 70, 583, 781], "log": [47, 50, 51, 56, 70, 73, 74, 79, 109, 135, 259, 261, 274, 292, 293, 333, 340, 344, 349, 354, 359, 419, 464, 580, 583, 586, 637, 725, 755, 761, 762, 765, 770, 773, 774, 775, 776, 778, 779, 781, 784], "sequenc": [47, 51, 55, 56, 58, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 129, 131, 133, 135, 138, 140, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 301, 304, 310, 311, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 344, 346, 350, 352, 353, 355, 359, 364, 365, 367, 368, 375, 376, 377, 379, 380, 384, 385, 387, 394, 395, 404, 405, 407, 411, 412, 413, 416, 417, 418, 420, 421, 422, 424, 425, 426, 429, 430, 431, 437, 439, 440, 442, 443, 445, 448, 450, 452, 453, 456, 457, 458, 460, 461, 462, 463, 465, 466, 478, 479, 480, 481, 487, 488, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 527, 531, 532, 546, 547, 549, 551, 553, 554, 567, 568, 571, 572, 573, 578, 583, 586, 588, 589, 590, 591, 593, 595, 601, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 616, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 646, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 670, 677, 687, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 732, 734, 755, 762, 763, 764, 765, 767, 776, 777, 779, 781, 786, 804], "on_valu": [47, 70, 135, 138, 583], "off_valu": [47, 70, 135, 138, 583], "evenli": [47, 50, 51, 55, 58, 68, 70, 73, 78, 81, 118, 134, 135, 288, 352, 394, 583, 586, 590, 593, 603, 604, 605, 606, 608, 610, 612, 660], "hint": [47, 50, 51, 56, 73, 74, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 313, 319, 322, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 444, 478, 481, 507, 511, 513, 515, 554, 578, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 753, 758, 766, 769, 770, 773, 774, 777], "simplic": [47, 50, 51, 56, 73, 74, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 313, 319, 322, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 444, 478, 481, 507, 511, 513, 515, 554, 578, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 766, 779, 785], "nestabl": [47, 50, 51, 56, 73, 74, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 301, 312, 313, 319, 322, 346, 349, 352, 353, 355, 364, 370, 371, 372, 373, 375, 376, 377, 383, 388, 389, 390, 391, 401, 444, 478, 481, 485, 493, 501, 502, 507, 511, 513, 515, 517, 531, 549, 554, 578, 583, 584, 586, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 689, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 753, 756, 765, 766, 773, 776, 789], "464": [47, 50, 83, 135, 223, 224, 586], "15888336": [47, 135], "2154": [47, 135], "43469003": [47, 135], "meshgrid": [47, 70, 583], "spars": [47, 51, 57, 70, 74, 80, 136, 304, 346, 353, 404, 413, 416, 583, 592, 650], "xy": [47, 70, 136, 583], "dimension": [47, 50, 51, 56, 58, 61, 64, 65, 68, 70, 73, 74, 79, 81, 87, 88, 93, 118, 129, 131, 136, 143, 288, 312, 346, 352, 353, 355, 364, 379, 380, 384, 385, 395, 398, 424, 425, 426, 433, 434, 476, 487, 583, 586, 591, 593, 598, 601, 602, 619, 620, 626, 629, 632, 634, 635, 645, 646, 660, 696, 697, 699, 712, 713, 714, 715, 716, 717, 718, 719, 720, 770, 772, 776, 779, 781, 798, 801, 808], "repres": [47, 50, 51, 55, 56, 73, 74, 78, 79, 117, 136, 138, 160, 218, 219, 222, 225, 234, 236, 243, 269, 282, 286, 287, 304, 314, 315, 328, 346, 349, 352, 353, 355, 358, 359, 362, 394, 406, 444, 458, 459, 460, 464, 470, 477, 582, 583, 584, 586, 590, 591, 613, 614, 626, 634, 637, 638, 728, 732, 758, 763, 779, 783, 798, 799, 802], "coordin": [47, 50, 61, 73, 74, 84, 136, 143, 224, 286, 308, 309, 312, 328, 346, 360, 469, 583, 586, 598, 699], "conserv": [47, 136, 583], "cartesian": [47, 136, 583], "matrix": [47, 51, 52, 55, 56, 74, 75, 78, 79, 91, 93, 136, 141, 142, 143, 312, 313, 346, 353, 355, 364, 397, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 442, 478, 489, 495, 583, 588, 590, 591, 614, 618, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 647, 728, 729, 753, 763, 774, 799, 801], "ij": [47, 64, 136, 583, 601, 711], "respect": [47, 50, 51, 53, 56, 73, 74, 76, 79, 91, 136, 216, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 278, 282, 285, 286, 292, 328, 343, 344, 349, 351, 353, 355, 358, 403, 415, 423, 458, 460, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 583, 586, 589, 590, 591, 594, 603, 610, 611, 619, 636, 639, 667, 668, 669, 728, 752, 753, 754, 755, 758, 759, 761, 762, 763, 764, 765, 769, 770, 772, 773, 774, 776, 777, 778, 797, 807], "rank": [47, 51, 56, 58, 65, 74, 79, 81, 88, 91, 92, 97, 136, 310, 311, 346, 353, 355, 364, 404, 405, 413, 416, 444, 487, 583, 591, 593, 598, 602, 619, 621, 630, 632, 636, 638, 643, 645, 646, 653, 654, 662, 665, 666, 699, 719, 720], "ni": [47, 136, 583], "xi": [47, 136, 583], "scatter": [47, 52, 70, 75, 138, 531, 532, 583, 588, 760, 773, 779, 808], "dimens": [47, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 70, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 93, 94, 97, 104, 108, 138, 141, 142, 304, 311, 313, 314, 315, 321, 322, 328, 335, 342, 346, 349, 350, 352, 353, 354, 355, 358, 359, 362, 364, 366, 367, 368, 370, 371, 372, 374, 379, 380, 384, 388, 389, 390, 391, 394, 396, 397, 400, 414, 419, 424, 425, 426, 434, 445, 446, 447, 448, 450, 458, 459, 460, 466, 468, 471, 481, 483, 484, 485, 486, 487, 500, 501, 502, 504, 511, 545, 548, 568, 580, 583, 588, 590, 591, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 646, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 667, 668, 669, 695, 696, 697, 699, 701, 702, 703, 704, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 732, 765, 767, 772, 774, 775, 776, 779, 781, 784], "j": [47, 50, 51, 56, 64, 70, 73, 74, 79, 91, 117, 138, 217, 218, 219, 220, 222, 225, 234, 236, 239, 241, 249, 257, 259, 263, 269, 280, 282, 283, 286, 287, 319, 349, 352, 353, 364, 379, 380, 384, 395, 396, 400, 402, 410, 487, 492, 582, 583, 586, 588, 591, 601, 623, 643, 711, 755, 756, 760, 795, 797], "unless": [47, 51, 56, 70, 74, 138, 269, 317, 330, 335, 349, 583, 586, 591, 632, 759, 764, 773, 787, 796], "ones_lik": [47, 70, 583, 759, 786], "tril": [47, 70, 583], "whose": [47, 50, 51, 52, 56, 58, 62, 64, 70, 73, 74, 75, 79, 81, 85, 87, 93, 133, 141, 142, 218, 222, 225, 233, 234, 235, 274, 275, 281, 282, 286, 287, 288, 313, 327, 331, 332, 334, 338, 346, 353, 355, 400, 443, 455, 494, 549, 583, 586, 588, 591, 593, 599, 601, 618, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 646, 655, 659, 701, 702, 703, 710, 711, 766, 776], "innermost": [47, 51, 56, 79, 141, 142, 313, 346, 353, 400, 583, 591, 618, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643], "mxn": [47, 51, 56, 79, 141, 142, 313, 346, 583, 591, 622, 630, 632, 633, 635, 636, 640, 643], "matric": [47, 51, 56, 74, 79, 91, 93, 136, 141, 142, 313, 346, 353, 355, 400, 404, 405, 407, 411, 412, 415, 433, 583, 590, 591, 614, 618, 620, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 751, 801], "diagon": [47, 51, 56, 74, 79, 129, 141, 142, 143, 301, 312, 313, 346, 353, 355, 398, 401, 408, 433, 583, 591, 621, 643], "triangular": [47, 51, 56, 79, 141, 142, 143, 312, 313, 346, 583, 591, 618, 624, 625, 632, 636], "alloc": [47, 48, 51, 71, 141, 142, 148, 313, 346, 583, 584, 753, 755, 787], "triu": [47, 70, 583], "upper": [47, 51, 56, 60, 74, 79, 83, 129, 142, 143, 301, 313, 346, 364, 481, 583, 591, 597, 618, 624, 625, 636, 693, 727, 763, 773, 776], "zeros_lik": [47, 70, 148, 265, 569, 570, 573, 575, 577, 583, 584, 586, 589, 593, 651, 774, 779], "data_typ": [48, 51, 71, 74, 178, 584, 760, 763, 776, 777], "_arraywithdatatyp": [48, 93], "irrespect": [48, 56, 71, 79, 148, 584, 591, 639, 761, 773, 783, 808], "promot": [48, 50, 51, 56, 71, 73, 74, 79, 86, 93, 94, 148, 151, 174, 175, 176, 182, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 239, 241, 243, 257, 258, 259, 260, 261, 266, 269, 274, 278, 281, 282, 283, 284, 285, 286, 287, 290, 325, 333, 338, 349, 364, 478, 540, 562, 584, 586, 588, 591, 593, 601, 618, 619, 626, 627, 629, 630, 631, 632, 634, 635, 637, 638, 645, 646, 652, 662, 705, 713, 716, 757, 766, 767, 770, 778], "nan": [48, 50, 51, 52, 62, 64, 71, 73, 74, 75, 148, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 270, 272, 274, 275, 278, 279, 280, 281, 282, 283, 286, 287, 289, 292, 317, 326, 330, 335, 338, 344, 349, 364, 476, 477, 484, 485, 486, 513, 567, 581, 584, 586, 588, 599, 601, 602, 701, 702, 703, 704, 712, 713, 714, 716, 717, 718, 719, 720, 757, 763, 766, 772, 777, 778], "infin": [48, 50, 52, 56, 71, 73, 79, 148, 216, 217, 218, 219, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 257, 258, 259, 260, 261, 264, 269, 270, 272, 274, 278, 279, 281, 282, 283, 286, 287, 289, 338, 349, 513, 581, 584, 586, 588, 591, 601, 602, 637, 646, 712, 714, 719, 720, 757, 766], "desir": [48, 49, 51, 61, 68, 71, 72, 74, 84, 91, 148, 150, 151, 210, 307, 339, 346, 349, 355, 364, 442, 484, 486, 487, 584, 585, 591, 598, 641, 698, 728, 729, 755, 759, 762, 763, 764, 774, 781, 791, 795, 801], "broadcast_arrai": [48, 71, 584], "mix": [48, 50, 71, 73, 74, 75, 80, 83, 93, 94, 149, 162, 163, 176, 195, 196, 226, 229, 230, 231, 236, 237, 243, 247, 255, 256, 266, 269, 272, 278, 354, 364, 420, 485, 503, 505, 506, 507, 508, 517, 551, 554, 584, 585, 586, 588, 590, 591, 592, 593, 596, 601, 604, 606, 609, 612, 614, 617, 618, 641, 648, 650, 651, 689, 711, 713, 716, 753, 756, 763, 764, 765, 773, 779, 781, 789, 801, 805, 807], "broadcast_to": [48, 71, 584, 763], "can_cast": [48, 71, 584, 763, 770, 774], "accord": [48, 51, 52, 58, 64, 71, 81, 87, 151, 161, 219, 230, 236, 243, 269, 280, 307, 346, 352, 355, 395, 444, 507, 510, 531, 532, 584, 586, 588, 591, 593, 601, 645, 653, 666, 716, 718, 735, 741, 753, 754, 757, 763, 768, 770, 774, 776], "finfo": [48, 71, 584, 776], "resolut": [48, 71, 161, 584, 755], "4028235e": [48, 161, 584], "iinfo": [48, 71, 584], "integ": [48, 50, 51, 55, 56, 58, 60, 64, 65, 68, 73, 74, 75, 78, 79, 81, 83, 87, 88, 93, 94, 118, 132, 164, 165, 171, 175, 176, 180, 216, 226, 227, 228, 229, 230, 231, 232, 242, 243, 254, 266, 271, 274, 278, 279, 289, 290, 314, 315, 321, 324, 325, 346, 349, 352, 355, 359, 362, 364, 379, 384, 394, 430, 439, 444, 456, 464, 465, 466, 467, 468, 470, 471, 476, 478, 479, 480, 485, 487, 510, 526, 536, 568, 583, 584, 586, 588, 590, 591, 593, 597, 600, 601, 602, 603, 604, 605, 606, 608, 610, 612, 619, 621, 631, 645, 646, 660, 690, 691, 692, 693, 694, 695, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 755, 761, 763, 772, 775, 776, 781, 783], "119": [48, 164], "122": [48, 164, 234, 586], "1220": [48, 164], "int16": [48, 51, 60, 64, 71, 83, 151, 155, 157, 162, 164, 171, 186, 297, 344, 364, 479, 480, 584, 601, 691, 709, 710, 715, 717, 763, 774, 776, 781], "32768": [48, 71, 164, 547, 588], "32767": [48, 71, 164], "is_bool_dtyp": [48, 71, 584], "is_float_dtyp": [48, 71, 584, 777], "is_int_dtyp": [48, 71, 584, 775, 777], "is_uint_dtyp": [48, 71, 584, 775, 777], "result_typ": [48, 71, 584, 763], "arrays_and_dtyp": [48, 71, 176, 584], "_arraywithdevic": [49, 93], "move": [49, 51, 72, 74, 143, 206, 210, 214, 312, 346, 355, 443, 583, 585, 747, 755, 764, 777], "addit": [49, 51, 52, 59, 72, 74, 75, 82, 115, 117, 210, 219, 279, 364, 477, 482, 500, 501, 502, 568, 582, 585, 586, 588, 594, 596, 669, 689, 729, 753, 754, 755, 759, 763, 765, 766, 768, 770, 772, 773, 774, 776, 777, 779, 783, 784, 786, 795, 801, 802, 803, 807], "__dlpack__": [49, 72, 130, 210, 583, 585], "caveat": [49, 72, 210, 354, 419, 585], "portabl": [49, 72, 210, 585, 747, 799], "_arraywithelementwis": [50, 93], "ab": [50, 56, 66, 73, 89, 93, 94, 274, 317, 330, 349, 355, 451, 586, 591, 595, 630, 640, 646, 678, 681, 741, 751, 758, 763, 771, 774, 776], "absolut": [50, 51, 56, 66, 68, 73, 74, 79, 93, 216, 280, 317, 330, 333, 339, 349, 353, 354, 401, 414, 417, 418, 586, 591, 630, 631, 632, 637, 748, 754], "aco": [50, 73, 586], "invers": [50, 51, 56, 73, 74, 79, 217, 218, 221, 222, 223, 224, 225, 352, 362, 374, 383, 385, 470, 586, 591, 627, 631, 635, 735, 763], "cosin": [50, 73, 217, 218, 233, 234, 300, 303, 346, 352, 373, 383, 586, 729], "acosh": [50, 73, 162, 163, 584, 586, 751], "area": [50, 51, 73, 74, 78, 218, 222, 225, 352, 387, 394, 586, 773, 779, 792, 797], "hyperbol": [50, 73, 218, 222, 225, 234, 282, 286, 287, 586], "sector": [50, 73, 218, 222, 225, 586, 792], "second": [50, 51, 53, 56, 58, 62, 73, 74, 75, 76, 79, 81, 85, 93, 94, 115, 143, 174, 182, 219, 224, 226, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 269, 272, 274, 285, 307, 312, 317, 326, 328, 329, 330, 336, 340, 341, 346, 349, 353, 354, 355, 362, 364, 399, 400, 401, 403, 406, 420, 450, 455, 465, 467, 471, 478, 481, 492, 541, 563, 569, 570, 575, 582, 583, 584, 586, 588, 589, 591, 593, 594, 595, 599, 619, 622, 623, 624, 626, 629, 634, 636, 637, 639, 641, 645, 662, 663, 668, 671, 701, 702, 703, 733, 754, 757, 760, 763, 765, 768, 773, 774, 776, 778, 783, 793, 806], "multipli": [50, 51, 55, 64, 73, 74, 78, 91, 219, 285, 331, 352, 353, 387, 410, 411, 479, 480, 586, 590, 601, 613, 709, 715, 755, 758, 759, 761, 765], "angl": [50, 73, 224, 234, 282, 287, 329, 349, 586], "deg": [50, 73, 220, 586], "radian": [50, 51, 73, 74, 217, 220, 221, 223, 224, 233, 235, 275, 281, 286, 338, 349, 586, 766], "degre": [50, 51, 64, 73, 74, 87, 220, 235, 275, 355, 450, 586, 601, 716, 718, 800], "1j": [50, 73, 74, 220, 221, 233, 234, 239, 241, 253, 276, 281, 282, 286, 319, 546, 586, 588], "2j": [50, 51, 73, 74, 220, 249, 319, 352, 379, 384, 547, 586, 588], "3j": [50, 51, 73, 74, 220, 253, 276, 319, 349, 586], "35619449": [50, 220, 586], "78539816": [50, 220, 586], "135": [50, 220, 495, 586, 588], "asin": [50, 73, 586], "sine": [50, 73, 221, 222, 281, 282, 586], "927": [50, 73, 221], "asinh": [50, 73, 221, 586], "atan": [50, 73, 586], "tangent": [50, 73, 223, 224, 225, 286, 287, 586, 766], "785": [50, 73, 223, 224, 586], "atan2": [50, 73, 586], "quotient": [50, 73, 224, 236, 243, 586], "245": [50, 78, 224, 590, 613, 614], "588": [50, 224, 586], "inf": [50, 51, 52, 56, 73, 74, 75, 79, 224, 241, 250, 251, 252, 253, 257, 258, 270, 292, 333, 344, 349, 353, 364, 397, 481, 513, 567, 581, 586, 588, 591, 630, 646, 751, 763, 772], "719": [50, 224, 586], "197": [50, 224, 586], "atanh": [50, 73, 586], "549": [50, 73, 78, 225, 586, 590, 614], "bitwise_and": [50, 73, 586], "bitwise_invert": [50, 73, 586], "bitiwse_invert": [50, 227], "bitwise_left_shift": [50, 73, 586], "bitwise_or": [50, 73, 586], "bitwise_right_shift": [50, 73, 93, 586], "bitwise_xor": [50, 73, 93, 586], "ceil": [50, 51, 73, 74, 91, 118, 352, 370, 371, 372, 388, 389, 390, 393, 583, 586, 729, 773], "round": [50, 51, 73, 74, 91, 92, 219, 232, 236, 242, 243, 269, 283, 289, 290, 324, 349, 586, 749, 751, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 791, 792, 793], "416": [50, 233, 586], "540": [50, 233], "990": [50, 233], "cosh": [50, 73, 233, 586], "deg2rad": [50, 73, 586], "convers": [50, 51, 74, 235, 275, 533, 543, 588, 753, 759, 780, 782, 786, 787, 789, 793, 800, 807], "180": [50, 73, 235, 275, 586], "270": [50, 73, 235, 275, 586], "360": [50, 73, 235, 275, 586, 762], "dividend": [50, 73, 236, 243, 278, 290, 586], "divisor": [50, 51, 53, 64, 73, 74, 76, 87, 236, 243, 246, 247, 278, 290, 352, 355, 370, 371, 372, 430, 439, 456, 569, 570, 575, 586, 589, 601, 716, 718, 729, 733], "375": [50, 237, 272], "erf": [50, 73, 586], "exponenti": [50, 51, 73, 74, 238, 239, 241, 261, 274, 296, 344, 353, 409, 586], "gauss": [50, 73, 238, 586], "328": [50, 238, 286, 586], "677": [50, 238, 586], "842": [50, 238, 286, 586], "71828198": [50, 73, 239], "38905573": [50, 73, 239], "08553696": [50, 73, 239, 586], "exp2": [50, 73, 586], "expm1": [50, 73, 586, 763], "244": [50, 241, 747], "918": [50, 241], "147": [50, 241, 586], "floor": [50, 51, 73, 74, 91, 230, 243, 352, 370, 371, 372, 374, 388, 389, 390, 393, 586, 729, 773], "floor_divid": [50, 73, 586], "fmin": [50, 73, 586], "gcd": [50, 73, 586, 763], "greater": [50, 51, 55, 58, 60, 73, 74, 78, 83, 93, 94, 131, 217, 218, 221, 222, 224, 225, 228, 230, 236, 242, 243, 257, 259, 274, 278, 280, 282, 283, 287, 288, 289, 318, 349, 352, 374, 379, 384, 583, 586, 590, 591, 593, 597, 617, 619, 631, 661, 693, 755, 775], "greater_equ": [50, 73, 93, 94, 261, 586], "imaginari": [50, 73, 93, 103, 106, 109, 139, 140, 217, 218, 219, 234, 236, 237, 239, 241, 249, 269, 271, 272, 279, 282, 283, 287, 319, 349, 353, 401, 580, 583, 586, 598, 699, 765], "4j": [50, 73, 249, 547, 586, 588], "6j": [50, 51, 73, 249, 253, 319, 586], "isfinit": [50, 73, 586, 774], "out_i": [50, 73, 250, 251, 252, 253, 276, 586], "self_i": [50, 73, 250, 251, 252, 253, 276], "finit": [50, 73, 216, 217, 218, 219, 222, 224, 225, 234, 236, 237, 239, 241, 243, 250, 251, 257, 259, 269, 270, 272, 274, 278, 282, 283, 287, 586], "isinf": [50, 73, 586], "detect_posit": [50, 73, 251, 586], "detect_neg": [50, 73, 251, 586], "isnan": [50, 73, 586], "isreal": [50, 73, 586], "5j": [50, 73, 74, 253, 276, 319, 349, 586], "lcm": [50, 73, 586, 763], "less": [50, 51, 56, 60, 64, 73, 74, 79, 83, 93, 94, 217, 218, 221, 224, 225, 232, 236, 243, 257, 258, 259, 260, 274, 278, 280, 283, 337, 349, 352, 353, 364, 373, 374, 383, 413, 416, 478, 481, 586, 591, 597, 601, 630, 631, 632, 635, 646, 693, 716, 718, 729, 754, 755, 761, 763, 765, 767, 769, 774, 776, 779, 780, 781, 792, 801, 803], "less_equ": [50, 73, 93, 94, 586, 767], "log10": [50, 51, 73, 307, 346, 586], "logarithm": [50, 73, 239, 257, 258, 259, 260, 261, 323, 333, 349, 586, 591, 637], "602": [50, 258, 586], "699": [50, 258, 586], "log1p": [50, 73, 586, 772], "693": [50, 73, 108, 222, 259, 580, 586, 592, 650], "0953": [50, 73, 257, 259, 586], "log2": [50, 73, 262, 586], "logaddexp": [50, 73, 586], "logaddexp2": [50, 73, 586, 751], "169925": [50, 73, 262, 586], "logical_and": [50, 73, 586, 774, 779, 808], "logical_not": [50, 73, 586, 763], "logical_or": [50, 73, 586, 808], "conform": [50, 56, 73, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 319, 349, 364, 478, 583, 584, 586, 591, 593, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 652, 654, 655, 656, 658, 659, 661, 662, 666, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 766, 768], "standard": [50, 56, 59, 60, 64, 73, 82, 83, 87, 118, 119, 120, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 319, 349, 353, 364, 415, 478, 568, 583, 584, 586, 588, 591, 593, 596, 597, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 652, 654, 655, 656, 658, 659, 661, 662, 666, 689, 692, 696, 697, 699, 700, 701, 702, 703, 704, 705, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 728, 732, 741, 747, 756, 757, 758, 761, 763, 766, 769, 773, 776, 777, 787, 790, 796, 797, 799, 800, 803, 804, 806], "api_specif": [50, 73, 151, 239, 249, 250, 265, 584, 586, 593, 601, 666, 716, 766], "array_api": [50, 73, 151, 239, 249, 250, 265, 584, 586, 591, 593, 601, 637, 666, 716, 766], "logical_xor": [50, 73, 586], "maximum": [50, 51, 52, 53, 58, 61, 64, 68, 73, 74, 75, 76, 81, 84, 87, 94, 209, 326, 339, 349, 352, 353, 355, 364, 368, 378, 413, 416, 444, 479, 481, 495, 496, 504, 575, 585, 586, 588, 589, 591, 593, 595, 598, 601, 630, 651, 682, 696, 697, 712, 714, 755, 763, 765, 773, 784, 808], "use_wher": [50, 73, 267, 268, 586], "formula": [50, 51, 73, 236, 258, 260, 267, 268, 269, 307, 332, 346, 349, 358, 458, 460, 586], "exce": [50, 51, 74, 268, 355, 453, 586], "product": [50, 51, 55, 56, 64, 73, 74, 78, 79, 87, 91, 269, 353, 364, 399, 403, 405, 406, 407, 410, 411, 412, 479, 480, 486, 586, 590, 591, 601, 616, 617, 619, 626, 629, 634, 641, 645, 709, 710, 711, 715, 716, 753, 781, 801, 803], "nan_to_num": [50, 73, 586], "posinf": [50, 73, 270, 586], "neginf": [50, 73, 270, 586], "5e": [50, 53, 73, 74, 270, 336, 575, 586, 589], "not_equ": [50, 73, 93, 94, 586], "pow": [50, 73, 93, 94, 586, 757], "expon": [50, 51, 52, 74, 75, 274, 325, 327, 331, 349, 547, 586, 588, 591, 631], "rad2deg": [50, 73, 586], "286": [50, 74, 275], "458": [50, 275], "573": [50, 275, 586], "reciproc": [50, 73, 586], "333": [50, 73, 236, 277, 496, 586, 588], "remaind": [50, 51, 58, 68, 73, 74, 81, 245, 586, 593, 660, 757, 773], "modulu": [50, 73, 278, 586, 773], "sign": [50, 51, 56, 62, 64, 73, 74, 79, 91, 118, 216, 217, 218, 219, 222, 224, 225, 230, 234, 236, 239, 241, 243, 269, 271, 278, 282, 283, 287, 320, 349, 353, 355, 364, 414, 451, 479, 480, 583, 586, 591, 599, 601, 637, 701, 702, 703, 704, 709, 710, 715, 717, 754, 763, 781, 786, 792], "x2_i": [50, 73, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 586, 757], "decim": [50, 73, 279, 586, 778], "0001": [50, 51, 74, 279, 280, 353, 413, 416, 733], "678": [50, 279, 280], "np_variant": [50, 73, 280, 586], "841": [50, 67, 73, 101, 281, 580, 586], "909": [50, 73, 75, 281, 586], "141": [50, 73, 148, 281, 584, 586], "sinh": [50, 73, 281, 586], "232": [50, 73, 282, 586], "sqrt": [50, 51, 73, 74, 352, 374, 379, 380, 384, 385, 586, 728, 747], "squar": [50, 51, 56, 73, 74, 79, 283, 353, 354, 364, 400, 409, 417, 478, 571, 572, 574, 579, 586, 589, 591, 595, 618, 620, 621, 623, 624, 625, 627, 631, 637, 638, 639, 644, 676, 747], "tanh": [50, 73, 286, 586, 725, 781], "762": [50, 73, 287, 586], "964": [50, 73, 287, 586], "trapz": [50, 73, 586], "dx": [50, 73, 288, 586], "apart": [50, 73, 288, 586], "trapezoid": [50, 73, 288, 586], "trunc": [50, 73, 586], "025": [50, 289, 354, 420, 586, 594, 669], "trunc_divid": [50, 73, 586], "_arraywithactivationsexperiment": [51, 93], "elu": [51, 74, 344, 725], "scaler": [51, 74, 291, 344, 776], "ep": [51, 56, 59, 74, 79, 82, 161, 292, 344, 353, 358, 401, 458, 459, 460, 584, 591, 596, 632, 635, 689, 725, 732], "outpu": [51, 74, 292, 344], "19722438": [51, 74, 292, 344], "38629448": [51, 74, 292, 344], "38629436": [51, 74, 292, 344], "logsigmoid": [51, 74, 344, 725], "31326175": [51, 67, 293, 344], "126928": [51, 74, 293], "01814993": [51, 293], "00004578": [51, 293], "57888985": [51, 293], "31326169": [51, 74, 293, 344], "69314718": [51, 56, 67, 74, 79, 293, 333, 344, 349, 591, 637], "01104775": [51, 293], "prelu": [51, 74, 344, 725], "unidirect": [51, 294, 344], "relu6": [51, 74, 344, 725], "rectifi": [51, 67, 74, 103, 105, 106, 295, 298, 299, 344, 580], "selu": [51, 74, 344, 725], "11133075": [51, 296, 344], "05070102": [51, 74, 296, 344], "10140204": [51, 296, 344], "15210295": [51, 296, 344], "20280409": [51, 296, 344], "25350523": [51, 296, 344], "30420589": [51, 296, 344], "35490704": [51, 296, 344], "silu": [51, 74, 344, 725], "26894143": [51, 298], "73105854": [51, 74, 298], "thresholded_relu": [51, 74, 344], "_arraywithconversionsexperiment": [51, 93], "_arraywithcreationexperiment": [51, 93], "blackman_window": [51, 74, 346], "period": [51, 74, 282, 286, 300, 302, 303, 305, 306, 346, 352, 386, 586, 755], "window": [51, 55, 74, 78, 300, 302, 303, 305, 306, 316, 346, 352, 370, 371, 372, 374, 388, 389, 390, 391, 393, 394, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729, 749, 755, 806], "symmetr": [51, 56, 74, 79, 91, 300, 302, 303, 305, 306, 346, 353, 355, 400, 444, 591, 618, 623, 624, 625, 647, 761], "38777878e": [51, 74, 300, 346], "40000000e": [51, 300, 346], "00000000e": [51, 74, 75, 300, 346, 352, 373, 379, 383, 384, 751], "30000000e": [51, 74, 300, 346], "eye_lik": [51, 74, 346], "elsewher": [51, 74, 129, 301, 346, 583, 598, 700, 754], "mel_weight_matrix": [51, 74, 346], "num_mel_bin": [51, 74, 307, 346], "dft_length": [51, 74, 307, 346, 352, 374], "sample_r": [51, 74, 307, 346], "lower_edge_hertz": [51, 74, 307, 346], "upper_edge_hertz": [51, 74, 307, 346], "3000": [51, 74, 307, 346], "melweightmatrix": [51, 74, 307, 346], "linearli": [51, 52, 75, 307, 346, 504, 588, 591, 638], "frequenc": [51, 52, 74, 75, 307, 346, 364, 478, 504, 588, 755], "spectra": [51, 307, 346], "dft": [51, 74, 307, 346, 352], "stft": [51, 307, 346], "mel": [51, 74, 307, 346], "term": [51, 300, 307, 346, 354, 419, 590, 615, 729, 747, 755, 761, 781, 789, 791, 801], "hertz": [51, 307, 346], "2595": [51, 307, 346], "700": [51, 75, 307, 346, 508], "band": [51, 52, 74, 75, 307, 346, 504, 588], "spectrum": [51, 74, 307, 346], "n_fft": [51, 74, 307, 346, 352, 374], "signal": [51, 74, 307, 346, 352, 366, 367, 368, 373, 374, 383, 729, 800, 801], "bound": [51, 74, 307, 346, 355, 428, 449, 452, 763, 767, 774, 776, 781, 807], "8000": [51, 74, 302, 307, 346], "75694758": [51, 307, 346], "trilu": [51, 74, 346], "retain": [51, 143, 312, 313, 346, 571, 583, 589, 772, 789], "unsorted_segment_min": [51, 74, 346], "segment_id": [51, 74, 314, 315, 346, 735], "num_seg": [51, 74, 314, 315, 346, 735], "th": [51, 74, 314, 315, 322, 346, 349, 353, 364, 398, 404, 487], "identifi": [51, 74, 314, 315, 346, 757, 762, 776, 779], "distinct": [51, 62, 74, 314, 315, 346, 599, 701, 702, 703, 704, 754, 761, 766, 772, 773, 774, 780, 792, 801], "unsorted_segment_sum": [51, 74, 346], "_arraywithdata_typeexperiment": [51, 93], "_arraywithdeviceexperiment": [51, 93], "_arraywithelementwiseexperiment": [51, 93], "equal_nan": [51, 74, 317, 330, 349], "rel": [51, 53, 56, 58, 63, 70, 74, 76, 79, 81, 86, 93, 133, 317, 330, 349, 354, 364, 419, 478, 570, 573, 575, 576, 577, 589, 591, 593, 600, 622, 632, 635, 643, 655, 659, 705, 708, 755, 762, 775, 779, 801, 803], "toler": [51, 56, 74, 79, 317, 330, 349, 353, 401, 413, 416, 591, 632, 635, 757, 775, 801], "1e10": [51, 317, 330, 349], "00001e10": [51, 317, 330, 349], "00001e": [51, 317, 349], "binar": [51, 74, 349], "map": [51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 349, 352, 375, 376, 377, 417, 418, 420, 421, 424, 425, 426, 429, 450, 452, 453, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 568, 573, 578, 588, 595, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 677, 678, 682, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 758, 761, 763, 769, 770, 774, 776, 777, 784, 787, 789, 796, 802], "outcom": [51, 74, 318, 328, 349], "conj": [51, 74, 234, 239, 241, 282, 283, 287, 349, 586], "conjug": [51, 56, 74, 79, 319, 349, 352, 353, 359, 374, 396, 401, 410, 412, 466, 591, 629, 633, 641], "copysign": [51, 74, 349], "unsign": [51, 64, 74, 320, 349, 364, 479, 480, 601, 709, 710, 715, 717, 763, 781], "count_nonzero": [51, 74, 349], "keepdim": [51, 56, 58, 61, 64, 65, 68, 74, 79, 81, 84, 87, 88, 321, 335, 342, 349, 350, 364, 483, 484, 485, 486, 487, 591, 593, 598, 601, 602, 630, 646, 665, 696, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 767, 774, 781], "diff": [51, 68, 74, 349, 765, 773], "prepend": [51, 74, 322, 349, 591, 593, 629, 654, 754], "differenc": [51, 74, 322, 349], "prior": [51, 74, 322, 349, 359, 466, 591, 641, 767, 777], "expand": [51, 52, 58, 74, 75, 322, 349, 355, 504, 588, 593, 654, 761], "discret": [51, 74, 322, 349, 352, 373, 374, 379, 380, 383, 384, 385, 395, 592, 649, 729], "digamma": [51, 74, 349], "7549271": [51, 323, 349], "92278427": [51, 74, 323, 349], "9988394": [51, 323, 349], "toward": [51, 58, 74, 81, 243, 290, 324, 336, 349, 355, 364, 450, 481, 586, 593, 659, 747, 749, 751, 754, 781, 797, 801], "float_pow": [51, 74, 349], "fmax": [51, 74, 349], "fmod": [51, 74, 586], "divis": [51, 52, 53, 74, 75, 76, 230, 236, 243, 245, 278, 280, 290, 355, 430, 538, 546, 560, 569, 570, 575, 586, 588, 589, 590, 603, 610, 611, 733, 770, 778], "frexp": [51, 74, 349], "edge_ord": [51, 74, 328, 349], "estim": [51, 74, 328, 349, 364, 478], "boundari": [51, 60, 74, 83, 328, 349, 352, 387, 597, 693, 801], "partial": [51, 68, 74, 162, 163, 195, 196, 328, 349, 353, 355, 364, 413, 445, 446, 447, 448, 485, 505, 506, 574, 584, 585, 588, 589, 591, 628, 730, 731, 755, 760, 779], "diment": [51, 328, 349], "33333333": [51, 74, 277, 328, 349, 586], "hypot": [51, 74, 349], "hypotenus": [51, 329, 349], "4031": [51, 329, 349], "8102": [51, 329, 349], "isclos": [51, 74, 349, 757], "ldexp": [51, 74, 349], "lerp": [51, 74, 349], "lgamma": [51, 349], "45373654": [51, 333, 349], "6477685": [51, 333, 349], "modf": [51, 74, 349], "fraction": [51, 74, 334, 349, 364, 487, 590, 613], "nansum": [51, 74, 349], "accumul": [51, 74, 335, 349], "reduc": [51, 52, 56, 61, 64, 65, 68, 74, 75, 79, 84, 87, 88, 209, 335, 349, 350, 364, 483, 484, 485, 486, 487, 501, 585, 588, 591, 598, 601, 602, 636, 696, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 741, 762, 767, 774, 779, 781, 783, 795, 799, 803, 804, 805], "nextaft": [51, 74, 349], "0e": [51, 53, 74, 76, 336, 349, 575, 589], "4013e": [51, 74, 336, 349], "4028e": [51, 74, 336, 349], "signbit": [51, 74, 349], "637": [51, 74, 338, 349], "0909": [51, 74, 338, 349], "sparsify_tensor": [51, 74, 349], "sparsifi": [51, 74, 339, 349], "arang": [51, 56, 64, 74, 79, 134, 339, 349, 352, 353, 370, 371, 372, 379, 384, 388, 389, 390, 391, 393, 397, 411, 436, 527, 568, 583, 588, 591, 594, 601, 630, 646, 669, 711, 747, 763, 773, 808], "xlogi": [51, 74, 349], "0986": [51, 74, 340, 349], "3863": [51, 74, 340, 349], "0000": [51, 74, 302, 303, 306, 340, 346, 349, 353, 355, 409, 438], "zeta": [51, 74, 349], "0369": [51, 74, 341, 349], "_arraywithgeneralexperiment": [51, 93], "init_valu": [51, 74, 78, 342, 350, 352, 394], "reduct": [51, 52, 57, 65, 68, 74, 75, 78, 80, 88, 342, 350, 352, 354, 394, 417, 418, 419, 420, 421, 501, 531, 532, 588, 592, 602, 648, 649, 650, 719, 720, 730, 763, 770, 773, 776, 783], "_arraywithgradientsexperiment": [51, 93], "_arraywithimageexperiment": [51, 93], "_arraywithlayersexperiment": [51, 93], "adaptive_avg_pool1d": [51, 74, 352], "output_s": [51, 74, 352, 366, 367, 368, 729, 747, 796], "1d": [51, 74, 91, 352, 353, 355, 364, 366, 373, 375, 377, 383, 410, 424, 428, 449, 452, 478, 729], "adapt": [51, 74, 76, 352, 366, 367, 368, 576, 589, 729, 733, 792], "pool": [51, 74, 78, 352, 366, 367, 368, 370, 371, 372, 388, 389, 390, 391, 394, 729, 754], "plane": [51, 74, 236, 239, 241, 269, 281, 282, 283, 286, 352, 355, 366, 367, 368, 450, 586], "l_in": [51, 74, 352, 366], "spatial": [51, 55, 74, 78, 352, 358, 366, 367, 368, 387, 394, 458, 459, 460, 590, 603, 604, 605, 606, 608, 610, 612, 732], "Will": [51, 74, 352, 366, 367, 368, 727, 738, 787], "l_out": [51, 74, 352, 366], "h_in": [51, 74, 352, 367, 368], "w_in": [51, 74, 352, 367, 368], "s_0": [51, 74, 352, 367, 368], "s_1": [51, 74, 352, 367, 368], "adaptive_max_pool2d": [51, 74, 352], "avg_pool1d": [51, 74, 352], "kernel": [51, 55, 74, 78, 352, 370, 371, 372, 388, 389, 390, 391, 590, 615, 781, 787, 801, 804, 805], "stride": [51, 55, 74, 75, 78, 93, 352, 355, 370, 371, 372, 388, 389, 390, 391, 393, 394, 422, 588, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 729, 773, 777, 801], "nwc": [51, 55, 74, 78, 352, 370, 375, 388, 391, 590, 603, 604, 605, 610, 611, 729], "count_include_pad": [51, 74, 352, 370, 371, 372, 729], "ceil_mod": [51, 74, 352, 370, 371, 372, 388, 389, 390, 393, 729], "d_in": [51, 55, 74, 78, 352, 370, 371, 372, 374, 379, 380, 384, 388, 389, 390, 391, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], "algorithm": [51, 55, 67, 74, 78, 101, 352, 353, 370, 371, 372, 387, 388, 389, 390, 391, 413, 414, 416, 591, 604, 606, 607, 608, 609, 612, 637, 725, 729, 763, 774, 779, 787, 801, 803, 805], "ncw": [51, 55, 74, 78, 352, 370, 375, 376, 388, 391, 590, 603, 604, 605, 610, 611, 729], "avg_pool2d": [51, 74, 352], "nhwc": [51, 55, 74, 78, 352, 371, 376, 389, 393, 590, 603, 606, 607, 610, 611, 612, 729], "divisor_overrid": [51, 74, 352, 371, 372, 729], "avg_pool3d": [51, 74, 352], "ndhwc": [51, 55, 74, 78, 352, 372, 377, 390, 590, 603, 608, 609, 610, 611, 729], "volum": [51, 55, 74, 78, 352, 372, 374, 379, 380, 384, 390, 590, 608, 609, 749], "ncdhw": [51, 55, 74, 78, 352, 372, 377, 390, 590, 603, 608, 609, 610, 611, 729], "dct": [51, 74, 352, 729, 784], "lenght": [51, 74, 302, 305, 306, 316, 352, 373, 729], "truncat": [51, 74, 352, 353, 373, 379, 383, 384, 385, 395, 415, 534, 588, 727, 729, 767, 784], "larger": [51, 58, 64, 74, 81, 87, 161, 352, 373, 380, 383, 385, 395, 584, 593, 601, 651, 659, 716, 718, 729, 776, 779, 808], "ortho": [51, 74, 352, 373, 374, 379, 380, 383, 384, 385, 395, 729], "onesid": [51, 74, 352, 374], "fft": [51, 74, 352, 374, 380, 395, 729, 753, 801], "symmetri": [51, 352, 374], "rfft": [51, 74, 352, 374, 395], "invok": [51, 352, 374, 747, 768, 795, 796], "batch_idx": [51, 352, 374], "signal_dim1": [51, 352, 374], "signal_dim2": [51, 352, 374], "signal_dimn": [51, 352, 374], "signal_dim": [51, 352, 374], "embed": [51, 74, 352, 590, 616, 729, 801], "max_norm": [51, 52, 74, 75, 352, 378, 495, 496, 588, 729], "ifft": [51, 74, 352, 379, 385], "pi": [51, 74, 282, 286, 352, 379, 384, 581, 586], "44509285e": [51, 74, 352, 379], "14423775e": [51, 74, 352, 379], "17j": [51, 74, 352, 379, 384], "11483250e": [51, 74, 352, 379], "16j": [51, 74, 352, 379, 384], "33486982e": [51, 74, 352, 379], "22464680e": [51, 74, 352, 379], "95799250e": [51, 74, 352, 379], "66951701e": [51, 74, 352, 379], "fft2": [51, 352], "vari": [51, 62, 91, 287, 380, 500, 586, 588, 599, 702, 703, 704, 761, 765, 774, 776, 783], "20477401j": [51, 352, 380], "0614962j": [51, 352, 380], "idct": [51, 74, 352], "49862671": [51, 74, 352, 373, 383], "37691498": [51, 74, 352, 373, 383], "00390816": [51, 74, 352, 373, 383], "58938599": [51, 74, 352, 373, 383], "92713165": [51, 74, 352, 373, 383], "078475": [51, 74, 352, 373, 383], "19664812": [51, 74, 352, 373, 383], "95411837": [51, 74, 352, 373, 383], "30636606e": [51, 74, 352, 384], "43029718e": [51, 74, 352, 384], "18j": [51, 74, 352, 379, 384], "53080850e": [51, 74, 352, 384], "58689626e": [51, 74, 352, 384], "24474906e": [51, 74, 352, 384], "91858728e": [51, 74, 352, 384], "01435406e": [51, 74, 352, 384], "ifftn": [51, 74, 352], "24730653": [51, 74, 352, 385], "90832391j": [51, 74, 352, 385], "49495562": [51, 74, 352, 385], "9039565j": [51, 74, 352, 385], "98193269": [51, 74, 352, 385], "49560517j": [51, 74, 352, 385], "93280757": [51, 74, 352, 385], "48075343j": [51, 74, 352, 385], "28526384": [51, 74, 352, 385], "3351205j": [51, 74, 352, 385], "2343787": [51, 74, 352, 385], "83528011j": [51, 74, 352, 385], "18791352": [51, 74, 352, 385], "30690572j": [51, 74, 352, 385], "82115787": [51, 74, 352, 385], "96195183j": [51, 74, 352, 385], "44719226": [51, 74, 352, 385], "72654048j": [51, 74, 352, 385], "51476765": [51, 352, 385], "66160417j": [51, 352, 385], "04319742": [51, 352, 385], "05411636j": [51, 352, 385], "015561": [51, 352, 385], "04216015j": [51, 352, 385], "06310689": [51, 352, 385], "05347854j": [51, 352, 385], "13392983": [51, 352, 385], "16052352j": [51, 352, 385], "08371392": [51, 352, 385], "17252843j": [51, 352, 385], "0031429": [51, 352, 385], "05421245j": [51, 352, 385], "10446617": [51, 352, 385], "17747098j": [51, 352, 385], "05344324": [51, 352, 385], "07972424j": [51, 352, 385], "8344667": [51, 74, 352, 385], "98222595j": [51, 74, 352, 385], "48472244": [51, 74, 352, 385], "30233797j": [51, 74, 352, 385], "recompute_scale_factor": [51, 74, 352, 387, 779], "antialia": [51, 74, 352, 387, 779], "height": [51, 52, 55, 74, 75, 78, 352, 387, 500, 588, 590, 606, 607, 608, 609, 612, 727, 784], "width": [51, 52, 55, 74, 75, 78, 352, 353, 355, 364, 387, 401, 444, 481, 500, 588, 590, 604, 605, 606, 607, 608, 609, 612, 616], "trilinear": [51, 74, 352, 387, 779], "nearest_exact": [51, 74, 352, 387, 779], "tf_area": [51, 74, 352, 387, 779], "mitchellcub": [51, 74, 352, 387, 779], "lanczos3": [51, 74, 352, 387, 779], "lanczos5": [51, 74, 352, 387, 779], "gaussian": [51, 74, 101, 352, 387, 580, 779], "overwrit": [51, 68, 74, 209, 352, 387, 585, 755, 773, 774, 781], "align": [51, 68, 74, 352, 353, 387, 398, 754, 762, 774, 781, 783, 789, 807], "thu": [51, 74, 230, 243, 274, 278, 286, 287, 352, 353, 387, 400, 586, 591, 623, 624, 749, 753, 762, 767, 771, 774, 777], "preserv": [51, 52, 53, 68, 74, 75, 76, 94, 352, 353, 355, 364, 387, 413, 424, 425, 426, 435, 436, 485, 517, 578, 588, 589, 593, 655, 776, 786, 787, 796], "antialias": [51, 74, 352, 387], "downsampl": [51, 74, 352, 387], "max_pool1d": [51, 74, 352, 391], "dilaton": [51, 74, 352, 388, 389, 390], "max_pool3d": [51, 74, 352], "reduce_window": [51, 78, 352], "window_dimens": [51, 78, 352, 394], "window_strid": [51, 78, 352, 394], "base_dil": [51, 78, 352, 394], "window_dil": [51, 78, 352, 394], "rfftn": [51, 74, 352], "linear_algebra": [51, 56, 74, 79, 591, 777], "_arraywithlinearalgebraexperiment": [51, 93], "adjoint": [51, 56, 74, 79, 353, 591, 627, 638, 639], "cond": [51, 74, 115, 353, 582, 787], "933034373659268": [51, 397], "diagflat": [51, 74, 353, 406, 409], "offset": [51, 56, 59, 70, 74, 79, 82, 131, 353, 358, 398, 458, 459, 460, 583, 591, 596, 622, 643, 689], "padding_valu": [51, 74, 353, 398], "right_left": [51, 74, 353, 398], "num_row": [51, 74, 353, 398], "num_col": [51, 74, 353, 398], "dot": [51, 55, 74, 78, 91, 353, 411, 590, 591, 616, 617, 645, 747, 754, 762], "eig": [51, 56, 74, 353, 591, 624, 625], "37228132": [51, 74, 353, 400, 402, 623], "82456484": [51, 400, 623], "41597356": [51, 400, 623], "56576746": [51, 400, 623], "90937671": [51, 400, 623], "eigh_tridiagon": [51, 74, 353], "eigvals_onli": [51, 74, 353, 401], "select_rang": [51, 74, 353, 401], "tol": [51, 74, 92, 353, 401, 413, 416], "eigenvalu": [51, 56, 74, 79, 91, 353, 400, 401, 402, 591, 623, 624, 625, 632], "eigenvector": [51, 74, 353, 400, 401, 591, 623, 624], "interv": [51, 60, 65, 74, 83, 88, 118, 134, 135, 141, 353, 364, 401, 481, 583, 591, 593, 597, 602, 619, 645, 651, 654, 662, 691, 693, 719, 720], "togeth": [51, 68, 74, 317, 330, 349, 353, 401, 734, 747, 758, 761, 763, 773, 774, 776, 777, 779, 785, 786, 787, 792, 799, 801, 802, 807], "cluster": [51, 74, 353, 401, 787, 801], "converg": [51, 74, 353, 401, 793], "li": [51, 74, 353, 364, 401, 487, 791], "_2": [51, 74, 353, 401], "precis": [51, 56, 74, 79, 161, 249, 269, 276, 283, 325, 349, 353, 364, 401, 478, 540, 562, 584, 586, 588, 591, 624, 625, 630, 637, 639, 640, 646, 762, 774, 778, 779, 805], "eig_val": [51, 74, 353, 401], "decreas": [51, 74, 353, 401], "eig_vector": [51, 74, 353, 401], "38196": [51, 401], "61803": [51, 401], "eigval": [51, 74, 353], "general_inner_product": [51, 79, 353], "n_mode": [51, 79, 353, 403], "tradit": [51, 79, 353, 403], "inner": [51, 56, 70, 79, 97, 138, 353, 400, 403, 583, 591, 594, 623, 624, 629, 667, 668, 669, 753, 773], "initialize_tuck": [51, 74, 353], "svd": [51, 56, 74, 79, 353, 404, 408, 413, 414, 415, 416, 591, 640], "truncated_svd": [51, 74, 353, 404, 413, 416], "non_neg": [51, 74, 311, 346, 353, 404], "mask": [51, 55, 74, 78, 91, 353, 355, 404, 405, 413, 416, 451, 510, 588, 590, 613, 616, 617, 779], "svd_mask_repeat": [51, 74, 353, 404, 413, 416], "compon": [51, 74, 139, 140, 217, 218, 219, 222, 225, 234, 236, 237, 239, 241, 269, 271, 272, 279, 282, 283, 286, 287, 310, 311, 319, 346, 349, 353, 404, 413, 583, 586, 598, 699, 747, 781, 792, 797, 802, 804], "tuckertensor": [51, 74, 92, 311, 346, 353, 404, 413, 416], "scheme": [51, 74, 353, 404, 413, 757, 785, 801], "tucker": [51, 74, 311, 346, 353, 404, 413], "decomposit": [51, 56, 74, 79, 91, 310, 311, 346, 353, 404, 413, 416, 591, 618, 624, 628, 636, 639, 753, 808], "miss": [51, 74, 353, 355, 404, 413, 416, 451, 733, 753, 754, 758, 761, 762, 765, 774, 776, 779], "everywher": [51, 74, 353, 404, 413, 416], "imput": [51, 74, 353, 404, 413, 416], "kron": [51, 74, 353, 409, 808], "make_svd_non_neg": [51, 74, 353, 415], "nntype": [51, 74, 353, 408], "nndsvd": [51, 74, 353, 408], "singular": [51, 56, 74, 79, 353, 404, 408, 414, 415, 591, 630, 632, 635, 639, 640, 763], "nndsvda": [51, 74, 353, 408], "boutsidi": [51, 74, 353, 408], "gallopoulo": [51, 74, 353, 408], "pattern": [51, 52, 74, 75, 353, 408, 500, 501, 502, 588, 763, 766, 793], "recognit": [51, 74, 353, 408], "1362": [51, 74, 353, 408], "2008": [51, 74, 353, 408, 801], "matrix_exp": [51, 74, 353], "7183": [51, 74, 353, 409], "3891": [51, 74, 353, 409], "mode_dot": [51, 74, 90, 91, 92, 353], "matrix_or_vector": [51, 74, 91, 92, 353, 410], "i_1": [51, 74, 91, 353, 410], "i_k": [51, 74, 91, 353, 410], "i_n": [51, 74, 91, 353, 410], "i_": [51, 74, 91, 353, 364, 410, 481], "multi_dot": [51, 74, 353], "148": [51, 73, 74, 239, 353, 411], "multi_mode_dot": [51, 74, 353], "mat_or_vec_list": [51, 74, 353, 412], "times_0": [51, 353, 412], "vec": [51, 353, 412], "times_1": [51, 353, 412], "cdot": [51, 269, 353, 412, 586], "times_n": [51, 353, 412], "noqa": [51, 91, 216, 283, 352, 353, 388, 412, 586, 592, 648, 729, 738, 775], "partial_tuck": [51, 74, 353], "n_iter_max": [51, 74, 353, 413, 416], "verbos": [51, 74, 353, 413, 416, 776, 781], "return_error": [51, 74, 353, 413, 416], "variat": [51, 74, 353, 413, 416, 765, 774, 776], "reconstruct": [51, 56, 62, 74, 85, 353, 355, 413, 416, 455, 591, 599, 639, 701, 703, 775], "return_erro": [51, 353, 413, 416], "svd_flip": [51, 74, 353], "u_based_decis": [51, 74, 353, 414], "basi": [51, 74, 353, 414, 755, 757, 784], "flip": [51, 58, 74, 81, 91, 227, 353, 355, 414, 435, 436, 586, 593, 773, 783, 784, 786], "decis": [51, 74, 353, 414, 757, 763, 779, 781, 783, 801], "u_adjust": [51, 74, 353, 414], "v_adjust": [51, 74, 353, 414], "compute_uv": [51, 56, 74, 79, 353, 415, 591, 639], "n_eigenvec": [51, 74, 353, 415], "returnedv": [51, 415], "vh": [51, 56, 74, 79, 353, 415, 591, 639], "eigen": [51, 74, 353, 415], "namedtupl": [51, 56, 62, 74, 79, 85, 353, 355, 400, 415, 455, 591, 599, 623, 624, 636, 637, 639, 701, 702, 703], "fixed_factor": [51, 74, 353, 416], "tl": [51, 74, 353, 416], "kolda": [51, 74, 353, 416], "bader": [51, 74, 353, 416], "siam": [51, 74, 353, 416], "review": [51, 74, 353, 416, 753, 755, 762, 765, 774, 777], "vol": [51, 74, 353, 416], "pp": [51, 74, 353, 416], "455": [51, 74, 353, 416], "500": [51, 74, 75, 78, 352, 353, 375, 376, 416, 508, 588], "2009": [51, 74, 353, 416], "_arraywithlossesexperiment": [51, 93], "huber_loss": [51, 74, 354], "delta": [51, 53, 74, 76, 354, 417, 569, 589], "truth": [51, 237, 247, 248, 255, 256, 272, 354, 417, 586, 751, 774, 776], "transit": [51, 74, 354, 417, 801], "huber": [51, 74, 354, 417], "l1_loss": [51, 74, 354], "l1": [51, 56, 74, 79, 354, 358, 417, 418, 420, 461, 591, 646, 761, 784], "targetict": [51, 74, 354, 418, 420, 421], "20000000000000004": [51, 418], "smooth_l1_loss": [51, 74, 354], "smooth": [51, 57, 74, 80, 354, 417, 420, 592, 648, 649, 650, 772], "8125": [51, 420], "soft_margin_loss": [51, 74, 354], "soft": [51, 74, 354, 355, 421, 451, 764], "margin": [51, 74, 354, 421, 774], "35667497": [51, 421, 592, 649], "22314353": [51, 421], "60943791": [51, 421], "manipul": [51, 74, 773, 774, 777, 779, 781, 786, 791, 801], "_arraywithmanipulationexperiment": [51, 93], "as_strid": [51, 74, 355], "nativeshap": [51, 55, 58, 60, 74, 81, 83, 119, 120, 127, 132, 139, 144, 355, 359, 422, 432, 437, 445, 448, 464, 465, 466, 467, 468, 532, 545, 550, 552, 583, 588, 590, 593, 597, 603, 605, 607, 609, 611, 658, 691, 692, 693, 769, 771], "byte": [51, 52, 70, 74, 75, 93, 131, 355, 422, 526, 583, 588, 806, 807], "associative_scan": [51, 74, 355], "revers": [51, 52, 56, 64, 74, 79, 87, 93, 94, 353, 355, 364, 407, 423, 435, 436, 479, 480, 499, 588, 591, 593, 601, 644, 655, 709, 710, 753, 761, 762, 763, 765, 766, 773, 774, 779, 786, 787], "scan": [51, 74, 355, 423, 787], "atleast_1d": [51, 74, 355], "ari": [51, 74, 355, 424, 425, 426, 430, 439, 456], "a1": [51, 75, 424, 425, 426, 492], "a2": [51, 424, 425, 426], "atleast_2d": [51, 74, 355], "atleast_3d": [51, 74, 355], "concat_from_sequ": [51, 74, 355], "input_sequ": [51, 74, 355, 429], "new_axi": [51, 74, 355, 429, 786], "dsplit": [51, 74, 355], "indices_or_sect": [51, 74, 355, 430, 439, 456], "3rd": [51, 74, 355, 430], "dstack": [51, 74, 355], "fill_diagon": [51, 74, 355], "fill_diag": [51, 433], "fortran": [51, 58, 74, 81, 355, 434, 593, 658, 801, 805], "layout": [51, 58, 74, 81, 355, 434, 593, 658, 759, 773, 774, 779], "fliplr": [51, 74, 355, 773], "diag": [51, 56, 74, 79, 355, 435, 436, 591, 624, 781], "flipud": [51, 74, 355, 773], "fold": [51, 74, 355, 445, 446, 762], "unfold": [51, 74, 91, 353, 355, 404, 437, 445, 447], "folded_tensor": [51, 355, 437], "heavisid": [51, 74, 355], "5000": [51, 355, 438, 591, 627], "hsplit": [51, 74, 355], "horizont": [51, 74, 355, 439, 500, 588], "hstack": [51, 74, 355], "vstack": [51, 74, 355, 440], "i0": [51, 74, 355, 364, 481], "bessel": [51, 64, 74, 87, 305, 346, 355, 441, 601, 716, 718], "kind": [51, 64, 74, 161, 164, 165, 274, 364, 441, 479, 480, 485, 584, 586, 601, 709, 710, 715, 717, 752, 774, 776, 779, 781, 787], "26606588": [51, 74, 355, 441], "2795853": [51, 74, 355, 441], "88079259": [51, 74, 355, 441], "row_mod": [51, 74, 355, 442], "column_mod": [51, 74, 355, 442], "ascend": [51, 63, 74, 86, 355, 362, 442, 471, 600, 705, 707], "prod": [51, 52, 64, 75, 87, 353, 355, 405, 407, 442, 486, 501, 588, 601, 763, 765, 781], "moveaxi": [51, 74, 355], "destin": [51, 74, 355, 443], "unstack": [51, 58, 68, 81, 443, 593, 761, 781, 784, 808], "reorder": [51, 58, 74, 81, 355, 443, 500, 588, 593, 655], "stat_length": [51, 74, 355, 444], "constant_valu": [51, 74, 355, 444], "end_valu": [51, 74, 355, 444], "reflect_typ": [51, 74, 355, 444], "partial_fold": [51, 74, 355], "skip_begin": [51, 74, 355, 445, 446, 447, 448], "untouch": [51, 74, 355, 445, 446, 447, 448], "partial_tensor_to_vec": [51, 74, 355], "skip_end": [51, 74, 355, 446, 447], "vectoris": [51, 74, 91, 355, 446, 448], "partial_unfold": [51, 74, 355], "ravel_tensor": [51, 74, 355, 447], "n_1": [51, 74, 355, 447], "n_2": [51, 74, 355, 447], "n_i": [51, 74, 353, 355, 405, 447], "partial_vec_to_tensor": [51, 74, 355], "rot90": [51, 74, 355, 773], "rotat": [51, 74, 355, 450], "soft_threshold": [51, 74, 355], "take_along_axi": [51, 74, 355], "arr": [51, 52, 71, 74, 169, 355, 428, 449, 452, 532, 584, 759, 763, 764], "top_k": [51, 74, 355], "largest": [51, 68, 74, 161, 164, 353, 355, 414, 453, 584, 591, 630, 639], "sort": [51, 62, 68, 74, 85, 94, 288, 353, 355, 364, 400, 453, 471, 485, 586, 591, 599, 623, 624, 639, 640, 701, 705, 706, 707, 747, 752, 762, 777], "retun": [51, 74, 355, 453], "smallest": [51, 68, 74, 161, 164, 232, 355, 453, 584, 586, 591, 630], "unfolded_tensor": [51, 355, 454], "unique_consecut": [51, 74, 355], "vsplit": [51, 74, 355], "vertic": [51, 74, 355, 456, 457, 500, 588, 755], "_arraywithnormsexperiment": [51, 93], "varianc": [51, 64, 74, 87, 358, 458, 460, 601, 718, 728, 732], "nsc": [51, 74, 358, 458, 459, 460, 732], "braodcast": [51, 74, 358, 458], "ad": [51, 58, 74, 81, 89, 236, 269, 317, 330, 349, 358, 458, 459, 460, 546, 547, 586, 588, 591, 593, 624, 625, 654, 729, 734, 747, 751, 752, 753, 754, 755, 757, 758, 760, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 785, 787, 792, 795, 800, 801], "running_mean": [51, 74, 358, 458, 460, 732], "running_var": [51, 74, 358, 458, 460, 732], "nc": [51, 74, 358, 458, 459, 460, 732], "group_norm": [51, 74, 358], "num_group": [51, 74, 358, 459], "group": [51, 74, 355, 358, 455, 459, 590, 595, 603, 610, 611, 672, 757, 761, 763, 770, 774, 775, 797, 800, 806], "instance_norm": [51, 74, 358], "l1_normal": [51, 74, 358], "33333334": [51, 358, 461, 463, 571, 589, 590, 591, 612, 646], "33333337": [51, 134, 358, 461, 571, 583, 589], "28571439": [51, 358, 461], "l2_normal": [51, 74, 358, 463], "l2": [51, 56, 79, 90, 91, 358, 462, 463, 591, 646, 729, 761], "44721359": [51, 74, 358, 462, 463], "89442718": [51, 74, 358, 462, 463], "60000002": [51, 87, 94, 358, 462, 463, 713], "80000001": [51, 358, 462, 463], "lp_normal": [51, 74, 358], "lp": [51, 358, 463], "_arraywithrandomexperiment": [51, 93], "bernoulli": [51, 74, 352, 359, 375, 376, 377], "event": [51, 74, 359, 464, 776], "entri": [51, 58, 68, 74, 81, 85, 134, 355, 359, 435, 436, 464, 583, 593, 595, 660, 683, 701, 754, 762, 776, 801], "parameter": [51, 60, 74, 83, 359, 464, 465, 467, 468, 597, 690, 692, 693], "odd": [51, 74, 274, 355, 359, 444, 464, 586, 752, 757], "drawn": [51, 60, 74, 83, 359, 464, 465, 466, 467, 468, 597, 690, 691, 692, 693, 728, 776], "dirichlet": [51, 74, 359], "10598304": [51, 359, 466], "21537054": [51, 359, 466], "67864642": [51, 359, 466], "48006698": [51, 359, 466], "07472073": [51, 359, 466], "44521229": [51, 359, 466], "55479872": [51, 359, 466], "05426367": [51, 359, 466], "39093761": [51, 359, 466], "19531053": [51, 359, 466], "51675832": [51, 359, 466], "28793114": [51, 359, 466], "12315625": [51, 359, 466], "29823365": [51, 359, 466], "5786101": [51, 359, 466], "15564976": [51, 359, 466], "50542368": [51, 359, 466], "33892656": [51, 359, 466], "1325352": [51, 359, 466], "44439589": [51, 359, 466], "42306891": [51, 359, 466], "gamma": [51, 59, 74, 82, 323, 333, 349, 359, 364, 482, 596, 689], "poisson": [51, 74, 354, 359, 419], "rate": [51, 53, 74, 76, 352, 359, 393, 468, 570, 573, 575, 576, 577, 589, 594, 667, 668, 669, 733, 762], "paramt": [51, 468, 595, 677, 687], "lam": [51, 74, 359, 468], "_arraywithsearchingexperiment": [51, 93], "unravel_index": [51, 74, 360], "unravel": [51, 74, 360, 469], "_arraywithsetexperiment": [51, 93], "_arraywithsortingexperiment": [51, 93], "lexsort": [51, 74, 362], "indirectli": [51, 74, 362, 471], "statist": [51, 74, 89, 355, 444, 732, 745, 753, 763, 776, 777, 801], "_arraywithstatisticalexperiment": [51, 93], "bincount": [51, 74, 364], "minlength": [51, 74, 364, 476], "corrcoef": [51, 74, 364], "rowvar": [51, 74, 364, 477, 478], "observ": [51, 74, 364, 477, 478, 755, 763, 767, 781, 795, 803], "relationship": [51, 74, 477, 728], "cov": [51, 74, 364], "bia": [51, 55, 74, 78, 82, 364, 478, 527, 588, 590, 596, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 689, 729, 770, 776, 781, 785], "ddof": [51, 74, 364, 478], "fweight": [51, 74, 364, 478], "aweight": [51, 74, 364, 478], "overridden": [51, 74, 364, 478, 733, 758], "unbias": [51, 64, 74, 87, 364, 478, 601, 718], "typic": [51, 74, 317, 330, 349, 364, 478, 600, 707, 729, 757, 770, 800, 808], "assign": [51, 74, 91, 364, 478, 753, 755, 759, 763, 773, 783], "covari": [51, 74, 364, 478], "cummax": [51, 74, 364], "exclus": [51, 52, 64, 68, 74, 75, 87, 118, 353, 364, 413, 479, 480, 519, 520, 523, 583, 588, 597, 601, 691, 709, 710, 761, 763, 770, 786, 805, 807], "cumul": [51, 64, 74, 87, 364, 479, 480, 601, 709, 710], "uint64": [51, 64, 158, 163, 165, 166, 176, 178, 181, 297, 344, 364, 479, 480, 584, 601, 709, 710, 715, 717, 763, 776, 781], "uint16": [51, 64, 153, 158, 163, 164, 173, 297, 344, 364, 479, 480, 584, 601, 709, 710, 715, 717, 763, 774, 776, 781], "bit": [51, 64, 160, 161, 164, 227, 228, 230, 364, 479, 480, 584, 586, 601, 709, 710, 715, 717, 752, 753, 754, 761, 762, 763, 765, 770, 781, 783, 807], "uint32": [51, 64, 158, 163, 164, 165, 187, 297, 344, 364, 479, 480, 584, 601, 709, 710, 715, 717, 763, 776, 781], "cummin": [51, 74, 364], "histogram": [51, 74, 364], "extend_lower_interv": [51, 74, 364, 481], "extend_upper_interv": [51, 74, 364, 481], "densiti": [51, 74, 364, 481], "monoton": [51, 74, 364, 481], "rightmost": [51, 74, 364, 481], "c1": [51, 74, 364, 481, 761], "ff": [51, 74, 364, 481], "c_": [51, 74, 364, 481], "igamma": [51, 74, 364], "incomplet": [51, 74, 364, 482, 755], "3614": [51, 74, 364, 482], "2085": [51, 74, 364, 482], "median": [51, 74, 355, 364, 444, 485], "nanmean": [51, 74, 364], "6666666666666665": [51, 74, 364, 484], "nanmedian": [51, 74, 364], "overwrite_input": [51, 74, 364, 485], "treat": [51, 68, 74, 94, 274, 335, 349, 355, 364, 452, 485, 486, 586, 772, 776, 782, 786], "undefin": [51, 74, 355, 364, 365, 444, 485, 488, 763, 767, 772], "nanprod": [51, 74, 364], "Not": [51, 74, 335, 349, 353, 364, 402, 486, 581, 759, 767, 775, 784, 785, 787], "quantil": [51, 74, 364], "inclus": [51, 74, 118, 364, 487, 583, 597, 691, 748, 759, 773, 779], "higher": [51, 74, 353, 355, 364, 413, 416, 424, 425, 426, 487, 728, 763, 773, 780, 781, 786, 787, 798, 801, 802, 805, 807, 808], "midpoint": [51, 74, 364, 487], "surround": [51, 74, 364, 487, 779], "whichev": [51, 74, 364, 487], "_arraywithutilityexperiment": [51, 93], "optional_get_el": [51, 74, 365], "empti": [51, 52, 68, 75, 118, 297, 344, 355, 365, 444, 488, 495, 532, 583, 588, 591, 595, 601, 602, 643, 646, 684, 715, 717, 719, 720, 753, 754, 758, 760, 763, 764, 773], "_arraywithgener": [52, 93], "all_equ": [52, 75, 588], "equality_matrix": [52, 75, 489, 588], "array_equ": [52, 75, 588], "assert_supports_inplac": [52, 75, 588], "ivybackendexcept": [52, 75, 493, 517, 588, 742, 758, 764, 767], "clip_matrix_norm": [52, 75, 588], "894": [52, 75, 495, 496, 588, 596, 689], "clip_vector_norm": [52, 75, 588], "default_v": [52, 499, 588], "catch_except": [52, 499, 588], "rev": [52, 499, 588], "with_cal": [52, 499, 588], "catch": [52, 499, 588, 771, 776], "einops_rearrang": [52, 75, 588], "axes_length": [52, 75, 500, 501, 502, 588], "arrang": [52, 500, 588], "rearrang": [52, 75, 500, 502, 588], "einops_reduc": [52, 75, 588], "einops_repeat": [52, 75, 588], "fourier_encod": [52, 75, 588], "max_freq": [52, 75, 504, 588], "oppos": [52, 75, 504, 588, 763], "geometr": [52, 75, 504, 588, 591, 644], "seper": [52, 504, 588, 765, 775], "0000000e": [52, 75, 504, 588], "2246468e": [52, 75, 504, 588], "4492936e": [52, 504, 588], "6739404e": [52, 75, 504, 588], "batch_dim": [52, 75, 507, 508, 588, 735], "gather_nd": [52, 75, 588], "get_num_dim": [52, 75, 588], "as_arrai": [52, 75, 511, 545, 588, 735], "has_nan": [52, 75, 588], "include_inf": [52, 75, 513, 567, 588], "inplace_decr": [52, 75, 588], "val": [52, 68, 73, 75, 249, 515, 516, 517, 536, 537, 538, 586, 588, 763, 773, 783], "decrement": [52, 75, 515, 588], "inplace_incr": [52, 75, 588], "increment": [52, 75, 516, 588, 755, 801], "inplace_upd": [52, 75, 535, 588, 726, 773], "ensure_in_backend": [52, 75, 517, 588, 773], "keep_input_dtyp": [52, 75, 517, 588, 773], "is_arrai": [52, 75, 588, 773, 774], "is_ivy_arrai": [52, 75, 588, 773, 783], "is_ivy_contain": [52, 588], "is_native_arrai": [52, 75, 172, 520, 584, 588, 783], "isin": [52, 75, 588], "test_el": [52, 75, 524, 588], "assume_uniqu": [52, 75, 524, 588], "invert": [52, 75, 227, 524, 586, 588, 591, 631], "scatter_flat": [52, 75, 588], "occupi": [52, 161, 164, 531, 532, 584, 588], "scatter_nd": [52, 75, 588, 779, 783], "stable_divid": [52, 75, 588, 770], "denomin": [52, 59, 75, 82, 538, 546, 560, 588, 596, 689, 732, 770, 778, 787, 798], "min_denomin": [52, 75, 538, 546, 560, 588, 778], "_min_denomin": [52, 546, 588], "stable_pow": [52, 75, 588], "min_bas": [52, 75, 537, 547, 559, 588, 732, 778], "stabl": [52, 63, 75, 86, 143, 312, 346, 362, 471, 537, 538, 546, 547, 559, 560, 583, 588, 600, 705, 708, 754, 759, 763, 774, 778, 781, 787], "00004": [52, 75, 547, 588], "00008": [52, 75, 547, 588], "00004000e": [52, 547], "56002560e": [52, 547], "60001200e": [52, 547], "09602048e": [52, 547], "supports_inplace_upd": [52, 75, 588], "to_fil": 52, "fid": 52, "sep": 52, "format_": 52, "binari": [52, 55, 57, 78, 80, 226, 229, 231, 266, 286, 354, 419, 421, 586, 590, 592, 613, 648], "recov": [52, 767, 774], "to_scalar": [52, 75, 588], "value_is_nan": [52, 75, 588], "_arraywithgradi": [53, 93], "adam_step": [53, 76, 589], "mw": [53, 76, 569, 570, 589, 785], "vw": [53, 76, 569, 570, 589, 785], "beta1": [53, 76, 491, 569, 570, 575, 588, 589, 733, 785], "beta2": [53, 76, 491, 569, 570, 575, 588, 589, 733, 785], "epsilon": [53, 56, 57, 76, 79, 80, 491, 569, 570, 575, 588, 589, 591, 592, 632, 635, 648, 649, 650, 730, 732, 733, 761, 770, 773, 785], "dc": [53, 76, 569, 570, 573, 575, 576, 577, 589], "dw": [53, 76, 569, 570, 573, 575, 576, 577, 589], "forget": [53, 76, 569, 570, 575, 589, 733, 747, 763], "prevent": [53, 76, 569, 570, 575, 589, 590, 601, 613, 717, 728, 733, 753, 755, 762, 763, 767, 773, 774, 777], "dcdw": [53, 76, 569, 570, 573, 575, 576, 589], "adam_step_delta": [53, 76, 569, 589], "2020105": [53, 569, 589], "22187898": [53, 569, 589], "24144873": [53, 569, 589], "10000002": [53, 87, 291, 344, 569, 713], "20000005": [53, 291, 344, 569], "00300002": [53, 569], "00800002": [53, 569], "adam_upd": [53, 76, 589, 785], "mw_tm1": [53, 76, 570, 575, 589], "vw_tm1": [53, 76, 570, 575, 589], "stop_gradi": [53, 76, 209, 491, 570, 573, 575, 576, 577, 585, 588, 589, 594, 667, 668, 669, 733, 785], "ws_new": [53, 76, 570, 575, 576, 577, 589], "updated_weight": [53, 76, 570, 589], "92558753": [53, 570], "92558873": [53, 570, 589], "92558718": [53, 570, 589], "00000063e": [53, 76, 570, 589], "00000016e": [53, 76, 570, 589], "00000086e": [53, 76, 570, 589], "gradient_descent_upd": [53, 76, 589, 594, 667, 668, 669], "descent": [53, 76, 573, 589, 733, 785, 801], "new_weight": [53, 76, 573, 575, 589, 784], "lamb_upd": [53, 76, 589], "max_trust_ratio": [53, 76, 575, 589, 733], "decay_lambda": [53, 76, 575, 576, 589, 733], "trust": [53, 76, 575, 589, 733], "ratio": [53, 76, 575, 589, 733], "decai": [53, 76, 575, 576, 589, 733], "lamb": [53, 76, 575, 589, 733, 785], "784": [53, 575, 589], "lars_upd": [53, 76, 589], "lar": [53, 76, 576, 589, 733, 785], "optimizer_upd": [53, 76, 589], "effective_grad": [53, 76, 577, 589], "3e": [53, 76, 577, 589], "preserve_typ": [53, 76, 578, 589], "_arraywithimag": [54, 93], "_arraywithlay": [55, 93], "conv1d": [55, 78, 590, 729], "filter_format": [55, 78, 590, 603, 604, 606, 607, 608, 610], "channel_last": [55, 78, 590, 603, 604, 606, 607, 608, 610, 611], "x_dilat": [55, 78, 590, 603, 604, 606, 607, 608, 610], "fw": [55, 78, 364, 478, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 754, 776], "d_out": [55, 78, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611], "channel_first": [55, 78, 590, 603, 604, 606, 607, 608, 610, 611], "wio": [55, 590, 603, 604, 605, 610], "conv1d_transpos": [55, 78, 590], "output_shap": [55, 78, 590, 603, 605, 607, 609, 611, 729], "fh": [55, 78, 590, 595, 603, 606, 607, 608, 609, 610, 611, 612, 682], "hwio": [55, 590, 603, 604, 606, 610], "conv2d_transpos": [55, 78, 590], "conv3d": [55, 78, 590, 609, 729], "fd": [55, 78, 590, 603, 608, 609, 610, 611], "conv3d_transpos": [55, 78, 590], "depthwise_conv2d": [55, 78, 590], "randint": [55, 60, 62, 78, 83, 597, 599, 612, 615, 701, 763, 795], "noise_shap": [55, 78, 590, 613], "droput": [55, 613], "42857146": [55, 590, 613], "85714293": [55, 590, 613], "28571415": [55, 78, 590, 613], "71428585": [55, 78, 590, 613], "14285755": [55, 78, 590, 613], "5714283": [55, 590, 613], "4285717": [55, 78, 590, 613], "8571434": [55, 78, 590, 613], "2857151": [55, 590, 613], "dropout1d": [55, 78, 352], "droput1d": [55, 375, 376], "dropout2d": [55, 78, 352], "dropout3d": [55, 78, 352], "droput3d": [55, 377], "outer_batch_shap": [55, 78, 590, 614], "inner_batch_shap": [55, 78, 590, 614], "in_featur": [55, 78, 590, 614, 776], "out_featur": [55, 78, 590, 614, 776], "134": [55, 591, 614, 631], "lstm_updat": [55, 78, 590, 781], "init_h": [55, 78, 590, 615, 781], "init_c": [55, 78, 590, 615, 781], "recurrent_kernel": [55, 78, 590, 615, 781], "recurrent_bia": [55, 78, 590, 615, 781], "hidden": [55, 78, 590, 615, 729, 760, 767, 781, 785], "recurr": [55, 78, 590, 615, 781, 801, 805], "timestep": [55, 78, 590, 615, 616, 729, 781], "h_i": [55, 78, 615], "c_i": [55, 78, 615], "rc": [55, 78, 615], "multi_head_attent": [55, 78, 590, 773], "num_head": [55, 78, 590, 616, 729], "in_proj_weight": [55, 78, 590, 616], "q_proj_weight": [55, 78, 590, 616], "k_proj_weight": [55, 78, 590, 616], "v_proj_weight": [55, 78, 590, 616], "out_proj_weight": [55, 78, 590, 616], "in_proj_bia": [55, 78, 590, 616], "out_proj_bia": [55, 78, 590, 616], "is_caus": [55, 78, 590, 616, 617], "return_attention_weight": [55, 78, 590, 616], "average_attention_weight": [55, 78, 590, 616], "scaled_dot_product_attent": [55, 78, 590], "dropout_p": [55, 78, 590, 617], "num_queri": [55, 78, 590, 616, 617], "feat_dim": [55, 78, 590, 617], "num_kei": [55, 78, 590, 616, 617], "causal": [55, 78, 590, 616, 617], "attent": [55, 78, 590, 616, 617, 729, 755, 758, 792], "score": [55, 78, 354, 421, 590, 617, 747], "40000001": [55, 67, 93, 94, 103, 106, 291, 344, 580, 590, 599, 617, 702], "29999995": [55, 291, 344, 590, 599, 617, 702], "19994521": [55, 590, 617], "09994531": [55, 590, 617], "30000019": [55, 590, 617], "_arraywithlinearalgebra": [56, 93], "choleski": [56, 79, 591, 773], "625": [56, 74, 327, 591, 618], "vif": [56, 79, 619], "det": [56, 79, 591, 637, 762], "axis1": [56, 58, 79, 81, 591, 593, 622, 643, 663], "axis2": [56, 79, 591, 622, 643], "eigh": [56, 79, 353, 400, 591, 623], "uplo": [56, 79, 591, 624, 625], "eigvalsh": [56, 79, 591], "array_lik": [56, 79, 352, 354, 355, 395, 417, 420, 421, 449, 591, 626, 634], "3d": [56, 74, 352, 375, 376, 426, 591, 626, 729, 779], "105": [56, 78, 590, 591, 592, 613, 614, 626, 634, 648], "149": [56, 591, 626], "171": [56, 591, 626], "143": [56, 73, 94, 286, 586, 591, 626, 765], "203": [56, 73, 225, 591, 596, 626, 689], "233": [56, 591, 626], "inv": [56, 79, 591], "transpose_a": [56, 79, 591, 629], "transpose_b": [56, 79, 591, 629], "adjoint_a": [56, 79, 591, 629], "adjoint_b": [56, 79, 591, 629], "matrix_norm": [56, 79, 591], "ord": [56, 79, 591, 630, 646], "fro": [56, 79, 354, 417, 591, 630], "nuc": [56, 79, 591, 630], "matrix_pow": [56, 79, 591], "matrix_rank": [56, 79, 591], "hermitian": [56, 79, 353, 400, 401, 591, 623, 624, 625, 632, 639], "largest_singular_valu": [56, 79, 591, 632, 635], "defici": [56, 591, 632], "matrix_transpos": [56, 79, 591, 783], "outer": [56, 79, 91, 591, 594, 667, 668, 669, 753], "pinv": [56, 79, 591], "pseudo": [56, 79, 591, 635, 772], "99999988": [56, 79, 591, 635], "qr": [56, 79, 591, 775], "orthonorm": [56, 79, 591, 636, 639], "complet": [56, 68, 79, 591, 636, 753, 754, 755, 757, 758, 761, 762, 765, 767, 770, 774, 775, 776, 779, 783, 784, 792, 799], "slogdet": [56, 79, 591], "logabsdet": [56, 79, 591, 637], "natur": [56, 79, 239, 257, 258, 259, 260, 279, 333, 349, 586, 591, 637, 758, 765, 767, 775, 792], "098611": [56, 591, 637], "solv": [56, 79, 353, 408, 591, 747, 754, 757, 774, 782, 803], "full_matric": [56, 79, 591, 639], "svf": [56, 639], "reconstructed_x": [56, 591, 639], "svdval": [56, 79, 591], "tensorsolv": [56, 79, 591], "vander": [56, 79, 591], "vandermond": [56, 79, 591, 644], "vecdot": [56, 79, 591], "vector_norm": [56, 79, 591], "singleton": [56, 61, 64, 65, 79, 84, 87, 88, 591, 593, 598, 601, 602, 646, 654, 661, 697, 712, 713, 714, 715, 716, 717, 718, 719, 720, 781], "mathemat": [56, 79, 219, 224, 236, 241, 243, 259, 269, 581, 586, 591, 630, 646, 763, 774, 779, 801, 807], "manhattan": [56, 79, 591, 646], "euclidean": [56, 79, 91, 591, 646], "7416575": [56, 79, 591, 646], "vector_to_skew_symmetric_matrix": [56, 79, 591], "_arraywithloss": [57, 93], "binary_cross_entropi": [57, 80, 592, 762], "from_logit": [57, 80, 592, 648, 730], "pos_weight": [57, 80, 592, 648], "amount": [57, 80, 211, 585, 592, 648, 649, 650, 754, 762, 764, 775], "crossentropi": [57, 80, 592, 648], "357": [57, 80, 592, 648, 650], "223": [57, 80, 592, 648, 650], "3862944": [57, 592, 649], "sparse_cross_entropi": [57, 80, 592], "_arraywithmanipul": [58, 93], "x_min": [58, 81, 593, 651, 786], "x_max": [58, 81, 593, 651, 786], "before_1": [58, 81, 355, 444, 593, 653, 666], "after_1": [58, 81, 355, 444, 593, 653, 666], "before_n": [58, 81, 355, 444, 593, 653, 666], "after_n": [58, 81, 355, 444, 593, 653, 666], "repetit": [58, 81, 593, 657, 664, 779], "fit": [58, 81, 593, 657, 753, 774, 781, 797, 798, 801], "flat": [58, 68, 81, 360, 469, 531, 588, 593, 657, 727], "allowzero": [58, 81, 593, 658], "remain": [58, 61, 74, 81, 84, 219, 236, 237, 243, 251, 252, 269, 272, 278, 280, 352, 375, 376, 377, 395, 586, 593, 595, 598, 658, 676, 699, 754, 755, 762, 765, 767, 770, 777, 779, 787], "roll": [58, 81, 593, 769], "shift": [58, 70, 81, 94, 133, 143, 228, 230, 312, 346, 583, 586, 593, 659, 754, 755, 764, 765, 769], "restor": [58, 81, 593, 659, 768], "num_or_size_split": [58, 68, 81, 593, 660, 781], "with_remaind": [58, 68, 81, 593, 660], "squeezabl": [58, 593, 661], "swapax": [58, 81, 593], "axis0": [58, 81, 593, 663], "swap_ax": [58, 663], "swap": [58, 81, 593, 663, 738, 796], "tile": [58, 75, 81, 502, 593], "unpack": [58, 81, 593, 665, 775, 776], "zero_pad": [58, 81, 593], "_arraywithnorm": [59, 93], "layer_norm": [59, 82, 596], "normalized_idx": [59, 82, 596, 689], "new_std": [59, 82, 596, 689, 732], "learnabl": [59, 82, 594, 596, 669, 689, 729, 732, 786], "deviat": [59, 60, 64, 82, 83, 87, 596, 597, 601, 689, 692, 716, 728, 732, 757, 793], "0976": [59, 596, 689], "3452": [59, 596, 689], "2740": [59, 596, 689], "1047": [59, 596, 689], "5886": [59, 596, 689], "2732": [59, 596, 689], "7696": [59, 596, 689], "7024": [59, 596, 689], "2518": [59, 596, 689], "826": [59, 596, 689], "178": [59, 596, 689], "981": [59, 596, 689], "831": [59, 596, 689], "421": [59, 596, 689], "_arraywithrandom": [60, 93], "multinomi": [60, 83, 359, 466, 597], "population_s": [60, 83, 597, 690], "num_sampl": [60, 83, 597, 690], "unnorm": [60, 83, 597, 690, 776], "popul": [60, 64, 68, 83, 87, 597, 601, 690, 716, 718, 763, 764, 773, 776, 781, 807], "draw": [60, 83, 359, 464, 466, 468, 597, 690, 692, 693, 728, 753, 757, 775, 776], "half": [60, 83, 118, 283, 583, 586, 597, 691, 693, 751, 779], "235": [60, 692], "float16": [60, 71, 83, 131, 153, 155, 156, 161, 163, 297, 325, 344, 349, 583, 584, 591, 646, 692, 693, 751, 763, 774, 776], "807": [60, 692], "_arraywithsearch": [61, 93], "select_last_index": [61, 84, 598, 696, 697], "occurr": [61, 355, 364, 455, 476, 598, 599, 696, 697, 701], "argmin": [61, 84, 598], "output_dtyp": [61, 84, 598, 697], "argwher": [61, 84, 598], "nonzero": [61, 84, 217, 218, 219, 222, 225, 234, 236, 239, 241, 243, 269, 282, 287, 586, 598], "as_tupl": [61, 84, 598, 699], "fewer": [61, 84, 598, 699], "condit": [61, 74, 84, 115, 353, 397, 582, 595, 598, 680, 681, 700, 757, 763, 765, 767, 770, 771, 773, 776, 795], "_arraywithset": [62, 93], "unique_al": [62, 85, 599], "by_valu": [62, 85, 599, 701], "inverse_indic": [62, 85, 355, 455, 599, 701, 703], "unique_count": [62, 85, 599], "unique_invers": [62, 85, 599], "unique_valu": [62, 85, 599], "admonit": [62, 704], "dask": [62, 599, 701, 702, 703, 704, 792], "difficult": [62, 599, 701, 702, 703, 704, 755, 757, 763, 776, 787], "omit": [62, 279, 586, 599, 701, 702, 703, 704, 769, 773, 774], "x_i": [62, 64, 73, 216, 217, 218, 221, 222, 223, 225, 227, 232, 233, 234, 239, 241, 242, 249, 250, 251, 252, 253, 257, 258, 259, 260, 264, 271, 276, 279, 280, 281, 282, 283, 284, 286, 287, 289, 319, 338, 349, 586, 599, 601, 701, 702, 703, 704, 712, 713, 714, 716, 717, 718, 728, 766], "x_j": [62, 599, 701, 702, 703, 704], "impli": [62, 599, 701, 702, 703, 704, 776], "typeerror": [62, 85, 599, 704, 783], "_arraywithsort": [63, 93], "stabil": [63, 86, 546, 547, 588, 600, 705, 708, 763, 772, 777, 779], "maintain": [63, 86, 600, 705, 708, 755, 757, 768, 773, 775, 776, 791, 800], "msort": [63, 86, 600], "searchsort": [63, 86, 600], "side": [63, 86, 329, 349, 600, 707, 729, 741, 754, 755, 760], "sorter": [63, 86, 600, 707], "ret_dtyp": [63, 86, 600, 707], "_arraywithstatist": [64, 93], "cumprod": [64, 87, 601, 774, 786], "cumsum": [64, 87, 601, 763], "einsum": [64, 87, 601], "equat": [64, 74, 87, 302, 346, 591, 601, 638, 711, 741, 762, 801], "operand": [64, 74, 78, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 338, 342, 349, 350, 352, 394, 586, 591, 601, 637, 643, 711, 712, 714, 715, 717, 741, 758, 761, 766, 774], "describ": [64, 74, 219, 236, 237, 269, 272, 274, 359, 362, 468, 471, 586, 590, 601, 616, 711, 715, 717, 750, 753, 754, 755, 760, 762, 773, 774, 776, 781, 786, 801], "contract": [64, 591, 601, 641, 711], "seq": [64, 601, 711], "ii": [64, 87, 601, 711, 755], "jk": [64, 601, 711], "ik": [64, 601, 711], "126": [64, 101, 275, 580, 586, 591, 601, 631, 711], "510": [64, 601, 711], "special": [64, 79, 91, 93, 94, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 338, 349, 586, 591, 601, 637, 643, 712, 713, 714, 715, 716, 717, 718, 728, 753, 757, 758, 760, 762, 765, 766, 767, 769, 773, 775, 776, 777, 779, 801, 802, 803], "arithmet": [64, 87, 230, 236, 269, 586, 601, 713, 774], "propag": [64, 230, 586, 601, 712, 713, 714, 716, 717, 718, 772], "04999995": [64, 713], "freedom": [64, 87, 601, 716, 718, 759], "constitut": [64, 87, 601, 716, 718, 770, 781, 802], "commonli": [64, 87, 601, 716, 718, 767, 770, 772], "81649661": [64, 601, 716], "6666665": [64, 718, 784], "667": [64, 75, 236, 496, 546, 586, 588, 718], "_arraywithutil": [65, 93], "logic": [65, 88, 200, 236, 237, 263, 264, 265, 269, 272, 585, 586, 602, 719, 720, 753, 758, 762, 763, 764, 767, 770, 771, 772, 773, 774, 776, 779, 783, 796], "AND": [65, 88, 226, 237, 263, 586, 602, 719], "invalid": [65, 88, 591, 593, 602, 645, 654, 719, 720, 754, 763], "OR": [65, 88, 229, 265, 272, 586, 602, 720, 754, 755, 772], "_wrap_funct": [66, 89, 760, 770, 771], "function_nam": [66, 89, 753, 777], "new_funct": [66, 89, 760], "add_ivy_array_instance_method": 66, "cl": [66, 89], "moduletyp": [66, 89, 795, 796], "toi": [66, 89], "arrayexampl": 66, "hasattr": [66, 89], "_containerwithactiv": [67, 94], "dict_in": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "queue": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 541, 563, 588, 778, 784], "queue_load_s": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "container_combine_method": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "list_join": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "queue_timeout": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 541, 563, 588, 778], "print_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "key_length_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "print_ind": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "print_line_spac": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "ivyh": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "default_key_color": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "keyword_color_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "rebuild_child_contain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "types_to_iteratively_nest": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "alphabetical_kei": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "dynamic_backend": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 731, 759, 778], "build_cal": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "containerbas": [67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 761], "_static_gelu": 67, "key_chain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 299, 301, 302, 305, 306, 312, 313, 316, 317, 318, 319, 321, 323, 329, 330, 336, 338, 339, 340, 341, 342, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 429, 431, 440, 442, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 465, 470, 471, 478, 479, 480, 481, 487, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "to_appli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 299, 301, 302, 305, 306, 312, 313, 316, 317, 318, 319, 321, 323, 329, 330, 336, 338, 339, 340, 341, 342, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 429, 431, 440, 442, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 465, 470, 471, 478, 479, 480, 481, 487, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 595, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "prune_unappli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 299, 301, 302, 305, 306, 312, 313, 316, 317, 318, 319, 321, 323, 329, 330, 336, 338, 339, 340, 341, 342, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 429, 431, 440, 442, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 465, 470, 471, 478, 479, 480, 481, 487, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 595, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 683, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "map_sequ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 299, 301, 302, 305, 306, 312, 313, 316, 317, 318, 319, 321, 323, 329, 330, 336, 338, 339, 340, 341, 342, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 429, 431, 440, 442, 444, 445, 446, 448, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 465, 470, 471, 478, 479, 480, 481, 487, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "formul": [67, 101, 725], "prune": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 133, 138, 140, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 295, 296, 298, 299, 301, 317, 318, 319, 321, 323, 329, 330, 336, 338, 340, 341, 342, 375, 376, 377, 417, 418, 420, 421, 424, 425, 426, 429, 450, 452, 453, 458, 460, 461, 462, 463, 465, 478, 479, 480, 481, 489, 492, 493, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 513, 515, 516, 517, 519, 520, 523, 531, 532, 546, 547, 549, 551, 553, 554, 567, 573, 578, 595, 604, 605, 606, 607, 613, 614, 617, 618, 619, 624, 625, 626, 627, 629, 630, 632, 634, 636, 637, 643, 648, 649, 650, 651, 655, 658, 659, 660, 661, 662, 665, 666, 683, 684, 685, 686, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 709, 710, 713, 715, 716, 718, 719, 720, 762], "static_gelu": 67, "046": 67, "_static_hardswish": 67, "_static_leaky_relu": 67, "static_leaky_relu": 67, "38999999": [67, 74, 103, 291, 344], "_static_log_softmax": 67, "static_log_softmax": 67, "371": [67, 104], "_static_mish": 67, "static_mish": 67, "30883577": [67, 105, 580], "28903052": [67, 105, 580], "10714479": [67, 105, 580], "_static_relu": 67, "static_relu": 67, "_static_sigmoid": 67, "static_sigmoid": 67, "2689414": [67, 107, 108, 580], "7310586": [67, 107, 108, 580], "88079703": [67, 107, 580], "62245935": [67, 107], "4750208": [67, 107], "_static_softmax": 67, "static_softmax": 67, "72844321": [67, 108], "19852395": [67, 108], "07303288": [67, 108], "_static_softplu": 67, "revert": [67, 109, 580], "static_softplu": 67, "53499615": 67, "42036411": 67, "948": [67, 109], "166": [67, 101, 580], "159": [67, 101, 580, 590, 614], "slice": [68, 75, 143, 312, 346, 355, 428, 449, 452, 507, 508, 510, 536, 583, 588, 595, 679, 801], "dictionari": [68, 85, 94, 208, 571, 585, 589, 704, 758, 762, 763, 770, 774, 775, 784, 787], "asynchron": [68, 94, 801], "wait": [68, 94, 541, 588, 747, 753, 755, 762, 774], "arriv": [68, 94, 541, 588, 779], "cont_list_join": [68, 94], "limit": [68, 94, 161, 164, 495, 496, 584, 588, 593, 651, 728, 735, 747, 754, 755, 760, 762, 765, 767, 774, 776, 779, 784, 787, 800, 801, 802], "whitespac": [68, 94], "indent": [68, 94, 784], "newlin": [68, 94, 766], "termin": [68, 94, 754, 755, 761, 768, 781, 784], "rebuild": [68, 94, 749], "constructor": [68, 94, 491, 588, 726, 734, 763, 764, 766, 783], "kept": [68, 94, 594, 667, 668, 755, 773, 777], "encount": [68, 94, 729, 751, 753, 763, 767, 776], "node": [68, 75, 94, 493, 503, 549, 595, 680, 681, 728, 737, 760, 761, 774, 792, 795, 796, 802], "instruct": [68, 94, 747, 753, 754, 757, 767, 768, 775, 776, 788, 799, 802, 805, 807], "alphabet": [68, 94], "__setitem__": [68, 758, 761, 783], "_cont_at_key_chains_input_as_dict": 68, "current_chain": 68, "ignore_key_error": 68, "_cont_at_key_chains_input_as_seq": 68, "_cont_call_static_method_with_flexible_arg": 68, "static_method": 68, "kw": 68, "self_idx": 68, "_cont_concat_unifi": 68, "_cont_get_dev": 68, "_cont_get_shap": 68, "properti": [68, 91, 92, 93, 97, 731, 733, 757, 761, 770, 775, 776, 783, 784, 785, 807], "_cont_ivi": 68, "_cont_mean_unifi": 68, "_1": 68, "_cont_prune_key_chains_input_as_dict": 68, "return_cont": 68, "_cont_prune_key_chains_input_as_seq": 68, "_cont_slice_kei": 68, "key_slic": 68, "_cont_sum_unifi": 68, "_get_queue_item": 68, "cont_all_fals": 68, "assert_is_bool": 68, "cont_all_key_chain": 68, "include_empti": 68, "cont_all_tru": [68, 761, 784], "cont_as_bool": 68, "cont_assert_contains_sub_contain": 68, "sub_cont": 68, "screen": [68, 753, 754, 784], "cont_assert_contains_sub_structur": 68, "check_shap": [68, 735], "cont_assert_ident": 68, "check_typ": 68, "same_arrai": [68, 784], "arrays_equ": 68, "cont_assert_identical_structur": 68, "assert_and_assign": 68, "strucutr": 68, "congruent": 68, "cont_at_key_chain": 68, "ignore_non": 68, "cont_at_kei": 68, "substr": 68, "cont_combin": 68, "duplic": [68, 595, 672, 759, 766, 771, 772, 775, 785, 807], "configur": [68, 208, 585, 595, 683, 749, 754, 755, 760, 762, 763, 768], "container_rightmost": 68, "cont_common_key_chain": 68, "cont_config": 68, "cont_contains_sub_contain": 68, "cont_contains_sub_structur": 68, "cont_copi": [68, 784], "cont_create_if_abs": 68, "noth": [68, 779, 807], "cont_cutoff_at_depth": 68, "depth_cutoff": 68, "summari": [68, 165, 497, 512, 584, 588, 754, 755, 776], "cont_cutoff_at_height": 68, "height_cutoff": 68, "cont_deep_copi": [68, 784, 795], "cont_dev": 68, "belong": [68, 753, 757, 785], "cont_dev_str": 68, "cont_diff": [68, 784], "diff_kei": 68, "detect_key_diff": 68, "detect_value_diff": 68, "detect_shape_diff": 68, "among": [68, 761, 762, 776, 779, 793, 801], "flag": [68, 192, 364, 478, 585, 590, 616, 732, 755, 763, 764, 773, 774, 775, 776, 795, 796], "container0": 68, "cont_duplicate_array_keychain": 68, "cont_find_sub_contain": 68, "sub_cont_to_find": 68, "exsit": 68, "cont_find_sub_structur": 68, "sub_struc_to_find": 68, "cont_flatten_key_chain": [68, 784], "above_height": [68, 784], "below_depth": [68, 784], "cont_format_key_chain": 68, "format_fn": 68, "cont_from_disk_as_hdf5": [68, 784], "h5_obj_or_filepath": 68, "slice_obj": 68, "disk": [68, 731, 784, 800], "h5py": 68, "filepath": [68, 602, 721, 722, 755, 757], "cont_from_disk_as_json": [68, 784], "json_filepath": 68, "cont_from_disk_as_pickl": [68, 784], "pickle_filepath": 68, "cont_from_flat_list": 68, "flat_list": 68, "hierarchi": [68, 753, 784, 797, 807], "cont_handle_inplac": 68, "prime": [68, 763], "overwritten": [68, 758, 759], "cont_has_kei": 68, "query_kei": 68, "somewher": [68, 762], "cont_has_key_chain": 68, "cont_ident": [68, 784], "cont_identical_array_shap": 68, "cont_identical_config": 68, "cont_identical_structur": 68, "cont_if_exist": 68, "cont_inplace_upd": 68, "cont_ivi": 68, "cont_key_chains_contain": 68, "sub_str": 68, "cont_list_stack": [68, 784], "cont_load": 68, "cont_map": [68, 761, 784], "func": [68, 91, 209, 343, 351, 494, 568, 571, 572, 574, 579, 585, 588, 589, 595, 683, 753, 757, 758, 765, 767, 772], "cont_map_sub_cont": 68, "include_self": 68, "possibi": 68, "cont_max_depth": 68, "cont_multi_map": 68, "map_nest": 68, "assert_ident": 68, "leftmost": [68, 595, 683], "cont_multi_map_in_funct": 68, "cont_num_arrai": 68, "cont_overwrite_at_key_chain": 68, "target_dict": 68, "return_dict": 68, "cont_prune_empti": 68, "keep_non": 68, "cont_prune_key_chain": 68, "key1": [68, 747, 785], "key2": [68, 747], "key3": 68, "cont_prune_key_from_key_chain": 68, "certain": [68, 118, 134, 135, 583, 754, 755, 757, 763, 770, 776, 779, 787, 788, 795, 796, 805], "cont_prune_kei": 68, "cont_prune_keys_from_key_chain": 68, "cont_reduc": 68, "cont_remove_key_length_limit": 68, "cont_remove_print_limit": 68, "cont_reshape_lik": 68, "leading_shap": 68, "cont_restructur": 68, "keep_orig": 68, "old": [68, 754, 759, 773], "cont_restructure_key_chain": 68, "keychain_map": 68, "cont_sav": 68, "cont_set_at_key_chain": 68, "cont_set_at_kei": 68, "cont_shap": [68, 590, 608], "cont_show": 68, "cont_show_sub_contain": 68, "sub_cont_or_keychain": 68, "cont_size_ordered_arrai": 68, "keychain": [68, 74, 318, 424, 425, 426, 452], "cont_slice_kei": 68, "all_depth": 68, "cont_slice_via_kei": 68, "slice_kei": 68, "cont_sort_by_kei": 68, "cont_structural_diff": 68, "cont_to_dict": 68, "cont_to_disk_as_hdf5": [68, 784], "starting_index": 68, "max_batch_s": 68, "cont_to_disk_as_json": [68, 784], "cont_to_disk_as_pickl": [68, 784], "cont_to_flat_list": 68, "cont_to_iter": [68, 761], "leaf_keys_onli": 68, "cont_to_iterator_kei": 68, "cont_to_iterator_valu": 68, "cont_to_json": 68, "cont_to_nested_list": 68, "cont_to_raw": 68, "cont_trim_kei": 68, "trim": 68, "cont_try_kc": 68, "cont_unifi": 68, "concatten": [68, 209, 585], "cont_unstack_cont": 68, "dim_siz": 68, "cont_update_config": 68, "cont_with_default_key_color": 68, "cont_with_entries_as_list": 68, "cont_with_ivy_backend": 68, "ivy_backend": [68, 775], "cont_with_key_length_limit": [68, 784], "cont_with_print_ind": [68, 784], "cont_with_print_limit": [68, 784], "cont_with_print_line_spac": 68, "h5_file_s": 68, "shuffle_h5_fil": 68, "split_cont": 68, "_is_json": 68, "_repr": 68, "_containerwithconvers": [69, 94], "_static_to_ivi": 69, "_static_to_n": 69, "_containerwithcr": [70, 94], "_static_arang": 70, "_static_asarrai": 70, "_static_copy_arrai": 70, "_static_empti": 70, "_static_empty_lik": 70, "_static_ey": 70, "n_row": [70, 74, 129, 143, 312, 346, 353, 407, 583], "n_col": [70, 74, 129, 143, 312, 346, 583], "_static_from_dlpack": 70, "_static_ful": 70, "_static_full_lik": 70, "static_full_lik": 70, "2324": [70, 133, 583], "234": [70, 73, 133, 155, 238, 289, 583, 584, 586, 590, 614], "123": [70, 71, 133, 164, 503, 583, 588, 776], "_static_linspac": 70, "_static_logspac": 70, "static_logspac": 70, "15443469": [70, 135], "64158883": [70, 135], "_static_meshgrid": 70, "_static_native_arrai": 70, "_static_one_hot": 70, "static_one_hot": 70, "_static_on": 70, "_static_ones_lik": 70, "_static_tril": 70, "_static_triu": 70, "_static_zero": 70, "_static_zeros_lik": 70, "frombuff": [70, 583], "expos": [70, 131, 497, 583, 588, 747, 762, 781, 785, 791], "x00": [70, 131, 583], "xf0": [70, 131, 583], "x01": [70, 131, 583], "x02": [70, 131, 583], "x03": [70, 131, 583], "x04": [70, 131, 583], "x05": [70, 131], "5443469": [70, 135, 583], "static_frombuff": 70, "static_triu_indic": 70, "triu_indic": [70, 583], "_containerwithdatatyp": [71, 94], "_static_astyp": 71, "718": [71, 73, 148, 265, 584], "618": [71, 73, 148, 265, 584], "static_astyp": 71, "_static_broadcast_arrai": 71, "static_broadcast_arrai": 71, "_static_broadcast_to": 71, "static_broadcast_to": 71, "_static_can_cast": 71, "from_": [71, 151, 584], "static_can_cast": 71, "_static_default_complex_dtyp": 71, "complex_dtyp": [71, 154, 177, 584], "_static_default_float_dtyp": 71, "float_dtyp": [71, 156, 179, 584], "_static_dtyp": 71, "_static_finfo": 71, "inquir": [71, 161, 164], "static_finfo": 71, "55040e": [71, 161, 584], "7976931348623157e": [71, 161, 584], "308": [71, 161, 584, 776], "_static_function_supported_dtyp": 71, "_static_function_unsupported_dtyp": 71, "_static_iinfo": 71, "1800": [71, 164, 584], "1084": 71, "40000": 71, "static_iinfo": 71, "2147483648": [71, 164, 584], "2147483647": [71, 164, 584], "_static_is_bool_dtyp": 71, "dtype_in": [71, 146, 147, 160, 166, 167, 168, 169, 170, 171, 172, 173, 188, 584], "_static_is_complex_dtyp": 71, "is_complex_dtyp": [71, 584, 777], "roughli": [71, 754, 757, 804], "static_is_complex_dtyp": 71, "complex64": [71, 154, 168, 177, 183, 249, 276, 297, 344, 584, 586, 591, 637, 639, 640, 763], "_static_is_float_dtyp": 71, "static_is_float_dtyp": 71, "_static_is_int_dtyp": 71, "_static_is_uint_dtyp": 71, "_static_result_typ": 71, "static_result_typ": 71, "broadcats": [71, 149], "_containerwithdevic": [72, 94], "_static_dev": 72, "static_dev": 72, "_static_to_devic": 72, "static_to_devic": 72, "contaion": [72, 193], "_containerwithelementwis": [73, 94], "_static_ab": 73, "static_ab": 73, "_static_aco": 73, "static_aco": 73, "_static_acosh": 73, "static_acosh": 73, "_static_add": 73, "static_add": [73, 98], "_static_asin": 73, "static_asin": 73, "524": [73, 221, 586], "412": [73, 78, 221, 586], "201": [73, 74, 221, 373, 586], "_static_asinh": 73, "static_asinh": 73, "_static_atan": 73, "static_atan": 73, "_static_atan2": 73, "static_atan2": 73, "915": [73, 224, 586], "983": [73, 224, 586], "978": [73, 224, 586], "696": [73, 83, 224, 586, 692], "993": [73, 224, 586], "_static_atanh": 73, "static_atanh": 73, "_static_bitwise_and": 73, "static_bitwise_and": 73, "_static_bitwise_invert": 73, "static_bitwise_invert": 73, "_static_bitwise_left_shift": 73, "_static_bitwise_or": 73, "static_bitwise_or": 73, "_static_bitwise_right_shift": 73, "static_bitwise_right_shift": 73, "_static_bitwise_xor": 73, "static_bitwise_xor": 73, "_static_ceil": 73, "static_ceil": 73, "_static_co": 73, "static_co": 73, "_static_cosh": 73, "static_cosh": 73, "_static_deg2rad": 73, "static_deg2rad": 73, "0262": [73, 235, 275, 586], "873": [73, 235, 275, 586], "_static_divid": 73, "static_divid": 73, "_static_equ": 73, "static_equ": 73, "_static_erf": 73, "static_erf": 73, "27632612": [73, 238], "934008": [73, 238], "99999928": [73, 238], "91903949": [73, 238], "_static_exp": 73, "static_exp": 73, "59814835": [73, 239, 586], "4131622": [73, 239], "_static_expm1": 73, "thefunct": [73, 238], "areal": 73, "static_expm1": 73, "71828175": [73, 239, 586], "38905621": [73, 239, 586], "59815216": 73, "_static_floor": 73, "static_floor": 73, "_static_floor_divid": 73, "static_floor_divid": 73, "_static_great": 73, "static_great": 73, "_static_greater_equ": 73, "static_greater_equ": 73, "_static_isfinit": 73, "999999999999": [73, 250, 586], "static_isfinit": 73, "_static_isinf": 73, "static_isinf": 73, "_static_isnan": 73, "static_isnan": 73, "_static_isr": 73, "0j": [73, 74, 139, 140, 217, 218, 219, 222, 225, 234, 239, 241, 253, 257, 259, 276, 280, 282, 283, 287, 319, 349, 583, 586, 591, 637], "23j": [73, 74], "9j": [73, 74], "static_isr": 73, "_static_lcm": 73, "1080": [73, 254], "1550": [73, 254], "130": [73, 254], "_static_less": 73, "static_less": 73, "_static_less_equ": 73, "static_less_equ": 73, "_static_log": 73, "static_log": 73, "_static_log10": 73, "static_log10": 73, "898": [73, 258, 586], "0414": [73, 258, 586], "_static_log1p": 73, "static_log1p": 73, "_static_log2": 73, "_static_logaddexp": 73, "static_logaddexp": 73, "_static_logical_and": 73, "static_logical_and": 73, "_static_logical_not": 73, "static_logical_not": 73, "_static_logical_or": 73, "static_logical_or": 73, "_static_logical_xor": 73, "static_logical_xor": 73, "_static_maximum": 73, "static_maximum": 73, "_static_minimum": 73, "static_minimum": 73, "_static_multipli": 73, "static_multipli": 73, "_static_neg": 73, "static_neg": 73, "_static_not_equ": 73, "static_not_equ": 73, "_static_posit": 73, "static_posit": 73, "_static_pow": 73, "static_pow": 73, "_static_rad2deg": 73, "static_rad2deg": 73, "5160": 73, "10300": [73, 275, 586], "15500": 73, "20600": 73, "2860": [73, 275], "_static_reciproc": 73, "recirpoc": [73, 277], "static_reciproc": 73, "_static_remaind": 73, "static_remaind": 73, "_static_round": 73, "thevfunct": 73, "300": [73, 75, 78, 279, 352, 375, 376, 508, 532, 586, 588, 591, 627, 776], "527": [73, 279, 586], "static_round": 73, "301": [73, 279, 586], "_static_sign": 73, "static_sign": 73, "_static_sin": 73, "static_sin": 73, "757": [73, 281, 586], "959": [73, 241, 281, 586], "279": [73, 281, 352, 373, 383, 495, 586, 588], "_static_sinh": 73, "static_sinh": 73, "835": [73, 282], "347": [73, 282], "721": [73, 282], "_static_sqrt": 73, "static_sqrt": 73, "_static_squar": 73, "static_squar": 73, "_static_subtract": 73, "static_subtract": 73, "_static_tan": 73, "static_tan": 73, "_static_tanh": 73, "static_tanh": 73, "995": [73, 287, 586], "9999": 73, "_static_trapz": 73, "static_trapz": 73, "_static_trunc": 73, "static_trunc": 73, "_static_trunc_divid": 73, "75j": [73, 220, 249], "01317055": [73, 220], "05634501": [73, 220], "115": [73, 220, 275, 586], "3461759": [73, 220], "524111": [73, 220], "644": [73, 221, 586, 785], "305": [73, 78, 221, 586], "351": [73, 235, 275], "00613": [73, 235], "0154": [73, 235], "403": [73, 239], "428772": [73, 239], "649": [73, 241], "220": [73, 241], "865": [73, 241], "metho": [73, 248, 260], "7j": [73, 74, 253, 276, 319, 349, 586], "956": [73, 259], "08746284": [73, 262], "32192809": [73, 262], "nuner": [73, 269], "413": [73, 275], "335": [73, 74, 276, 319], "345j": [73, 74, 276, 319], "static_angl": 73, "static_exp2": 73, "static_fmin": 73, "static_gcd": 73, "static_imag": 73, "static_logaddexp2": 73, "static_nan_to_num": 73, "static_r": 73, "_containerwithactivationexperiment": [74, 94], "_static_elu": 74, "static_elu": 74, "_static_silu": 74, "static_silu": 74, "27777028": [74, 298], "23947507": [74, 298], "0900332": [74, 298], "contan": [74, 292], "19722462": [74, 292], "84729779": [74, 292], "31326163": [74, 293], "46328258": [74, 293], "51301527": [74, 293], "79813886": [74, 293], "22856998": [74, 296], "42028043": [74, 296], "31868932": [74, 296], "static_logit": 74, "static_logsigmoid": 74, "34115386": 74, "64439666": 74, "24115384": 74, "55435526": 74, "07888974": 74, "00741899": 74, "26328245": 74, "00012302": 74, "static_prelu": 74, "static_relu6": 74, "static_selu": 74, "static_thresholded_relu": 74, "_containerwithconversionexperiment": [74, 94], "_containerwithcreationexperiment": [74, 94], "_static_trilu": 74, "blackman": [74, 300, 346], "00770143e": [74, 300], "49229857e": [74, 300], "hamming_window": [74, 346], "coeffici": [74, 302, 346, 591, 638], "ham": [74, 302, 346], "4180": [74, 302], "8180": [74, 302], "hann_window": [74, 346], "hann": [74, 303, 346], "7500": [74, 303], "3455": [74, 303], "9045": [74, 303], "kaiser_bessel_derived_window": [74, 346], "suitabl": [74, 305, 306, 346, 600, 707, 754, 755, 761, 777, 801], "spectral": [74, 305, 306, 346], "analysi": [74, 305, 306, 346, 801, 802], "kaiser": [74, 300, 305, 306, 346], "70710677": [74, 305, 462, 463], "18493208": [74, 305, 346], "9827513": [74, 305, 346], "kaiser_window": [74, 346], "static_kaiser_window": [74, 306], "2049": [74, 306], "8712": [74, 306], "0367": [74, 306, 346], "7753": [74, 306], "static_blackman_window": 74, "window_length": [74, 300, 302, 305, 306, 316, 346], "static_eye_lik": 74, "static_hamming_window": 74, "static_hann_window": 74, "static_hann": 74, "static_kaiser_bessel_derived_window": 74, "static_mel_weight_matrix": 74, "static_tril_indic": 74, "static_unsorted_segment_min": 74, "static_unsorted_segment_sum": 74, "static_vorbis_window": 74, "vorbis_window": [74, 346], "vorbi": [74, 316, 346], "38268343": [74, 316], "92387953": [74, 316], "14943586": [74, 316, 346], "51644717": [74, 316], "85631905": [74, 316], "98877142": [74, 316], "tril_indic": [74, 346], "_containerwithdata_typeexperiment": [74, 94], "_containerwithdeviceexperiment": [74, 94], "_containerwithelementwiseexperiment": [74, 94], "0003": [74, 317, 591, 627], "0006": [74, 317, 341], "2345j": [74, 319], "5772": [74, 323], "9635": [74, 323], "4228": [74, 323], "9228": [74, 323], "mantissa": [74, 327, 349, 763], "frist": [74, 328, 349], "coord": [74, 328], "6055": [74, 329], "160": [74, 331], "10240": [74, 331], "60000038": [74, 332, 349], "0707": [74, 338, 349], "0579": [74, 338, 349], "static_allclos": 74, "static_binar": 74, "static_conj": 74, "static_copysign": 74, "static_count_nonzero": 74, "static_diff": 74, "static_digamma": 74, "57721537": 74, "96351004": 74, "static_fix": 74, "static_float_pow": 74, "static_fmax": 74, "static_fmod": 74, "static_frexp": 74, "static_gradi": 74, "static_hypot": 74, "static_isclos": 74, "static_ldexp": 74, "static_lerp": 74, "90000057": [74, 332, 349], "80000019": [74, 332, 349], "70000076": [74, 332, 349], "55000019": [74, 332, 349], "05000019": [74, 332, 349], "static_modf": 74, "static_nansum": 74, "static_nextaft": 74, "static_signbit": 74, "static_sinc": 74, "636": 74, "090": 74, "070": 74, "057": 74, "static_sparsify_tensor": 74, "static_xlogi": 74, "static_zeta": 74, "0244": [74, 341], "_containerwithgeneralexperiment": [74, 94], "_static_reduc": 74, "static_reduc": 74, "_containerwithgradientsexperiment": [74, 94], "_containerwithimageexperiment": [74, 94], "_containerwithlayersexperiment": [74, 94], "_static_fft": 74, "static_fft": 74, "673": [74, 373], "0507": [74, 373], "79711437": [74, 352, 373, 383], "94867325": [74, 352, 373, 383], "74089146": [74, 352, 373, 383], "25980937": [74, 352, 373, 383], "64958102": [74, 352, 373, 383], "2442648": [74, 352, 373, 383], "247306": [74, 385], "908323j": [74, 385], "494955": [74, 385], "90395j": [74, 385], "static_adaptive_avg_pool1d": 74, "static_adaptive_avg_pool2d": 74, "static_adaptive_max_pool2d": 74, "static_avg_pool1d": 74, "static_avg_pool2d": 74, "static_avg_pool3d": 74, "static_dct": 74, "182": 74, "253": [74, 282, 586], "515": [74, 597, 692], "467": 74, "static_dft": 74, "static_embed": 74, "static_idct": 74, "93732834": [74, 352, 373], "75048852": [74, 352, 373], "29723358": [74, 352, 383], "6950531": 74, "93914509": 74, "88008738": 74, "18951225": 74, "06697273": [74, 352, 383], "57439804": 74, "68861485": [74, 352, 383], "41308832": [74, 352, 383], "0700836": 74, "2449036": 74, "6711426": 74, "514": 74, "501709": 74, "4924011": 74, "static_ifft": 74, "static_ifftn": 74, "static_interpol": 74, "static_max_pool1d": 74, "static_max_pool2d": 74, "max_pool2dd": 74, "static_max_pool3d": 74, "static_rfftn": 74, "_containerwithlinearalgebraexperiment": [74, 94], "933034": [74, 353, 397], "eigenvealu": [74, 400, 623], "xx": [74, 400, 402, 623], "37228107": [74, 400, 623], "3722816": [74, 400, 623], "8245648": [74, 400, 623], "41597357": [74, 400, 623], "56576747": [74, 400, 623], "9093767": [74, 400, 623], "56155": [74, 401], "82842": [74, 401], "450": [74, 406], "static_adjoint": 74, "static_cond": 74, "static_diagflat": 74, "static_dot": 74, "static_eig": 74, "static_eigh_tridiagon": 74, "static_eigv": 74, "static_initialize_tuck": 74, "static_kron": 74, "kroneck": [74, 353, 405, 406], "static_make_svd_non_neg": 74, "static_matrix_exp": 74, "static_mode_dot": 74, "static_multi_dot": 74, "static_multi_mode_dot": 74, "static_partial_tuck": 74, "static_svd_flip": 74, "static_truncated_svd": 74, "static_tuck": 74, "_containerwithlossesexperiment": [74, 94], "_static_huber_loss": 74, "static_huber_loss": 74, "0575": [74, 417], "_static_l1_loss": 74, "static_l1_loss": 74, "_static_smooth_l1_loss": 74, "static_smooth_l1_loss": 74, "_static_soft_margin_loss": 74, "_containerwithmanipulationexperiment": [74, 94], "_static_fill_diagon": 74, "_static_unique_consecut": 74, "atleast": [74, 355, 424, 425, 426, 764], "ary1": [74, 355, 424, 425, 426], "ary2": [74, 355, 424, 425, 426], "broadcast_shap": [74, 97, 355], "static_concat_from_sequ": [74, 429], "30192195": [74, 441], "static_as_strid": 74, "static_atleast_1d": 74, "static_atleast_2d": 74, "static_atleast_3d": 74, "static_broadcast_shap": 74, "static_dsplit": 74, "static_dstack": 74, "static_expand": 74, "static_flatten": 74, "static_fliplr": 74, "static_flipud": 74, "static_fold": 74, "static_heavisid": 74, "static_hsplit": 74, "static_hstack": 74, "static_i0": 74, "static_matric": 74, "static_moveaxi": 74, "static_pad": 74, "static_partial_fold": 74, "static_partial_tensor_to_vec": 74, "static_partial_unfold": 74, "static_partial_vec_to_tensor": 74, "static_rot90": 74, "static_soft_threshold": 74, "static_take_along_axi": 74, "static_top_k": 74, "static_unfold": 74, "static_vsplit": 74, "static_vstack": 74, "_containerwithnormsexperiment": [74, 94], "16903085": [74, 462, 463], "50709254": [74, 462, 463], "84515423": [74, 462, 463], "44183609": [74, 462, 463], "56807494": [74, 462, 463], "69431382": [74, 462, 463], "static_batch_norm": 74, "static_group_norm": 74, "static_instance_norm": 74, "static_l1_norm": 74, "static_l2_norm": 74, "static_lp_norm": 74, "12500000": 74, "37500000": 74, "62500000": 74, "27500000": 74, "35000000": 74, "42500000": 74, "0000000": 74, "5000000": 74, "2500000": 74, "_containerwithrandomexperiment": [74, 94], "43643127": [74, 466], "32325703": [74, 466], "24031169": [74, 466], "34251311": [74, 466], "31692529": [74, 466], "3405616": [74, 466], "5319725": [74, 466], "22458365": [74, 466], "24344385": [74, 466], "26588406": [74, 466], "61075421": [74, 466], "12336174": [74, 466], "51142915": [74, 466], "25041268": [74, 466], "23815817": [74, 466], "64042903": [74, 466], "25763214": [74, 466], "10193883": [74, 466], "31624692": [74, 466], "46567987": [74, 466], "21807321": [74, 466], "37677699": [74, 466], "39914594": [74, 466], "22407707": [74, 466], "static_bernoulli": 74, "static_beta": 74, "static_dirichlet": 74, "static_gamma": 74, "static_poisson": 74, "_containerwithsearchingexperiment": [74, 94], "static_unravel_index": 74, "_containerwithsetexperiment": [74, 94], "_containerwithsortingexperiment": [74, 94], "invert_permut": [74, 362], "static_invert_permut": 74, "static_lexsort": [74, 86], "_containerwithstatisticalexperiment": [74, 94], "_static_cummax": 74, "static_cummax": 74, "_static_cummin": 74, "static_cummin": 74, "func_nam": [74, 481, 753, 765, 766, 770, 774], "static_bincount": 74, "static_corrcoef": 74, "static_cov": [74, 364, 478], "static_histogram": 74, "static_igamma": 74, "static_median": 74, "static_nanmean": 74, "static_nanmedian": 74, "static_nanprod": 74, "static_quantil": 74, "_containerwithutilityexperiment": [74, 94], "static_optional_get_el": 74, "_containerwithgener": [75, 94], "_static_all_equ": 75, "static_all_equ": 75, "_static_array_equ": 75, "a0": [75, 492], "static_array_equ": 75, "_static_assert_supports_inplac": 75, "_static_clip_matrix_norm": 75, "static_clip_matrix_norm": 75, "849": [75, 495, 496, 588], "_static_clip_vector_norm": 75, "static_clip_vector_norm": 75, "_static_einops_rearrang": 75, "static_einops_rearrang": 75, "_static_einops_reduc": 75, "static_einops_reduc": 75, "29333329": [75, 501, 588], "53000069": [75, 501, 588], "39666676": [75, 501, 588], "20666695": [75, 501, 588], "_static_einops_repeat": 75, "static_einops_repeat": 75, "_static_exist": 75, "detal": [75, 503], "_static_fourier_encod": 75, "static_fourier_encod": 75, "classivi": [75, 593, 599, 660, 702], "89858720e": 75, "79717439e": 75, "_static_gath": 75, "static_gath": 75, "_static_gather_nd": 75, "400": [75, 78, 352, 375, 376, 508, 532, 588, 591, 627], "static_gather_nd": 75, "_static_get_num_dim": 75, "static_get_num_dim": 75, "_static_has_nan": 75, "leafwis": 75, "static_has_nan": 75, "_static_inplace_decr": 75, "_static_inplace_incr": 75, "_static_inplace_upd": 75, "_static_is_arrai": 75, "static_is_arrai": 75, "_static_is_ivy_arrai": 75, "static_is_ivy_arrai": 75, "_static_is_native_arrai": 75, "static_is_native_arrai": 75, "_static_scatter_flat": 75, "_static_scatter_nd": 75, "static_scatter_nd": 75, "_static_stable_divid": 75, "22222222": 75, "11111111": 75, "857": [75, 546, 588], "444": 75, "_static_stable_pow": 75, "00012": [75, 547, 588], "00016": [75, 76, 547, 575, 588, 589], "00001": [75, 547, 588], "00032": [75, 547], "00256": [75, 547], "1679638": [75, 547], "395": [75, 547], "16777383": [75, 547], "_static_supports_inplace_upd": 75, "_static_to_list": 75, "static_to_list": 75, "_static_to_numpi": 75, "static_to_numpi": 75, "_static_to_scalar": 75, "static_to_scalar": 75, "_static_value_is_nan": 75, "452": 75, "static_value_is_nan": 75, "833": [75, 496], "items": [75, 93, 588], "static_isin": 75, "static_items": 75, "complex128": [75, 154, 155, 168, 177, 183, 297, 344, 526, 584, 588, 591, 624, 625, 630, 646, 751, 763], "static_strid": 75, "425": [75, 567], "_containerwithgradi": [76, 94], "_static_stop_gradi": 76, "static_stop_gradi": 76, "976": [76, 287, 569, 586, 589], "49e": [76, 569, 589], "74e": [76, 569, 589], "95e": [76, 569, 589], "024": [76, 569, 589], "096": [76, 569, 589], "216": [76, 79, 569, 589, 644], "626": [76, 569, 589], "en": [76, 569, 570, 589, 762], "wikipedia": [76, 569, 570, 589], "wiki": [76, 569, 570, 589], "stochastic_gradient_desc": [76, 569, 570, 589], "01099": [76, 570], "01003": [76, 570, 589], "01015": [76, 570, 589], "99936122": [76, 570, 589], "99936116": [76, 570, 589], "99936128": [76, 570, 589], "99936104": [76, 570, 589], "w_new": [76, 573, 589], "708": [76, 575, 589], "445": [76, 575, 589], "6e": [76, 575, 589], "00036": [76, 575, 589], "00049": [76, 575, 589], "layerwis": [76, 576, 589], "_containerwithimag": [77, 94], "_containerwithlay": [78, 94], "_static_conv1d": 78, "static_conv1d": 78, "_static_conv1d_transpos": 78, "static_conv1d_transpos": 78, "112": [78, 591, 601, 605, 634, 711], "_static_conv2d": 78, "ey": [78, 583, 590, 606, 612, 779, 786], "static_conv2d": 78, "_static_conv2d_transpos": 78, "static_conv2d_transpos": 78, "_static_conv3d": 78, "fdfh": [78, 608], "static_conv3d": 78, "_static_conv3d_transpos": 78, "static_conv3d_transpos": 78, "_static_depthwise_conv2d": 78, "inp": [78, 590, 612], "static_depthwise_conv2d": 78, "_static_dropout": 78, "static_dropout": 78, "_static_dropout1d": 78, "static_dropout1d": 78, "_static_dropout2d": 78, "_static_dropout3d": 78, "_static_linear": 78, "278": [78, 590, 613, 614], "static_linear": 78, "195": 78, "_static_lstm_upd": 78, "_static_multi_head_attent": 78, "_static_reduce_window": 78, "_static_scaled_dot_product_attent": 78, "static_scaled_dot_product_attent": 78, "39999962": [78, 590, 613, 614], "19999695": [78, 614], "11600018": [78, 614], "88399887": [78, 614], "196": [78, 590, 614], "306": [78, 590, 614], "19999981": [78, 590, 613, 617], "59249449": [78, 590, 617], "68226194": [78, 590, 617], "4000001": [78, 590, 613, 617], "19603825": [78, 590, 617], "9960382": [78, 590, 617], "26894283": [78, 590, 617], "40236187": [78, 590, 617], "39999437": [78, 590, 617], "59999037": [78, 590, 617], "35046196": [78, 590, 617], "54282808": [78, 590, 617], "39989519": [78, 590, 617], "5998764": [78, 590, 617], "_containerwithlinearalgebra": [79, 94], "_static_choleski": 79, "static_choleski": 79, "577": [79, 591, 618], "707": [79, 591, 618], "static_rol": [79, 81], "_static_cross": 79, "static_cross": 79, "_static_det": 79, "_static_diag": 79, "_static_diagon": 79, "static_diagon": 79, "_static_eigh": 79, "_static_eigvalsh": 79, "static_eigvalsh": 79, "51572949": [79, 591, 625], "17091519": [79, 591, 625], "3448143": [79, 591, 625], "88178420e": [79, 591, 625], "35898387e": [79, 591, 625], "46410179e": [79, 591, 625], "_static_inn": 79, "static_inn": 79, "_static_inv": 79, "static_inv": 79, "_static_matmul": 79, "matul": 79, "static_matmul": 79, "_static_matrix_norm": 79, "deimens": 79, "static_matrix_norm": 79, "_static_matrix_pow": 79, "_static_matrix_rank": 79, "static_matrix_rank": 79, "_static_matrix_transpos": 79, "static_matrix_transpos": 79, "_static_out": 79, "n1": [79, 136, 583], "n2": [79, 136, 583], "static_out": [79, 634], "_static_pinv": 79, "static_pinv": 79, "0426": 79, "0964": 79, "0605": 79, "1368": 79, "_static_qr": 79, "_static_slogdet": 79, "static_slogdet": 79, "6931472": 79, "0986123": 79, "_static_solv": 79, "_static_svd": 79, "static_svd": 79, "au": 79, "aS": 79, "avh": 79, "bu": [79, 792], "bvh": 79, "_static_svdv": 79, "_static_tensordot": 79, "_static_tensorsolv": 79, "_static_trac": 79, "static_trac": 79, "_static_vand": 79, "static_vand": 79, "343": [79, 279, 586, 644], "729": [79, 644, 785], "_static_vecdot": 79, "_static_vector_norm": 79, "static_vector_norm": 79, "77359247": [79, 646], "_static_vector_to_skew_symmetric_matrix": 79, "09861231": [79, 591, 637], "static_general_inner_product": 79, "3475602": [79, 639], "93765765": [79, 639], "58776021": [79, 639], "10416126": [79, 639], "80644298": [79, 639], "87024701": [79, 639], "48127627": [79, 639], "79101127": [79, 639], "98288572": [79, 639], "68917423": [79, 639], "_containerwithloss": [80, 94], "_static_binary_cross_entropi": 80, "static_binary_cross_entropi": 80, "511": [80, 592, 648, 650], "_static_cross_entropi": 80, "static_cross_entropi": 80, "20397282": 80, "83258148": 80, "60943794": [80, 591, 637], "_static_sparse_cross_entropi": 80, "static_sparse_cross_entropi": 80, "5108256": [80, 649], "609438": [80, 649], "_containerwithmanipul": [81, 94], "_static_clip": 81, "static_clip": 81, "_static_concat": 81, "_static_constant_pad": 81, "static_constant_pad": 81, "_static_expand_dim": 81, "static_expand_dim": 81, "container_axi": [81, 593, 654], "_static_flip": 81, "static_flip": 81, "_static_permute_dim": 81, "static_permute_dim": 81, "_static_repeat": 81, "static_repeat": 81, "_static_reshap": 81, "static_reshap": 81, "_static_rol": 81, "positivclip": 81, "_static_split": 81, "static_split": 81, "_static_squeez": 81, "static_squeez": 81, "_static_stack": 81, "leavv": 81, "static_stack": 81, "_static_swapax": 81, "_static_til": 81, "static_til": 81, "_static_unstack": 81, "static_unstack": 81, "_static_zero_pad": 81, "repreat": [81, 657], "_containerwithnorm": [82, 94], "34198591": [82, 596, 689], "04274819": [82, 596, 689], "29923761": [82, 596, 689], "24053511": [82, 596, 689], "62221265": [82, 689], "20277636": [82, 689], "41943574": [82, 689], "83710337": [82, 689], "_containerwithrandom": [83, 94], "_static_multinomi": 83, "_static_randint": 83, "static_randint": 83, "_static_random_norm": 83, "static_random_norm": 83, "651": 83, "_static_random_uniform": 83, "static_random_uniform": 83, "481": 83, "0999": 83, "_static_shuffl": 83, "static_shuffl": 83, "431": [83, 692], "274": [83, 692], "_containerwithsearch": [84, 94], "_static_argmax": 84, "static_argmax": 84, "_static_argmin": 84, "static_argmin": 84, "_static_argwher": 84, "static_argwher": 84, "_static_nonzero": 84, "_static_wher": 84, "static_wher": 84, "_containerwithset": [85, 94], "_static_unique_al": 85, "static_unique_al": 85, "_static_unique_count": 85, "static_unique_count": 85, "_static_unique_invers": 85, "static_unique_invers": 85, "_static_unique_valu": 85, "_containerwithsort": [86, 94], "_static_argsort": 86, "static_argsort": 86, "_static_searchsort": 86, "_static_sort": 86, "static_sort": 86, "static_msort": 86, "_containerwithstatist": [87, 94], "_static_cumprod": 87, "static_cumprod": 87, "_static_cumsum": 87, "static_cumsum": 87, "_static_prod": 87, "static_prod": 87, "11000001": [87, 715], "23100001": [87, 715], "30800003": [87, 601, 715], "_static_sum": 87, "_static_var": 87, "static_var": 87, "12666667": [87, 601, 718], "11555555": [87, 601, 718], "rtype": [87, 711, 741], "respectv": [87, 716], "81649649": [87, 716], "94280904": [87, 716], "509902": [87, 601, 716], "2472192": [87, 716], "44948983": [87, 716], "41421354": [87, 716], "contian": [87, 718], "6666667": [87, 718], "_containerwithutil": [88, 94], "_static_al": 88, "static_al": 88, "_static_ani": 88, "static_ani": 88, "add_ivy_container_instance_method": 89, "containerexampl": 89, "factorized_tensor": [90, 91, 92], "factorizedtensor": [90, 91, 92], "matrix_or_tensor": 90, "to_tensor": [90, 91, 92], "to_unfold": [90, 91, 92], "to_vec": [90, 91, 92], "cp_tensor": 91, "cptensor": [91, 310, 346], "cp_copi": 91, "cp_flip_sign": 91, "s_i": 91, "normalisation_weight": 91, "normalised_factor": 91, "cp_lstsq_grad": 91, "return_loss": 91, "nabla": 91, "mathcal": 91, "mathbf": 91, "factor_matric": 91, "cp_gradient": 91, "quantiti": 91, "cp_mode_dot": 91, "keep_dim": [91, 92], "cp_multi_mode_dot": 91, "cp_n_param": 91, "tensor_shap": [91, 92], "n_param": [91, 92], "cp_norm": 91, "cp_to_tensor": 91, "khatria": 91, "rao": [91, 353, 405], "khatri": [91, 353, 405], "cp_normal": 91, "normalis": 91, "u_1": 91, "u_n": 91, "v_1": 91, "v_n": 91, "v_k": 91, "u_k": 91, "absorb": 91, "refold": [91, 355, 437, 448], "cp_to_unfold": 91, "ie": 91, "s_u_i": 91, "exploit": [91, 804], "khatri_rao": [91, 353], "cp_to_vec": 91, "ravel": [91, 779], "unfolding_dot_khatri_rao": 91, "mttkrp": 91, "validate_cp_rank": 91, "percent": 91, "validate_cp_tensor": 91, "tucker_tensor": 92, "tucker_copi": 92, "tucker_mode_dot": [92, 808], "tucker_n_param": 92, "tucker_norm": 92, "tucker_to_tensor": 92, "skip_factor": 92, "transpose_factor": 92, "tucker_to_unfold": 92, "tucker_to_vec": 92, "validate_tucker_rank": 92, "fixed_mod": 92, "validate_tucker_tensor": 92, "_bisection_root_find": 92, "fun": [92, 568, 588, 595, 681, 762], "max_it": 92, "__abs__": [93, 94], "__add__": [93, 94, 758, 761, 765, 766, 769, 774, 775, 783], "__eq__": [93, 94], "__ge__": [93, 94], "__gt__": [93, 94, 779], "__le__": [93, 94], "__lt__": [93, 94], "__ne__": [93, 94], "__pow__": [93, 94, 783], "69678056": 93, "59876156": 93, "82660675": 93, "__radd__": [93, 94, 765, 766, 774], "__rrshift__": [93, 94], "__rshift__": [93, 94], "__rsub__": [93, 94], "__sub__": [93, 94, 758, 761, 765, 769, 783], "__truediv__": [93, 94, 758, 761, 765], "__xor__": [93, 94], "referenc": [93, 767, 773], "resid": [93, 97, 593, 654, 774, 781, 785], "mt": [93, 783], "hopefulli": [93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 791, 792, 793], "overview": [93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 725, 726, 728, 729, 731, 732, 733, 734, 760, 762, 776, 780], "reach": [93, 94, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 682, 725, 726, 728, 729, 731, 732, 733, 734, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 791, 792, 793, 800, 801], "eq": 94, "ge": 94, "le": 94, "ne": 94, "75979435": 94, "52153397": 94, "13532257": 94, "rshift": 94, "truediv": 94, "66666669": [94, 358, 463, 571, 589], "nested_arrai": [96, 97, 98, 760], "nestedarrai": 96, "nested_rank": [96, 97, 98], "inner_shap": [96, 97, 98], "nestedarraybas": [96, 97, 98], "classmethod": [96, 97], "from_row_length": 96, "row_length": 96, "from_row_split": 96, "row_split": 96, "ragged_map": 97, "ragged_multi_map": 97, "ragged_arrai": 97, "ragged_multi_map_in_funct": 97, "replace_ivy_arrai": 97, "unbind": 97, "nestedarrayelementwis": 98, "strictli": [103, 106, 109, 243, 580, 586, 769, 773], "behaviour": [103, 106, 270, 580, 586, 752, 755, 756, 757, 758, 761, 763, 764, 766, 767, 769, 770, 771, 773, 774, 776, 777, 783], "24000001": [103, 580], "703": [104, 580], "683": [104, 580], "408": [104, 580], "313": [104, 580], "437": [104, 580], "40337825": [105, 580], "56114835": [105, 580], "20788449": [105, 580], "231": [108, 580], "\u03b2": [109, 580], "66666667": [110, 364, 478, 580], "body_fn": [114, 115, 117, 582], "bodi": [114, 117, 582, 757, 776], "lst": [114, 582], "orelse_fn": [115, 582], "body1": [116, 582], "body2": [116, 582], "test_fn": [117, 582, 747, 796], "repeatedli": [117, 582, 595, 679, 762, 776], "ml_framework": [118, 583], "distanc": [118, 583], "adjac": [118, 583], "nestedsequ": [119, 120, 583], "typevar": [119, 120, 583], "supportsbufferprotocol": [119, 120, 583], "static_copy_arrai": [126, 583], "intdtyp": [129, 140, 145, 157, 168, 173, 180, 186, 297, 344, 583, 584], "interchang": [130, 583, 593, 663], "plu": [131, 583], "x00b": [131, 583], "x00d": [131, 583], "x00e": [131, 583], "66666663": [134, 583], "41588834": [135, 583], "7827941": [135, 583], "6227766": [135, 583], "23413252": [135, 583], "n3": [136, 583], "xv": [136, 583], "yv": [136, 583], "x_nativ": [137, 583, 773], "y_nativ": [137, 583], "z_nativ": [137, 583], "d_type": [139, 583], "col": [143, 312, 346, 583], "primari": [143, 162, 163, 195, 196, 312, 346, 362, 471, 505, 506, 583, 584, 585, 588, 753, 756, 759, 763, 771, 773, 774, 776, 779, 787, 789], "upward": [143, 312, 346, 583], "downward": [143, 312, 346, 583], "2xn": [143, 312, 346, 583], "subarrai": [143, 312, 346, 583], "incompat": [150, 584], "closest": [153, 232, 242, 243, 279, 289, 355, 449, 584, 586, 776, 779], "xtype": [153, 584], "ytype": [153, 584], "native_uint16": [153, 584], "complexdtyp": [154, 168, 177, 584], "set_default_complex_dtyp": [154, 183, 584], "4294": [154, 156, 584], "967346": [154, 156, 584], "set_default_dtyp": [155, 184, 584, 763, 770], "floatdtyp": [156, 179, 584], "set_default_float_dtyp": [156, 165, 177, 185, 584, 763], "int_dtyp": [157, 180, 584], "set_default_int_dtyp": [157, 165, 186, 584, 763], "4294967346": [157, 158, 584], "uint_dtyp": [158, 181, 584], "uint": [158, 173, 181, 187, 584, 763, 775], "uintdtyp": [158, 173, 181, 187, 584], "set_default_uint_dtyp": [158, 165, 187, 584], "native_bool": [160, 584], "followng": [161, 584], "ieee": [161, 219, 236, 241, 259, 269, 278, 283, 286, 581, 584, 586, 792], "754": [161, 219, 236, 241, 259, 269, 278, 283, 286, 581, 584, 586, 792], "smallest_norm": [161, 584], "bfloat16": [162, 584, 763, 774, 776, 777], "unsupport": [163, 196, 506, 584, 585, 588, 754, 774], "encapsul": [164, 584, 762], "314": [164, 276, 319, 349, 584, 586], "9223372036854775808": [164, 584], "9223372036854775807": [164, 584], "65535": [164, 584], "4294967295": [164, 584], "native_uint8": [166, 584], "hashabl": [170, 584], "type1": [174, 584], "type2": [174, 584], "array_api_promot": [174, 175, 584], "unexpect": [175, 243, 584, 586, 763], "default_complex_dtyp": [177, 584], "default_dtype_stack": [178, 184, 584], "unset_default_dtyp": [178, 584], "native_uint64": [178, 584], "default_float_dtyp": [179, 584, 763], "default_int_dtyp": [180, 186, 584, 763], "default_uint_dtyp": [181, 187, 584], "ret1": [182, 584], "ret2": [182, 584], "reset": [183, 184, 185, 186, 187, 213, 214, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 584, 585, 588, 764], "default_complex_dtype_stack": [183, 584], "default_float_dtype_stack": [185, 584], "native_float16": [188, 584], "unmodifi": [190, 585, 759, 763], "clear": [191, 585, 747, 753, 755, 759, 763, 764, 765, 774, 779, 781, 783, 791, 792, 793, 801], "aliv": [197, 202, 204, 509, 529, 530, 585, 588, 764], "139740789224448": [197, 585], "physic": [200, 585], "process_specif": [203, 215, 585], "percentag": [203, 585], "ram": [203, 211, 215, 585], "alon": [203, 215, 585, 747, 749, 768, 776], "036902561555": [203, 585], "7024003467681645": [203, 585], "as_native_dev": [203, 585], "7095597456708771": [203, 585], "attr_onli": [204, 585], "soft_device_mod": [206, 214, 585], "chunk": [207, 208, 209, 585], "split_factor": [207, 585, 767], "max_chunk_s": [209, 585], "chunk_siz": [209, 585], "input_ax": [209, 585], "output_ax": [209, 585], "usag": [209, 585, 763, 770, 773, 776, 781, 787, 792, 804], "fed": [209, 585, 785], "fist": [209, 585], "gb": [211, 215, 585, 754], "66700032": [211, 585], "589934592": [211, 585], "set_default_devic": [213, 585, 764], "set_soft_device_mod": [214, 585, 764], "219563008": [215, 585], "902400346": [215, 585], "525205504": [215, 585], "na": [216, 586, 776], "princip": [217, 221, 223, 338, 349, 586], "domain": [217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 257, 258, 260, 281, 282, 283, 286, 287, 338, 349, 586, 766, 799, 801], "codomain": [217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 257, 258, 260, 281, 282, 283, 286, 287, 338, 349, 586, 766], "\u03c0": [217, 221, 223, 224, 581, 586], "3\u03c0": [217, 224, 586], "unspecifi": [217, 218, 222, 225, 234, 239, 241, 243, 274, 278, 282, 283, 287, 353, 400, 586, 591, 593, 623, 624, 662, 773], "\u03c0j": [218, 222, 225, 257, 259, 586], "3\u03c0j": [218, 257, 259, 586], "x1_i": [219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 586, 757], "2019": [219, 236, 241, 259, 269, 586, 801, 804], "overflow": [219, 236, 243, 586, 591, 601, 637, 717, 752, 763], "commut": [219, 586], "tabl": [219, 236, 269, 540, 562, 586, 588, 729, 774, 778, 801], "dj": [219, 236, 269, 586], "bj": [219, 236, 269, 319, 349, 586], "invlov": [219, 586], "z1": [219, 586], "z2": [219, 586], "yj": [220, 586], "nanj": [222, 586], "809": [222, 586], "569": [222, 586], "733": [222, 586], "notat": [224, 586, 601, 711, 762], "denot": [224, 586, 731], "quadrant": [224, 586], "rai": [224, 586, 792], "bitwis": [226, 229, 231, 266, 586], "170": [230, 586], "243": [230, 586], "xor": [231, 266, 586], "654": [233, 586], "ci": [234, 239, 241, 282, 586, 757, 763, 768, 775, 776, 787], "368": [234, 586], "670": [234, 586], "202": [234, 586, 757], "548": [234, 586], "1490": [234, 586], "57079633": [235, 586], "14159265": [235, 586], "71238898": [235, 586], "28318531": [235, 586], "02617994": [235, 586], "87266463": [235, 586], "01919862": [235, 586], "03839725": [235, 586], "05759586": [235, 586], "07679449": [235, 586], "09599311": [235, 586], "11519173": [235, 586], "35081118": [235, 586], "88139129": [235, 586], "underflow": [236, 243, 586, 591, 637, 763], "textbook": [236, 269, 586], "frac": [236, 258, 260, 280, 282, 286, 352, 358, 379, 380, 384, 385, 458, 460, 586], "ac": [236, 269, 586, 741], "bd": [236, 269, 586], "bc": [236, 269, 586, 741], "versu": [236, 269, 274, 586], "riemann": [236, 269, 586], "sphere": [236, 269, 586], "c99": [236, 269, 586], "infinit": [236, 269, 283, 586], "unlik": [236, 269, 586, 757, 762, 765, 792, 806, 808], "698": [236, 586], "cut": [239, 241, 281, 282, 283, 286, 586, 791, 807], "08553692": [239, 586], "567": [239, 586], "00344786": [239, 586], "76297021": [239, 586], "197948": [239, 586], "53253174": [239, 586], "accur": [241, 259, 586, 591, 637, 771], "fdlibm": [241, 259, 586], "compliant": [241, 259, 264, 265, 586, 601, 712, 713, 714, 716], "potenti": [241, 259, 586, 747, 753, 754, 762, 763, 774, 780, 804], "632": [241, 586], "20e": [241, 586], "72e": [241, 586], "greatest": [242, 243, 246, 586], "pep": [243, 586, 769], "disambigu": [243, 586, 772], "former": [243, 586, 763, 766, 774], "latter": [243, 586, 757, 759, 763, 766, 774], "overload": [243, 586, 776], "led": [243, 586, 757, 803], "subtl": [243, 586, 763, 807], "bug": [243, 586, 747, 753, 755, 760, 768, 774, 776, 788], "ambigu": [243, 586], "semant": [243, 278, 586, 763, 781, 786, 791, 802], "ill": [243, 586], "surpris": [243, 586, 787], "arrau": [249, 586], "log_": [258, 260, 586], "742": [259, 586], "hanl": [260, 586], "recommend": [264, 265, 278, 586, 601, 713, 716, 754, 759, 760, 768, 771, 772, 795], "negat": [271, 319, 349, 586], "omplex": [272, 586], "52095687": [274, 586], "92457771": [274, 586], "49372482": [274, 586], "22738838": [274, 586], "156": [274, 586], "5877228": [274, 586], "189": [275, 586], "252": [275, 586], "315": [275, 586], "378": [275, 586], "1150": [275, 586], "2890": [275, 586], "172": [275, 586], "487": [275, 586, 590, 614], "344": [275, 586], "355j": [276, 319, 349, 586], "55j": [276, 319, 349, 586], "primarili": [278, 586, 753, 761, 801], "reason": [278, 287, 586, 753, 755, 757, 758, 761, 762, 763, 765, 770, 773, 774, 776, 777, 779, 781, 783, 792, 807], "counterpart": [279, 586, 761, 771], "deliber": [279, 586, 779], "imprecis": [279, 586], "5654": [279, 586], "034": [279, 586], "433": [279, 572, 574, 586, 589], "known": [280, 586, 728, 757, 762, 763, 774, 776], "signum": [280, 586], "operatornam": [280, 282, 586, 591, 624], "textrm": [280, 586], "932": [281, 586], "746": [281, 586], "657": [281, 496, 586, 588], "indistinguish": [283, 586], "convent": [283, 586, 591, 601, 629, 711, 755, 759, 769, 777, 791, 807], "infti": [283, 586], "32455532": [283, 586], "89897949": [283, 586], "169": [283, 586], "analyt": [286, 586, 801, 803, 807], "pole": [286, 586], "546": [286, 586, 590, 614], "916": [286, 586, 592, 648], "996": [286, 586], "histor": [287, 586], "stem": [287, 586, 773], "older": [287, 586], "advis": [287, 586, 774], "462": [287, 586], "604": [287, 586], "984": [287, 586], "997": [287, 586], "0375": [289, 586], "032": [289, 586], "57258511": [291, 344], "69999999": [291, 344, 579, 589], "90928203": [291, 344], "98772264": [291, 344], "99591321": [291, 344], "99863964": [291, 344], "69880581": [291, 344], "18126924": [291, 344], "20141329": [293, 344], "40318608": [293, 344], "48683619": [293, 344], "46328247": [293, 344], "59813893": [293, 344], "43748799": [293, 344], "parametr": [294, 344, 757, 776, 801], "6705687": [296, 344], "52016652": [296, 344], "40560818": [296, 344], "45630932": [296, 344], "2689": [298, 344], "7310": [298, 344], "7615": [298, 344], "2784": [298, 344], "7168": [298, 344], "8708": [298, 344], "4374": [298, 344], "1379": [298, 344], "0089": [298, 344], "taper": [300, 303, 346], "summat": [300, 346, 601, 711, 741], "leakag": [300, 346], "slightli": [300, 346, 749, 761, 774, 776, 781, 785], "wors": [300, 346, 792], "y1": [301, 346], "0800": [302, 346], "3979": [302, 346], "9121": [302, 346], "5400": [302, 346], "han": [303, 346], "ith": [304, 346], "00726415": [305, 346], "9999736": [305, 346], "2773e": [306, 346], "0172e": [306, 346], "9294e": [306, 346], "4149": [306, 346], "9138": [306, 346], "5529": [306, 346], "multidimension": [308, 309, 346, 801], "orthogon": [310, 311, 346, 353, 400, 413, 416, 591, 623, 624], "normalise_factor": [310, 346], "cp": [310, 346, 755], "complementari": [316, 346, 799, 807], "38268346": [316, 346], "38268352": [316, 346], "8563191": [316, 346], "14943568": [316, 346], "arrrai": [319, 349], "position": [325, 349], "inexact": [325, 349], "triangl": [329, 349], "999999e": [330, 349], "65999985": [332, 349], "52000046": [332, 349], "1500001": [332, 349, 501, 588], "11259177": [333, 349], "3574118": [333, 349], "20097363": [333, 349], "suppli": [337, 349, 355, 444, 741, 758, 760, 776], "217234": [338, 349], "hurwitz": [341, 349], "custom_grad_func": [343, 351], "bind": [343, 351, 753, 772, 800, 801], "upstream": [343, 351, 754, 755, 757, 772], "sequence_length": 344, "ndenumer": 346, "ndindex": 346, "random_cp": 346, "random_tuck": 346, "bind_custom_gradient_funct": [351, 772], "area_interpol": 352, "division_overrid": [352, 370], "avg": [352, 370, 372, 393], "dimensio": [352, 371], "tranform": [352, 373, 383], "01823380e": [352, 373, 383], "15385818e": [352, 373, 383], "36371466e": [352, 373, 383], "38763905e": [352, 373, 383], "60722279e": [352, 373, 383], "80319249e": [352, 373, 383], "05617893e": [352, 373, 383], "21500000e": [352, 373, 383], "24000015e": [352, 373, 383], "90734863e": [352, 373, 383], "10000420e": [352, 373, 383], "15899994e": [352, 373, 383], "24000053e": [352, 373, 383], "81469727e": [352, 373, 383], "09999847e": [352, 373, 383], "4135742": [352, 373, 383], "6779785": [352, 373, 383], "3770599": [352, 373, 383], "8719864": [352, 373, 383], "72109985": [352, 373, 383], "52869415": [352, 373, 383], "79182434": [352, 373, 383], "72489166": [352, 373, 383], "container_n": [352, 373, 383], "container_typ": [352, 373, 383, 588], "container_norm": [352, 373, 383], "1580677": [352, 373], "89422607": [352, 373], "86190414": [352, 373], "00041008": [352, 373], "75149155": [352, 373], "97056389": [352, 373], "87819386": [352, 373], "89381361": [352, 373], "50000000e": [352, 373, 383], "22044605e": [352, 373, 383], "ed": [352, 375, 376, 377], "rest": [352, 355, 375, 376, 377, 430, 754, 760, 762, 776, 786, 803], "4d": [352, 376, 377], "5d": [352, 377, 729], "emb": [352, 378], "51285338": [352, 378], "87183261": [352, 378], "2308116": [352, 378], "02733949e": [352, 379], "00j": [352, 379], "49660576e": [352, 379], "68178638e": [352, 379], "01j": [352, 379, 384], "98912367e": [352, 379], "21802426e": [352, 379, 384], "04549134e": [352, 379, 384], "82842712e": [352, 379, 384], "86902654e": [352, 379, 384], "25501143e": [352, 379, 384], "32978028e": [352, 379, 384], "52068201e": [352, 379, 384], "71158374e": [352, 379, 384], "generate_einsum_equ": 352, "get_interpolate_kernel": 352, "27279224e": [352, 383], "44232273e": [352, 383], "70464332e": [352, 383], "73454881e": [352, 383], "00902849e": [352, 383], "10039906e": [352, 383], "07022366e": [352, 383], "69506073": [352, 383], "93914604": [352, 383], "88008881": [352, 383], "18951607": [352, 383], "57439613": [352, 383], "15318303e": [352, 384], "15148591e": [352, 384], "19j": [352, 384], "25000000e": [352, 384], "35378602e": [352, 384], "02j": [352, 384], "65404249e": [352, 384], "17611649e": [352, 384], "24320230e": [352, 384], "79344813e": [352, 384], "22374531e": [352, 384], "45929364e": [352, 384], "14208718e": [352, 384], "07177031e": [352, 384], "indexerror": [352, 385, 395, 593, 654, 742, 767], "interp": [352, 779], "xp": [352, 386, 757], "fp": [352, 386], "nd": [352, 387], "bicubic_tensorflow": [352, 387, 779], "max_unpool1d": 352, "unpool": [352, 391], "pool_result": [352, 391], "unpool_result": [352, 391], "nearest_interpol": 352, "window_shap": [352, 393], "pool_typ": [352, 393], "99038106j": [352, 395], "33012702": [352, 395], "23205081j": [352, 395], "33012702j": [352, 395], "superdiagon": [353, 398, 591, 621], "subdiagon": [353, 398, 591, 621], "eigendecomposit": [353, 400, 591, 623, 624], "qlq\u1d40": [353, 400, 591, 623, 624], "behav": [353, 400, 591, 623, 757, 767, 771, 773, 774, 775, 783, 802], "tridiagon": [353, 401], "38196602": [353, 401], "61803389": [353, 401], "35048741": [353, 401], "56710052": [353, 401], "06693714": [353, 401], "74234426": [353, 401], "56155282": [353, 401], "56155276": [353, 401], "82842714": [353, 401], "82842731": [353, 401], "necessarili": [353, 402, 758, 761], "generalis": [353, 403], "random_st": [353, 404], "skip_matrix": [353, 405, 407], "khatri_rao_product": [353, 405], "kronecker_product": [353, 407], "n_column": [353, 407], "nnmf": [353, 408], "hoi": [353, 413, 416], "determinist": [353, 414], "borrow": [353, 414, 756], "scikit": [353, 414, 792], "extmath": [353, 414], "mae": [354, 418], "log_poisson_loss": 354, "compute_full_loss": [354, 419, 730], "likelihood": [354, 419], "assumpt": [354, 419], "minu": [354, 419], "factori": [354, 419], "stirl": [354, 419], "favor": [354, 419], "28402555": [354, 419], "03402555": [354, 419], "1573164": [354, 419], "3467": [354, 420], "0133": [354, 420], "0250": [354, 420], "0056": [354, 420], "0025": [354, 420], "0675": [354, 420], "hing": [354, 421], "6987": [354, 421], "1606": [354, 421], "3711": [354, 421], "4032": [354, 421], "6931": [354, 421], "whilst": [355, 424, 425, 426, 786, 789, 801], "ary3": [355, 426], "mod": [355, 428, 757], "tall": [355, 433], "appear": [355, 435, 436, 568, 588, 754, 755, 757, 774, 779, 795], "horizot": [355, 440], "shortcut": [355, 444, 754], "linear_ramp": [355, 444], "reflect": [355, 444, 749, 755, 758, 773, 776], "ramp": [355, 444], "mirror": [355, 444, 753, 801], "padding_func": [355, 444], "iaxis_pad_width": [355, 444], "iaxi": [355, 444], "unalt": [355, 444], "put_along_axi": 355, "put": [355, 449, 747, 753, 776, 787, 807], "shrinkag": [355, 451], "elimin": [355, 455, 754], "consecut": [355, 455], "batch_mean": [358, 458, 460], "batch_var": [358, 458, 460], "running_vari": [358, 458, 460], "42857143": [358, 463], "5714286": [358, 463], "distrubut": [359, 464], "paramter": [359, 464], "multivari": [359, 466], "bayesian": [359, 466], "supposedli": [362, 470], "indirect": [362, 471], "secondari": [362, 471], "is_ivy_sparse_arrai": 363, "is_native_sparse_arrai": 363, "native_sparse_arrai": 363, "coo_indic": [363, 474], "crow_indic": [363, 474], "col_indic": [363, 474], "ccol_indic": [363, 474], "row_indic": [363, 474], "dense_shap": [363, 474], "native_sparse_array_to_indices_values_and_shap": 363, "nativesparsearrai": 363, "sparsearrai": 363, "linalg": [364, 478, 591, 637, 753, 773, 775], "aw": [364, 478, 792], "48447205": [364, 478], "c0": [364, 481], "ck": [364, 481], "i1": [364, 481], "c2": [364, 481], "nearest_jax": [364, 487], "compile_on_next_step": [491, 588, 730, 731, 733, 785], "recalcul": [494, 588], "my_sum": [494, 588], "val1": [494, 588], "val2": [494, 588], "cached_sum": [494, 588], "line_eq": [494, 588], "slp": [494, 588], "itc": [494, 588], "cached_line_eq": [494, 588], "0353": [495, 588], "424": [495, 588], "176": [495, 588], "339": [495, 588], "271": [495, 588], "391": [495, 588], "417": [496, 588], "583": [496, 588], "0667": [496, 588], "267": [496, 588], "131": [496, 588], "263": [496, 588], "394": [496, 588, 597, 695], "526": [496, 588], "788": [496, 588], "default_str": [499, 588], "46999979": [500, 588], "66000009": [500, 588], "93000001": [500, 588], "29000092": [500, 588], "33999991": [500, 588], "6400001": [500, 588], "96000004": [500, 588], "36000013": [500, 588], "51999998": [500, 588], "67000008": [500, 588], "30000001": [500, 588, 599, 702], "suppos": [500, 588, 763, 776], "960": [500, 588], "3600": [500, 588], "h1": [500, 588], "w1": [500, 588], "40499985": [501, 588], "61000061": [501, 588], "incas": [505, 506, 588], "max_depth": [512, 588, 595, 682], "seen_set": [512, 588], "local_set": [512, 588], "ivyexcept": [517, 549, 588, 742, 764, 767, 771, 773, 774, 777], "allow_dupl": [527, 588], "context": [528, 588, 754, 755, 759, 763, 764, 765], "fork": [528, 588, 748, 757, 762], "forkserv": [528, 588], "spawn": [528, 588], "consol": [530, 588, 755, 768, 776, 783], "garbag": [530, 588], "collector": [530, 588], "get_all_arrays_in_memori": [530, 588], "frontend": [534, 588, 747, 752, 755, 756, 762, 763, 767, 772, 776, 779, 780, 782, 789, 796, 801], "exept": [534, 588], "exception_trace_mod": [534, 557, 588, 778], "lenient": [535, 558, 588], "inplace_mod": [535, 558, 588], "break": [535, 588, 747, 759, 763, 769, 777, 787], "strict": [535, 558, 588], "infus": [536, 588], "nestable_mod": [539, 561, 588, 778], "effeci": [540, 562, 588, 778], "promtion": [540, 588], "precise_mod": [540, 562, 588, 778], "shape_array_mod": [542, 564, 588, 778], "show_func_wrapper_trace_mod": [543, 565, 588, 778], "tmp_dr": [544, 588], "tmp_dir": [544, 566, 588, 778], "my_tmp": [544, 588], "49999999999975": [546, 588], "5015015015010504": [546, 588], "000444502911705e": [546, 588], "9999999999995j": [546, 588], "00000262": [547, 588], "15605032": [547, 588], "01208451j": [547, 588], "00048": [547, 588], "1296": [547, 588], "00864": [547, 588], "2048": [547, 588], "isn": [549, 588, 755, 771, 773, 784, 787, 803], "possibli": [551, 588, 776, 787], "100000023841858": [551, 588], "200000047683716": [551, 588], "299999952316284": [551, 588], "400000095367432": [551, 588], "599999904632568": [551, 588], "dictionai": [555, 588], "hemant": [555, 588], "unset_shape_array_mod": [556, 588], "set_exception_trace_mod": [557, 588, 767], "set_inplace_mod": [558, 588], "set_min_bas": [559, 588], "set_min_denomin": [560, 588], "set_nestable_mod": [561, 588], "set_precise_mod": [562, 588], "set_queue_timeout": [563, 588], "set_shape_array_mod": [564, 588], "set_show_func_wrapper_trace_mod": [565, 588, 767], "set_tmp_dir": [566, 588], "my_dir": [566, 588], "451": [567, 588], "in_ax": [568, 588], "out_ax": [568, 588], "thereof": [568, 588], "summaris": [568, 588], "99999998": [569, 589], "09999998": [569, 589], "19999998": [569, 589], "00000001": [569, 589], "00300001": [569, 589], "00800001": [569, 589], "0125": [569, 589], "17294501": [569, 589], "15770318": [569, 589], "20863818": [569, 589], "90000075": [570, 589], "90000164": [570, 589], "9000032": [570, 589], "50000012e": [570, 589], "92558754": [570, 589], "92558694": [570, 589], "92558682": [570, 589], "92558861": [570, 589], "60000025e": [570, 589], "01024": [570, 589], "retain_grad": [571, 589], "func_ret": [571, 589, 772], "666666": [571, 589], "333332": [571, 589], "66666675": [571, 579, 589], "argnum": [572, 589], "933": [572, 574, 589], "jacobian": [574, 589, 787, 801], "jac_fn": [574, 589], "639": [575, 589], "361": [575, 589], "value_grad": [579, 589], "42333412": [579, 589], "5333333": [579, 589], "93333334": [579, 589], "43333334": [579, 589], "0666666": [579, 589], "softsign": 580, "718281828459045": 581, "euler": 581, "141592653589793": 581, "cast_bool": 582, "cmp_i": 582, "cmp_isnot": 582, "for_loop": 582, "if_els": 582, "try_except": 582, "while_loop": 582, "asarray_handle_nest": 583, "asarray_infer_devic": 583, "asarray_infer_dtyp": 583, "asarray_inputs_to_native_shap": 583, "asarray_to_native_arrays_and_back": 583, "as_ivy_dtyp": [584, 774], "as_native_dtyp": 584, "check_float": 584, "closest_valid_dtyp": 584, "default_dtyp": [584, 763, 770], "dtype_bit": 584, "function_supported_dtyp": [584, 763, 776], "function_unsupported_dtyp": [584, 763], "infer_default_dtyp": 584, "invalid_dtyp": [584, 763], "is_hashable_dtyp": 584, "is_native_dtyp": 584, "promote_typ": [584, 763], "promote_types_of_input": [584, 763, 773], "type_promote_arrai": [584, 763], "unset_default_complex_dtyp": 584, "unset_default_float_dtyp": 584, "unset_default_int_dtyp": 584, "unset_default_uint_dtyp": 584, "valid_dtyp": 584, "defaultcomplexdtyp": 584, "defaultdtyp": 584, "defaultfloatdtyp": 584, "defaultintdtyp": 584, "defaultuintdtyp": 584, "as_ivy_dev": [585, 783], "clear_cached_mem_on_dev": 585, "dev_util": [585, 764], "function_supported_devic": 585, "function_unsupported_devic": 585, "get_all_ivy_arrays_on_dev": [585, 764], "handle_soft_device_vari": [585, 764], "num_cpu_cor": [585, 764], "num_gpu": [585, 764, 776], "num_ivy_arrays_on_dev": 585, "percent_used_mem_on_dev": 585, "print_all_ivy_arrays_on_dev": 585, "set_split_factor": [585, 767], "split_func_cal": 585, "total_mem_on_dev": [585, 764], "tpu_is_avail": 585, "unset_default_devic": [585, 764], "unset_soft_device_mod": [585, 764], "used_mem_on_dev": 585, "defaultdevic": [585, 764], "profil": 585, "save_dir": 585, "arg_info": 588, "arg_nam": 588, "cache_fn": [588, 770], "current_backend_str": [588, 776, 781, 783], "function_supported_devices_and_dtyp": 588, "function_unsupported_devices_and_dtyp": 588, "get_item": [588, 773], "get_referrers_recurs": 588, "inplace_arrays_support": 588, "inplace_variables_support": 588, "is_ivy_nested_arrai": 588, "isscalar": 588, "match_kwarg": 588, "num_arrays_in_memori": 588, "print_all_arrays_in_memori": 588, "set_item": 588, "to_ivy_shap": 588, "to_native_shap": 588, "try_else_non": 588, "unset_array_mod": [588, 778], "unset_exception_trace_mod": 588, "unset_inplace_mod": 588, "unset_min_bas": 588, "unset_min_denomin": 588, "unset_nestable_mod": 588, "unset_precise_mod": 588, "unset_queue_timeout": 588, "unset_show_func_wrapper_trace_mod": 588, "unset_tmp_dir": 588, "vmap": [588, 787, 801], "arraymod": 588, "precisemod": [588, 763], "jac": 589, "value_and_grad": [589, 772], "neural": [590, 725, 729, 747, 796, 797, 799, 800, 801, 805, 807, 808], "feature_group_count": [590, 603, 610, 611], "oiw": [590, 603, 604, 610], "oihw": [590, 603, 606, 610], "oidhw": [590, 603, 607, 608, 610], "dhwio": [590, 603, 604, 607, 608, 610], "conv_general_dil": [590, 774], "conv_general_transpos": 590, "depthwis": [590, 612, 729], "overfit": [590, 613], "overal": [590, 613, 761, 763, 764, 766, 786, 795, 797, 799, 800, 801], "1428566": [590, 613], "49000001": [590, 613], "55599999": [590, 613], "21000004": [590, 613], "incom": [590, 614], "666": [590, 591, 614, 630], "4269": [590, 614], "911": [590, 614, 767], "157": [590, 614], "753": [590, 614], "545": [590, 597, 614, 693], "547": [590, 614, 764], "124": [590, 614], "852": [590, 614], "963": [590, 614], "98495483": [590, 614], "0293808": [590, 614], "0159359": [590, 614], "74752808": [590, 614], "20942307": [590, 614], "3205719": [590, 614], "long": [590, 615, 754, 755, 762, 763, 765, 767, 774, 781, 801], "unrol": [590, 615, 781, 784], "lstm": [590, 615, 729, 781, 801], "multi": [590, 591, 616, 619, 729, 765, 780, 787, 797, 799, 801, 805], "paper": [590, 616, 747, 793], "vaswani": [590, 616], "al": [590, 616], "num_attention_head": [590, 616], "key_dim": [590, 616, 729], "value_dim": [590, 616, 729], "query_dim": [590, 616], "measur": [590, 616, 729], "new_": [590, 616], "attention_weight": [590, 616], "attenion_weight": [590, 616], "out_feat_dim": [590, 616], "23333359": [590, 617], "03946018": [590, 617], "0280633": [590, 617], "29981947": [590, 617], "29981089": [590, 617], "06345534": [590, 617], "9634552": [590, 617], "19336844": [590, 617], "09336829": [590, 617], "axisa": [591, 619], "axisb": [591, 619], "axisc": [591, 619], "293": [591, 620], "46997": [591, 620], "explicitli": [591, 624, 625, 641, 729, 730, 731, 757, 758, 759, 761, 763, 766, 767, 770, 771, 772, 773, 775, 776, 781, 787, 796, 801], "45033181e": [591, 625], "02829754e": [591, 625], "54220343e": [591, 625], "12647155e": [591, 625], "38447177e": [591, 625], "56155300e": [591, 625], "26794919": [591, 625], "7320509": [591, 625], "0012": [591, 627], "00342": [591, 627], "000565": [591, 627], "0104": [591, 627], "000981": [591, 627], "00282": [591, 627], "000766": [591, 627], "0322": [591, 627], "00237": [591, 627], "000151": [591, 627], "00101": [591, 627], "00019": [591, 627], "0214": [591, 627], "00171": [591, 627], "0107": [591, 627], "0167": [591, 627], "0472": [591, 627], "0536": [591, 627], "0177": [591, 627], "000429": [591, 627], "00762": [591, 627], "lu_factor": 591, "pivot": [591, 628], "lu": [591, 628], "frobeniu": [591, 630], "nuclear": [591, 630], "induc": [591, 630], "ranl": [591, 630], "47722558": [591, 630], "776": [591, 630], "6000004": [591, 630], "118": [591, 631], "moor": [591, 635], "penros": [591, 635], "deteremin": [591, 637], "logsabsdet": [591, 637], "although": [591, 637, 758, 761, 774, 779, 799, 801], "subject": [591, 637], "solut": [591, 638, 747, 754, 755, 761, 763, 775, 776, 779, 799, 803], "ordin": [591, 638], "usvh": [591, 639], "cetera": [591, 639], "86217213": [591, 640], "31816804": [591, 640], "615": [591, 640], "ss": [591, 640], "25994301": [591, 640], "16403675": [591, 640], "61529762": [591, 640], "51231241": [591, 640], "39777088": [591, 640], "15413129": [591, 640], "1029852": [591, 640], "01383495": [591, 640], "86647356": [591, 640], "7786541": [591, 640], "55970621": [591, 640], "16857576": [591, 640], "86412698": [591, 640], "37566757": [591, 640], "88477993": [591, 640], "95925522": [591, 640], "6444726": [591, 640], "54687881": [591, 640], "16134834": [591, 640], "35037804": [591, 640], "31025076": [591, 640], "35769391": [591, 640], "transposit": [591, 641], "success": [591, 601, 643, 715, 717, 762, 792], "0x": [591, 644], "Such": [591, 644, 770, 776], "progress": [591, 644, 754, 755, 786], "alexandr": [591, 644], "theophil": [591, 644], "9000001": [591, 646], "64158917": [591, 646], "skew": [591, 647], "6666193": [592, 648], "67164493e": [592, 648], "05471958e": [592, 648], "32684899e": [592, 648], "30496836e": [592, 648], "e501": [592, 648, 729], "05393649": [592, 648], "49992943": [592, 648], "83330965": [592, 648], "35667494": [592, 650], "79329094": [592, 650], "512926": [592, 650], "outsid": [593, 651, 662, 763, 764, 770, 783, 806], "honor": [593, 658], "beyond": [593, 659, 766, 774, 807], "famili": [593, 662], "intxx": [593, 662], "floatxx": [593, 662], "construct": [593, 664, 729, 732, 733, 734, 781, 785, 786, 799, 801, 808], "rep": [593, 664], "fomaml_step": 594, "inner_cost_fn": [594, 667, 668, 669], "outer_cost_fn": [594, 667, 668], "inner_grad_step": [594, 667, 668, 669], "inner_learning_r": [594, 667, 668, 669], "inner_optimization_step": [594, 667, 668, 669], "inner_batch_fn": [594, 667, 668], "outer_batch_fn": [594, 667, 668], "average_across_step": [594, 667, 668], "inner_v": [594, 667, 668], "keep_inner_v": [594, 667, 668], "outer_v": [594, 667, 668], "keep_outer_v": [594, 667, 668], "return_inner_v": [594, 667, 668, 669], "num_task": [594, 667, 668, 669], "maml": [594, 667, 668], "0x7f447a274b80": [594, 667, 668, 669], "maml_step": 594, "vanilla": [594, 668, 785, 801], "recev": [594, 668], "reptile_step": 594, "cost_fn": [594, 669], "reptil": [594, 669], "_variabl": [594, 669], "batch_in": [594, 669], "4485182": [594, 669], "139": [594, 669], "9569855": [594, 669], "9880483": [594, 669], "01766968": [594, 669], "02197957": [594, 669], "02197981": [594, 669], "all_nested_indic": 595, "include_nest": [595, 670], "_index": [595, 670, 681], "_base": [595, 670, 680, 681, 773], "extra_nest_typ": [595, 670, 671, 680, 681, 682], "themselv": [595, 670, 761, 763, 764, 766, 770, 774, 785, 798, 807], "copy_nest": 595, "to_mut": [595, 671, 682], "deepli": [595, 671, 787, 801], "mutabl": [595, 671, 677, 678, 682, 687, 688, 759], "copied_nest": [595, 671], "1337": [595, 671, 682], "duplicate_array_index_chain": 595, "index_nest": [595, 770], "insert_into_nest_at_index": 595, "insert_into_nest_at_indic": 595, "onto": [595, 676, 682, 790, 791, 801], "special_squar": [595, 676], "6666666666666667": [595, 676], "special_pow": [595, 676], "linear_model": [595, 676], "map_nest_at_index": 595, "shallow": [595, 677, 678, 682, 687, 688], "_result": [595, 677, 687], "hh": [595, 677, 682], "map_nest_at_indic": 595, "ub": [595, 678], "tb": [595, 678], "multi_index_nest": 595, "nested_ani": 595, "check_nest": [595, 680, 681], "conditon": [595, 680, 681], "nested_argwher": 595, "stop_after_n_found": [595, 681], "nested_indic": [595, 681], "nested_map": [595, 764, 770], "_depth": [595, 682], "_tuple_check_fn": [595, 682], "_list_check_fn": [595, 682], "_dict_check_fn": [595, 682], "wherebi": [595, 682, 753, 798], "ah": [595, 682], "bh": [595, 682], "ch": [595, 682], "dh": [595, 682, 757], "eh": [595, 682], "gh": [595, 682, 754], "ih": [595, 682], "1338": [595, 682], "nested_multi_map": 595, "index_chain": [595, 683], "nest0": [595, 683], "ivy_arrai": [595, 683, 758, 774], "unappli": [595, 683], "prune_empti": 595, "prune_nest_at_index": 595, "prune_nest_at_indic": 595, "set_nest_at_index": 595, "set_nest_at_indic": 595, "xyz": [595, 688], "pqr": [595, 688], "mini": [596, 689, 729, 732], "uniformli": [597, 691, 693], "22346112": [597, 692], "0922": [597, 692], "49671414": [597, 692], "1382643": [597, 692], "64768857": [597, 692], "5230298": [597, 692], "23415337": [597, 692], "23413695": [597, 692], "9213753": [597, 692], "12818667": [597, 692], "799": [597, 692], "469": [597, 692], "287": [597, 692], "0366": [597, 692], "26431865": [597, 693], "475": [597, 693], "878": [597, 693], "861": [597, 693], "929": [597, 693], "789": [597, 693], "519": [597, 693], "0435": [597, 693], "381": [597, 693], "4608004": [597, 693], "8458502": [597, 693], "67270088": [597, 693], "31128597": [597, 693], "zeroel": [598, 699], "guarante": [599, 701, 703, 758, 763, 773, 787, 793], "aggreg": [599, 701, 762], "fourth": [599, 701], "1141": [599, 701], "8101": [599, 701], "9298": [599, 701], "8460": [599, 701], "2119": [599, 701], "3519": [599, 701], "6252": [599, 701], "4033": [599, 701], "7443": [599, 701], "2577": [599, 701], "3707": [599, 701], "0545": [599, 701], "3238": [599, 701], "5944": [599, 701], "0775": [599, 701], "4327": [599, 701], "62519997": [599, 701], "40329999": [599, 701], "59439999": [599, 701], "74430001": [599, 701], "81010002": [599, 701], "84600002": [599, 701], "92979997": [599, 701], "einstein": [601, 711, 741], "117": [601, 711], "sentinel": [601, 712, 714], "90000004": [601, 713], "intend": [601, 717, 728, 757, 769, 772, 799, 801, 805, 806], "07472222": [601, 718], "00666667": [601, 718], "08966666": [601, 718], "simplicit": [602, 719, 720], "geglu": 725, "leakyrelu": 725, "logsoftmax": 725, "from_flax_modul": 726, "native_modul": 726, "params_fx": 726, "rng_seed": 726, "constructor_arg": 726, "constructor_kwarg": 726, "instance_arg": 726, "instance_kwarg": 726, "flax": [726, 786, 787, 793, 801], "from_haiku_modul": 726, "params_hk": 726, "from_paddle_modul": 726, "paddl": [726, 738, 753, 754, 763], "from_torch_modul": 726, "dedic": [726, 769, 779, 783, 785], "native_module_class": 726, "modulehelp": [727, 731], "check_submod_ret": 727, "expected_submod_ret": [727, 731], "get_mod_kei": 727, "top_mod": 727, "explicit": [727, 754, 761, 763, 772, 773, 774, 781, 787, 801], "mod_depth": 727, "mod_height": 727, "mod_with_top_mod_key_chain": 727, "flatten_key_chain": 727, "iimedi": 727, "parent": [727, 753, 762, 783], "show_mod_in_top_mod": 727, "upper_depth": 727, "lower_depth": 727, "coverag": [727, 763, 776], "prompt": [727, 753, 755], "show_structur": 727, "this_repr": 727, "show_v_in_top_v": 727, "perspect": 727, "top_v": 727, "sub_mod": 727, "show_v": 727, "comopos": 727, "track_submod_call_ord": [727, 731], "track_submod_ret": [727, 731], "v_with_top_v_key_chain": 727, "create_vari": [728, 785], "var_shap": [728, 785], "fan_out": [728, 785], "fan_in": [728, 785], "rectangular": 728, "firstlayersiren": 728, "siren": 728, "distribt": 728, "glorotuniform": [728, 729, 785], "glorot": 728, "xavier": 728, "neuron": 728, "w_1x_1": 728, "w_2x_2": 728, "w_nx_n": 728, "w_i": 728, "vanish": 728, "explod": [728, 790, 791], "kaimingnorm": 728, "fan_mod": [728, 785], "kaim": 728, "he": 728, "negative_slop": 728, "fan": 728, "propog": 728, "fan_sum": [728, 785], "proport": 728, "Ones": 728, "randomnorm": 728, "stddev": 728, "w0": 728, "gain": [728, 755, 757, 780, 785, 801], "wlim": 728, "issu": [728, 748, 751, 752, 754, 757, 759, 762, 763, 764, 765, 767, 774, 776, 777, 779, 781, 785, 787, 793, 795], "predefin": 728, "initialz": 728, "fan_avg": 728, "adaptiveavgpool1d": 729, "avgpool1d": 729, "implicit": [729, 761, 766, 774, 776, 781, 801], "avgpool2d": 729, "avgpool3d": 729, "filter_s": 729, "weight_initi": [729, 785], "bias_initi": [729, 785], "0x7f447a0ab310": 729, "0x7f447a0ab2e0": 729, "conv1dtranspos": 729, "0x7f447a0ab220": 729, "0x7f447a0abb20": 729, "filter_shap": 729, "0x7f447a0ab580": 729, "0x7f447a0ab670": 729, "0x7f447a0abd30": 729, "0x7f447a0abd00": 729, "0x7f447a0aab30": 729, "0x7f4479ea6230": 729, "conv3dtranspos": 729, "0x7f4479ea61a0": 729, "0x7f4479ea6170": 729, "depthwiseconv2d": 729, "num_channel": 729, "0x7f447a0ab550": 729, "0x7f447a0ab520": 729, "bernoul": 729, "num_embed": 729, "embedding_dim": 729, "padding_idx": 729, "lookup": 729, "num_embeddingss": 729, "whenev": [729, 755, 759, 762, 763, 767, 773, 776, 778, 784], "renorm": 729, "insensit": 729, "num_lay": 729, "return_sequ": 729, "return_st": 729, "0x7f4479ea60e0": 729, "get_initial_st": 729, "0x7f447a0ab8b0": 729, "0x7f447a0ab250": 729, "maxpool1d": 729, "maxpool3d": 729, "multiheadattent": 729, "embed_dim": 729, "head_dim": 729, "dropout_r": 729, "use_proj_bia": 729, "attention_ax": 729, "build_mod": [729, 730, 731], "on_init": [729, 731], "parallel": [729, 760, 801, 805, 806], "binarycrossentropyloss": 730, "store_var": [730, 731], "arg_stateful_idx": [730, 731, 795], "kwarg_stateful_idx": [730, 731, 795], "fallback_to_non_compil": [730, 731, 733], "with_partial_v": [730, 731], "logpoissonloss": 730, "modulemeta": 731, "submod_depth": 731, "submods_to_track": 731, "varibl": 731, "temporarili": [731, 751, 757], "from_cal": 731, "built_": 731, "compile_kwarg": 731, "_unified_ivy_graph": 731, "_call": 731, "register_buff": 731, "var_nam": 731, "weights_path": 731, "randomness_factor": 731, "with_edge_label": 731, "with_arg_label": 731, "with_output_label": 731, "output_connected_onli": 731, "highlight_subgraph": 731, "num_featur": 732, "affin": 732, "track_running_stat": 732, "trail": 732, "layernorm": 732, "normalized_shap": 732, "elementwise_affin": 732, "set_stat": [733, 785], "init_on_first_step": 733, "ignore_miss": 733, "privat": [733, 774, 776], "_step": [733, 785], "stochast": [733, 801], "sub_modul": 734, "check_al": 735, "messag": [735, 742, 746, 754, 755, 762, 765, 767, 768, 774, 781, 783, 792], "check_all_or_any_fn": 735, "check_ani": 735, "check_dev_correct_format": 735, "check_dimens": 735, "check_elem_in_list": [735, 770, 773, 774], "elem": 735, "check_equ": [735, 774], "check_exist": 735, "check_fals": 735, "check_fill_value_and_dtype_are_compat": [735, 777], "check_gather_input_valid": 735, "check_gather_nd_input_valid": 735, "check_great": 735, "allow_equ": [735, 767], "check_inplace_sizes_valid": [735, 773], "check_isinst": 735, "allowed_typ": 735, "check_kernel_padding_s": 735, "padding_s": 735, "check_less": [735, 767], "check_one_way_broadcast": 735, "check_same_dtyp": 735, "check_shapes_broadcast": 735, "check_tru": 735, "check_unsorted_segment_min_valid_param": 735, "ast_help": 737, "importtransform": 737, "nodetransform": 737, "impersonate_import": 737, "tree": [737, 749, 763], "local_ivy_id": 737, "visit_import": 737, "visit_importfrom": 737, "ivyload": 737, "loader": [737, 747, 784, 787], "exec_modul": 737, "ivypathfind": 737, "metapathfind": 737, "find_spec": 737, "fullnam": 737, "contextmanag": 738, "choose_random_backend": 738, "convert_from_numpy_to_target_backend": 738, "variable_id": 738, "numpy_obj": 738, "convert_from_source_backend_to_numpi": 738, "current_backend": [738, 753, 767, 770, 775, 777, 781], "global_backend": 738, "fn_name_from_version_specific_fn_nam": 738, "prevent_access_loc": 738, "previous_backend": [738, 759], "unset": [738, 759, 781], "Or": [738, 747, 750, 773, 784], "set_backend_to_specific_vers": 738, "set_jax_backend": 738, "set_mxnet_backend": 738, "mxnet": [738, 753, 754, 792, 808], "mx": 738, "set_numpy_backend": 738, "set_paddle_backend": 738, "set_tensorflow_backend": 738, "set_torch_backend": 738, "unset_backend": [738, 759], "with_backend": 738, "sub_backend_handl": 739, "available_sub_backend": 739, "clear_sub_backend": 739, "find_available_sub_backend": 739, "sub_backends_loc": 739, "set_sub_backend": 739, "sub_backend_str": 739, "unset_sub_backend": 739, "dynamic_import": 740, "import_modul": [740, 781], "einsum_pars": 741, "convert_interleaved_input": 741, "interleav": 741, "convert_subscript": 741, "old_sub": 741, "symbol_map": 741, "subscript": 741, "oe": 741, "ellipsi": 741, "find_output_shap": 741, "find_output_str": 741, "canon": 741, "gen_unused_symbol": 741, "abd": 741, "get_symbol": 741, "letter": 741, "resort": 741, "unicod": 741, "charact": [741, 774, 792], "chr": 741, "surrog": 741, "\u0155": 741, "20000": 741, "\u4eac": 741, "has_valid_einsum_chars_onli": 741, "einsum_str": 741, "abaz": 741, "\u00f6ver": 741, "is_valid_einsum_char": 741, "\u01f5": 741, "legalise_einsum_expr": 741, "reproduct": 741, "pars": [741, 760, 765, 787], "intak": 741, "contract_path": 741, "parse_einsum_input": 741, "einsum_eqn": 741, "legalis": 741, "simplifi": [741, 767, 774, 781, 782, 785, 792, 795, 797, 799, 800, 801, 804, 807, 808], "legalise_einsum_eqn": 741, "za": 741, "xza": 741, "xz": 741, "possibly_convert_to_numpi": 741, "myshap": 741, "__main__": 741, "0x10f850710": 741, "inplaceupdateexcept": 742, "include_backend": [742, 767], "invalidbackendexcept": 742, "ivyattributeerror": [742, 767], "attributeerror": [742, 767, 783], "ivybroadcastshapeerror": [742, 767], "ivydeviceerror": 742, "ivydtypepromotionerror": [742, 767], "ivyindexerror": [742, 767], "ivynotimplementedexcept": [742, 767], "notimplementederror": 742, "ivyvalueerror": [742, 767], "handle_except": [742, 769, 771], "add_array_spec": 743, "fn_array_spec": 743, "set_logging_mod": 744, "debug": [744, 754, 755, 761, 762, 772, 776, 779, 784, 801], "unset_logging_mod": 744, "print_stat": 745, "viz": 745, "snakeviz": 745, "bonu": 745, "cprofil": 745, "cprint": [746, 781], "grant": [747, 788], "pilot": [747, 752, 788], "waitlist": [747, 788], "awai": [747, 799, 801], "grow": [747, 801], "redund": [747, 763, 767, 774, 795], "instantli": [747, 796], "pipelin": [747, 750, 756, 757, 758, 775, 777, 786, 789, 791, 796, 801, 802, 807], "essenti": [747, 753, 759, 761, 764, 765, 770, 773, 774, 775, 791, 792, 807], "mainli": [747, 753, 756, 772, 774, 776, 782, 784, 789, 801], "handler": [747, 780, 782, 786, 789], "scene": [747, 756, 780, 782, 790, 791, 801], "facilit": 747, "mse_loss": 747, "jax_ms": 747, "tf_mse": 747, "np_mse": 747, "torch_ms": 747, "someth": [747, 755, 759, 768, 777, 784, 785, 787, 788, 807], "favorit": 747, "mechan": [747, 762, 787], "robot": 747, "reinforc": 747, "gym": 747, "trainer": [747, 787, 793, 808], "flexibl": [747, 761, 763, 769, 772, 777, 779, 801], "everyon": [747, 748, 753, 754, 755, 787, 793], "plan": [747, 788], "interoper": [747, 792, 798, 799, 801, 804], "pull": [747, 748, 749, 753, 754, 757, 765, 768, 777, 779, 787, 788, 793], "sweat_smil": 747, "video": [747, 748, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 788, 799], "quit": [747, 751, 755, 758, 765, 766, 770, 771, 776, 779, 801, 807], "jax_fn": 747, "jax_x": 747, "torch_x": 747, "torch_fn": 747, "focus": [747, 763, 777, 799, 800, 801, 807, 808], "orient": 747, "contributor": [747, 748, 751, 753, 754, 755, 774, 780, 801], "nuanc": 747, "background": [747, 754, 760, 801, 803], "contextualis": 747, "problem": [747, 755, 757, 758, 759, 764, 774, 783, 792, 797, 803, 807], "explos": [747, 790, 792], "adher": [747, 757, 763, 766, 769, 779, 781, 786, 791, 792, 797, 798, 807], "shorter": [747, 783], "ensp": 747, "customiz": [747, 760], "deepmind_perceiver_io": 747, "sm_framework": 747, "segmentation_model": 747, "sm": 747, "torch_sm": 747, "metric": [747, 787], "iou_scor": 747, "rax": 747, "torch_rax": 747, "poly1_softmax_loss": 747, "madmom": 747, "madmon": 747, "torch_madmom": 747, "freq": 747, "audio": 747, "hz2midi": 747, "torch_loss": 747, "maxpooling1d": 747, "pool_siz": 747, "tf_kornia": 747, "tf_rax": 747, "tf_madmom": 747, "tf_loss": 747, "_forward_classifi": [747, 796], "forward_classifi": [747, 796], "hk_eff_encod": 747, "dummy_x": 747, "jax_sm": 747, "jax_madmom": 747, "jax_loss": 747, "np_kornia": 747, "np_sm": 747, "np_rax": 747, "np_loss": 747, "yourself": [747, 753, 755, 768, 776, 779], "favourit": [747, 754], "hyperparam": 747, "believ": [747, 755, 792], "feedback": [747, 762], "appreci": 747, "amaz": 747, "journei": [747, 748], "ambiti": 747, "season": 747, "perfect": 747, "ask": [747, 753, 754, 765, 781, 783, 787, 788, 793], "idea": [747, 749, 753, 777, 782, 793, 800], "fellow": 747, "twitter": 747, "sneak": 747, "peek": 747, "stai": [747, 762], "proper": [747, 753, 774, 796], "credit": 747, "accompani": 747, "lenton2021ivi": 747, "inter": 747, "author": [747, 753, 755, 799, 803], "lenton": 747, "daniel": 747, "pardo": 747, "fabio": 747, "falck": 747, "fabian": 747, "jame": 747, "stephen": 747, "clark": 747, "ronald": 747, "journal": 747, "arxiv": 747, "preprint": 747, "2102": 747, "02886": 747, "year": [747, 757, 787, 791, 793, 801], "strongli": [748, 754, 774, 807, 808], "engag": [748, 755, 792], "skill": [748, 803], "veteran": 748, "effort": [748, 753, 787, 792, 797, 801, 807], "board": [748, 760], "stage": [748, 755, 756, 757, 760, 776, 792, 801], "excit": [748, 756, 792], "mech": [749, 750], "grasp": [749, 774], "mutual": [749, 761, 770], "virtual": [749, 755, 774, 792, 804, 805], "venv": 749, "ivy_dev": [749, 754, 755], "bat": [749, 754, 755], "mac": [749, 754, 755], "linux": [749, 754, 755, 804, 806], "ivy_robot": 749, "docker": [749, 751, 752], "desktop": [749, 754], "pwd": [749, 750], "pycharm": [749, 751, 775, 776], "vscode": [749, 754], "devcontain": [749, 754], "remot": [749, 754, 757, 768], "codespac": 749, "make_doc": 750, "sh": [750, 754, 755, 757, 762], "host": [750, 762, 787, 792, 806], "ssh": [750, 762], "make_docs_without_dock": [750, 760], "assist": 751, "navig": [751, 754, 755, 756], "runtimeerror": 751, "logaddexp2_cpu": 751, "falsifi": [751, 757, 776], "test_logaddexp2": 751, "backend_fw": [751, 775], "on_devic": [751, 775], "dtype_and_x": [751, 775, 776], "test_flag": [751, 775, 776], "functiontestflag": 751, "ground_truth_backend": [751, 775], "num_positional_arg": [751, 775, 776], "with_out": [751, 775, 776], "instance_method": [751, 776], "test_gradi": [751, 776], "test_compil": 751, "as_vari": [751, 775, 776], "fn_name": [751, 759, 775, 776], "reproduce_failur": [751, 757, 771, 776], "axicy2bkaamobaar2waaaacvaai": 751, "assertionerror": [751, 757, 767, 775, 776], "25830078125": 751, "258544921875": 751, "test_acosh": 751, "axicy2baabyqwqgiaabdaai": 751, "instabl": [751, 763], "41421356": 751, "41421356e": 751, "34078079e": 751, "154": 751, "test_ab": [751, 754, 776], "000j": 751, "154j": 751, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 751, "experiment": [751, 755, 763, 774, 777, 781, 801], "few": [752, 753, 755, 761, 763, 764, 769, 770, 772, 773, 775, 776, 779, 781, 782, 783, 784, 785, 793, 801, 803], "climb": 752, "steep": 752, "curv": 752, "realpython": 752, "pyn": 752, "regard": [752, 761, 774, 775, 779, 792], "exchang": [752, 792, 797, 799], "stuck": [752, 753], "spell": 752, "sound": [752, 762, 780], "peopl": [752, 754, 755, 756, 801, 803], "frequent": [753, 755, 759, 801], "outlin": [753, 754, 755, 756, 761, 763, 766, 770, 773, 774, 776], "broad": [753, 803], "individu": [753, 755, 757, 759, 763, 770, 774, 801, 804, 807, 808], "clearli": [753, 755, 765, 775, 776, 792, 805], "hypothesi": [753, 755, 757, 762, 771], "aforement": 753, "arraywithelementwis": [753, 758, 783], "containerwithmanipul": 753, "thorough": [753, 766, 769, 776], "comment": [753, 754, 755, 757, 763, 768, 774, 779], "add_reformatting_checklist_": 753, "category_nam": [753, 763, 764, 766, 769, 770], "pr": [753, 755, 757, 768, 774, 775, 776], "autom": [753, 762, 768, 776, 789, 803], "bot": [753, 768], "markdown": [753, 760], "patient": [753, 754], "statu": [753, 762, 768, 793], "mark": [753, 755, 757, 776, 781], "checkbox": [753, 754], "proce": [753, 754], "elabor": 753, "struggl": 753, "assigne": 753, "status": 753, "refrain": 753, "scipi": [753, 792, 803, 808], "mindspor": 753, "simpler": [753, 755, 768, 795, 802, 808], "member": [753, 755, 774, 788, 792], "merg": [753, 755, 757, 762, 774, 801], "composition": 753, "feasibl": [753, 762, 792, 795], "pend": 753, "helpfulli": [753, 779, 799], "problemat": [753, 754], "unimpl": 753, "issue_link": 753, "alias": [753, 774, 775], "alias_nam": 753, "notic": [753, 758, 762, 768, 776, 779, 795], "push": [753, 755, 757, 775, 776, 807], "liner": 753, "meanwhil": [753, 762], "reselect": 753, "placement": 753, "categoris": [753, 757, 774], "faithfulli": 753, "creation_routin": [753, 775], "indexing_routin": 753, "ma": 753, "manipulation_routin": 753, "mathematical_funct": [753, 774], "sorting_searching_count": 753, "ufunc": [753, 774], "matrix_and_vector_product": 753, "matrix_eigenvalu": 753, "norms_and_other_numb": 753, "solving_equations_and_inverting_matric": 753, "seem": [753, 754, 779, 785, 786, 787, 801], "namespac": [753, 763, 771, 774, 775, 777, 781, 786], "gleam": 753, "uncom": 753, "test_numpy_inn": 753, "ivy_test": [753, 754, 755, 757, 760, 762, 775], "test_ivi": [753, 754, 755, 760, 762, 775, 776], "test_frontend": [753, 762, 775], "unsur": [753, 776], "central": [753, 768, 779, 792, 807], "analyz": [753, 789], "relevant_submodul": 753, "strategi": [753, 775], "roadmap": [753, 762], "soon": [753, 755, 762, 763, 787, 795], "deem": [753, 774], "subtask": 753, "clearer": [753, 767, 775, 784], "backend_nam": [753, 759, 763, 764, 766, 769, 770, 771], "sometim": [753, 754, 755, 757, 763, 770, 774, 776, 779], "rare": [753, 764, 787, 806], "button": [753, 754, 755], "centr": 753, "predetermin": 753, "superset": [753, 756, 770, 773, 787], "reserv": 753, "submit": [753, 768], "happi": [754, 787, 793], "your_usernam": 754, "your_fold": 754, "enter": [754, 755, 758, 763, 764, 769, 771], "sync": [754, 757], "nutshel": [754, 769], "hook": [754, 768], "lint": 754, "succe": [754, 795], "properli": [754, 756, 767, 768, 774, 776], "whatev": [754, 761, 787], "elig": 754, "student": 754, "licens": [754, 804], "remind": 754, "expir": 754, "won": [754, 755, 761, 763, 786, 788, 792, 793, 795, 796], "profession": 754, "trial": 754, "jetbrain": 754, "month": [754, 791], "bui": [754, 807], "paid": 754, "rapid": [754, 791, 792, 801], "pace": 754, "person": [754, 755], "abil": [754, 779, 782, 787, 801], "perhap": [754, 783, 784, 785, 787, 807], "conda": [754, 792, 803], "icon": [754, 755], "panel": 754, "palett": 754, "ctrl": [754, 755], "intel": [754, 792, 799, 806], "m1": 754, "optional_apple_silicon_1": 754, "optional_apple_silicon_2": 754, "builtin": [754, 783, 785], "cmd": 754, "virtualenv": 754, "tick": [754, 755, 762], "paddlepaddl": 754, "nz2": 754, "openssl": 754, "libssl1": 754, "1_1": 754, "1f": 754, "1ubuntu2": 754, "19_amd64": 754, "deb": 754, "dpkg": 754, "array_api_test": [754, 755, 757], "test_array_api": [754, 755, 757, 776], "suit": [754, 756, 757, 762, 776, 784, 789, 792, 801, 807], "mitig": [754, 807], "powershel": 754, "admin": 754, "deploy": [754, 796, 800, 803, 804, 807, 808], "menu": 754, "introspect": 754, "dialog": 754, "persist": 754, "caus": [754, 755, 757, 759, 761, 762, 763, 765, 773, 775, 776, 787], "earlier": [754, 755, 763, 777], "virtualis": 754, "bio": [754, 792], "dropdown": [754, 762], "dockerfil": 754, "ca": 754, "certif": 754, "gnupg": 754, "lsb": 754, "keyr": 754, "fssl": 754, "gpg": 754, "dearmor": 754, "echo": [754, 762, 788], "arch": 754, "lsb_releas": 754, "null": 754, "ce": 754, "cli": 754, "containerd": 754, "plugin": 754, "systemctl": 754, "permiss": [754, 762], "softwar": [754, 755, 791, 792, 799, 804, 805, 806], "press": [754, 755, 784], "successful": 754, "4a": 754, "socket": 754, "rwx": 754, "sock": 754, "pid": 754, "coupl": [754, 758, 783, 785, 801], "editor": 754, "pytest": [754, 755, 757, 762, 771, 776], "keyboard": 754, "screenshot": 754, "pop": [754, 792], "test_elementwis": 754, "bar": 754, "shell": [754, 755], "run_tests_cli": [754, 757], "run_ivy_core_test": 754, "run_ivy_nn_test": 754, "run_ivy_stateful_test": 754, "run_test": [754, 762], "test_depend": 754, "test_ivy_cor": 754, "test_ivy_nn": 754, "test_ivy_st": 754, "unix": 754, "test_": [754, 775], "test_funct": [754, 755, 762, 775, 776], "test_cor": [754, 755, 775], "offici": [754, 763, 781], "wish": [754, 774], "ivy_nn": 754, "ivy_st": 754, "header": [754, 755], "arrow": 754, "test_stat": 754, "test_submodule_nam": 754, "test_function_nam": 754, "debugg": 754, "studio": [754, 776], "especi": [754, 759, 768, 791, 801], "afterward": [754, 784], "overlap": [754, 762, 777, 779, 802], "test_file_path": 754, "test_fn_nam": 754, "engin": [754, 801, 803, 804], "comma": 754, "postcreatecommand": 754, "post_create_command": 754, "poststartcommand": 754, "safe": [754, 774], "containerworkspacefold": 754, "reopen": 754, "test_fle_path": 754, "slash": 754, "computation": 754, "comfort": [754, 767], "isol": [754, 755, 802, 807], "container": 754, "intens": 754, "headach": 754, "arm": [754, 755], "vm": [754, 762], "azur": 754, "cloud": [754, 762, 803], "longer": [754, 763, 773, 776, 801], "theme": [754, 760], "ipad": 754, "browser": [754, 760], "quota": 754, "requisit": 754, "pane": [754, 755, 762], "dockerfilegpu": 754, "ivv": 754, "multiv": 754, "multivers": [754, 777], "dockerfilemultivers": 754, "dockerhub": 754, "region": 754, "box": 754, "upto": [754, 755], "minut": [754, 762], "launch": 754, "quickli": [754, 755, 762, 784, 785, 791, 793, 801, 808], "kindli": 754, "guidelin": 754, "conatin": 754, "colour": 754, "chanc": 754, "troubleshoot": 754, "ever": 754, "flask": 754, "toolbar": [754, 755], "_array_modul": [754, 757], "refresh": 754, "workspac": 754, "pytestarg": 754, "unittesten": 754, "pytesten": 754, "autotestdiscoveronsaveen": 754, "conftest": 754, "tendenc": 755, "land": 755, "unrel": [755, 792], "fly": [755, 801], "hard": [755, 783, 801], "internship": 755, "serv": [755, 758, 761, 769, 770, 774, 775, 776, 779, 780, 789, 799], "suspect": 755, "iii": 755, "issue_numb": 755, "12345": 755, "clean": [755, 777, 781, 782, 784], "rememb": 755, "respond": 755, "dai": [755, 768], "freed": 755, "situat": [755, 762, 786], "unabl": [755, 779], "obvious": [755, 762], "qualiti": 755, "hypothet": 755, "frustrat": 755, "delai": [755, 795], "busi": 755, "inact": 755, "unfairli": 755, "investig": 755, "regist": [755, 795], "name_of_your_branch": 755, "date": [755, 757], "complic": [755, 775, 781], "merge_with_upstream": 755, "abort": 755, "tediou": [755, 765, 779], "stash": [755, 768], "reinstat": 755, "uncommit": 755, "unstag": [755, 768], "untrack": 755, "atlassian": 755, "wrote": 755, "piec": [755, 758, 770, 771, 781, 795, 797, 799], "blame": 755, "eg": 755, "past": [755, 757, 775, 776, 788, 801], "week": [755, 793], "grep": 755, "commit_id": 755, "handi": 755, "histori": 755, "toggl": 755, "highlight": [755, 762, 765, 774], "approv": 755, "someon": [755, 787], "hash": [755, 784], "cancel": 755, "speedup": 755, "unavail": 755, "tickbox": 755, "substanti": [755, 758, 763, 776, 792, 801], "span": [755, 799, 807], "intent": [755, 773], "discourag": 755, "adopt": [755, 758, 769, 779, 792, 800, 801, 806], "philosophi": 755, "valuabl": 755, "infrequ": 755, "earli": [755, 801], "wast": [755, 762], "spot": [755, 765, 770], "mistak": 755, "propos": [755, 774, 779, 801], "mountain": 755, "advoc": [755, 787], "session": [755, 801], "beauti": 755, "particularli": [755, 784, 787, 795, 799], "care": [755, 764, 774, 779, 786, 792], "concern": [755, 756, 761, 763, 765, 773, 779, 780, 807], "undo": 755, "stress": 755, "nifti": 755, "reassur": 755, "local_path_to_ivi": 755, "subfold": [755, 775, 776, 777], "dep": 755, "fresh": 755, "arsen": 755, "exec": 755, "ivy_contain": 755, "test_imag": 755, "test_random_crop": 755, "test_creation_funct": 755, "test_arang": 755, "cursor": 755, "alt": 755, "blog": 755, "breakpoint": 755, "gutter": 755, "caret": 755, "f8": 755, "f9": 755, "Into": 755, "f7": 755, "smart": 755, "fragment": [755, 797, 799, 803], "wherein": [755, 770, 776], "failur": [755, 762, 775, 776], "weed": [756, 780], "tour": 756, "conjunct": 757, "establish": [757, 803], "popular": [757, 801], "sens": [757, 763, 765, 774, 783], "unconnect": 757, "initialis": [757, 774, 776], "everytim": [757, 763], "strang": [757, 783], "thoroughli": 757, "test_linalg": [757, 775], "test_set_funct": 757, "test_signatur": 757, "excess": [757, 759, 765], "array_modul": 757, "vv": 757, "test_manipulation_funct": 757, "test_concat": [757, 776], "nb": 757, "liber": 757, "______________________": 757, "test_remaind": 757, "_______________________": 757, "test_operators_and_elementwise_funct": 757, "1264": 757, "1277": 757, "binary_param_assert_against_refimpl": 757, "ctx": 757, "620": 757, "binary_assert_against_refimpl": 757, "324": 757, "scalar_o": 757, "17304064": 757, "binaryparamcontext": 757, "axic42baaowcnp": 757, "rumwmabaear0": 757, "make_binary_param": 757, "numeric_dtyp": 757, "left_strat": 757, "left_sym": 757, "right_strat": 757, "right_sym": 757, "right_is_scalar": 757, "binary_param_assert_dtyp": 757, "binary_param_assert_shap": 757, "recreat": 757, "unexpectedli": 757, "discrep": [757, 775], "test_asarray_arrai": 757, "test_floor_divid": 757, "health": 757, "test_iop": 757, "__imod__": 757, "isequ": 757, "test_matrix_norm": 757, "alter": 757, "tweak": 757, "array_api_methods_to_test": 757, "test_trac": 757, "test_special_cas": 757, "__ipow__": 757, "is_integ": 757, "easier": [757, 758, 759, 763, 775, 777, 789, 801, 803], "revisit": [757, 769], "_data": [758, 773, 774, 783], "organiz": [758, 761, 774], "bear": [758, 761, 763, 774], "underpin": [758, 761, 781], "programmat": [758, 761, 802], "backup": [758, 760, 761], "accident": [758, 761, 774], "absent": [758, 761], "auto": [758, 760, 761, 768, 784], "__mul__": [758, 761, 765, 769, 779, 783], "throw": [758, 763, 764, 767, 783, 801], "imposs": 758, "inputs_to_native_arrai": [758, 770, 771], "outputs_to_ivy_arrai": [758, 763, 764, 769, 770, 771], "secondli": [758, 763], "dictat": [758, 765, 769, 773], "__ivy_array_function__": 758, "inspir": 758, "__torch_function__": 758, "myarrai": 758, "handled_funct": 758, "notimpl": 758, "issubclass": 758, "four": [758, 763, 765, 769, 770, 776, 779, 784], "enough": [758, 762, 763, 764, 776, 783, 784, 785], "ivy_funct": 758, "my_ab": 758, "my_arrai": 758, "implicit_backend": [759, 781], "__dict__": [759, 773, 781], "ivy_original_dict": [759, 781], "get_backend": [759, 770], "fallback": 759, "challeng": [759, 807], "live": [759, 760, 763, 792, 793, 797, 799], "scope": [759, 802, 806], "intermediari": 759, "set_dynamic_backend": 759, "unset_dynamic_backend": 759, "dynamic_backend_a": 759, "set_": 759, "unset_": 759, "technic": [759, 769, 773, 787, 801, 803], "setter": 759, "backend_handl": 759, "requires_grad": 759, "memory_format": 759, "preserve_format": 759, "weren": 759, "vast": [759, 763, 801], "minor": [759, 779, 787], "fn_name_v_1p12_and_abov": 759, "fn_name_v_1p01_to_1p1": 759, "heavili": [760, 771, 787], "characterist": 760, "conf": 760, "cleanup": 760, "readm": [760, 787], "maxdepth": 760, "caption": 760, "related_work": 760, "deep_div": 760, "faq": 760, "glossari": 760, "autosummari": 760, "top_functional_toc": 760, "restructuredtext": 760, "inlin": 760, "discov": [760, 763], "ivy_toctree_caption_map": 760, "stub": 760, "unfortun": [760, 768], "linker": 760, "foo": 760, "discussion_channel_map": 760, "1000043690254946374": 760, "1000043749088436315": 760, "forum": [760, 788], "seri": [760, 774, 776, 801, 803], "discussion_paragraph": 760, "discord_link": 760, "channel_link": 760, "gg": 760, "zvqdvbznqj": 760, "799879767196958751": 760, "channel_id": 760, "autoskippablemethod": 760, "skippable_method_attribut": 760, "__qualname__": 760, "autodoc": 760, "atribut": 760, "__doc__": 760, "autoivydata": 760, "containerwithelementwis": 761, "__repr__": 761, "__getattr__": [761, 795], "__setattr__": [761, 795], "__contains__": 761, "__getstate__": 761, "__setstate__": 761, "unpickl": 761, "num_dim": [761, 786], "restrict": [761, 762, 774, 781, 795, 798], "enforc": [761, 783], "extern": [761, 769, 774, 776, 777], "lefthand": 761, "righthand": 761, "handle_nest": [761, 769, 770, 771, 781], "presenc": [761, 773], "absenc": [761, 769, 801], "implicitli": [761, 772, 776, 781], "log_pr": [761, 770, 773], "intuit": [761, 776, 784, 785, 797], "chronolog": 761, "concurr": [761, 762, 770, 801], "despit": [761, 763, 764, 775, 781, 792, 798, 801], "__list__": 761, "whatsoev": [761, 770, 789, 807], "children": 761, "shallowest": 761, "deepest": 761, "regularli": 762, "rollback": 762, "incorpor": [762, 775, 784, 801], "techniqu": 762, "triplet": 762, "test_torch": [762, 775], "test_tensor": [762, 775], "test_torch_instance_arctan_": 762, "12500": 762, "daili": 762, "huge": [762, 784, 790, 792, 801, 807], "shoot": 762, "impact": [762, 776, 785, 803], "_reduce_loss": [762, 770, 773], "test_nn": 762, "test_loss": 762, "test_binary_cross_entropy_with_logit": 762, "test_cross_entropi": 762, "test_binary_cross_entropi": 762, "test_sparse_cross_entropi": 762, "test_loss_funct": 762, "test_torch_binary_cross_entropi": 762, "test_torch_cross_entropi": 762, "binary_cross_entropy_with_logit": 762, "torch_binary_cross_entropi": 762, "torch_cross_entropi": 762, "magic": 762, "readthedoc": 762, "pedagog": 762, "f_1": 762, "t_1": 762, "t_3": 762, "t_7": 762, "t_": 762, "f_m": 762, "cyclic": 762, "intellig": [762, 776, 803], "tests_fil": 762, "file_nam": [762, 776, 777], "intersect": [762, 776], "tests_lin": 762, "correspondingli": 762, "tests_to_run": 762, "determine_tests_lin": 762, "mongodb": 762, "databas": [762, 776], "secret": 762, "db": 762, "ssh_deploy_kei": 762, "suffic": [762, 771, 776], "massiv": 762, "constraint": [762, 763, 772], "ex": [762, 796], "yml": 762, "felicit": 762, "clone_map": 762, "home": 762, "deploy_kei": 762, "user_email": 762, "rashul": 762, "chutani": 762, "gmail": [762, 792], "user_nam": 762, "target_branch": 762, "github_serv": 762, "deploy_key_fil": 762, "ssh_known_hosts_fil": 762, "known_host": 762, "keyscan": 762, "git_ssh_command": 762, "userknownhostsfil": 762, "email": [762, 792], "methodologi": 762, "master1": 762, "restructur": 762, "_map": 762, "t_2": 762, "t_n": 762, "index_map": 762, "test_map": 762, "snowbal": 762, "recalibr": 762, "workflow_dispatch": 762, "schedul": [762, 787, 801, 808], "cron": 762, "saturdai": 762, "night": 762, "pm": 762, "gut": 762, "lesser": [762, 767], "lol": 762, "hour": [762, 793], "cater": 762, "master2": 762, "master32": 762, "synchron": 762, "runner2": 762, "corrupt": 762, "discard": 762, "decoupl": [762, 785], "150": 762, "cycl": [762, 776], "rashulchutani": 762, "yellow": 762, "queu": 762, "redirect": 762, "book": 762, "onrend": 762, "jo": 762, "ran": 762, "badg": 762, "clickabl": 762, "all_dtyp": 763, "all_numeric_dtyp": 763, "all_int_dtyp": 763, "all_float_dtyp": 763, "replic": [763, 772, 773, 774], "thirdli": 763, "native_float32": 763, "importantli": [763, 783, 786], "arguabl": [763, 764, 774], "jaxarrai": [763, 764, 767, 769, 773, 777, 781], "_handle_0_dim_output": 763, "subtli": [763, 773], "promote_types_frontend_nam": 763, "promote_types_of_frontend_name_input": 763, "frontend_nam": 763, "upcast": 763, "nearli": [763, 769, 771, 801], "downcast": 763, "footprint": 763, "concret": 763, "aris": [763, 768, 787, 792], "aren": 763, "utterli": 763, "meant": [763, 765, 773], "twice": 763, "disadvantag": 763, "relax": 763, "f64": 763, "unwant": 763, "primaci": 763, "resembl": 763, "prone": 763, "compound": 763, "infer_dtyp": [763, 764, 769, 771], "settabl": [763, 764], "handle_out_argu": [763, 764, 769, 770, 771, 773, 781], "infer_devic": [763, 764, 769, 771], "deleg": [763, 808], "shape_to_tupl": 763, "with_supported_dtyp": 763, "with_unsupported_dtyp": [763, 774], "unment": 763, "backend_vers": 763, "_cast_for_unary_op": [763, 770, 773], "target_typ": 763, "syntax": [763, 791, 792, 801], "unsupported_dtyp": 763, "supported_dtypes_and_devic": 763, "with_unsupported_device_and_dtyp": 763, "globals_getter_func": 763, "f1": 763, "f2": 763, "lack": [763, 773, 801, 808], "mandat": [763, 773, 776, 777, 792], "confus": [763, 767, 773, 779, 789, 793], "inconsist": [763, 767, 772], "84530": 763, "unwarr": 763, "risk": [763, 807], "needlessli": 763, "bloat": 763, "undergo": [763, 787], "supported_dtyp": 763, "unsupported_devic": 763, "supported_devic": 763, "downsid": 763, "undesir": 763, "accomplish": 763, "upcast_data_typ": 763, "downcast_data_typ": 763, "crosscast_data_typ": 763, "cast_data_typ": 763, "downcast_data_dtyp": 763, "tri": 763, "vice": 763, "versa": 763, "till": 763, "crosscast": 763, "exmp1": 763, "watch": [763, 774], "handle_numpy_arrays_in_specific_backend": [763, 769], "cate": 763, "understood": 763, "consumpt": [763, 805], "dual": 764, "categor": [764, 770, 774], "210": 764, "_handle_except": [764, 767], "1013": 764, "_handle_nest": [764, 767], "905": 764, "_handle_out_argu": [764, 767], "441": 764, "_inputs_to_native_arrai": [764, 767], "new_arg": [764, 767], "new_kwarg": [764, 767], "_outputs_to_ivy_arrai": [764, 767], "358": 764, "_handle_array_funct": [764, 767], "863": 764, "_handle_device_shift": 764, "handle_device_shift": [764, 771], "crucial": [764, 772], "device_shifting_dev": 764, "__enter__": 764, "__exit__": 764, "mostli": [764, 773, 776], "soft_devic": 764, "eight": [765, 780], "op_nam": 765, "__r": 765, "unsurprisingli": [765, 791], "recap": [765, 785], "combinatori": 765, "okai": [765, 779, 781], "spec": [765, 766], "my_func": [765, 777], "some_flag": 765, "another_flag": 765, "jointli": 765, "5574077": 765, "1850398": 765, "5463025": 765, "8422884": 765, "91601413": 765, "9647598": 765, "3738229": 765, "1597457": 765, "0963247": 765, "9955841": 765, "3278579": 765, "asid": 765, "increasingli": [765, 795], "14254655": 765, "1578213": 765, "380515": 765, "trivial": [765, 773], "exlud": 765, "failing_fn_nam": 765, "onlin": [765, 766], "minutest": 765, "suffici": [765, 774, 776], "fault": [765, 801], "contrast": [766, 769, 774, 807], "preview": 766, "incorrectli": [766, 795], "needless": [766, 775], "renam": [766, 774], "judgment": 766, "operator_nam": 766, "succinct": 766, "docst": 766, "native_error": 767, "_combine_messag": 767, "truli": [767, 783], "wrong": [767, 768, 771, 774, 779], "198": 767, "392": 767, "_handle_array_like_without_promot": 767, "805": 767, "432": 767, "349": 767, "other_test": 767, "523": 767, "_handle_numpy_out": 767, "396": [767, 785], "_outputs_to_numpy_arrai": 767, "_inputs_to_ivy_arrays_np": 767, "ivy_arg": 767, "ivy_kwarg": 767, "453": 767, "_from_zero_dim_arrays_to_scalar": 767, "truth_value_test": 767, "visibl": 767, "unwieldi": 767, "awar": [767, 768], "squash": 767, "hide": [767, 795], "cleaner": [767, 784], "caught": [767, 768], "rethrow": 767, "_print_traceback_histori": 767, "error_stack": 767, "axiserror": 767, "polici": [767, 771, 776, 778], "moreov": 767, "met": 767, "black": 768, "flake8": 768, "formatt": 768, "encourag": [768, 787, 792], "linter": 768, "autoflak": 768, "docformatt": 768, "pydocstyl": 768, "wip": [768, 795], "yaml": 768, "patch1687898304": 768, "8072": 768, "3516aed563": 768, "reformat": 768, "akshai": 768, "jain": 768, "gui": 768, "cryptic": 768, "garden": 768, "utc": 768, "didn": 768, "human": 768, "intervent": 768, "typo": 768, "ui": 768, "handle_array_like_without_promot": [769, 771], "to_native_arrays_and_back": [769, 771, 781], "handle_array_funct": [769, 771], "inputs_to_native_shap": [769, 771], "rational": [769, 773, 779], "__div__": [769, 779], "484": 769, "annot": 769, "brittl": 769, "freeli": 769, "inde": [769, 779, 787, 799], "original_typ": 769, "cumbersom": 769, "hinder": [769, 791], "venn": 770, "diagram": [770, 807], "light": [770, 777, 787, 789, 802, 807], "maximis": 770, "array_arg": 770, "encompass": 770, "partial_mixed_handl": [770, 771, 779], "handle_partial_mixed_funct": [770, 771, 779], "fn_decor": 770, "mixed_backend_wrapp": [770, 773], "to_add": 770, "to_skip": 770, "inputs_to_ivy_arrai": [770, 771], "modif": [770, 801], "briefli": [770, 776, 784], "get_all_arrays_on_dev": 770, "outputs_to_ivy_shap": 771, "outputs_to_native_arrai": 771, "handle_view_index": [771, 773], "handle_view": [771, 773], "handle_rag": 771, "handle_backend_invalid": 771, "handle_nan": 771, "to_native_shapes_and_back": 771, "modern": [772, 791, 792, 806], "inter_func": 772, "custom_grad_fn": 772, "args1": 772, "eas": [772, 801], "captur": [772, 776, 786, 802], "program": [773, 798, 799, 801, 804, 805, 808], "speak": 773, "val_n": 773, "base_idx": 773, "_manipulation_stack": 773, "base_flat": 773, "_view_ref": 773, "_update_view": 773, "contigu": 773, "c_contigu": 773, "ascontiguousarrai": 773, "copyto": 773, "_is_vari": 773, "tensor_scatter_nd_upd": 773, "is_vari": 773, "_update_torch_view": 773, "predominantli": [773, 777], "support_native_out": [773, 781], "_scalar_output_to_0d_arrai": 773, "_wrap_fn": 773, "dim0": 773, "dim1": 773, "res_floor": 773, "mul": [773, 783], "extent": [773, 774], "to_out_fn": 773, "add_wrapp": 773, "paradigm": [773, 787, 801], "expans": 773, "brief": [773, 776], "weak": 773, "_torch_bas": 773, "_torch_view_ref": 773, "_torch_manipul": 773, "weakli": 773, "adequ": 773, "exhaust": [773, 776, 798, 807], "tf_frontend": 774, "lax": [774, 775, 779, 786, 787], "fn_tree": [774, 775, 776], "torch_frontend": [774, 775], "numpy_frontend": 774, "jax_frontend": 774, "to_ivy_arrays_and_back": [774, 775], "fidel": 774, "algebra": [774, 799, 800, 801, 804, 808], "xla": [774, 787, 789, 801], "dynamic": 774, "mimic": 774, "arithmetic_oper": 774, "handle_numpy_out": 774, "handle_numpy_dtyp": 774, "handle_numpy_cast": 774, "from_zero_dim_arrays_to_scalar": 774, "_add": 774, "same_kind": 774, "subok": [774, 775, 779], "promote_types_of_numpy_input": 774, "univers": [774, 791], "underscor": 774, "front": [774, 780, 781, 784, 791, 799, 801], "unhandl": 774, "trigonometric_funct": 774, "_tan": 774, "check_tensorflow_cast": 774, "raw_op": [774, 775], "tackl": 774, "map_raw_ops_alia": 774, "output_typ": 774, "kwargs_to_upd": 774, "pointwise_op": 774, "sensibl": 774, "ahead": [774, 777, 801], "reduce_logsumexp": 774, "input_tensor": 774, "logsumexp": 774, "trick": 774, "max_input_tensor": 774, "meet": 774, "preferred_element_typ": 774, "languag": [774, 781, 789, 791, 793, 799, 802, 804, 805, 806, 807], "offer": [774, 785, 793, 801, 807, 808], "finer": 774, "logicaland": 774, "np_frontend": 774, "_ivy_arrai": 774, "radd": 774, "_init_data": 774, "_process_str_data": 774, "_dtype": [774, 775, 783], "_shape": [774, 783], "govern": 774, "promote_types_of_": 774, "_input": 774, "promote_types_of_torch_input": [774, 775], "handle_numpy_casting_speci": 774, "new_fn": 774, "equiv": 774, "unsaf": 774, "array_type_test": 774, "_isfinit": 774, "organis": 774, "youtub": 774, "knowledg": 775, "handle_frontend_test": [775, 776], "handle_frontend_method": [775, 776], "test_frontend_funct": 775, "get_dtyp": [775, 776], "dtype_and_valu": [775, 776], "get_shap": [775, 776], "np_frontend_help": 775, "test_jax": 775, "test_lax": 775, "test_oper": 775, "available_dtyp": [775, 776], "test_with_out": [775, 776], "test_jax_tan": 775, "input_dtyp": [775, 776], "backend_to_test": 775, "test_numpi": 775, "test_mathematical_funct": 775, "test_trigonometric_funct": 775, "dtypes_values_cast": 775, "dtypes_values_casting_dtyp": 775, "arr_func": 775, "number_positional_arg": 775, "get_num_positional_args_ufunc": 775, "test_numpy_tan": 775, "handle_where_and_array_bool": 775, "test_tensorflow": 775, "test_math": 775, "test_tensorflow_tan": 775, "test_pointwise_op": 775, "test_torch_tan": 775, "_fill_valu": 775, "update_backend": 775, "test_glob": 775, "min_valu": [775, 776], "max_valu": [775, 776], "allow_non": [775, 776], "min_num_dim": [775, 776], "max_num_dim": [775, 776], "min_dim_s": [775, 776], "max_dim_s": 775, "test_jax_ful": 775, "test_from_shape_or_valu": 775, "_input_fill_and_dtyp": 775, "dtype_and_input": 775, "large_abs_safety_factor": [775, 776], "small_abs_safety_factor": 775, "safety_factor_scal": [775, 776], "dtype_to_cast": 775, "input_fill_dtyp": 775, "test_numpy_ful": 775, "test_raw_op": 775, "test_tensorflow_fil": 775, "test_creation_op": 775, "with_arrai": 775, "sampled_from": [775, 776], "test_torch_ful": 775, "test_valu": [775, 776], "add_nois": 775, "all_clos": 775, "_get_dtype_and_matrix": 775, "test_torch_qr": 775, "frontend_ret": 775, "frontend_q": 775, "frontend_r": 775, "assert_all_clos": 775, "ret_np": 775, "ret_from_gt_np": 775, "walkthrough": 775, "comparison_op": 775, "test_comparison_op": 775, "num_arrai": [775, 776], "allow_inf": [775, 776], "shared_dtyp": 775, "test_torch_great": 775, "all_alias": 775, "class_tre": 775, "init_tre": 775, "method_nam": 775, "test_frontend_method": 775, "init_input_dtyp": 775, "init_all_as_kwargs_np": 775, "intial": 775, "method_input_dtyp": 775, "method_all_as_kwargs_np": 775, "test_ndarrai": 775, "test_numpy_instance_add__": 775, "frontend_method_data": 775, "init_flag": [775, 776], "method_flag": [775, 776], "test_tensorflow_instance_add": 775, "method_tre": [775, 776], "1e04": 775, "allow_infin": 775, "test_torch_instance_add": 775, "atol_": 775, "_arrays_idx_n_dtyp": 775, "test_manipul": [775, 776], "surprisingli": 775, "closest_relevant_group": 775, "strive": [775, 776, 779, 787, 803], "fixtur": 776, "hit": [776, 781, 795], "eleg": [776, 801], "unexplor": 776, "artifact": 776, "bespok": 776, "_array_or_typ": 776, "rigor": [776, 791], "test_default_int_dtyp": 776, "clariti": [776, 779, 801], "print_hypothesis_exampl": 776, "searchstrategi": 776, "custom_strategi": 776, "randomis": 776, "simplist": 776, "intricaci": 776, "glanc": 776, "one_of": 776, "datum": 776, "pipe": 776, "array_or_scal": 776, "len_of_arrai": 776, "test_add": 776, "gradient_test": 776, "test_gpu_is_avail": 776, "handle_test": 776, "pretest": 776, "handle_method": 776, "snippet": [776, 796], "as_variable_flag": 776, "min_siz": 776, "max_siz": 776, "native_array_flag": 776, "container_flag": 776, "test_instance_method": 776, "test_inplac": 776, "criterion": 776, "array_valu": 776, "valid_ax": 776, "craft": 776, "hoc": 776, "44758124e": 776, "11228": 776, "268": 776, "wherev": 776, "dtype_values_axi": 776, "9622": 776, "28136": 776, "6375": 776, "12720": 776, "21354": 776, "900e": 776, "955e": 776, "exclude_min": 776, "57384": 776, "25687": 776, "248": 776, "array_dtyp": 776, "array_bool": 776, "test_devic": 776, "array_shap": 776, "common_shap": 776, "test_lay": 776, "size_bound": 776, "reshape_shap": 776, "stand": 776, "some_sequ": 776, "allow_nan": 776, "allow_subnorm": 776, "get_bound": 776, "arrays_valu": 776, "36418": 776, "213": 776, "21716926": 776, "none_or_list_of_float": 776, "get_prob": 776, "103515625e": 776, "099609375": 776, "probabilist": 776, "get_axi": 776, "number_positional_argu": 776, "unreproduc": 776, "x_and_linear": 776, "mixed_fn_compo": 776, "is_torch_backend": 776, "x_shape": [776, 781], "weight_shap": 776, "bias_shap": 776, "ivy_np": 776, "valid_float_dtyp": 776, "test_demo": 776, "failing_test": 776, "traceback": 776, "shrink": 776, "prescrib": 776, "scratch": 776, "therebi": 776, "test_gelu": 776, "test_fil": 776, "phase": [776, 787, 801], "notabl": [776, 801], "newer": 776, "max_exampl": 776, "deadlin": 776, "weird": 776, "systemat": 776, "safeguard": 776, "inabl": 776, "test_result_typ": 776, "9090909090909091": 776, "judgement": 777, "some_namespac": 777, "some_backend": 777, "another_backend": 777, "refactor": 777, "ongo": 777, "_assert_fill_value_and_dtype_are_compat": 777, "_to_devic": 777, "shouldn": [777, 795], "pin": 777, "unpinn": 777, "culmin": 777, "unsett": 778, "array_significant_figur": 778, "signific": [778, 787, 791, 792, 801], "array_decimal_valu": 778, "warning_level": 778, "nan_polici": 778, "stablest": 778, "constantli": [779, 791], "answer": [779, 783, 787], "contradict": 779, "entail": 779, "sacrif": 779, "jacfwd": 779, "jacrev": 779, "banner": 779, "expens": 779, "incredibli": [779, 784, 787, 804], "price": 779, "pai": 779, "intrus": 779, "x_beta": 779, "equip": 779, "priorit": 779, "simplif": 779, "allevi": 779, "ineffici": [779, 787, 801], "fuse": 779, "hybrid": 779, "workaround": 779, "slip": 779, "radar": 779, "stumbl": 779, "gone": [780, 792], "fulfil": 780, "syntact": [781, 786], "power_seq": 781, "backend_stack": 781, "_determine_backend_from_arg": 781, "importlib": 781, "_backend_dict": 781, "x_flat": 781, "wi": 781, "wi_x": 781, "wii_x": 781, "wif_x": 781, "wig_x": 781, "wio_x": 781, "wh": 781, "ht": 781, "ct": 781, "hts_list": 781, "wii_xt": 781, "wif_xt": 781, "wig_xt": 781, "wio_xt": 781, "htm1": 781, "ctm1": 781, "wh_htm1": 781, "whi_htm1": 781, "whf_htm1": 781, "whg_htm1": 781, "who_htm1": 781, "ft": 781, "ot": 781, "reliabl": 781, "scalabl": [781, 791, 806, 807], "sacrific": 781, "hear": 781, "virtu": [781, 798], "pure_ivi": 781, "pure_torch": 781, "unclean": 781, "wx": 781, "temp": 781, "ivy_func": 781, "emphas": 781, "torchscript": [781, 789, 808], "example_input": 781, "static_argnum": [781, 795], "static_argnam": [781, 795], "primit": [782, 787, 799, 801], "upcom": 782, "hierarch": [782, 784, 785, 801], "arraywithactiv": 783, "arraywithcr": 783, "arraywithdatatyp": 783, "arraywithdevic": 783, "arraywithgener": 783, "arraywithgradi": 783, "arraywithimag": 783, "arraywithlay": 783, "arraywithlinearalgebra": 783, "arraywithloss": 783, "arraywithmanipul": 783, "arraywithnorm": 783, "arraywithrandom": 783, "arraywithsearch": 783, "arraywithset": 783, "arraywithsort": 783, "arraywithstatist": 783, "arraywithutil": 783, "_init": 783, "_size": 783, "_devic": 783, "_dev_str": 783, "_pre_repr": 783, "_post_repr": 783, "framework_str": 783, "pypep8nam": 783, "motiv": [783, 792], "immut": 783, "claim": 783, "_native_wrapp": 783, "genuin": 783, "some_method": 783, "rewritten": 783, "littl": [783, 791, 803], "wonder": [783, 791, 793], "compartment": 783, "newshap": 783, "new_shap": 783, "tidi": 783, "crystal": 783, "ton": 784, "ado": [784, 785], "arbitrarili": 784, "soup": 784, "walk": [784, 785], "cnt": 784, "3333335": 784, "delimit": 784, "autocomplet": 784, "midwai": 784, "agent": 784, "total_spe": 784, "total_height": 784, "total_width": 784, "ag": 784, "tot": 784, "total_": 784, "total_h": 784, "cnt0": 784, "cnt1": 784, "diff_0": 784, "diff_1": 784, "config0": 784, "config1": 784, "l0": 784, "decoder__l0": 784, "decoder__l1": 784, "encoder__l0": 784, "encoder__l1": 784, "l0__b": 784, "l0__w": 784, "l1__b": 784, "l1__w": 784, "printabl": 784, "obviou": [784, 801], "foresight": 784, "untidili": 784, "update_ag": 784, "normalize_img": 784, "img_max": 784, "reduce_max": 784, "img_min": 784, "reduce_min": 784, "img_rang": 784, "agent_posit": 784, "agent_veloc": 784, "agent_cam_front_rgb": 784, "agent_cam_front_depth": 784, "agent_cam_rear_rgb": 784, "agent_cam_rear_depth": 784, "agent_cam_lidar": 784, "camera": 784, "front_rgb": 784, "front_depth": 784, "rear_rgb": 784, "rear_depth": 784, "lidar": 784, "rgb": 784, "rear": 784, "veloc": 784, "cam": 784, "cam_max": 784, "cam_min": 784, "cam_rang": 784, "five": 784, "allud": [784, 792], "perman": 784, "thread": [784, 801], "straightforward": 784, "dataload": 784, "_cnt": 784, "img_": 784, "_dataset_s": 784, "_batch_siz": 784, "_count": [784, 785], "__next__": 784, "img_fnam": 784, "loaded_img": 784, "batch_slic": 784, "0145": 784, "addbackward0": 784, "_create_vari": 785, "_input_channel": 785, "_output_channel": 785, "_w_shape": 785, "_b_shape": 785, "_with_bia": 785, "764": 785, "872": 785, "211": 785, "439": 785, "nightmar": 785, "overcom": 785, "v1": 785, "key0": 785, "linear3": 785, "v2": 785, "counter": 785, "preced": [785, 792], "_w_init": 785, "_b_init": 785, "misnom": 785, "saw": 785, "_beta1": 785, "_beta2": 785, "_epsilon": 785, "_mw": 785, "_vw": 785, "_first_pass": 785, "_should_compil": 785, "new_v": 785, "_lr": 785, "_inplac": 785, "_stop_gradi": 785, "sparse_funct": 786, "vital": [786, 791], "_linear": 786, "jax_graph": 786, "to_backend": 786, "thinli": 786, "to_haiku_modul": 786, "loss_fn_t": 786, "without_apply_rng": 786, "update_rul": 786, "tree_multimap": 786, "trax": [786, 793], "objax": [786, 793], "matur": [787, 792, 801], "doubt": 787, "grate": 787, "probe": 787, "remark": 787, "strong": [787, 792, 801], "lock": 787, "gold": 787, "dex": 787, "tricki": [787, 789], "predictor": 787, "tight": 787, "driver": 787, "dispatch": [787, 801, 804], "ast": 787, "autodiff": 787, "shine": 787, "merci": 787, "compet": [787, 801], "parallelis": 787, "spmd": 787, "mixtur": 787, "expert": 787, "sophist": 787, "depart": 787, "hundr": 787, "thousand": 787, "broadli": [787, 807], "supplementari": 787, "reusabl": [787, 799, 801], "fanci": [787, 801], "fusion": [787, 805], "lose": 787, "pmap": 787, "eventu": 787, "supplement": 787, "backdoor": 787, "callback": 787, "door": 787, "record": [787, 802], "somewhat": [787, 801], "outsourc": 787, "ivy_root": 788, "pem": 788, "api_kei": 788, "asap": 788, "nail": 789, "scientist": 789, "correl": 789, "collabor": [790, 791, 792], "consortium": [790, 792], "grown": 791, "rapidli": 791, "evolv": [791, 801], "shareabl": 791, "outdat": 791, "newest": 791, "prototyp": [791, 801], "bottleneck": 791, "obsolet": [791, 793], "invent": 791, "simultan": [791, 793], "runner": 791, "principl": [791, 799, 801, 804], "2006": 791, "cloth": 791, "forgiven": 792, "eyebrow": 792, "somehow": 792, "industri": [792, 801, 803], "funni": 792, "comic": 792, "charger": 792, "instant": 792, "contrari": 792, "bumpi": 792, "road": 792, "technologi": [792, 799, 803], "pcie": 792, "motherboard": 792, "raid": 792, "bluetooth": 792, "wireless": 792, "btx": 792, "sata": 792, "tcp": 792, "ip": 792, "smtp": 792, "send": [792, 806], "outlook": 792, "innov": 792, "growth": [792, 804], "necess": 792, "2015": [792, 801], "aros": 792, "mission": [792, 803], "ourselv": [792, 807], "quansight": [792, 807], "compani": [792, 797], "apach": [792, 803, 807], "onnx": [792, 799, 807], "cupi": [792, 801, 808], "sympi": 792, "modin": 792, "spyder": 792, "octoml": [792, 807], "sponsor": 792, "lg": 792, "electron": 792, "shaw": 792, "pursuit": 792, "complianc": 792, "convinc": 792, "celebr": 792, "perfectli": 793, "abund": 793, "streamlin": [793, 804], "awesom": 793, "love": 793, "slew": 793, "inevit": [793, 802], "erron": 793, "poor": 793, "spin": 793, "sake": 793, "wouldn": 793, "frantic": 793, "port": 793, "lucid": 793, "honk": 793, "hasn": 793, "spend": [793, 801], "sonnet": 793, "quo": 793, "dopamin": 793, "ignit": 793, "catalyst": 793, "lightn": 793, "fastai": 793, "publicli": [795, 796], "logger": 795, "include_gener": 795, "array_cach": 795, "lazygraph": [795, 796], "sum_j": 795, "compiled_fn": 795, "impos": 795, "comp_func": 795, "trade": 795, "bake": 795, "cont": 795, "new_attribut": 795, "resnet50": 795, "breed": 795, "autoimageprocessor": [795, 796], "resnetforimageclassif": [795, 796], "compiled_graph": 795, "predicted_label": 795, "debug_mod": 796, "transpile_kwarg": 796, "transpiled_func": 796, "unified_func": 796, "rough": 796, "transformed_with_st": 796, "bigger": 796, "hf": 796, "tf_model": 796, "tf_input": 796, "conceptu": [797, 802], "broken": [797, 801], "rwork": 797, "tracer": 797, "vendor": [797, 803], "complimentari": [797, 807], "acycl": [797, 802], "insert_numb": 798, "insert_t": 798, "scaffold": [799, 807], "heart": 799, "toolchain": [799, 804], "ir": [799, 802, 807], "assembli": [799, 806, 807], "idl": 799, "middl": 799, "emit": 799, "gnu": [799, 804], "broader": 799, "heterogen": 799, "aid": 799, "coprocessor": 799, "programm": [799, 806], "gate": 799, "onednn": 799, "sit": [799, 802, 807], "tandem": 799, "possess": 799, "khrono": [800, 806], "appl": 800, "coremltool": 800, "albeit": 800, "promin": 801, "abbrevi": 801, "laboratori": 801, "proprietari": [801, 805, 806], "mathwork": 801, "commerci": 801, "1984": 801, "toolbox": 801, "mupad": 801, "simulink": 801, "graphic": [801, 805, 806], "simul": 801, "million": [801, 804], "worldwid": 801, "scienc": [801, 803], "econom": 801, "2001": 801, "scientif": 801, "od": 801, "solver": 801, "cython": 801, "friendli": 801, "2002": 801, "lua": 801, "luajit": 801, "idiap": 801, "epfl": 801, "2005": 801, "numarrai": 801, "cpython": 801, "partli": 801, "2007": 801, "forest": 801, "boost": 801, "dbscan": 801, "inbuilt": 801, "esqu": 801, "aesara": 801, "datafram": 801, "2012": 801, "Its": 801, "polymorph": 801, "mpi": 801, "openmp": 801, "glue": 801, "jaot": 801, "nasa": 801, "cern": 801, "climat": 801, "allianc": 801, "influenti": 801, "2014": 801, "scala": 801, "ship": 801, "forgiv": 801, "decemb": 801, "announc": 801, "mainten": 801, "v7": 801, "meaning": 801, "2016": 801, "imper": 801, "amazon": 801, "traction": 801, "cognit": [801, 808], "toolkit": [801, 802, 808], "grade": 801, "realiz": 801, "dnn": 801, "rnn": 801, "backpropag": 801, "succumb": 801, "came": 801, "monitor": 801, "practition": [801, 805, 806, 807], "hobbyist": 801, "tremend": 801, "ecosystem": 801, "gear": 801, "batteri": 801, "zygot": 801, "jl": 801, "workload": 801, "daggerflux": 801, "frontier": 801, "hessian": 801, "2018": 801, "lightweight": [801, 808], "shortcom": 801, "barrier": 801, "inexperienc": 801, "underdevelop": 801, "fanat": 801, "ounc": 801, "infanc": 801, "emerg": 801, "nich": 801, "mobil": 801, "lite": 801, "enterpris": 801, "reinvent": [801, 803], "inertia": 801, "creator": [801, 803], "paszk": 801, "hi": 801, "safeti": 801, "bulk": 801, "haskel": 801, "dataflow": 802, "enclos": 802, "trace_modul": 802, "scriptfunct": 802, "scriptmodul": 802, "fake": 802, "proxi": 802, "site": 802, "graphmodul": 802, "travi": 803, "oliph": 803, "leader": 803, "cornerston": 803, "numba": 803, "numfocu": 803, "pydata": 803, "confer": 803, "consult": 803, "servic": 803, "expertis": 803, "devop": 803, "mlop": 803, "dashboard": 803, "startup": 803, "mlir": [803, 804, 807], "Their": 803, "held": 803, "privileg": 803, "presum": 803, "llvm": [803, 806], "founder": 803, "tvm": [803, 807], "sustain": 803, "empow": 803, "har": 803, "burden": 803, "benchmark": 803, "convention": 804, "precompil": 804, "executor": 804, "julia": [804, 807], "fsf": 804, "gpl": 804, "biggest": [804, 807], "conduct": 805, "throughput": 805, "autotun": 805, "gpgpu": 805, "classic": 806, "sycl": 806, "dpc": 806, "processor": 806, "maco": 806, "x86": 806, "oneapi": 806, "ia": 806, "aka": 806, "xeon": 806, "gen9": 806, "xe": 806, "arria": 806, "gx": 806, "fpga": 806, "lofti": 807, "ambit": 807, "realm": 807, "bedrock": 807, "flux": 807, "bite": 807, "chew": 807, "eagerpi": 807, "tensorli": 807, "thinc": 807, "neuropod": 807, "emploi": 807, "fx": 807, "retrain": 807, "closer": 807, "greatli": 807, "modular": 807, "anywher": 807, "theano": 808, "plaidml": 808, "partial_svd": 808, "excel": 808, "subsystem": 808}, "objects": {"ivy.Array": [[216, 0, 1, "", "abs"], [217, 0, 1, "", "acos"], [218, 0, 1, "", "acosh"], [569, 0, 1, "", "adam_step"], [570, 0, 1, "", "adam_update"], [366, 0, 1, "", "adaptive_avg_pool1d"], [367, 0, 1, "", "adaptive_avg_pool2d"], [368, 0, 1, "", "adaptive_max_pool2d"], [219, 0, 1, "", "add"], [396, 0, 1, "", "adjoint"], [719, 0, 1, "", "all"], [489, 0, 1, "", "all_equal"], [317, 0, 1, "", "allclose"], [220, 0, 1, "", "angle"], [720, 0, 1, "", "any"], [696, 0, 1, "", "argmax"], [697, 0, 1, "", "argmin"], [705, 0, 1, "", "argsort"], [698, 0, 1, "", "argwhere"], [492, 0, 1, "", "array_equal"], [422, 0, 1, "", "as_strided"], [120, 0, 1, "", "asarray"], [221, 0, 1, "", "asin"], [222, 0, 1, "", "asinh"], [493, 0, 1, "", "assert_supports_inplace"], [423, 0, 1, "", "associative_scan"], [148, 0, 1, "", "astype"], [223, 0, 1, "", "atan"], [224, 0, 1, "", "atan2"], [225, 0, 1, "", "atanh"], [424, 0, 1, "", "atleast_1d"], [425, 0, 1, "", "atleast_2d"], [426, 0, 1, "", "atleast_3d"], [370, 0, 1, "", "avg_pool1d"], [371, 0, 1, "", "avg_pool2d"], [372, 0, 1, "", "avg_pool3d"], [458, 0, 1, "", "batch_norm"], [464, 0, 1, "", "bernoulli"], [465, 0, 1, "", "beta"], [318, 0, 1, "", "binarizer"], [648, 0, 1, "", "binary_cross_entropy"], [476, 0, 1, "", "bincount"], [226, 0, 1, "", "bitwise_and"], [227, 0, 1, "", "bitwise_invert"], [228, 0, 1, "", "bitwise_left_shift"], [229, 0, 1, "", "bitwise_or"], [230, 0, 1, "", "bitwise_right_shift"], [231, 0, 1, "", "bitwise_xor"], [300, 0, 1, "", "blackman_window"], [149, 0, 1, "", "broadcast_arrays"], [150, 0, 1, "", "broadcast_to"], [151, 0, 1, "", "can_cast"], [232, 0, 1, "", "ceil"], [618, 0, 1, "", "cholesky"], [651, 0, 1, "", "clip"], [495, 0, 1, "", "clip_matrix_norm"], [496, 0, 1, "", "clip_vector_norm"], [652, 0, 1, "", "concat"], [429, 0, 1, "", "concat_from_sequence"], [397, 0, 1, "", "cond"], [319, 0, 1, "", "conj"], [653, 0, 1, "", "constant_pad"], [604, 0, 1, "", "conv1d"], [605, 0, 1, "", "conv1d_transpose"], [606, 0, 1, "", "conv2d"], [607, 0, 1, "", "conv2d_transpose"], [608, 0, 1, "", "conv3d"], [609, 0, 1, "", "conv3d_transpose"], [126, 0, 1, "", "copy_array"], [320, 0, 1, "", "copysign"], [477, 0, 1, "", "corrcoef"], [233, 0, 1, "", "cos"], [234, 0, 1, "", "cosh"], [321, 0, 1, "", "count_nonzero"], [478, 0, 1, "", "cov"], [619, 0, 1, "", "cross"], [649, 0, 1, "", "cross_entropy"], [479, 0, 1, "", "cummax"], [480, 0, 1, "", "cummin"], [709, 0, 1, "", "cumprod"], [710, 0, 1, "", "cumsum"], [373, 0, 1, "", "dct"], [499, 0, 1, "", "default"], [235, 0, 1, "", "deg2rad"], [612, 0, 1, "", "depthwise_conv2d"], [620, 0, 1, "", "det"], [193, 0, 1, "", "dev"], [374, 0, 1, "", "dft"], [621, 0, 1, "", "diag"], [398, 0, 1, "", "diagflat"], [622, 0, 1, "", "diagonal"], [322, 0, 1, "", "diff"], [323, 0, 1, "", "digamma"], [466, 0, 1, "", "dirichlet"], [236, 0, 1, "", "divide"], [399, 0, 1, "", "dot"], [613, 0, 1, "", "dropout"], [375, 0, 1, "", "dropout1d"], [376, 0, 1, "", "dropout2d"], [377, 0, 1, "", "dropout3d"], [430, 0, 1, "", "dsplit"], [431, 0, 1, "", "dstack"], [159, 0, 1, "", "dtype"], [623, 0, 1, "", "eig"], [624, 0, 1, "", "eigh"], [401, 0, 1, "", "eigh_tridiagonal"], [402, 0, 1, "", "eigvals"], [625, 0, 1, "", "eigvalsh"], [500, 0, 1, "", "einops_rearrange"], [501, 0, 1, "", "einops_reduce"], [502, 0, 1, "", "einops_repeat"], [711, 0, 1, "", "einsum"], [291, 0, 1, "", "elu"], [378, 0, 1, "", "embedding"], [128, 0, 1, "", "empty_like"], [237, 0, 1, "", "equal"], [238, 0, 1, "", "erf"], [503, 0, 1, "", "exists"], [239, 0, 1, "", "exp"], [240, 0, 1, "", "exp2"], [432, 0, 1, "", "expand"], [654, 0, 1, "", "expand_dims"], [241, 0, 1, "", "expm1"], [301, 0, 1, "", "eye_like"], [379, 0, 1, "", "fft"], [380, 0, 1, "", "fft2"], [433, 0, 1, "", "fill_diagonal"], [161, 0, 1, "", "finfo"], [324, 0, 1, "", "fix"], [434, 0, 1, "", "flatten"], [655, 0, 1, "", "flip"], [435, 0, 1, "", "fliplr"], [436, 0, 1, "", "flipud"], [325, 0, 1, "", "float_power"], [242, 0, 1, "", "floor"], [243, 0, 1, "", "floor_divide"], [326, 0, 1, "", "fmax"], [244, 0, 1, "", "fmin"], [245, 0, 1, "", "fmod"], [437, 0, 1, "", "fold"], [504, 0, 1, "", "fourier_encode"], [327, 0, 1, "", "frexp"], [130, 0, 1, "", "from_dlpack"], [133, 0, 1, "", "full_like"], [467, 0, 1, "", "gamma"], [507, 0, 1, "", "gather"], [508, 0, 1, "", "gather_nd"], [246, 0, 1, "", "gcd"], [101, 0, 1, "", "gelu"], [403, 0, 1, "", "general_inner_product"], [511, 0, 1, "", "get_num_dims"], [328, 0, 1, "", "gradient"], [573, 0, 1, "", "gradient_descent_update"], [247, 0, 1, "", "greater"], [248, 0, 1, "", "greater_equal"], [459, 0, 1, "", "group_norm"], [102, 0, 1, "", "hardswish"], [513, 0, 1, "", "has_nans"], [438, 0, 1, "", "heaviside"], [481, 0, 1, "", "histogram"], [439, 0, 1, "", "hsplit"], [440, 0, 1, "", "hstack"], [417, 0, 1, "", "huber_loss"], [329, 0, 1, "", "hypot"], [441, 0, 1, "", "i0"], [383, 0, 1, "", "idct"], [384, 0, 1, "", "ifft"], [385, 0, 1, "", "ifftn"], [482, 0, 1, "", "igamma"], [164, 0, 1, "", "iinfo"], [249, 0, 1, "", "imag"], [404, 0, 1, "", "initialize_tucker"], [626, 0, 1, "", "inner"], [515, 0, 1, "", "inplace_decrement"], [516, 0, 1, "", "inplace_increment"], [517, 0, 1, "", "inplace_update"], [460, 0, 1, "", "instance_norm"], [387, 0, 1, "", "interpolate"], [627, 0, 1, "", "inv"], [519, 0, 1, "", "is_array"], [167, 0, 1, "", "is_bool_dtype"], [169, 0, 1, "", "is_float_dtype"], [171, 0, 1, "", "is_int_dtype"], [520, 0, 1, "", "is_ivy_array"], [521, 0, 1, "", "is_ivy_container"], [523, 0, 1, "", "is_native_array"], [173, 0, 1, "", "is_uint_dtype"], [330, 0, 1, "", "isclose"], [250, 0, 1, "", "isfinite"], [524, 0, 1, "", "isin"], [251, 0, 1, "", "isinf"], [252, 0, 1, "", "isnan"], [253, 0, 1, "", "isreal"], [526, 0, 1, "", "itemsize"], [406, 0, 1, "", "kron"], [418, 0, 1, "", "l1_loss"], [461, 0, 1, "", "l1_normalize"], [462, 0, 1, "", "l2_normalize"], [575, 0, 1, "", "lamb_update"], [576, 0, 1, "", "lars_update"], [689, 0, 1, "", "layer_norm"], [254, 0, 1, "", "lcm"], [331, 0, 1, "", "ldexp"], [103, 0, 1, "", "leaky_relu"], [332, 0, 1, "", "lerp"], [255, 0, 1, "", "less"], [256, 0, 1, "", "less_equal"], [471, 0, 1, "", "lexsort"], [333, 0, 1, "", "lgamma"], [614, 0, 1, "", "linear"], [134, 0, 1, "", "linspace"], [257, 0, 1, "", "log"], [258, 0, 1, "", "log10"], [259, 0, 1, "", "log1p"], [260, 0, 1, "", "log2"], [104, 0, 1, "", "log_softmax"], [261, 0, 1, "", "logaddexp"], [262, 0, 1, "", "logaddexp2"], [263, 0, 1, "", "logical_and"], [264, 0, 1, "", "logical_not"], [265, 0, 1, "", "logical_or"], [266, 0, 1, "", "logical_xor"], [292, 0, 1, "", "logit"], [293, 0, 1, "", "logsigmoid"], [135, 0, 1, "", "logspace"], [463, 0, 1, "", "lp_normalize"], [615, 0, 1, "", "lstm_update"], [408, 0, 1, "", "make_svd_non_negative"], [629, 0, 1, "", "matmul"], [442, 0, 1, "", "matricize"], [409, 0, 1, "", "matrix_exp"], [630, 0, 1, "", "matrix_norm"], [631, 0, 1, "", "matrix_power"], [632, 0, 1, "", "matrix_rank"], [633, 0, 1, "", "matrix_transpose"], [712, 0, 1, "", "max"], [388, 0, 1, "", "max_pool1d"], [389, 0, 1, "", "max_pool2d"], [390, 0, 1, "", "max_pool3d"], [267, 0, 1, "", "maximum"], [713, 0, 1, "", "mean"], [483, 0, 1, "", "median"], [307, 0, 1, "", "mel_weight_matrix"], [136, 0, 1, "", "meshgrid"], [714, 0, 1, "", "min"], [268, 0, 1, "", "minimum"], [105, 0, 1, "", "mish"], [410, 0, 1, "", "mode_dot"], [334, 0, 1, "", "modf"], [443, 0, 1, "", "moveaxis"], [706, 0, 1, "", "msort"], [411, 0, 1, "", "multi_dot"], [616, 0, 1, "", "multi_head_attention"], [412, 0, 1, "", "multi_mode_dot"], [690, 0, 1, "", "multinomial"], [269, 0, 1, "", "multiply"], [270, 0, 1, "", "nan_to_num"], [484, 0, 1, "", "nanmean"], [485, 0, 1, "", "nanmedian"], [486, 0, 1, "", "nanprod"], [335, 0, 1, "", "nansum"], [137, 0, 1, "", "native_array"], [271, 0, 1, "", "negative"], [336, 0, 1, "", "nextafter"], [699, 0, 1, "", "nonzero"], [272, 0, 1, "", "not_equal"], [138, 0, 1, "", "one_hot"], [140, 0, 1, "", "ones_like"], [577, 0, 1, "", "optimizer_update"], [488, 0, 1, "", "optional_get_element"], [634, 0, 1, "", "outer"], [444, 0, 1, "", "pad"], [445, 0, 1, "", "partial_fold"], [446, 0, 1, "", "partial_tensor_to_vec"], [413, 0, 1, "", "partial_tucker"], [447, 0, 1, "", "partial_unfold"], [448, 0, 1, "", "partial_vec_to_tensor"], [656, 0, 1, "", "permute_dims"], [635, 0, 1, "", "pinv"], [468, 0, 1, "", "poisson"], [273, 0, 1, "", "positive"], [274, 0, 1, "", "pow"], [294, 0, 1, "", "prelu"], [715, 0, 1, "", "prod"], [636, 0, 1, "", "qr"], [487, 0, 1, "", "quantile"], [275, 0, 1, "", "rad2deg"], [691, 0, 1, "", "randint"], [692, 0, 1, "", "random_normal"], [693, 0, 1, "", "random_uniform"], [276, 0, 1, "", "real"], [277, 0, 1, "", "reciprocal"], [342, 0, 1, "", "reduce"], [394, 0, 1, "", "reduce_window"], [106, 0, 1, "", "relu"], [295, 0, 1, "", "relu6"], [278, 0, 1, "", "remainder"], [657, 0, 1, "", "repeat"], [658, 0, 1, "", "reshape"], [176, 0, 1, "", "result_type"], [395, 0, 1, "", "rfftn"], [659, 0, 1, "", "roll"], [450, 0, 1, "", "rot90"], [279, 0, 1, "", "round"], [617, 0, 1, "", "scaled_dot_product_attention"], [531, 0, 1, "", "scatter_flat"], [532, 0, 1, "", "scatter_nd"], [707, 0, 1, "", "searchsorted"], [296, 0, 1, "", "selu"], [545, 0, 1, "", "shape"], [695, 0, 1, "", "shuffle"], [107, 0, 1, "", "sigmoid"], [280, 0, 1, "", "sign"], [337, 0, 1, "", "signbit"], [298, 0, 1, "", "silu"], [281, 0, 1, "", "sin"], [338, 0, 1, "", "sinc"], [282, 0, 1, "", "sinh"], [637, 0, 1, "", "slogdet"], [420, 0, 1, "", "smooth_l1_loss"], [421, 0, 1, "", "soft_margin_loss"], [451, 0, 1, "", "soft_thresholding"], [108, 0, 1, "", "softmax"], [109, 0, 1, "", "softplus"], [638, 0, 1, "", "solve"], [708, 0, 1, "", "sort"], [650, 0, 1, "", "sparse_cross_entropy"], [339, 0, 1, "", "sparsify_tensor"], [660, 0, 1, "", "split"], [283, 0, 1, "", "sqrt"], [284, 0, 1, "", "square"], [661, 0, 1, "", "squeeze"], [546, 0, 1, "", "stable_divide"], [547, 0, 1, "", "stable_pow"], [662, 0, 1, "", "stack"], [716, 0, 1, "", "std"], [578, 0, 1, "", "stop_gradient"], [548, 0, 1, "", "strides"], [285, 0, 1, "", "subtract"], [717, 0, 1, "", "sum"], [549, 0, 1, "", "supports_inplace_updates"], [639, 0, 1, "", "svd"], [414, 0, 1, "", "svd_flip"], [640, 0, 1, "", "svdvals"], [663, 0, 1, "", "swapaxes"], [452, 0, 1, "", "take_along_axis"], [286, 0, 1, "", "tan"], [287, 0, 1, "", "tanh"], [641, 0, 1, "", "tensordot"], [642, 0, 1, "", "tensorsolve"], [299, 0, 1, "", "thresholded_relu"], [664, 0, 1, "", "tile"], [210, 0, 1, "", "to_device"], [551, 0, 1, "", "to_list"], [553, 0, 1, "", "to_numpy"], [554, 0, 1, "", "to_scalar"], [453, 0, 1, "", "top_k"], [643, 0, 1, "", "trace"], [288, 0, 1, "", "trapz"], [141, 0, 1, "", "tril"], [313, 0, 1, "", "trilu"], [142, 0, 1, "", "triu"], [289, 0, 1, "", "trunc"], [290, 0, 1, "", "trunc_divide"], [415, 0, 1, "", "truncated_svd"], [416, 0, 1, "", "tucker"], [454, 0, 1, "", "unfold"], [701, 0, 1, "", "unique_all"], [455, 0, 1, "", "unique_consecutive"], [702, 0, 1, "", "unique_counts"], [703, 0, 1, "", "unique_inverse"], [704, 0, 1, "", "unique_values"], [469, 0, 1, "", "unravel_index"], [314, 0, 1, "", "unsorted_segment_min"], [315, 0, 1, "", "unsorted_segment_sum"], [665, 0, 1, "", "unstack"], [567, 0, 1, "", "value_is_nan"], [644, 0, 1, "", "vander"], [718, 0, 1, "", "var"], [645, 0, 1, "", "vecdot"], [646, 0, 1, "", "vector_norm"], [647, 0, 1, "", "vector_to_skew_symmetric_matrix"], [456, 0, 1, "", "vsplit"], [457, 0, 1, "", "vstack"], [700, 0, 1, "", "where"], [340, 0, 1, "", "xlogy"], [666, 0, 1, "", "zero_pad"], [145, 0, 1, "", "zeros_like"], [341, 0, 1, "", "zeta"]], "ivy": [[588, 1, 1, "", "ArrayMode"], [584, 1, 1, "", "DefaultComplexDtype"], [585, 1, 1, "", "DefaultDevice"], [584, 1, 1, "", "DefaultDtype"], [584, 1, 1, "", "DefaultFloatDtype"], [584, 1, 1, "", "DefaultIntDtype"], [584, 1, 1, "", "DefaultUintDtype"], [363, 1, 1, "", "NativeSparseArray"], [583, 1, 1, "", "NestedSequence"], [588, 1, 1, "", "PreciseMode"], [585, 1, 1, "", "Profiler"], [363, 1, 1, "", "SparseArray"], [216, 2, 1, "", "abs"], [217, 2, 1, "", "acos"], [218, 2, 1, "", "acosh"], [589, 2, 1, "", "adam_step"], [589, 2, 1, "", "adam_update"], [366, 2, 1, "", "adaptive_avg_pool1d"], [367, 2, 1, "", "adaptive_avg_pool2d"], [368, 2, 1, "", "adaptive_max_pool2d"], [219, 2, 1, "", "add"], [353, 2, 1, "", "adjoint"], [602, 2, 1, "", "all"], [588, 2, 1, "", "all_equal"], [595, 2, 1, "", "all_nested_indices"], [349, 2, 1, "", "allclose"], [220, 2, 1, "", "angle"], [602, 2, 1, "", "any"], [583, 2, 1, "", "arange"], [369, 2, 1, "", "area_interpolate"], [588, 2, 1, "", "arg_info"], [588, 2, 1, "", "arg_names"], [598, 2, 1, "", "argmax"], [598, 2, 1, "", "argmin"], [600, 2, 1, "", "argsort"], [598, 2, 1, "", "argwhere"], [583, 2, 1, "", "array"], [588, 2, 1, "", "array_equal"], [189, 2, 1, "", "as_ivy_dev"], [146, 2, 1, "", "as_ivy_dtype"], [190, 2, 1, "", "as_native_dev"], [147, 2, 1, "", "as_native_dtype"], [355, 2, 1, "", "as_strided"], [583, 2, 1, "", "asarray"], [583, 2, 1, "", "asarray_handle_nestable"], [583, 2, 1, "", "asarray_infer_device"], [583, 2, 1, "", "asarray_infer_dtype"], [583, 2, 1, "", "asarray_inputs_to_native_shapes"], [583, 2, 1, "", "asarray_to_native_arrays_and_back"], [221, 2, 1, "", "asin"], [222, 2, 1, "", "asinh"], [588, 2, 1, "", "assert_supports_inplace"], [355, 2, 1, "", "associative_scan"], [148, 2, 1, "", "astype"], [223, 2, 1, "", "atan"], [224, 2, 1, "", "atan2"], [225, 2, 1, "", "atanh"], [355, 2, 1, "", "atleast_1d"], [355, 2, 1, "", "atleast_2d"], [355, 2, 1, "", "atleast_3d"], [370, 2, 1, "", "avg_pool1d"], [371, 2, 1, "", "avg_pool2d"], [372, 2, 1, "", "avg_pool3d"], [358, 2, 1, "", "batch_norm"], [359, 2, 1, "", "bernoulli"], [359, 2, 1, "", "beta"], [349, 2, 1, "", "binarizer"], [592, 2, 1, "", "binary_cross_entropy"], [364, 2, 1, "", "bincount"], [351, 2, 1, "", "bind_custom_gradient_function"], [226, 2, 1, "", "bitwise_and"], [227, 2, 1, "", "bitwise_invert"], [228, 2, 1, "", "bitwise_left_shift"], [229, 2, 1, "", "bitwise_or"], [230, 2, 1, "", "bitwise_right_shift"], [231, 2, 1, "", "bitwise_xor"], [346, 2, 1, "", "blackman_window"], [149, 2, 1, "", "broadcast_arrays"], [355, 2, 1, "", "broadcast_shapes"], [150, 2, 1, "", "broadcast_to"], [588, 2, 1, "", "cache_fn"], [151, 2, 1, "", "can_cast"], [582, 2, 1, "", "cast_bool"], [232, 2, 1, "", "ceil"], [152, 2, 1, "", "check_float"], [618, 2, 1, "", "cholesky"], [355, 2, 1, "", "choose"], [191, 2, 1, "", "clear_cached_mem_on_dev"], [593, 2, 1, "", "clip"], [588, 2, 1, "", "clip_matrix_norm"], [588, 2, 1, "", "clip_vector_norm"], [153, 2, 1, "", "closest_valid_dtype"], [582, 2, 1, "", "cmp_is"], [582, 2, 1, "", "cmp_isnot"], [795, 2, 1, "", "compile"], [593, 2, 1, "", "concat"], [355, 2, 1, "", "concat_from_sequence"], [353, 2, 1, "", "cond"], [349, 2, 1, "", "conj"], [593, 2, 1, "", "constant_pad"], [588, 2, 1, "", "container_types"], [603, 2, 1, "", "conv"], [604, 2, 1, "", "conv1d"], [605, 2, 1, "", "conv1d_transpose"], [606, 2, 1, "", "conv2d"], [607, 2, 1, "", "conv2d_transpose"], [608, 2, 1, "", "conv3d"], [609, 2, 1, "", "conv3d_transpose"], [610, 2, 1, "", "conv_general_dilated"], [611, 2, 1, "", "conv_general_transpose"], [126, 2, 1, "", "copy_array"], [595, 2, 1, "", "copy_nest"], [349, 2, 1, "", "copysign"], [364, 2, 1, "", "corrcoef"], [233, 2, 1, "", "cos"], [234, 2, 1, "", "cosh"], [349, 2, 1, "", "count_nonzero"], [364, 2, 1, "", "cov"], [619, 2, 1, "", "cross"], [592, 2, 1, "", "cross_entropy"], [364, 2, 1, "", "cummax"], [364, 2, 1, "", "cummin"], [601, 2, 1, "", "cumprod"], [601, 2, 1, "", "cumsum"], [588, 2, 1, "", "current_backend_str"], [373, 2, 1, "", "dct"], [588, 2, 1, "", "default"], [154, 2, 1, "", "default_complex_dtype"], [192, 2, 1, "", "default_device"], [155, 2, 1, "", "default_dtype"], [156, 2, 1, "", "default_float_dtype"], [157, 2, 1, "", "default_int_dtype"], [158, 2, 1, "", "default_uint_dtype"], [235, 2, 1, "", "deg2rad"], [612, 2, 1, "", "depthwise_conv2d"], [620, 2, 1, "", "det"], [193, 2, 1, "", "dev"], [194, 2, 1, "", "dev_util"], [374, 2, 1, "", "dft"], [621, 2, 1, "", "diag"], [353, 2, 1, "", "diagflat"], [622, 2, 1, "", "diagonal"], [349, 2, 1, "", "diff"], [349, 2, 1, "", "digamma"], [359, 2, 1, "", "dirichlet"], [236, 2, 1, "", "divide"], [353, 2, 1, "", "dot"], [613, 2, 1, "", "dropout"], [375, 2, 1, "", "dropout1d"], [376, 2, 1, "", "dropout2d"], [377, 2, 1, "", "dropout3d"], [355, 2, 1, "", "dsplit"], [355, 2, 1, "", "dstack"], [159, 2, 1, "", "dtype"], [160, 2, 1, "", "dtype_bits"], [595, 2, 1, "", "duplicate_array_index_chains"], [581, 6, 1, "", "e"], [353, 2, 1, "", "eig"], [624, 2, 1, "", "eigh"], [353, 2, 1, "", "eigh_tridiagonal"], [353, 2, 1, "", "eigvals"], [625, 2, 1, "", "eigvalsh"], [588, 2, 1, "", "einops_rearrange"], [588, 2, 1, "", "einops_reduce"], [588, 2, 1, "", "einops_repeat"], [601, 2, 1, "", "einsum"], [344, 2, 1, "", "elu"], [352, 2, 1, "", "embedding"], [127, 2, 1, "", "empty"], [128, 2, 1, "", "empty_like"], [237, 2, 1, "", "equal"], [238, 2, 1, "", "erf"], [589, 2, 1, "", "execute_with_gradients"], [588, 2, 1, "", "exists"], [239, 2, 1, "", "exp"], [240, 2, 1, "", "exp2"], [355, 2, 1, "", "expand"], [593, 2, 1, "", "expand_dims"], [241, 2, 1, "", "expm1"], [129, 2, 1, "", "eye"], [346, 2, 1, "", "eye_like"], [352, 2, 1, "", "fft"], [352, 2, 1, "", "fft2"], [355, 2, 1, "", "fill_diagonal"], [161, 2, 1, "", "finfo"], [349, 2, 1, "", "fix"], [355, 2, 1, "", "flatten"], [593, 2, 1, "", "flip"], [355, 2, 1, "", "fliplr"], [355, 2, 1, "", "flipud"], [349, 2, 1, "", "float_power"], [242, 2, 1, "", "floor"], [243, 2, 1, "", "floor_divide"], [349, 2, 1, "", "fmax"], [244, 2, 1, "", "fmin"], [245, 2, 1, "", "fmod"], [355, 2, 1, "", "fold"], [594, 2, 1, "", "fomaml_step"], [582, 2, 1, "", "for_loop"], [588, 2, 1, "", "fourier_encode"], [349, 2, 1, "", "frexp"], [130, 2, 1, "", "from_dlpack"], [131, 2, 1, "", "frombuffer"], [132, 2, 1, "", "full"], [133, 2, 1, "", "full_like"], [195, 2, 1, "", "function_supported_devices"], [588, 2, 1, "", "function_supported_devices_and_dtypes"], [162, 2, 1, "", "function_supported_dtypes"], [196, 2, 1, "", "function_unsupported_devices"], [588, 2, 1, "", "function_unsupported_devices_and_dtypes"], [163, 2, 1, "", "function_unsupported_dtypes"], [359, 2, 1, "", "gamma"], [588, 2, 1, "", "gather"], [588, 2, 1, "", "gather_nd"], [246, 2, 1, "", "gcd"], [580, 2, 1, "", "gelu"], [353, 2, 1, "", "general_inner_product"], [352, 2, 1, "", "generate_einsum_equation"], [588, 2, 1, "", "get_all_arrays_in_memory"], [197, 2, 1, "", "get_all_ivy_arrays_on_dev"], [352, 2, 1, "", "get_interpolate_kernel"], [588, 2, 1, "", "get_item"], [588, 2, 1, "", "get_num_dims"], [588, 2, 1, "", "get_referrers_recursive"], [198, 2, 1, "", "gpu_is_available"], [589, 2, 1, "", "grad"], [349, 2, 1, "", "gradient"], [589, 2, 1, "", "gradient_descent_update"], [247, 2, 1, "", "greater"], [248, 2, 1, "", "greater_equal"], [358, 2, 1, "", "group_norm"], [346, 2, 1, "", "hamming_window"], [199, 2, 1, "", "handle_soft_device_variable"], [346, 2, 1, "", "hann_window"], [580, 2, 1, "", "hardswish"], [588, 2, 1, "", "has_nans"], [355, 2, 1, "", "heaviside"], [364, 2, 1, "", "histogram"], [355, 2, 1, "", "hsplit"], [355, 2, 1, "", "hstack"], [354, 2, 1, "", "huber_loss"], [349, 2, 1, "", "hypot"], [355, 2, 1, "", "i0"], [352, 2, 1, "", "idct"], [582, 2, 1, "", "if_else"], [352, 2, 1, "", "ifft"], [352, 2, 1, "", "ifftn"], [364, 2, 1, "", "igamma"], [164, 2, 1, "", "iinfo"], [249, 2, 1, "", "imag"], [595, 2, 1, "", "index_nest"], [346, 2, 1, "", "indices"], [581, 6, 1, "", "inf"], [165, 2, 1, "", "infer_default_dtype"], [353, 2, 1, "", "initialize_tucker"], [626, 2, 1, "", "inner"], [588, 2, 1, "", "inplace_arrays_supported"], [588, 2, 1, "", "inplace_decrement"], [588, 2, 1, "", "inplace_increment"], [588, 2, 1, "", "inplace_update"], [588, 2, 1, "", "inplace_variables_supported"], [595, 2, 1, "", "insert_into_nest_at_index"], [595, 2, 1, "", "insert_into_nest_at_indices"], [358, 2, 1, "", "instance_norm"], [352, 2, 1, "", "interp"], [352, 2, 1, "", "interpolate"], [627, 2, 1, "", "inv"], [166, 2, 1, "", "invalid_dtype"], [362, 2, 1, "", "invert_permutation"], [588, 2, 1, "", "is_array"], [167, 2, 1, "", "is_bool_dtype"], [168, 2, 1, "", "is_complex_dtype"], [169, 2, 1, "", "is_float_dtype"], [170, 2, 1, "", "is_hashable_dtype"], [171, 2, 1, "", "is_int_dtype"], [588, 2, 1, "", "is_ivy_array"], [588, 2, 1, "", "is_ivy_container"], [588, 2, 1, "", "is_ivy_nested_array"], [363, 2, 1, "", "is_ivy_sparse_array"], [588, 2, 1, "", "is_native_array"], [172, 2, 1, "", "is_native_dtype"], [363, 2, 1, "", "is_native_sparse_array"], [173, 2, 1, "", "is_uint_dtype"], [349, 2, 1, "", "isclose"], [250, 2, 1, "", "isfinite"], [588, 2, 1, "", "isin"], [251, 2, 1, "", "isinf"], [252, 2, 1, "", "isnan"], [253, 2, 1, "", "isreal"], [588, 2, 1, "", "isscalar"], [588, 2, 1, "", "itemsize"], [589, 2, 1, "", "jac"], [346, 2, 1, "", "kaiser_bessel_derived_window"], [346, 2, 1, "", "kaiser_window"], [353, 2, 1, "", "khatri_rao"], [353, 2, 1, "", "kron"], [353, 2, 1, "", "kronecker"], [354, 2, 1, "", "l1_loss"], [358, 2, 1, "", "l1_normalize"], [358, 2, 1, "", "l2_normalize"], [589, 2, 1, "", "lamb_update"], [589, 2, 1, "", "lars_update"], [596, 2, 1, "", "layer_norm"], [254, 2, 1, "", "lcm"], [349, 2, 1, "", "ldexp"], [580, 2, 1, "", "leaky_relu"], [349, 2, 1, "", "lerp"], [255, 2, 1, "", "less"], [256, 2, 1, "", "less_equal"], [362, 2, 1, "", "lexsort"], [349, 2, 1, "", "lgamma"], [614, 2, 1, "", "linear"], [134, 2, 1, "", "linspace"], [602, 2, 1, "", "load"], [257, 2, 1, "", "log"], [258, 2, 1, "", "log10"], [259, 2, 1, "", "log1p"], [260, 2, 1, "", "log2"], [354, 2, 1, "", "log_poisson_loss"], [580, 2, 1, "", "log_softmax"], [261, 2, 1, "", "logaddexp"], [262, 2, 1, "", "logaddexp2"], [263, 2, 1, "", "logical_and"], [264, 2, 1, "", "logical_not"], [265, 2, 1, "", "logical_or"], [266, 2, 1, "", "logical_xor"], [344, 2, 1, "", "logit"], [344, 2, 1, "", "logsigmoid"], [135, 2, 1, "", "logspace"], [358, 2, 1, "", "lp_normalize"], [615, 2, 1, "", "lstm_update"], [628, 2, 1, "", "lu_factor"], [353, 2, 1, "", "make_svd_non_negative"], [594, 2, 1, "", "maml_step"], [595, 2, 1, "", "map"], [595, 2, 1, "", "map_nest_at_index"], [595, 2, 1, "", "map_nest_at_indices"], [588, 2, 1, "", "match_kwargs"], [629, 2, 1, "", "matmul"], [355, 2, 1, "", "matricize"], [353, 2, 1, "", "matrix_exp"], [591, 2, 1, "", "matrix_norm"], [591, 2, 1, "", "matrix_power"], [591, 2, 1, "", "matrix_rank"], [591, 2, 1, "", "matrix_transpose"], [601, 2, 1, "", "max"], [352, 2, 1, "", "max_pool1d"], [352, 2, 1, "", "max_pool2d"], [352, 2, 1, "", "max_pool3d"], [352, 2, 1, "", "max_unpool1d"], [267, 2, 1, "", "maximum"], [601, 2, 1, "", "mean"], [364, 2, 1, "", "median"], [346, 2, 1, "", "mel_weight_matrix"], [136, 2, 1, "", "meshgrid"], [601, 2, 1, "", "min"], [268, 2, 1, "", "minimum"], [580, 2, 1, "", "mish"], [353, 2, 1, "", "mode_dot"], [349, 2, 1, "", "modf"], [355, 2, 1, "", "moveaxis"], [600, 2, 1, "", "msort"], [353, 2, 1, "", "multi_dot"], [616, 2, 1, "", "multi_head_attention"], [595, 2, 1, "", "multi_index_nest"], [353, 2, 1, "", "multi_mode_dot"], [597, 2, 1, "", "multinomial"], [269, 2, 1, "", "multiply"], [588, 2, 1, "", "multiprocessing"], [581, 6, 1, "", "nan"], [270, 2, 1, "", "nan_to_num"], [364, 2, 1, "", "nanmean"], [364, 2, 1, "", "nanmedian"], [364, 2, 1, "", "nanprod"], [349, 2, 1, "", "nansum"], [137, 2, 1, "", "native_array"], [363, 2, 1, "", "native_sparse_array"], [363, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [346, 2, 1, "", "ndenumerate"], [346, 2, 1, "", "ndindex"], [352, 2, 1, "", "nearest_interpolate"], [271, 2, 1, "", "negative"], [595, 2, 1, "", "nested_any"], [595, 2, 1, "", "nested_argwhere"], [595, 2, 1, "", "nested_map"], [595, 2, 1, "", "nested_multi_map"], [581, 6, 1, "", "newaxis"], [349, 2, 1, "", "nextafter"], [598, 2, 1, "", "nonzero"], [272, 2, 1, "", "not_equal"], [588, 2, 1, "", "num_arrays_in_memory"], [200, 2, 1, "", "num_cpu_cores"], [201, 2, 1, "", "num_gpus"], [202, 2, 1, "", "num_ivy_arrays_on_dev"], [138, 2, 1, "", "one_hot"], [139, 2, 1, "", "ones"], [140, 2, 1, "", "ones_like"], [589, 2, 1, "", "optimizer_update"], [365, 2, 1, "", "optional_get_element"], [591, 2, 1, "", "outer"], [355, 2, 1, "", "pad"], [355, 2, 1, "", "partial_fold"], [355, 2, 1, "", "partial_tensor_to_vec"], [353, 2, 1, "", "partial_tucker"], [355, 2, 1, "", "partial_unfold"], [355, 2, 1, "", "partial_vec_to_tensor"], [203, 2, 1, "", "percent_used_mem_on_dev"], [593, 2, 1, "", "permute_dims"], [581, 6, 1, "", "pi"], [591, 2, 1, "", "pinv"], [359, 2, 1, "", "poisson"], [352, 2, 1, "", "pool"], [273, 2, 1, "", "positive"], [274, 2, 1, "", "pow"], [344, 2, 1, "", "prelu"], [588, 2, 1, "", "print_all_arrays_in_memory"], [204, 2, 1, "", "print_all_ivy_arrays_on_dev"], [601, 2, 1, "", "prod"], [174, 2, 1, "", "promote_types"], [175, 2, 1, "", "promote_types_of_inputs"], [595, 2, 1, "", "prune_empty"], [595, 2, 1, "", "prune_nest_at_index"], [595, 2, 1, "", "prune_nest_at_indices"], [355, 2, 1, "", "put_along_axis"], [591, 2, 1, "", "qr"], [364, 2, 1, "", "quantile"], [275, 2, 1, "", "rad2deg"], [597, 2, 1, "", "randint"], [346, 2, 1, "", "random_cp"], [597, 2, 1, "", "random_normal"], [346, 2, 1, "", "random_tucker"], [597, 2, 1, "", "random_uniform"], [276, 2, 1, "", "real"], [277, 2, 1, "", "reciprocal"], [350, 2, 1, "", "reduce"], [352, 2, 1, "", "reduce_window"], [580, 2, 1, "", "relu"], [344, 2, 1, "", "relu6"], [278, 2, 1, "", "remainder"], [593, 2, 1, "", "repeat"], [594, 2, 1, "", "reptile_step"], [593, 2, 1, "", "reshape"], [176, 2, 1, "", "result_type"], [352, 2, 1, "", "rfftn"], [593, 2, 1, "", "roll"], [355, 2, 1, "", "rot90"], [279, 2, 1, "", "round"], [602, 2, 1, "", "save"], [617, 2, 1, "", "scaled_dot_product_attention"], [588, 2, 1, "", "scatter_flat"], [588, 2, 1, "", "scatter_nd"], [600, 2, 1, "", "searchsorted"], [597, 2, 1, "", "seed"], [344, 2, 1, "", "selu"], [344, 2, 1, "", "sequence_length"], [588, 2, 1, "", "set_array_mode"], [177, 2, 1, "", "set_default_complex_dtype"], [205, 2, 1, "", "set_default_device"], [178, 2, 1, "", "set_default_dtype"], [179, 2, 1, "", "set_default_float_dtype"], [180, 2, 1, "", "set_default_int_dtype"], [181, 2, 1, "", "set_default_uint_dtype"], [588, 2, 1, "", "set_exception_trace_mode"], [588, 2, 1, "", "set_inplace_mode"], [588, 2, 1, "", "set_item"], [588, 2, 1, "", "set_min_base"], [588, 2, 1, "", "set_min_denominator"], [595, 2, 1, "", "set_nest_at_index"], [595, 2, 1, "", "set_nest_at_indices"], [588, 2, 1, "", "set_nestable_mode"], [588, 2, 1, "", "set_precise_mode"], [588, 2, 1, "", "set_queue_timeout"], [588, 2, 1, "", "set_shape_array_mode"], [588, 2, 1, "", "set_show_func_wrapper_trace_mode"], [206, 2, 1, "", "set_soft_device_mode"], [207, 2, 1, "", "set_split_factor"], [588, 2, 1, "", "set_tmp_dir"], [588, 2, 1, "", "shape"], [597, 2, 1, "", "shuffle"], [580, 2, 1, "", "sigmoid"], [280, 2, 1, "", "sign"], [349, 2, 1, "", "signbit"], [344, 2, 1, "", "silu"], [281, 2, 1, "", "sin"], [349, 2, 1, "", "sinc"], [282, 2, 1, "", "sinh"], [591, 2, 1, "", "slogdet"], [354, 2, 1, "", "smooth_l1_loss"], [354, 2, 1, "", "soft_margin_loss"], [355, 2, 1, "", "soft_thresholding"], [580, 2, 1, "", "softmax"], [580, 2, 1, "", "softplus"], [580, 2, 1, "", "softsign"], [591, 2, 1, "", "solve"], [600, 2, 1, "", "sort"], [592, 2, 1, "", "sparse_cross_entropy"], [349, 2, 1, "", "sparsify_tensor"], [593, 2, 1, "", "split"], [208, 2, 1, "", "split_factor"], [209, 2, 1, "", "split_func_call"], [283, 2, 1, "", "sqrt"], [284, 2, 1, "", "square"], [593, 2, 1, "", "squeeze"], [588, 2, 1, "", "stable_divide"], [588, 2, 1, "", "stable_pow"], [593, 2, 1, "", "stack"], [601, 2, 1, "", "std"], [589, 2, 1, "", "stop_gradient"], [588, 2, 1, "", "strides"], [285, 2, 1, "", "subtract"], [601, 2, 1, "", "sum"], [588, 2, 1, "", "supports_inplace_updates"], [591, 2, 1, "", "svd"], [353, 2, 1, "", "svd_flip"], [591, 2, 1, "", "svdvals"], [593, 2, 1, "", "swapaxes"], [355, 2, 1, "", "take_along_axis"], [286, 2, 1, "", "tan"], [287, 2, 1, "", "tanh"], [591, 2, 1, "", "tensordot"], [591, 2, 1, "", "tensorsolve"], [344, 2, 1, "", "thresholded_relu"], [593, 2, 1, "", "tile"], [210, 2, 1, "", "to_device"], [588, 2, 1, "", "to_ivy_shape"], [588, 2, 1, "", "to_list"], [588, 2, 1, "", "to_native_shape"], [588, 2, 1, "", "to_numpy"], [588, 2, 1, "", "to_scalar"], [355, 2, 1, "", "top_k"], [211, 2, 1, "", "total_mem_on_dev"], [212, 2, 1, "", "tpu_is_available"], [591, 2, 1, "", "trace"], [796, 2, 1, "", "transpile"], [288, 2, 1, "", "trapz"], [141, 2, 1, "", "tril"], [346, 2, 1, "", "tril_indices"], [346, 2, 1, "", "trilu"], [142, 2, 1, "", "triu"], [143, 2, 1, "", "triu_indices"], [289, 2, 1, "", "trunc"], [290, 2, 1, "", "trunc_divide"], [353, 2, 1, "", "truncated_svd"], [588, 2, 1, "", "try_else_none"], [582, 2, 1, "", "try_except"], [353, 2, 1, "", "tucker"], [182, 2, 1, "", "type_promote_arrays"], [355, 2, 1, "", "unfold"], [796, 2, 1, "", "unify"], [599, 2, 1, "", "unique_all"], [355, 2, 1, "", "unique_consecutive"], [599, 2, 1, "", "unique_counts"], [599, 2, 1, "", "unique_inverse"], [599, 2, 1, "", "unique_values"], [360, 2, 1, "", "unravel_index"], [588, 2, 1, "", "unset_array_mode"], [183, 2, 1, "", "unset_default_complex_dtype"], [213, 2, 1, "", "unset_default_device"], [184, 2, 1, "", "unset_default_dtype"], [185, 2, 1, "", "unset_default_float_dtype"], [186, 2, 1, "", "unset_default_int_dtype"], [187, 2, 1, "", "unset_default_uint_dtype"], [588, 2, 1, "", "unset_exception_trace_mode"], [588, 2, 1, "", "unset_inplace_mode"], [588, 2, 1, "", "unset_min_base"], [588, 2, 1, "", "unset_min_denominator"], [588, 2, 1, "", "unset_nestable_mode"], [588, 2, 1, "", "unset_precise_mode"], [588, 2, 1, "", "unset_queue_timeout"], [588, 2, 1, "", "unset_shape_array_mode"], [588, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [214, 2, 1, "", "unset_soft_device_mode"], [588, 2, 1, "", "unset_tmp_dir"], [346, 2, 1, "", "unsorted_segment_min"], [346, 2, 1, "", "unsorted_segment_sum"], [593, 2, 1, "", "unstack"], [215, 2, 1, "", "used_mem_on_dev"], [188, 2, 1, "", "valid_dtype"], [589, 2, 1, "", "value_and_grad"], [588, 2, 1, "", "value_is_nan"], [591, 2, 1, "", "vander"], [601, 2, 1, "", "var"], [591, 2, 1, "", "vecdot"], [591, 2, 1, "", "vector_norm"], [591, 2, 1, "", "vector_to_skew_symmetric_matrix"], [588, 2, 1, "", "vmap"], [346, 2, 1, "", "vorbis_window"], [355, 2, 1, "", "vsplit"], [355, 2, 1, "", "vstack"], [598, 2, 1, "", "where"], [582, 2, 1, "", "while_loop"], [349, 2, 1, "", "xlogy"], [593, 2, 1, "", "zero_pad"], [144, 2, 1, "", "zeros"], [145, 2, 1, "", "zeros_like"], [349, 2, 1, "", "zeta"]], "ivy.Container": [[216, 0, 1, "", "abs"], [217, 0, 1, "", "acos"], [218, 0, 1, "", "acosh"], [569, 0, 1, "", "adam_step"], [570, 0, 1, "", "adam_update"], [366, 0, 1, "", "adaptive_avg_pool1d"], [367, 0, 1, "", "adaptive_avg_pool2d"], [368, 0, 1, "", "adaptive_max_pool2d"], [219, 0, 1, "", "add"], [396, 0, 1, "", "adjoint"], [719, 0, 1, "", "all"], [489, 0, 1, "", "all_equal"], [317, 0, 1, "", "allclose"], [220, 0, 1, "", "angle"], [720, 0, 1, "", "any"], [696, 0, 1, "", "argmax"], [697, 0, 1, "", "argmin"], [705, 0, 1, "", "argsort"], [698, 0, 1, "", "argwhere"], [492, 0, 1, "", "array_equal"], [422, 0, 1, "", "as_strided"], [120, 0, 1, "", "asarray"], [221, 0, 1, "", "asin"], [222, 0, 1, "", "asinh"], [493, 0, 1, "", "assert_supports_inplace"], [423, 0, 1, "", "associative_scan"], [148, 0, 1, "", "astype"], [223, 0, 1, "", "atan"], [224, 0, 1, "", "atan2"], [225, 0, 1, "", "atanh"], [424, 0, 1, "", "atleast_1d"], [425, 0, 1, "", "atleast_2d"], [426, 0, 1, "", "atleast_3d"], [370, 0, 1, "", "avg_pool1d"], [371, 0, 1, "", "avg_pool2d"], [372, 0, 1, "", "avg_pool3d"], [458, 0, 1, "", "batch_norm"], [464, 0, 1, "", "bernoulli"], [465, 0, 1, "", "beta"], [318, 0, 1, "", "binarizer"], [648, 0, 1, "", "binary_cross_entropy"], [476, 0, 1, "", "bincount"], [226, 0, 1, "", "bitwise_and"], [227, 0, 1, "", "bitwise_invert"], [228, 0, 1, "", "bitwise_left_shift"], [229, 0, 1, "", "bitwise_or"], [230, 0, 1, "", "bitwise_right_shift"], [231, 0, 1, "", "bitwise_xor"], [300, 0, 1, "", "blackman_window"], [149, 0, 1, "", "broadcast_arrays"], [427, 0, 1, "", "broadcast_shapes"], [150, 0, 1, "", "broadcast_to"], [151, 0, 1, "", "can_cast"], [232, 0, 1, "", "ceil"], [618, 0, 1, "", "cholesky"], [651, 0, 1, "", "clip"], [495, 0, 1, "", "clip_matrix_norm"], [496, 0, 1, "", "clip_vector_norm"], [652, 0, 1, "", "concat"], [429, 0, 1, "", "concat_from_sequence"], [397, 0, 1, "", "cond"], [319, 0, 1, "", "conj"], [653, 0, 1, "", "constant_pad"], [604, 0, 1, "", "conv1d"], [605, 0, 1, "", "conv1d_transpose"], [606, 0, 1, "", "conv2d"], [607, 0, 1, "", "conv2d_transpose"], [608, 0, 1, "", "conv3d"], [609, 0, 1, "", "conv3d_transpose"], [126, 0, 1, "", "copy_array"], [320, 0, 1, "", "copysign"], [477, 0, 1, "", "corrcoef"], [233, 0, 1, "", "cos"], [234, 0, 1, "", "cosh"], [321, 0, 1, "", "count_nonzero"], [478, 0, 1, "", "cov"], [619, 0, 1, "", "cross"], [649, 0, 1, "", "cross_entropy"], [479, 0, 1, "", "cummax"], [480, 0, 1, "", "cummin"], [709, 0, 1, "", "cumprod"], [710, 0, 1, "", "cumsum"], [373, 0, 1, "", "dct"], [235, 0, 1, "", "deg2rad"], [612, 0, 1, "", "depthwise_conv2d"], [620, 0, 1, "", "det"], [193, 0, 1, "", "dev"], [374, 0, 1, "", "dft"], [621, 0, 1, "", "diag"], [398, 0, 1, "", "diagflat"], [622, 0, 1, "", "diagonal"], [322, 0, 1, "", "diff"], [323, 0, 1, "", "digamma"], [466, 0, 1, "", "dirichlet"], [236, 0, 1, "", "divide"], [399, 0, 1, "", "dot"], [613, 0, 1, "", "dropout"], [375, 0, 1, "", "dropout1d"], [376, 0, 1, "", "dropout2d"], [377, 0, 1, "", "dropout3d"], [430, 0, 1, "", "dsplit"], [431, 0, 1, "", "dstack"], [159, 0, 1, "", "dtype"], [623, 0, 1, "", "eig"], [624, 0, 1, "", "eigh"], [401, 0, 1, "", "eigh_tridiagonal"], [402, 0, 1, "", "eigvals"], [625, 0, 1, "", "eigvalsh"], [500, 0, 1, "", "einops_rearrange"], [501, 0, 1, "", "einops_reduce"], [502, 0, 1, "", "einops_repeat"], [711, 0, 1, "", "einsum"], [291, 0, 1, "", "elu"], [378, 0, 1, "", "embedding"], [128, 0, 1, "", "empty_like"], [237, 0, 1, "", "equal"], [238, 0, 1, "", "erf"], [503, 0, 1, "", "exists"], [239, 0, 1, "", "exp"], [240, 0, 1, "", "exp2"], [432, 0, 1, "", "expand"], [654, 0, 1, "", "expand_dims"], [241, 0, 1, "", "expm1"], [301, 0, 1, "", "eye_like"], [379, 0, 1, "", "fft"], [433, 0, 1, "", "fill_diagonal"], [161, 0, 1, "", "finfo"], [324, 0, 1, "", "fix"], [434, 0, 1, "", "flatten"], [655, 0, 1, "", "flip"], [435, 0, 1, "", "fliplr"], [436, 0, 1, "", "flipud"], [325, 0, 1, "", "float_power"], [242, 0, 1, "", "floor"], [243, 0, 1, "", "floor_divide"], [326, 0, 1, "", "fmax"], [244, 0, 1, "", "fmin"], [245, 0, 1, "", "fmod"], [437, 0, 1, "", "fold"], [504, 0, 1, "", "fourier_encode"], [327, 0, 1, "", "frexp"], [130, 0, 1, "", "from_dlpack"], [131, 0, 1, "", "frombuffer"], [133, 0, 1, "", "full_like"], [467, 0, 1, "", "gamma"], [507, 0, 1, "", "gather"], [508, 0, 1, "", "gather_nd"], [246, 0, 1, "", "gcd"], [101, 0, 1, "", "gelu"], [403, 0, 1, "", "general_inner_product"], [511, 0, 1, "", "get_num_dims"], [328, 0, 1, "", "gradient"], [573, 0, 1, "", "gradient_descent_update"], [247, 0, 1, "", "greater"], [248, 0, 1, "", "greater_equal"], [459, 0, 1, "", "group_norm"], [302, 0, 1, "", "hamming_window"], [303, 0, 1, "", "hann_window"], [102, 0, 1, "", "hardswish"], [513, 0, 1, "", "has_nans"], [438, 0, 1, "", "heaviside"], [481, 0, 1, "", "histogram"], [439, 0, 1, "", "hsplit"], [440, 0, 1, "", "hstack"], [417, 0, 1, "", "huber_loss"], [329, 0, 1, "", "hypot"], [441, 0, 1, "", "i0"], [383, 0, 1, "", "idct"], [384, 0, 1, "", "ifft"], [385, 0, 1, "", "ifftn"], [482, 0, 1, "", "igamma"], [164, 0, 1, "", "iinfo"], [249, 0, 1, "", "imag"], [404, 0, 1, "", "initialize_tucker"], [626, 0, 1, "", "inner"], [515, 0, 1, "", "inplace_decrement"], [516, 0, 1, "", "inplace_increment"], [517, 0, 1, "", "inplace_update"], [460, 0, 1, "", "instance_norm"], [387, 0, 1, "", "interpolate"], [627, 0, 1, "", "inv"], [470, 0, 1, "", "invert_permutation"], [519, 0, 1, "", "is_array"], [167, 0, 1, "", "is_bool_dtype"], [168, 0, 1, "", "is_complex_dtype"], [169, 0, 1, "", "is_float_dtype"], [171, 0, 1, "", "is_int_dtype"], [520, 0, 1, "", "is_ivy_array"], [523, 0, 1, "", "is_native_array"], [173, 0, 1, "", "is_uint_dtype"], [330, 0, 1, "", "isclose"], [250, 0, 1, "", "isfinite"], [524, 0, 1, "", "isin"], [251, 0, 1, "", "isinf"], [252, 0, 1, "", "isnan"], [253, 0, 1, "", "isreal"], [526, 0, 1, "", "itemsize"], [305, 0, 1, "", "kaiser_bessel_derived_window"], [306, 0, 1, "", "kaiser_window"], [406, 0, 1, "", "kron"], [418, 0, 1, "", "l1_loss"], [461, 0, 1, "", "l1_normalize"], [462, 0, 1, "", "l2_normalize"], [575, 0, 1, "", "lamb_update"], [576, 0, 1, "", "lars_update"], [689, 0, 1, "", "layer_norm"], [254, 0, 1, "", "lcm"], [331, 0, 1, "", "ldexp"], [103, 0, 1, "", "leaky_relu"], [332, 0, 1, "", "lerp"], [255, 0, 1, "", "less"], [256, 0, 1, "", "less_equal"], [471, 0, 1, "", "lexsort"], [614, 0, 1, "", "linear"], [134, 0, 1, "", "linspace"], [257, 0, 1, "", "log"], [258, 0, 1, "", "log10"], [259, 0, 1, "", "log1p"], [260, 0, 1, "", "log2"], [104, 0, 1, "", "log_softmax"], [261, 0, 1, "", "logaddexp"], [262, 0, 1, "", "logaddexp2"], [263, 0, 1, "", "logical_and"], [264, 0, 1, "", "logical_not"], [265, 0, 1, "", "logical_or"], [266, 0, 1, "", "logical_xor"], [292, 0, 1, "", "logit"], [293, 0, 1, "", "logsigmoid"], [135, 0, 1, "", "logspace"], [463, 0, 1, "", "lp_normalize"], [615, 0, 1, "", "lstm_update"], [408, 0, 1, "", "make_svd_non_negative"], [629, 0, 1, "", "matmul"], [442, 0, 1, "", "matricize"], [409, 0, 1, "", "matrix_exp"], [630, 0, 1, "", "matrix_norm"], [631, 0, 1, "", "matrix_power"], [632, 0, 1, "", "matrix_rank"], [633, 0, 1, "", "matrix_transpose"], [712, 0, 1, "", "max"], [388, 0, 1, "", "max_pool1d"], [389, 0, 1, "", "max_pool2d"], [390, 0, 1, "", "max_pool3d"], [267, 0, 1, "", "maximum"], [713, 0, 1, "", "mean"], [483, 0, 1, "", "median"], [307, 0, 1, "", "mel_weight_matrix"], [136, 0, 1, "", "meshgrid"], [714, 0, 1, "", "min"], [268, 0, 1, "", "minimum"], [105, 0, 1, "", "mish"], [410, 0, 1, "", "mode_dot"], [334, 0, 1, "", "modf"], [443, 0, 1, "", "moveaxis"], [706, 0, 1, "", "msort"], [411, 0, 1, "", "multi_dot"], [616, 0, 1, "", "multi_head_attention"], [412, 0, 1, "", "multi_mode_dot"], [690, 0, 1, "", "multinomial"], [269, 0, 1, "", "multiply"], [270, 0, 1, "", "nan_to_num"], [484, 0, 1, "", "nanmean"], [485, 0, 1, "", "nanmedian"], [486, 0, 1, "", "nanprod"], [335, 0, 1, "", "nansum"], [137, 0, 1, "", "native_array"], [271, 0, 1, "", "negative"], [336, 0, 1, "", "nextafter"], [699, 0, 1, "", "nonzero"], [272, 0, 1, "", "not_equal"], [138, 0, 1, "", "one_hot"], [140, 0, 1, "", "ones_like"], [577, 0, 1, "", "optimizer_update"], [488, 0, 1, "", "optional_get_element"], [634, 0, 1, "", "outer"], [444, 0, 1, "", "pad"], [445, 0, 1, "", "partial_fold"], [446, 0, 1, "", "partial_tensor_to_vec"], [413, 0, 1, "", "partial_tucker"], [447, 0, 1, "", "partial_unfold"], [448, 0, 1, "", "partial_vec_to_tensor"], [656, 0, 1, "", "permute_dims"], [635, 0, 1, "", "pinv"], [468, 0, 1, "", "poisson"], [273, 0, 1, "", "positive"], [274, 0, 1, "", "pow"], [294, 0, 1, "", "prelu"], [715, 0, 1, "", "prod"], [636, 0, 1, "", "qr"], [487, 0, 1, "", "quantile"], [275, 0, 1, "", "rad2deg"], [691, 0, 1, "", "randint"], [692, 0, 1, "", "random_normal"], [693, 0, 1, "", "random_uniform"], [276, 0, 1, "", "real"], [277, 0, 1, "", "reciprocal"], [342, 0, 1, "", "reduce"], [394, 0, 1, "", "reduce_window"], [106, 0, 1, "", "relu"], [295, 0, 1, "", "relu6"], [278, 0, 1, "", "remainder"], [657, 0, 1, "", "repeat"], [658, 0, 1, "", "reshape"], [176, 0, 1, "", "result_type"], [395, 0, 1, "", "rfftn"], [659, 0, 1, "", "roll"], [450, 0, 1, "", "rot90"], [279, 0, 1, "", "round"], [617, 0, 1, "", "scaled_dot_product_attention"], [531, 0, 1, "", "scatter_flat"], [532, 0, 1, "", "scatter_nd"], [707, 0, 1, "", "searchsorted"], [296, 0, 1, "", "selu"], [695, 0, 1, "", "shuffle"], [107, 0, 1, "", "sigmoid"], [280, 0, 1, "", "sign"], [337, 0, 1, "", "signbit"], [298, 0, 1, "", "silu"], [281, 0, 1, "", "sin"], [338, 0, 1, "", "sinc"], [282, 0, 1, "", "sinh"], [637, 0, 1, "", "slogdet"], [420, 0, 1, "", "smooth_l1_loss"], [421, 0, 1, "", "soft_margin_loss"], [451, 0, 1, "", "soft_thresholding"], [108, 0, 1, "", "softmax"], [109, 0, 1, "", "softplus"], [638, 0, 1, "", "solve"], [708, 0, 1, "", "sort"], [650, 0, 1, "", "sparse_cross_entropy"], [339, 0, 1, "", "sparsify_tensor"], [660, 0, 1, "", "split"], [283, 0, 1, "", "sqrt"], [284, 0, 1, "", "square"], [661, 0, 1, "", "squeeze"], [546, 0, 1, "", "stable_divide"], [547, 0, 1, "", "stable_pow"], [662, 0, 1, "", "stack"], [716, 0, 1, "", "std"], [578, 0, 1, "", "stop_gradient"], [548, 0, 1, "", "strides"], [285, 0, 1, "", "subtract"], [717, 0, 1, "", "sum"], [549, 0, 1, "", "supports_inplace_updates"], [639, 0, 1, "", "svd"], [414, 0, 1, "", "svd_flip"], [640, 0, 1, "", "svdvals"], [663, 0, 1, "", "swapaxes"], [452, 0, 1, "", "take_along_axis"], [286, 0, 1, "", "tan"], [287, 0, 1, "", "tanh"], [641, 0, 1, "", "tensordot"], [642, 0, 1, "", "tensorsolve"], [299, 0, 1, "", "thresholded_relu"], [664, 0, 1, "", "tile"], [210, 0, 1, "", "to_device"], [551, 0, 1, "", "to_list"], [553, 0, 1, "", "to_numpy"], [554, 0, 1, "", "to_scalar"], [453, 0, 1, "", "top_k"], [643, 0, 1, "", "trace"], [288, 0, 1, "", "trapz"], [141, 0, 1, "", "tril"], [312, 0, 1, "", "tril_indices"], [313, 0, 1, "", "trilu"], [142, 0, 1, "", "triu"], [143, 0, 1, "", "triu_indices"], [289, 0, 1, "", "trunc"], [290, 0, 1, "", "trunc_divide"], [415, 0, 1, "", "truncated_svd"], [416, 0, 1, "", "tucker"], [454, 0, 1, "", "unfold"], [701, 0, 1, "", "unique_all"], [455, 0, 1, "", "unique_consecutive"], [702, 0, 1, "", "unique_counts"], [703, 0, 1, "", "unique_inverse"], [704, 0, 1, "", "unique_values"], [469, 0, 1, "", "unravel_index"], [314, 0, 1, "", "unsorted_segment_min"], [315, 0, 1, "", "unsorted_segment_sum"], [665, 0, 1, "", "unstack"], [567, 0, 1, "", "value_is_nan"], [644, 0, 1, "", "vander"], [718, 0, 1, "", "var"], [645, 0, 1, "", "vecdot"], [646, 0, 1, "", "vector_norm"], [647, 0, 1, "", "vector_to_skew_symmetric_matrix"], [316, 0, 1, "", "vorbis_window"], [456, 0, 1, "", "vsplit"], [457, 0, 1, "", "vstack"], [700, 0, 1, "", "where"], [340, 0, 1, "", "xlogy"], [666, 0, 1, "", "zero_pad"], [145, 0, 1, "", "zeros_like"], [341, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[45, 3, 0, "-", "activations"], [93, 3, 0, "-", "array"], [46, 3, 0, "-", "conversions"], [47, 3, 0, "-", "creation"], [48, 3, 0, "-", "data_type"], [49, 3, 0, "-", "device"], [50, 3, 0, "-", "elementwise"], [51, 3, 0, "-", "experimental"], [52, 3, 0, "-", "general"], [53, 3, 0, "-", "gradients"], [54, 3, 0, "-", "image"], [55, 3, 0, "-", "layers"], [56, 3, 0, "-", "linear_algebra"], [57, 3, 0, "-", "losses"], [58, 3, 0, "-", "manipulation"], [59, 3, 0, "-", "norms"], [60, 3, 0, "-", "random"], [61, 3, 0, "-", "searching"], [62, 3, 0, "-", "set"], [63, 3, 0, "-", "sorting"], [64, 3, 0, "-", "statistical"], [65, 3, 0, "-", "utility"], [66, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[45, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "gelu"], [45, 0, 1, "", "hardswish"], [45, 0, 1, "", "leaky_relu"], [45, 0, 1, "", "log_softmax"], [45, 0, 1, "", "mish"], [45, 0, 1, "", "relu"], [45, 0, 1, "", "sigmoid"], [45, 0, 1, "", "softmax"], [45, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[93, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[93, 5, 1, "", "T"], [93, 0, 1, "", "__abs__"], [93, 0, 1, "", "__add__"], [93, 0, 1, "", "__eq__"], [93, 0, 1, "", "__ge__"], [93, 0, 1, "", "__gt__"], [93, 0, 1, "", "__init__"], [93, 0, 1, "", "__le__"], [93, 0, 1, "", "__lt__"], [93, 0, 1, "", "__ne__"], [93, 0, 1, "", "__pow__"], [93, 0, 1, "", "__radd__"], [93, 0, 1, "", "__rrshift__"], [93, 0, 1, "", "__rshift__"], [93, 0, 1, "", "__rsub__"], [93, 0, 1, "", "__sub__"], [93, 0, 1, "", "__truediv__"], [93, 0, 1, "", "__xor__"], [93, 5, 1, "", "backend"], [93, 5, 1, "", "base"], [93, 5, 1, "", "data"], [93, 5, 1, "", "device"], [93, 5, 1, "", "dtype"], [93, 5, 1, "", "dynamic_backend"], [93, 5, 1, "", "imag"], [93, 5, 1, "", "itemsize"], [93, 5, 1, "", "mT"], [93, 5, 1, "", "ndim"], [93, 5, 1, "", "real"], [93, 5, 1, "", "shape"], [93, 5, 1, "", "size"], [93, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[46, 2, 1, "", "_to_ivy"], [46, 2, 1, "", "_to_native"], [46, 2, 1, "", "args_to_ivy"], [46, 2, 1, "", "args_to_native"], [46, 2, 1, "", "to_ivy"], [46, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[47, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[47, 4, 1, "", "_abc_impl"], [47, 0, 1, "", "asarray"], [47, 0, 1, "", "copy_array"], [47, 0, 1, "", "empty_like"], [47, 0, 1, "", "from_dlpack"], [47, 0, 1, "", "full_like"], [47, 0, 1, "", "linspace"], [47, 0, 1, "", "logspace"], [47, 0, 1, "", "meshgrid"], [47, 0, 1, "", "native_array"], [47, 0, 1, "", "one_hot"], [47, 0, 1, "", "ones_like"], [47, 0, 1, "", "tril"], [47, 0, 1, "", "triu"], [47, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[48, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "astype"], [48, 0, 1, "", "broadcast_arrays"], [48, 0, 1, "", "broadcast_to"], [48, 0, 1, "", "can_cast"], [48, 0, 1, "", "dtype"], [48, 0, 1, "", "finfo"], [48, 0, 1, "", "iinfo"], [48, 0, 1, "", "is_bool_dtype"], [48, 0, 1, "", "is_float_dtype"], [48, 0, 1, "", "is_int_dtype"], [48, 0, 1, "", "is_uint_dtype"], [48, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[49, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "dev"], [49, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[50, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "abs"], [50, 0, 1, "", "acos"], [50, 0, 1, "", "acosh"], [50, 0, 1, "", "add"], [50, 0, 1, "", "angle"], [50, 0, 1, "", "asin"], [50, 0, 1, "", "asinh"], [50, 0, 1, "", "atan"], [50, 0, 1, "", "atan2"], [50, 0, 1, "", "atanh"], [50, 0, 1, "", "bitwise_and"], [50, 0, 1, "", "bitwise_invert"], [50, 0, 1, "", "bitwise_left_shift"], [50, 0, 1, "", "bitwise_or"], [50, 0, 1, "", "bitwise_right_shift"], [50, 0, 1, "", "bitwise_xor"], [50, 0, 1, "", "ceil"], [50, 0, 1, "", "cos"], [50, 0, 1, "", "cosh"], [50, 0, 1, "", "deg2rad"], [50, 0, 1, "", "divide"], [50, 0, 1, "", "equal"], [50, 0, 1, "", "erf"], [50, 0, 1, "", "exp"], [50, 0, 1, "", "exp2"], [50, 0, 1, "", "expm1"], [50, 0, 1, "", "floor"], [50, 0, 1, "", "floor_divide"], [50, 0, 1, "", "fmin"], [50, 0, 1, "", "gcd"], [50, 0, 1, "", "greater"], [50, 0, 1, "", "greater_equal"], [50, 0, 1, "", "imag"], [50, 0, 1, "", "isfinite"], [50, 0, 1, "", "isinf"], [50, 0, 1, "", "isnan"], [50, 0, 1, "", "isreal"], [50, 0, 1, "", "lcm"], [50, 0, 1, "", "less"], [50, 0, 1, "", "less_equal"], [50, 0, 1, "", "log"], [50, 0, 1, "", "log10"], [50, 0, 1, "", "log1p"], [50, 0, 1, "", "log2"], [50, 0, 1, "", "logaddexp"], [50, 0, 1, "", "logaddexp2"], [50, 0, 1, "", "logical_and"], [50, 0, 1, "", "logical_not"], [50, 0, 1, "", "logical_or"], [50, 0, 1, "", "logical_xor"], [50, 0, 1, "", "maximum"], [50, 0, 1, "", "minimum"], [50, 0, 1, "", "multiply"], [50, 0, 1, "", "nan_to_num"], [50, 0, 1, "", "negative"], [50, 0, 1, "", "not_equal"], [50, 0, 1, "", "positive"], [50, 0, 1, "", "pow"], [50, 0, 1, "", "rad2deg"], [50, 0, 1, "", "real"], [50, 0, 1, "", "reciprocal"], [50, 0, 1, "", "remainder"], [50, 0, 1, "", "round"], [50, 0, 1, "", "sign"], [50, 0, 1, "", "sin"], [50, 0, 1, "", "sinh"], [50, 0, 1, "", "sqrt"], [50, 0, 1, "", "square"], [50, 0, 1, "", "subtract"], [50, 0, 1, "", "tan"], [50, 0, 1, "", "tanh"], [50, 0, 1, "", "trapz"], [50, 0, 1, "", "trunc"], [50, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[51, 3, 0, "-", "activations"], [51, 3, 0, "-", "conversions"], [51, 3, 0, "-", "creation"], [51, 3, 0, "-", "data_type"], [51, 3, 0, "-", "device"], [51, 3, 0, "-", "elementwise"], [51, 3, 0, "-", "general"], [51, 3, 0, "-", "gradients"], [51, 3, 0, "-", "image"], [51, 3, 0, "-", "layers"], [51, 3, 0, "-", "linear_algebra"], [51, 3, 0, "-", "losses"], [51, 3, 0, "-", "manipulation"], [51, 3, 0, "-", "norms"], [51, 3, 0, "-", "random"], [51, 3, 0, "-", "searching"], [51, 3, 0, "-", "set"], [51, 3, 0, "-", "sorting"], [51, 3, 0, "-", "statistical"], [51, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[51, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "elu"], [51, 0, 1, "", "logit"], [51, 0, 1, "", "logsigmoid"], [51, 0, 1, "", "prelu"], [51, 0, 1, "", "relu6"], [51, 0, 1, "", "selu"], [51, 0, 1, "", "silu"], [51, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[51, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[51, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "blackman_window"], [51, 0, 1, "", "eye_like"], [51, 0, 1, "", "mel_weight_matrix"], [51, 0, 1, "", "trilu"], [51, 0, 1, "", "unsorted_segment_min"], [51, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[51, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[51, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[51, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "allclose"], [51, 0, 1, "", "binarizer"], [51, 0, 1, "", "conj"], [51, 0, 1, "", "copysign"], [51, 0, 1, "", "count_nonzero"], [51, 0, 1, "", "diff"], [51, 0, 1, "", "digamma"], [51, 0, 1, "", "fix"], [51, 0, 1, "", "float_power"], [51, 0, 1, "", "fmax"], [51, 0, 1, "", "fmod"], [51, 0, 1, "", "frexp"], [51, 0, 1, "", "gradient"], [51, 0, 1, "", "hypot"], [51, 0, 1, "", "isclose"], [51, 0, 1, "", "ldexp"], [51, 0, 1, "", "lerp"], [51, 0, 1, "", "lgamma"], [51, 0, 1, "", "modf"], [51, 0, 1, "", "nansum"], [51, 0, 1, "", "nextafter"], [51, 0, 1, "", "signbit"], [51, 0, 1, "", "sinc"], [51, 0, 1, "", "sparsify_tensor"], [51, 0, 1, "", "xlogy"], [51, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[51, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[51, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[51, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[51, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "adaptive_avg_pool1d"], [51, 0, 1, "", "adaptive_avg_pool2d"], [51, 0, 1, "", "adaptive_max_pool2d"], [51, 0, 1, "", "avg_pool1d"], [51, 0, 1, "", "avg_pool2d"], [51, 0, 1, "", "avg_pool3d"], [51, 0, 1, "", "dct"], [51, 0, 1, "", "dft"], [51, 0, 1, "", "embedding"], [51, 0, 1, "", "fft"], [51, 0, 1, "", "fft2"], [51, 0, 1, "", "idct"], [51, 0, 1, "", "ifft"], [51, 0, 1, "", "ifftn"], [51, 0, 1, "", "interpolate"], [51, 0, 1, "", "max_pool1d"], [51, 0, 1, "", "max_pool2d"], [51, 0, 1, "", "max_pool3d"], [51, 0, 1, "", "reduce_window"], [51, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[51, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "adjoint"], [51, 0, 1, "", "cond"], [51, 0, 1, "", "diagflat"], [51, 0, 1, "", "dot"], [51, 0, 1, "", "eig"], [51, 0, 1, "", "eigh_tridiagonal"], [51, 0, 1, "", "eigvals"], [51, 0, 1, "", "general_inner_product"], [51, 0, 1, "", "initialize_tucker"], [51, 0, 1, "", "kron"], [51, 0, 1, "", "make_svd_non_negative"], [51, 0, 1, "", "matrix_exp"], [51, 0, 1, "", "mode_dot"], [51, 0, 1, "", "multi_dot"], [51, 0, 1, "", "multi_mode_dot"], [51, 0, 1, "", "partial_tucker"], [51, 0, 1, "", "svd_flip"], [51, 0, 1, "", "truncated_svd"], [51, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[51, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "huber_loss"], [51, 0, 1, "", "l1_loss"], [51, 0, 1, "", "smooth_l1_loss"], [51, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[51, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "as_strided"], [51, 0, 1, "", "associative_scan"], [51, 0, 1, "", "atleast_1d"], [51, 0, 1, "", "atleast_2d"], [51, 0, 1, "", "atleast_3d"], [51, 0, 1, "", "concat_from_sequence"], [51, 0, 1, "", "dsplit"], [51, 0, 1, "", "dstack"], [51, 0, 1, "", "expand"], [51, 0, 1, "", "fill_diagonal"], [51, 0, 1, "", "flatten"], [51, 0, 1, "", "fliplr"], [51, 0, 1, "", "flipud"], [51, 0, 1, "", "fold"], [51, 0, 1, "", "heaviside"], [51, 0, 1, "", "hsplit"], [51, 0, 1, "", "hstack"], [51, 0, 1, "", "i0"], [51, 0, 1, "", "matricize"], [51, 0, 1, "", "moveaxis"], [51, 0, 1, "", "pad"], [51, 0, 1, "", "partial_fold"], [51, 0, 1, "", "partial_tensor_to_vec"], [51, 0, 1, "", "partial_unfold"], [51, 0, 1, "", "partial_vec_to_tensor"], [51, 0, 1, "", "rot90"], [51, 0, 1, "", "soft_thresholding"], [51, 0, 1, "", "take_along_axis"], [51, 0, 1, "", "top_k"], [51, 0, 1, "", "unfold"], [51, 0, 1, "", "unique_consecutive"], [51, 0, 1, "", "vsplit"], [51, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[51, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "batch_norm"], [51, 0, 1, "", "group_norm"], [51, 0, 1, "", "instance_norm"], [51, 0, 1, "", "l1_normalize"], [51, 0, 1, "", "l2_normalize"], [51, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[51, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "bernoulli"], [51, 0, 1, "", "beta"], [51, 0, 1, "", "dirichlet"], [51, 0, 1, "", "gamma"], [51, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[51, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[51, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[51, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[51, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "bincount"], [51, 0, 1, "", "corrcoef"], [51, 0, 1, "", "cov"], [51, 0, 1, "", "cummax"], [51, 0, 1, "", "cummin"], [51, 0, 1, "", "histogram"], [51, 0, 1, "", "igamma"], [51, 0, 1, "", "median"], [51, 0, 1, "", "nanmean"], [51, 0, 1, "", "nanmedian"], [51, 0, 1, "", "nanprod"], [51, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[51, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[52, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "all_equal"], [52, 0, 1, "", "array_equal"], [52, 0, 1, "", "assert_supports_inplace"], [52, 0, 1, "", "clip_matrix_norm"], [52, 0, 1, "", "clip_vector_norm"], [52, 0, 1, "", "default"], [52, 0, 1, "", "einops_rearrange"], [52, 0, 1, "", "einops_reduce"], [52, 0, 1, "", "einops_repeat"], [52, 0, 1, "", "exists"], [52, 0, 1, "", "fourier_encode"], [52, 0, 1, "", "gather"], [52, 0, 1, "", "gather_nd"], [52, 0, 1, "", "get_num_dims"], [52, 0, 1, "", "has_nans"], [52, 0, 1, "", "inplace_decrement"], [52, 0, 1, "", "inplace_increment"], [52, 0, 1, "", "inplace_update"], [52, 0, 1, "", "is_array"], [52, 0, 1, "", "is_ivy_array"], [52, 0, 1, "", "is_ivy_container"], [52, 0, 1, "", "is_native_array"], [52, 0, 1, "", "isin"], [52, 0, 1, "", "scatter_flat"], [52, 0, 1, "", "scatter_nd"], [52, 0, 1, "", "stable_divide"], [52, 0, 1, "", "stable_pow"], [52, 0, 1, "", "supports_inplace_updates"], [52, 0, 1, "", "to_file"], [52, 0, 1, "", "to_list"], [52, 0, 1, "", "to_numpy"], [52, 0, 1, "", "to_scalar"], [52, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[53, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adam_step"], [53, 0, 1, "", "adam_update"], [53, 0, 1, "", "gradient_descent_update"], [53, 0, 1, "", "lamb_update"], [53, 0, 1, "", "lars_update"], [53, 0, 1, "", "optimizer_update"], [53, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[54, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[55, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "conv1d"], [55, 0, 1, "", "conv1d_transpose"], [55, 0, 1, "", "conv2d"], [55, 0, 1, "", "conv2d_transpose"], [55, 0, 1, "", "conv3d"], [55, 0, 1, "", "conv3d_transpose"], [55, 0, 1, "", "depthwise_conv2d"], [55, 0, 1, "", "dropout"], [55, 0, 1, "", "dropout1d"], [55, 0, 1, "", "dropout2d"], [55, 0, 1, "", "dropout3d"], [55, 0, 1, "", "linear"], [55, 0, 1, "", "lstm_update"], [55, 0, 1, "", "multi_head_attention"], [55, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[56, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "cholesky"], [56, 0, 1, "", "cross"], [56, 0, 1, "", "det"], [56, 0, 1, "", "diag"], [56, 0, 1, "", "diagonal"], [56, 0, 1, "", "eig"], [56, 0, 1, "", "eigh"], [56, 0, 1, "", "eigvalsh"], [56, 0, 1, "", "inner"], [56, 0, 1, "", "inv"], [56, 0, 1, "", "matmul"], [56, 0, 1, "", "matrix_norm"], [56, 0, 1, "", "matrix_power"], [56, 0, 1, "", "matrix_rank"], [56, 0, 1, "", "matrix_transpose"], [56, 0, 1, "", "outer"], [56, 0, 1, "", "pinv"], [56, 0, 1, "", "qr"], [56, 0, 1, "", "slogdet"], [56, 0, 1, "", "solve"], [56, 0, 1, "", "svd"], [56, 0, 1, "", "svdvals"], [56, 0, 1, "", "tensordot"], [56, 0, 1, "", "tensorsolve"], [56, 0, 1, "", "trace"], [56, 0, 1, "", "vander"], [56, 0, 1, "", "vecdot"], [56, 0, 1, "", "vector_norm"], [56, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[57, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "binary_cross_entropy"], [57, 0, 1, "", "cross_entropy"], [57, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[58, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "clip"], [58, 0, 1, "", "concat"], [58, 0, 1, "", "constant_pad"], [58, 0, 1, "", "expand_dims"], [58, 0, 1, "", "flip"], [58, 0, 1, "", "permute_dims"], [58, 0, 1, "", "repeat"], [58, 0, 1, "", "reshape"], [58, 0, 1, "", "roll"], [58, 0, 1, "", "split"], [58, 0, 1, "", "squeeze"], [58, 0, 1, "", "stack"], [58, 0, 1, "", "swapaxes"], [58, 0, 1, "", "tile"], [58, 0, 1, "", "unstack"], [58, 0, 1, "", "view"], [58, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[59, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[60, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "multinomial"], [60, 0, 1, "", "randint"], [60, 0, 1, "", "random_normal"], [60, 0, 1, "", "random_uniform"], [60, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[61, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "argmax"], [61, 0, 1, "", "argmin"], [61, 0, 1, "", "argwhere"], [61, 0, 1, "", "nonzero"], [61, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[62, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "unique_all"], [62, 0, 1, "", "unique_counts"], [62, 0, 1, "", "unique_inverse"], [62, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[63, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "argsort"], [63, 0, 1, "", "msort"], [63, 0, 1, "", "searchsorted"], [63, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[64, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "cumprod"], [64, 0, 1, "", "cumsum"], [64, 0, 1, "", "einsum"], [64, 0, 1, "", "max"], [64, 0, 1, "", "mean"], [64, 0, 1, "", "min"], [64, 0, 1, "", "prod"], [64, 0, 1, "", "std"], [64, 0, 1, "", "sum"], [64, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[65, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "all"], [65, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[66, 2, 1, "", "_wrap_function"], [66, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[67, 3, 0, "-", "activations"], [68, 3, 0, "-", "base"], [94, 3, 0, "-", "container"], [69, 3, 0, "-", "conversions"], [70, 3, 0, "-", "creation"], [71, 3, 0, "-", "data_type"], [72, 3, 0, "-", "device"], [73, 3, 0, "-", "elementwise"], [74, 3, 0, "-", "experimental"], [75, 3, 0, "-", "general"], [76, 3, 0, "-", "gradients"], [77, 3, 0, "-", "image"], [78, 3, 0, "-", "layers"], [79, 3, 0, "-", "linear_algebra"], [80, 3, 0, "-", "losses"], [81, 3, 0, "-", "manipulation"], [82, 3, 0, "-", "norms"], [83, 3, 0, "-", "random"], [84, 3, 0, "-", "searching"], [85, 3, 0, "-", "set"], [86, 3, 0, "-", "sorting"], [87, 3, 0, "-", "statistical"], [88, 3, 0, "-", "utility"], [89, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[67, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "_static_gelu"], [67, 0, 1, "", "_static_hardswish"], [67, 0, 1, "", "_static_leaky_relu"], [67, 0, 1, "", "_static_log_softmax"], [67, 0, 1, "", "_static_mish"], [67, 0, 1, "", "_static_relu"], [67, 0, 1, "", "_static_sigmoid"], [67, 0, 1, "", "_static_softmax"], [67, 0, 1, "", "_static_softplus"], [67, 0, 1, "", "gelu"], [67, 0, 1, "", "hardswish"], [67, 0, 1, "", "leaky_relu"], [67, 0, 1, "", "log_softmax"], [67, 0, 1, "", "mish"], [67, 0, 1, "", "relu"], [67, 0, 1, "", "sigmoid"], [67, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[68, 1, 1, "", "ContainerBase"], [68, 2, 1, "", "_is_jsonable"], [68, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[68, 0, 1, "", "__getitem__"], [68, 0, 1, "", "__init__"], [68, 0, 1, "", "__setitem__"], [68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [68, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [68, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [68, 0, 1, "", "_cont_concat_unify"], [68, 0, 1, "", "_cont_get_dev"], [68, 0, 1, "", "_cont_get_shape"], [68, 0, 1, "", "_cont_get_shapes"], [68, 5, 1, "", "_cont_ivy"], [68, 0, 1, "", "_cont_mean_unify"], [68, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [68, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [68, 0, 1, "", "_cont_slice_keys"], [68, 0, 1, "", "_cont_sum_unify"], [68, 0, 1, "", "_get_queue_item"], [68, 0, 1, "", "cont_all_false"], [68, 0, 1, "", "cont_all_key_chains"], [68, 0, 1, "", "cont_all_true"], [68, 0, 1, "", "cont_as_bools"], [68, 0, 1, "", "cont_assert_contains_sub_container"], [68, 0, 1, "", "cont_assert_contains_sub_structure"], [68, 0, 1, "", "cont_assert_identical"], [68, 0, 1, "", "cont_assert_identical_structure"], [68, 0, 1, "", "cont_at_key_chain"], [68, 0, 1, "", "cont_at_key_chains"], [68, 0, 1, "", "cont_at_keys"], [68, 0, 1, "", "cont_combine"], [68, 0, 1, "", "cont_common_key_chains"], [68, 5, 1, "", "cont_config"], [68, 0, 1, "", "cont_contains_sub_container"], [68, 0, 1, "", "cont_contains_sub_structure"], [68, 0, 1, "", "cont_copy"], [68, 0, 1, "", "cont_create_if_absent"], [68, 0, 1, "", "cont_cutoff_at_depth"], [68, 0, 1, "", "cont_cutoff_at_height"], [68, 0, 1, "", "cont_deep_copy"], [68, 5, 1, "", "cont_dev"], [68, 5, 1, "", "cont_dev_str"], [68, 0, 1, "", "cont_diff"], [68, 0, 1, "", "cont_duplicate_array_keychains"], [68, 0, 1, "", "cont_find_sub_container"], [68, 0, 1, "", "cont_find_sub_structure"], [68, 0, 1, "", "cont_flatten_key_chain"], [68, 0, 1, "", "cont_flatten_key_chains"], [68, 0, 1, "", "cont_format_key_chains"], [68, 0, 1, "", "cont_from_disk_as_hdf5"], [68, 0, 1, "", "cont_from_disk_as_json"], [68, 0, 1, "", "cont_from_disk_as_pickled"], [68, 0, 1, "", "cont_from_flat_list"], [68, 0, 1, "", "cont_handle_inplace"], [68, 0, 1, "", "cont_has_key"], [68, 0, 1, "", "cont_has_key_chain"], [68, 0, 1, "", "cont_identical"], [68, 0, 1, "", "cont_identical_array_shapes"], [68, 0, 1, "", "cont_identical_configs"], [68, 0, 1, "", "cont_identical_structure"], [68, 0, 1, "", "cont_if_exists"], [68, 0, 1, "", "cont_inplace_update"], [68, 5, 1, "", "cont_ivy"], [68, 0, 1, "", "cont_key_chains_containing"], [68, 0, 1, "", "cont_list_join"], [68, 0, 1, "", "cont_list_stack"], [68, 0, 1, "", "cont_load"], [68, 0, 1, "", "cont_map"], [68, 0, 1, "", "cont_map_sub_conts"], [68, 5, 1, "", "cont_max_depth"], [68, 0, 1, "", "cont_multi_map"], [68, 0, 1, "", "cont_multi_map_in_function"], [68, 0, 1, "", "cont_num_arrays"], [68, 0, 1, "", "cont_overwrite_at_key_chain"], [68, 0, 1, "", "cont_overwrite_at_key_chains"], [68, 0, 1, "", "cont_prune_empty"], [68, 0, 1, "", "cont_prune_key_chain"], [68, 0, 1, "", "cont_prune_key_chains"], [68, 0, 1, "", "cont_prune_key_from_key_chains"], [68, 0, 1, "", "cont_prune_keys"], [68, 0, 1, "", "cont_prune_keys_from_key_chains"], [68, 0, 1, "", "cont_reduce"], [68, 0, 1, "", "cont_remove_key_length_limit"], [68, 0, 1, "", "cont_remove_print_limit"], [68, 0, 1, "", "cont_reshape_like"], [68, 0, 1, "", "cont_restructure"], [68, 0, 1, "", "cont_restructure_key_chains"], [68, 0, 1, "", "cont_save"], [68, 0, 1, "", "cont_set_at_key_chain"], [68, 0, 1, "", "cont_set_at_key_chains"], [68, 0, 1, "", "cont_set_at_keys"], [68, 5, 1, "", "cont_shape"], [68, 5, 1, "", "cont_shapes"], [68, 0, 1, "", "cont_show"], [68, 0, 1, "", "cont_show_sub_container"], [68, 0, 1, "", "cont_size_ordered_arrays"], [68, 0, 1, "", "cont_slice_keys"], [68, 0, 1, "", "cont_slice_via_key"], [68, 0, 1, "", "cont_sort_by_key"], [68, 0, 1, "", "cont_structural_diff"], [68, 0, 1, "", "cont_to_dict"], [68, 0, 1, "", "cont_to_disk_as_hdf5"], [68, 0, 1, "", "cont_to_disk_as_json"], [68, 0, 1, "", "cont_to_disk_as_pickled"], [68, 0, 1, "", "cont_to_flat_list"], [68, 0, 1, "", "cont_to_iterator"], [68, 0, 1, "", "cont_to_iterator_keys"], [68, 0, 1, "", "cont_to_iterator_values"], [68, 0, 1, "", "cont_to_jsonable"], [68, 0, 1, "", "cont_to_nested_list"], [68, 0, 1, "", "cont_to_raw"], [68, 0, 1, "", "cont_trim_key"], [68, 0, 1, "", "cont_try_kc"], [68, 0, 1, "", "cont_unify"], [68, 0, 1, "", "cont_unstack_conts"], [68, 0, 1, "", "cont_update_config"], [68, 0, 1, "", "cont_with_default_key_color"], [68, 0, 1, "", "cont_with_entries_as_lists"], [68, 0, 1, "", "cont_with_ivy_backend"], [68, 0, 1, "", "cont_with_key_length_limit"], [68, 0, 1, "", "cont_with_print_indent"], [68, 0, 1, "", "cont_with_print_limit"], [68, 0, 1, "", "cont_with_print_line_spacing"], [68, 5, 1, "", "dynamic_backend"], [68, 0, 1, "", "h5_file_size"], [68, 0, 1, "", "shuffle_h5_file"], [68, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[94, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[94, 0, 1, "", "__abs__"], [94, 0, 1, "", "__add__"], [94, 0, 1, "", "__eq__"], [94, 0, 1, "", "__ge__"], [94, 0, 1, "", "__gt__"], [94, 0, 1, "", "__init__"], [94, 0, 1, "", "__le__"], [94, 0, 1, "", "__lt__"], [94, 0, 1, "", "__ne__"], [94, 0, 1, "", "__pow__"], [94, 0, 1, "", "__radd__"], [94, 0, 1, "", "__rrshift__"], [94, 0, 1, "", "__rshift__"], [94, 0, 1, "", "__rsub__"], [94, 0, 1, "", "__sub__"], [94, 0, 1, "", "__truediv__"], [94, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[69, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "_static_to_ivy"], [69, 0, 1, "", "_static_to_native"], [69, 0, 1, "", "to_ivy"], [69, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[70, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_arange"], [70, 0, 1, "", "_static_asarray"], [70, 0, 1, "", "_static_copy_array"], [70, 0, 1, "", "_static_empty"], [70, 0, 1, "", "_static_empty_like"], [70, 0, 1, "", "_static_eye"], [70, 0, 1, "", "_static_from_dlpack"], [70, 0, 1, "", "_static_full"], [70, 0, 1, "", "_static_full_like"], [70, 0, 1, "", "_static_linspace"], [70, 0, 1, "", "_static_logspace"], [70, 0, 1, "", "_static_meshgrid"], [70, 0, 1, "", "_static_native_array"], [70, 0, 1, "", "_static_one_hot"], [70, 0, 1, "", "_static_ones"], [70, 0, 1, "", "_static_ones_like"], [70, 0, 1, "", "_static_tril"], [70, 0, 1, "", "_static_triu"], [70, 0, 1, "", "_static_zeros"], [70, 0, 1, "", "_static_zeros_like"], [70, 0, 1, "", "asarray"], [70, 0, 1, "", "copy_array"], [70, 0, 1, "", "empty_like"], [70, 0, 1, "", "from_dlpack"], [70, 0, 1, "", "frombuffer"], [70, 0, 1, "", "full_like"], [70, 0, 1, "", "linspace"], [70, 0, 1, "", "logspace"], [70, 0, 1, "", "meshgrid"], [70, 0, 1, "", "native_array"], [70, 0, 1, "", "one_hot"], [70, 0, 1, "", "ones_like"], [70, 0, 1, "", "static_frombuffer"], [70, 0, 1, "", "static_triu_indices"], [70, 0, 1, "", "tril"], [70, 0, 1, "", "triu"], [70, 0, 1, "", "triu_indices"], [70, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[71, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_static_astype"], [71, 0, 1, "", "_static_broadcast_arrays"], [71, 0, 1, "", "_static_broadcast_to"], [71, 0, 1, "", "_static_can_cast"], [71, 0, 1, "", "_static_default_complex_dtype"], [71, 0, 1, "", "_static_default_float_dtype"], [71, 0, 1, "", "_static_dtype"], [71, 0, 1, "", "_static_finfo"], [71, 0, 1, "", "_static_function_supported_dtypes"], [71, 0, 1, "", "_static_function_unsupported_dtypes"], [71, 0, 1, "", "_static_iinfo"], [71, 0, 1, "", "_static_is_bool_dtype"], [71, 0, 1, "", "_static_is_complex_dtype"], [71, 0, 1, "", "_static_is_float_dtype"], [71, 0, 1, "", "_static_is_int_dtype"], [71, 0, 1, "", "_static_is_uint_dtype"], [71, 0, 1, "", "_static_result_type"], [71, 0, 1, "", "astype"], [71, 0, 1, "", "broadcast_arrays"], [71, 0, 1, "", "broadcast_to"], [71, 0, 1, "", "can_cast"], [71, 0, 1, "", "dtype"], [71, 0, 1, "", "finfo"], [71, 0, 1, "", "iinfo"], [71, 0, 1, "", "is_bool_dtype"], [71, 0, 1, "", "is_complex_dtype"], [71, 0, 1, "", "is_float_dtype"], [71, 0, 1, "", "is_int_dtype"], [71, 0, 1, "", "is_uint_dtype"], [71, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[72, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_dev"], [72, 0, 1, "", "_static_to_device"], [72, 0, 1, "", "dev"], [72, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[73, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_abs"], [73, 0, 1, "", "_static_acos"], [73, 0, 1, "", "_static_acosh"], [73, 0, 1, "", "_static_add"], [73, 0, 1, "", "_static_asin"], [73, 0, 1, "", "_static_asinh"], [73, 0, 1, "", "_static_atan"], [73, 0, 1, "", "_static_atan2"], [73, 0, 1, "", "_static_atanh"], [73, 0, 1, "", "_static_bitwise_and"], [73, 0, 1, "", "_static_bitwise_invert"], [73, 0, 1, "", "_static_bitwise_left_shift"], [73, 0, 1, "", "_static_bitwise_or"], [73, 0, 1, "", "_static_bitwise_right_shift"], [73, 0, 1, "", "_static_bitwise_xor"], [73, 0, 1, "", "_static_ceil"], [73, 0, 1, "", "_static_cos"], [73, 0, 1, "", "_static_cosh"], [73, 0, 1, "", "_static_deg2rad"], [73, 0, 1, "", "_static_divide"], [73, 0, 1, "", "_static_equal"], [73, 0, 1, "", "_static_erf"], [73, 0, 1, "", "_static_exp"], [73, 0, 1, "", "_static_expm1"], [73, 0, 1, "", "_static_floor"], [73, 0, 1, "", "_static_floor_divide"], [73, 0, 1, "", "_static_greater"], [73, 0, 1, "", "_static_greater_equal"], [73, 0, 1, "", "_static_isfinite"], [73, 0, 1, "", "_static_isinf"], [73, 0, 1, "", "_static_isnan"], [73, 0, 1, "", "_static_isreal"], [73, 0, 1, "", "_static_lcm"], [73, 0, 1, "", "_static_less"], [73, 0, 1, "", "_static_less_equal"], [73, 0, 1, "", "_static_log"], [73, 0, 1, "", "_static_log10"], [73, 0, 1, "", "_static_log1p"], [73, 0, 1, "", "_static_log2"], [73, 0, 1, "", "_static_logaddexp"], [73, 0, 1, "", "_static_logical_and"], [73, 0, 1, "", "_static_logical_not"], [73, 0, 1, "", "_static_logical_or"], [73, 0, 1, "", "_static_logical_xor"], [73, 0, 1, "", "_static_maximum"], [73, 0, 1, "", "_static_minimum"], [73, 0, 1, "", "_static_multiply"], [73, 0, 1, "", "_static_negative"], [73, 0, 1, "", "_static_not_equal"], [73, 0, 1, "", "_static_positive"], [73, 0, 1, "", "_static_pow"], [73, 0, 1, "", "_static_rad2deg"], [73, 0, 1, "", "_static_reciprocal"], [73, 0, 1, "", "_static_remainder"], [73, 0, 1, "", "_static_round"], [73, 0, 1, "", "_static_sign"], [73, 0, 1, "", "_static_sin"], [73, 0, 1, "", "_static_sinh"], [73, 0, 1, "", "_static_sqrt"], [73, 0, 1, "", "_static_square"], [73, 0, 1, "", "_static_subtract"], [73, 0, 1, "", "_static_tan"], [73, 0, 1, "", "_static_tanh"], [73, 0, 1, "", "_static_trapz"], [73, 0, 1, "", "_static_trunc"], [73, 0, 1, "", "_static_trunc_divide"], [73, 0, 1, "", "abs"], [73, 0, 1, "", "acos"], [73, 0, 1, "", "acosh"], [73, 0, 1, "", "add"], [73, 0, 1, "", "angle"], [73, 0, 1, "", "asin"], [73, 0, 1, "", "asinh"], [73, 0, 1, "", "atan"], [73, 0, 1, "", "atan2"], [73, 0, 1, "", "atanh"], [73, 0, 1, "", "bitwise_and"], [73, 0, 1, "", "bitwise_invert"], [73, 0, 1, "", "bitwise_left_shift"], [73, 0, 1, "", "bitwise_or"], [73, 0, 1, "", "bitwise_right_shift"], [73, 0, 1, "", "bitwise_xor"], [73, 0, 1, "", "ceil"], [73, 0, 1, "", "cos"], [73, 0, 1, "", "cosh"], [73, 0, 1, "", "deg2rad"], [73, 0, 1, "", "divide"], [73, 0, 1, "", "equal"], [73, 0, 1, "", "erf"], [73, 0, 1, "", "exp"], [73, 0, 1, "", "exp2"], [73, 0, 1, "", "expm1"], [73, 0, 1, "", "floor"], [73, 0, 1, "", "floor_divide"], [73, 0, 1, "", "fmin"], [73, 0, 1, "", "gcd"], [73, 0, 1, "", "greater"], [73, 0, 1, "", "greater_equal"], [73, 0, 1, "", "imag"], [73, 0, 1, "", "isfinite"], [73, 0, 1, "", "isinf"], [73, 0, 1, "", "isnan"], [73, 0, 1, "", "isreal"], [73, 0, 1, "", "lcm"], [73, 0, 1, "", "less"], [73, 0, 1, "", "less_equal"], [73, 0, 1, "", "log"], [73, 0, 1, "", "log10"], [73, 0, 1, "", "log1p"], [73, 0, 1, "", "log2"], [73, 0, 1, "", "logaddexp"], [73, 0, 1, "", "logaddexp2"], [73, 0, 1, "", "logical_and"], [73, 0, 1, "", "logical_not"], [73, 0, 1, "", "logical_or"], [73, 0, 1, "", "logical_xor"], [73, 0, 1, "", "maximum"], [73, 0, 1, "", "minimum"], [73, 0, 1, "", "multiply"], [73, 0, 1, "", "nan_to_num"], [73, 0, 1, "", "negative"], [73, 0, 1, "", "not_equal"], [73, 0, 1, "", "positive"], [73, 0, 1, "", "pow"], [73, 0, 1, "", "rad2deg"], [73, 0, 1, "", "real"], [73, 0, 1, "", "reciprocal"], [73, 0, 1, "", "remainder"], [73, 0, 1, "", "round"], [73, 0, 1, "", "sign"], [73, 0, 1, "", "sin"], [73, 0, 1, "", "sinh"], [73, 0, 1, "", "sqrt"], [73, 0, 1, "", "square"], [73, 0, 1, "", "static_angle"], [73, 0, 1, "", "static_exp2"], [73, 0, 1, "", "static_fmin"], [73, 0, 1, "", "static_gcd"], [73, 0, 1, "", "static_imag"], [73, 0, 1, "", "static_logaddexp2"], [73, 0, 1, "", "static_nan_to_num"], [73, 0, 1, "", "static_real"], [73, 0, 1, "", "subtract"], [73, 0, 1, "", "tan"], [73, 0, 1, "", "tanh"], [73, 0, 1, "", "trapz"], [73, 0, 1, "", "trunc"], [73, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[74, 3, 0, "-", "activations"], [74, 3, 0, "-", "conversions"], [74, 3, 0, "-", "creation"], [74, 3, 0, "-", "data_type"], [74, 3, 0, "-", "device"], [74, 3, 0, "-", "elementwise"], [74, 3, 0, "-", "general"], [74, 3, 0, "-", "gradients"], [74, 3, 0, "-", "image"], [74, 3, 0, "-", "layers"], [74, 3, 0, "-", "linear_algebra"], [74, 3, 0, "-", "losses"], [74, 3, 0, "-", "manipulation"], [74, 3, 0, "-", "norms"], [74, 3, 0, "-", "random"], [74, 3, 0, "-", "searching"], [74, 3, 0, "-", "set"], [74, 3, 0, "-", "sorting"], [74, 3, 0, "-", "statistical"], [74, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[74, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_elu"], [74, 0, 1, "", "_static_silu"], [74, 0, 1, "", "elu"], [74, 0, 1, "", "logit"], [74, 0, 1, "", "logsigmoid"], [74, 0, 1, "", "prelu"], [74, 0, 1, "", "relu6"], [74, 0, 1, "", "selu"], [74, 0, 1, "", "silu"], [74, 0, 1, "", "static_logit"], [74, 0, 1, "", "static_logsigmoid"], [74, 0, 1, "", "static_prelu"], [74, 0, 1, "", "static_relu6"], [74, 0, 1, "", "static_selu"], [74, 0, 1, "", "static_thresholded_relu"], [74, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[74, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[74, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_trilu"], [74, 0, 1, "", "blackman_window"], [74, 0, 1, "", "eye_like"], [74, 0, 1, "", "hamming_window"], [74, 0, 1, "", "hann_window"], [74, 0, 1, "", "kaiser_bessel_derived_window"], [74, 0, 1, "", "kaiser_window"], [74, 0, 1, "", "mel_weight_matrix"], [74, 0, 1, "", "static_blackman_window"], [74, 0, 1, "", "static_eye_like"], [74, 0, 1, "", "static_hamming_window"], [74, 0, 1, "", "static_hann_window"], [74, 0, 1, "", "static_kaiser_bessel_derived_window"], [74, 0, 1, "", "static_kaiser_window"], [74, 0, 1, "", "static_mel_weight_matrix"], [74, 0, 1, "", "static_tril_indices"], [74, 0, 1, "", "static_unsorted_segment_min"], [74, 0, 1, "", "static_unsorted_segment_sum"], [74, 0, 1, "", "static_vorbis_window"], [74, 0, 1, "", "tril_indices"], [74, 0, 1, "", "trilu"], [74, 0, 1, "", "unsorted_segment_min"], [74, 0, 1, "", "unsorted_segment_sum"], [74, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[74, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[74, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[74, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "allclose"], [74, 0, 1, "", "binarizer"], [74, 0, 1, "", "conj"], [74, 0, 1, "", "copysign"], [74, 0, 1, "", "count_nonzero"], [74, 0, 1, "", "diff"], [74, 0, 1, "", "digamma"], [74, 0, 1, "", "fix"], [74, 0, 1, "", "float_power"], [74, 0, 1, "", "fmax"], [74, 0, 1, "", "fmod"], [74, 0, 1, "", "frexp"], [74, 0, 1, "", "gradient"], [74, 0, 1, "", "hypot"], [74, 0, 1, "", "isclose"], [74, 0, 1, "", "ldexp"], [74, 0, 1, "", "lerp"], [74, 0, 1, "", "modf"], [74, 0, 1, "", "nansum"], [74, 0, 1, "", "nextafter"], [74, 0, 1, "", "signbit"], [74, 0, 1, "", "sinc"], [74, 0, 1, "", "sparsify_tensor"], [74, 0, 1, "", "static_allclose"], [74, 0, 1, "", "static_binarizer"], [74, 0, 1, "", "static_conj"], [74, 0, 1, "", "static_copysign"], [74, 0, 1, "", "static_count_nonzero"], [74, 0, 1, "", "static_diff"], [74, 0, 1, "", "static_digamma"], [74, 0, 1, "", "static_fix"], [74, 0, 1, "", "static_float_power"], [74, 0, 1, "", "static_fmax"], [74, 0, 1, "", "static_fmod"], [74, 0, 1, "", "static_frexp"], [74, 0, 1, "", "static_gradient"], [74, 0, 1, "", "static_hypot"], [74, 0, 1, "", "static_isclose"], [74, 0, 1, "", "static_ldexp"], [74, 0, 1, "", "static_lerp"], [74, 0, 1, "", "static_modf"], [74, 0, 1, "", "static_nansum"], [74, 0, 1, "", "static_nextafter"], [74, 0, 1, "", "static_signbit"], [74, 0, 1, "", "static_sinc"], [74, 0, 1, "", "static_sparsify_tensor"], [74, 0, 1, "", "static_xlogy"], [74, 0, 1, "", "static_zeta"], [74, 0, 1, "", "xlogy"], [74, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[74, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_reduce"], [74, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[74, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[74, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[74, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_fft"], [74, 0, 1, "", "adaptive_avg_pool1d"], [74, 0, 1, "", "adaptive_avg_pool2d"], [74, 0, 1, "", "adaptive_max_pool2d"], [74, 0, 1, "", "avg_pool1d"], [74, 0, 1, "", "avg_pool2d"], [74, 0, 1, "", "avg_pool3d"], [74, 0, 1, "", "dct"], [74, 0, 1, "", "dft"], [74, 0, 1, "", "embedding"], [74, 0, 1, "", "fft"], [74, 0, 1, "", "idct"], [74, 0, 1, "", "ifft"], [74, 0, 1, "", "ifftn"], [74, 0, 1, "", "interpolate"], [74, 0, 1, "", "max_pool1d"], [74, 0, 1, "", "max_pool2d"], [74, 0, 1, "", "max_pool3d"], [74, 0, 1, "", "rfftn"], [74, 0, 1, "", "static_adaptive_avg_pool1d"], [74, 0, 1, "", "static_adaptive_avg_pool2d"], [74, 0, 1, "", "static_adaptive_max_pool2d"], [74, 0, 1, "", "static_avg_pool1d"], [74, 0, 1, "", "static_avg_pool2d"], [74, 0, 1, "", "static_avg_pool3d"], [74, 0, 1, "", "static_dct"], [74, 0, 1, "", "static_dft"], [74, 0, 1, "", "static_embedding"], [74, 0, 1, "", "static_idct"], [74, 0, 1, "", "static_ifft"], [74, 0, 1, "", "static_ifftn"], [74, 0, 1, "", "static_interpolate"], [74, 0, 1, "", "static_max_pool1d"], [74, 0, 1, "", "static_max_pool2d"], [74, 0, 1, "", "static_max_pool3d"], [74, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[74, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "adjoint"], [74, 0, 1, "", "cond"], [74, 0, 1, "", "diagflat"], [74, 0, 1, "", "dot"], [74, 0, 1, "", "eig"], [74, 0, 1, "", "eigh_tridiagonal"], [74, 0, 1, "", "eigvals"], [74, 0, 1, "", "initialize_tucker"], [74, 0, 1, "", "kron"], [74, 0, 1, "", "make_svd_non_negative"], [74, 0, 1, "", "matrix_exp"], [74, 0, 1, "", "mode_dot"], [74, 0, 1, "", "multi_dot"], [74, 0, 1, "", "multi_mode_dot"], [74, 0, 1, "", "partial_tucker"], [74, 0, 1, "", "static_adjoint"], [74, 0, 1, "", "static_cond"], [74, 0, 1, "", "static_diagflat"], [74, 0, 1, "", "static_dot"], [74, 0, 1, "", "static_eig"], [74, 0, 1, "", "static_eigh_tridiagonal"], [74, 0, 1, "", "static_eigvals"], [74, 0, 1, "", "static_initialize_tucker"], [74, 0, 1, "", "static_kron"], [74, 0, 1, "", "static_make_svd_non_negative"], [74, 0, 1, "", "static_matrix_exp"], [74, 0, 1, "", "static_mode_dot"], [74, 0, 1, "", "static_multi_dot"], [74, 0, 1, "", "static_multi_mode_dot"], [74, 0, 1, "", "static_partial_tucker"], [74, 0, 1, "", "static_svd_flip"], [74, 0, 1, "", "static_truncated_svd"], [74, 0, 1, "", "static_tucker"], [74, 0, 1, "", "svd_flip"], [74, 0, 1, "", "truncated_svd"], [74, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[74, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_huber_loss"], [74, 0, 1, "", "_static_l1_loss"], [74, 0, 1, "", "_static_smooth_l1_loss"], [74, 0, 1, "", "_static_soft_margin_loss"], [74, 0, 1, "", "huber_loss"], [74, 0, 1, "", "l1_loss"], [74, 0, 1, "", "smooth_l1_loss"], [74, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[74, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_fill_diagonal"], [74, 0, 1, "", "_static_unique_consecutive"], [74, 0, 1, "", "as_strided"], [74, 0, 1, "", "associative_scan"], [74, 0, 1, "", "atleast_1d"], [74, 0, 1, "", "atleast_2d"], [74, 0, 1, "", "atleast_3d"], [74, 0, 1, "", "broadcast_shapes"], [74, 0, 1, "", "concat_from_sequence"], [74, 0, 1, "", "dsplit"], [74, 0, 1, "", "dstack"], [74, 0, 1, "", "expand"], [74, 0, 1, "", "fill_diagonal"], [74, 0, 1, "", "flatten"], [74, 0, 1, "", "fliplr"], [74, 0, 1, "", "flipud"], [74, 0, 1, "", "fold"], [74, 0, 1, "", "heaviside"], [74, 0, 1, "", "hsplit"], [74, 0, 1, "", "hstack"], [74, 0, 1, "", "i0"], [74, 0, 1, "", "matricize"], [74, 0, 1, "", "moveaxis"], [74, 0, 1, "", "pad"], [74, 0, 1, "", "partial_fold"], [74, 0, 1, "", "partial_tensor_to_vec"], [74, 0, 1, "", "partial_unfold"], [74, 0, 1, "", "partial_vec_to_tensor"], [74, 0, 1, "", "rot90"], [74, 0, 1, "", "soft_thresholding"], [74, 0, 1, "", "static_as_strided"], [74, 0, 1, "", "static_atleast_1d"], [74, 0, 1, "", "static_atleast_2d"], [74, 0, 1, "", "static_atleast_3d"], [74, 0, 1, "", "static_broadcast_shapes"], [74, 0, 1, "", "static_concat_from_sequence"], [74, 0, 1, "", "static_dsplit"], [74, 0, 1, "", "static_dstack"], [74, 0, 1, "", "static_expand"], [74, 0, 1, "", "static_flatten"], [74, 0, 1, "", "static_fliplr"], [74, 0, 1, "", "static_flipud"], [74, 0, 1, "", "static_fold"], [74, 0, 1, "", "static_heaviside"], [74, 0, 1, "", "static_hsplit"], [74, 0, 1, "", "static_hstack"], [74, 0, 1, "", "static_i0"], [74, 0, 1, "", "static_matricize"], [74, 0, 1, "", "static_moveaxis"], [74, 0, 1, "", "static_pad"], [74, 0, 1, "", "static_partial_fold"], [74, 0, 1, "", "static_partial_tensor_to_vec"], [74, 0, 1, "", "static_partial_unfold"], [74, 0, 1, "", "static_partial_vec_to_tensor"], [74, 0, 1, "", "static_rot90"], [74, 0, 1, "", "static_soft_thresholding"], [74, 0, 1, "", "static_take_along_axis"], [74, 0, 1, "", "static_top_k"], [74, 0, 1, "", "static_unfold"], [74, 0, 1, "", "static_vsplit"], [74, 0, 1, "", "static_vstack"], [74, 0, 1, "", "take_along_axis"], [74, 0, 1, "", "top_k"], [74, 0, 1, "", "unfold"], [74, 0, 1, "", "unique_consecutive"], [74, 0, 1, "", "vsplit"], [74, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[74, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "batch_norm"], [74, 0, 1, "", "group_norm"], [74, 0, 1, "", "instance_norm"], [74, 0, 1, "", "l1_normalize"], [74, 0, 1, "", "l2_normalize"], [74, 0, 1, "", "lp_normalize"], [74, 0, 1, "", "static_batch_norm"], [74, 0, 1, "", "static_group_norm"], [74, 0, 1, "", "static_instance_norm"], [74, 0, 1, "", "static_l1_normalize"], [74, 0, 1, "", "static_l2_normalize"], [74, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[74, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "bernoulli"], [74, 0, 1, "", "beta"], [74, 0, 1, "", "dirichlet"], [74, 0, 1, "", "gamma"], [74, 0, 1, "", "poisson"], [74, 0, 1, "", "static_bernoulli"], [74, 0, 1, "", "static_beta"], [74, 0, 1, "", "static_dirichlet"], [74, 0, 1, "", "static_gamma"], [74, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[74, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "static_unravel_index"], [74, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[74, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[74, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "invert_permutation"], [74, 0, 1, "", "lexsort"], [74, 0, 1, "", "static_invert_permutation"], [74, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[74, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_cummax"], [74, 0, 1, "", "_static_cummin"], [74, 0, 1, "", "bincount"], [74, 0, 1, "", "corrcoef"], [74, 0, 1, "", "cov"], [74, 0, 1, "", "cummax"], [74, 0, 1, "", "cummin"], [74, 0, 1, "", "histogram"], [74, 0, 1, "", "igamma"], [74, 0, 1, "", "median"], [74, 0, 1, "", "nanmean"], [74, 0, 1, "", "nanmedian"], [74, 0, 1, "", "nanprod"], [74, 0, 1, "", "quantile"], [74, 0, 1, "", "static_bincount"], [74, 0, 1, "", "static_corrcoef"], [74, 0, 1, "", "static_cov"], [74, 0, 1, "", "static_histogram"], [74, 0, 1, "", "static_igamma"], [74, 0, 1, "", "static_median"], [74, 0, 1, "", "static_nanmean"], [74, 0, 1, "", "static_nanmedian"], [74, 0, 1, "", "static_nanprod"], [74, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[74, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "optional_get_element"], [74, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[75, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_all_equal"], [75, 0, 1, "", "_static_array_equal"], [75, 0, 1, "", "_static_assert_supports_inplace"], [75, 0, 1, "", "_static_clip_matrix_norm"], [75, 0, 1, "", "_static_clip_vector_norm"], [75, 0, 1, "", "_static_einops_rearrange"], [75, 0, 1, "", "_static_einops_reduce"], [75, 0, 1, "", "_static_einops_repeat"], [75, 0, 1, "", "_static_exists"], [75, 0, 1, "", "_static_fourier_encode"], [75, 0, 1, "", "_static_gather"], [75, 0, 1, "", "_static_gather_nd"], [75, 0, 1, "", "_static_get_num_dims"], [75, 0, 1, "", "_static_has_nans"], [75, 0, 1, "", "_static_inplace_decrement"], [75, 0, 1, "", "_static_inplace_increment"], [75, 0, 1, "", "_static_inplace_update"], [75, 0, 1, "", "_static_is_array"], [75, 0, 1, "", "_static_is_ivy_array"], [75, 0, 1, "", "_static_is_native_array"], [75, 0, 1, "", "_static_scatter_flat"], [75, 0, 1, "", "_static_scatter_nd"], [75, 0, 1, "", "_static_stable_divide"], [75, 0, 1, "", "_static_stable_pow"], [75, 0, 1, "", "_static_supports_inplace_updates"], [75, 0, 1, "", "_static_to_list"], [75, 0, 1, "", "_static_to_numpy"], [75, 0, 1, "", "_static_to_scalar"], [75, 0, 1, "", "_static_value_is_nan"], [75, 0, 1, "", "all_equal"], [75, 0, 1, "", "array_equal"], [75, 0, 1, "", "assert_supports_inplace"], [75, 0, 1, "", "clip_matrix_norm"], [75, 0, 1, "", "clip_vector_norm"], [75, 0, 1, "", "einops_rearrange"], [75, 0, 1, "", "einops_reduce"], [75, 0, 1, "", "einops_repeat"], [75, 0, 1, "", "exists"], [75, 0, 1, "", "fourier_encode"], [75, 0, 1, "", "gather"], [75, 0, 1, "", "gather_nd"], [75, 0, 1, "", "get_num_dims"], [75, 0, 1, "", "has_nans"], [75, 0, 1, "", "inplace_decrement"], [75, 0, 1, "", "inplace_increment"], [75, 0, 1, "", "inplace_update"], [75, 0, 1, "", "is_array"], [75, 0, 1, "", "is_ivy_array"], [75, 0, 1, "", "is_native_array"], [75, 0, 1, "", "isin"], [75, 0, 1, "", "itemsize"], [75, 0, 1, "", "scatter_flat"], [75, 0, 1, "", "scatter_nd"], [75, 0, 1, "", "stable_divide"], [75, 0, 1, "", "stable_pow"], [75, 0, 1, "", "static_isin"], [75, 0, 1, "", "static_itemsize"], [75, 0, 1, "", "static_strides"], [75, 0, 1, "", "strides"], [75, 0, 1, "", "supports_inplace_updates"], [75, 0, 1, "", "to_list"], [75, 0, 1, "", "to_numpy"], [75, 0, 1, "", "to_scalar"], [75, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[76, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_stop_gradient"], [76, 0, 1, "", "adam_step"], [76, 0, 1, "", "adam_update"], [76, 0, 1, "", "gradient_descent_update"], [76, 0, 1, "", "lamb_update"], [76, 0, 1, "", "lars_update"], [76, 0, 1, "", "optimizer_update"], [76, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[77, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[78, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_conv1d"], [78, 0, 1, "", "_static_conv1d_transpose"], [78, 0, 1, "", "_static_conv2d"], [78, 0, 1, "", "_static_conv2d_transpose"], [78, 0, 1, "", "_static_conv3d"], [78, 0, 1, "", "_static_conv3d_transpose"], [78, 0, 1, "", "_static_depthwise_conv2d"], [78, 0, 1, "", "_static_dropout"], [78, 0, 1, "", "_static_dropout1d"], [78, 0, 1, "", "_static_dropout2d"], [78, 0, 1, "", "_static_dropout3d"], [78, 0, 1, "", "_static_linear"], [78, 0, 1, "", "_static_lstm_update"], [78, 0, 1, "", "_static_multi_head_attention"], [78, 0, 1, "", "_static_reduce_window"], [78, 0, 1, "", "_static_scaled_dot_product_attention"], [78, 0, 1, "", "conv1d"], [78, 0, 1, "", "conv1d_transpose"], [78, 0, 1, "", "conv2d"], [78, 0, 1, "", "conv2d_transpose"], [78, 0, 1, "", "conv3d"], [78, 0, 1, "", "conv3d_transpose"], [78, 0, 1, "", "depthwise_conv2d"], [78, 0, 1, "", "dropout"], [78, 0, 1, "", "dropout1d"], [78, 0, 1, "", "dropout2d"], [78, 0, 1, "", "dropout3d"], [78, 0, 1, "", "linear"], [78, 0, 1, "", "lstm_update"], [78, 0, 1, "", "multi_head_attention"], [78, 0, 1, "", "reduce_window"], [78, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[79, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_cholesky"], [79, 0, 1, "", "_static_cross"], [79, 0, 1, "", "_static_det"], [79, 0, 1, "", "_static_diag"], [79, 0, 1, "", "_static_diagonal"], [79, 0, 1, "", "_static_eigh"], [79, 0, 1, "", "_static_eigvalsh"], [79, 0, 1, "", "_static_inner"], [79, 0, 1, "", "_static_inv"], [79, 0, 1, "", "_static_matmul"], [79, 0, 1, "", "_static_matrix_norm"], [79, 0, 1, "", "_static_matrix_power"], [79, 0, 1, "", "_static_matrix_rank"], [79, 0, 1, "", "_static_matrix_transpose"], [79, 0, 1, "", "_static_outer"], [79, 0, 1, "", "_static_pinv"], [79, 0, 1, "", "_static_qr"], [79, 0, 1, "", "_static_slogdet"], [79, 0, 1, "", "_static_solve"], [79, 0, 1, "", "_static_svd"], [79, 0, 1, "", "_static_svdvals"], [79, 0, 1, "", "_static_tensordot"], [79, 0, 1, "", "_static_tensorsolve"], [79, 0, 1, "", "_static_trace"], [79, 0, 1, "", "_static_vander"], [79, 0, 1, "", "_static_vecdot"], [79, 0, 1, "", "_static_vector_norm"], [79, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [79, 0, 1, "", "cholesky"], [79, 0, 1, "", "cross"], [79, 0, 1, "", "det"], [79, 0, 1, "", "diag"], [79, 0, 1, "", "diagonal"], [79, 0, 1, "", "eigh"], [79, 0, 1, "", "eigvalsh"], [79, 0, 1, "", "general_inner_product"], [79, 0, 1, "", "inner"], [79, 0, 1, "", "inv"], [79, 0, 1, "", "matmul"], [79, 0, 1, "", "matrix_norm"], [79, 0, 1, "", "matrix_power"], [79, 0, 1, "", "matrix_rank"], [79, 0, 1, "", "matrix_transpose"], [79, 0, 1, "", "outer"], [79, 0, 1, "", "pinv"], [79, 0, 1, "", "qr"], [79, 0, 1, "", "slogdet"], [79, 0, 1, "", "solve"], [79, 0, 1, "", "static_general_inner_product"], [79, 0, 1, "", "svd"], [79, 0, 1, "", "svdvals"], [79, 0, 1, "", "tensordot"], [79, 0, 1, "", "tensorsolve"], [79, 0, 1, "", "trace"], [79, 0, 1, "", "vander"], [79, 0, 1, "", "vecdot"], [79, 0, 1, "", "vector_norm"], [79, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[80, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_binary_cross_entropy"], [80, 0, 1, "", "_static_cross_entropy"], [80, 0, 1, "", "_static_sparse_cross_entropy"], [80, 0, 1, "", "binary_cross_entropy"], [80, 0, 1, "", "cross_entropy"], [80, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[81, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_clip"], [81, 0, 1, "", "_static_concat"], [81, 0, 1, "", "_static_constant_pad"], [81, 0, 1, "", "_static_expand_dims"], [81, 0, 1, "", "_static_flip"], [81, 0, 1, "", "_static_permute_dims"], [81, 0, 1, "", "_static_repeat"], [81, 0, 1, "", "_static_reshape"], [81, 0, 1, "", "_static_roll"], [81, 0, 1, "", "_static_split"], [81, 0, 1, "", "_static_squeeze"], [81, 0, 1, "", "_static_stack"], [81, 0, 1, "", "_static_swapaxes"], [81, 0, 1, "", "_static_tile"], [81, 0, 1, "", "_static_unstack"], [81, 0, 1, "", "_static_zero_pad"], [81, 0, 1, "", "clip"], [81, 0, 1, "", "concat"], [81, 0, 1, "", "constant_pad"], [81, 0, 1, "", "expand_dims"], [81, 0, 1, "", "flip"], [81, 0, 1, "", "permute_dims"], [81, 0, 1, "", "repeat"], [81, 0, 1, "", "reshape"], [81, 0, 1, "", "roll"], [81, 0, 1, "", "split"], [81, 0, 1, "", "squeeze"], [81, 0, 1, "", "stack"], [81, 0, 1, "", "swapaxes"], [81, 0, 1, "", "tile"], [81, 0, 1, "", "unstack"], [81, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[82, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[83, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_multinomial"], [83, 0, 1, "", "_static_randint"], [83, 0, 1, "", "_static_random_normal"], [83, 0, 1, "", "_static_random_uniform"], [83, 0, 1, "", "_static_shuffle"], [83, 0, 1, "", "multinomial"], [83, 0, 1, "", "randint"], [83, 0, 1, "", "random_normal"], [83, 0, 1, "", "random_uniform"], [83, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[84, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_argmax"], [84, 0, 1, "", "_static_argmin"], [84, 0, 1, "", "_static_argwhere"], [84, 0, 1, "", "_static_nonzero"], [84, 0, 1, "", "_static_where"], [84, 0, 1, "", "argmax"], [84, 0, 1, "", "argmin"], [84, 0, 1, "", "argwhere"], [84, 0, 1, "", "nonzero"], [84, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[85, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_unique_all"], [85, 0, 1, "", "_static_unique_counts"], [85, 0, 1, "", "_static_unique_inverse"], [85, 0, 1, "", "_static_unique_values"], [85, 0, 1, "", "unique_all"], [85, 0, 1, "", "unique_counts"], [85, 0, 1, "", "unique_inverse"], [85, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[86, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_argsort"], [86, 0, 1, "", "_static_searchsorted"], [86, 0, 1, "", "_static_sort"], [86, 0, 1, "", "argsort"], [86, 0, 1, "", "msort"], [86, 0, 1, "", "searchsorted"], [86, 0, 1, "", "sort"], [86, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[87, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_cumprod"], [87, 0, 1, "", "_static_cumsum"], [87, 0, 1, "", "_static_prod"], [87, 0, 1, "", "_static_sum"], [87, 0, 1, "", "_static_var"], [87, 0, 1, "", "cumprod"], [87, 0, 1, "", "cumsum"], [87, 0, 1, "", "einsum"], [87, 0, 1, "", "max"], [87, 0, 1, "", "mean"], [87, 0, 1, "", "min"], [87, 0, 1, "", "prod"], [87, 0, 1, "", "std"], [87, 0, 1, "", "sum"], [87, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[88, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_all"], [88, 0, 1, "", "_static_any"], [88, 0, 1, "", "all"], [88, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[89, 2, 1, "", "_wrap_function"], [89, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[90, 3, 0, "-", "base"], [91, 3, 0, "-", "cp_tensor"], [92, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[90, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[90, 0, 1, "", "__init__"], [90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "mode_dot"], [90, 0, 1, "", "norm"], [90, 0, 1, "", "to_tensor"], [90, 0, 1, "", "to_unfolded"], [90, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[91, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[91, 0, 1, "", "__init__"], [91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "cp_copy"], [91, 0, 1, "", "cp_flip_sign"], [91, 0, 1, "", "cp_lstsq_grad"], [91, 0, 1, "", "cp_mode_dot"], [91, 0, 1, "", "cp_n_param"], [91, 0, 1, "", "cp_norm"], [91, 0, 1, "", "cp_normalize"], [91, 0, 1, "", "cp_to_tensor"], [91, 0, 1, "", "cp_to_unfolded"], [91, 0, 1, "", "cp_to_vec"], [91, 0, 1, "", "mode_dot"], [91, 5, 1, "", "n_param"], [91, 0, 1, "", "norm"], [91, 0, 1, "", "normalize"], [91, 0, 1, "", "to_tensor"], [91, 0, 1, "", "to_unfolded"], [91, 0, 1, "", "to_vec"], [91, 0, 1, "", "unfolding_dot_khatri_rao"], [91, 0, 1, "", "validate_cp_rank"], [91, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[92, 1, 1, "", "TuckerTensor"], [92, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[92, 0, 1, "", "__init__"], [92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "mode_dot"], [92, 5, 1, "", "n_param"], [92, 0, 1, "", "to_tensor"], [92, 0, 1, "", "to_unfolded"], [92, 0, 1, "", "to_vec"], [92, 0, 1, "", "tucker_copy"], [92, 0, 1, "", "tucker_mode_dot"], [92, 0, 1, "", "tucker_n_param"], [92, 0, 1, "", "tucker_normalize"], [92, 0, 1, "", "tucker_to_tensor"], [92, 0, 1, "", "tucker_to_unfolded"], [92, 0, 1, "", "tucker_to_vec"], [92, 0, 1, "", "validate_tucker_rank"], [92, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[97, 3, 0, "-", "base"], [98, 3, 0, "-", "elementwise"], [96, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[97, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "broadcast_shapes"], [97, 5, 1, "", "data"], [97, 5, 1, "", "device"], [97, 5, 1, "", "dtype"], [97, 5, 1, "", "inner_shape"], [97, 5, 1, "", "ndim"], [97, 0, 1, "", "nested_array"], [97, 5, 1, "", "nested_rank"], [97, 0, 1, "", "ragged_map"], [97, 0, 1, "", "ragged_multi_map"], [97, 0, 1, "", "ragged_multi_map_in_function"], [97, 0, 1, "", "replace_ivy_arrays"], [97, 5, 1, "", "shape"], [97, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[98, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[96, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[96, 0, 1, "", "__init__"], [96, 0, 1, "", "from_row_lengths"], [96, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[580, 3, 0, "-", "activations"], [581, 3, 0, "-", "constants"], [582, 3, 0, "-", "control_flow_ops"], [583, 3, 0, "-", "creation"], [584, 3, 0, "-", "data_type"], [585, 3, 0, "-", "device"], [586, 3, 0, "-", "elementwise"], [587, 3, 0, "-", "experimental"], [588, 3, 0, "-", "general"], [589, 3, 0, "-", "gradients"], [590, 3, 0, "-", "layers"], [591, 3, 0, "-", "linear_algebra"], [592, 3, 0, "-", "losses"], [593, 3, 0, "-", "manipulation"], [594, 3, 0, "-", "meta"], [595, 3, 0, "-", "nest"], [596, 3, 0, "-", "norms"], [597, 3, 0, "-", "random"], [598, 3, 0, "-", "searching"], [599, 3, 0, "-", "set"], [600, 3, 0, "-", "sorting"], [601, 3, 0, "-", "statistical"], [602, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[344, 3, 0, "-", "activations"], [345, 3, 0, "-", "constants"], [346, 3, 0, "-", "creation"], [347, 3, 0, "-", "data_type"], [348, 3, 0, "-", "device"], [349, 3, 0, "-", "elementwise"], [350, 3, 0, "-", "general"], [351, 3, 0, "-", "gradients"], [352, 3, 0, "-", "layers"], [353, 3, 0, "-", "linear_algebra"], [354, 3, 0, "-", "losses"], [355, 3, 0, "-", "manipulation"], [356, 3, 0, "-", "meta"], [357, 3, 0, "-", "nest"], [358, 3, 0, "-", "norms"], [359, 3, 0, "-", "random"], [360, 3, 0, "-", "searching"], [361, 3, 0, "-", "set"], [362, 3, 0, "-", "sorting"], [363, 3, 0, "-", "sparse_array"], [364, 3, 0, "-", "statistical"], [365, 3, 0, "-", "utility"]], "ivy.stateful": [[725, 3, 0, "-", "activations"], [726, 3, 0, "-", "converters"], [727, 3, 0, "-", "helpers"], [728, 3, 0, "-", "initializers"], [729, 3, 0, "-", "layers"], [730, 3, 0, "-", "losses"], [731, 3, 0, "-", "module"], [732, 3, 0, "-", "norms"], [733, 3, 0, "-", "optimizers"], [734, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[725, 1, 1, "", "ELU"], [725, 1, 1, "", "GEGLU"], [725, 1, 1, "", "GELU"], [725, 1, 1, "", "Hardswish"], [725, 1, 1, "", "LeakyReLU"], [725, 1, 1, "", "LogSigmoid"], [725, 1, 1, "", "LogSoftmax"], [725, 1, 1, "", "Logit"], [725, 1, 1, "", "Mish"], [725, 1, 1, "", "PReLU"], [725, 1, 1, "", "ReLU"], [725, 1, 1, "", "ReLU6"], [725, 1, 1, "", "SeLU"], [725, 1, 1, "", "SiLU"], [725, 1, 1, "", "Sigmoid"], [725, 1, 1, "", "Softmax"], [725, 1, 1, "", "Softplus"], [725, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[725, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[725, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[726, 1, 1, "", "ModuleConverters"], [726, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[726, 0, 1, "", "from_flax_module"], [726, 0, 1, "", "from_haiku_module"], [726, 0, 1, "", "from_keras_module"], [726, 0, 1, "", "from_paddle_module"], [726, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[727, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[727, 0, 1, "", "check_submod_rets"], [727, 0, 1, "", "get_mod_key"], [727, 0, 1, "", "mod_depth"], [727, 0, 1, "", "mod_height"], [727, 0, 1, "", "mod_with_top_mod_key_chain"], [727, 0, 1, "", "show_mod_in_top_mod"], [727, 0, 1, "", "show_structure"], [727, 0, 1, "", "show_v_in_top_v"], [727, 0, 1, "", "sub_mods"], [727, 0, 1, "", "track_submod_call_order"], [727, 0, 1, "", "track_submod_rets"], [727, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[728, 1, 1, "", "Constant"], [728, 1, 1, "", "FirstLayerSiren"], [728, 1, 1, "", "GlorotUniform"], [728, 1, 1, "", "Initializer"], [728, 1, 1, "", "KaimingNormal"], [728, 1, 1, "", "Ones"], [728, 1, 1, "", "RandomNormal"], [728, 1, 1, "", "Siren"], [728, 1, 1, "", "Uniform"], [728, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[728, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[728, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[728, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[728, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[728, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[728, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[729, 1, 1, "", "AdaptiveAvgPool1d"], [729, 1, 1, "", "AdaptiveAvgPool2d"], [729, 1, 1, "", "AvgPool1D"], [729, 1, 1, "", "AvgPool2D"], [729, 1, 1, "", "AvgPool3D"], [729, 1, 1, "", "Conv1D"], [729, 1, 1, "", "Conv1DTranspose"], [729, 1, 1, "", "Conv2D"], [729, 1, 1, "", "Conv2DTranspose"], [729, 1, 1, "", "Conv3D"], [729, 1, 1, "", "Conv3DTranspose"], [729, 1, 1, "", "Dct"], [729, 1, 1, "", "DepthwiseConv2D"], [729, 1, 1, "", "Dropout"], [729, 1, 1, "", "Embedding"], [729, 1, 1, "", "FFT"], [729, 1, 1, "", "Identity"], [729, 1, 1, "", "LSTM"], [729, 1, 1, "", "Linear"], [729, 1, 1, "", "MaxPool1D"], [729, 1, 1, "", "MaxPool2D"], [729, 1, 1, "", "MaxPool3D"], [729, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[729, 0, 1, "", "__init__"], [729, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[729, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[729, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[730, 1, 1, "", "BinaryCrossEntropyLoss"], [730, 1, 1, "", "CrossEntropyLoss"], [730, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[730, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[730, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[730, 0, 1, "", "__init__"]], "ivy.stateful.module": [[731, 1, 1, "", "Module"], [731, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[731, 0, 1, "", "__call__"], [731, 0, 1, "", "__init__"], [731, 0, 1, "", "build"], [731, 5, 1, "", "build_mode"], [731, 5, 1, "", "built_"], [731, 0, 1, "", "compile"], [731, 0, 1, "", "eval"], [731, 0, 1, "", "load"], [731, 0, 1, "", "register_buffer"], [731, 0, 1, "", "save"], [731, 0, 1, "", "save_weights"], [731, 0, 1, "", "show_graph"], [731, 0, 1, "", "train"]], "ivy.stateful.norms": [[732, 1, 1, "", "BatchNorm2D"], [732, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[732, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[732, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[733, 1, 1, "", "Adam"], [733, 1, 1, "", "LAMB"], [733, 1, 1, "", "LARS"], [733, 1, 1, "", "Optimizer"], [733, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[733, 0, 1, "", "__init__"], [733, 0, 1, "", "set_state"], [733, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[733, 0, 1, "", "__init__"], [733, 0, 1, "", "set_state"], [733, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[733, 0, 1, "", "__init__"], [733, 0, 1, "", "set_state"], [733, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[733, 0, 1, "", "__init__"], [733, 0, 1, "", "set_state"], [733, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[733, 0, 1, "", "__init__"], [733, 0, 1, "", "set_state"], [733, 5, 1, "", "state"]], "ivy.stateful.sequential": [[734, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[734, 0, 1, "", "__init__"]], "ivy.utils": [[735, 3, 0, "-", "assertions"], [736, 3, 0, "-", "backend"], [740, 3, 0, "-", "dynamic_import"], [741, 3, 0, "-", "einsum_parser"], [742, 3, 0, "-", "exceptions"], [743, 3, 0, "-", "inspection"], [744, 3, 0, "-", "logging"], [745, 3, 0, "-", "profiler"], [746, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[735, 2, 1, "", "check_all"], [735, 2, 1, "", "check_all_or_any_fn"], [735, 2, 1, "", "check_any"], [735, 2, 1, "", "check_dev_correct_formatting"], [735, 2, 1, "", "check_dimensions"], [735, 2, 1, "", "check_elem_in_list"], [735, 2, 1, "", "check_equal"], [735, 2, 1, "", "check_exists"], [735, 2, 1, "", "check_false"], [735, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [735, 2, 1, "", "check_gather_input_valid"], [735, 2, 1, "", "check_gather_nd_input_valid"], [735, 2, 1, "", "check_greater"], [735, 2, 1, "", "check_inplace_sizes_valid"], [735, 2, 1, "", "check_isinstance"], [735, 2, 1, "", "check_kernel_padding_size"], [735, 2, 1, "", "check_less"], [735, 2, 1, "", "check_one_way_broadcastable"], [735, 2, 1, "", "check_same_dtype"], [735, 2, 1, "", "check_shape"], [735, 2, 1, "", "check_shapes_broadcastable"], [735, 2, 1, "", "check_true"], [735, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[737, 3, 0, "-", "ast_helpers"], [738, 3, 0, "-", "handler"], [739, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[737, 1, 1, "", "ImportTransformer"], [737, 1, 1, "", "IvyLoader"], [737, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[737, 0, 1, "", "__init__"], [737, 0, 1, "", "impersonate_import"], [737, 0, 1, "", "visit_Import"], [737, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[737, 0, 1, "", "__init__"], [737, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[737, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[738, 1, 1, "", "ContextManager"], [738, 2, 1, "", "choose_random_backend"], [738, 2, 1, "", "convert_from_numpy_to_target_backend"], [738, 2, 1, "", "convert_from_source_backend_to_numpy"], [738, 2, 1, "", "current_backend"], [738, 2, 1, "", "fn_name_from_version_specific_fn_name"], [738, 2, 1, "", "prevent_access_locally"], [738, 2, 1, "", "previous_backend"], [738, 2, 1, "", "set_backend"], [738, 2, 1, "", "set_backend_to_specific_version"], [738, 2, 1, "", "set_jax_backend"], [738, 2, 1, "", "set_mxnet_backend"], [738, 2, 1, "", "set_numpy_backend"], [738, 2, 1, "", "set_paddle_backend"], [738, 2, 1, "", "set_tensorflow_backend"], [738, 2, 1, "", "set_torch_backend"], [738, 2, 1, "", "unset_backend"], [738, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[738, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[739, 2, 1, "", "available_sub_backends"], [739, 2, 1, "", "clear_sub_backends"], [739, 2, 1, "", "find_available_sub_backends"], [739, 2, 1, "", "set_sub_backend"], [739, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[740, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[741, 2, 1, "", "convert_interleaved_input"], [741, 2, 1, "", "convert_subscripts"], [741, 2, 1, "", "find_output_shape"], [741, 2, 1, "", "find_output_str"], [741, 2, 1, "", "gen_unused_symbols"], [741, 2, 1, "", "get_symbol"], [741, 2, 1, "", "has_valid_einsum_chars_only"], [741, 2, 1, "", "is_valid_einsum_char"], [741, 2, 1, "", "legalise_einsum_expr"], [741, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[742, 7, 1, "", "InplaceUpdateException"], [742, 7, 1, "", "InvalidBackendException"], [742, 7, 1, "", "IvyAttributeError"], [742, 7, 1, "", "IvyBackendException"], [742, 7, 1, "", "IvyBroadcastShapeError"], [742, 7, 1, "", "IvyDeviceError"], [742, 7, 1, "", "IvyDtypePromotionError"], [742, 7, 1, "", "IvyError"], [742, 7, 1, "", "IvyException"], [742, 7, 1, "", "IvyIndexError"], [742, 7, 1, "", "IvyNotImplementedException"], [742, 7, 1, "", "IvyValueError"], [742, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[742, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[742, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[743, 2, 1, "", "add_array_specs"], [743, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[744, 2, 1, "", "set_logging_mode"], [744, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[745, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[745, 0, 1, "", "__init__"], [745, 4, 1, "", "print_stats"], [745, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[746, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 14, 25, 39, 40], "creat": [0, 37, 38, 753], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 5, 7, 14, 33, 747, 749, 765, 769, 772, 775, 779, 795, 796], "ivi": [3, 4, 5, 7, 13, 16, 24, 25, 26, 37, 38, 40, 41, 43, 747, 749, 753, 755, 758, 760, 762, 765, 767, 772, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 788, 795, 796, 807], "alexnet": 3, "instal": [3, 4, 7, 16, 37, 38, 40, 747, 788], "data": [3, 4, 5, 7, 16, 25, 37, 48, 71, 99, 347, 584, 599, 701, 702, 703, 704, 763, 774, 776, 784, 787], "prepar": [3, 4, 5, 7], "infer": [3, 4, 5, 7, 771], "torch": [3, 4, 5, 7, 33, 40, 801, 802], "tensorflow": [3, 4, 5, 12, 33, 40, 41, 42, 801], "jax": [3, 4, 5, 6, 8, 33, 40, 801], "appendix": [3, 5], "code": [3, 16, 17, 18, 19, 26, 37, 768, 777], "implement": [3, 5, 762, 772, 774, 793], "bert": 4, "dependeci": 4, "import": [4, 5, 7, 16, 37, 38, 41, 740], "modul": [4, 731, 763, 764, 785, 796], "sequenc": [4, 769], "classif": 4, "model": [4, 5, 6, 7, 8, 10, 11, 12, 23, 24, 25, 26, 37, 38, 39, 40, 41, 43, 786, 787], "imag": [5, 7, 54, 77, 249, 750, 760], "segment": 5, "unet": 5, "custom": [5, 758, 760, 772, 784, 787], "preprocess": 5, "load": [5, 7, 721, 784], "visualis": [5, 7], "initi": [5, 7, 728, 785], "nativ": [5, 7, 758, 779], "pretrain": [5, 7], "weight": [5, 7, 784], "mask": 5, "function": [5, 16, 25, 26, 37, 38, 39, 41, 43, 100, 753, 761, 763, 764, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 781, 786, 787, 796], "us": [5, 7, 13, 21, 24, 41, 43, 747, 750, 753, 754, 757, 772, 775, 784, 788, 795, 796], "your": [5, 7, 755, 776], "backend": [5, 16, 25, 37, 38, 40, 41, 736, 739, 747, 753, 759, 763, 772, 777, 781, 787], "acceler": [6, 8], "mmpretrain": 6, "resnet": [7, 44], "set": [7, 33, 37, 38, 62, 85, 361, 599, 747, 754, 759, 778, 788], "label": 7, "resnet34": 7, "classifi": 7, "resnet50": 7, "pytorch": [8, 10, 39, 801], "guid": [9, 14], "transpil": [10, 11, 12, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 39, 43, 747, 786, 788, 796], "build": [10, 11, 12, 41, 750, 760, 781], "top": [10, 11, 12, 762], "round": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 39, 279], "up": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 39, 747, 754, 788], "haiku": 11, "develop": 13, "convolut": 13, "network": [13, 38, 41, 784, 786], "tutori": [14, 41], "And": 14, "learn": [14, 15, 801], "basic": [14, 15, 37, 38, 755, 774], "write": [16, 24, 774, 776], "content": [16, 39], "handler": [16, 25, 738, 739, 781], "structur": [16, 25, 760, 772, 787], "api": [16, 25, 26, 747, 753, 757, 761, 762, 772, 777, 781, 783, 785, 786, 788, 792, 795, 796, 798, 805, 807], "state": [16, 25, 26, 785, 787, 795], "unifi": [17, 20, 21, 27, 30, 31, 32, 37, 747, 783, 793, 796, 803, 807], "compil": [18, 20, 21, 25, 26, 28, 30, 31, 32, 38, 781, 786, 788, 795, 799, 804, 806, 807], "lazi": [20, 30, 795], "v": [20, 30, 33, 768, 787, 792, 795], "eager": [20, 30, 795], "how": [21, 760, 776], "decor": [21, 32, 767, 771, 776], "ani": [22, 23, 25, 26, 720], "librari": [22, 25, 26, 41, 43, 749, 796], "odsc": 25, "framework": [25, 31, 37, 723, 747, 772, 775, 782, 801, 804, 807, 808], "graph": [25, 42, 781, 786, 802, 807], "quickstart": 26, "get": [26, 755, 788], "familiar": 26, "0": [27, 28, 29, 30, 34, 35], "1": [28, 30, 31, 32, 33, 36, 43, 801], "2": [29, 32, 34, 43, 801], "select": 31, "As": 32, "3": [33, 35, 36, 43], "dynam": [33, 41, 740, 759, 787], "static": 33, "todo": [33, 755], "explain": 33, "via": 33, "why": [33, 776, 793], "mode": [33, 763, 767, 778], "i": [33, 747, 760, 779], "true": 33, "default": [33, 499], "when": [33, 747], "from": [33, 40, 747, 788], "numpi": [33, 40, 774, 801], "fals": 33, "kornia": 34, "perceiv": 35, "stabl": 36, "diffus": 36, "oper": [37, 769, 778, 783, 787], "ml": [37, 791, 803, 807], "chang": 37, "one": 37, "line": [37, 755], "No": [37, 754, 793], "need": [37, 776], "worri": 37, "about": 37, "type": [37, 48, 71, 347, 584, 763, 770, 774, 787], "differ": 37, "them": 37, "all": [37, 719], "standalon": [37, 770], "defin": [37, 38, 39, 41], "optim": [37, 733, 785], "input": [37, 38, 769], "target": 37, "loss": [37, 57, 80, 354, 592, 730], "train": [37, 39, 41], "loop": [37, 41], "sampl": 38, "check": [38, 768, 787], "result": 38, "simpl": 38, "neural": 38, "deepmind": [39, 40], "": [39, 41, 753, 760, 788], "perceiverio": [39, 40], "tabl": [39, 760, 763], "construct": [39, 784], "some": 39, "helper": [39, 727, 737, 775, 776, 777], "pipelin": [39, 41, 760, 762, 776, 787], "dataset": [39, 41], "download": 39, "dataload": 39, "test": [39, 754, 755, 757, 762, 775, 776], "gpu": [40, 787], "introduct": [40, 43, 749, 774, 775], "python3": 40, "8": 40, "setup": [40, 768], "kernel": 40, "clone": [40, 754, 762], "repo": [40, 754], "ivy_model": 40, "run": [40, 755, 757, 760, 776], "end": 41, "let": 41, "we": [41, 776], "ar": 41, "mnist": 41, "thi": 41, "temporari": 41, "loader": 41, "util": [41, 65, 88, 365, 602, 724], "plot": 41, "metric": 41, "save": [41, 722, 784], "huggingfac": 42, "deit": 42, "can": 42, "visual": 42, "displai": 42, "html": 42, "file": 42, "browser": [42, 755], "To": [43, 755], "interfac": 43, "telemetri": 43, "18": 44, "activ": [45, 67, 344, 580, 725], "convers": [46, 69, 771], "creation": [47, 70, 346, 583], "devic": [49, 72, 348, 585, 764, 769, 774], "elementwis": [50, 73, 98, 349, 586], "experiment": [51, 74, 587, 753], "gener": [52, 75, 350, 588, 772, 776, 779, 795], "gradient": [53, 76, 328, 351, 589, 772], "layer": [55, 78, 352, 590, 729], "linear": [56, 79, 353, 591, 614], "algebra": [56, 79, 353, 591], "manipul": [58, 81, 355, 593], "norm": [59, 82, 358, 596, 732], "random": [60, 83, 359, 597], "search": [61, 84, 360, 598], "sort": [63, 86, 362, 600, 708], "statist": [64, 87, 364, 601], "wrap": [66, 89, 771], "base": [68, 90, 97], "cp": 91, "tensor": [91, 92, 95], "tucker": [92, 416], "arrai": [93, 96, 119, 363, 757, 758, 762, 769, 783, 792, 795, 798], "contain": [94, 755, 761, 784], "factor": 95, "nest": [96, 357, 595], "class": [99, 723, 758, 767, 774, 783], "gelu": 101, "hardswish": 102, "leaky_relu": 103, "log_softmax": 104, "mish": 105, "relu": 106, "sigmoid": 107, "softmax": 108, "softplu": 109, "softsign": 110, "cast_bool": 111, "cmp_i": 112, "cmp_isnot": 113, "for_loop": 114, "if_els": 115, "try_except": 116, "while_loop": 117, "arang": 118, "asarrai": 120, "asarray_handle_nest": 121, "asarray_infer_devic": 122, "asarray_infer_dtyp": 123, "asarray_inputs_to_native_shap": 124, "asarray_to_native_arrays_and_back": 125, "copy_arrai": 126, "empti": 127, "empty_lik": 128, "ey": 129, "from_dlpack": 130, "note": [130, 583], "frombuff": 131, "full": [132, 775], "full_lik": 133, "linspac": 134, "logspac": 135, "meshgrid": 136, "native_arrai": 137, "one_hot": 138, "ones": 139, "ones_lik": 140, "tril": 141, "triu": 142, "triu_indic": 143, "zero": 144, "zeros_lik": 145, "as_ivy_dtyp": 146, "as_native_dtyp": 147, "astyp": 148, "broadcast_arrai": 149, "broadcast_to": 150, "can_cast": 151, "check_float": 152, "closest_valid_dtyp": 153, "default_complex_dtyp": 154, "default_dtyp": 155, "default_float_dtyp": 156, "default_int_dtyp": 157, "default_uint_dtyp": 158, "dtype": [159, 769], "dtype_bit": 160, "finfo": 161, "function_supported_dtyp": 162, "function_unsupported_dtyp": 163, "iinfo": 164, "infer_default_dtyp": 165, "invalid_dtyp": 166, "is_bool_dtyp": 167, "is_complex_dtyp": 168, "is_float_dtyp": 169, "is_hashable_dtyp": 170, "is_int_dtyp": 171, "is_native_dtyp": 172, "is_uint_dtyp": 173, "promote_typ": 174, "promote_types_of_input": 175, "result_typ": 176, "set_default_complex_dtyp": 177, "set_default_dtyp": 178, "set_default_float_dtyp": 179, "set_default_int_dtyp": 180, "set_default_uint_dtyp": 181, "type_promote_arrai": 182, "unset_default_complex_dtyp": 183, "unset_default_dtyp": 184, "unset_default_float_dtyp": 185, "unset_default_int_dtyp": 186, "unset_default_uint_dtyp": 187, "valid_dtyp": 188, "as_ivy_dev": 189, "as_native_dev": 190, "clear_cached_mem_on_dev": 191, "default_devic": 192, "dev": 193, "dev_util": 194, "function_supported_devic": 195, "function_unsupported_devic": 196, "get_all_ivy_arrays_on_dev": 197, "gpu_is_avail": 198, "handle_soft_device_vari": 199, "num_cpu_cor": 200, "num_gpu": 201, "num_ivy_arrays_on_dev": 202, "percent_used_mem_on_dev": 203, "print_all_ivy_arrays_on_dev": 204, "set_default_devic": 205, "set_soft_device_mod": 206, "paramet": [206, 533, 534, 539, 540, 542, 543, 585, 588, 778], "set_split_factor": 207, "split_factor": 208, "split_func_cal": 209, "to_devic": 210, "total_mem_on_dev": 211, "tpu_is_avail": 212, "unset_default_devic": 213, "unset_soft_device_mod": 214, "used_mem_on_dev": 215, "ab": 216, "aco": 217, "acosh": 218, "add": [219, 765, 775, 807], "angl": 220, "asin": 221, "asinh": 222, "atan": 223, "atan2": 224, "atanh": 225, "bitwise_and": 226, "bitwise_invert": 227, "bitwise_left_shift": 228, "bitwise_or": 229, "bitwise_right_shift": 230, "bitwise_xor": 231, "ceil": 232, "co": 233, "cosh": 234, "deg2rad": 235, "divid": 236, "equal": 237, "erf": 238, "exp": 239, "exp2": 240, "expm1": 241, "floor": 242, "floor_divid": 243, "fmin": 244, "fmod": 245, "gcd": 246, "greater": 247, "greater_equ": 248, "isfinit": 250, "isinf": 251, "isnan": 252, "isreal": 253, "lcm": 254, "less": 255, "less_equ": 256, "log": [257, 744, 754], "log10": 258, "log1p": 259, "log2": 260, "logaddexp": 261, "logaddexp2": 262, "logical_and": 263, "logical_not": 264, "logical_or": 265, "logical_xor": 266, "maximum": 267, "minimum": 268, "multipli": 269, "nan_to_num": 270, "neg": 271, "not_equ": 272, "posit": [273, 769], "pow": 274, "rad2deg": 275, "real": 276, "reciproc": 277, "remaind": 278, "sign": 280, "sin": 281, "sinh": 282, "sqrt": 283, "squar": 284, "subtract": 285, "tan": [286, 765, 775], "tanh": 287, "trapz": 288, "trunc": 289, "trunc_divid": 290, "elu": 291, "logit": 292, "logsigmoid": 293, "prelu": 294, "relu6": 295, "selu": 296, "sequence_length": 297, "silu": 298, "thresholded_relu": 299, "blackman_window": 300, "eye_lik": 301, "hamming_window": 302, "hann_window": 303, "indic": 304, "kaiser_bessel_derived_window": 305, "kaiser_window": 306, "mel_weight_matrix": 307, "ndenumer": 308, "ndindex": 309, "random_cp": 310, "random_tuck": 311, "tril_indic": 312, "trilu": 313, "unsorted_segment_min": 314, "unsorted_segment_sum": 315, "vorbis_window": 316, "allclos": 317, "binar": 318, "conj": 319, "copysign": 320, "count_nonzero": 321, "diff": 322, "digamma": 323, "fix": 324, "float_pow": 325, "fmax": 326, "frexp": 327, "hypot": 329, "isclos": 330, "ldexp": 331, "lerp": 332, "lgamma": 333, "modf": 334, "nansum": 335, "nextaft": 336, "signbit": 337, "sinc": 338, "sparsify_tensor": 339, "xlogi": 340, "zeta": 341, "reduc": 342, "bind_custom_gradient_funct": 343, "constant": [345, 581], "meta": [356, 594], "spars": 363, "adaptive_avg_pool1d": 366, "adaptive_avg_pool2d": 367, "adaptive_max_pool2d": 368, "area_interpol": 369, "avg_pool1d": 370, "avg_pool2d": 371, "avg_pool3d": 372, "dct": 373, "dft": 374, "dropout1d": 375, "dropout2d": 376, "dropout3d": 377, "embed": 378, "fft": 379, "fft2": 380, "generate_einsum_equ": 381, "get_interpolate_kernel": 382, "idct": 383, "ifft": 384, "ifftn": 385, "interp": 386, "interpol": 387, "max_pool1d": 388, "max_pool2d": 389, "max_pool3d": 390, "max_unpool1d": 391, "nearest_interpol": 392, "pool": 393, "reduce_window": 394, "rfftn": 395, "adjoint": 396, "cond": 397, "diagflat": 398, "dot": 399, "eig": [400, 623], "eigh_tridiagon": 401, "eigval": 402, "general_inner_product": 403, "initialize_tuck": 404, "khatri_rao": 405, "kron": 406, "kroneck": 407, "make_svd_non_neg": 408, "matrix_exp": 409, "mode_dot": 410, "multi_dot": 411, "multi_mode_dot": 412, "partial_tuck": 413, "svd_flip": 414, "truncated_svd": 415, "huber_loss": 417, "l1_loss": 418, "log_poisson_loss": 419, "smooth_l1_loss": 420, "soft_margin_loss": 421, "as_strid": 422, "associative_scan": 423, "atleast_1d": 424, "atleast_2d": 425, "atleast_3d": 426, "broadcast_shap": 427, "choos": 428, "concat_from_sequ": 429, "dsplit": 430, "dstack": 431, "expand": 432, "fill_diagon": 433, "flatten": 434, "fliplr": 435, "flipud": 436, "fold": 437, "heavisid": 438, "hsplit": 439, "hstack": 440, "i0": 441, "matric": 442, "moveaxi": 443, "pad": 444, "partial_fold": 445, "partial_tensor_to_vec": 446, "partial_unfold": 447, "partial_vec_to_tensor": 448, "put_along_axi": 449, "rot90": 450, "soft_threshold": 451, "take_along_axi": 452, "top_k": 453, "unfold": 454, "unique_consecut": 455, "vsplit": 456, "vstack": 457, "batch_norm": 458, "group_norm": 459, "instance_norm": 460, "l1_normal": 461, "l2_normal": 462, "lp_normal": 463, "bernoulli": 464, "beta": 465, "dirichlet": 466, "gamma": 467, "poisson": 468, "unravel_index": 469, "invert_permut": 470, "lexsort": 471, "is_ivy_sparse_arrai": 472, "is_native_sparse_arrai": 473, "native_sparse_arrai": 474, "native_sparse_array_to_indices_values_and_shap": 475, "bincount": 476, "corrcoef": 477, "cov": 478, "cummax": 479, "cummin": 480, "histogram": 481, "igamma": 482, "median": 483, "nanmean": 484, "nanmedian": 485, "nanprod": 486, "quantil": 487, "optional_get_el": 488, "all_equ": 489, "arg_info": 490, "arg_nam": 491, "array_equ": 492, "assert_supports_inplac": 493, "cache_fn": 494, "clip_matrix_norm": 495, "clip_vector_norm": 496, "container_typ": 497, "current_backend_str": 498, "einops_rearrang": 500, "einops_reduc": 501, "einops_repeat": 502, "exist": [503, 750], "fourier_encod": 504, "function_supported_devices_and_dtyp": 505, "function_unsupported_devices_and_dtyp": 506, "gather": 507, "gather_nd": 508, "get_all_arrays_in_memori": 509, "get_item": 510, "get_num_dim": 511, "get_referrers_recurs": 512, "has_nan": 513, "inplace_arrays_support": 514, "inplace_decr": 515, "inplace_incr": 516, "inplace_upd": 517, "inplace_variables_support": 518, "is_arrai": 519, "is_ivy_arrai": 520, "is_ivy_contain": 521, "is_ivy_nested_arrai": 522, "is_native_arrai": 523, "isin": 524, "isscalar": 525, "items": 526, "match_kwarg": 527, "multiprocess": 528, "num_arrays_in_memori": 529, "print_all_arrays_in_memori": 530, "scatter_flat": 531, "scatter_nd": 532, "set_array_mod": 533, "set_exception_trace_mod": 534, "set_inplace_mod": 535, "set_item": 536, "set_min_bas": 537, "set_min_denomin": 538, "set_nestable_mod": 539, "set_precise_mod": 540, "set_queue_timeout": 541, "set_shape_array_mod": 542, "set_show_func_wrapper_trace_mod": 543, "set_tmp_dir": 544, "shape": [545, 599, 701, 702, 703, 704, 771, 787], "stable_divid": 546, "stable_pow": 547, "stride": 548, "supports_inplace_upd": 549, "to_ivy_shap": 550, "to_list": 551, "to_native_shap": 552, "to_numpi": 553, "to_scalar": 554, "try_else_non": 555, "unset_array_mod": 556, "unset_exception_trace_mod": 557, "unset_inplace_mod": 558, "unset_min_bas": 559, "unset_min_denomin": 560, "unset_nestable_mod": 561, "unset_precise_mod": 562, "unset_queue_timeout": 563, "unset_shape_array_mod": 564, "unset_show_func_wrapper_trace_mod": 565, "unset_tmp_dir": 566, "value_is_nan": 567, "vmap": 568, "adam_step": 569, "adam_upd": 570, "execute_with_gradi": [571, 772], "grad": 572, "gradient_descent_upd": 573, "jac": 574, "lamb_upd": 575, "lars_upd": 576, "optimizer_upd": 577, "stop_gradi": 578, "value_and_grad": 579, "control": [582, 787], "flow": [582, 787], "op": 582, "depend": [599, 701, 702, 703, 704], "output": [599, 701, 702, 703, 704], "conv": 603, "conv1d": 604, "conv1d_transpos": 605, "conv2d": 606, "conv2d_transpos": 607, "conv3d": 608, "conv3d_transpos": 609, "conv_general_dil": 610, "conv_general_transpos": 611, "depthwise_conv2d": 612, "dropout": 613, "lstm_updat": 615, "multi_head_attent": 616, "scaled_dot_product_attent": 617, "choleski": 618, "cross": 619, "det": 620, "diag": 621, "diagon": 622, "eigh": 624, "eigvalsh": 625, "inner": 626, "inv": 627, "lu_factor": 628, "matmul": 629, "matrix_norm": 630, "matrix_pow": 631, "matrix_rank": 632, "matrix_transpos": 633, "outer": 634, "pinv": 635, "qr": 636, "slogdet": 637, "solv": 638, "svd": 639, "svdval": 640, "tensordot": 641, "tensorsolv": 642, "trace": [643, 767], "vander": 644, "vecdot": 645, "vector_norm": 646, "vector_to_skew_symmetric_matrix": 647, "binary_cross_entropi": 648, "cross_entropi": 649, "sparse_cross_entropi": 650, "clip": 651, "concat": 652, "constant_pad": 653, "expand_dim": 654, "flip": 655, "permute_dim": 656, "repeat": 657, "reshap": 658, "roll": [659, 765], "split": 660, "squeez": 661, "stack": [662, 767], "swapax": 663, "tile": 664, "unstack": 665, "zero_pad": 666, "fomaml_step": 667, "maml_step": 668, "reptile_step": 669, "all_nested_indic": 670, "copy_nest": 671, "duplicate_array_index_chain": 672, "index_nest": 673, "insert_into_nest_at_index": 674, "insert_into_nest_at_indic": 675, "map": [676, 762], "map_nest_at_index": 677, "map_nest_at_indic": 678, "multi_index_nest": 679, "nested_ani": 680, "nested_argwher": 681, "nested_map": 682, "nested_multi_map": 683, "prune_empti": 684, "prune_nest_at_index": 685, "prune_nest_at_indic": 686, "set_nest_at_index": 687, "set_nest_at_indic": 688, "layer_norm": 689, "multinomi": 690, "randint": 691, "random_norm": 692, "random_uniform": 693, "seed": 694, "shuffl": 695, "argmax": 696, "argmin": 697, "argwher": 698, "nonzero": 699, "where": [700, 753], "unique_al": 701, "unique_count": 702, "unique_invers": 703, "unique_valu": 704, "argsort": 705, "msort": 706, "searchsort": 707, "cumprod": 709, "cumsum": 710, "einsum": [711, 741], "max": 712, "mean": 713, "min": 714, "prod": 715, "std": 716, "sum": 717, "var": 718, "convert": [726, 786], "sequenti": 734, "assert": [735, 767], "ast": 737, "sub": 739, "parser": 741, "except": [742, 767, 771], "inspect": 743, "profil": 745, "verbos": 746, "statu": 747, "ai": 747, "should": 747, "pip": [747, 788], "docker": [747, 750, 754, 755, 760, 788], "sourc": [747, 788], "multi": [747, 804, 807], "support": [747, 759, 763, 771, 774, 787], "document": 747, "contribut": [747, 748], "commun": 747, "citat": 747, "appli": 749, "robot": 749, "doc": [750, 760], "conveni": [750, 760, 770], "script": [750, 760], "hub": 750, "local": [750, 755, 768], "without": [750, 775], "error": [751, 767], "handl": [751, 758, 764, 767, 771, 787], "help": [752, 755], "resourc": 752, "open": 753, "task": 753, "format": [753, 768, 800, 807], "checklist": 753, "frontend": [753, 759, 774, 775, 786], "place": 753, "extend": [753, 776, 779], "an": [753, 772], "issu": [753, 755, 768, 788], "github": [753, 754], "templat": 753, "fork": [754, 755], "pre": [754, 768], "commit": [754, 755, 762, 768], "pycharm": [754, 755, 768], "virtual": 754, "environ": 754, "miniconda": 754, "venv": 754, "interpret": 754, "window": 754, "maco": 754, "ubuntu": 754, "more": [754, 779, 793], "detail": 754, "hypothesi": [754, 775, 776], "free": 754, "wsl": 754, "codespac": 754, "The": [755, 760, 772, 774, 783, 787, 792], "list": 755, "manag": 755, "who": 755, "ask": 755, "With": 755, "command": 755, "pull": [755, 762], "request": [755, 762], "small": 755, "often": 755, "interact": 755, "most": 755, "out": [755, 769, 771, 773], "id": [755, 757], "deep": 756, "dive": 756, "termin": 757, "regener": 757, "failur": 757, "skip": 757, "integr": [758, 762, 768, 776], "version": [759, 777, 787], "builder": 760, "being": 760, "option": 760, "index": 760, "rst": 760, "partial_conf": 760, "py": 760, "prebuild": 760, "sh": 760, "extens": 760, "custom_autosummari": 760, "hide": 760, "discussion_link": 760, "skippable_funct": 760, "ivy_data": 760, "instanc": [761, 774, 775, 783], "method": [761, 774, 775, 783, 784], "special": [761, 774], "nestabl": [761, 769, 770, 771], "continu": [762, 768], "push": 762, "pr": 762, "trigger": 762, "A": [762, 779], "down": 762, "view": [762, 771, 773], "store": 762, "retriev": 762, "repositori": 762, "nitti": 762, "gritti": 762, "storag": 762, "space": 762, "unifyai": 762, "determin": 762, "coverag": 762, "workflow": 762, "multipl": 762, "runner": 762, "race": 762, "condit": 762, "period": 762, "manual": 762, "dispatch": 762, "ci": 762, "dashboard": 762, "promot": [763, 774], "precis": 763, "non": [763, 779], "argument": [763, 764, 769, 771, 773, 774], "other": [763, 764], "unsupport": 763, "bug": 763, "cast": [763, 774], "superset": [763, 779], "docstr": [765, 766], "configur": [767, 775, 784], "func_wrapp": 767, "prune": 767, "handle_except": 767, "consist": [767, 776], "lint": 768, "common": 768, "keyword": 769, "number": 769, "integ": 769, "primari": 770, "composit": 770, "mix": [770, 771, 776], "partial": [770, 771, 776], "order": 771, "wrapper": [771, 807, 808], "miscellan": 771, "overview": 772, "usag": [772, 779], "signatur": 772, "design": [772, 777, 780], "our": 772, "polici": [772, 774], "specif": [772, 805, 806, 807], "consider": 772, "inplac": 773, "updat": 773, "copi": 773, "short": 774, "unus": 774, "rule": 774, "duplic": [774, 779], "valu": 775, "alia": 775, "own": 776, "strategi": 776, "do": [776, 792], "effect": 776, "bonu": 776, "featur": 776, "self": 776, "explicit": 776, "test_array_funct": 776, "re": [776, 793], "fail": 776, "navig": 777, "categor": 777, "submodul": 777, "unpin": 777, "global": 778, "properti": 778, "getter": 778, "attribut": 778, "setter": 778, "set_": 778, "unset_": 778, "behaviour": 779, "standard": [779, 792, 798, 807], "what": [779, 807], "balanc": 779, "effici": 779, "maxim": 779, "block": 781, "monkei": 783, "patch": 783, "represent": 784, "recurs": 784, "built": 784, "ins": 784, "access": 784, "comparison": 784, "case": 784, "compartment": 784, "role": 786, "faq": 787, "maintain": 787, "size": 787, "deploy": 787, "auto": 787, "differenti": 787, "replica": 787, "parallel": 787, "altern": 787, "start": 788, "folder": 788, "kei": 788, "question": 788, "glossari": 789, "motiv": 790, "explos": 791, "skeptic": 792, "complimentari": 792, "competit": 792, "work": [792, 797], "infinit": 793, "shelf": 793, "life": 793, "One": 794, "liner": 794, "cach": 795, "sharp": [795, 796], "bit": [795, 796], "relat": 797, "infrastructur": [799, 807], "llvm": 799, "mlir": 799, "oneapi": 799, "exchang": [800, 807], "onnx": 800, "nnef": 800, "coreml": 800, "matlab": 801, "scipi": 801, "scikit": 801, "theano": 801, "panda": 801, "julia": 801, "apach": [801, 804], "spark": 801, "mllib": 801, "caff": 801, "chainer": 801, "mxnet": 801, "cntk": 801, "flux": 801, "dex": 801, "languag": 801, "tracer": [802, 807], "tf": 802, "jaxpr": 802, "jit": 802, "fx": 802, "compani": [803, 807], "quansight": 803, "modular": 803, "octoml": 803, "vendor": [804, 805, 806, 807], "tvm": 804, "xla": 804, "gcc": 804, "tensorrt": 805, "cuda": 805, "icc": 806, "icx": 806, "nvcc": 806, "doe": 807, "eagerpi": 808, "kera": 808, "thinc": 808, "tensorli": 808, "neuropod": 808}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"Sorting": [[63, "module-ivy.data_classes.array.sorting"], [86, "module-ivy.data_classes.container.sorting"], [600, "sorting"], [362, "sorting"]], "Utility": [[88, "module-ivy.data_classes.container.utility"], [65, "module-ivy.data_classes.array.utility"], [602, "utility"], [365, "utility"]], "Layers": [[78, "module-ivy.data_classes.container.layers"], [729, "module-ivy.stateful.layers"], [55, "module-ivy.data_classes.array.layers"], [590, "layers"], [352, "layers"]], "asarray_inputs_to_native_shapes": [[124, "asarray-inputs-to-native-shapes"]], "asarray_infer_device": [[122, "asarray-infer-device"]], "mish": [[105, "mish"]], "softsign": [[110, "softsign"]], "try_except": [[116, "try-except"]], "Experimental": [[74, "module-ivy.data_classes.container.experimental"], [51, "module-ivy.data_classes.array.experimental"], [587, "experimental"]], "Cp tensor": [[91, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Factorized tensor": [[95, "factorized-tensor"]], "Nested array": [[96, "nested-array"]], "leaky_relu": [[103, "leaky-relu"]], "while_loop": [[117, "while-loop"]], "asarray": [[120, "asarray"]], "Data type": [[71, "module-ivy.data_classes.container.data_type"], [48, "module-ivy.data_classes.array.data_type"], [584, "data-type"], [347, "module-ivy.functional.ivy.experimental.data_type"]], "Conversions": [[69, "module-ivy.data_classes.container.conversions"], [46, "module-ivy.data_classes.array.conversions"]], "Array": [[93, "array"]], "log_softmax": [[104, "log-softmax"]], "Random": [[83, "module-ivy.data_classes.container.random"], [60, "module-ivy.data_classes.array.random"], [597, "random"], [359, "random"]], "cmp_is": [[112, "cmp-is"]], "Set": [[85, "module-ivy.data_classes.container.set"], [62, "module-ivy.data_classes.array.set"], [599, "set"], [361, "module-ivy.functional.ivy.experimental.set"]], "asarray_to_native_arrays_and_back": [[125, "asarray-to-native-arrays-and-back"]], "Wrapping": [[89, "module-ivy.data_classes.container.wrapping"], [66, "module-ivy.data_classes.array.wrapping"]], "Base": [[68, "module-ivy.data_classes.container.base"], [97, "module-ivy.data_classes.nested_array.base"], [90, "module-ivy.data_classes.factorized_tensor.base"]], "Elementwise": [[73, "module-ivy.data_classes.container.elementwise"], [98, "module-ivy.data_classes.nested_array.elementwise"], [50, "module-ivy.data_classes.array.elementwise"], [586, "elementwise"], [349, "elementwise"]], "relu": [[106, "relu"]], "softmax": [[108, "softmax"]], "for_loop": [[114, "for-loop"]], "arange": [[118, "arange"]], "hardswish": [[102, "hardswish"]], "Gradients": [[76, "module-ivy.data_classes.container.gradients"], [772, "gradients"], [53, "module-ivy.data_classes.array.gradients"], [589, "gradients"], [351, "gradients"]], "Data classes": [[99, "data-classes"]], "Losses": [[80, "module-ivy.data_classes.container.losses"], [730, "module-ivy.stateful.losses"], [57, "module-ivy.data_classes.array.losses"], [592, "losses"], [354, "losses"]], "Container": [[94, "container"]], "Creation": [[70, "module-ivy.data_classes.container.creation"], [47, "module-ivy.data_classes.array.creation"], [583, "creation"], [346, "creation"]], "Tucker tensor": [[92, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "sigmoid": [[107, "sigmoid"]], "array": [[119, "array"]], "Manipulation": [[81, "module-ivy.data_classes.container.manipulation"], [58, "module-ivy.data_classes.array.manipulation"], [593, "manipulation"], [355, "manipulation"]], "softplus": [[109, "softplus"]], "if_else": [[115, "if-else"]], "Searching": [[84, "module-ivy.data_classes.container.searching"], [61, "module-ivy.data_classes.array.searching"], [598, "searching"], [360, "searching"]], "gelu": [[101, "gelu"]], "Norms": [[82, "module-ivy.data_classes.container.norms"], [732, "module-ivy.stateful.norms"], [59, "module-ivy.data_classes.array.norms"], [596, "norms"], [358, "norms"]], "General": [[75, "module-ivy.data_classes.container.general"], [52, "module-ivy.data_classes.array.general"], [588, "general"], [350, "general"]], "asarray_handle_nestable": [[121, "asarray-handle-nestable"]], "Functions": [[100, "functions"]], "asarray_infer_dtype": [[123, "asarray-infer-dtype"]], "cast_bool": [[111, "cast-bool"]], "Statistical": [[87, "module-ivy.data_classes.container.statistical"], [64, "module-ivy.data_classes.array.statistical"], [601, "statistical"], [364, "statistical"]], "Device": [[72, "module-ivy.data_classes.container.device"], [49, "module-ivy.data_classes.array.device"], [585, "device"], [348, "module-ivy.functional.ivy.experimental.device"]], "Image": [[77, "module-ivy.data_classes.container.image"], [54, "module-ivy.data_classes.array.image"]], "Activations": [[67, "module-ivy.data_classes.container.activations"], [725, "module-ivy.stateful.activations"], [45, "module-ivy.data_classes.array.activations"], [580, "activations"], [344, "activations"]], "cmp_isnot": [[113, "cmp-isnot"]], "Linear algebra": [[79, "module-ivy.data_classes.container.linear_algebra"], [56, "module-ivy.data_classes.array.linear_algebra"], [591, "linear-algebra"], [353, "linear-algebra"]], "Building Blocks": [[781, "building-blocks"]], "Backend Functional APIs \u2705": [[781, "backend-functional-apis"]], "Ivy Functional API \u2705": [[781, "ivy-functional-api"]], "Backend Handler \u2705": [[781, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[781, "graph-compiler"]], "Arrays": [[758, "arrays"]], "Native Array": [[758, "native-array"]], "Ivy Array": [[758, "ivy-array"], [783, "ivy-array"]], "Array Handling": [[758, "array-handling"]], "Integrating custom classes with Ivy": [[758, "integrating-custom-classes-with-ivy"]], "Data Types": [[763, "data-types"]], "Data Type Module": [[763, "data-type-module"]], "Data Type Promotion": [[763, "data-type-promotion"]], "Precise Mode": [[763, "precise-mode"]], "Precise Promotion Table": [[763, "precise-promotion-table"]], "Non-Precise Promotion Table": [[763, "non-precise-promotion-table"]], "Arguments in other Functions": [[763, "arguments-in-other-functions"], [764, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[763, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[763, "backend-data-type-bugs"]], "Data Type Casting Modes": [[763, "data-type-casting-modes"]], "Superset Data Type Support": [[763, "superset-data-type-support"]], "Overview": [[772, "overview"]], "Example Usage of the Gradient API": [[772, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[772, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[772, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[772, "custom-gradient-functions"]], "Design of the Gradient API": [[772, "design-of-the-gradient-api"]], "Our policy on gradients": [[772, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[772, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[772, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[772, "framework-specific-considerations"]], "Docstrings": [[766, "docstrings"]], "Ivy Stateful API": [[785, "ivy-stateful-api"], [16, "Ivy-Stateful-API"], [25, "Ivy-Stateful-API"]], "Modules": [[785, "modules"]], "Initializers": [[785, "initializers"], [728, "module-ivy.stateful.initializers"]], "Optimizers": [[785, "optimizers"], [733, "module-ivy.stateful.optimizers"]], "Design": [[780, "design"]], "The Array Class": [[783, "the-array-class"]], "Unifying Operators": [[783, "unifying-operators"]], "API Monkey Patching": [[783, "api-monkey-patching"]], "Instance Methods": [[783, "instance-methods"]], "Navigating the Code": [[777, "navigating-the-code"]], "Categorization": [[777, "categorization"]], "Submodule Design": [[777, "submodule-design"]], "Ivy API": [[777, "ivy-api"]], "Backend API": [[777, "backend-api"]], "Submodule Helper Functions": [[777, "submodule-helper-functions"]], "Version Unpinning": [[777, "version-unpinning"]], "Graph Tracers": [[802, "graph-tracers"], [807, "graph-tracers"]], "tf.Graph": [[802, "tf-graph"]], "Jaxpr": [[802, "jaxpr"]], "torch.jit": [[802, "torch-jit"]], "torch.fx": [[802, "torch-fx"]], "ivy.compile()": [[795, "ivy-compile"]], "Compiler API": [[795, "compiler-api"]], "Using the compiler": [[795, "using-the-compiler"]], "Eager vs lazy Compilation": [[795, "eager-vs-lazy-compilation"]], "Array caching": [[795, "array-caching"]], "Generators": [[795, "generators"]], "Stateful": [[795, "stateful"]], "Sharp bits": [[795, "sharp-bits"], [796, "sharp-bits"]], "Examples": [[795, "examples"], [796, "examples"], [769, "examples"], [747, "examples"]], "Operating Modes": [[778, "operating-modes"]], "Global Parameter Properties": [[778, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[778, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[778, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Vendor-Specific Compilers": [[806, "vendor-specific-compilers"], [807, "vendor-specific-compilers"]], "ICC": [[806, "id1"]], "ICX": [[806, "icx"]], "NVCC": [[806, "nvcc"]], "Docstring Examples": [[765, "docstring-examples"]], "ivy.tan": [[765, "ivy-tan"]], "ivy.roll": [[765, "ivy-roll"]], "ivy.add": [[765, "ivy-add"]], "Exchange Formats": [[800, "exchange-formats"], [807, "exchange-formats"]], "ONNX onnx": [[800, "onnx-onnx"]], "NNEF nnef": [[800, "nnef-nnef"]], "CoreML coreml": [[800, "coreml-coreml"]], "Array API Tests": [[757, "array-api-tests"], [762, "array-api-tests"]], "Running the Tests": [[757, "running-the-tests"]], "Using Terminal": [[757, "using-terminal"]], "Using the IDE": [[757, "using-the-ide"]], "Regenerating Test Failures": [[757, "regenerating-test-failures"]], "Test Skipping": [[757, "test-skipping"]], "Ivy as a Transpiler": [[786, "ivy-as-a-transpiler"], [26, "Ivy-as-a-Transpiler"], [25, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[786, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[786, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[786, "converting-network-models"]], "Ivy Frontend Tests": [[775, "ivy-frontend-tests"]], "Introduction": [[775, "introduction"], [774, "introduction"], [749, "introduction"], [40, "Introduction"]], "Frontend Test Examples": [[775, "frontend-test-examples"]], "ivy.tan()": [[775, "ivy-tan"]], "ivy.full()": [[775, "ivy-full"]], "Testing Without Using Tests Values": [[775, "testing-without-using-tests-values"]], "Alias functions": [[775, "alias-functions"]], "Frontend Instance Method Tests": [[775, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[775, "frontend-instance-method-test-examples"]], "ivy.add()": [[775, "ivy-add"]], "Hypothesis Helpers": [[775, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[775, "frontend-framework-testing-configuration"]], "ML-Unifying Companies": [[803, "ml-unifying-companies"], [807, "ml-unifying-companies"]], "Quansight": [[803, "id1"]], "Modular": [[803, "id2"]], "OctoML": [[803, "id3"]], "Devices": [[764, "devices"]], "Device Module": [[764, "device-module"]], "Device handling": [[764, "device-handling"]], "Containers": [[761, "containers"]], "Container Instance Methods": [[761, "container-instance-methods"]], "API Instance Methods": [[761, "api-instance-methods"]], "API Special Methods": [[761, "api-special-methods"]], "Nestable Functions": [[761, "nestable-functions"], [769, "nestable-functions"], [770, "nestable-functions"]], "Get Started": [[788, "get-started"]], "Installing using pip": [[788, "installing-using-pip"], [747, "installing-using-pip"]], "Docker": [[788, "docker"], [747, "docker"]], "Installing from source": [[788, "installing-from-source"], [747, "installing-from-source"]], "Ivy\u2019s compiler and transpiler": [[788, "ivy-s-compiler-and-transpiler"]], "Ivy Folder": [[788, "ivy-folder"]], "Setting Up the API key": [[788, "setting-up-the-api-key"]], "Issues and Questions": [[788, "issues-and-questions"]], "Continuous Integration": [[762, "continuous-integration"], [768, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[762, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[762, "ivy-tests"], [776, "ivy-tests"]], "Implementation": [[762, "implementation"]], "A Top-Down View": [[762, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[762, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[762, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[762, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[762, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[762, "determine-test-coverage-workflow"]], "Multiple Runners": [[762, "multiple-runners"]], "Race Condition": [[762, "race-condition"]], "Periodic Testing": [[762, "periodic-testing"]], "Manually Dispatched Workflows": [[762, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[762, "ci-pipeline"]], "Push": [[762, "push"]], "Pull Request": [[762, "pull-request"]], "Dashboard": [[762, "dashboard"]], "Frameworks": [[801, "frameworks"], [807, "frameworks"]], "MATLAB matlab": [[801, "matlab-matlab"]], "SciPy scipy": [[801, "scipy-scipy"]], "Torch torch": [[801, "torch-torch"]], "NumPy numpy": [[801, "numpy-numpy"]], "SciKit Learn scikit-learn": [[801, "scikit-learn-scikit-learn"]], "Theano theano": [[801, "theano-theano"]], "Pandas pandas": [[801, "pandas-pandas"]], "Julia julia": [[801, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[801, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[801, "caffe-caffe"]], "Chainer chainer": [[801, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[801, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[801, "mxnet-mxnet"]], "CNTK cntk": [[801, "cntk-cntk"]], "PyTorch pytorch": [[801, "pytorch-pytorch"]], "Flux flux": [[801, "flux-flux"]], "JAX jax": [[801, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[801, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[801, "dex-language-dex-language"]], "Multi-Vendor Compiler Frameworks": [[804, "multi-vendor-compiler-frameworks"], [807, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[804, "apache-tvm"]], "XLA": [[804, "xla"]], "GCC": [[804, "gcc"]], "Ivy Container": [[784, "ivy-container"]], "Construction": [[784, "construction"]], "Representation": [[784, "representation"]], "Recursive Methods": [[784, "recursive-methods"]], "Built-ins": [[784, "built-ins"]], "Access": [[784, "access"]], "Saving and Loading": [[784, "saving-and-loading"]], "Comparisons": [[784, "comparisons"]], "Customized Representations": [[784, "customized-representations"]], "Use Cases": [[784, "use-cases"]], "Compartmentalization": [[784, "compartmentalization"]], "Configuration": [[784, "configuration"]], "Data loading": [[784, "data-loading"]], "Network weights": [[784, "network-weights"]], "Inplace Updates": [[773, "inplace-updates"]], "out argument": [[773, "out-argument"]], "copy argument": [[773, "copy-argument"]], "Views": [[773, "views"]], "Motivation": [[790, "motivation"]], "Glossary": [[789, "glossary"]], "Ivy as a Framework": [[782, "ivy-as-a-framework"], [25, "Ivy-as-a-Framework"]], "ML Explosion": [[791, "ml-explosion"]], "FAQ": [[787, "faq"]], "Maintaining Backend Versions": [[787, "maintaining-backend-versions"]], "Dynamic Sizes": [[787, "dynamic-sizes"]], "Type and Shape Checking": [[787, "type-and-shape-checking"]], "GPU handling": [[787, "gpu-handling"]], "Model Deployment": [[787, "model-deployment"]], "Dynamic Control Flow": [[787, "dynamic-control-flow"]], "Auto-Differentiation": [[787, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[787, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[787, "support-for-functions"]], "Alternative Data Structures": [[787, "alternative-data-structures"]], "Custom Operations": [[787, "custom-operations"]], "The Pipeline": [[787, "the-pipeline"]], "State": [[787, "state"]], "Vendor-Specific APIs": [[805, "vendor-specific-apis"], [807, "vendor-specific-apis"]], "TensorRT tensorrt": [[805, "tensorrt-tensorrt"]], "CUDA cuda": [[805, "cuda-cuda"]], "Deep Dive": [[756, "deep-dive"]], "Formatting": [[768, "formatting"]], "Lint Checks": [[768, "lint-checks"], [768, "id2"]], "Setup Formatting Locally": [[768, "setup-formatting-locally"]], "Pre-commit": [[768, "pre-commit"]], "VS Code": [[768, "vs-code"]], "PyCharm": [[768, "pycharm"], [754, "pycharm"]], "Common Issues with Pre-Commit": [[768, "common-issues-with-pre-commit"]], "Lint Formatting": [[768, "lint-formatting"]], "Standardization": [[792, "standardization"]], "Skepticism": [[792, "skepticism"]], "Complimentary vs Competitive": [[792, "complimentary-vs-competitive"]], "Do Standards Work?": [[792, "do-standards-work"]], "The Array API Standard": [[792, "the-array-api-standard"]], "Superset Behaviour": [[779, "superset-behaviour"]], "Extending the Standard": [[779, "extending-the-standard"]], "What is the Superset?": [[779, "what-is-the-superset"]], "A Non-Duplicate Superset": [[779, "a-non-duplicate-superset"]], "What is not the Superset?": [[779, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[779, "balancing-generalization-with-efficiency"]], "More Examples": [[779, "more-examples"]], "Maximizing Usage of Native Functionality": [[779, "maximizing-usage-of-native-functionality"]], "One liners": [[794, "one-liners"]], "Backend Setting": [[759, "backend-setting"]], "Dynamic Backend Setting": [[759, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[759, "backend-and-frontend-version-support"]], "Wrapper Frameworks": [[808, "wrapper-frameworks"], [807, "wrapper-frameworks"]], "EagerPy eagerpy": [[808, "eagerpy-eagerpy"]], "Keras keras": [[808, "keras-keras"]], "Thinc thinc": [[808, "thinc-thinc"]], "TensorLy tensorly": [[808, "tensorly-tensorly"]], "NeuroPod": [[808, "id1"]], "Building the Docs Pipeline": [[760, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[760, "how-the-doc-builder-is-being-run"]], "The convenience script": [[760, "the-convenience-script"]], "Options": [[760, "options"]], "The Docker image": [[760, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[760, "how-ivy-s-docs-is-structured"]], "index.rst": [[760, "index-rst"]], "partial_conf.py": [[760, "partial-conf-py"]], "prebuild.sh": [[760, "prebuild-sh"]], "Custom Extensions": [[760, "custom-extensions"]], "custom_autosummary": [[760, "custom-autosummary"]], ":hide-table:": [[760, "hide-table"]], "discussion_linker": [[760, "discussion-linker"]], "skippable_function": [[760, "skippable-function"]], "ivy_data": [[760, "ivy-data"]], "Why Unify?": [[793, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[793, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[793, "infinite-shelf-life"]], "Function Wrapping": [[771, "function-wrapping"]], "Decorator order": [[771, "decorator-order"]], "Conversion Wrappers": [[771, "conversion-wrappers"]], "Inference Wrappers": [[771, "inference-wrappers"]], "Out Argument Support": [[771, "out-argument-support"]], "Nestable Support": [[771, "nestable-support"]], "Partial Mixed Function Support": [[771, "partial-mixed-function-support"]], "Shape Conversion": [[771, "shape-conversion"]], "View Handling": [[771, "view-handling"]], "Exception Handling": [[771, "exception-handling"], [767, "exception-handling"]], "Miscellaneous Wrappers": [[771, "miscellaneous-wrappers"]], "Ivy Exception Class": [[767, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[767, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[767, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[767, "handle-exceptions-decorator"]], "Consistency in Errors": [[767, "consistency-in-errors"]], "Assertion Function": [[767, "assertion-function"]], "ivy.transpile / ivy.unify": [[796, "ivy-transpile-ivy-unify"]], "Transpiler API": [[796, "transpiler-api"]], "Using the transpiler": [[796, "using-the-transpiler"]], "Transpiling functions": [[796, "transpiling-functions"]], "Transpiling Libraries": [[796, "transpiling-libraries"]], "Transpiling Modules": [[796, "transpiling-modules"]], "Ivy.unify": [[796, "ivy-unify"]], "Function Arguments": [[769, "function-arguments"]], "Positional and Keyword Arguments": [[769, "positional-and-keyword-arguments"]], "Input Arrays": [[769, "input-arrays"]], "out Argument": [[769, "out-argument"]], "dtype and device arguments": [[769, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[769, "numbers-in-operator-functions"]], "Integer Sequences": [[769, "integer-sequences"]], "Function Types": [[770, "function-types"]], "Primary Functions": [[770, "primary-functions"]], "Compositional Functions": [[770, "compositional-functions"]], "Mixed Functions": [[770, "mixed-functions"]], "Partial Mixed Functions": [[770, "partial-mixed-functions"]], "Standalone Functions": [[770, "standalone-functions"]], "Convenience Functions": [[770, "convenience-functions"]], "Related Work": [[797, "related-work"]], "Ivy Frontends": [[774, "ivy-frontends"]], "The Frontend Basics": [[774, "the-frontend-basics"]], "Writing Frontend Functions": [[774, "writing-frontend-functions"]], "Short Frontend Implementations": [[774, "short-frontend-implementations"]], "Unused Arguments": [[774, "unused-arguments"]], "Supported Data Types and Devices": [[774, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[774, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[774, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[774, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[774, "frontends-duplicate-policy"]], "Compiler Infrastructure": [[799, "compiler-infrastructure"], [807, "compiler-infrastructure"]], "LLVM": [[799, "id1"]], "MLIR": [[799, "id2"]], "OneAPI": [[799, "id3"]], "Testing Pipeline": [[776, "testing-pipeline"]], "Hypothesis": [[776, "id1"]], "Data Generation": [[776, "id2"]], "Writing your own strategy": [[776, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[776, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[776, "ivy-test-decorators"]], "Writing Ivy Tests": [[776, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[776, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[776, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[776, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[776, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[776, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[776, "self-consistent-and-explicit-testing"]], "test_array_function": [[776, "id4"]], "Running Ivy Tests": [[776, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[776, "re-running-failed-ivy-tests"]], "API Standards": [[798, "api-standards"], [807, "api-standards"]], "Array API Standard": [[798, "id1"]], "What does Ivy Add?": [[807, "what-does-ivy-add"]], "Sequential": [[734, "module-ivy.stateful.sequential"]], "shuffle": [[695, "shuffle"]], "unique_inverse": [[703, "unique-inverse"]], "Data-dependent output shape": [[703, null], [702, null], [701, null], [704, null], [599, null], [599, null], [599, null], [599, null]], "var": [[718, "var"]], "sort": [[708, "sort"]], "cumsum": [[710, "cumsum"]], "argmax": [[696, "argmax"]], "Dynamic import": [[740, "module-ivy.utils.dynamic_import"]], "Error Handling": [[751, "error-handling"]], "mean": [[713, "mean"]], "Logging": [[744, "module-ivy.utils.logging"]], "Framework classes": [[723, "framework-classes"]], "Backend": [[736, "backend"]], "seed": [[694, "seed"]], "argmin": [[697, "argmin"]], "unique_counts": [[702, "unique-counts"]], "Contributing": [[748, "contributing"], [747, "contributing"]], "sum": [[717, "sum"]], "The Basics": [[755, "the-basics"]], "Getting Help": [[755, "getting-help"]], "ToDo List Issues": [[755, "todo-list-issues"]], "Managing Your Fork": [[755, "managing-your-fork"]], "Who To Ask": [[755, "who-to-ask"]], "With Command Line:": [[755, "with-command-line"]], "With Browser:": [[755, "with-browser"]], "Pull Requests": [[755, "pull-requests"]], "Small Commits Often": [[755, "small-commits-often"]], "Interactive Ivy Docker Container": [[755, "interactive-ivy-docker-container"]], "Running Tests Locally": [[755, "running-tests-locally"]], "With Docker": [[755, "with-docker"]], "Getting the most out of IDE": [[755, "getting-the-most-out-of-ide"]], "with PyCharm": [[755, "with-pycharm"]], "Setting Up": [[754, "setting-up"]], "Forking and cloning the repo": [[754, "forking-and-cloning-the-repo"]], "Pre-Commit": [[754, "pre-commit"]], "Virtual environments - No Docker": [[754, "virtual-environments-no-docker"]], "Using miniconda": [[754, "using-miniconda"]], "Using venv": [[754, "using-venv"]], "Docker Interpreter with PyCharm": [[754, "docker-interpreter-with-pycharm"]], "Windows": [[754, "windows"], [754, "id6"]], "MacOS": [[754, "macos"]], "Ubuntu": [[754, "ubuntu"], [754, "id8"]], "Setting Up Testing in PyCharm": [[754, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[754, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[754, "setting-up-for-free"]], "WSL": [[754, "wsl"]], "GitHub Codespaces": [[754, "github-codespaces"]], "unique_all": [[701, "unique-all"]], "where": [[700, "where"]], "unique_values": [[704, "unique-values"]], "msort": [[706, "msort"]], "Helpers": [[727, "module-ivy.stateful.helpers"]], "save": [[722, "save"]], "max": [[712, "max"]], "Module": [[731, "module-ivy.stateful.module"]], "Verbosity": [[746, "module-ivy.utils.verbosity"]], "Helpful Resources": [[752, "helpful-resources"]], "Handler": [[738, "module-ivy.utils.backend.handler"]], "Profiler": [[745, "module-ivy.utils.profiler"]], "einsum": [[711, "einsum"]], "Einsum parser": [[741, "module-ivy.utils.einsum_parser"]], "Status": [[747, "status"]], "Unified AI": [[747, "unified-ai"]], "Ivy as a transpiler": [[747, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[747, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[747, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[747, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[747, "setting-up-ivy"]], "Using Ivy": [[747, "using-ivy"]], "Multi-backend Support": [[747, "multi-backend-support"]], "Transpilation API": [[747, "transpilation-api"]], "Documentation": [[747, "documentation"]], "Community": [[747, "community"]], "Citation": [[747, "citation"]], "Building the Docs": [[750, "building-the-docs"]], "Building the Docs using Docker": [[750, "building-the-docs-using-docker"]], "Using convenience script": [[750, "using-convenience-script"]], "Using existing image on Docker Hub": [[750, "using-existing-image-on-docker-hub"]], "Building the image locally": [[750, "building-the-image-locally"]], "Building the Docs without Docker": [[750, "building-the-docs-without-docker"]], "prod": [[715, "prod"]], "Assertions": [[735, "module-ivy.utils.assertions"]], "argsort": [[705, "argsort"]], "Applied Libraries": [[749, "applied-libraries"]], "Example - Ivy Robot": [[749, "example-ivy-robot"]], "Ast helpers": [[737, "module-ivy.utils.backend.ast_helpers"]], "min": [[714, "min"]], "Utils": [[724, "utils"]], "Exceptions": [[742, "module-ivy.utils.exceptions"]], "cumprod": [[709, "cumprod"]], "Converters": [[726, "module-ivy.stateful.converters"]], "load": [[721, "load"]], "std": [[716, "std"]], "nonzero": [[699, "nonzero"]], "random_uniform": [[693, "random-uniform"]], "all": [[719, "all"]], "any": [[720, "any"]], "argwhere": [[698, "argwhere"]], "Sub backend handler": [[739, "module-ivy.utils.backend.sub_backend_handler"]], "Open Tasks": [[753, "open-tasks"]], "Function Formatting": [[753, "function-formatting"]], "Formatting checklist": [[753, "formatting-checklist"]], "Frontend APIs": [[753, "frontend-apis"]], "Where to place a frontend function": [[753, "where-to-place-a-frontend-function"]], "Frontend checklist": [[753, "frontend-checklist"]], "Ivy Experimental API": [[753, "ivy-experimental-api"]], "Extending the Ivy API": [[753, "extending-the-ivy-api"]], "Where to place a backend function": [[753, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[753, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Inspection": [[743, "module-ivy.utils.inspection"]], "searchsorted": [[707, "searchsorted"]], "trace": [[643, "trace"]], "reshape": [[658, "reshape"]], "nested_map": [[682, "nested-map"]], "solve": [[638, "solve"]], "vector_norm": [[646, "vector-norm"]], "tile": [[664, "tile"]], "unstack": [[665, "unstack"]], "zero_pad": [[666, "zero-pad"]], "insert_into_nest_at_indices": [[675, "insert-into-nest-at-indices"]], "nested_argwhere": [[681, "nested-argwhere"]], "prune_nest_at_indices": [[686, "prune-nest-at-indices"]], "reptile_step": [[669, "reptile-step"]], "svdvals": [[640, "svdvals"]], "concat": [[652, "concat"]], "repeat": [[657, "repeat"]], "duplicate_array_index_chains": [[672, "duplicate-array-index-chains"]], "prune_nest_at_index": [[685, "prune-nest-at-index"]], "matrix_power": [[631, "matrix-power"]], "vander": [[644, "vander"]], "split": [[660, "split"]], "binary_cross_entropy": [[648, "binary-cross-entropy"]], "set_nest_at_index": [[687, "set-nest-at-index"]], "sparse_cross_entropy": [[650, "sparse-cross-entropy"]], "map_nest_at_index": [[677, "map-nest-at-index"]], "pinv": [[635, "pinv"]], "map_nest_at_indices": [[678, "map-nest-at-indices"]], "maml_step": [[668, "maml-step"]], "outer": [[634, "outer"]], "all_nested_indices": [[670, "all-nested-indices"]], "matrix_norm": [[630, "matrix-norm"]], "multi_index_nest": [[679, "multi-index-nest"]], "cross_entropy": [[649, "cross-entropy"]], "copy_nest": [[671, "copy-nest"]], "stack": [[662, "stack"]], "fomaml_step": [[667, "fomaml-step"]], "nested_multi_map": [[683, "nested-multi-map"]], "set_nest_at_indices": [[688, "set-nest-at-indices"]], "expand_dims": [[654, "expand-dims"]], "svd": [[639, "svd"]], "swapaxes": [[663, "swapaxes"]], "index_nest": [[673, "index-nest"]], "vecdot": [[645, "vecdot"]], "flip": [[655, "flip"]], "roll": [[659, "roll"]], "matrix_transpose": [[633, "matrix-transpose"]], "nested_any": [[680, "nested-any"]], "randint": [[691, "randint"]], "random_normal": [[692, "random-normal"]], "constant_pad": [[653, "constant-pad"]], "squeeze": [[661, "squeeze"]], "tensordot": [[641, "tensordot"]], "map": [[676, "map"]], "vector_to_skew_symmetric_matrix": [[647, "vector-to-skew-symmetric-matrix"]], "matrix_rank": [[632, "matrix-rank"]], "layer_norm": [[689, "layer-norm"]], "slogdet": [[637, "slogdet"]], "tensorsolve": [[642, "tensorsolve"]], "qr": [[636, "qr"]], "clip": [[651, "clip"]], "prune_empty": [[684, "prune-empty"]], "multinomial": [[690, "multinomial"]], "permute_dims": [[656, "permute-dims"]], "insert_into_nest_at_index": [[674, "insert-into-nest-at-index"]], "Transpiling a PyTorch model to build on top": [[10, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Round Up": [[10, "Round-Up"], [22, "Round-Up"], [19, "Round-Up"], [16, "Round-Up"], [18, "Round-Up"], [31, "Round-Up"], [17, "Round-Up"], [29, "Round-Up"], [26, "Round-Up"], [39, "Round-Up"], [12, "Round-Up"], [27, "Round-Up"], [20, "Round-Up"], [32, "Round-Up"], [21, "Round-Up"], [30, "Round-Up"], [28, "Round-Up"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Data Preparation": [[4, "Data-Preparation"], [3, "Data-Preparation"], [5, "Data-Preparation"], [7, "Data-Preparation"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "Tutorials And Examples": [[14, "tutorials-and-examples"]], "Learn the basics": [[14, "learn-the-basics"], [15, "learn-the-basics"]], "Guides": [[14, "guides"], [9, "guides"]], "Examples and Demos": [[14, "examples-and-demos"], [2, "examples-and-demos"]], "Write a model using Ivy": [[24, "Write-a-model-using-Ivy"]], "Transpile any library": [[22, "Transpile-any-library"]], "Transpile code": [[19, "Transpile-code"]], "Developing a convolutional network using Ivy": [[13, "Developing-a-convolutional-network-using-Ivy"]], "Accelerating MMPreTrain models with JAX": [[6, "Accelerating-MMPreTrain-models-with-JAX"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Installation": [[3, "Installation"], [7, "Installation"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Write Ivy code": [[16, "Write-Ivy-code"]], "Contents": [[16, "Contents"]], "Installing Ivy": [[16, "Installing-Ivy"]], "Importing Ivy": [[16, "Importing-Ivy"]], "Ivy Backend Handler": [[16, "Ivy-Backend-Handler"], [25, "Ivy-Backend-Handler"]], "Data Structures": [[16, "Data-Structures"], [25, "Data-Structures"]], "Ivy Functional API": [[16, "Ivy-Functional-API"], [25, "Ivy-Functional-API"]], "Ivy as a Transpiler Introduction": [[43, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[43, "To-use-the-transpiler:"]], "Transpiler Interface": [[43, "Transpiler-Interface"]], "Telemetry": [[43, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[43, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[43, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[43, "3.-Transpile-Models-\ud83c\udf10"]], "Compile code": [[18, "Compile-code"]], "1.1: Framework Selection": [[31, "1.1:-Framework-Selection"]], "Unify": [[31, "Unify"], [20, "Unify"], [32, "Unify"], [21, "Unify"], [30, "Unify"]], "Compile": [[31, "Compile"], [20, "Compile"], [32, "Compile"], [21, "Compile"], [30, "Compile"]], "Transpile": [[31, "Transpile"], [20, "Transpile"], [32, "Transpile"], [21, "Transpile"], [30, "Transpile"]], "3.1: Stable Diffusion": [[36, "3.1:-Stable-Diffusion"]], "Unify code": [[17, "Unify-code"]], "Basic Operations with Ivy": [[37, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[37, "Installs-\ud83d\udcbe"], [38, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[37, "Imports-\ud83d\udec3"], [38, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[37, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[37, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[37, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[37, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[37, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[37, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[37, "Set-Backend-Framework"]], "Define Model": [[37, "Define-Model"], [38, "Define-Model"]], "Create Model": [[37, "Create-Model"]], "Create Optimizer": [[37, "Create-Optimizer"]], "Input and Target": [[37, "Input-and-Target"]], "Loss Function": [[37, "Loss-Function"]], "Training Loop": [[37, "Training-Loop"]], "0.2: Transpile": [[29, "0.2:-Transpile"]], "1.3: Dynamic vs Static": [[33, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[33, "Dynamic"]], "Static": [[33, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[33, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "2.0: Kornia": [[34, "2.0:-Kornia"]], "Deepmind PerceiverIO on GPU": [[40, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[40, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[40, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[40, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[40, "Run-the-demo..."]], "\u2026with torch backend": [[40, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[40, "....with-tensorflow-backend"]], "\u2026with jax backend": [[40, "...with-jax-backend"]], "\u2026with numpy backend": [[40, "...with-numpy-backend"]], "Quickstart": [[26, "Quickstart"]], "Get familiar with Ivy": [[26, "Get-familiar-with-Ivy"]], "Functional API": [[26, "Functional-API"]], "Stateful API": [[26, "Stateful-API"]], "Compiling code": [[26, "Compiling-code"]], "Any function": [[26, "Any-function"], [25, "Any-function"]], "Any library": [[26, "Any-library"], [25, "Any-library"]], "Any model": [[26, "Any-model"], [25, "Any-model"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[39, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[39, "Table-of-Contents"]], "Defining the model": [[39, "Defining-the-model"]], "Model construction": [[39, "Model-construction"]], "Some helper functions": [[39, "Some-helper-functions"]], "Transpiling the model": [[39, "Transpiling-the-model"]], "PyTorch pipeline": [[39, "PyTorch-pipeline"]], "Dataset download": [[39, "Dataset-download"]], "DataLoader": [[39, "DataLoader"]], "Training": [[39, "Training"]], "Testing": [[39, "Testing"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "Transpile any model": [[23, "Transpile-any-model"]], "Round up": [[23, "Round-up"]], "ODSC Ivy Demo": [[25, "ODSC-Ivy-Demo"]], "Graph Compiler": [[25, "Graph-Compiler"]], "Transpiling a Tensorflow model to build on top": [[12, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "0.0: Unify": [[27, "0.0:-Unify"]], "Lazy vs Eager": [[20, "Lazy-vs-Eager"]], "3.0: Perceiver": [[35, "3.0:-Perceiver"]], "HuggingFace Tensorflow DeiT": [[42, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[42, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "1.2: As a Decorator": [[32, "1.2:-As-a-Decorator"]], "Compilation of a Basic Function": [[38, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[38, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[38, "Function-compilation-\ud83d\udee0"]], "Set backend": [[38, "Set-backend"]], "Sample input": [[38, "Sample-input"]], "Define function to compile": [[38, "Define-function-to-compile"]], "Compile the function": [[38, "Compile-the-function"]], "Check results": [[38, "Check-results"], [38, "id1"]], "Compiling simple neural network \ud83e\udde0": [[38, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[38, "Create-model"]], "Define input": [[38, "Define-input"]], "Compile network": [[38, "Compile-network"]], "How to use decorators": [[21, "How-to-use-decorators"]], "Accelerating PyTorch models with JAX": [[8, "Accelerating-PyTorch-models-with-JAX"]], "Resnet 18": [[44, "Resnet-18"]], "Image Segmentation with Ivy UNet": [[5, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[5, "Imports"], [7, "Imports"]], "Custom Preprocessing": [[5, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[5, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [7, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[5, "Visualise-image"], [7, "Visualise-image"]], "Model Inference": [[5, "Model-Inference"]], "Initializing Native Torch UNet": [[5, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[5, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[5, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[5, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[5, "TensorFlow-backend"]], "JAX": [[5, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[5, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "1.0: Lazy vs Eager": [[30, "1.0:-Lazy-vs-Eager"]], "Using Ivy ResNet": [[7, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[7, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[7, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[7, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[7, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [7, "id1"]], "Model Inference ResNet50": [[7, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[7, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "End-to-End Training Pipeline in Ivy": [[41, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[41, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[41, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[41, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[41, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[41, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[41, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[41, "Plotting-the-training-metrics"]], "Save the trained Model": [[41, "Save-the-trained-Model"]], "0.1: Compile": [[28, "0.1:-Compile"]], "Transpiling a haiku model to build on top": [[11, "Transpiling-a-haiku-model-to-build-on-top"]], "multiprocessing": [[528, "multiprocessing"]], "set_show_func_wrapper_trace_mode": [[543, "set-show-func-wrapper-trace-mode"]], "Parameter": [[543, "parameter"], [539, "parameter"], [540, "parameter"], [542, "parameter"], [534, "parameter"], [533, "parameter"], [585, "parameter"], [588, "parameter"], [588, "id1"], [588, "id2"], [588, "id3"], [588, "id4"], [588, "id5"], [206, "parameter"]], "set_min_base": [[537, "set-min-base"]], "unset_precise_mode": [[562, "unset-precise-mode"]], "set_nestable_mode": [[539, "set-nestable-mode"]], "unset_array_mode": [[556, "unset-array-mode"]], "unset_show_func_wrapper_trace_mode": [[565, "unset-show-func-wrapper-trace-mode"]], "inplace_update": [[517, "inplace-update"]], "isscalar": [[525, "isscalar"]], "isin": [[524, "isin"]], "try_else_none": [[555, "try-else-none"]], "print_all_arrays_in_memory": [[530, "print-all-arrays-in-memory"]], "strides": [[548, "strides"]], "gather_nd": [[508, "gather-nd"]], "to_numpy": [[553, "to-numpy"]], "unset_exception_trace_mode": [[557, "unset-exception-trace-mode"]], "scatter_flat": [[531, "scatter-flat"]], "is_native_array": [[523, "is-native-array"]], "function_unsupported_devices_and_dtypes": [[506, "function-unsupported-devices-and-dtypes"]], "get_item": [[510, "get-item"]], "to_native_shape": [[552, "to-native-shape"]], "get_num_dims": [[511, "get-num-dims"]], "match_kwargs": [[527, "match-kwargs"]], "unset_queue_timeout": [[563, "unset-queue-timeout"]], "inplace_decrement": [[515, "inplace-decrement"]], "unset_shape_array_mode": [[564, "unset-shape-array-mode"]], "set_tmp_dir": [[544, "set-tmp-dir"]], "unset_tmp_dir": [[566, "unset-tmp-dir"]], "gather": [[507, "gather"]], "function_supported_devices_and_dtypes": [[505, "function-supported-devices-and-dtypes"]], "num_arrays_in_memory": [[529, "num-arrays-in-memory"]], "set_precise_mode": [[540, "set-precise-mode"]], "set_shape_array_mode": [[542, "set-shape-array-mode"]], "inplace_arrays_supported": [[514, "inplace-arrays-supported"]], "set_item": [[536, "set-item"]], "unset_inplace_mode": [[558, "unset-inplace-mode"]], "set_min_denominator": [[538, "set-min-denominator"]], "has_nans": [[513, "has-nans"]], "set_inplace_mode": [[535, "set-inplace-mode"]], "set_queue_timeout": [[541, "set-queue-timeout"]], "is_ivy_nested_array": [[522, "is-ivy-nested-array"]], "shape": [[545, "shape"]], "get_all_arrays_in_memory": [[509, "get-all-arrays-in-memory"]], "stable_divide": [[546, "stable-divide"]], "fourier_encode": [[504, "fourier-encode"]], "itemsize": [[526, "itemsize"]], "scatter_nd": [[532, "scatter-nd"]], "set_exception_trace_mode": [[534, "set-exception-trace-mode"]], "get_referrers_recursive": [[512, "get-referrers-recursive"]], "unset_min_base": [[559, "unset-min-base"]], "set_array_mode": [[533, "set-array-mode"]], "to_scalar": [[554, "to-scalar"]], "inplace_variables_supported": [[518, "inplace-variables-supported"]], "is_ivy_container": [[521, "is-ivy-container"]], "supports_inplace_updates": [[549, "supports-inplace-updates"]], "to_list": [[551, "to-list"]], "to_ivy_shape": [[550, "to-ivy-shape"]], "unset_nestable_mode": [[561, "unset-nestable-mode"]], "stable_pow": [[547, "stable-pow"]], "unset_min_denominator": [[560, "unset-min-denominator"]], "is_ivy_array": [[520, "is-ivy-array"]], "inplace_increment": [[516, "inplace-increment"]], "is_array": [[519, "is-array"]], "matricize": [[442, "matricize"]], "partial_vec_to_tensor": [[448, "partial-vec-to-tensor"]], "put_along_axis": [[449, "put-along-axis"]], "instance_norm": [[460, "instance-norm"]], "native_sparse_array": [[474, "native-sparse-array"]], "cummin": [[480, "cummin"]], "nanprod": [[486, "nanprod"]], "assert_supports_inplace": [[493, "assert-supports-inplace"]], "current_backend_str": [[498, "current-backend-str"]], "partial_fold": [[445, "partial-fold"]], "bincount": [[476, "bincount"]], "all_equal": [[489, "all-equal"]], "native_sparse_array_to_indices_values_and_shape": [[475, "native-sparse-array-to-indices-values-and-shape"]], "batch_norm": [[458, "batch-norm"]], "is_native_sparse_array": [[473, "is-native-sparse-array"]], "rot90": [[450, "rot90"]], "group_norm": [[459, "group-norm"]], "nanmean": [[484, "nanmean"]], "soft_thresholding": [[451, "soft-thresholding"]], "unique_consecutive": [[455, "unique-consecutive"]], "l2_normalize": [[462, "l2-normalize"]], "dirichlet": [[466, "dirichlet"]], "l1_normalize": [[461, "l1-normalize"]], "arg_info": [[490, "arg-info"]], "nanmedian": [[485, "nanmedian"]], "vstack": [[457, "vstack"]], "corrcoef": [[477, "corrcoef"]], "unfold": [[454, "unfold"]], "cov": [[478, "cov"]], "einops_rearrange": [[500, "einops-rearrange"]], "arg_names": [[491, "arg-names"]], "lp_normalize": [[463, "lp-normalize"]], "array_equal": [[492, "array-equal"]], "container_types": [[497, "container-types"]], "einops_reduce": [[501, "einops-reduce"]], "i0": [[441, "i0"]], "take_along_axis": [[452, "take-along-axis"]], "partial_tensor_to_vec": [[446, "partial-tensor-to-vec"]], "quantile": [[487, "quantile"]], "invert_permutation": [[470, "invert-permutation"]], "exists": [[503, "exists"]], "poisson": [[468, "poisson"]], "optional_get_element": [[488, "optional-get-element"]], "einops_repeat": [[502, "einops-repeat"]], "partial_unfold": [[447, "partial-unfold"]], "is_ivy_sparse_array": [[472, "is-ivy-sparse-array"]], "cache_fn": [[494, "cache-fn"]], "clip_matrix_norm": [[495, "clip-matrix-norm"]], "lexsort": [[471, "lexsort"]], "unravel_index": [[469, "unravel-index"]], "pad": [[444, "pad"]], "clip_vector_norm": [[496, "clip-vector-norm"]], "median": [[483, "median"]], "vsplit": [[456, "vsplit"]], "gamma": [[467, "gamma"]], "cummax": [[479, "cummax"]], "moveaxis": [[443, "moveaxis"]], "histogram": [[481, "histogram"]], "bernoulli": [[464, "bernoulli"]], "top_k": [[453, "top-k"]], "default": [[499, "default"]], "igamma": [[482, "igamma"]], "beta": [[465, "beta"]], "make_svd_non_negative": [[408, "make-svd-non-negative"]], "khatri_rao": [[405, "khatri-rao"]], "interp": [[386, "interp"]], "matrix_exp": [[409, "matrix-exp"]], "hstack": [[440, "hstack"]], "get_interpolate_kernel": [[382, "get-interpolate-kernel"]], "diagflat": [[398, "diagflat"]], "fold": [[437, "fold"]], "multi_dot": [[411, "multi-dot"]], "atleast_1d": [[424, "atleast-1d"]], "fft2": [[380, "fft2"]], "kronecker": [[407, "kronecker"]], "truncated_svd": [[415, "truncated-svd"]], "hsplit": [[439, "hsplit"]], "rfftn": [[395, "rfftn"]], "tucker": [[416, "tucker"]], "nearest_interpolate": [[392, "nearest-interpolate"]], "max_pool3d": [[390, "max-pool3d"]], "eigh_tridiagonal": [[401, "eigh-tridiagonal"]], "dstack": [[431, "dstack"]], "pool": [[393, "pool"]], "ifft": [[384, "ifft"]], "idct": [[383, "idct"]], "log_poisson_loss": [[419, "log-poisson-loss"]], "concat_from_sequence": [[429, "concat-from-sequence"]], "max_pool1d": [[388, "max-pool1d"]], "dsplit": [[430, "dsplit"]], "general_inner_product": [[403, "general-inner-product"]], "initialize_tucker": [[404, "initialize-tucker"]], "eig": [[400, "eig"], [623, "eig"]], "atleast_3d": [[426, "atleast-3d"]], "atleast_2d": [[425, "atleast-2d"]], "fliplr": [[435, "fliplr"]], "eigvals": [[402, "eigvals"]], "huber_loss": [[417, "huber-loss"]], "max_pool2d": [[389, "max-pool2d"]], "embedding": [[378, "embedding"]], "l1_loss": [[418, "l1-loss"]], "smooth_l1_loss": [[420, "smooth-l1-loss"]], "soft_margin_loss": [[421, "soft-margin-loss"]], "as_strided": [[422, "as-strided"]], "heaviside": [[438, "heaviside"]], "svd_flip": [[414, "svd-flip"]], "dot": [[399, "dot"]], "choose": [[428, "choose"]], "partial_tucker": [[413, "partial-tucker"]], "fill_diagonal": [[433, "fill-diagonal"]], "flipud": [[436, "flipud"]], "kron": [[406, "kron"]], "interpolate": [[387, "interpolate"]], "flatten": [[434, "flatten"]], "broadcast_shapes": [[427, "broadcast-shapes"]], "reduce_window": [[394, "reduce-window"]], "fft": [[379, "fft"]], "max_unpool1d": [[391, "max-unpool1d"]], "associative_scan": [[423, "associative-scan"]], "expand": [[432, "expand"]], "multi_mode_dot": [[412, "multi-mode-dot"]], "cond": [[397, "cond"]], "ifftn": [[385, "ifftn"]], "adjoint": [[396, "adjoint"]], "generate_einsum_equation": [[381, "generate-einsum-equation"]], "mode_dot": [[410, "mode-dot"]], "conv_general_dilated": [[610, "conv-general-dilated"]], "jac": [[574, "jac"]], "conv1d": [[604, "conv1d"]], "value_is_nan": [[567, "value-is-nan"]], "stop_gradient": [[578, "stop-gradient"]], "multi_head_attention": [[616, "multi-head-attention"]], "Control flow ops": [[582, "control-flow-ops"]], "diag": [[621, "diag"]], "eigh": [[624, "eigh"]], "conv3d": [[608, "conv3d"]], "cross": [[619, "cross"]], "conv": [[603, "conv"]], "conv_general_transpose": [[611, "conv-general-transpose"]], "adam_step": [[569, "adam-step"]], "cholesky": [[618, "cholesky"]], "diagonal": [[622, "diagonal"]], "value_and_grad": [[579, "value-and-grad"]], "conv1d_transpose": [[605, "conv1d-transpose"]], "conv3d_transpose": [[609, "conv3d-transpose"]], "Meta": [[594, "meta"], [356, "module-ivy.functional.ivy.experimental.meta"]], "depthwise_conv2d": [[612, "depthwise-conv2d"]], "Note": [[583, null], [130, null]], "gradient_descent_update": [[573, "gradient-descent-update"]], "Nest": [[595, "nest"], [357, "module-ivy.functional.ivy.experimental.nest"]], "lamb_update": [[575, "lamb-update"]], "lars_update": [[576, "lars-update"]], "conv2d": [[606, "conv2d"]], "lstm_update": [[615, "lstm-update"]], "inv": [[627, "inv"]], "dropout": [[613, "dropout"]], "lu_factor": [[628, "lu-factor"]], "execute_with_gradients": [[571, "execute-with-gradients"]], "eigvalsh": [[625, "eigvalsh"]], "grad": [[572, "grad"]], "linear": [[614, "linear"]], "adam_update": [[570, "adam-update"]], "det": [[620, "det"]], "matmul": [[629, "matmul"]], "optimizer_update": [[577, "optimizer-update"]], "scaled_dot_product_attention": [[617, "scaled-dot-product-attention"]], "inner": [[626, "inner"]], "conv2d_transpose": [[607, "conv2d-transpose"]], "Constants": [[581, "module-ivy.functional.ivy.constants"], [345, "module-ivy.functional.ivy.experimental.constants"]], "vmap": [[568, "vmap"]], "kaiser_window": [[306, "kaiser-window"]], "relu6": [[295, "relu6"]], "unsorted_segment_min": [[314, "unsorted-segment-min"]], "sin": [[281, "sin"]], "square": [[284, "square"]], "random_cp": [[310, "random-cp"]], "elu": [[291, "elu"]], "random_tucker": [[311, "random-tucker"]], "trunc": [[289, "trunc"]], "isreal": [[253, "isreal"]], "less_equal": [[256, "less-equal"]], "trapz": [[288, "trapz"]], "round": [[279, "round"]], "sign": [[280, "sign"]], "not_equal": [[272, "not-equal"]], "positive": [[273, "positive"]], "logical_xor": [[266, "logical-xor"]], "blackman_window": [[300, "blackman-window"]], "logical_not": [[264, "logical-not"]], "thresholded_relu": [[299, "thresholded-relu"]], "trilu": [[313, "trilu"]], "pow": [[274, "pow"]], "maximum": [[267, "maximum"]], "sinh": [[282, "sinh"]], "prelu": [[294, "prelu"]], "mel_weight_matrix": [[307, "mel-weight-matrix"]], "lcm": [[254, "lcm"]], "less": [[255, "less"]], "sqrt": [[283, "sqrt"]], "multiply": [[269, "multiply"]], "sequence_length": [[297, "sequence-length"]], "log10": [[258, "log10"]], "nan_to_num": [[270, "nan-to-num"]], "logical_and": [[263, "logical-and"]], "logical_or": [[265, "logical-or"]], "tril_indices": [[312, "tril-indices"]], "remainder": [[278, "remainder"]], "logsigmoid": [[293, "logsigmoid"]], "logaddexp2": [[262, "logaddexp2"]], "real": [[276, "real"]], "minimum": [[268, "minimum"]], "selu": [[296, "selu"]], "ndindex": [[309, "ndindex"]], "ndenumerate": [[308, "ndenumerate"]], "logit": [[292, "logit"]], "negative": [[271, "negative"]], "silu": [[298, "silu"]], "log": [[257, "log"]], "indices": [[304, "indices"]], "eye_like": [[301, "eye-like"]], "tan": [[286, "tan"]], "log1p": [[259, "log1p"]], "log2": [[260, "log2"]], "logaddexp": [[261, "logaddexp"]], "reciprocal": [[277, "reciprocal"]], "tanh": [[287, "tanh"]], "rad2deg": [[275, "rad2deg"]], "trunc_divide": [[290, "trunc-divide"]], "kaiser_bessel_derived_window": [[305, "kaiser-bessel-derived-window"]], "hamming_window": [[302, "hamming-window"]], "isnan": [[252, "isnan"]], "subtract": [[285, "subtract"]], "hann_window": [[303, "hann-window"]], "nansum": [[335, "nansum"]], "dft": [[374, "dft"]], "gradient": [[328, "gradient"]], "float_power": [[325, "float-power"]], "copysign": [[320, "copysign"]], "count_nonzero": [[321, "count-nonzero"]], "xlogy": [[340, "xlogy"]], "fix": [[324, "fix"]], "binarizer": [[318, "binarizer"]], "conj": [[319, "conj"]], "zeta": [[341, "zeta"]], "adaptive_max_pool2d": [[368, "adaptive-max-pool2d"]], "avg_pool2d": [[371, "avg-pool2d"]], "allclose": [[317, "allclose"]], "avg_pool3d": [[372, "avg-pool3d"]], "frexp": [[327, "frexp"]], "vorbis_window": [[316, "vorbis-window"]], "Sparse array": [[363, "sparse-array"]], "adaptive_avg_pool2d": [[367, "adaptive-avg-pool2d"]], "avg_pool1d": [[370, "avg-pool1d"]], "ldexp": [[331, "ldexp"]], "modf": [[334, "modf"]], "bind_custom_gradient_function": [[343, "bind-custom-gradient-function"]], "lerp": [[332, "lerp"]], "lgamma": [[333, "lgamma"]], "hypot": [[329, "hypot"]], "nextafter": [[336, "nextafter"]], "sparsify_tensor": [[339, "sparsify-tensor"]], "dropout2d": [[376, "dropout2d"]], "dropout3d": [[377, "dropout3d"]], "isclose": [[330, "isclose"]], "dropout1d": [[375, "dropout1d"]], "sinc": [[338, "sinc"]], "adaptive_avg_pool1d": [[366, "adaptive-avg-pool1d"]], "reduce": [[342, "reduce"]], "fmax": [[326, "fmax"]], "digamma": [[323, "digamma"]], "signbit": [[337, "signbit"]], "dct": [[373, "dct"]], "area_interpolate": [[369, "area-interpolate"]], "diff": [[322, "diff"]], "unsorted_segment_sum": [[315, "unsorted-segment-sum"]], "bitwise_xor": [[231, "bitwise-xor"]], "isinf": [[251, "isinf"]], "total_mem_on_dev": [[211, "total-mem-on-dev"]], "function_unsupported_devices": [[196, "function-unsupported-devices"]], "asin": [[221, "asin"]], "print_all_ivy_arrays_on_dev": [[204, "print-all-ivy-arrays-on-dev"]], "used_mem_on_dev": [[215, "used-mem-on-dev"]], "imag": [[249, "imag"]], "acos": [[217, "acos"]], "num_cpu_cores": [[200, "num-cpu-cores"]], "gpu_is_available": [[198, "gpu-is-available"]], "set_soft_device_mode": [[206, "set-soft-device-mode"]], "asinh": [[222, "asinh"]], "atan": [[223, "atan"]], "bitwise_invert": [[227, "bitwise-invert"]], "bitwise_left_shift": [[228, "bitwise-left-shift"]], "fmod": [[245, "fmod"]], "split_func_call": [[209, "split-func-call"]], "acosh": [[218, "acosh"]], "gcd": [[246, "gcd"]], "bitwise_right_shift": [[230, "bitwise-right-shift"]], "angle": [[220, "angle"]], "to_device": [[210, "to-device"]], "split_factor": [[208, "split-factor"]], "atan2": [[224, "atan2"]], "greater_equal": [[248, "greater-equal"]], "isfinite": [[250, "isfinite"]], "num_gpus": [[201, "num-gpus"]], "cos": [[233, "cos"]], "as_native_dev": [[190, "as-native-dev"]], "as_ivy_dev": [[189, "as-ivy-dev"]], "set_split_factor": [[207, "set-split-factor"]], "fmin": [[244, "fmin"]], "exp2": [[240, "exp2"]], "expm1": [[241, "expm1"]], "get_all_ivy_arrays_on_dev": [[197, "get-all-ivy-arrays-on-dev"]], "deg2rad": [[235, "deg2rad"]], "floor": [[242, "floor"]], "bitwise_or": [[229, "bitwise-or"]], "equal": [[237, "equal"]], "unset_soft_device_mode": [[214, "unset-soft-device-mode"]], "cosh": [[234, "cosh"]], "add": [[219, "add"]], "divide": [[236, "divide"]], "floor_divide": [[243, "floor-divide"]], "bitwise_and": [[226, "bitwise-and"]], "default_device": [[192, "default-device"]], "percent_used_mem_on_dev": [[203, "percent-used-mem-on-dev"]], "greater": [[247, "greater"]], "unset_default_device": [[213, "unset-default-device"]], "atanh": [[225, "atanh"]], "abs": [[216, "abs"]], "exp": [[239, "exp"]], "erf": [[238, "erf"]], "set_default_device": [[205, "set-default-device"]], "handle_soft_device_variable": [[199, "handle-soft-device-variable"]], "clear_cached_mem_on_dev": [[191, "clear-cached-mem-on-dev"]], "num_ivy_arrays_on_dev": [[202, "num-ivy-arrays-on-dev"]], "dev_util": [[194, "dev-util"]], "dev": [[193, "dev"]], "ceil": [[232, "ceil"]], "tpu_is_available": [[212, "tpu-is-available"]], "function_supported_devices": [[195, "function-supported-devices"]], "default_int_dtype": [[157, "default-int-dtype"]], "is_uint_dtype": [[173, "is-uint-dtype"]], "is_complex_dtype": [[168, "is-complex-dtype"]], "as_native_dtype": [[147, "as-native-dtype"]], "default_dtype": [[155, "default-dtype"]], "linspace": [[134, "linspace"]], "can_cast": [[151, "can-cast"]], "promote_types_of_inputs": [[175, "promote-types-of-inputs"]], "set_default_dtype": [[178, "set-default-dtype"]], "unset_default_uint_dtype": [[187, "unset-default-uint-dtype"]], "set_default_uint_dtype": [[181, "set-default-uint-dtype"]], "astype": [[148, "astype"]], "triu": [[142, "triu"]], "full_like": [[133, "full-like"]], "default_uint_dtype": [[158, "default-uint-dtype"]], "infer_default_dtype": [[165, "infer-default-dtype"]], "is_bool_dtype": [[167, "is-bool-dtype"]], "triu_indices": [[143, "triu-indices"]], "set_default_int_dtype": [[180, "set-default-int-dtype"]], "tril": [[141, "tril"]], "default_complex_dtype": [[154, "default-complex-dtype"]], "from_dlpack": [[130, "from-dlpack"]], "broadcast_to": [[150, "broadcast-to"]], "broadcast_arrays": [[149, "broadcast-arrays"]], "finfo": [[161, "finfo"]], "full": [[132, "full"]], "set_default_float_dtype": [[179, "set-default-float-dtype"]], "frombuffer": [[131, "frombuffer"]], "is_int_dtype": [[171, "is-int-dtype"]], "set_default_complex_dtype": [[177, "set-default-complex-dtype"]], "meshgrid": [[136, "meshgrid"]], "is_hashable_dtype": [[170, "is-hashable-dtype"]], "zeros_like": [[145, "zeros-like"]], "native_array": [[137, "native-array"]], "closest_valid_dtype": [[153, "closest-valid-dtype"]], "copy_array": [[126, "copy-array"]], "unset_default_complex_dtype": [[183, "unset-default-complex-dtype"]], "logspace": [[135, "logspace"]], "unset_default_float_dtype": [[185, "unset-default-float-dtype"]], "function_unsupported_dtypes": [[163, "function-unsupported-dtypes"]], "promote_types": [[174, "promote-types"]], "unset_default_int_dtype": [[186, "unset-default-int-dtype"]], "empty": [[127, "empty"]], "valid_dtype": [[188, "valid-dtype"]], "default_float_dtype": [[156, "default-float-dtype"]], "invalid_dtype": [[166, "invalid-dtype"]], "as_ivy_dtype": [[146, "as-ivy-dtype"]], "result_type": [[176, "result-type"]], "zeros": [[144, "zeros"]], "check_float": [[152, "check-float"]], "empty_like": [[128, "empty-like"]], "ones_like": [[140, "ones-like"]], "type_promote_arrays": [[182, "type-promote-arrays"]], "iinfo": [[164, "iinfo"]], "one_hot": [[138, "one-hot"]], "is_native_dtype": [[172, "is-native-dtype"]], "dtype": [[159, "dtype"]], "is_float_dtype": [[169, "is-float-dtype"]], "ones": [[139, "ones"]], "eye": [[129, "eye"]], "unset_default_dtype": [[184, "unset-default-dtype"]], "function_supported_dtypes": [[162, "function-supported-dtypes"]], "dtype_bits": [[160, "dtype-bits"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[45, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[45, "module-ivy.data_classes.array.activations"], [46, "module-ivy.data_classes.array.conversions"], [47, "module-ivy.data_classes.array.creation"], [48, "module-ivy.data_classes.array.data_type"], [49, "module-ivy.data_classes.array.device"], [50, "module-ivy.data_classes.array.elementwise"], [51, "module-ivy.data_classes.array.experimental"], [51, "module-ivy.data_classes.array.experimental.activations"], [51, "module-ivy.data_classes.array.experimental.conversions"], [51, "module-ivy.data_classes.array.experimental.creation"], [51, "module-ivy.data_classes.array.experimental.data_type"], [51, "module-ivy.data_classes.array.experimental.device"], [51, "module-ivy.data_classes.array.experimental.elementwise"], [51, "module-ivy.data_classes.array.experimental.general"], [51, "module-ivy.data_classes.array.experimental.gradients"], [51, "module-ivy.data_classes.array.experimental.image"], [51, "module-ivy.data_classes.array.experimental.layers"], [51, "module-ivy.data_classes.array.experimental.linear_algebra"], [51, "module-ivy.data_classes.array.experimental.losses"], [51, "module-ivy.data_classes.array.experimental.manipulation"], [51, "module-ivy.data_classes.array.experimental.norms"], [51, "module-ivy.data_classes.array.experimental.random"], [51, "module-ivy.data_classes.array.experimental.searching"], [51, "module-ivy.data_classes.array.experimental.set"], [51, "module-ivy.data_classes.array.experimental.sorting"], [51, "module-ivy.data_classes.array.experimental.statistical"], [51, "module-ivy.data_classes.array.experimental.utility"], [52, "module-ivy.data_classes.array.general"], [53, "module-ivy.data_classes.array.gradients"], [54, "module-ivy.data_classes.array.image"], [55, "module-ivy.data_classes.array.layers"], [56, "module-ivy.data_classes.array.linear_algebra"], [57, "module-ivy.data_classes.array.losses"], [58, "module-ivy.data_classes.array.manipulation"], [59, "module-ivy.data_classes.array.norms"], [60, "module-ivy.data_classes.array.random"], [61, "module-ivy.data_classes.array.searching"], [62, "module-ivy.data_classes.array.set"], [63, "module-ivy.data_classes.array.sorting"], [64, "module-ivy.data_classes.array.statistical"], [65, "module-ivy.data_classes.array.utility"], [66, "module-ivy.data_classes.array.wrapping"], [67, "module-ivy.data_classes.container.activations"], [68, "module-ivy.data_classes.container.base"], [69, "module-ivy.data_classes.container.conversions"], [70, "module-ivy.data_classes.container.creation"], [71, "module-ivy.data_classes.container.data_type"], [72, "module-ivy.data_classes.container.device"], [73, "module-ivy.data_classes.container.elementwise"], [74, "module-ivy.data_classes.container.experimental"], [74, "module-ivy.data_classes.container.experimental.activations"], [74, "module-ivy.data_classes.container.experimental.conversions"], [74, "module-ivy.data_classes.container.experimental.creation"], [74, "module-ivy.data_classes.container.experimental.data_type"], [74, "module-ivy.data_classes.container.experimental.device"], [74, "module-ivy.data_classes.container.experimental.elementwise"], [74, "module-ivy.data_classes.container.experimental.general"], [74, "module-ivy.data_classes.container.experimental.gradients"], [74, "module-ivy.data_classes.container.experimental.image"], [74, "module-ivy.data_classes.container.experimental.layers"], [74, "module-ivy.data_classes.container.experimental.linear_algebra"], [74, "module-ivy.data_classes.container.experimental.losses"], [74, "module-ivy.data_classes.container.experimental.manipulation"], [74, "module-ivy.data_classes.container.experimental.norms"], [74, "module-ivy.data_classes.container.experimental.random"], [74, "module-ivy.data_classes.container.experimental.searching"], [74, "module-ivy.data_classes.container.experimental.set"], [74, "module-ivy.data_classes.container.experimental.sorting"], [74, "module-ivy.data_classes.container.experimental.statistical"], [74, "module-ivy.data_classes.container.experimental.utility"], [75, "module-ivy.data_classes.container.general"], [76, "module-ivy.data_classes.container.gradients"], [77, "module-ivy.data_classes.container.image"], [78, "module-ivy.data_classes.container.layers"], [79, "module-ivy.data_classes.container.linear_algebra"], [80, "module-ivy.data_classes.container.losses"], [81, "module-ivy.data_classes.container.manipulation"], [82, "module-ivy.data_classes.container.norms"], [83, "module-ivy.data_classes.container.random"], [84, "module-ivy.data_classes.container.searching"], [85, "module-ivy.data_classes.container.set"], [86, "module-ivy.data_classes.container.sorting"], [87, "module-ivy.data_classes.container.statistical"], [88, "module-ivy.data_classes.container.utility"], [89, "module-ivy.data_classes.container.wrapping"], [90, "module-ivy.data_classes.factorized_tensor.base"], [91, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [92, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [93, "module-ivy.data_classes.array.array"], [94, "module-ivy.data_classes.container.container"], [96, "module-ivy.data_classes.nested_array.nested_array"], [97, "module-ivy.data_classes.nested_array.base"], [98, "module-ivy.data_classes.nested_array.elementwise"], [344, "module-ivy.functional.ivy.experimental.activations"], [345, "module-ivy.functional.ivy.experimental.constants"], [346, "module-ivy.functional.ivy.experimental.creation"], [347, "module-ivy.functional.ivy.experimental.data_type"], [348, "module-ivy.functional.ivy.experimental.device"], [349, "module-ivy.functional.ivy.experimental.elementwise"], [350, "module-ivy.functional.ivy.experimental.general"], [351, "module-ivy.functional.ivy.experimental.gradients"], [352, "module-ivy.functional.ivy.experimental.layers"], [353, "module-ivy.functional.ivy.experimental.linear_algebra"], [354, "module-ivy.functional.ivy.experimental.losses"], [355, "module-ivy.functional.ivy.experimental.manipulation"], [356, "module-ivy.functional.ivy.experimental.meta"], [357, "module-ivy.functional.ivy.experimental.nest"], [358, "module-ivy.functional.ivy.experimental.norms"], [359, "module-ivy.functional.ivy.experimental.random"], [360, "module-ivy.functional.ivy.experimental.searching"], [361, "module-ivy.functional.ivy.experimental.set"], [362, "module-ivy.functional.ivy.experimental.sorting"], [363, "module-ivy.functional.ivy.experimental.sparse_array"], [364, "module-ivy.functional.ivy.experimental.statistical"], [365, "module-ivy.functional.ivy.experimental.utility"], [580, "module-ivy.functional.ivy.activations"], [581, "module-ivy.functional.ivy.constants"], [582, "module-ivy.functional.ivy.control_flow_ops"], [583, "module-ivy.functional.ivy.creation"], [584, "module-ivy.functional.ivy.data_type"], [585, "module-ivy.functional.ivy.device"], [586, "module-ivy.functional.ivy.elementwise"], [587, "module-ivy.functional.ivy.experimental"], [588, "module-ivy.functional.ivy.general"], [589, "module-ivy.functional.ivy.gradients"], [590, "module-ivy.functional.ivy.layers"], [591, "module-ivy.functional.ivy.linear_algebra"], [592, "module-ivy.functional.ivy.losses"], [593, "module-ivy.functional.ivy.manipulation"], [594, "module-ivy.functional.ivy.meta"], [595, "module-ivy.functional.ivy.nest"], [596, "module-ivy.functional.ivy.norms"], [597, "module-ivy.functional.ivy.random"], [598, "module-ivy.functional.ivy.searching"], [599, "module-ivy.functional.ivy.set"], [600, "module-ivy.functional.ivy.sorting"], [601, "module-ivy.functional.ivy.statistical"], [602, "module-ivy.functional.ivy.utility"], [725, "module-ivy.stateful.activations"], [726, "module-ivy.stateful.converters"], [727, "module-ivy.stateful.helpers"], [728, "module-ivy.stateful.initializers"], [729, "module-ivy.stateful.layers"], [730, "module-ivy.stateful.losses"], [731, "module-ivy.stateful.module"], [732, "module-ivy.stateful.norms"], [733, "module-ivy.stateful.optimizers"], [734, "module-ivy.stateful.sequential"], [735, "module-ivy.utils.assertions"], [736, "module-ivy.utils.backend"], [737, "module-ivy.utils.backend.ast_helpers"], [738, "module-ivy.utils.backend.handler"], [739, "module-ivy.utils.backend.sub_backend_handler"], [740, "module-ivy.utils.dynamic_import"], [741, "module-ivy.utils.einsum_parser"], [742, "module-ivy.utils.exceptions"], [743, "module-ivy.utils.inspection"], [744, "module-ivy.utils.logging"], [745, "module-ivy.utils.profiler"], [746, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[46, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[47, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[48, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[49, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[49, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[49, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[49, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[49, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[50, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[51, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[51, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[51, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[51, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[51, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[51, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[51, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[51, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[51, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[51, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[51, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[51, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[51, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[51, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[51, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[51, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[51, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[51, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[51, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[51, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[51, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[51, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[51, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[51, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[51, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[51, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[51, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[51, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[51, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[51, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[51, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[52, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[53, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[54, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[54, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[54, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[55, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[56, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[57, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[58, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[59, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[60, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[60, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[60, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[61, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[62, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[62, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[62, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[63, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[64, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[65, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[66, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[66, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[66, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[67, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[68, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[68, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[69, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[70, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[71, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[72, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[72, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[73, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[74, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[74, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[74, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[74, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[74, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[74, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[74, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[74, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[74, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[74, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[74, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[74, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[74, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[74, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[74, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[74, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[74, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[74, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[74, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[74, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[74, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[74, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[74, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[74, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[74, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[74, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[74, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[74, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[74, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[74, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[74, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[74, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[74, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[75, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[76, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[77, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[77, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[77, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[78, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[79, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[80, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[81, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[82, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[83, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[83, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[84, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[85, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[85, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[85, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[86, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[87, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[88, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[89, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[89, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[89, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[90, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[91, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[92, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[93, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[93, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[94, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[94, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[96, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[97, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[98, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[98, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[98, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[98, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[101, "ivy.gelu"], [580, "ivy.gelu"]], "gelu() (ivy.array method)": [[101, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[101, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[102, "ivy.hardswish"], [580, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[102, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[102, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[103, "ivy.leaky_relu"], [580, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[103, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[103, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[104, "ivy.log_softmax"], [580, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[104, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[104, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[105, "ivy.mish"], [580, "ivy.mish"]], "mish() (ivy.array method)": [[105, "ivy.Array.mish"]], "mish() (ivy.container method)": [[105, "ivy.Container.mish"]], "relu() (in module ivy)": [[106, "ivy.relu"], [580, "ivy.relu"]], "relu() (ivy.array method)": [[106, "ivy.Array.relu"]], "relu() (ivy.container method)": [[106, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[107, "ivy.sigmoid"], [580, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[107, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[107, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[108, "ivy.softmax"], [580, "ivy.softmax"]], "softmax() (ivy.array method)": [[108, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[108, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[109, "ivy.softplus"], [580, "ivy.softplus"]], "softplus() (ivy.array method)": [[109, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[109, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[110, "ivy.softsign"], [580, "ivy.softsign"]], "cast_bool() (in module ivy)": [[111, "ivy.cast_bool"], [582, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[112, "ivy.cmp_is"], [582, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[113, "ivy.cmp_isnot"], [582, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[114, "ivy.for_loop"], [582, "ivy.for_loop"]], "if_else() (in module ivy)": [[115, "ivy.if_else"], [582, "ivy.if_else"]], "try_except() (in module ivy)": [[116, "ivy.try_except"], [582, "ivy.try_except"]], "while_loop() (in module ivy)": [[117, "ivy.while_loop"], [582, "ivy.while_loop"]], "arange() (in module ivy)": [[118, "ivy.arange"], [583, "ivy.arange"]], "array() (in module ivy)": [[119, "ivy.array"], [583, "ivy.array"]], "asarray() (in module ivy)": [[120, "ivy.asarray"], [583, "ivy.asarray"]], "asarray() (ivy.array method)": [[120, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[120, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[121, "ivy.asarray_handle_nestable"], [583, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[122, "ivy.asarray_infer_device"], [583, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[123, "ivy.asarray_infer_dtype"], [583, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[124, "ivy.asarray_inputs_to_native_shapes"], [583, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[125, "ivy.asarray_to_native_arrays_and_back"], [583, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[126, "ivy.copy_array"], [583, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[126, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[126, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[127, "ivy.empty"], [583, "ivy.empty"]], "empty_like() (in module ivy)": [[128, "ivy.empty_like"], [583, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[128, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[128, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[129, "ivy.eye"], [583, "ivy.eye"]], "from_dlpack() (in module ivy)": [[130, "ivy.from_dlpack"], [583, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[130, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[130, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[131, "ivy.frombuffer"], [583, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[131, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[132, "ivy.full"], [583, "ivy.full"]], "full_like() (in module ivy)": [[133, "ivy.full_like"], [583, "ivy.full_like"]], "full_like() (ivy.array method)": [[133, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[133, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[134, "ivy.linspace"], [583, "ivy.linspace"]], "linspace() (ivy.array method)": [[134, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[134, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[135, "ivy.logspace"], [583, "ivy.logspace"]], "logspace() (ivy.array method)": [[135, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[135, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[136, "ivy.meshgrid"], [583, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[136, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[136, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[137, "ivy.native_array"], [583, "ivy.native_array"]], "native_array() (ivy.array method)": [[137, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[137, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[138, "ivy.one_hot"], [583, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[138, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[138, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[139, "ivy.ones"], [583, "ivy.ones"]], "ones_like() (in module ivy)": [[140, "ivy.ones_like"], [583, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[140, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[140, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[141, "ivy.tril"], [583, "ivy.tril"]], "tril() (ivy.array method)": [[141, "ivy.Array.tril"]], "tril() (ivy.container method)": [[141, "ivy.Container.tril"]], "triu() (in module ivy)": [[142, "ivy.triu"], [583, "ivy.triu"]], "triu() (ivy.array method)": [[142, "ivy.Array.triu"]], "triu() (ivy.container method)": [[142, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[143, "ivy.triu_indices"], [583, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[143, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[144, "ivy.zeros"], [583, "ivy.zeros"]], "zeros_like() (in module ivy)": [[145, "ivy.zeros_like"], [583, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[145, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[145, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[146, "ivy.as_ivy_dtype"], [584, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[147, "ivy.as_native_dtype"], [584, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[148, "ivy.astype"], [584, "ivy.astype"]], "astype() (ivy.array method)": [[148, "ivy.Array.astype"]], "astype() (ivy.container method)": [[148, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[149, "ivy.broadcast_arrays"], [584, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[149, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[149, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[150, "ivy.broadcast_to"], [584, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[150, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[150, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[151, "ivy.can_cast"], [584, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[151, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[151, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[152, "ivy.check_float"], [584, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[153, "ivy.closest_valid_dtype"], [584, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[154, "ivy.default_complex_dtype"], [584, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[155, "ivy.default_dtype"], [584, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[156, "ivy.default_float_dtype"], [584, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[157, "ivy.default_int_dtype"], [584, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[158, "ivy.default_uint_dtype"], [584, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[159, "ivy.dtype"], [584, "ivy.dtype"]], "dtype() (ivy.array method)": [[159, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[159, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[160, "ivy.dtype_bits"], [584, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[161, "ivy.finfo"], [584, "ivy.finfo"]], "finfo() (ivy.array method)": [[161, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[161, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[162, "ivy.function_supported_dtypes"], [584, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[163, "ivy.function_unsupported_dtypes"], [584, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[164, "ivy.iinfo"], [584, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[164, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[164, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[165, "ivy.infer_default_dtype"], [584, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[166, "ivy.invalid_dtype"], [584, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[167, "ivy.is_bool_dtype"], [584, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[167, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[167, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[168, "ivy.is_complex_dtype"], [584, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[168, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[169, "ivy.is_float_dtype"], [584, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[169, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[169, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[170, "ivy.is_hashable_dtype"], [584, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[171, "ivy.is_int_dtype"], [584, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[171, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[171, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[172, "ivy.is_native_dtype"], [584, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[173, "ivy.is_uint_dtype"], [584, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[173, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[173, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[174, "ivy.promote_types"], [584, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[175, "ivy.promote_types_of_inputs"], [584, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[176, "ivy.result_type"], [584, "ivy.result_type"]], "result_type() (ivy.array method)": [[176, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[176, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[177, "ivy.set_default_complex_dtype"], [584, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[178, "ivy.set_default_dtype"], [584, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[179, "ivy.set_default_float_dtype"], [584, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[180, "ivy.set_default_int_dtype"], [584, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[181, "ivy.set_default_uint_dtype"], [584, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[182, "ivy.type_promote_arrays"], [584, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[183, "ivy.unset_default_complex_dtype"], [584, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[184, "ivy.unset_default_dtype"], [584, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[185, "ivy.unset_default_float_dtype"], [584, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[186, "ivy.unset_default_int_dtype"], [584, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[187, "ivy.unset_default_uint_dtype"], [584, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[188, "ivy.valid_dtype"], [584, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[189, "ivy.as_ivy_dev"], [585, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[190, "ivy.as_native_dev"], [585, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[191, "ivy.clear_cached_mem_on_dev"], [585, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[192, "ivy.default_device"], [585, "ivy.default_device"]], "dev() (in module ivy)": [[193, "ivy.dev"], [585, "ivy.dev"]], "dev() (ivy.array method)": [[193, "ivy.Array.dev"]], "dev() (ivy.container method)": [[193, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[194, "ivy.dev_util"], [585, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[195, "ivy.function_supported_devices"], [585, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[196, "ivy.function_unsupported_devices"], [585, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[197, "ivy.get_all_ivy_arrays_on_dev"], [585, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[198, "ivy.gpu_is_available"], [585, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[199, "ivy.handle_soft_device_variable"], [585, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[200, "ivy.num_cpu_cores"], [585, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[201, "ivy.num_gpus"], [585, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[202, "ivy.num_ivy_arrays_on_dev"], [585, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[203, "ivy.percent_used_mem_on_dev"], [585, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[204, "ivy.print_all_ivy_arrays_on_dev"], [585, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[205, "ivy.set_default_device"], [585, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[206, "ivy.set_soft_device_mode"], [585, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[207, "ivy.set_split_factor"], [585, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[208, "ivy.split_factor"], [585, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[209, "ivy.split_func_call"], [585, "ivy.split_func_call"]], "to_device() (in module ivy)": [[210, "ivy.to_device"], [585, "ivy.to_device"]], "to_device() (ivy.array method)": [[210, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[210, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[211, "ivy.total_mem_on_dev"], [585, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[212, "ivy.tpu_is_available"], [585, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[213, "ivy.unset_default_device"], [585, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[214, "ivy.unset_soft_device_mode"], [585, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[215, "ivy.used_mem_on_dev"], [585, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[216, "ivy.abs"], [586, "ivy.abs"]], "abs() (ivy.array method)": [[216, "ivy.Array.abs"]], "abs() (ivy.container method)": [[216, "ivy.Container.abs"]], "acos() (in module ivy)": [[217, "ivy.acos"], [586, "ivy.acos"]], "acos() (ivy.array method)": [[217, "ivy.Array.acos"]], "acos() (ivy.container method)": [[217, "ivy.Container.acos"]], "acosh() (in module ivy)": [[218, "ivy.acosh"], [586, "ivy.acosh"]], "acosh() (ivy.array method)": [[218, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[218, "ivy.Container.acosh"]], "add() (in module ivy)": [[219, "ivy.add"], [586, "ivy.add"]], "add() (ivy.array method)": [[219, "ivy.Array.add"]], "add() (ivy.container method)": [[219, "ivy.Container.add"]], "angle() (in module ivy)": [[220, "ivy.angle"], [586, "ivy.angle"]], "angle() (ivy.array method)": [[220, "ivy.Array.angle"]], "angle() (ivy.container method)": [[220, "ivy.Container.angle"]], "asin() (in module ivy)": [[221, "ivy.asin"], [586, "ivy.asin"]], "asin() (ivy.array method)": [[221, "ivy.Array.asin"]], "asin() (ivy.container method)": [[221, "ivy.Container.asin"]], "asinh() (in module ivy)": [[222, "ivy.asinh"], [586, "ivy.asinh"]], "asinh() (ivy.array method)": [[222, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[222, "ivy.Container.asinh"]], "atan() (in module ivy)": [[223, "ivy.atan"], [586, "ivy.atan"]], "atan() (ivy.array method)": [[223, "ivy.Array.atan"]], "atan() (ivy.container method)": [[223, "ivy.Container.atan"]], "atan2() (in module ivy)": [[224, "ivy.atan2"], [586, "ivy.atan2"]], "atan2() (ivy.array method)": [[224, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[224, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[225, "ivy.atanh"], [586, "ivy.atanh"]], "atanh() (ivy.array method)": [[225, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[225, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[226, "ivy.bitwise_and"], [586, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[226, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[226, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[227, "ivy.bitwise_invert"], [586, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[227, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[227, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[228, "ivy.bitwise_left_shift"], [586, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[228, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[228, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[229, "ivy.bitwise_or"], [586, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[229, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[229, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[230, "ivy.bitwise_right_shift"], [586, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[230, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[230, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[231, "ivy.bitwise_xor"], [586, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[231, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[231, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[232, "ivy.ceil"], [586, "ivy.ceil"]], "ceil() (ivy.array method)": [[232, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[232, "ivy.Container.ceil"]], "cos() (in module ivy)": [[233, "ivy.cos"], [586, "ivy.cos"]], "cos() (ivy.array method)": [[233, "ivy.Array.cos"]], "cos() (ivy.container method)": [[233, "ivy.Container.cos"]], "cosh() (in module ivy)": [[234, "ivy.cosh"], [586, "ivy.cosh"]], "cosh() (ivy.array method)": [[234, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[234, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[235, "ivy.deg2rad"], [586, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[235, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[235, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[236, "ivy.divide"], [586, "ivy.divide"]], "divide() (ivy.array method)": [[236, "ivy.Array.divide"]], "divide() (ivy.container method)": [[236, "ivy.Container.divide"]], "equal() (in module ivy)": [[237, "ivy.equal"], [586, "ivy.equal"]], "equal() (ivy.array method)": [[237, "ivy.Array.equal"]], "equal() (ivy.container method)": [[237, "ivy.Container.equal"]], "erf() (in module ivy)": [[238, "ivy.erf"], [586, "ivy.erf"]], "erf() (ivy.array method)": [[238, "ivy.Array.erf"]], "erf() (ivy.container method)": [[238, "ivy.Container.erf"]], "exp() (in module ivy)": [[239, "ivy.exp"], [586, "ivy.exp"]], "exp() (ivy.array method)": [[239, "ivy.Array.exp"]], "exp() (ivy.container method)": [[239, "ivy.Container.exp"]], "exp2() (in module ivy)": [[240, "ivy.exp2"], [586, "ivy.exp2"]], "exp2() (ivy.array method)": [[240, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[240, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[241, "ivy.expm1"], [586, "ivy.expm1"]], "expm1() (ivy.array method)": [[241, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[241, "ivy.Container.expm1"]], "floor() (in module ivy)": [[242, "ivy.floor"], [586, "ivy.floor"]], "floor() (ivy.array method)": [[242, "ivy.Array.floor"]], "floor() (ivy.container method)": [[242, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[243, "ivy.floor_divide"], [586, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[243, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[243, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[244, "ivy.fmin"], [586, "ivy.fmin"]], "fmin() (ivy.array method)": [[244, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[244, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[245, "ivy.fmod"], [586, "ivy.fmod"]], "fmod() (ivy.array method)": [[245, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[245, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[246, "ivy.gcd"], [586, "ivy.gcd"]], "gcd() (ivy.array method)": [[246, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[246, "ivy.Container.gcd"]], "greater() (in module ivy)": [[247, "ivy.greater"], [586, "ivy.greater"]], "greater() (ivy.array method)": [[247, "ivy.Array.greater"]], "greater() (ivy.container method)": [[247, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[248, "ivy.greater_equal"], [586, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[248, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[248, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[249, "ivy.imag"], [586, "ivy.imag"]], "imag() (ivy.array method)": [[249, "ivy.Array.imag"]], "imag() (ivy.container method)": [[249, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[250, "ivy.isfinite"], [586, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[250, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[250, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[251, "ivy.isinf"], [586, "ivy.isinf"]], "isinf() (ivy.array method)": [[251, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[251, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[252, "ivy.isnan"], [586, "ivy.isnan"]], "isnan() (ivy.array method)": [[252, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[252, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[253, "ivy.isreal"], [586, "ivy.isreal"]], "isreal() (ivy.array method)": [[253, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[253, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[254, "ivy.lcm"], [586, "ivy.lcm"]], "lcm() (ivy.array method)": [[254, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[254, "ivy.Container.lcm"]], "less() (in module ivy)": [[255, "ivy.less"], [586, "ivy.less"]], "less() (ivy.array method)": [[255, "ivy.Array.less"]], "less() (ivy.container method)": [[255, "ivy.Container.less"]], "less_equal() (in module ivy)": [[256, "ivy.less_equal"], [586, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[256, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[256, "ivy.Container.less_equal"]], "log() (in module ivy)": [[257, "ivy.log"], [586, "ivy.log"]], "log() (ivy.array method)": [[257, "ivy.Array.log"]], "log() (ivy.container method)": [[257, "ivy.Container.log"]], "log10() (in module ivy)": [[258, "ivy.log10"], [586, "ivy.log10"]], "log10() (ivy.array method)": [[258, "ivy.Array.log10"]], "log10() (ivy.container method)": [[258, "ivy.Container.log10"]], "log1p() (in module ivy)": [[259, "ivy.log1p"], [586, "ivy.log1p"]], "log1p() (ivy.array method)": [[259, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[259, "ivy.Container.log1p"]], "log2() (in module ivy)": [[260, "ivy.log2"], [586, "ivy.log2"]], "log2() (ivy.array method)": [[260, "ivy.Array.log2"]], "log2() (ivy.container method)": [[260, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[261, "ivy.logaddexp"], [586, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[261, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[261, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[262, "ivy.logaddexp2"], [586, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[262, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[262, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[263, "ivy.logical_and"], [586, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[263, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[263, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[264, "ivy.logical_not"], [586, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[264, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[264, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[265, "ivy.logical_or"], [586, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[265, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[265, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[266, "ivy.logical_xor"], [586, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[266, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[266, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[267, "ivy.maximum"], [586, "ivy.maximum"]], "maximum() (ivy.array method)": [[267, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[267, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[268, "ivy.minimum"], [586, "ivy.minimum"]], "minimum() (ivy.array method)": [[268, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[268, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[269, "ivy.multiply"], [586, "ivy.multiply"]], "multiply() (ivy.array method)": [[269, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[269, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[270, "ivy.nan_to_num"], [586, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[270, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[270, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[271, "ivy.negative"], [586, "ivy.negative"]], "negative() (ivy.array method)": [[271, "ivy.Array.negative"]], "negative() (ivy.container method)": [[271, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[272, "ivy.not_equal"], [586, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[272, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[272, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[273, "ivy.positive"], [586, "ivy.positive"]], "positive() (ivy.array method)": [[273, "ivy.Array.positive"]], "positive() (ivy.container method)": [[273, "ivy.Container.positive"]], "pow() (in module ivy)": [[274, "ivy.pow"], [586, "ivy.pow"]], "pow() (ivy.array method)": [[274, "ivy.Array.pow"]], "pow() (ivy.container method)": [[274, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[275, "ivy.rad2deg"], [586, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[275, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[275, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[276, "ivy.real"], [586, "ivy.real"]], "real() (ivy.array method)": [[276, "ivy.Array.real"]], "real() (ivy.container method)": [[276, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[277, "ivy.reciprocal"], [586, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[277, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[277, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[278, "ivy.remainder"], [586, "ivy.remainder"]], "remainder() (ivy.array method)": [[278, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[278, "ivy.Container.remainder"]], "round() (in module ivy)": [[279, "ivy.round"], [586, "ivy.round"]], "round() (ivy.array method)": [[279, "ivy.Array.round"]], "round() (ivy.container method)": [[279, "ivy.Container.round"]], "sign() (in module ivy)": [[280, "ivy.sign"], [586, "ivy.sign"]], "sign() (ivy.array method)": [[280, "ivy.Array.sign"]], "sign() (ivy.container method)": [[280, "ivy.Container.sign"]], "sin() (in module ivy)": [[281, "ivy.sin"], [586, "ivy.sin"]], "sin() (ivy.array method)": [[281, "ivy.Array.sin"]], "sin() (ivy.container method)": [[281, "ivy.Container.sin"]], "sinh() (in module ivy)": [[282, "ivy.sinh"], [586, "ivy.sinh"]], "sinh() (ivy.array method)": [[282, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[282, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[283, "ivy.sqrt"], [586, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[283, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[283, "ivy.Container.sqrt"]], "square() (in module ivy)": [[284, "ivy.square"], [586, "ivy.square"]], "square() (ivy.array method)": [[284, "ivy.Array.square"]], "square() (ivy.container method)": [[284, "ivy.Container.square"]], "subtract() (in module ivy)": [[285, "ivy.subtract"], [586, "ivy.subtract"]], "subtract() (ivy.array method)": [[285, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[285, "ivy.Container.subtract"]], "tan() (in module ivy)": [[286, "ivy.tan"], [586, "ivy.tan"]], "tan() (ivy.array method)": [[286, "ivy.Array.tan"]], "tan() (ivy.container method)": [[286, "ivy.Container.tan"]], "tanh() (in module ivy)": [[287, "ivy.tanh"], [586, "ivy.tanh"]], "tanh() (ivy.array method)": [[287, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[287, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[288, "ivy.trapz"], [586, "ivy.trapz"]], "trapz() (ivy.array method)": [[288, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[288, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[289, "ivy.trunc"], [586, "ivy.trunc"]], "trunc() (ivy.array method)": [[289, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[289, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[290, "ivy.trunc_divide"], [586, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[290, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[290, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[291, "ivy.elu"], [344, "ivy.elu"]], "elu() (ivy.array method)": [[291, "ivy.Array.elu"]], "elu() (ivy.container method)": [[291, "ivy.Container.elu"]], "logit() (in module ivy)": [[292, "ivy.logit"], [344, "ivy.logit"]], "logit() (ivy.array method)": [[292, "ivy.Array.logit"]], "logit() (ivy.container method)": [[292, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[293, "ivy.logsigmoid"], [344, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[293, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[293, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[294, "ivy.prelu"], [344, "ivy.prelu"]], "prelu() (ivy.array method)": [[294, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[294, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[295, "ivy.relu6"], [344, "ivy.relu6"]], "relu6() (ivy.array method)": [[295, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[295, "ivy.Container.relu6"]], "selu() (in module ivy)": [[296, "ivy.selu"], [344, "ivy.selu"]], "selu() (ivy.array method)": [[296, "ivy.Array.selu"]], "selu() (ivy.container method)": [[296, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[297, "ivy.sequence_length"], [344, "ivy.sequence_length"]], "silu() (in module ivy)": [[298, "ivy.silu"], [344, "ivy.silu"]], "silu() (ivy.array method)": [[298, "ivy.Array.silu"]], "silu() (ivy.container method)": [[298, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[299, "ivy.thresholded_relu"], [344, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[299, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[299, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[300, "ivy.blackman_window"], [346, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[300, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[300, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[301, "ivy.eye_like"], [346, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[301, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[301, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[302, "ivy.hamming_window"], [346, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[302, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[303, "ivy.hann_window"], [346, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[303, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[304, "ivy.indices"], [346, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[305, "ivy.kaiser_bessel_derived_window"], [346, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[305, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[306, "ivy.kaiser_window"], [346, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[306, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[307, "ivy.mel_weight_matrix"], [346, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[307, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[307, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[308, "ivy.ndenumerate"], [346, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[309, "ivy.ndindex"], [346, "ivy.ndindex"]], "random_cp() (in module ivy)": [[310, "ivy.random_cp"], [346, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[311, "ivy.random_tucker"], [346, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[312, "ivy.tril_indices"], [346, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[312, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[313, "ivy.trilu"], [346, "ivy.trilu"]], "trilu() (ivy.array method)": [[313, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[313, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[314, "ivy.unsorted_segment_min"], [346, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[314, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[314, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[315, "ivy.unsorted_segment_sum"], [346, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[315, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[315, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[316, "ivy.vorbis_window"], [346, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[316, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[317, "ivy.allclose"], [349, "ivy.allclose"]], "allclose() (ivy.array method)": [[317, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[317, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[318, "ivy.binarizer"], [349, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[318, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[318, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[319, "ivy.conj"], [349, "ivy.conj"]], "conj() (ivy.array method)": [[319, "ivy.Array.conj"]], "conj() (ivy.container method)": [[319, "ivy.Container.conj"]], "copysign() (in module ivy)": [[320, "ivy.copysign"], [349, "ivy.copysign"]], "copysign() (ivy.array method)": [[320, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[320, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[321, "ivy.count_nonzero"], [349, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[321, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[321, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[322, "ivy.diff"], [349, "ivy.diff"]], "diff() (ivy.array method)": [[322, "ivy.Array.diff"]], "diff() (ivy.container method)": [[322, "ivy.Container.diff"]], "digamma() (in module ivy)": [[323, "ivy.digamma"], [349, "ivy.digamma"]], "digamma() (ivy.array method)": [[323, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[323, "ivy.Container.digamma"]], "fix() (in module ivy)": [[324, "ivy.fix"], [349, "ivy.fix"]], "fix() (ivy.array method)": [[324, "ivy.Array.fix"]], "fix() (ivy.container method)": [[324, "ivy.Container.fix"]], "float_power() (in module ivy)": [[325, "ivy.float_power"], [349, "ivy.float_power"]], "float_power() (ivy.array method)": [[325, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[325, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[326, "ivy.fmax"], [349, "ivy.fmax"]], "fmax() (ivy.array method)": [[326, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[326, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[327, "ivy.frexp"], [349, "ivy.frexp"]], "frexp() (ivy.array method)": [[327, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[327, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[328, "ivy.gradient"], [349, "ivy.gradient"]], "gradient() (ivy.array method)": [[328, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[328, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[329, "ivy.hypot"], [349, "ivy.hypot"]], "hypot() (ivy.array method)": [[329, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[329, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[330, "ivy.isclose"], [349, "ivy.isclose"]], "isclose() (ivy.array method)": [[330, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[330, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[331, "ivy.ldexp"], [349, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[331, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[331, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[332, "ivy.lerp"], [349, "ivy.lerp"]], "lerp() (ivy.array method)": [[332, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[332, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[333, "ivy.lgamma"], [349, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[333, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[334, "ivy.modf"], [349, "ivy.modf"]], "modf() (ivy.array method)": [[334, "ivy.Array.modf"]], "modf() (ivy.container method)": [[334, "ivy.Container.modf"]], "nansum() (in module ivy)": [[335, "ivy.nansum"], [349, "ivy.nansum"]], "nansum() (ivy.array method)": [[335, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[335, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[336, "ivy.nextafter"], [349, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[336, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[336, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[337, "ivy.signbit"], [349, "ivy.signbit"]], "signbit() (ivy.array method)": [[337, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[337, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[338, "ivy.sinc"], [349, "ivy.sinc"]], "sinc() (ivy.array method)": [[338, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[338, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[339, "ivy.sparsify_tensor"], [349, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[339, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[339, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[340, "ivy.xlogy"], [349, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[340, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[340, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[341, "ivy.zeta"], [349, "ivy.zeta"]], "zeta() (ivy.array method)": [[341, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[341, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[342, "ivy.reduce"], [350, "ivy.reduce"]], "reduce() (ivy.array method)": [[342, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[342, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[343, "ivy.bind_custom_gradient_function"], [351, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[344, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[345, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[346, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[347, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[348, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[349, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[350, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[351, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[352, "ivy.adaptive_avg_pool1d"], [366, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[352, "ivy.adaptive_avg_pool2d"], [367, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[352, "ivy.adaptive_max_pool2d"], [368, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[352, "ivy.area_interpolate"], [369, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[352, "ivy.avg_pool1d"], [370, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[352, "ivy.avg_pool2d"], [371, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[352, "ivy.avg_pool3d"], [372, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[352, "ivy.dct"], [373, "ivy.dct"]], "dft() (in module ivy)": [[352, "ivy.dft"], [374, "ivy.dft"]], "dropout1d() (in module ivy)": [[352, "ivy.dropout1d"], [375, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[352, "ivy.dropout2d"], [376, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[352, "ivy.dropout3d"], [377, "ivy.dropout3d"]], "embedding() (in module ivy)": [[352, "ivy.embedding"], [378, "ivy.embedding"]], "fft() (in module ivy)": [[352, "ivy.fft"], [379, "ivy.fft"]], "fft2() (in module ivy)": [[352, "ivy.fft2"], [380, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[352, "ivy.generate_einsum_equation"], [381, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[352, "ivy.get_interpolate_kernel"], [382, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[352, "ivy.idct"], [383, "ivy.idct"]], "ifft() (in module ivy)": [[352, "ivy.ifft"], [384, "ivy.ifft"]], "ifftn() (in module ivy)": [[352, "ivy.ifftn"], [385, "ivy.ifftn"]], "interp() (in module ivy)": [[352, "ivy.interp"], [386, "ivy.interp"]], "interpolate() (in module ivy)": [[352, "ivy.interpolate"], [387, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[352, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[352, "ivy.max_pool1d"], [388, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[352, "ivy.max_pool2d"], [389, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[352, "ivy.max_pool3d"], [390, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[352, "ivy.max_unpool1d"], [391, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[352, "ivy.nearest_interpolate"], [392, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[352, "ivy.pool"], [393, "ivy.pool"]], "reduce_window() (in module ivy)": [[352, "ivy.reduce_window"], [394, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[352, "ivy.rfftn"], [395, "ivy.rfftn"]], "adjoint() (in module ivy)": [[353, "ivy.adjoint"], [396, "ivy.adjoint"]], "cond() (in module ivy)": [[353, "ivy.cond"], [397, "ivy.cond"]], "diagflat() (in module ivy)": [[353, "ivy.diagflat"], [398, "ivy.diagflat"]], "dot() (in module ivy)": [[353, "ivy.dot"], [399, "ivy.dot"]], "eig() (in module ivy)": [[353, "ivy.eig"], [400, "ivy.eig"], [591, "ivy.eig"], [623, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[353, "ivy.eigh_tridiagonal"], [401, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[353, "ivy.eigvals"], [402, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[353, "ivy.general_inner_product"], [403, "ivy.general_inner_product"]], "initialize_tucker() (in module ivy)": [[353, "ivy.initialize_tucker"], [404, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[353, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[353, "ivy.khatri_rao"], [405, "ivy.khatri_rao"]], "kron() (in module ivy)": [[353, "ivy.kron"], [406, "ivy.kron"]], "kronecker() (in module ivy)": [[353, "ivy.kronecker"], [407, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[353, "ivy.make_svd_non_negative"], [408, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[353, "ivy.matrix_exp"], [409, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[353, "ivy.mode_dot"], [410, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[353, "ivy.multi_dot"], [411, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[353, "ivy.multi_mode_dot"], [412, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[353, "ivy.partial_tucker"], [413, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[353, "ivy.svd_flip"], [414, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[353, "ivy.truncated_svd"], [415, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[353, "ivy.tucker"], [416, "ivy.tucker"]], "huber_loss() (in module ivy)": [[354, "ivy.huber_loss"], [417, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[354, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[354, "ivy.l1_loss"], [418, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[354, "ivy.log_poisson_loss"], [419, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[354, "ivy.smooth_l1_loss"], [420, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[354, "ivy.soft_margin_loss"], [421, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[355, "ivy.as_strided"], [422, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[355, "ivy.associative_scan"], [423, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[355, "ivy.atleast_1d"], [424, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[355, "ivy.atleast_2d"], [425, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[355, "ivy.atleast_3d"], [426, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[355, "ivy.broadcast_shapes"], [427, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[355, "ivy.choose"], [428, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[355, "ivy.concat_from_sequence"], [429, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[355, "ivy.dsplit"], [430, "ivy.dsplit"]], "dstack() (in module ivy)": [[355, "ivy.dstack"], [431, "ivy.dstack"]], "expand() (in module ivy)": [[355, "ivy.expand"], [432, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[355, "ivy.fill_diagonal"], [433, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[355, "ivy.flatten"], [434, "ivy.flatten"]], "fliplr() (in module ivy)": [[355, "ivy.fliplr"], [435, "ivy.fliplr"]], "flipud() (in module ivy)": [[355, "ivy.flipud"], [436, "ivy.flipud"]], "fold() (in module ivy)": [[355, "ivy.fold"], [437, "ivy.fold"]], "heaviside() (in module ivy)": [[355, "ivy.heaviside"], [438, "ivy.heaviside"]], "hsplit() (in module ivy)": [[355, "ivy.hsplit"], [439, "ivy.hsplit"]], "hstack() (in module ivy)": [[355, "ivy.hstack"], [440, "ivy.hstack"]], "i0() (in module ivy)": [[355, "ivy.i0"], [441, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[355, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[355, "ivy.matricize"], [442, "ivy.matricize"]], "moveaxis() (in module ivy)": [[355, "ivy.moveaxis"], [443, "ivy.moveaxis"]], "pad() (in module ivy)": [[355, "ivy.pad"], [444, "ivy.pad"]], "partial_fold() (in module ivy)": [[355, "ivy.partial_fold"], [445, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[355, "ivy.partial_tensor_to_vec"], [446, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[355, "ivy.partial_unfold"], [447, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[355, "ivy.partial_vec_to_tensor"], [448, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[355, "ivy.put_along_axis"], [449, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[355, "ivy.rot90"], [450, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[355, "ivy.soft_thresholding"], [451, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[355, "ivy.take_along_axis"], [452, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[355, "ivy.top_k"], [453, "ivy.top_k"]], "unfold() (in module ivy)": [[355, "ivy.unfold"], [454, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[355, "ivy.unique_consecutive"], [455, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[355, "ivy.vsplit"], [456, "ivy.vsplit"]], "vstack() (in module ivy)": [[355, "ivy.vstack"], [457, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[356, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[357, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[358, "ivy.batch_norm"], [458, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[358, "ivy.group_norm"], [459, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[358, "ivy.instance_norm"], [460, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[358, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[358, "ivy.l1_normalize"], [461, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[358, "ivy.l2_normalize"], [462, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[358, "ivy.lp_normalize"], [463, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[359, "ivy.bernoulli"], [464, "ivy.bernoulli"]], "beta() (in module ivy)": [[359, "ivy.beta"], [465, "ivy.beta"]], "dirichlet() (in module ivy)": [[359, "ivy.dirichlet"], [466, "ivy.dirichlet"]], "gamma() (in module ivy)": [[359, "ivy.gamma"], [467, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[359, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[359, "ivy.poisson"], [468, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[360, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[360, "ivy.unravel_index"], [469, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[361, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[362, "ivy.invert_permutation"], [470, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[362, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[362, "ivy.lexsort"], [471, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[363, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[363, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[363, "ivy.is_ivy_sparse_array"], [472, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[363, "ivy.is_native_sparse_array"], [473, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[363, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[363, "ivy.native_sparse_array"], [474, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[363, "ivy.native_sparse_array_to_indices_values_and_shape"], [475, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[364, "ivy.bincount"], [476, "ivy.bincount"]], "corrcoef() (in module ivy)": [[364, "ivy.corrcoef"], [477, "ivy.corrcoef"]], "cov() (in module ivy)": [[364, "ivy.cov"], [478, "ivy.cov"]], "cummax() (in module ivy)": [[364, "ivy.cummax"], [479, "ivy.cummax"]], "cummin() (in module ivy)": [[364, "ivy.cummin"], [480, "ivy.cummin"]], "histogram() (in module ivy)": [[364, "ivy.histogram"], [481, "ivy.histogram"]], "igamma() (in module ivy)": [[364, "ivy.igamma"], [482, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[364, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[364, "ivy.median"], [483, "ivy.median"]], "nanmean() (in module ivy)": [[364, "ivy.nanmean"], [484, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[364, "ivy.nanmedian"], [485, "ivy.nanmedian"]], "nanprod() (in module ivy)": [[364, "ivy.nanprod"], [486, "ivy.nanprod"]], "quantile() (in module ivy)": [[364, "ivy.quantile"], [487, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[365, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[365, "ivy.optional_get_element"], [488, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[366, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[366, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[367, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[367, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[368, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[368, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[370, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[370, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[371, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[371, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[372, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[372, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[373, "ivy.Array.dct"]], "dct() (ivy.container method)": [[373, "ivy.Container.dct"]], "dft() (ivy.array method)": [[374, "ivy.Array.dft"]], "dft() (ivy.container method)": [[374, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[375, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[375, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[376, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[376, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[377, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[377, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[378, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[378, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[379, "ivy.Array.fft"]], "fft() (ivy.container method)": [[379, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[380, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[383, "ivy.Array.idct"]], "idct() (ivy.container method)": [[383, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[384, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[384, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[385, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[385, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[387, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[387, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[388, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[388, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[389, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[389, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[390, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[390, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[394, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[394, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[395, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[395, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[396, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[396, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[397, "ivy.Array.cond"]], "cond() (ivy.container method)": [[397, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[398, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[398, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[399, "ivy.Array.dot"]], "dot() (ivy.container method)": [[399, "ivy.Container.dot"]], "eig() (ivy.array method)": [[400, "ivy.Array.eig"], [623, "ivy.Array.eig"]], "eig() (ivy.container method)": [[400, "ivy.Container.eig"], [623, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[401, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[401, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[402, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[402, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[403, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[403, "ivy.Container.general_inner_product"]], "initialize_tucker() (ivy.array method)": [[404, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[404, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[406, "ivy.Array.kron"]], "kron() (ivy.container method)": [[406, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[408, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[408, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[409, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[409, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[410, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[410, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[411, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[411, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[412, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[412, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[413, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[413, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[414, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[414, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[415, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[415, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[416, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[416, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[417, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[417, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[418, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[418, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[420, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[420, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[421, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[421, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[422, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[422, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[423, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[423, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[424, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[424, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[425, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[425, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[426, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[426, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[427, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[429, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[429, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[430, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[430, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[431, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[431, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[432, "ivy.Array.expand"]], "expand() (ivy.container method)": [[432, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[433, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[433, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[434, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[434, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[435, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[435, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[436, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[436, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[437, "ivy.Array.fold"]], "fold() (ivy.container method)": [[437, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[438, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[438, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[439, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[439, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[440, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[440, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[441, "ivy.Array.i0"]], "i0() (ivy.container method)": [[441, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[442, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[442, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[443, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[443, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[444, "ivy.Array.pad"]], "pad() (ivy.container method)": [[444, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[445, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[445, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[446, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[446, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[447, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[447, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[448, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[448, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[450, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[450, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[451, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[451, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[452, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[452, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[453, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[453, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[454, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[454, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[455, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[455, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[456, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[456, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[457, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[457, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[458, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[458, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[459, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[459, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[460, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[460, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[461, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[461, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[462, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[462, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[463, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[463, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[464, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[464, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[465, "ivy.Array.beta"]], "beta() (ivy.container method)": [[465, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[466, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[466, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[467, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[467, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[468, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[468, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[469, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[469, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[470, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[471, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[471, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[476, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[476, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[477, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[477, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[478, "ivy.Array.cov"]], "cov() (ivy.container method)": [[478, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[479, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[479, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[480, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[480, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[481, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[481, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[482, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[482, "ivy.Container.igamma"]], "median() (ivy.array method)": [[483, "ivy.Array.median"]], "median() (ivy.container method)": [[483, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[484, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[484, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[485, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[485, "ivy.Container.nanmedian"]], "nanprod() (ivy.array method)": [[486, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[486, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[487, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[487, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[488, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[488, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[489, "ivy.all_equal"], [588, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[489, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[489, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[490, "ivy.arg_info"], [588, "ivy.arg_info"]], "arg_names() (in module ivy)": [[491, "ivy.arg_names"], [588, "ivy.arg_names"]], "array_equal() (in module ivy)": [[492, "ivy.array_equal"], [588, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[492, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[492, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[493, "ivy.assert_supports_inplace"], [588, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[493, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[493, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[494, "ivy.cache_fn"], [588, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[495, "ivy.clip_matrix_norm"], [588, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[495, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[495, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[496, "ivy.clip_vector_norm"], [588, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[496, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[496, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[497, "ivy.container_types"], [588, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[498, "ivy.current_backend_str"], [588, "ivy.current_backend_str"]], "default() (in module ivy)": [[499, "ivy.default"], [588, "ivy.default"]], "default() (ivy.array method)": [[499, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[500, "ivy.einops_rearrange"], [588, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[500, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[500, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[501, "ivy.einops_reduce"], [588, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[501, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[501, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[502, "ivy.einops_repeat"], [588, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[502, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[502, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[503, "ivy.exists"], [588, "ivy.exists"]], "exists() (ivy.array method)": [[503, "ivy.Array.exists"]], "exists() (ivy.container method)": [[503, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[504, "ivy.fourier_encode"], [588, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[504, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[504, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[505, "ivy.function_supported_devices_and_dtypes"], [588, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[506, "ivy.function_unsupported_devices_and_dtypes"], [588, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[507, "ivy.gather"], [588, "ivy.gather"]], "gather() (ivy.array method)": [[507, "ivy.Array.gather"]], "gather() (ivy.container method)": [[507, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[508, "ivy.gather_nd"], [588, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[508, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[508, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[509, "ivy.get_all_arrays_in_memory"], [588, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[510, "ivy.get_item"], [588, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[511, "ivy.get_num_dims"], [588, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[511, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[511, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[512, "ivy.get_referrers_recursive"], [588, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[513, "ivy.has_nans"], [588, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[513, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[513, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[514, "ivy.inplace_arrays_supported"], [588, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[515, "ivy.inplace_decrement"], [588, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[515, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[515, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[516, "ivy.inplace_increment"], [588, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[516, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[516, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[517, "ivy.inplace_update"], [588, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[517, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[517, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[518, "ivy.inplace_variables_supported"], [588, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[519, "ivy.is_array"], [588, "ivy.is_array"]], "is_array() (ivy.array method)": [[519, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[519, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[520, "ivy.is_ivy_array"], [588, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[520, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[520, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[521, "ivy.is_ivy_container"], [588, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[521, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[522, "ivy.is_ivy_nested_array"], [588, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[523, "ivy.is_native_array"], [588, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[523, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[523, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[524, "ivy.isin"], [588, "ivy.isin"]], "isin() (ivy.array method)": [[524, "ivy.Array.isin"]], "isin() (ivy.container method)": [[524, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[525, "ivy.isscalar"], [588, "ivy.isscalar"]], "itemsize() (in module ivy)": [[526, "ivy.itemsize"], [588, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[526, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[526, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[527, "ivy.match_kwargs"], [588, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[528, "ivy.multiprocessing"], [588, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[529, "ivy.num_arrays_in_memory"], [588, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[530, "ivy.print_all_arrays_in_memory"], [588, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[531, "ivy.scatter_flat"], [588, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[531, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[531, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[532, "ivy.scatter_nd"], [588, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[532, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[532, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[533, "ivy.set_array_mode"], [588, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[534, "ivy.set_exception_trace_mode"], [588, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[535, "ivy.set_inplace_mode"], [588, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[536, "ivy.set_item"], [588, "ivy.set_item"]], "set_min_base() (in module ivy)": [[537, "ivy.set_min_base"], [588, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[538, "ivy.set_min_denominator"], [588, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[539, "ivy.set_nestable_mode"], [588, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[540, "ivy.set_precise_mode"], [588, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[541, "ivy.set_queue_timeout"], [588, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[542, "ivy.set_shape_array_mode"], [588, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[543, "ivy.set_show_func_wrapper_trace_mode"], [588, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[544, "ivy.set_tmp_dir"], [588, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[545, "ivy.shape"], [588, "ivy.shape"]], "shape() (ivy.array method)": [[545, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[546, "ivy.stable_divide"], [588, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[546, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[546, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[547, "ivy.stable_pow"], [588, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[547, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[547, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[548, "ivy.strides"], [588, "ivy.strides"]], "strides() (ivy.array method)": [[548, "ivy.Array.strides"]], "strides() (ivy.container method)": [[548, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[549, "ivy.supports_inplace_updates"], [588, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[549, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[549, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[550, "ivy.to_ivy_shape"], [588, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[551, "ivy.to_list"], [588, "ivy.to_list"]], "to_list() (ivy.array method)": [[551, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[551, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[552, "ivy.to_native_shape"], [588, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[553, "ivy.to_numpy"], [588, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[553, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[553, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[554, "ivy.to_scalar"], [588, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[554, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[554, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[555, "ivy.try_else_none"], [588, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[556, "ivy.unset_array_mode"], [588, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[557, "ivy.unset_exception_trace_mode"], [588, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[558, "ivy.unset_inplace_mode"], [588, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[559, "ivy.unset_min_base"], [588, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[560, "ivy.unset_min_denominator"], [588, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[561, "ivy.unset_nestable_mode"], [588, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[562, "ivy.unset_precise_mode"], [588, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[563, "ivy.unset_queue_timeout"], [588, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[564, "ivy.unset_shape_array_mode"], [588, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[565, "ivy.unset_show_func_wrapper_trace_mode"], [588, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[566, "ivy.unset_tmp_dir"], [588, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[567, "ivy.value_is_nan"], [588, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[567, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[567, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[568, "ivy.vmap"], [588, "ivy.vmap"]], "adam_step() (in module ivy)": [[569, "ivy.adam_step"], [589, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[569, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[569, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[570, "ivy.adam_update"], [589, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[570, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[570, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[571, "ivy.execute_with_gradients"], [589, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[572, "ivy.grad"], [589, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[573, "ivy.gradient_descent_update"], [589, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[573, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[573, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[574, "ivy.jac"], [589, "ivy.jac"]], "lamb_update() (in module ivy)": [[575, "ivy.lamb_update"], [589, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[575, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[575, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[576, "ivy.lars_update"], [589, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[576, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[576, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[577, "ivy.optimizer_update"], [589, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[577, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[577, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[578, "ivy.stop_gradient"], [589, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[578, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[578, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[579, "ivy.value_and_grad"], [589, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[580, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[581, "ivy.e"]], "inf (in module ivy)": [[581, "ivy.inf"]], "ivy.functional.ivy.constants": [[581, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[581, "ivy.nan"]], "newaxis (in module ivy)": [[581, "ivy.newaxis"]], "pi (in module ivy)": [[581, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[582, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[583, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[583, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[584, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[584, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[584, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[584, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[584, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[584, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[585, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[585, "ivy.Profiler"]], "ivy.functional.ivy.device": [[585, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[586, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[587, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[588, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[588, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[588, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[589, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[590, "ivy.conv"], [603, "ivy.conv"]], "conv1d() (in module ivy)": [[590, "ivy.conv1d"], [604, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[590, "ivy.conv1d_transpose"], [605, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[590, "ivy.conv2d"], [606, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[590, "ivy.conv2d_transpose"], [607, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[590, "ivy.conv3d"], [608, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[590, "ivy.conv3d_transpose"], [609, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[590, "ivy.conv_general_dilated"], [610, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[590, "ivy.conv_general_transpose"], [611, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[590, "ivy.depthwise_conv2d"], [612, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[590, "ivy.dropout"], [613, "ivy.dropout"]], "ivy.functional.ivy.layers": [[590, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[590, "ivy.linear"], [614, "ivy.linear"]], "lstm_update() (in module ivy)": [[590, "ivy.lstm_update"], [615, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[590, "ivy.multi_head_attention"], [616, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[590, "ivy.scaled_dot_product_attention"], [617, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[591, "ivy.cholesky"], [618, "ivy.cholesky"]], "cross() (in module ivy)": [[591, "ivy.cross"], [619, "ivy.cross"]], "det() (in module ivy)": [[591, "ivy.det"], [620, "ivy.det"]], "diag() (in module ivy)": [[591, "ivy.diag"], [621, "ivy.diag"]], "diagonal() (in module ivy)": [[591, "ivy.diagonal"], [622, "ivy.diagonal"]], "eigh() (in module ivy)": [[591, "ivy.eigh"], [624, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[591, "ivy.eigvalsh"], [625, "ivy.eigvalsh"]], "inner() (in module ivy)": [[591, "ivy.inner"], [626, "ivy.inner"]], "inv() (in module ivy)": [[591, "ivy.inv"], [627, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[591, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[591, "ivy.lu_factor"], [628, "ivy.lu_factor"]], "matmul() (in module ivy)": [[591, "ivy.matmul"], [629, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[591, "ivy.matrix_norm"], [630, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[591, "ivy.matrix_power"], [631, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[591, "ivy.matrix_rank"], [632, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[591, "ivy.matrix_transpose"], [633, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[591, "ivy.outer"], [634, "ivy.outer"]], "pinv() (in module ivy)": [[591, "ivy.pinv"], [635, "ivy.pinv"]], "qr() (in module ivy)": [[591, "ivy.qr"], [636, "ivy.qr"]], "slogdet() (in module ivy)": [[591, "ivy.slogdet"], [637, "ivy.slogdet"]], "solve() (in module ivy)": [[591, "ivy.solve"], [638, "ivy.solve"]], "svd() (in module ivy)": [[591, "ivy.svd"], [639, "ivy.svd"]], "svdvals() (in module ivy)": [[591, "ivy.svdvals"], [640, "ivy.svdvals"]], "tensordot() (in module ivy)": [[591, "ivy.tensordot"], [641, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[591, "ivy.tensorsolve"], [642, "ivy.tensorsolve"]], "trace() (in module ivy)": [[591, "ivy.trace"], [643, "ivy.trace"]], "vander() (in module ivy)": [[591, "ivy.vander"], [644, "ivy.vander"]], "vecdot() (in module ivy)": [[591, "ivy.vecdot"], [645, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[591, "ivy.vector_norm"], [646, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[591, "ivy.vector_to_skew_symmetric_matrix"], [647, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[592, "ivy.binary_cross_entropy"], [648, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[592, "ivy.cross_entropy"], [649, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[592, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[592, "ivy.sparse_cross_entropy"], [650, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[593, "ivy.clip"], [651, "ivy.clip"]], "concat() (in module ivy)": [[593, "ivy.concat"], [652, "ivy.concat"]], "constant_pad() (in module ivy)": [[593, "ivy.constant_pad"], [653, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[593, "ivy.expand_dims"], [654, "ivy.expand_dims"]], "flip() (in module ivy)": [[593, "ivy.flip"], [655, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[593, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[593, "ivy.permute_dims"], [656, "ivy.permute_dims"]], "repeat() (in module ivy)": [[593, "ivy.repeat"], [657, "ivy.repeat"]], "reshape() (in module ivy)": [[593, "ivy.reshape"], [658, "ivy.reshape"]], "roll() (in module ivy)": [[593, "ivy.roll"], [659, "ivy.roll"]], "split() (in module ivy)": [[593, "ivy.split"], [660, "ivy.split"]], "squeeze() (in module ivy)": [[593, "ivy.squeeze"], [661, "ivy.squeeze"]], "stack() (in module ivy)": [[593, "ivy.stack"], [662, "ivy.stack"]], "swapaxes() (in module ivy)": [[593, "ivy.swapaxes"], [663, "ivy.swapaxes"]], "tile() (in module ivy)": [[593, "ivy.tile"], [664, "ivy.tile"]], "unstack() (in module ivy)": [[593, "ivy.unstack"], [665, "ivy.unstack"]], "zero_pad() (in module ivy)": [[593, "ivy.zero_pad"], [666, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[594, "ivy.fomaml_step"], [667, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[594, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[594, "ivy.maml_step"], [668, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[594, "ivy.reptile_step"], [669, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[595, "ivy.all_nested_indices"], [670, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[595, "ivy.copy_nest"], [671, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[595, "ivy.duplicate_array_index_chains"], [672, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[595, "ivy.index_nest"], [673, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[595, "ivy.insert_into_nest_at_index"], [674, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[595, "ivy.insert_into_nest_at_indices"], [675, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[595, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[595, "ivy.map"], [676, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[595, "ivy.map_nest_at_index"], [677, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[595, "ivy.map_nest_at_indices"], [678, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[595, "ivy.multi_index_nest"], [679, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[595, "ivy.nested_any"], [680, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[595, "ivy.nested_argwhere"], [681, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[595, "ivy.nested_map"], [682, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[595, "ivy.nested_multi_map"], [683, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[595, "ivy.prune_empty"], [684, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[595, "ivy.prune_nest_at_index"], [685, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[595, "ivy.prune_nest_at_indices"], [686, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[595, "ivy.set_nest_at_index"], [687, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[595, "ivy.set_nest_at_indices"], [688, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[596, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[596, "ivy.layer_norm"], [689, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[597, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[597, "ivy.multinomial"], [690, "ivy.multinomial"]], "randint() (in module ivy)": [[597, "ivy.randint"], [691, "ivy.randint"]], "random_normal() (in module ivy)": [[597, "ivy.random_normal"], [692, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[597, "ivy.random_uniform"], [693, "ivy.random_uniform"]], "seed() (in module ivy)": [[597, "ivy.seed"], [694, "ivy.seed"]], "shuffle() (in module ivy)": [[597, "ivy.shuffle"], [695, "ivy.shuffle"]], "argmax() (in module ivy)": [[598, "ivy.argmax"], [696, "ivy.argmax"]], "argmin() (in module ivy)": [[598, "ivy.argmin"], [697, "ivy.argmin"]], "argwhere() (in module ivy)": [[598, "ivy.argwhere"], [698, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[598, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[598, "ivy.nonzero"], [699, "ivy.nonzero"]], "where() (in module ivy)": [[598, "ivy.where"], [700, "ivy.where"]], "ivy.functional.ivy.set": [[599, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[599, "ivy.unique_all"], [701, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[599, "ivy.unique_counts"], [702, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[599, "ivy.unique_inverse"], [703, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[599, "ivy.unique_values"], [704, "ivy.unique_values"]], "argsort() (in module ivy)": [[600, "ivy.argsort"], [705, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[600, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[600, "ivy.msort"], [706, "ivy.msort"]], "searchsorted() (in module ivy)": [[600, "ivy.searchsorted"], [707, "ivy.searchsorted"]], "sort() (in module ivy)": [[600, "ivy.sort"], [708, "ivy.sort"]], "cumprod() (in module ivy)": [[601, "ivy.cumprod"], [709, "ivy.cumprod"]], "cumsum() (in module ivy)": [[601, "ivy.cumsum"], [710, "ivy.cumsum"]], "einsum() (in module ivy)": [[601, "ivy.einsum"], [711, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[601, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[601, "ivy.max"], [712, "ivy.max"]], "mean() (in module ivy)": [[601, "ivy.mean"], [713, "ivy.mean"]], "min() (in module ivy)": [[601, "ivy.min"], [714, "ivy.min"]], "prod() (in module ivy)": [[601, "ivy.prod"], [715, "ivy.prod"]], "std() (in module ivy)": [[601, "ivy.std"], [716, "ivy.std"]], "sum() (in module ivy)": [[601, "ivy.sum"], [717, "ivy.sum"]], "var() (in module ivy)": [[601, "ivy.var"], [718, "ivy.var"]], "all() (in module ivy)": [[602, "ivy.all"], [719, "ivy.all"]], "any() (in module ivy)": [[602, "ivy.any"], [720, "ivy.any"]], "ivy.functional.ivy.utility": [[602, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[602, "ivy.load"], [721, "ivy.load"]], "save() (in module ivy)": [[602, "ivy.save"], [722, "ivy.save"]], "conv1d() (ivy.array method)": [[604, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[604, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[605, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[605, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[606, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[606, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[607, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[607, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[608, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[608, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[609, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[609, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[612, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[612, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[613, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[613, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[614, "ivy.Array.linear"]], "linear() (ivy.container method)": [[614, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[615, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[615, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[616, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[616, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[617, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[617, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[618, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[618, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[619, "ivy.Array.cross"]], "cross() (ivy.container method)": [[619, "ivy.Container.cross"]], "det() (ivy.array method)": [[620, "ivy.Array.det"]], "det() (ivy.container method)": [[620, "ivy.Container.det"]], "diag() (ivy.array method)": [[621, "ivy.Array.diag"]], "diag() (ivy.container method)": [[621, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[622, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[622, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[624, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[624, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[625, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[625, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[626, "ivy.Array.inner"]], "inner() (ivy.container method)": [[626, "ivy.Container.inner"]], "inv() (ivy.array method)": [[627, "ivy.Array.inv"]], "inv() (ivy.container method)": [[627, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[629, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[629, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[630, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[630, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[631, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[631, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[632, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[632, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[633, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[633, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[634, "ivy.Array.outer"]], "outer() (ivy.container method)": [[634, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[635, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[635, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[636, "ivy.Array.qr"]], "qr() (ivy.container method)": [[636, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[637, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[637, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[638, "ivy.Array.solve"]], "solve() (ivy.container method)": [[638, "ivy.Container.solve"]], "svd() (ivy.array method)": [[639, "ivy.Array.svd"]], "svd() (ivy.container method)": [[639, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[640, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[640, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[641, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[641, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[642, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[642, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[643, "ivy.Array.trace"]], "trace() (ivy.container method)": [[643, "ivy.Container.trace"]], "vander() (ivy.array method)": [[644, "ivy.Array.vander"]], "vander() (ivy.container method)": [[644, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[645, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[645, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[646, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[646, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[647, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[647, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[648, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[648, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[649, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[649, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[650, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[650, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[651, "ivy.Array.clip"]], "clip() (ivy.container method)": [[651, "ivy.Container.clip"]], "concat() (ivy.array method)": [[652, "ivy.Array.concat"]], "concat() (ivy.container method)": [[652, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[653, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[653, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[654, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[654, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[655, "ivy.Array.flip"]], "flip() (ivy.container method)": [[655, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[656, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[656, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[657, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[657, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[658, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[658, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[659, "ivy.Array.roll"]], "roll() (ivy.container method)": [[659, "ivy.Container.roll"]], "split() (ivy.array method)": [[660, "ivy.Array.split"]], "split() (ivy.container method)": [[660, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[661, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[661, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[662, "ivy.Array.stack"]], "stack() (ivy.container method)": [[662, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[663, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[663, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[664, "ivy.Array.tile"]], "tile() (ivy.container method)": [[664, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[665, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[665, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[666, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[666, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[689, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[689, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[690, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[690, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[691, "ivy.Array.randint"]], "randint() (ivy.container method)": [[691, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[692, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[692, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[693, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[693, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[695, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[695, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[696, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[696, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[697, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[697, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[698, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[698, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[699, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[699, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[700, "ivy.Array.where"]], "where() (ivy.container method)": [[700, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[701, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[701, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[702, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[702, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[703, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[703, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[704, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[704, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[705, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[705, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[706, "ivy.Array.msort"]], "msort() (ivy.container method)": [[706, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[707, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[707, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[708, "ivy.Array.sort"]], "sort() (ivy.container method)": [[708, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[709, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[709, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[710, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[710, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[711, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[711, "ivy.Container.einsum"]], "max() (ivy.array method)": [[712, "ivy.Array.max"]], "max() (ivy.container method)": [[712, "ivy.Container.max"]], "mean() (ivy.array method)": [[713, "ivy.Array.mean"]], "mean() (ivy.container method)": [[713, "ivy.Container.mean"]], "min() (ivy.array method)": [[714, "ivy.Array.min"]], "min() (ivy.container method)": [[714, "ivy.Container.min"]], "prod() (ivy.array method)": [[715, "ivy.Array.prod"]], "prod() (ivy.container method)": [[715, "ivy.Container.prod"]], "std() (ivy.array method)": [[716, "ivy.Array.std"]], "std() (ivy.container method)": [[716, "ivy.Container.std"]], "sum() (ivy.array method)": [[717, "ivy.Array.sum"]], "sum() (ivy.container method)": [[717, "ivy.Container.sum"]], "var() (ivy.array method)": [[718, "ivy.Array.var"]], "var() (ivy.container method)": [[718, "ivy.Container.var"]], "all() (ivy.array method)": [[719, "ivy.Array.all"]], "all() (ivy.container method)": [[719, "ivy.Container.all"]], "any() (ivy.array method)": [[720, "ivy.Array.any"]], "any() (ivy.container method)": [[720, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[725, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[725, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[725, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[725, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[725, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[725, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[725, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[725, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[725, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[725, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[725, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[725, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[725, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[725, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[725, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[725, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[725, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[725, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[725, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[725, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[726, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[726, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[726, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[726, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[726, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[726, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[726, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[726, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[727, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[727, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[727, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[728, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[728, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[728, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[728, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[728, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[728, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[728, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[728, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[728, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[728, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[728, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[728, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[728, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[728, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[728, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[728, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[729, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[729, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[729, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[729, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[729, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[729, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[729, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[729, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[729, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[729, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[729, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[729, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[729, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[729, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[729, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[729, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[729, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[729, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[729, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[729, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[729, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[729, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[729, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[729, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[729, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[729, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[730, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[730, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[730, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[730, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[730, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[730, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[730, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[731, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[731, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[731, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[731, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[731, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[731, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[731, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[732, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[732, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[732, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[732, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[732, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[733, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[733, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[733, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[733, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[733, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[733, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[733, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[733, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[733, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[733, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[733, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[733, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[733, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[733, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[733, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[733, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[733, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[733, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[733, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[733, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[733, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[734, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[734, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[734, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[735, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[735, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[736, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[737, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[737, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[737, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[737, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[737, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[737, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[737, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[737, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[737, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[737, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[737, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[738, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[738, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[738, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[739, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[739, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[739, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[739, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[739, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[739, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[740, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[740, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[741, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[741, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[742, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[742, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[742, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[742, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[742, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[742, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[742, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[742, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[742, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[742, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[742, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[742, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[742, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[742, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[742, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[742, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[742, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[742, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[742, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[742, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[742, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[742, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[742, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[742, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[742, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[742, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[743, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[743, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[743, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[744, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[744, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[744, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[745, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[745, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[745, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[745, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[745, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[746, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[746, "module-ivy.utils.verbosity"]], "applied libraries": [[789, "term-Applied-Libraries"]], "automatic code conversions": [[789, "term-Automatic-Code-Conversions"]], "backend handler": [[789, "term-Backend-Handler"]], "compositional functions": [[789, "term-Compositional-Functions"]], "convenience functions": [[789, "term-Convenience-Functions"]], "framework": [[789, "term-Framework"]], "framework handler": [[789, "term-Framework-Handler"]], "graph compiler": [[789, "term-Graph-Compiler"]], "ivy array": [[789, "term-Ivy-Array"]], "ivy backends": [[789, "term-Ivy-Backends"]], "ivy builder": [[789, "term-Ivy-Builder"]], "ivy compiler": [[789, "term-Ivy-Compiler"]], "ivy container": [[789, "term-Ivy-Container"]], "ivy frontends": [[789, "term-Ivy-Frontends"]], "ivy functional api": [[789, "term-Ivy-Functional-API"]], "ivy graph compiler": [[789, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[789, "term-Ivy-Transpiler"]], "mixed functions": [[789, "term-Mixed-Functions"]], "native array": [[789, "term-Native-Array"]], "nestable functions": [[789, "term-Nestable-Functions"]], "pipeline": [[789, "term-Pipeline"]], "primary functions": [[789, "term-Primary-Functions"]], "standalone functions": [[789, "term-Standalone-Functions"]], "submodule helper functions": [[789, "term-Submodule-Helper-Functions"]], "built-in function": [[795, "ivy.compile"], [796, "ivy.transpile"], [796, "ivy.unify"]], "ivy.compile()": [[795, "ivy.compile"]], "ivy.transpile()": [[796, "ivy.transpile"]], "ivy.unify()": [[796, "ivy.unify"]]}})