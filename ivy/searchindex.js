Search.setIndex({"docnames": ["docs/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/ivy.data_classes.array", "docs/data_classes/ivy.data_classes.container", "docs/framework/ivy.stateful", "docs/framework/stateful/ivy.stateful.activations", "docs/framework/stateful/ivy.stateful.converters", "docs/framework/stateful/ivy.stateful.helpers", "docs/framework/stateful/ivy.stateful.initializers", "docs/framework/stateful/ivy.stateful.layers", "docs/framework/stateful/ivy.stateful.module", "docs/framework/stateful/ivy.stateful.norms", "docs/framework/stateful/ivy.stateful.optimizers", "docs/framework/stateful/ivy.stateful.sequential", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation._ivy_to_native", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_complex128", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_float64", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_function_list", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_functions_from_string", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._handle_nestable_dtype_info", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._is_valid_dtypes_attributes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._lstrip_lines", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._nested_get", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device._get_devices", "docs/functional/ivy/device/ivy.functional.ivy.device._get_nvml_gpu_handle", "docs/functional/ivy/device/ivy.functional.ivy.device._is_valid_devices_attributes", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/general/ivy.functional.ivy.general._all_dnd_combinations", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_difference", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_intersection", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_union", "docs/functional/ivy/general/ivy.functional.ivy.general._get_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general._is_valid_device_and_dtypes_attributes", "docs/functional/ivy/general/ivy.functional.ivy.general._parse_ellipsis", "docs/functional/ivy/general/ivy.functional.ivy.general._valid_attrib_combinations", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._arrays_to_float_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._check_if_empty", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_duplicate_index_chains", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_variables_and_indices", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_y", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_float_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_native_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_y_and_ret_idxs", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._idxs_to_str", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._is_variable", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._non_finite_to_zero", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._process_func_ret_and_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._set_duplicates", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._stop_grad_and_index", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._to_ivy", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable_data", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers._deconv_length", "docs/functional/ivy/layers/ivy.functional.ivy.layers._get_x_data_format", "docs/functional/ivy/layers/ivy.functional.ivy.layers._handle_padding", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses._reduce_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation._calculate_out_shape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta._compute_cost_and_update_grads", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_task", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_batched", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_with_for_loop", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random._check_bounds_and_get_shape", "docs/functional/ivy/random/ivy.functional.ivy.random._check_shapes_broadcastable", "docs/functional/ivy/random/ivy.functional.ivy.random._check_valid_scale", "docs/functional/ivy/random/ivy.functional.ivy.random._randint_check_dtype_and_bound", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical._get_promoted_type_of_operands", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/nested-array/ivy.nested_array", "docs/nested-array/nested_array/ivy.nested_array.nested_array", "docs/testing/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/testing/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/testing/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/testing/helpers/ivy_tests.test_ivy.helpers.globals", "docs/testing/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/testing/helpers/ivy_tests.test_ivy.helpers.structs", "docs/testing/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/testing/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/testing/ivy_tests.test_ivy.helpers", "docs/utilities/ivy.utils", "docs/utilities/utils/ivy.utils.assertions", "docs/utilities/utils/ivy.utils.backend", "docs/utilities/utils/ivy.utils.dynamic_import", "docs/utilities/utils/ivy.utils.exceptions", "docs/utilities/utils/ivy.utils.inspection", "docs/utilities/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["docs/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/ivy.data_classes.array.rst", "docs/data_classes/ivy.data_classes.container.rst", "docs/framework/ivy.stateful.rst", "docs/framework/stateful/ivy.stateful.activations.rst", "docs/framework/stateful/ivy.stateful.converters.rst", "docs/framework/stateful/ivy.stateful.helpers.rst", "docs/framework/stateful/ivy.stateful.initializers.rst", "docs/framework/stateful/ivy.stateful.layers.rst", "docs/framework/stateful/ivy.stateful.module.rst", "docs/framework/stateful/ivy.stateful.norms.rst", "docs/framework/stateful/ivy.stateful.optimizers.rst", "docs/framework/stateful/ivy.stateful.sequential.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation._ivy_to_native.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_complex128.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_float64.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_function_list.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_functions_from_string.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._handle_nestable_dtype_info.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._is_valid_dtypes_attributes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._lstrip_lines.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._nested_get.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._get_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._get_nvml_gpu_handle.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._is_valid_devices_attributes.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._all_dnd_combinations.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_difference.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_intersection.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_union.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._get_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._is_valid_device_and_dtypes_attributes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._parse_ellipsis.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._valid_attrib_combinations.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._arrays_to_float_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._check_if_empty.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_duplicate_index_chains.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_variables_and_indices.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_y.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_float_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_native_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_y_and_ret_idxs.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._idxs_to_str.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._is_variable.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._non_finite_to_zero.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._process_func_ret_and_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._set_duplicates.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._stop_grad_and_index.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._to_ivy.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable_data.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._deconv_length.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._get_x_data_format.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._handle_padding.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses._reduce_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation._calculate_out_shape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._compute_cost_and_update_grads.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_task.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_batched.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_with_for_loop.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_bounds_and_get_shape.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_shapes_broadcastable.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_valid_scale.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._randint_check_dtype_and_bound.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical._get_promoted_type_of_operands.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/nested-array/ivy.nested_array.rst", "docs/nested-array/nested_array/ivy.nested_array.nested_array.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/testing/ivy_tests.test_ivy.helpers.rst", "docs/utilities/ivy.utils.rst", "docs/utilities/utils/ivy.utils.assertions.rst", "docs/utilities/utils/ivy.utils.backend.rst", "docs/utilities/utils/ivy.utils.dynamic_import.rst", "docs/utilities/utils/ivy.utils.exceptions.rst", "docs/utilities/utils/ivy.utils.inspection.rst", "docs/utilities/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "stateful", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Module", "Norms", "Optimizers", "Sequential", "ivy", "deserialize", "gelu", "get", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "IfElse", "WhileLoop", "if_else", "while_loop", "_ivy_to_native", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "_check_complex128", "_check_float64", "_get_dtypes", "_get_function_list", "_get_functions_from_string", "_handle_nestable_dtype_info", "_is_valid_dtypes_attributes", "_lstrip_lines", "_nested_get", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_int_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "_get_devices", "_get_nvml_gpu_handle", "_is_valid_devices_attributes", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "fmod", "greater", "greater_equal", "isfinite", "isinf", "isnan", "isreal", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "rad2deg", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "trunc_divide", "_all_dnd_combinations", "_dnd_dict_difference", "_dnd_dict_intersection", "_dnd_dict_union", "_get_devices_and_dtypes", "_is_valid_device_and_dtypes_attributes", "_parse_ellipsis", "_valid_attrib_combinations", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_show_func_wrapper_trace_mode", "get_tmp_dir", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "isin", "isscalar", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "stable_pow", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "value_is_nan", "vmap", "_arrays_to_float_variables", "_check_if_empty", "_get_duplicate_index_chains", "_get_native_variables_and_indices", "_get_native_y", "_get_required_float_variables", "_get_required_native_variables", "_get_y_and_ret_idxs", "_idxs_to_str", "_is_variable", "_non_finite_to_zero", "_process_func_ret_and_grads", "_set_duplicates", "_stop_grad_and_index", "_to_ivy", "_variable", "_variable_data", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "value_and_grad", "with_grads", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "_deconv_length", "_get_x_data_format", "_handle_padding", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "_reduce_loss", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "_calculate_out_shape", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "_compute_cost_and_update_grads", "_train_task", "_train_tasks", "_train_tasks_batched", "_train_tasks_with_for_loop", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "_check_bounds_and_get_shape", "_check_shapes_broadcastable", "_check_valid_scale", "_randint_check_dtype_and_bound", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "searchsorted", "sort", "_get_promoted_type_of_operands", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "nested_array", "Nested array", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Structs", "Test parameter flags", "Testing helpers", "helpers", "utils", "Assertions", "Backend", "Dynamic import", "Exceptions", "Inspection", "Verbosity", "Contents", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 92, 96, 121, 124, 135, 137, 138, 249, 251, 258, 283, 291, 310, 359, 360, 361, 363, 364, 365, 366, 371, 374, 375, 394, 396, 402, 413, 457, 468, 489, 493, 494, 505, 506, 512, 515, 516, 518, 519, 520, 529, 538, 545, 546, 548, 549, 550, 551, 554, 557, 560, 561, 563, 565, 566, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 586], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 519, 520, 523, 525, 526, 527, 528, 532, 533, 534, 536, 537, 539, 541, 542, 544, 546, 548, 549, 551, 553, 554, 555, 556, 558, 563, 564, 571, 573, 574, 575, 586], "data_class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "arraiarraywithactiv": [0, 45], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 518, 519, 520, 523, 525, 526, 527, 528, 531, 532, 533, 534, 535, 538, 539, 540, 542, 543, 546, 547, 559, 578, 579, 580, 581, 582], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 87, 133, 196, 209, 210, 211, 212, 224, 271, 299, 309, 359, 360, 361, 362, 363, 364, 365, 369, 375, 377, 435, 491, 492, 493, 494, 501, 512, 516, 518, 519, 526, 529, 540, 542, 546, 547, 548, 552, 554, 556, 557, 560, 561, 562, 563, 565, 572, 579, 584, 586], "abc": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 50, 51, 55, 261, 361, 364, 371, 474, 512, 567], "_abc_impl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "_abc_data": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "object": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 52, 53, 58, 60, 79, 83, 91, 112, 121, 124, 133, 169, 219, 356, 359, 360, 361, 363, 364, 365, 371, 373, 459, 461, 463, 464, 465, 471, 472, 473, 474, 485, 512, 515, 516, 518, 519, 529, 543, 546, 547, 556, 559, 560, 561, 563, 567, 570, 579, 585], "gelu": [0, 22, 48, 356, 529], "approxim": [0, 6, 11, 22, 28, 29, 34, 48, 59, 175, 176, 178, 179, 180, 181, 190, 191, 196, 197, 209, 210, 211, 212, 224, 230, 231, 235, 236, 356, 362, 363, 367, 411, 414, 551, 559], "falsout": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 108, 110, 119, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 253, 254, 258, 259, 260, 262, 265, 266, 283, 291, 295, 296, 342, 343, 346, 348, 349, 350, 352, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 490, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 520, 529, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 121, 124, 126, 127, 128, 129, 130, 131, 134, 144, 146, 152, 153, 164, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 276, 279, 281, 282, 283, 285, 286, 288, 292, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 460, 461, 462, 463, 466, 467, 468, 469, 471, 472, 473, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 520, 525, 529, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 565, 567, 569, 570], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 121, 124, 127, 128, 129, 130, 134, 154, 165, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 303, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 520, 535, 538, 539, 540, 542, 543, 548, 550, 551, 554, 555, 556, 557, 558, 561, 568, 569, 570, 574, 580], "method": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 121, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 351, 352, 353, 355, 359, 360, 362, 363, 364, 365, 367, 368, 371, 374, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 467, 468, 469, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 520, 538, 540, 542, 543, 547, 548, 550, 551, 553, 554, 555, 556, 561, 562, 565, 566, 569, 570, 573, 580, 586], "variant": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 121, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 363, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 411, 414, 415, 416, 418, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 543, 550, 551, 563], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 121, 124, 127, 128, 129, 130, 133, 134, 151, 154, 163, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 275, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 302, 308, 309, 310, 312, 314, 315, 323, 324, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 462, 463, 468, 469, 473, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 516, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "simpli": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 362, 363, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 414, 415, 416, 418, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 529, 538, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 558, 559, 560, 561, 563, 565, 569, 570, 573, 574, 580, 585], "wrap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 277, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 304, 308, 309, 310, 312, 314, 315, 322, 323, 342, 343, 346, 348, 349, 350, 352, 363, 364, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 414, 415, 416, 418, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 515, 529, 541, 542, 543, 544, 546, 547, 548, 549, 551, 552, 553, 554, 555, 558, 559, 561, 565, 567, 570, 573, 574, 575, 579, 580, 585, 586], "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 112, 121, 122, 123, 124, 127, 128, 129, 130, 133, 134, 154, 156, 157, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 287, 288, 289, 291, 294, 295, 296, 301, 302, 304, 308, 309, 310, 312, 314, 315, 316, 319, 322, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 458, 462, 463, 464, 466, 467, 468, 469, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 516, 520, 527, 529, 531, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 553, 558, 564, 566, 567, 568, 569, 571, 572, 574, 576, 577, 578, 579, 580, 585, 586], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 363, 366, 371, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 414, 415, 416, 418, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 467, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 529, 531, 532, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 579, 580, 581, 583], "docstr": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 121, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 324, 342, 343, 346, 348, 349, 350, 352, 359, 360, 362, 363, 364, 367, 369, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 537, 538, 541, 545, 553, 554, 555, 559, 562], "also": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 109, 110, 111, 124, 127, 128, 129, 130, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 466, 467, 468, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 54, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 356, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 411, 413, 414, 415, 416, 418, 422, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 462, 465, 468, 469, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 529, 534, 536, 538, 539, 540, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 567, 568, 569, 570, 571, 573, 574, 580], "minim": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 363, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 414, 415, 416, 418, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 551, 558, 560, 563, 565, 577, 585], "chang": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 109, 110, 111, 124, 128, 129, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 363, 369, 371, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 408, 409, 414, 415, 416, 418, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 468, 473, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 515, 529, 533, 535, 538, 539, 540, 542, 544, 545, 546, 547, 548, 550, 551, 559, 560, 561, 562, 563, 565, 569, 573, 582, 585], "parametself": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 55, 59, 61, 62, 63, 64, 65, 66, 67, 75, 79, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 131, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 361, 363, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 529, 540, 543, 546, 552, 559, 560, 565, 567, 568, 569, 570], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 151, 153, 154, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 273, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 297, 301, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 457, 459, 462, 463, 464, 465, 467, 468, 469, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 520, 542, 543, 544, 546, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 580, 583], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 74, 75, 79, 84, 85, 86, 87, 88, 90, 92, 96, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 142, 146, 153, 154, 156, 157, 159, 160, 163, 164, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 273, 274, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 306, 307, 308, 309, 310, 312, 314, 315, 323, 343, 344, 346, 348, 349, 350, 351, 352, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 382, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 422, 423, 425, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 455, 456, 457, 462, 463, 464, 466, 467, 468, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 516, 548, 550, 552, 558, 559, 561, 562, 563, 565, 570], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 15, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 49, 52, 53, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 74, 75, 85, 90, 92, 96, 108, 109, 111, 114, 115, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 146, 153, 154, 156, 157, 159, 160, 163, 164, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 273, 274, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 295, 296, 297, 298, 301, 303, 304, 306, 308, 309, 310, 312, 314, 315, 319, 322, 323, 343, 344, 346, 348, 349, 350, 351, 352, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 377, 378, 383, 384, 385, 386, 392, 393, 396, 397, 398, 403, 404, 406, 407, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 455, 456, 457, 462, 463, 464, 466, 467, 468, 469, 473, 474, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 513, 515, 529, 534, 538, 539, 543, 546, 548, 550, 554, 555, 558, 559, 561, 562, 563], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 44, 46, 49, 50, 51, 52, 53, 54, 55, 59, 87, 90, 108, 120, 122, 123, 132, 133, 156, 157, 159, 163, 166, 167, 168, 169, 171, 173, 178, 186, 209, 210, 213, 214, 215, 216, 218, 219, 228, 232, 252, 263, 264, 271, 272, 281, 282, 291, 299, 300, 308, 309, 342, 343, 348, 349, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 393, 395, 396, 401, 419, 425, 428, 438, 439, 440, 444, 453, 454, 455, 456, 458, 459, 465, 466, 467, 469, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 493, 501, 516, 520, 533, 534, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "version": [0, 6, 29, 59, 324, 363, 364, 367, 403, 404, 515, 529, 531, 532, 533, 539, 540, 545, 547, 548, 551, 560, 565, 585, 586], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 153, 154, 156, 157, 160, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 252, 253, 254, 258, 259, 260, 262, 263, 264, 265, 266, 273, 274, 275, 276, 277, 279, 281, 282, 283, 285, 286, 288, 289, 291, 292, 295, 296, 302, 306, 308, 309, 310, 312, 314, 315, 323, 324, 342, 343, 344, 346, 348, 349, 350, 352, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 462, 463, 464, 466, 467, 468, 469, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 520, 538, 539, 540, 544, 545, 548, 549, 550, 551, 552, 554, 555, 556, 559, 561, 563, 565, 569, 574, 579], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 124, 126, 134, 146, 153, 164, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 256, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 292, 295, 296, 308, 309, 310, 312, 314, 315, 316, 323, 342, 343, 344, 346, 348, 349, 350, 352, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 462, 463, 466, 467, 468, 473, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 520, 538, 539, 540, 546, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 565, 570, 573, 579, 585], "output": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 110, 133, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 253, 254, 258, 259, 260, 262, 266, 283, 289, 295, 296, 297, 317, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 469, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 529, 536, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 567, 569, 570, 573, 574, 580], "write": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 110, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 265, 266, 283, 295, 296, 342, 343, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 485, 487, 488, 490, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 516, 529, 533, 537, 538, 540, 541, 542, 544, 545, 547, 548, 550, 551, 552, 555, 558, 559, 560, 562, 565, 567, 570, 579, 586], "result": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 110, 133, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 265, 266, 283, 289, 295, 296, 342, 343, 344, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 459, 462, 463, 465, 469, 473, 475, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 520, 523, 529, 540, 542, 543, 545, 546, 547, 548, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 565, 568, 573, 580, 582], "It": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 110, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 265, 266, 283, 295, 296, 342, 343, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 411, 412, 413, 414, 417, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 490, 494, 495, 497, 499, 500, 503, 505, 506, 508, 509, 510, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 577, 579, 580, 582, 583, 584, 585, 586], "must": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 55, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 265, 266, 283, 295, 296, 324, 342, 343, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 523, 531, 533, 535, 537, 538, 539, 540, 542, 543, 547, 548, 549, 550, 551, 552, 554, 555, 559, 561, 562, 563, 565, 569, 570, 580, 586], "have": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 121, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 265, 266, 283, 295, 296, 342, 343, 346, 348, 349, 350, 352, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 530, 531, 532, 533, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "shape": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 51, 52, 54, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 164, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 262, 265, 266, 274, 283, 289, 295, 296, 303, 311, 313, 321, 324, 342, 343, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 495, 497, 499, 500, 501, 503, 505, 506, 508, 509, 510, 512, 515, 529, 540, 546, 548, 549, 550, 551, 554, 558, 559, 560, 561, 562, 565, 567, 568, 569, 570], "broadcast": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 258, 259, 260, 265, 266, 283, 295, 296, 342, 343, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 475, 480, 481, 482, 483, 485, 486, 487, 488, 490, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 546, 548, 550, 551, 561, 562, 565], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 299, 300, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 519, 520, 526, 527, 529, 539, 540, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 580], "type": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 299, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 519, 520, 523, 526, 529, 535, 538, 539, 540, 541, 542, 543, 546, 549, 550, 551, 553, 554, 556, 558, 560, 561, 562, 563, 565, 567, 568, 579, 580, 583], "retan": [0, 1, 2, 3, 4, 5, 6, 7, 11, 13, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 34, 36, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 121, 124, 127, 130, 133, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 251, 253, 254, 262, 265, 274, 279, 281, 282, 283, 285, 286, 287, 288, 296, 306, 310, 314, 315, 316, 324, 344, 352, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 462, 475, 481, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 519, 520, 529, 532, 533, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 585, 586], "element": [0, 2, 5, 6, 7, 10, 11, 13, 15, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 33, 34, 36, 38, 39, 40, 42, 45, 46, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 79, 84, 85, 93, 94, 119, 121, 124, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 250, 253, 254, 265, 266, 289, 308, 309, 310, 314, 315, 355, 356, 359, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 377, 378, 392, 398, 400, 402, 403, 408, 413, 415, 416, 418, 432, 435, 436, 437, 438, 439, 440, 441, 442, 456, 459, 465, 480, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 551, 560, 561, 563, 565, 583], "wise": [0, 5, 6, 11, 22, 28, 29, 34, 45, 46, 55, 59, 61, 62, 63, 64, 65, 66, 67, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 199, 200, 201, 202, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 234, 238, 356, 362, 363, 369, 398, 432, 563], "exampl": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 287, 288, 289, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 520, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 558, 559, 561, 562, 565, 567, 568, 569, 570, 572, 573, 576, 577, 580, 582, 585, 586], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 134, 153, 154, 158, 162, 163, 164, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 271, 272, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 293, 299, 300, 302, 305, 306, 308, 310, 312, 314, 315, 316, 323, 324, 343, 344, 345, 347, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 519, 523, 529, 543, 544, 546, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570], "1": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 111, 119, 120, 121, 124, 129, 130, 134, 153, 154, 158, 161, 162, 164, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 291, 293, 295, 296, 306, 308, 309, 310, 312, 314, 315, 316, 324, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 468, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 520, 529, 532, 533, 539, 540, 542, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 573], "2": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 111, 119, 121, 129, 130, 134, 153, 154, 155, 158, 160, 162, 164, 166, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 291, 293, 295, 296, 306, 308, 310, 312, 316, 324, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 539, 540, 542, 544, 545, 546, 547, 548, 550, 552, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 570, 573, 585, 586], "0": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 79, 82, 84, 85, 86, 87, 90, 92, 93, 94, 95, 96, 108, 109, 110, 111, 119, 121, 124, 125, 129, 130, 134, 150, 153, 155, 158, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 252, 253, 254, 257, 258, 259, 261, 262, 265, 266, 267, 270, 274, 275, 276, 279, 281, 282, 283, 285, 286, 287, 288, 289, 291, 293, 295, 296, 302, 306, 308, 310, 312, 314, 315, 320, 323, 324, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 414, 416, 418, 419, 420, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 468, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 523, 529, 540, 542, 544, 546, 547, 548, 550, 551, 552, 557, 558, 559, 560, 561, 562, 565, 567, 568, 569, 570, 573], "6": [0, 2, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 19, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 51, 59, 61, 65, 66, 74, 75, 84, 85, 88, 89, 92, 96, 109, 110, 119, 121, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 251, 253, 254, 257, 258, 259, 265, 266, 281, 282, 283, 296, 308, 310, 312, 316, 342, 343, 344, 345, 346, 347, 348, 350, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 404, 408, 409, 410, 413, 416, 418, 419, 420, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 457, 467, 474, 475, 480, 481, 482, 483, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 529, 542, 544, 546, 547, 550, 557, 561, 563, 565, 567, 568, 569], "5": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 109, 110, 111, 119, 121, 129, 130, 134, 154, 162, 166, 169, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 251, 252, 253, 254, 257, 258, 259, 260, 262, 265, 266, 270, 279, 281, 282, 283, 295, 296, 308, 310, 312, 316, 324, 342, 343, 345, 346, 347, 348, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 412, 413, 414, 416, 418, 419, 420, 422, 423, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 481, 482, 483, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 539, 540, 542, 544, 546, 550, 554, 557, 560, 561, 567, 568, 569], "y": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 79, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 119, 121, 124, 134, 150, 154, 158, 162, 163, 164, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 253, 254, 257, 258, 260, 261, 262, 265, 266, 267, 275, 279, 281, 282, 283, 285, 286, 288, 289, 293, 299, 300, 302, 305, 306, 308, 310, 312, 314, 315, 316, 320, 323, 324, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 384, 386, 388, 391, 392, 393, 397, 398, 399, 404, 406, 408, 409, 411, 412, 413, 414, 416, 418, 419, 420, 422, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 462, 463, 465, 473, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 544, 546, 550, 557, 559, 560, 561, 562, 563, 565, 567], "print": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 108, 109, 110, 111, 113, 119, 120, 121, 122, 123, 126, 128, 129, 130, 134, 146, 150, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 270, 271, 272, 274, 275, 279, 281, 282, 283, 285, 286, 287, 288, 291, 294, 295, 296, 299, 300, 302, 305, 306, 308, 310, 312, 314, 315, 316, 320, 323, 324, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 399, 401, 404, 406, 408, 409, 411, 412, 413, 414, 416, 418, 419, 420, 422, 425, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 539, 540, 546, 550, 560, 561, 565, 567, 568, 569], "138": [0, 59, 356], "165": [0, 59, 356, 366, 393], "4": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 55, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 82, 85, 86, 87, 88, 89, 90, 92, 96, 109, 110, 111, 119, 121, 124, 129, 130, 134, 154, 155, 162, 166, 169, 174, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 257, 258, 259, 260, 262, 265, 266, 270, 279, 281, 282, 283, 289, 295, 296, 308, 310, 312, 316, 324, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 422, 423, 425, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 529, 533, 538, 539, 544, 546, 547, 550, 557, 560, 561, 563, 565, 567, 568, 569, 570, 579, 585, 586], "leaky_relu": [0, 22, 356], "alpha": [0, 5, 6, 22, 28, 29, 61, 177, 234, 356, 362, 363, 559, 560], "float": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 19, 22, 25, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 42, 45, 51, 54, 55, 61, 67, 73, 74, 75, 80, 82, 84, 85, 86, 87, 91, 95, 108, 112, 114, 116, 121, 125, 129, 133, 134, 137, 143, 155, 163, 166, 167, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 253, 254, 262, 271, 272, 275, 279, 299, 300, 302, 308, 309, 323, 342, 343, 346, 348, 349, 350, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 377, 392, 395, 396, 397, 399, 402, 403, 404, 406, 409, 410, 411, 414, 415, 416, 417, 418, 422, 425, 428, 429, 430, 453, 454, 455, 462, 475, 482, 483, 491, 492, 493, 494, 499, 500, 502, 503, 504, 505, 506, 507, 508, 515, 542, 546, 548, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 565, 567, 569], "slope": [0, 6, 22, 29, 61, 356, 363], "neg": [0, 5, 6, 11, 13, 15, 20, 22, 28, 29, 34, 36, 38, 43, 61, 73, 82, 203, 204, 224, 227, 356, 359, 362, 363, 367, 369, 373, 378, 400, 418, 422, 424, 425, 433, 435, 436, 440, 482, 509, 510, 546, 555, 558], "section": [0, 6, 17, 29, 61, 363, 375, 491, 492, 493, 494, 529, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 568, 569, 575, 582, 585], "leaki": [0, 22, 61, 356], "relu": [0, 6, 21, 22, 29, 61, 356, 363, 529, 560, 568, 569], "39": [0, 5, 6, 15, 22, 28, 29, 31, 38, 61, 179, 196, 209, 211, 213, 342, 356, 362, 363, 365, 367, 377, 413, 482, 501], "85": [0, 15, 22, 28, 31, 33, 38, 46, 61, 178, 187, 188, 225, 308, 346, 356, 362, 364, 365, 366, 373, 393, 481, 482, 483], "17": [0, 6, 22, 28, 29, 30, 31, 33, 38, 46, 61, 62, 87, 177, 193, 213, 220, 259, 282, 342, 344, 356, 359, 362, 363, 364, 365, 366, 367, 371, 373, 383, 392, 393, 401, 419, 464, 481, 482, 483, 485, 546, 550], "log_softmax": [0, 22, 356], "axi": [0, 2, 6, 7, 11, 12, 13, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 34, 35, 36, 39, 41, 42, 43, 62, 66, 86, 87, 90, 168, 258, 265, 324, 356, 359, 361, 363, 364, 366, 367, 368, 369, 373, 374, 376, 377, 378, 391, 395, 398, 401, 409, 424, 425, 429, 430, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 485, 486, 487, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 523, 546, 548, 550, 552, 554, 555, 558, 559, 561, 563, 565, 567, 570, 572], "int": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 62, 66, 67, 74, 75, 82, 84, 85, 86, 87, 90, 93, 94, 110, 117, 120, 121, 124, 130, 144, 160, 161, 162, 168, 169, 177, 183, 184, 185, 186, 187, 188, 234, 248, 258, 259, 260, 262, 265, 266, 274, 293, 295, 308, 324, 342, 343, 344, 348, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 398, 400, 401, 409, 410, 420, 422, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 459, 462, 463, 465, 467, 468, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 487, 489, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 546, 548, 549, 550, 552, 553, 554, 555, 558, 560, 561, 562, 563, 565, 570], "ax": [0, 6, 11, 13, 16, 19, 20, 22, 29, 34, 36, 39, 42, 43, 45, 62, 66, 168, 258, 324, 361, 363, 364, 367, 369, 374, 377, 378, 409, 417, 420, 421, 425, 434, 436, 437, 440, 442, 444, 447, 486, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 548, 550, 561, 562, 565, 567], "along": [0, 2, 6, 7, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 62, 66, 86, 87, 168, 258, 265, 359, 361, 363, 364, 367, 368, 369, 370, 373, 374, 376, 377, 378, 413, 422, 424, 425, 429, 430, 433, 436, 437, 438, 440, 441, 443, 445, 446, 453, 454, 455, 485, 486, 487, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 529, 538, 550, 558, 562, 563, 565, 579], "which": [0, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 109, 111, 113, 119, 121, 124, 126, 129, 134, 146, 154, 158, 162, 164, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 257, 258, 259, 260, 262, 265, 266, 267, 270, 274, 279, 281, 282, 283, 285, 286, 288, 289, 293, 294, 295, 296, 308, 309, 310, 312, 314, 315, 323, 324, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 392, 393, 395, 396, 397, 398, 400, 401, 404, 406, 408, 409, 411, 412, 413, 415, 416, 417, 418, 422, 424, 425, 428, 429, 430, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 446, 447, 461, 462, 463, 464, 469, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 527, 529, 531, 532, 533, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586], "should": [0, 2, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 22, 23, 25, 28, 29, 30, 31, 33, 34, 36, 38, 39, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 66, 88, 90, 93, 94, 110, 133, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 252, 283, 324, 343, 346, 348, 349, 350, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 389, 390, 396, 397, 398, 399, 401, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 422, 424, 425, 439, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 505, 507, 508, 515, 516, 530, 532, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 575, 576, 579, 581, 586], "comput": [0, 5, 6, 7, 8, 10, 11, 12, 17, 19, 22, 23, 28, 29, 30, 31, 33, 34, 35, 42, 62, 66, 168, 177, 183, 186, 188, 194, 195, 200, 201, 202, 207, 208, 214, 215, 216, 217, 219, 222, 226, 227, 252, 253, 254, 342, 344, 345, 347, 351, 352, 354, 355, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 375, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 395, 397, 398, 402, 403, 404, 407, 408, 409, 413, 415, 417, 418, 424, 425, 428, 429, 430, 435, 462, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 515, 529, 532, 533, 539, 546, 547, 548, 555, 557, 559, 561, 563, 565, 568, 573, 574, 575, 577, 579, 580, 582, 583, 585], "98": [0, 8, 15, 22, 28, 31, 38, 62, 188, 191, 231, 346, 356, 362, 365, 367, 371, 374, 377, 413, 457, 481, 483, 490, 501], "3": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 82, 85, 86, 88, 89, 90, 91, 92, 95, 96, 108, 109, 110, 111, 119, 121, 129, 130, 134, 151, 153, 154, 164, 166, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 291, 295, 296, 306, 308, 312, 315, 316, 324, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 422, 423, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 529, 539, 542, 543, 544, 545, 546, 548, 550, 552, 557, 560, 561, 563, 565, 567, 568, 569, 570, 586], "37": [0, 5, 6, 22, 28, 29, 45, 62, 179, 187, 228, 231, 235, 362, 363, 366, 367, 371, 373, 393, 410, 464, 482], "35": [0, 10, 22, 28, 29, 33, 34, 38, 62, 181, 232, 362, 363, 366, 367, 374, 377, 393, 396, 398, 482, 490, 501], "0719": [0, 22, 62], "62": [0, 22, 29, 37, 38, 62, 231, 362, 372, 373, 475, 481, 483], "221": [0, 62], "7": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 61, 62, 63, 64, 65, 73, 74, 75, 86, 89, 90, 121, 124, 155, 174, 177, 179, 183, 184, 186, 187, 188, 189, 191, 193, 194, 195, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 235, 236, 237, 238, 251, 253, 254, 258, 259, 281, 282, 283, 289, 295, 296, 308, 310, 342, 343, 345, 346, 347, 348, 350, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 383, 384, 386, 388, 391, 392, 393, 395, 396, 398, 399, 400, 401, 404, 408, 410, 413, 416, 418, 419, 420, 422, 423, 428, 429, 430, 432, 435, 436, 441, 443, 444, 446, 457, 464, 475, 480, 481, 482, 483, 485, 490, 491, 493, 495, 497, 499, 500, 501, 503, 505, 507, 508, 540, 546, 547, 550, 555, 557, 558, 561], "82": [0, 5, 31, 38, 62, 179, 342, 365, 482, 483, 552], "mish": [0, 22, 356], "30340147": [0, 63, 356], "86509842": [0, 22, 63, 356], "sigmoid": [0, 6, 22, 29, 58, 60, 356, 363, 529, 565, 568, 569], "same": [0, 1, 2, 3, 5, 6, 8, 10, 11, 13, 15, 17, 18, 19, 23, 25, 26, 28, 29, 31, 33, 34, 36, 38, 40, 42, 45, 52, 65, 73, 81, 85, 87, 88, 90, 92, 93, 94, 96, 108, 109, 110, 121, 124, 168, 174, 175, 176, 177, 178, 180, 184, 186, 189, 198, 221, 223, 227, 228, 229, 237, 289, 352, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 375, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 399, 401, 402, 403, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 422, 424, 433, 436, 437, 439, 440, 442, 443, 453, 454, 469, 483, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 529, 531, 533, 535, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 569, 570, 573, 576, 578, 585, 586], "269": [0, 65, 356], "731": [0, 65, 356], "881": [0, 5, 28, 65, 179, 192, 225, 356, 362], "softmax": [0, 10, 21, 22, 33, 356, 366, 395, 396, 529], "422": [0, 66, 356], "155": [0, 33, 66, 356, 366, 393], "softplu": [0, 22, 356, 563], "beta": [0, 6, 14, 22, 29, 37, 67, 356, 363, 372, 475, 563], "threshold": [0, 5, 6, 22, 28, 29, 67, 218, 219, 356, 362, 363, 563], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 146, 150, 151, 152, 153, 154, 155, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 267, 270, 274, 279, 281, 282, 283, 285, 286, 288, 289, 291, 295, 296, 306, 308, 309, 310, 311, 312, 313, 314, 315, 323, 324, 342, 343, 344, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 543, 546, 548, 549, 550, 552, 553, 554, 555, 558, 562, 563, 565, 570], "3461": [0, 22, 67, 356], "6491": [0, 22, 67, 356], "535": [0, 22, 67, 356], "42": [0, 15, 22, 31, 37, 38, 67, 187, 342, 346, 356, 362, 363, 365, 367, 372, 373, 377, 409, 413, 475, 480, 481, 482, 483, 484, 499, 501, 529, 565, 570], "22": [0, 5, 6, 7, 15, 19, 22, 29, 30, 33, 38, 62, 67, 188, 259, 296, 323, 356, 362, 363, 366, 367, 371, 374, 377, 392, 393, 401, 406, 413, 464, 474, 481, 482, 483, 490, 500, 501, 546], "09": [0, 5, 31, 38, 67, 224, 233, 342, 356, 362, 365, 366, 396, 482], "31": [0, 5, 6, 28, 29, 30, 33, 38, 62, 67, 87, 187, 213, 220, 253, 356, 359, 362, 363, 364, 367, 393, 419, 482, 483, 568], "55": [0, 38, 67, 187, 237, 281, 362, 364, 367, 373, 377, 406, 413, 419, 482, 483, 501, 542], "13": [0, 5, 6, 10, 15, 19, 28, 29, 30, 31, 33, 36, 38, 42, 45, 67, 124, 155, 177, 188, 191, 199, 224, 232, 253, 254, 258, 259, 282, 300, 308, 342, 356, 360, 361, 362, 363, 364, 365, 366, 367, 369, 374, 375, 377, 383, 384, 392, 393, 396, 401, 413, 419, 446, 481, 482, 483, 490, 491, 499, 500, 501, 546, 550], "collect": [1, 23, 24, 48, 52, 54, 55, 356, 361, 364, 365, 366, 368, 371, 372, 373, 469, 547, 552, 557, 560, 561, 572, 577, 579, 582], "accept": [1, 2, 5, 11, 24, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 251, 259, 260, 265, 274, 279, 281, 283, 295, 310, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 539, 540, 543, 546, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 574, 577], "_to_ivi": 1, "ani": [1, 2, 4, 5, 6, 7, 11, 20, 21, 25, 27, 28, 29, 30, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 111, 112, 127, 130, 133, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 257, 258, 259, 260, 261, 265, 274, 279, 281, 285, 287, 309, 315, 316, 324, 352, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 459, 462, 463, 465, 466, 473, 475, 483, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 513, 516, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "_to_n": 1, "inplac": [1, 7, 23, 30, 49, 55, 249, 251, 280, 283, 284, 364, 371, 463, 464, 468, 473, 474, 519, 520, 541, 543, 550, 554, 556, 559, 563, 567, 569], "args_to_ivi": 1, "arg": [1, 23, 49, 53, 168, 316, 359, 361, 363, 364, 513, 515, 523, 529, 543, 552, 557, 559, 563, 565, 569], "include_deriv": [1, 24, 371, 457, 468, 515], "kwarg": [1, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 53, 291, 316, 359, 363, 364, 513, 515, 529, 543, 552, 559, 563, 565, 569], "keyword": [1, 2, 23, 46, 53, 88, 249, 252, 291, 316, 359, 363, 364, 371, 377, 462, 507, 513, 515, 538, 543, 546, 548, 549, 556, 558, 559, 560, 561, 562, 563, 568], "form": [1, 2, 11, 23, 25, 34, 51, 74, 75, 89, 93, 94, 248, 311, 313, 359, 363, 364, 366, 367, 371, 397, 399, 401, 402, 403, 404, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 457, 468, 532, 534, 555, 561, 563, 569, 570, 579, 580, 585], "all": [1, 2, 6, 7, 10, 11, 13, 15, 20, 21, 23, 24, 28, 29, 30, 33, 34, 36, 38, 43, 44, 50, 51, 73, 90, 93, 94, 158, 164, 219, 247, 250, 267, 293, 294, 308, 314, 315, 324, 344, 359, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 378, 392, 394, 411, 416, 417, 420, 425, 436, 440, 442, 453, 454, 455, 456, 457, 458, 467, 468, 469, 470, 480, 483, 488, 513, 515, 519, 523, 527, 529, 531, 532, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 585, 586], "nest": [1, 23, 24, 46, 50, 53, 55, 312, 324, 344, 355, 364, 365, 370, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 543, 545, 546, 555, 557, 562, 568, 569, 573, 574, 579], "otherwis": [1, 2, 3, 5, 6, 7, 10, 11, 13, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 53, 59, 61, 62, 63, 64, 65, 66, 67, 73, 79, 85, 86, 87, 90, 92, 96, 108, 109, 111, 112, 114, 115, 116, 117, 118, 127, 130, 133, 134, 153, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 316, 323, 346, 352, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 374, 376, 377, 378, 383, 384, 385, 386, 392, 393, 396, 397, 398, 399, 404, 406, 408, 409, 411, 413, 415, 416, 418, 422, 424, 425, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 469, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 529, 540, 543, 546, 548, 549, 550, 555, 556, 561, 565], "argument": [1, 2, 5, 6, 7, 11, 23, 24, 28, 29, 30, 46, 49, 53, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 134, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 251, 252, 257, 259, 260, 265, 274, 279, 281, 283, 291, 295, 296, 310, 315, 316, 324, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 371, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 462, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 520, 527, 529, 531, 538, 541, 542, 543, 544, 545, 546, 550, 551, 553, 555, 556, 560, 561, 562, 563, 565, 567, 568, 574, 579], "ar": [1, 2, 5, 6, 7, 11, 13, 15, 16, 23, 25, 28, 29, 30, 34, 36, 38, 39, 45, 46, 50, 51, 53, 56, 73, 85, 87, 90, 158, 162, 164, 168, 190, 192, 215, 216, 225, 228, 230, 235, 247, 250, 251, 252, 267, 273, 277, 280, 284, 293, 294, 301, 310, 319, 344, 355, 359, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 392, 393, 398, 402, 403, 404, 408, 409, 411, 414, 418, 419, 423, 424, 425, 432, 433, 436, 440, 442, 457, 462, 467, 468, 469, 481, 482, 483, 486, 487, 488, 489, 491, 493, 513, 515, 520, 523, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586], "unchang": [1, 6, 363, 366, 392], "iter": [1, 7, 13, 21, 23, 30, 36, 44, 46, 168, 247, 291, 361, 363, 364, 369, 371, 434, 438, 445, 447, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 471, 472, 474, 533, 546, 565, 568], "The": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 83, 85, 87, 90, 92, 93, 94, 96, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 126, 128, 129, 131, 132, 134, 135, 137, 138, 139, 140, 146, 150, 151, 152, 153, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 272, 274, 275, 278, 279, 281, 282, 283, 285, 286, 287, 288, 292, 295, 296, 299, 300, 302, 305, 308, 309, 310, 311, 312, 313, 314, 315, 323, 342, 343, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 520, 529, 530, 531, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 568, 569, 570, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "posit": [1, 5, 6, 7, 11, 13, 28, 29, 30, 34, 36, 49, 82, 121, 174, 203, 204, 226, 227, 252, 262, 324, 357, 359, 360, 362, 363, 364, 367, 369, 373, 374, 378, 397, 400, 422, 435, 440, 484, 489, 509, 510, 515, 520, 529, 538, 540, 542, 546, 556, 559, 561, 562, 568, 572, 581], "check": [1, 3, 7, 23, 26, 30, 50, 112, 113, 122, 123, 126, 128, 129, 131, 146, 156, 157, 163, 173, 251, 261, 263, 264, 273, 279, 285, 286, 287, 288, 301, 310, 319, 323, 360, 361, 363, 364, 367, 371, 403, 404, 456, 457, 466, 467, 468, 513, 529, 536, 537, 538, 539, 540, 542, 546, 547, 550, 552, 555, 556, 559, 560, 561, 562, 564, 565, 567, 568, 569], "dict": [1, 7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 49, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 134, 153, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 258, 259, 260, 262, 263, 264, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 291, 295, 296, 308, 309, 310, 312, 314, 315, 323, 352, 356, 361, 363, 364, 371, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 457, 459, 462, 463, 464, 465, 467, 468, 469, 473, 474, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 515, 516, 543, 546, 553, 568, 569, 574], "recurs": [1, 23, 24, 122, 123, 156, 157, 263, 264, 360, 361, 364, 371, 456, 457, 466, 467, 468, 539, 542, 545, 546, 555, 569, 573], "deriv": [1, 2, 6, 8, 24, 25, 29, 31, 53, 55, 56, 81, 85, 92, 96, 342, 343, 346, 347, 348, 349, 350, 359, 363, 365, 371, 457, 468, 548, 549, 567, 569], "from": [1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 15, 16, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 38, 39, 42, 43, 44, 46, 49, 50, 51, 52, 53, 55, 73, 75, 81, 83, 84, 85, 88, 89, 92, 96, 111, 129, 133, 134, 153, 158, 162, 167, 168, 192, 225, 232, 252, 257, 265, 266, 270, 294, 302, 312, 324, 343, 348, 353, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 383, 391, 392, 395, 401, 418, 422, 423, 424, 433, 436, 439, 442, 453, 454, 455, 457, 468, 469, 470, 480, 481, 482, 483, 487, 490, 491, 493, 499, 500, 505, 506, 507, 508, 509, 510, 513, 515, 520, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586], "tupl": [1, 2, 3, 6, 7, 10, 11, 13, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 51, 53, 59, 61, 62, 63, 64, 65, 66, 67, 74, 75, 85, 89, 90, 92, 96, 109, 110, 111, 122, 123, 124, 128, 129, 133, 134, 140, 153, 156, 157, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 270, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 324, 342, 343, 344, 346, 348, 352, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 374, 375, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 402, 403, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 418, 420, 421, 422, 425, 428, 429, 430, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 446, 447, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 480, 481, 482, 483, 485, 488, 489, 491, 492, 493, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 543, 548, 552, 553, 554, 560, 561, 565, 568, 569, 573], "list": [1, 2, 3, 6, 7, 10, 13, 14, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 85, 88, 89, 90, 92, 96, 109, 111, 124, 128, 129, 134, 153, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 249, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 267, 274, 279, 281, 282, 283, 285, 286, 288, 291, 295, 296, 308, 309, 310, 312, 314, 315, 316, 323, 324, 346, 351, 352, 353, 355, 356, 359, 360, 361, 363, 364, 365, 367, 369, 371, 372, 374, 375, 376, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 420, 422, 428, 429, 430, 432, 433, 436, 439, 440, 441, 442, 443, 446, 447, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 473, 474, 475, 480, 481, 482, 483, 485, 488, 489, 491, 492, 493, 494, 495, 496, 499, 500, 503, 505, 506, 508, 509, 510, 512, 513, 515, 520, 523, 537, 538, 539, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 559, 560, 561, 562, 565, 568, 569, 570, 573, 579, 580, 585], "istr": [1, 2, 6, 7, 10, 11, 13, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 88, 90, 92, 96, 106, 109, 111, 113, 114, 115, 116, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 146, 150, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 256, 258, 259, 260, 262, 265, 266, 269, 274, 279, 281, 282, 283, 285, 286, 288, 292, 295, 296, 298, 305, 308, 309, 310, 312, 314, 315, 323, 344, 352, 356, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 455, 462, 463, 473, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 501, 503, 505, 506, 508, 509, 510, 515, 516, 518, 520, 548, 549, 552, 553, 559, 562, 565, 570], "kei": [1, 6, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 49, 50, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 250, 251, 253, 254, 255, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 363, 364, 366, 370, 371, 383, 384, 385, 386, 392, 393, 395, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 459, 465, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 519, 529, 545, 546, 547, 553, 559, 560, 561, 568, 579, 582, 586], "word": [1, 49, 73, 359, 373, 483, 546, 559, 574], "convert": [1, 2, 5, 24, 25, 28, 74, 75, 89, 106, 107, 150, 151, 152, 153, 163, 170, 173, 192, 225, 297, 311, 313, 314, 315, 317, 359, 360, 361, 362, 363, 364, 367, 371, 426, 457, 468, 469, 515, 529, 533, 538, 543, 556, 557, 559, 561, 565, 573, 574, 577, 578, 585], "args_to_n": [1, 558], "cont_inplac": 1, "nativ": [1, 2, 4, 7, 24, 27, 30, 45, 49, 89, 106, 107, 113, 114, 115, 116, 117, 118, 133, 151, 152, 153, 154, 163, 170, 173, 283, 285, 288, 294, 313, 359, 360, 361, 363, 364, 512, 515, 520, 529, 548, 552, 556, 558, 559, 560, 561, 565, 567, 568, 574, 577, 586], "backend": [1, 2, 6, 7, 11, 23, 29, 30, 34, 49, 53, 55, 79, 122, 123, 126, 146, 156, 157, 159, 161, 171, 251, 263, 264, 280, 283, 284, 292, 310, 313, 359, 360, 361, 363, 364, 367, 418, 513, 515, 516, 529, 531, 537, 538, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 563, 564, 566, 567, 570, 574, 579, 582, 585, 586], "framework": [1, 7, 49, 55, 126, 146, 159, 161, 171, 256, 280, 284, 310, 313, 360, 361, 364, 371, 458, 513, 515, 516, 520, 531, 532, 533, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 567, 570, 572, 573, 574, 575, 576, 577, 578, 580, 583], "updat": [1, 7, 8, 23, 30, 31, 49, 55, 283, 295, 296, 342, 343, 346, 348, 349, 350, 364, 365, 366, 370, 371, 392, 394, 453, 454, 463, 464, 468, 473, 474, 520, 529, 538, 539, 540, 541, 542, 543, 546, 547, 548, 550, 554, 556, 557, 559, 560, 561, 563, 565, 567, 568, 570, 573], "contain": [1, 2, 3, 5, 6, 7, 11, 12, 13, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 131, 134, 154, 156, 157, 158, 162, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 248, 249, 250, 251, 253, 254, 258, 259, 260, 261, 262, 265, 266, 273, 274, 279, 281, 282, 283, 285, 286, 287, 288, 289, 295, 296, 301, 302, 308, 309, 310, 312, 314, 315, 319, 323, 324, 342, 343, 344, 346, 348, 349, 350, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 459, 463, 464, 465, 469, 473, 474, 475, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 519, 520, 529, 531, 535, 536, 538, 539, 541, 542, 543, 545, 547, 548, 550, 551, 554, 555, 556, 557, 558, 561, 563, 564, 565, 566, 569, 573, 574, 579, 580, 585], "place": [1, 2, 5, 6, 7, 11, 13, 23, 25, 27, 28, 29, 30, 36, 55, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 111, 127, 130, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 251, 259, 260, 265, 274, 279, 281, 282, 283, 295, 310, 315, 352, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 535, 537, 540, 541, 542, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 570, 574, 581], "to_ivi": [1, 24, 371, 469], "frontend": [1, 298, 364, 515, 516, 520, 529, 537, 540, 541, 547, 548, 552, 557, 561, 562, 563, 564, 566, 574, 579], "If": [1, 2, 3, 5, 6, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 50, 51, 53, 59, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 111, 134, 153, 167, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 289, 295, 296, 308, 309, 310, 312, 314, 315, 323, 324, 344, 346, 352, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 392, 393, 396, 397, 398, 400, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 428, 429, 430, 432, 433, 435, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 468, 469, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 529, 531, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "set": [1, 6, 7, 10, 11, 16, 18, 19, 23, 29, 30, 33, 34, 39, 41, 42, 50, 51, 52, 55, 135, 136, 137, 138, 139, 153, 165, 166, 167, 168, 181, 247, 251, 258, 283, 297, 298, 299, 300, 301, 302, 303, 304, 305, 310, 318, 360, 361, 362, 363, 364, 366, 367, 371, 373, 374, 376, 377, 392, 398, 409, 411, 414, 417, 418, 456, 463, 466, 467, 468, 473, 474, 484, 486, 487, 491, 493, 494, 495, 497, 506, 508, 515, 520, 531, 534, 540, 541, 542, 543, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 577, 578, 579, 580, 581, 583, 586], "leaf": [1, 23, 42, 371, 466, 467, 469, 500, 546, 555, 568], "within": [1, 6, 29, 73, 359, 363, 373, 483, 529, 538, 540, 543, 545, 547, 559, 560, 561, 569, 573, 575, 576, 580], "nativearraimanner": [1, 24, 371, 468, 531, 539, 549, 551, 559, 562, 568, 572, 573, 575, 577, 585, 586], "travers": [1, 24, 371, 468, 546, 548, 552, 565], "lowest": [1, 15, 24, 38, 371, 373, 468, 481, 555, 573, 574, 576, 580, 584], "leav": [1, 24, 26, 28, 29, 30, 33, 34, 36, 42, 46, 121, 124, 193, 262, 312, 369, 371, 388, 396, 401, 418, 434, 438, 443, 445, 446, 456, 457, 466, 467, 468, 469, 499, 500, 519, 529, 538, 546, 548, 550, 551, 554, 555, 558, 559, 561, 568, 569], "search": [1, 6, 24, 29, 486, 487, 520, 531, 537, 539, 545, 546, 550, 561, 562], "its": [1, 3, 6, 13, 23, 26, 30, 36, 50, 109, 114, 115, 116, 117, 118, 168, 262, 313, 360, 361, 363, 364, 367, 369, 371, 408, 435, 439, 440, 444, 462, 515, 519, 529, 538, 539, 540, 543, 545, 547, 548, 551, 556, 557, 559, 560, 561, 562, 563, 565, 570, 573, 574, 578, 579, 585], "case": [1, 2, 6, 7, 13, 19, 23, 30, 36, 46, 52, 53, 55, 88, 151, 163, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 188, 189, 190, 191, 196, 197, 198, 209, 210, 211, 212, 213, 215, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 283, 295, 296, 359, 361, 362, 363, 364, 367, 369, 371, 377, 416, 439, 459, 465, 502, 503, 504, 506, 507, 508, 529, 532, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 569, 570, 573, 578, 582], "to_n": [1, 24, 565], "item": [1, 7, 21, 23, 29, 30, 53, 115, 153, 255, 265, 266, 276, 308, 309, 353, 360, 361, 364, 365, 371, 461, 462, 463, 464, 468, 473, 474, 529, 538, 546, 548, 565, 567, 568, 570], "mayb": [1, 529, 539, 547, 565, 567], "_arraywithcr": [2, 45], "asarrai": [2, 6, 7, 25, 29, 30, 74, 258, 274, 281, 282, 308, 359, 363, 364, 366, 375, 383, 492, 556, 558, 559, 560], "copi": [2, 3, 4, 6, 7, 13, 23, 25, 26, 27, 29, 30, 36, 74, 75, 79, 83, 108, 169, 308, 314, 315, 359, 360, 361, 363, 364, 369, 371, 376, 435, 436, 437, 439, 441, 442, 444, 446, 457, 497, 539, 540, 542, 544, 547, 548, 551, 559, 560, 565, 572, 573], "dtype": [2, 3, 6, 7, 10, 11, 15, 16, 19, 25, 26, 29, 30, 33, 34, 38, 39, 42, 45, 51, 52, 53, 54, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 164, 262, 263, 264, 266, 283, 314, 359, 360, 361, 363, 364, 366, 367, 373, 374, 376, 377, 378, 385, 392, 409, 425, 481, 482, 483, 486, 487, 488, 496, 497, 499, 500, 505, 507, 509, 510, 512, 513, 515, 523, 529, 542, 544, 548, 549, 550, 553, 555, 556, 558, 559, 560, 561, 562, 565, 567], "devic": [2, 6, 15, 23, 25, 29, 38, 45, 49, 51, 52, 53, 54, 55, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 249, 263, 264, 359, 363, 364, 373, 480, 481, 482, 483, 512, 513, 515, 516, 529, 532, 540, 541, 544, 548, 552, 555, 556, 560, 561, 562, 563, 565, 570, 573, 574, 578, 579, 581, 582, 583, 584], "data": [2, 5, 6, 7, 10, 11, 13, 15, 16, 17, 18, 19, 20, 23, 25, 28, 29, 30, 33, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 51, 52, 53, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 106, 107, 108, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 146, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 262, 283, 285, 286, 288, 310, 359, 361, 362, 363, 364, 366, 367, 369, 373, 374, 376, 377, 378, 382, 389, 390, 392, 393, 397, 398, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 424, 425, 433, 436, 437, 439, 440, 442, 443, 447, 481, 482, 483, 485, 486, 487, 489, 490, 495, 496, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 520, 523, 529, 530, 532, 539, 541, 542, 543, 546, 549, 551, 554, 555, 556, 558, 560, 562, 563, 565, 567, 574, 579, 580, 581, 583, 584, 585], "can": [2, 3, 6, 11, 13, 15, 17, 25, 26, 29, 34, 36, 38, 40, 74, 75, 87, 89, 111, 151, 166, 167, 168, 289, 324, 344, 359, 360, 361, 363, 364, 365, 367, 369, 373, 401, 408, 418, 422, 439, 443, 481, 482, 483, 491, 515, 520, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 582, 583, 585, 586], "includ": [2, 6, 7, 11, 16, 19, 20, 23, 25, 28, 29, 30, 34, 39, 42, 43, 51, 52, 54, 73, 74, 75, 86, 87, 89, 200, 279, 323, 359, 363, 364, 367, 371, 373, 374, 377, 378, 402, 423, 425, 456, 483, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 515, 527, 529, 532, 538, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 565, 572, 573, 576, 577, 579, 581, 584, 585, 586], "ndarrai": [2, 6, 7, 25, 29, 74, 75, 89, 314, 359, 363, 364, 538, 543, 548, 549, 554, 558, 559, 560, 562, 563, 565, 567, 570, 574], "boolean": [2, 3, 5, 6, 7, 13, 16, 19, 23, 25, 26, 28, 29, 30, 36, 39, 42, 45, 46, 74, 75, 79, 84, 108, 124, 126, 128, 129, 146, 159, 171, 183, 184, 185, 186, 187, 188, 214, 215, 216, 217, 247, 250, 270, 279, 280, 284, 285, 286, 287, 288, 289, 297, 301, 303, 304, 323, 351, 355, 359, 360, 361, 362, 363, 364, 365, 369, 370, 371, 377, 439, 453, 454, 466, 488, 490, 502, 504, 520, 546, 559, 561, 563], "indic": [2, 6, 7, 10, 11, 13, 14, 16, 17, 18, 23, 25, 26, 29, 30, 33, 34, 36, 37, 39, 40, 41, 50, 52, 53, 74, 75, 90, 124, 128, 129, 229, 250, 265, 266, 270, 295, 296, 324, 344, 359, 362, 363, 364, 365, 367, 369, 371, 372, 373, 374, 375, 376, 383, 385, 386, 387, 388, 391, 425, 439, 440, 456, 459, 461, 463, 464, 465, 467, 471, 472, 473, 474, 475, 480, 486, 487, 488, 489, 491, 493, 495, 496, 497, 515, 516, 523, 527, 547, 553, 554, 557, 559, 570], "nativedtyp": [2, 3, 6, 10, 11, 15, 16, 19, 25, 29, 34, 38, 39, 42, 51, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 125, 126, 132, 136, 146, 359, 360, 363, 366, 367, 373, 374, 376, 377, 392, 425, 481, 482, 483, 486, 487, 496, 499, 500, 505, 507, 548, 549, 554, 562, 565], "datatyp": [2, 23, 25, 75, 85, 89, 113, 132, 136, 359, 360, 513, 562], "infer": [2, 6, 7, 10, 13, 25, 29, 30, 33, 36, 73, 75, 81, 84, 85, 89, 92, 96, 114, 115, 116, 117, 118, 274, 306, 359, 360, 363, 364, 366, 369, 392, 439, 541, 544, 545, 548, 549, 556, 561, 565, 570, 577, 578, 581, 583], "nativedevic": [2, 4, 6, 15, 25, 27, 29, 38, 51, 55, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 151, 152, 153, 154, 155, 158, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 359, 361, 363, 373, 480, 481, 482, 483, 548, 549, 552, 554, 562], "creat": [2, 6, 15, 23, 25, 29, 34, 38, 49, 51, 52, 53, 54, 55, 56, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 312, 324, 354, 359, 363, 364, 365, 373, 413, 480, 481, 482, 483, 485, 515, 520, 532, 534, 535, 538, 539, 540, 543, 545, 547, 548, 549, 552, 556, 558, 559, 560, 561, 563, 565, 566, 569, 571, 572, 574, 579, 580, 585], "interpret": [2, 25, 74, 75, 89, 359, 547, 580], "With": [2, 3, 5, 6, 7, 8, 10, 11, 13, 16, 19, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 74, 75, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 108, 109, 110, 111, 113, 119, 120, 121, 124, 130, 134, 135, 136, 137, 138, 151, 154, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 247, 251, 252, 253, 254, 257, 258, 259, 260, 261, 265, 266, 274, 279, 281, 282, 283, 295, 296, 308, 310, 312, 314, 315, 323, 324, 342, 343, 344, 346, 347, 348, 350, 352, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 404, 406, 408, 409, 410, 411, 412, 416, 418, 419, 420, 422, 423, 428, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 459, 462, 463, 464, 465, 467, 473, 474, 475, 480, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 532, 533, 539, 550, 556, 559, 561, 563, 565, 579, 582], "9": [2, 3, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 19, 22, 26, 28, 29, 30, 31, 33, 34, 36, 38, 40, 41, 42, 45, 46, 55, 59, 73, 74, 75, 89, 114, 116, 117, 118, 121, 124, 175, 177, 178, 179, 182, 183, 184, 187, 193, 194, 199, 203, 208, 209, 210, 215, 216, 218, 219, 220, 222, 224, 225, 228, 229, 232, 233, 234, 238, 254, 258, 259, 260, 262, 265, 281, 282, 285, 286, 288, 295, 296, 308, 342, 343, 344, 348, 356, 359, 360, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 377, 383, 384, 385, 388, 391, 392, 393, 395, 398, 399, 401, 404, 408, 409, 410, 413, 416, 418, 419, 420, 422, 423, 432, 436, 440, 441, 443, 444, 446, 457, 462, 464, 467, 480, 481, 482, 483, 485, 490, 491, 493, 495, 497, 500, 501, 503, 505, 507, 508, 546, 550, 552, 557, 561, 568, 569, 575], "39999998": [2, 74, 75, 359, 375, 492], "5999999": [2, 74, 75, 359, 366, 392], "0999999": [2, 19, 74, 75, 359, 503], "10000038": [2, 74, 75, 359], "np": [2, 6, 28, 29, 30, 74, 75, 79, 89, 206, 308, 359, 362, 363, 364, 371, 462, 515, 529, 538, 543, 548, 549, 552, 554, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 574], "order": [2, 6, 10, 11, 13, 17, 18, 23, 29, 33, 34, 36, 41, 45, 46, 50, 53, 56, 74, 75, 88, 181, 359, 362, 363, 366, 367, 369, 370, 374, 375, 376, 383, 384, 385, 386, 387, 388, 391, 402, 403, 409, 418, 419, 423, 425, 436, 439, 453, 454, 489, 491, 492, 493, 494, 495, 496, 497, 515, 529, 531, 538, 539, 540, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 558, 559, 560, 561, 562, 563, 568, 570, 573, 575, 578, 579, 580, 582, 585], "c": [2, 6, 7, 8, 10, 13, 19, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 42, 74, 75, 87, 90, 121, 124, 187, 209, 210, 222, 229, 250, 258, 259, 260, 274, 281, 282, 315, 342, 343, 346, 348, 349, 350, 359, 360, 362, 363, 364, 365, 366, 367, 369, 371, 374, 375, 377, 383, 384, 385, 386, 387, 388, 402, 404, 406, 439, 443, 459, 463, 464, 465, 467, 473, 474, 489, 494, 500, 501, 506, 508, 530, 532, 533, 534, 539, 541, 546, 550, 555, 557, 563, 564, 565, 566, 568, 573, 574, 575, 579, 583, 584, 586], "90786433e": [2, 74, 75, 359], "310": [2, 74, 75, 359], "copy_arrai": [2, 359], "to_ivy_arrai": [2, 79, 359], "truee": [2, 6, 11, 15, 17, 18, 19, 21, 29, 34, 38, 41, 42, 44, 45, 79, 87, 88, 107, 134, 150, 174, 181, 185, 187, 189, 196, 198, 199, 203, 209, 211, 218, 219, 224, 227, 357, 359, 360, 361, 362, 363, 367, 369, 371, 373, 375, 376, 377, 398, 408, 409, 411, 414, 417, 418, 425, 435, 443, 459, 463, 464, 465, 473, 474, 481, 482, 483, 491, 492, 493, 494, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 529, 532, 533, 534, 535, 538, 539, 540, 541, 542, 546, 552, 557, 559, 561, 565, 568, 573, 574, 575], "torch": [2, 7, 11, 21, 30, 34, 49, 79, 123, 151, 152, 165, 166, 228, 283, 310, 359, 360, 361, 362, 364, 367, 418, 515, 529, 539, 540, 542, 543, 544, 545, 547, 548, 549, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 573, 574, 585], "tensor": [2, 5, 6, 7, 10, 13, 15, 23, 25, 28, 29, 30, 33, 34, 36, 38, 52, 79, 86, 87, 90, 119, 133, 218, 219, 295, 296, 359, 360, 362, 363, 364, 366, 367, 369, 373, 392, 394, 407, 420, 441, 480, 529, 531, 543, 544, 548, 549, 554, 555, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 573, 574, 576, 577, 580, 582, 583, 586], "etc": [2, 6, 15, 17, 21, 25, 29, 38, 44, 51, 52, 53, 54, 55, 56, 79, 86, 87, 90, 359, 363, 373, 375, 480, 481, 482, 483, 491, 492, 493, 494, 533, 538, 539, 540, 542, 543, 545, 546, 548, 550, 552, 554, 559, 560, 561, 562, 565, 567, 568, 573, 574, 577, 579, 585], "depend": [2, 3, 7, 11, 17, 18, 26, 34, 41, 42, 79, 108, 174, 175, 176, 178, 179, 180, 181, 190, 191, 196, 197, 209, 210, 211, 212, 224, 230, 231, 235, 236, 310, 359, 360, 362, 363, 364, 367, 374, 376, 402, 403, 415, 416, 417, 418, 490, 495, 497, 508, 529, 532, 535, 536, 538, 539, 540, 545, 548, 551, 556, 558, 559, 560, 561, 563, 565, 573, 577, 579, 580], "empty_lik": [2, 25, 359, 563], "deafult": [2, 16, 39, 81, 359, 374, 486], "uniniti": [2, 80, 81, 359], "from_dlpack": [2, 25, 359], "full_lik": [2, 25, 359, 562], "fill_valu": [2, 16, 25, 39, 84, 85, 202, 208, 359, 362, 374, 489, 523, 548, 560, 562], "scalar": [2, 5, 6, 7, 11, 22, 25, 28, 29, 30, 34, 61, 85, 90, 177, 234, 315, 323, 359, 362, 363, 364, 367, 425, 548, 557, 559, 573, 579], "fill": [2, 6, 15, 16, 23, 25, 29, 38, 39, 51, 80, 84, 85, 87, 90, 91, 92, 95, 96, 359, 363, 373, 374, 481, 489, 560], "valu": [2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 50, 51, 52, 53, 54, 55, 60, 67, 73, 82, 84, 85, 86, 87, 90, 108, 125, 129, 133, 167, 168, 174, 175, 176, 177, 178, 180, 181, 189, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 232, 233, 234, 236, 237, 238, 251, 252, 253, 254, 255, 257, 262, 265, 266, 270, 272, 275, 276, 281, 282, 283, 289, 295, 296, 299, 300, 302, 310, 315, 320, 323, 324, 342, 343, 344, 348, 351, 353, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 400, 409, 410, 411, 414, 415, 416, 417, 418, 419, 425, 432, 433, 434, 438, 439, 447, 453, 454, 458, 460, 461, 462, 463, 464, 469, 473, 474, 475, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 513, 515, 519, 539, 540, 542, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 561, 563, 565, 567, 573, 579, 580], "where": [2, 5, 6, 7, 11, 13, 15, 16, 19, 20, 23, 25, 28, 29, 30, 34, 36, 38, 39, 42, 43, 51, 84, 85, 88, 90, 181, 196, 206, 211, 218, 219, 224, 283, 295, 324, 355, 359, 362, 363, 364, 365, 367, 369, 371, 373, 374, 377, 378, 402, 403, 407, 409, 411, 413, 414, 415, 418, 419, 422, 424, 432, 434, 435, 437, 443, 447, 467, 480, 481, 482, 483, 488, 489, 506, 508, 509, 510, 529, 531, 532, 533, 534, 539, 540, 542, 543, 544, 546, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 573, 577, 586], "everi": [2, 6, 7, 29, 30, 84, 85, 247, 359, 363, 364, 535, 538, 540, 542, 544, 545, 546, 547, 548, 550, 554, 555, 556, 558, 559, 560, 561, 562, 565, 567, 569, 579], "equal": [2, 3, 5, 6, 7, 11, 13, 15, 17, 18, 19, 23, 26, 28, 29, 30, 34, 36, 38, 41, 45, 46, 51, 82, 84, 85, 108, 185, 187, 203, 204, 224, 228, 247, 250, 324, 359, 360, 362, 363, 364, 367, 369, 373, 375, 376, 377, 401, 410, 411, 414, 416, 432, 434, 441, 447, 483, 491, 492, 493, 494, 495, 497, 503, 506, 507, 508, 520, 545, 546, 548, 550, 552, 555, 560, 561], "000123": [2, 85, 359], "ones": [2, 6, 8, 10, 15, 23, 25, 29, 33, 38, 82, 85, 90, 92, 96, 156, 157, 189, 342, 359, 361, 362, 363, 365, 366, 387, 481, 482, 483, 529, 543, 547, 550, 554, 561, 567, 568, 579], "linspac": [2, 25, 73, 359, 554, 563, 565, 586], "stop": [2, 8, 25, 31, 55, 73, 86, 87, 168, 343, 346, 348, 349, 350, 352, 359, 361, 365, 370, 371, 453, 454, 455, 467, 554, 557, 563, 565, 573, 579], "num": [2, 25, 86, 87, 359, 540, 554, 565], "endpoint": [2, 25, 51, 86, 87, 359, 554], "logspac": [2, 25, 359, 565], "10": [2, 5, 6, 7, 8, 10, 11, 15, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 55, 73, 85, 86, 87, 176, 183, 184, 187, 191, 197, 202, 208, 210, 220, 225, 231, 232, 252, 258, 259, 260, 262, 265, 266, 270, 275, 281, 282, 289, 296, 302, 308, 320, 348, 359, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 376, 377, 383, 384, 386, 392, 399, 401, 406, 408, 409, 410, 413, 418, 419, 420, 436, 441, 442, 443, 444, 446, 462, 464, 467, 475, 480, 481, 482, 483, 489, 491, 496, 499, 500, 501, 502, 504, 505, 507, 508, 529, 532, 539, 542, 546, 547, 548, 550, 557, 560, 561, 565, 567, 568, 584], "first": [2, 5, 6, 11, 13, 15, 16, 17, 19, 25, 28, 29, 30, 34, 36, 38, 40, 42, 45, 46, 51, 52, 53, 55, 86, 87, 132, 140, 153, 177, 181, 183, 185, 186, 187, 188, 194, 199, 200, 201, 202, 207, 208, 213, 214, 216, 217, 220, 222, 224, 234, 250, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 398, 401, 402, 403, 405, 408, 413, 415, 416, 418, 420, 424, 439, 440, 443, 444, 453, 454, 455, 456, 457, 466, 467, 469, 485, 486, 487, 491, 492, 493, 496, 499, 500, 515, 529, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 550, 554, 555, 556, 558, 559, 561, 563, 565, 567, 568, 570, 577, 579, 580, 584], "rang": [2, 6, 19, 25, 29, 51, 73, 86, 87, 258, 324, 359, 363, 364, 375, 377, 491, 499, 500, 505, 507, 529, 548, 552, 561, 565, 568, 569, 570, 579, 585], "log": [2, 5, 6, 11, 25, 28, 29, 34, 87, 211, 213, 359, 362, 363, 416, 540, 546, 547, 550, 555, 558, 559, 561, 563, 565, 568], "space": [2, 6, 7, 25, 28, 29, 30, 73, 86, 87, 258, 262, 355, 359, 363, 364, 365, 532, 563], "start": [2, 23, 25, 50, 73, 86, 87, 359, 361, 363, 529, 534, 535, 538, 539, 540, 541, 547, 548, 550, 551, 554, 559, 561, 563, 564, 565, 567, 568, 569, 572, 573, 579, 585], "sequenc": [2, 6, 10, 11, 13, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 52, 54, 56, 59, 61, 62, 63, 64, 65, 66, 67, 82, 85, 87, 90, 92, 96, 109, 111, 124, 128, 129, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 291, 295, 296, 308, 309, 310, 312, 314, 315, 323, 324, 344, 346, 352, 359, 363, 364, 365, 366, 367, 369, 371, 377, 378, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 425, 428, 429, 430, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 446, 447, 463, 473, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 540, 547, 548, 549, 550, 552, 561, 562, 563, 565, 570, 572, 582], "last": [2, 6, 10, 11, 12, 13, 16, 18, 19, 20, 23, 25, 29, 33, 34, 35, 36, 41, 42, 43, 45, 52, 86, 87, 90, 153, 353, 355, 359, 361, 363, 365, 366, 367, 368, 369, 374, 376, 377, 378, 394, 398, 401, 413, 422, 424, 429, 430, 433, 436, 439, 440, 441, 443, 486, 487, 495, 496, 497, 499, 500, 509, 510, 529, 533, 540, 542, 544, 545, 548, 550, 553, 558, 560, 561, 563, 565, 573, 579], "final": [2, 7, 30, 52, 86, 87, 262, 359, 364, 538, 540, 542, 543, 545, 547, 548, 550, 551, 553, 555, 557, 558, 559, 563, 564, 568, 575, 585], "number": [2, 3, 5, 6, 7, 10, 11, 13, 15, 16, 17, 19, 20, 23, 25, 26, 28, 29, 30, 33, 34, 36, 38, 39, 40, 42, 43, 45, 46, 50, 51, 52, 73, 82, 85, 86, 87, 88, 89, 90, 109, 114, 115, 116, 117, 118, 120, 121, 124, 127, 128, 129, 130, 131, 134, 160, 161, 162, 177, 181, 189, 193, 198, 199, 206, 218, 219, 224, 227, 228, 229, 237, 262, 271, 274, 293, 308, 309, 315, 323, 324, 357, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 373, 374, 375, 377, 378, 382, 389, 390, 392, 395, 402, 403, 404, 411, 416, 418, 423, 424, 432, 434, 435, 437, 438, 440, 441, 443, 445, 447, 453, 454, 455, 480, 484, 489, 491, 492, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 515, 520, 529, 530, 531, 539, 540, 546, 547, 548, 549, 550, 557, 558, 561, 563, 565, 568], "gener": [2, 5, 6, 10, 15, 21, 25, 28, 29, 33, 38, 44, 55, 73, 86, 87, 111, 203, 216, 227, 228, 359, 360, 362, 363, 366, 367, 369, 373, 377, 392, 416, 423, 447, 480, 481, 483, 484, 506, 520, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 562, 564, 565, 567, 569, 570, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585], "oper": [2, 3, 6, 7, 10, 23, 25, 26, 29, 30, 33, 46, 86, 87, 134, 177, 187, 227, 251, 258, 259, 260, 310, 359, 360, 362, 363, 364, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 529, 531, 538, 539, 542, 543, 546, 548, 549, 550, 551, 552, 555, 558, 559, 561, 563, 565, 568, 569, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586], "perform": [2, 6, 10, 11, 19, 20, 25, 29, 30, 33, 34, 42, 43, 62, 66, 86, 87, 238, 258, 259, 260, 281, 282, 283, 297, 304, 356, 359, 362, 363, 364, 366, 367, 370, 371, 377, 378, 392, 394, 418, 425, 453, 454, 455, 463, 464, 499, 500, 509, 510, 513, 533, 542, 543, 544, 546, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 568, 573, 576, 579, 580, 581, 582, 583, 584, 586], "relev": [2, 25, 55, 87, 359, 363, 529, 532, 538, 539, 540, 543, 546, 547, 548, 550, 557, 560, 561, 568, 577, 584, 585], "onli": [2, 6, 11, 13, 15, 23, 25, 29, 34, 36, 38, 45, 53, 55, 87, 132, 133, 164, 173, 215, 216, 252, 359, 360, 361, 362, 363, 364, 367, 369, 371, 373, 374, 376, 377, 408, 415, 418, 436, 439, 456, 457, 463, 464, 466, 467, 468, 473, 474, 481, 482, 483, 486, 487, 496, 503, 506, 516, 529, 531, 534, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 573, 578, 579, 580, 585, 586], "like": [2, 6, 13, 25, 29, 36, 87, 112, 133, 359, 360, 363, 367, 369, 373, 402, 439, 483, 529, 532, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 579, 584], "sampl": [2, 6, 15, 19, 25, 28, 29, 38, 42, 52, 86, 87, 359, 363, 373, 377, 480, 481, 482, 483, 506, 508, 556, 560, 561], "on_valu": [2, 25, 87, 90, 359], "off_valu": [2, 25, 87, 90, 359], "float32": [2, 3, 7, 10, 25, 26, 30, 33, 42, 87, 90, 92, 96, 106, 107, 111, 116, 119, 120, 121, 122, 125, 128, 129, 130, 134, 137, 143, 283, 314, 359, 360, 363, 364, 366, 367, 385, 387, 391, 425, 515, 529, 548, 550, 560, 561], "cuda": [2, 6, 15, 25, 29, 38, 51, 52, 53, 54, 55, 56, 86, 87, 90, 150, 151, 152, 165, 166, 359, 361, 363, 373, 480, 481, 482, 483, 529, 565, 573, 574, 584], "cpu": [2, 4, 6, 15, 25, 27, 29, 38, 51, 52, 53, 54, 55, 56, 73, 82, 84, 86, 87, 90, 91, 92, 96, 151, 153, 154, 155, 156, 160, 163, 165, 166, 169, 170, 172, 173, 359, 361, 363, 367, 373, 407, 480, 481, 482, 483, 515, 529, 540, 549, 559, 561, 573, 577, 579, 582, 584], "evenli": [2, 6, 10, 13, 23, 25, 28, 33, 36, 73, 86, 87, 359, 363, 366, 369, 382, 383, 384, 385, 387, 389, 391, 441], "both": [2, 5, 6, 11, 25, 28, 29, 34, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 111, 127, 130, 132, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 265, 274, 279, 281, 289, 315, 352, 354, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 529, 540, 544, 546, 547, 548, 549, 550, 551, 554, 555, 558, 559, 561, 563, 565, 567, 568, 569, 570, 572, 573, 579, 582, 584, 585, 586], "descript": [2, 5, 11, 28, 34, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 265, 274, 279, 281, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 538, 551, 557], "hint": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 265, 274, 279, 281, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 538, 543, 551, 554, 555, 558, 559, 562], "abov": [2, 5, 6, 11, 15, 22, 28, 29, 34, 38, 67, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 265, 274, 279, 281, 283, 315, 352, 356, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 539, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 563, 565, 567, 568, 569, 570, 579, 584], "assum": [2, 5, 6, 11, 28, 29, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 265, 274, 279, 281, 289, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 542, 544, 545, 547, 548, 551, 560, 561, 563, 567, 568, 573], "simplic": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 265, 274, 279, 281, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 551, 563, 569, 572], "nestabl": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 251, 259, 260, 265, 274, 279, 281, 283, 295, 310, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 541, 550, 551, 558, 561, 574], "therefor": [2, 5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 111, 127, 130, 133, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 251, 259, 260, 265, 274, 279, 281, 283, 295, 310, 315, 352, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 475, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 531, 535, 538, 540, 542, 543, 546, 547, 548, 549, 550, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 565, 567, 569, 573, 576, 579, 585], "01": [2, 6, 7, 8, 29, 30, 31, 34, 38, 87, 213, 228, 229, 262, 308, 342, 343, 348, 359, 362, 363, 364, 365, 367, 373, 404, 419, 482, 483, 544, 570], "02": [2, 8, 14, 15, 28, 31, 38, 87, 178, 179, 213, 308, 342, 343, 348, 359, 362, 363, 364, 365, 372, 373, 475, 482, 483, 560], "03": [2, 5, 8, 28, 31, 38, 87, 191, 211, 308, 343, 348, 359, 362, 364, 365, 366, 367, 396, 406, 482], "04": [2, 8, 22, 26, 31, 61, 62, 87, 121, 197, 299, 342, 343, 348, 356, 359, 360, 362, 364, 365, 366, 396, 561], "05": [2, 5, 6, 8, 14, 28, 29, 31, 37, 54, 87, 213, 271, 281, 299, 342, 343, 348, 359, 362, 363, 364, 365, 367, 372, 409, 475, 513, 560, 561], "100": [2, 6, 25, 28, 29, 30, 87, 187, 232, 266, 282, 296, 359, 362, 363, 364, 367, 371, 406, 462, 529, 532, 533, 547, 561, 568, 569, 570, 573], "464": [2, 5, 38, 87, 180, 181, 359, 362], "15888336": [2, 87, 359], "1000": [2, 25, 87, 359, 529, 568], "2154": [2, 87, 359], "43469003": [2, 87, 359], "10000": [2, 25, 87, 359], "meshgrid": [2, 25, 359], "spars": [2, 12, 25, 35, 88, 359, 368, 430], "index": [2, 6, 7, 13, 16, 17, 18, 23, 25, 29, 30, 36, 39, 40, 41, 82, 88, 165, 248, 266, 270, 295, 296, 357, 359, 361, 363, 364, 369, 371, 374, 375, 376, 439, 443, 458, 459, 460, 463, 464, 465, 471, 473, 486, 487, 489, 491, 492, 493, 495, 496, 527, 546, 547, 555, 557, 560, 561, 567, 579], "xy": [2, 25, 88, 359], "one": [2, 6, 7, 10, 11, 13, 16, 17, 19, 23, 25, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 41, 42, 73, 79, 88, 90, 109, 111, 168, 187, 213, 218, 219, 247, 291, 295, 296, 298, 312, 314, 315, 323, 342, 343, 346, 348, 350, 352, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 377, 383, 384, 385, 386, 387, 388, 391, 405, 408, 409, 413, 415, 424, 425, 435, 436, 437, 440, 442, 446, 475, 486, 489, 491, 492, 493, 494, 499, 501, 523, 529, 532, 533, 538, 539, 540, 542, 543, 544, 545, 546, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 567, 568, 570, 573, 579, 580, 582, 585], "dimension": [2, 6, 11, 13, 16, 19, 20, 23, 28, 29, 34, 36, 42, 43, 45, 73, 82, 88, 359, 363, 367, 369, 374, 377, 378, 398, 399, 405, 408, 411, 413, 414, 424, 425, 441, 486, 487, 489, 502, 503, 504, 505, 506, 507, 508, 509, 510, 557, 563, 565, 576, 579, 586], "arbitrari": [2, 3, 6, 23, 26, 88, 109, 134, 344, 359, 360, 365, 546, 554, 555, 557, 558, 559, 561, 569, 573, 580, 585], "repres": [2, 5, 6, 10, 11, 28, 29, 33, 34, 51, 88, 90, 120, 176, 177, 179, 182, 191, 231, 236, 355, 359, 360, 362, 363, 365, 366, 367, 392, 393, 413, 416, 417, 543, 563, 567, 576, 577, 580], "grid": [2, 88, 359, 550, 561, 572], "coordin": [2, 5, 16, 28, 29, 39, 88, 181, 359, 362, 363, 374, 489], "each": [2, 3, 5, 6, 7, 8, 10, 11, 13, 16, 17, 19, 23, 26, 28, 29, 30, 31, 33, 34, 36, 39, 40, 42, 45, 46, 52, 54, 55, 56, 63, 64, 65, 67, 88, 109, 121, 124, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 250, 258, 265, 266, 289, 324, 343, 344, 346, 348, 349, 350, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 397, 398, 399, 402, 403, 404, 408, 410, 411, 412, 414, 416, 417, 418, 423, 434, 438, 440, 441, 443, 445, 447, 462, 469, 480, 489, 491, 492, 494, 500, 501, 508, 531, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 572, 573, 575, 576, 580, 582, 585], "numer": [2, 3, 5, 7, 11, 15, 16, 19, 26, 28, 29, 30, 34, 38, 39, 41, 45, 46, 51, 88, 108, 174, 177, 189, 193, 197, 198, 199, 203, 204, 205, 207, 215, 216, 220, 221, 222, 223, 224, 227, 228, 229, 233, 234, 237, 238, 271, 272, 299, 300, 308, 309, 359, 360, 362, 363, 364, 367, 373, 374, 377, 398, 405, 408, 413, 416, 418, 420, 422, 424, 481, 482, 483, 485, 486, 487, 489, 490, 495, 502, 505, 507, 548, 556, 557, 559, 560, 561, 562, 563, 565, 569, 576, 579, 585], "conserv": [2, 88, 359], "memori": [2, 6, 13, 29, 36, 88, 152, 163, 168, 170, 173, 359, 361, 363, 366, 369, 394, 439, 529, 547, 548, 549, 558, 559, 563, 565, 571, 573, 579, 581, 582, 583], "cartesian": [2, 88, 359], "matrix": [2, 6, 7, 10, 11, 29, 30, 33, 34, 45, 51, 52, 88, 93, 94, 247, 253, 359, 363, 364, 366, 367, 393, 397, 399, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 423, 426, 538, 548, 555, 559, 577, 579], "ij": [2, 19, 88, 359, 377, 501], "provid": [2, 6, 7, 11, 13, 16, 19, 20, 23, 25, 29, 30, 34, 36, 39, 42, 43, 52, 55, 58, 60, 88, 90, 114, 115, 116, 117, 118, 126, 134, 146, 153, 252, 257, 295, 296, 356, 359, 360, 361, 363, 364, 367, 369, 374, 377, 378, 410, 413, 424, 435, 436, 443, 486, 506, 508, 509, 510, 529, 531, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 563, 567, 569, 572, 573, 577, 578, 579, 580, 581, 582, 583, 586], "zero": [2, 3, 5, 6, 8, 10, 11, 13, 16, 17, 19, 20, 25, 26, 28, 29, 31, 33, 34, 38, 39, 42, 43, 51, 52, 55, 61, 63, 64, 79, 80, 82, 88, 90, 92, 93, 94, 96, 108, 109, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 190, 191, 192, 197, 198, 203, 204, 205, 206, 211, 215, 216, 218, 219, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 254, 258, 291, 342, 343, 348, 349, 350, 352, 356, 359, 360, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 387, 389, 391, 392, 393, 396, 397, 399, 404, 406, 407, 408, 409, 410, 411, 412, 414, 416, 424, 425, 434, 435, 436, 437, 440, 447, 475, 481, 482, 483, 486, 487, 488, 489, 491, 492, 493, 494, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 533, 543, 546, 548, 549, 550, 554, 556, 557, 560, 565, 568, 569, 578], "vector": [2, 6, 7, 10, 11, 30, 33, 34, 52, 88, 254, 258, 283, 324, 359, 363, 364, 366, 367, 393, 398, 402, 403, 405, 408, 413, 418, 419, 423, 424, 425, 426, 572, 579], "": [2, 6, 7, 8, 11, 19, 29, 31, 34, 42, 50, 51, 52, 53, 54, 55, 56, 88, 93, 94, 122, 123, 153, 156, 157, 167, 227, 263, 264, 310, 343, 345, 346, 347, 348, 350, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 377, 384, 386, 388, 390, 400, 411, 418, 419, 425, 468, 506, 508, 515, 529, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 575, 578, 579, 580, 582, 583, 584, 585], "respect": [2, 5, 6, 8, 11, 28, 29, 31, 34, 51, 88, 174, 177, 181, 183, 185, 186, 187, 188, 193, 194, 199, 201, 202, 207, 208, 213, 214, 216, 217, 220, 222, 227, 234, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 359, 362, 363, 365, 366, 367, 370, 382, 389, 390, 415, 418, 453, 454, 455, 515, 537, 538, 539, 540, 543, 546, 547, 548, 550, 554, 557, 559, 561, 562, 575, 585], "ha": [2, 6, 11, 13, 17, 19, 23, 26, 29, 30, 34, 36, 40, 42, 50, 88, 153, 174, 206, 224, 228, 279, 355, 359, 361, 362, 363, 365, 367, 369, 375, 377, 408, 417, 418, 422, 435, 442, 491, 492, 493, 494, 499, 500, 503, 505, 506, 507, 508, 531, 532, 533, 538, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 575, 578, 579, 581, 582, 585], "effect": [2, 6, 8, 19, 29, 31, 42, 88, 342, 350, 359, 363, 365, 377, 506, 508, 532, 538, 543, 546, 547, 551, 554, 558, 563, 573], "ignor": [2, 6, 23, 29, 55, 88, 359, 363, 367, 371, 407, 467, 468, 545, 547, 550, 561, 573, 585], "n": [2, 6, 10, 11, 13, 15, 16, 19, 20, 28, 29, 33, 34, 36, 38, 39, 42, 43, 45, 88, 93, 94, 359, 363, 366, 367, 369, 371, 373, 374, 377, 378, 382, 383, 384, 385, 387, 389, 391, 395, 401, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 422, 423, 424, 425, 434, 435, 437, 443, 447, 464, 481, 482, 483, 489, 503, 506, 507, 508, 509, 510, 529, 541, 561], "rank": [2, 6, 11, 13, 20, 29, 34, 36, 43, 88, 359, 363, 367, 369, 374, 378, 398, 400, 411, 415, 417, 422, 424, 425, 434, 435, 443, 446, 447, 489, 509, 510, 552], "For": [2, 6, 11, 17, 29, 34, 49, 73, 88, 174, 175, 176, 177, 178, 179, 180, 181, 189, 190, 191, 196, 197, 198, 209, 210, 211, 212, 213, 215, 224, 227, 228, 230, 231, 232, 235, 236, 237, 359, 362, 363, 367, 369, 375, 377, 416, 418, 422, 432, 443, 491, 492, 493, 494, 502, 504, 507, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 572, 573, 576, 577, 580, 585, 586], "length": [2, 6, 13, 23, 29, 36, 46, 50, 73, 88, 324, 359, 363, 364, 367, 369, 418, 419, 439, 553, 561, 568], "ni": [2, 88, 359], "len": [2, 6, 11, 29, 34, 88, 359, 363, 367, 423, 529, 546, 547, 558, 559, 561, 567, 570], "xi": [2, 88, 359], "native_arrai": [2, 3, 5, 7, 25, 27, 28, 30, 41, 59, 62, 85, 88, 90, 92, 96, 108, 109, 110, 111, 119, 124, 130, 154, 162, 169, 183, 187, 188, 192, 193, 194, 199, 201, 202, 207, 208, 215, 220, 222, 225, 227, 232, 247, 285, 286, 288, 314, 356, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 373, 374, 377, 378, 383, 384, 391, 395, 396, 399, 404, 410, 411, 419, 420, 422, 425, 428, 430, 432, 439, 480, 489, 497, 504, 507, 509, 515, 519, 556, 560, 561], "A": [2, 3, 6, 7, 13, 15, 19, 20, 23, 26, 28, 29, 30, 34, 36, 38, 40, 43, 46, 50, 51, 56, 82, 89, 109, 151, 168, 221, 223, 226, 250, 281, 282, 308, 309, 312, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 377, 378, 392, 401, 406, 407, 412, 413, 417, 418, 432, 435, 437, 441, 443, 456, 459, 461, 463, 464, 465, 466, 467, 471, 472, 473, 474, 480, 481, 482, 483, 485, 491, 501, 509, 510, 513, 515, 516, 520, 530, 531, 532, 533, 537, 538, 539, 541, 546, 548, 549, 552, 554, 555, 559, 560, 561, 565, 568, 573, 574, 579, 580], "one_hot": [2, 25, 359, 529, 570], "depth": [2, 6, 10, 25, 29, 33, 50, 53, 90, 258, 276, 359, 363, 364, 366, 371, 387, 388, 468, 540, 547, 568, 569, 570, 572], "scatter": [2, 7, 25, 30, 90, 295, 296, 359, 364, 545, 563, 586], "defin": [2, 6, 7, 11, 25, 29, 30, 34, 90, 227, 281, 282, 359, 362, 363, 364, 367, 377, 398, 403, 404, 417, 502, 503, 504, 506, 529, 538, 539, 543, 547, 548, 551, 554, 557, 559, 560, 561, 562, 567, 569, 573, 574, 576, 577, 578, 579, 580, 583, 585, 586], "hot": [2, 25, 90, 359, 529], "dimens": [2, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 20, 23, 25, 29, 30, 33, 34, 35, 36, 38, 39, 40, 42, 43, 45, 46, 52, 62, 66, 90, 93, 94, 258, 259, 260, 262, 274, 306, 324, 356, 359, 363, 364, 366, 367, 368, 369, 370, 373, 374, 375, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 425, 429, 430, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 453, 454, 455, 485, 486, 487, 489, 491, 492, 493, 494, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 550, 552, 555, 557, 559, 560, 561, 563, 565, 568], "when": [2, 3, 6, 11, 12, 15, 16, 19, 23, 25, 26, 28, 29, 34, 35, 38, 39, 42, 46, 50, 51, 53, 90, 108, 177, 197, 211, 224, 283, 302, 309, 359, 360, 362, 363, 364, 366, 367, 368, 371, 373, 374, 377, 382, 411, 416, 428, 429, 430, 456, 457, 466, 467, 468, 481, 482, 483, 486, 487, 489, 490, 502, 504, 506, 508, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 565, 567, 568, 570, 573, 577, 579, 582, 583, 584, 585], "j": [2, 6, 11, 19, 25, 28, 29, 34, 90, 214, 250, 359, 363, 364, 367, 377, 402, 422, 501, 540, 541, 575], "unless": [2, 6, 11, 25, 29, 90, 359, 363, 367, 411, 544, 549, 558, 573], "overrid": [2, 25, 90, 359, 543, 545], "z": [2, 5, 6, 7, 11, 12, 15, 17, 19, 25, 28, 29, 30, 34, 35, 36, 38, 42, 45, 46, 51, 86, 87, 89, 90, 158, 177, 181, 183, 186, 188, 193, 201, 202, 204, 205, 206, 207, 208, 213, 214, 216, 217, 218, 219, 234, 250, 262, 265, 266, 281, 282, 296, 306, 308, 316, 324, 359, 361, 362, 363, 364, 367, 368, 369, 371, 373, 374, 375, 377, 398, 408, 413, 414, 418, 425, 428, 429, 430, 432, 459, 463, 465, 473, 481, 482, 483, 486, 491, 501, 502, 504, 505, 506, 529, 544, 546, 550, 565, 567], "ones_lik": [2, 25, 359, 544, 570], "tril": [2, 25, 359], "k": [2, 6, 10, 11, 15, 25, 28, 29, 33, 34, 38, 82, 93, 94, 214, 250, 359, 363, 364, 366, 367, 371, 373, 374, 396, 400, 408, 409, 415, 417, 418, 419, 422, 464, 481, 482, 483, 489, 529, 541, 542, 559, 560, 565, 575, 579], "m": [2, 6, 11, 15, 28, 29, 34, 38, 45, 88, 93, 94, 214, 359, 363, 367, 371, 373, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 464, 481, 482, 483, 529, 535, 539, 540, 541, 547, 565], "whose": [2, 5, 6, 7, 11, 13, 17, 19, 25, 28, 29, 30, 34, 36, 40, 42, 45, 85, 93, 94, 176, 179, 182, 190, 191, 192, 224, 225, 230, 231, 235, 236, 252, 310, 359, 362, 363, 364, 367, 369, 375, 377, 397, 399, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 436, 440, 491, 492, 493, 500, 501, 551, 561], "innermost": [2, 11, 34, 93, 94, 359, 367, 397, 399, 401, 402, 403, 404, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422], "two": [2, 6, 11, 17, 29, 30, 34, 45, 46, 73, 82, 88, 93, 94, 132, 140, 187, 200, 228, 250, 359, 360, 362, 363, 364, 367, 369, 375, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 444, 491, 492, 493, 494, 533, 538, 539, 542, 543, 548, 550, 551, 559, 560, 561, 563, 564, 568, 570, 576, 584], "mxn": [2, 11, 34, 93, 94, 359, 367, 401, 409, 411, 412, 414, 415, 419, 422], "matric": [2, 11, 29, 34, 45, 88, 93, 94, 359, 363, 366, 367, 393, 397, 399, 401, 402, 403, 404, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 423, 555, 572, 579], "diagon": [2, 6, 11, 29, 34, 82, 93, 94, 359, 363, 367, 400, 422], "main": [2, 6, 11, 29, 34, 82, 93, 94, 359, 363, 367, 400, 401, 422, 539, 542, 545, 546, 553, 556, 577, 579, 580, 585], "below": [2, 11, 34, 42, 93, 94, 206, 359, 362, 363, 367, 401, 422, 508, 529, 534, 538, 539, 541, 542, 546, 547, 548, 549, 550, 552, 553, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 575, 577, 582, 584], "lower": [2, 5, 6, 11, 15, 28, 29, 34, 38, 50, 51, 82, 93, 218, 359, 362, 363, 367, 373, 397, 404, 483, 529, 540, 550, 559, 561, 563, 565, 573, 574, 575, 576, 577, 579, 580, 585, 586], "triangular": [2, 11, 34, 93, 94, 359, 363, 367, 397, 404, 415], "part": [2, 6, 29, 53, 93, 94, 206, 359, 362, 363, 367, 404, 515, 529, 535, 540, 542, 545, 555, 559, 561, 562, 563, 565, 566, 570, 572, 573, 577, 579, 584, 585, 586], "specifi": [2, 3, 6, 7, 11, 12, 13, 15, 16, 17, 19, 20, 22, 23, 26, 29, 30, 34, 35, 36, 38, 39, 42, 43, 50, 61, 73, 80, 84, 86, 91, 93, 94, 95, 108, 110, 158, 162, 164, 167, 168, 169, 227, 248, 265, 266, 270, 279, 324, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 395, 400, 401, 404, 409, 420, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 435, 436, 440, 442, 443, 446, 447, 461, 463, 464, 471, 472, 473, 474, 481, 482, 483, 486, 487, 489, 491, 492, 493, 494, 495, 499, 500, 501, 505, 507, 509, 510, 540, 541, 545, 548, 549, 554, 555, 556, 558, 559, 560, 561, 563, 565, 568, 569, 585], "alloc": [2, 3, 26, 93, 94, 108, 359, 360, 538, 540, 573], "triu": [2, 25, 359], "upper": [2, 6, 11, 15, 29, 34, 38, 50, 82, 94, 359, 363, 367, 373, 397, 404, 415, 483, 558, 561], "zeros_lik": [2, 25, 34, 108, 216, 342, 343, 346, 348, 350, 359, 360, 362, 365, 366, 369, 384, 386, 391, 414, 432, 559, 563], "data_typ": [3, 6, 26, 29, 136, 360, 545, 548, 561, 562], "_arraywithdatatyp": [3, 45], "astyp": [3, 10, 26, 33, 360, 366, 385, 387, 391, 529, 548, 558, 559, 563], "irrespect": [3, 11, 26, 34, 108, 360, 367, 418, 546, 558, 567, 586], "promot": [3, 5, 6, 11, 26, 28, 29, 34, 41, 45, 46, 108, 111, 132, 133, 134, 140, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 196, 197, 199, 209, 210, 211, 212, 213, 217, 220, 224, 227, 230, 231, 232, 233, 234, 235, 236, 238, 360, 362, 363, 367, 369, 377, 397, 398, 405, 406, 408, 410, 411, 413, 414, 416, 417, 424, 425, 433, 443, 495, 503, 506, 542, 551, 552, 555], "rule": [3, 6, 11, 26, 28, 34, 108, 111, 132, 133, 134, 182, 193, 220, 227, 238, 360, 362, 363, 367, 369, 397, 398, 405, 410, 413, 417, 433, 542, 543, 546, 547, 548, 550, 553, 554, 555, 557, 561, 563, 580], "cast": [3, 6, 11, 19, 26, 29, 34, 108, 111, 134, 360, 363, 367, 377, 425, 499, 500, 505, 507, 548, 555, 560, 565], "point": [3, 5, 6, 11, 15, 17, 19, 26, 28, 29, 34, 38, 42, 73, 74, 75, 80, 82, 84, 91, 95, 108, 121, 125, 129, 134, 175, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 193, 196, 197, 198, 209, 210, 211, 212, 213, 224, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 357, 359, 360, 362, 363, 367, 373, 375, 376, 377, 397, 399, 402, 403, 404, 406, 409, 410, 411, 414, 415, 416, 417, 418, 422, 425, 482, 483, 491, 492, 493, 494, 496, 499, 500, 502, 503, 504, 505, 506, 507, 508, 533, 538, 539, 540, 542, 543, 545, 547, 550, 551, 554, 558, 559, 561, 562, 563, 565, 567, 568, 572, 585], "nan": [3, 5, 6, 7, 17, 19, 26, 28, 29, 30, 108, 174, 175, 176, 177, 178, 179, 180, 181, 189, 190, 191, 192, 196, 197, 198, 200, 203, 205, 209, 210, 211, 212, 213, 215, 224, 225, 227, 228, 230, 231, 232, 235, 236, 237, 279, 323, 357, 360, 362, 363, 364, 375, 377, 378, 491, 492, 493, 494, 502, 503, 504, 506, 507, 508, 509, 510, 542, 548, 551, 557, 562], "infin": [3, 5, 6, 7, 11, 26, 28, 29, 34, 108, 174, 176, 177, 179, 180, 181, 189, 190, 191, 196, 197, 198, 199, 203, 204, 209, 210, 211, 212, 213, 215, 224, 227, 228, 230, 231, 232, 235, 236, 237, 279, 357, 360, 362, 363, 364, 367, 377, 378, 416, 425, 502, 504, 509, 510, 542, 551], "integr": [3, 6, 26, 28, 108, 360, 363, 529, 537, 539, 541, 577, 579, 581, 582, 583], "implement": [3, 4, 6, 17, 18, 26, 27, 29, 34, 41, 108, 134, 169, 174, 175, 176, 178, 179, 180, 181, 190, 191, 196, 197, 209, 210, 211, 212, 224, 227, 230, 231, 235, 236, 360, 361, 362, 363, 367, 375, 376, 377, 402, 403, 404, 413, 491, 492, 493, 494, 495, 497, 502, 503, 504, 506, 529, 538, 541, 542, 543, 544, 546, 548, 549, 551, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 582, 585, 586], "non": [3, 6, 11, 15, 16, 19, 20, 26, 29, 34, 38, 39, 42, 43, 51, 53, 55, 108, 126, 133, 215, 216, 360, 362, 363, 367, 371, 373, 374, 377, 378, 399, 409, 411, 418, 420, 424, 425, 469, 482, 486, 487, 488, 489, 502, 503, 504, 505, 506, 508, 509, 510, 543, 546, 548, 550, 556, 565, 579], "desir": [3, 4, 6, 16, 23, 26, 27, 29, 39, 51, 52, 108, 110, 111, 169, 360, 361, 363, 374, 488, 531, 540, 544, 547, 548, 559, 565, 579], "match": [3, 6, 23, 26, 29, 108, 227, 291, 360, 362, 363, 364, 513, 538, 543, 545, 546, 550, 560, 580, 585], "newli": [3, 26, 108, 252, 360, 364, 540, 547, 558, 561], "alwai": [3, 13, 26, 36, 108, 177, 283, 360, 362, 363, 364, 369, 439, 529, 538, 540, 543, 544, 546, 548, 551, 553, 554, 555, 558, 559, 560, 561, 562, 563, 565, 573], "float64": [3, 15, 19, 26, 29, 38, 42, 73, 84, 108, 111, 116, 121, 122, 125, 126, 130, 134, 136, 137, 143, 146, 359, 360, 363, 373, 482, 483, 500, 515, 548, 560, 561], "broadcast_arrai": [3, 26, 360], "against": [3, 6, 11, 16, 26, 28, 29, 34, 39, 109, 219, 289, 360, 363, 364, 367, 374, 408, 409, 411, 414, 486, 531, 561, 565, 573, 579], "other": [3, 6, 7, 13, 19, 23, 26, 28, 29, 30, 36, 42, 45, 46, 73, 90, 109, 133, 197, 211, 219, 247, 248, 359, 360, 362, 363, 364, 373, 377, 433, 443, 483, 506, 508, 529, 532, 535, 538, 539, 540, 542, 543, 546, 547, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 585, 586], "correspond": [3, 5, 6, 7, 10, 13, 16, 17, 19, 23, 26, 28, 29, 33, 36, 42, 46, 58, 60, 109, 121, 124, 181, 224, 308, 324, 356, 360, 362, 363, 364, 366, 367, 369, 373, 374, 375, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 402, 403, 409, 416, 417, 440, 480, 486, 487, 491, 492, 493, 494, 499, 500, 505, 506, 507, 508, 515, 529, 538, 540, 543, 544, 546, 547, 548, 550, 551, 554, 555, 556, 557, 559, 561, 563, 565, 579], "x1": [3, 5, 6, 7, 11, 16, 26, 28, 29, 30, 34, 39, 41, 45, 46, 82, 92, 96, 109, 119, 133, 140, 162, 177, 181, 183, 185, 186, 187, 188, 193, 194, 199, 200, 201, 202, 207, 208, 213, 214, 216, 217, 218, 219, 220, 222, 224, 227, 234, 238, 247, 250, 359, 360, 361, 362, 363, 364, 367, 374, 376, 398, 405, 408, 413, 417, 420, 421, 424, 490, 496, 515, 523, 529, 542, 548, 550, 552, 554, 558, 559], "x2": [3, 5, 6, 7, 11, 16, 26, 28, 29, 30, 34, 39, 45, 46, 92, 96, 109, 133, 140, 162, 177, 181, 183, 185, 186, 187, 188, 193, 194, 199, 200, 201, 202, 207, 208, 213, 214, 216, 217, 218, 219, 220, 222, 224, 227, 234, 238, 247, 359, 360, 361, 362, 363, 364, 367, 374, 398, 405, 408, 413, 417, 420, 421, 424, 490, 515, 523, 542, 548, 550, 552, 554, 558, 559], "x3": [3, 7, 92, 96, 109, 247, 359, 360, 364], "mix": [3, 5, 26, 28, 30, 35, 38, 45, 46, 109, 134, 183, 186, 187, 188, 193, 194, 199, 201, 202, 207, 208, 217, 220, 222, 227, 261, 265, 266, 283, 312, 315, 360, 362, 363, 364, 366, 367, 368, 369, 372, 374, 377, 383, 385, 388, 391, 393, 395, 396, 397, 420, 428, 430, 432, 475, 490, 501, 503, 506, 541, 550, 556, 558, 561, 563, 565, 574, 579, 583, 585], "broadcast_to": [3, 26, 360, 548], "store": [3, 7, 11, 13, 23, 26, 30, 34, 36, 40, 53, 82, 92, 96, 110, 262, 359, 363, 364, 367, 369, 422, 441, 494, 515, 516, 536, 540, 543, 544, 546, 551, 556, 559, 565, 567, 568, 569, 574], "can_cast": [3, 26, 360, 548, 555, 559], "occur": [3, 6, 17, 26, 29, 40, 111, 360, 363, 374, 375, 486, 487, 491, 492, 493, 494, 542, 547, 552], "accord": [3, 7, 13, 19, 26, 36, 42, 111, 121, 177, 187, 265, 270, 295, 296, 360, 362, 363, 364, 367, 369, 377, 424, 434, 447, 506, 508, 523, 538, 539, 542, 548, 555, 559, 561], "as_n": [3, 4, 23, 26, 27, 114, 115, 116, 117, 118, 119, 125, 153, 154, 165, 360, 361, 548], "int32": [3, 7, 15, 16, 19, 26, 30, 38, 39, 82, 92, 96, 108, 111, 113, 117, 119, 122, 124, 125, 129, 130, 134, 138, 142, 144, 164, 266, 283, 314, 359, 360, 361, 363, 364, 373, 374, 377, 481, 482, 483, 487, 499, 500, 505, 507, 548, 559, 561, 565], "finfo": [3, 26, 360, 561], "inform": [3, 8, 26, 31, 121, 124, 248, 352, 360, 364, 365, 529, 537, 538, 539, 540, 542, 546, 547, 552, 561, 582], "about": [3, 26, 121, 124, 360, 529, 533, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 554, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 573, 580, 581, 584], "8": [3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 45, 46, 52, 59, 65, 84, 85, 89, 92, 96, 114, 116, 117, 118, 121, 155, 170, 177, 178, 179, 183, 184, 187, 189, 191, 199, 201, 202, 207, 208, 213, 215, 216, 218, 219, 220, 224, 225, 227, 228, 229, 232, 233, 236, 237, 251, 252, 254, 258, 259, 262, 265, 274, 281, 282, 283, 285, 286, 288, 295, 296, 308, 310, 342, 345, 347, 350, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 383, 387, 388, 391, 392, 393, 395, 399, 400, 401, 404, 408, 409, 410, 413, 416, 418, 419, 420, 422, 423, 425, 428, 429, 430, 432, 436, 443, 444, 446, 457, 464, 480, 481, 482, 483, 485, 490, 491, 493, 495, 497, 500, 501, 503, 505, 507, 508, 539, 546, 547, 550, 557, 561, 564, 568], "14": [3, 5, 6, 10, 15, 19, 26, 28, 29, 30, 33, 34, 36, 38, 108, 121, 124, 175, 179, 181, 188, 192, 213, 216, 220, 225, 231, 238, 308, 342, 360, 362, 363, 364, 365, 366, 367, 369, 375, 377, 383, 384, 386, 388, 392, 396, 401, 413, 422, 446, 481, 482, 483, 491, 500, 501, 546, 550, 561], "resolut": [3, 26, 121, 360, 540], "1e": [3, 6, 8, 11, 12, 14, 26, 29, 31, 34, 35, 37, 54, 55, 121, 271, 272, 299, 300, 308, 342, 343, 348, 350, 360, 363, 364, 365, 367, 368, 372, 418, 428, 429, 430, 475, 513, 515, 529, 546, 555, 558, 560, 569, 570], "06": [3, 15, 28, 31, 59, 121, 176, 191, 348, 356, 360, 363, 365, 483, 513, 515, 561, 568], "min": [3, 6, 7, 11, 19, 26, 29, 30, 34, 42, 121, 124, 219, 259, 295, 296, 308, 360, 362, 363, 364, 367, 377, 409, 415, 418, 419, 425, 529], "4028235e": [3, 121, 360], "38": [3, 6, 28, 29, 38, 121, 235, 360, 362, 363, 367, 410, 550], "max": [3, 6, 7, 11, 19, 26, 29, 30, 34, 42, 55, 121, 124, 218, 253, 254, 259, 283, 295, 296, 360, 362, 363, 364, 367, 377, 409, 411, 414, 547, 559, 561], "iinfo": [3, 26, 360, 553], "integ": [3, 5, 6, 10, 11, 13, 15, 19, 20, 23, 28, 29, 33, 34, 36, 38, 42, 43, 45, 46, 73, 84, 124, 125, 130, 133, 134, 138, 174, 183, 184, 185, 186, 187, 188, 189, 198, 199, 217, 224, 227, 228, 237, 238, 270, 324, 359, 360, 362, 363, 364, 366, 367, 369, 373, 376, 377, 378, 382, 383, 384, 385, 387, 389, 391, 400, 410, 424, 425, 441, 480, 481, 482, 483, 484, 485, 496, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 520, 540, 546, 548, 556, 557, 560, 561, 565, 567], "119": [3, 124], "122": [3, 124, 191, 362], "int8": [3, 15, 26, 38, 117, 122, 124, 125, 129, 360, 481, 548, 561], "128": [3, 6, 10, 26, 29, 33, 46, 124, 258, 270, 360, 363, 364, 366, 367, 384, 386, 391, 413], "127": [3, 6, 26, 29, 124, 360, 363], "12": [3, 5, 6, 7, 10, 11, 15, 19, 26, 28, 29, 30, 33, 34, 36, 37, 38, 42, 45, 46, 124, 177, 178, 183, 187, 188, 191, 193, 194, 195, 208, 220, 222, 228, 231, 237, 238, 254, 258, 259, 272, 295, 296, 300, 308, 362, 363, 364, 366, 367, 369, 372, 373, 374, 375, 377, 383, 387, 392, 393, 401, 409, 413, 420, 422, 436, 440, 442, 444, 446, 475, 481, 482, 483, 490, 491, 499, 500, 501, 505, 507, 539, 544, 546, 548, 550, 557, 562], "54": [3, 5, 10, 28, 29, 33, 38, 124, 190, 191, 196, 232, 237, 362, 363, 366, 367, 377, 393, 396, 410, 413, 481, 482, 483, 501, 550], "1220": [3, 124], "int16": [3, 15, 19, 26, 38, 111, 117, 122, 124, 130, 144, 360, 377, 481, 499, 500, 505, 507, 548, 559, 561, 565], "32768": [3, 26, 124], "32767": [3, 26, 124], "is_bool_dtyp": [3, 26, 360], "is_float_dtyp": [3, 26, 360, 562], "see": [3, 5, 11, 16, 17, 19, 20, 28, 29, 34, 39, 42, 43, 45, 46, 73, 83, 86, 110, 129, 134, 177, 181, 183, 185, 186, 187, 188, 193, 194, 197, 199, 201, 202, 207, 208, 211, 213, 214, 216, 217, 220, 222, 224, 227, 234, 238, 359, 360, 362, 363, 367, 374, 375, 377, 378, 398, 411, 414, 417, 424, 425, 487, 491, 492, 493, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 531, 534, 538, 539, 540, 542, 543, 545, 546, 547, 549, 550, 554, 555, 559, 560, 561, 562, 563, 565, 567, 568, 572, 573, 575], "is_int_dtyp": [3, 26, 360, 560, 562], "is_uint_dtyp": [3, 26, 360, 560, 562], "result_typ": [3, 26, 360, 548], "arrays_and_dtyp": [3, 26, 134, 360], "involv": [3, 26, 134, 177, 360, 362, 532, 534, 541, 547, 548, 550, 563, 570, 579, 585], "_arraywithdevic": [4, 45], "dev": [4, 23, 27, 91, 158, 164, 359, 361, 539, 549, 555, 567, 569], "get": [4, 11, 23, 27, 34, 40, 50, 51, 52, 119, 120, 121, 124, 153, 154, 155, 158, 163, 167, 170, 173, 249, 267, 268, 269, 271, 272, 273, 275, 277, 278, 294, 307, 356, 360, 361, 364, 367, 371, 425, 458, 494, 529, 533, 534, 537, 538, 539, 541, 545, 547, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 574, 579, 585], "handl": [4, 6, 23, 27, 29, 46, 55, 150, 151, 152, 153, 154, 158, 162, 163, 170, 173, 361, 363, 541, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 563, 569, 576, 586], "format": [4, 6, 19, 22, 23, 24, 27, 29, 67, 119, 154, 258, 356, 360, 361, 363, 364, 366, 377, 382, 389, 390, 501, 513, 529, 541, 548, 549, 550, 551, 552, 559, 565, 567, 568, 575, 577, 579, 580], "to_devic": [4, 27, 153, 361, 529], "stream": [4, 27, 169, 361, 529, 583], "move": [4, 6, 27, 29, 169, 361, 363, 529, 540, 562], "dure": [4, 8, 19, 23, 27, 31, 42, 50, 53, 55, 169, 316, 342, 343, 348, 361, 363, 364, 365, 366, 367, 370, 377, 392, 408, 453, 454, 455, 506, 508, 539, 546, 548, 549, 552, 555, 556, 558, 559, 560, 561, 563, 573, 579, 580, 585], "In": [4, 7, 13, 27, 30, 36, 163, 169, 170, 173, 177, 227, 248, 283, 361, 362, 363, 364, 367, 369, 373, 416, 439, 483, 529, 531, 533, 535, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 567, 568, 569, 570, 572, 573, 575, 577, 579, 580, 582, 585], "addit": [4, 6, 7, 14, 27, 29, 30, 37, 52, 169, 177, 228, 258, 259, 260, 324, 361, 362, 364, 372, 475, 538, 539, 540, 544, 546, 548, 550, 551, 557, 559, 561, 562, 563, 567, 568, 570, 579, 580, 581, 585], "support": [4, 6, 7, 11, 27, 29, 30, 34, 55, 122, 126, 146, 156, 169, 173, 177, 215, 216, 228, 251, 263, 280, 283, 284, 310, 360, 361, 362, 363, 364, 366, 367, 393, 402, 403, 404, 407, 409, 418, 425, 513, 529, 531, 532, 533, 535, 539, 542, 543, 546, 549, 550, 551, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 567, 568, 570, 574, 576, 578, 579, 582, 584, 585, 586], "__dlpack__": [4, 27, 83, 169, 359, 361], "mai": [4, 5, 6, 11, 17, 18, 27, 28, 34, 41, 45, 46, 73, 83, 169, 194, 202, 208, 215, 216, 222, 257, 359, 361, 362, 363, 364, 367, 375, 376, 377, 416, 425, 491, 492, 493, 494, 495, 497, 502, 503, 504, 506, 533, 537, 538, 539, 540, 542, 546, 547, 548, 552, 555, 557, 558, 559, 560, 561, 563, 566, 567, 569, 586], "choos": [4, 16, 17, 27, 169, 215, 216, 361, 362, 374, 375, 377, 490, 491, 492, 493, 494, 502, 503, 504, 506, 538, 539, 540, 561, 566, 570, 586], "librari": [4, 17, 27, 169, 197, 211, 215, 216, 361, 362, 367, 375, 377, 403, 404, 491, 492, 493, 494, 502, 503, 504, 506, 529, 531, 532, 533, 534, 536, 538, 539, 542, 563, 570, 571, 573, 574, 575, 576, 577, 579, 583, 586], "specif": [4, 7, 27, 30, 40, 53, 134, 166, 169, 215, 216, 258, 259, 260, 292, 360, 361, 362, 364, 367, 369, 370, 373, 376, 377, 403, 404, 420, 443, 453, 454, 455, 480, 494, 496, 502, 503, 504, 506, 515, 527, 529, 531, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 552, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 574, 575, 577, 578, 580, 581, 582, 586], "caveat": [4, 27, 169, 361], "code": [4, 5, 23, 27, 28, 46, 169, 208, 251, 259, 260, 283, 295, 310, 355, 361, 364, 365, 366, 367, 369, 391, 410, 411, 412, 443, 529, 531, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586], "would": [4, 6, 13, 27, 29, 36, 62, 66, 169, 356, 361, 363, 369, 439, 529, 532, 534, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 553, 554, 556, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 573, 579, 585], "portabl": [4, 27, 169, 361, 529, 577], "_arraywithelementwis": [5, 45], "ab": [5, 11, 21, 28, 44, 45, 46, 224, 362, 363, 367, 371, 409, 419, 425, 464, 467, 515, 543, 548, 556, 559, 561], "absolut": [5, 6, 11, 21, 23, 28, 29, 34, 45, 174, 362, 363, 367, 409, 410, 411, 416, 513, 515, 534, 539, 563], "aco": [5, 28, 362], "real": [5, 6, 19, 28, 29, 42, 175, 176, 178, 180, 181, 193, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 220, 224, 227, 232, 233, 234, 236, 237, 238, 362, 363, 367, 377, 402, 416, 502, 504, 506, 546, 581], "invers": [5, 6, 11, 28, 29, 34, 175, 176, 178, 179, 180, 181, 182, 362, 363, 367, 406, 410, 414, 523, 548, 572], "cosin": [5, 28, 175, 176, 190, 191, 362, 363], "57": [5, 28, 155, 175, 176, 178, 179, 181, 191, 192, 225, 361, 362], "69": [5, 31, 38, 175, 211, 346, 362, 363, 365, 367, 409, 410, 482, 561, 568], "acosh": [5, 28, 122, 123, 360, 362], "area": [5, 6, 28, 29, 176, 179, 182, 362, 363, 532, 558, 563, 571, 575], "hyperbol": [5, 28, 176, 179, 182, 191, 231, 236, 362], "sector": [5, 28, 176, 179, 182, 362, 532], "32": [5, 6, 15, 28, 29, 34, 38, 45, 46, 61, 120, 176, 187, 188, 228, 229, 258, 282, 356, 360, 362, 363, 364, 366, 367, 373, 374, 377, 384, 386, 387, 388, 391, 393, 408, 413, 481, 482, 483, 490, 501, 529, 547, 557, 568, 584], "99": [5, 8, 26, 28, 38, 84, 176, 190, 308, 346, 359, 362, 364, 365, 377, 482, 501], "add": [5, 14, 21, 23, 28, 37, 44, 45, 46, 54, 291, 316, 351, 355, 362, 363, 364, 365, 372, 475, 515, 520, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 554, 555, 558, 559, 561, 562, 563, 565, 567, 573, 575, 577, 579], "second": [5, 6, 8, 11, 13, 17, 28, 29, 30, 31, 34, 36, 40, 45, 46, 55, 132, 140, 177, 181, 183, 185, 186, 187, 188, 194, 199, 200, 201, 202, 207, 208, 213, 214, 216, 217, 220, 222, 224, 234, 250, 275, 302, 320, 342, 343, 348, 360, 362, 363, 364, 365, 367, 369, 370, 371, 375, 398, 401, 402, 403, 405, 408, 413, 415, 416, 418, 420, 424, 443, 444, 454, 457, 491, 492, 493, 533, 539, 542, 545, 548, 550, 558, 559, 561, 567, 584], "compat": [5, 11, 13, 16, 19, 20, 28, 34, 36, 39, 42, 43, 45, 46, 110, 177, 181, 183, 185, 186, 187, 188, 193, 194, 199, 201, 202, 207, 208, 213, 214, 216, 217, 220, 222, 224, 227, 234, 238, 360, 362, 367, 369, 374, 377, 378, 398, 411, 414, 417, 420, 424, 425, 439, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 532, 544, 554, 559, 560, 562, 565, 573], "multipli": [5, 6, 10, 19, 28, 29, 33, 177, 234, 362, 363, 366, 377, 392, 499, 540, 543, 544, 546, 550], "sum": [5, 6, 7, 10, 11, 12, 19, 23, 28, 29, 30, 33, 34, 35, 42, 45, 46, 51, 168, 177, 213, 234, 259, 295, 296, 361, 362, 363, 364, 366, 367, 368, 377, 392, 396, 409, 418, 422, 425, 429, 430, 500, 501, 529, 546, 548, 555, 557, 558, 559, 565], "determin": [5, 6, 11, 13, 17, 20, 23, 28, 29, 30, 34, 41, 43, 45, 46, 51, 82, 111, 113, 120, 126, 127, 128, 129, 130, 131, 146, 159, 160, 161, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 196, 197, 199, 203, 204, 205, 206, 209, 210, 211, 212, 213, 217, 220, 224, 227, 230, 231, 232, 233, 234, 235, 236, 238, 247, 250, 279, 280, 284, 285, 286, 287, 288, 310, 323, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 375, 378, 395, 397, 398, 399, 401, 405, 406, 408, 410, 411, 413, 414, 416, 417, 422, 424, 425, 433, 453, 454, 455, 491, 492, 493, 494, 495, 509, 510, 520, 531, 546, 548, 549, 551, 555, 559, 563], "15": [5, 6, 7, 11, 15, 19, 25, 26, 28, 29, 30, 33, 34, 36, 38, 42, 46, 85, 121, 177, 183, 187, 193, 201, 207, 213, 220, 227, 228, 229, 254, 258, 259, 262, 275, 281, 282, 302, 308, 320, 359, 360, 362, 363, 364, 366, 367, 369, 373, 374, 375, 377, 383, 393, 401, 404, 406, 413, 419, 420, 440, 446, 481, 482, 489, 491, 499, 500, 501, 515, 539, 550, 557, 582], "asin": [5, 28, 362], "sine": [5, 28, 178, 179, 230, 231, 362], "927": [5, 28, 178], "asinh": [5, 28, 362], "atan": [5, 28, 362], "tangent": [5, 28, 180, 181, 182, 235, 236, 362, 551], "785": [5, 28, 180, 181, 362], "atan2": [5, 28, 362], "quotient": [5, 28, 181, 362], "245": [5, 33, 181, 366, 392, 393], "68": [5, 38, 62, 84, 181, 356, 359, 362, 363, 372, 475, 482, 483], "588": [5, 181, 362], "inf": [5, 6, 7, 11, 28, 29, 30, 34, 181, 197, 203, 204, 205, 206, 209, 210, 279, 323, 357, 362, 363, 364, 367, 409, 425, 548, 557], "36": [5, 6, 10, 19, 29, 30, 34, 181, 228, 229, 258, 259, 362, 363, 364, 367, 371, 377, 393, 410, 413, 419, 423, 467, 501], "75": [5, 6, 28, 29, 30, 33, 38, 86, 179, 181, 193, 260, 281, 308, 359, 362, 363, 364, 367, 371, 373, 383, 406, 413, 464, 483], "52": [5, 28, 30, 31, 38, 181, 191, 193, 258, 259, 282, 342, 362, 364, 365, 366, 367, 377, 393, 413, 483, 501], "719": [5, 181, 362], "197": [5, 181, 362], "atanh": [5, 28, 362], "549": [5, 28, 33, 182, 362, 366, 393], "47": [5, 6, 15, 28, 29, 30, 31, 38, 182, 232, 258, 259, 346, 362, 363, 364, 365, 366, 373, 393, 482, 483], "bitwise_and": [5, 28, 362, 552], "11": [5, 6, 7, 10, 11, 15, 19, 28, 29, 30, 33, 34, 36, 38, 42, 46, 177, 180, 183, 197, 227, 228, 234, 252, 258, 259, 265, 282, 296, 362, 363, 364, 366, 367, 368, 369, 371, 373, 374, 375, 377, 383, 384, 392, 393, 401, 404, 406, 408, 409, 413, 418, 419, 430, 436, 441, 442, 444, 446, 462, 464, 474, 481, 482, 483, 490, 491, 499, 500, 501, 508, 546, 547, 548, 550, 557, 562], "bitwise_invert": [5, 28, 362], "bitiwse_invert": [5, 184], "bitwise_left_shift": [5, 28, 362], "bitwise_or": [5, 28, 362], "bitwise_right_shift": [5, 28, 45, 362], "64": [5, 6, 10, 28, 29, 30, 33, 34, 38, 42, 46, 52, 120, 187, 224, 232, 233, 258, 259, 348, 360, 362, 363, 364, 365, 366, 367, 377, 384, 386, 388, 391, 410, 413, 419, 423, 482, 501, 505, 529, 539, 568, 569, 584], "b": [5, 6, 7, 10, 14, 19, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 59, 61, 62, 63, 64, 65, 66, 74, 75, 79, 82, 84, 85, 87, 90, 92, 96, 108, 109, 110, 111, 119, 129, 130, 134, 154, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 289, 295, 296, 308, 310, 314, 315, 323, 342, 343, 344, 346, 348, 350, 352, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 422, 423, 425, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 462, 463, 464, 465, 467, 473, 474, 475, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 530, 533, 534, 541, 542, 544, 546, 547, 550, 555, 557, 560, 564, 565, 566, 568, 569, 570, 571, 575], "16": [5, 6, 7, 10, 11, 15, 19, 26, 28, 29, 30, 33, 34, 36, 38, 45, 46, 124, 187, 211, 228, 235, 259, 262, 308, 354, 360, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 377, 391, 393, 397, 401, 404, 413, 419, 446, 464, 481, 482, 483, 490, 500, 501, 529, 540, 550, 568], "bitwise_xor": [5, 28, 45, 362], "89": [5, 15, 26, 28, 29, 38, 46, 124, 188, 360, 362, 363, 367, 377, 420, 482, 483, 507], "51": [5, 6, 28, 29, 30, 38, 188, 220, 231, 362, 363, 483], "18": [5, 6, 15, 28, 29, 33, 34, 38, 42, 62, 188, 193, 227, 231, 356, 362, 363, 367, 373, 377, 387, 401, 408, 413, 481, 482, 483, 500, 501, 505, 546, 550, 552], "19": [5, 6, 15, 28, 29, 34, 38, 179, 188, 211, 220, 235, 362, 363, 367, 371, 373, 376, 401, 409, 422, 467, 481, 482, 483, 497, 550], "26": [5, 6, 14, 15, 29, 30, 31, 38, 188, 193, 231, 281, 342, 362, 363, 364, 365, 366, 367, 371, 372, 377, 391, 401, 413, 420, 457, 475, 481, 482, 501], "27": [5, 6, 11, 15, 28, 29, 33, 34, 38, 42, 187, 188, 191, 224, 231, 232, 282, 362, 363, 364, 366, 367, 371, 377, 396, 408, 413, 423, 457, 464, 482, 501, 505], "23": [5, 6, 10, 15, 25, 28, 29, 30, 38, 85, 188, 191, 204, 205, 206, 227, 228, 229, 231, 237, 359, 362, 363, 366, 367, 371, 374, 388, 396, 401, 409, 419, 457, 464, 481, 482, 483, 490, 529, 561, 565], "20": [5, 6, 10, 15, 19, 28, 29, 30, 33, 34, 38, 42, 188, 192, 196, 225, 228, 232, 258, 266, 270, 296, 308, 362, 363, 364, 367, 373, 374, 377, 383, 384, 394, 401, 406, 409, 413, 420, 481, 489, 490, 499, 500, 501, 505, 507, 529, 547, 552, 563, 567], "74": [5, 38, 188, 213, 362, 363, 367, 410], "41": [5, 6, 28, 29, 30, 34, 62, 180, 188, 220, 232, 253, 254, 356, 362, 363, 364, 367, 377, 397, 507], "59": [5, 188], "24": [5, 6, 11, 19, 29, 30, 33, 34, 38, 45, 188, 208, 220, 228, 229, 232, 258, 259, 362, 363, 364, 367, 371, 377, 383, 401, 409, 413, 457, 481, 482, 483, 499, 501, 515, 568], "ceil": [5, 28, 73, 359, 362, 558], "round": [5, 6, 28, 29, 177, 189, 198, 199, 232, 237, 238, 362, 363, 531, 532, 533, 535, 538, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "co": [5, 7, 28, 262, 362, 364, 532, 537, 548, 565, 572], "express": [5, 6, 28, 29, 175, 178, 180, 181, 190, 192, 225, 230, 235, 362, 363, 523, 551, 553, 559, 565, 570, 579, 580], "radian": [5, 6, 28, 29, 175, 178, 180, 181, 190, 192, 225, 230, 235, 362, 363, 551], "416": [5, 190, 362], "540": [5, 190], "990": [5, 190], "cosh": [5, 28, 362], "angl": [5, 6, 28, 29, 181, 191, 231, 236, 362, 363, 572], "76": [5, 19, 26, 28, 38, 124, 176, 191, 231, 360, 362, 367, 371, 377, 420, 464, 482, 501], "81": [5, 26, 28, 34, 38, 124, 191, 211, 233, 360, 362, 367, 371, 373, 377, 410, 423, 464, 483, 501, 561], "deg2rad": [5, 28, 362], "degre": [5, 6, 19, 28, 29, 42, 192, 225, 362, 363, 377, 506, 508, 578], "convers": [5, 6, 29, 192, 225, 297, 304, 364, 533, 538, 556, 564, 566, 570, 572, 573, 574, 578, 585], "90": [5, 6, 28, 29, 188, 192, 225, 228, 362, 363, 367, 377, 413, 501, 532], "180": [5, 28, 192, 225, 362], "270": [5, 28, 192, 225, 362], "360": [5, 28, 192, 225, 362, 547], "71": [5, 28, 192, 225, 362], "28": [5, 10, 14, 28, 29, 30, 33, 34, 38, 42, 192, 211, 225, 281, 342, 362, 363, 364, 365, 366, 367, 372, 377, 384, 386, 388, 391, 393, 413, 475, 481, 482, 483, 501, 505, 529], "divid": [5, 6, 7, 13, 23, 28, 29, 36, 45, 46, 199, 308, 362, 363, 364, 369, 441, 543, 546, 550, 561], "dividend": [5, 28, 193, 199, 227, 238, 362], "divisor": [5, 6, 8, 19, 28, 29, 31, 42, 55, 193, 199, 201, 227, 238, 342, 343, 348, 362, 363, 365, 377, 506, 508], "375": [5, 194, 222], "erf": [5, 28, 362], "exponenti": [5, 6, 28, 29, 195, 196, 213, 224, 362, 363], "gauss": [5, 28, 195, 362], "error": [5, 6, 23, 28, 29, 53, 55, 59, 195, 356, 362, 363, 367, 377, 416, 419, 502, 504, 533, 537, 539, 540, 542, 543, 544, 547, 548, 549, 550, 552, 553, 554, 559, 561, 562, 567, 573, 579], "328": [5, 195, 235, 362], "677": [5, 195, 362], "842": [5, 195, 235, 362], "exp": [5, 6, 28, 29, 197, 213, 362, 363, 367, 416, 557, 559], "evalu": [5, 23, 28, 29, 196, 197, 209, 210, 211, 212, 215, 221, 223, 229, 233, 354, 362, 363, 365, 371, 378, 466, 467, 509, 510, 540, 546, 548, 555, 556, 563, 579], "71828198": [5, 28, 196], "38905573": [5, 28, 196], "08553696": [5, 28, 196], "expm1": [5, 28, 362, 548], "244": [5, 197, 363, 529], "918": [5, 197], "48": [5, 6, 28, 29, 30, 31, 38, 61, 176, 197, 232, 281, 342, 346, 356, 362, 363, 364, 365, 367, 371, 377, 413, 457, 482, 501], "_": [5, 23, 28, 31, 111, 197, 203, 216, 228, 258, 342, 343, 360, 362, 363, 364, 365, 367, 369, 371, 377, 416, 419, 426, 447, 463, 506, 535, 546, 551, 553, 558, 561, 568], "147": [5, 197, 362], "floor": [5, 6, 28, 187, 362, 363, 558], "floor_divid": [5, 28, 362, 520], "greater": [5, 6, 15, 28, 29, 38, 45, 46, 175, 178, 181, 185, 187, 198, 199, 224, 227, 229, 237, 362, 363, 367, 369, 373, 398, 410, 442, 483, 540, 560], "greater_equ": [5, 28, 45, 46, 213, 362], "isfinit": [5, 28, 362, 559], "test": [5, 6, 20, 28, 29, 43, 127, 130, 203, 204, 205, 206, 289, 360, 362, 363, 364, 378, 509, 510, 513, 516, 529, 533, 537, 538, 541, 545, 548, 550, 552, 553, 556, 559, 562, 573, 579], "out_i": [5, 28, 29, 203, 204, 205, 206, 362, 363], "self_i": [5, 28, 29, 203, 204, 205, 206], "finit": [5, 6, 28, 29, 177, 181, 203, 224, 227, 362, 363], "isinf": [5, 28, 362], "detect_posit": [5, 28, 204, 362], "detect_neg": [5, 28, 204, 362], "detect": [5, 23, 28, 204, 362, 371, 456, 467, 538, 539, 544, 546, 547, 553, 561, 568, 569], "either": [5, 6, 7, 10, 19, 23, 28, 29, 30, 33, 34, 50, 52, 53, 83, 177, 181, 204, 209, 210, 212, 213, 227, 229, 230, 235, 257, 285, 291, 292, 316, 359, 362, 363, 364, 366, 367, 370, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 408, 413, 416, 453, 454, 455, 499, 500, 505, 507, 538, 539, 540, 544, 546, 548, 549, 550, 551, 552, 555, 558, 559, 560, 561, 563, 565, 568, 573, 579], "isnan": [5, 28, 362], "isreal": [5, 28, 362], "1j": [5, 6, 28, 29, 206, 308, 363, 364], "5j": [5, 28, 29, 206, 362, 363], "6j": [5, 6, 29, 206, 362, 363], "less": [5, 6, 11, 15, 19, 28, 29, 34, 38, 45, 46, 175, 176, 178, 181, 189, 209, 210, 211, 212, 224, 227, 229, 232, 362, 363, 367, 373, 377, 410, 411, 414, 425, 483, 506, 508, 532, 540, 546, 548, 550, 552, 554, 558, 559, 561, 563, 564, 565, 579, 581], "less_equ": [5, 28, 45, 46, 362, 552], "61": [5, 6, 28, 29, 31, 35, 38, 179, 209, 211, 233, 342, 362, 363, 365, 366, 368, 391, 428, 430, 483], "log10": [5, 28, 362], "logarithm": [5, 28, 196, 209, 210, 211, 212, 213, 362, 367, 416], "602": [5, 210, 362], "699": [5, 210, 362], "log1p": [5, 28, 362, 557], "693": [5, 28, 66, 179, 211, 356, 362, 368, 430], "001": [5, 6, 14, 26, 29, 31, 65, 121, 211, 343, 356, 360, 363, 365, 372, 475, 568, 569], "0953": [5, 28, 209, 211, 362], "log2": [5, 28, 362, 363], "logaddexp": [5, 28, 362], "logical_and": [5, 28, 362, 559, 563, 586], "logical_not": [5, 28, 362, 548], "logical_or": [5, 28, 362, 586], "conform": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 134, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 359, 360, 362, 363, 367, 369, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 433, 435, 436, 437, 439, 440, 442, 443, 447, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 551], "api": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 132, 134, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 359, 360, 362, 363, 367, 369, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 433, 435, 436, 437, 439, 440, 442, 443, 447, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 530, 531, 539, 541, 543, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 563, 564, 566, 568, 573, 574, 575, 577, 579, 581, 584, 586], "standard": [5, 6, 11, 14, 15, 19, 28, 29, 37, 38, 42, 51, 54, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 134, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 324, 359, 360, 362, 363, 364, 367, 369, 372, 373, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 433, 435, 436, 437, 439, 440, 442, 443, 447, 475, 482, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 530, 541, 542, 543, 546, 548, 551, 554, 558, 561, 562, 573, 575, 577, 578, 581, 582, 584], "http": [5, 28, 31, 111, 203, 216, 220, 228, 342, 343, 360, 362, 363, 365, 367, 369, 377, 416, 426, 447, 506, 529, 535, 536, 539, 542, 545, 547, 548, 551], "org": [5, 28, 31, 111, 203, 216, 228, 342, 343, 360, 362, 363, 365, 367, 369, 377, 416, 426, 447, 506, 529, 551], "latest": [5, 28, 52, 111, 203, 216, 228, 360, 362, 363, 367, 369, 377, 416, 447, 506, 529, 538, 539, 540, 544, 547, 548, 551, 562, 573, 584], "extens": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 134, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 359, 360, 362, 367, 369, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 433, 435, 436, 437, 439, 440, 442, 443, 447, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 535, 537, 539, 540, 551, 561, 576, 579, 586], "api_specif": [5, 28, 111, 203, 216, 228, 360, 362, 369, 377, 447, 506, 551], "signatur": [5, 28, 111, 203, 216, 228, 360, 362, 363, 367, 369, 377, 416, 447, 506, 532, 548, 549, 550, 551, 554, 558, 561, 562, 563, 576, 585], "elementwise_funct": [5, 28, 203, 216, 228, 362, 551], "html": [5, 28, 111, 203, 216, 228, 360, 362, 363, 367, 369, 377, 416, 447, 506, 532, 545, 551], "noqa": [5, 11, 28, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 111, 121, 124, 134, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 201, 202, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 324, 359, 360, 362, 363, 364, 367, 369, 374, 375, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 433, 435, 436, 437, 439, 440, 442, 443, 447, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 502, 504, 505, 506, 507, 508, 509, 510, 560], "logical_xor": [5, 28, 362], "maximum": [5, 6, 7, 8, 13, 16, 19, 23, 28, 29, 30, 31, 36, 39, 42, 46, 168, 253, 254, 262, 348, 361, 362, 363, 364, 365, 367, 369, 371, 374, 377, 409, 432, 468, 486, 502, 504, 520, 540, 550, 558, 568, 586], "use_wher": [5, 28, 218, 219, 362], "calcul": [5, 6, 12, 19, 23, 28, 29, 34, 35, 42, 46, 51, 174, 175, 176, 177, 178, 179, 180, 181, 190, 191, 193, 196, 197, 209, 210, 211, 212, 213, 218, 219, 220, 224, 230, 231, 232, 234, 235, 236, 289, 362, 363, 364, 367, 368, 377, 404, 413, 416, 428, 429, 430, 502, 503, 504, 505, 506, 507, 508, 532, 538, 551, 565], "formula": [5, 28, 218, 219, 362], "clip": [5, 6, 13, 28, 29, 30, 36, 218, 219, 253, 254, 362, 363, 364, 369, 546, 555, 557, 558, 568, 570], "than": [5, 6, 7, 11, 13, 15, 16, 17, 19, 23, 28, 29, 30, 34, 36, 38, 39, 40, 42, 45, 46, 73, 121, 168, 175, 176, 178, 181, 185, 187, 189, 198, 199, 209, 210, 211, 212, 218, 224, 227, 229, 232, 237, 285, 286, 288, 359, 360, 361, 362, 363, 364, 367, 369, 373, 374, 375, 377, 398, 408, 410, 411, 414, 425, 432, 436, 442, 483, 489, 491, 492, 493, 494, 499, 500, 505, 506, 507, 508, 532, 535, 540, 542, 546, 547, 548, 550, 552, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 573, 576, 577, 578, 579, 585, 586], "minimum": [5, 6, 7, 13, 16, 19, 28, 29, 30, 36, 39, 42, 174, 271, 272, 299, 300, 308, 309, 362, 363, 364, 369, 374, 377, 432, 487, 502, 504, 520, 576, 582, 586], "exce": [5, 6, 29, 219, 362, 363], "product": [5, 10, 11, 19, 28, 29, 33, 34, 42, 52, 220, 362, 363, 366, 367, 377, 395, 396, 398, 405, 408, 413, 424, 499, 500, 501, 505, 506, 538, 565, 579, 581], "30": [5, 6, 29, 30, 38, 42, 46, 51, 220, 258, 260, 266, 281, 282, 296, 302, 308, 362, 363, 364, 367, 371, 377, 406, 413, 465, 481, 482, 500, 501, 505, 547], "56": [5, 6, 10, 15, 28, 29, 33, 87, 220, 232, 235, 237, 342, 359, 362, 363, 365, 366, 367, 377, 384, 386, 388, 393, 413, 419, 482, 501, 550], "21": [5, 6, 7, 15, 25, 28, 29, 34, 38, 42, 45, 87, 124, 177, 179, 181, 187, 188, 220, 296, 359, 360, 362, 363, 367, 368, 371, 377, 401, 413, 430, 462, 481, 482, 499, 500, 501, 557], "not_equ": [5, 28, 45, 46, 362], "pow": [5, 28, 45, 46, 362, 542], "expon": [5, 6, 7, 29, 30, 224, 309, 362, 363, 364, 367, 410], "25": [5, 7, 11, 12, 15, 19, 22, 28, 29, 30, 33, 34, 37, 38, 42, 45, 46, 67, 86, 177, 187, 193, 195, 220, 224, 226, 228, 231, 232, 233, 237, 281, 282, 296, 308, 359, 362, 363, 364, 367, 368, 371, 372, 377, 383, 397, 401, 406, 423, 425, 429, 457, 475, 481, 482, 483, 500, 501, 503, 508, 546, 557], "rad2deg": [5, 28, 362], "286": [5, 29, 225], "458": [5, 225], "573": [5, 225, 362], "reciproc": [5, 28, 362], "333": [5, 28, 193, 226, 254, 362, 364, 366, 391], "remaind": [5, 6, 13, 23, 28, 29, 36, 200, 362, 369, 441, 542, 558], "modulu": [5, 28, 227, 362, 558], "instead": [5, 28, 151, 227, 361, 362, 538, 539, 540, 542, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 563, 565, 567, 568, 573, 577, 579, 585, 586], "sign": [5, 6, 11, 17, 19, 28, 29, 34, 73, 174, 177, 181, 187, 227, 359, 362, 363, 367, 375, 377, 416, 491, 492, 493, 494, 499, 500, 505, 507, 532, 539, 565, 570], "x2_i": [5, 28, 177, 181, 183, 185, 186, 187, 188, 193, 194, 199, 201, 202, 207, 208, 213, 214, 216, 217, 220, 222, 224, 227, 234, 362, 542], "94": [5, 8, 15, 28, 31, 38, 163, 228, 229, 346, 361, 363, 365, 483], "256": [5, 228, 229, 366, 384, 386, 388], "0001": [5, 55, 228, 229], "67": [5, 7, 28, 30, 38, 45, 188, 191, 228, 229, 231, 237, 258, 259, 308, 345, 347, 354, 362, 364, 365, 483], "45": [5, 6, 19, 28, 29, 31, 38, 46, 181, 193, 228, 229, 342, 348, 362, 363, 365, 367, 369, 377, 413, 441, 482, 483, 501], "678": [5, 228, 229], "33": [5, 15, 19, 28, 30, 31, 33, 179, 180, 187, 228, 254, 308, 346, 362, 363, 364, 365, 366, 367, 371, 377, 392, 393, 413, 474, 481, 501, 508], "sin": [5, 7, 28, 262, 362, 364, 543, 565], "841": [5, 22, 28, 59, 230, 356, 362], "909": [5, 28, 30, 230, 362], "141": [5, 28, 108, 230, 360, 362], "sinh": [5, 28, 362], "63": [5, 22, 28, 34, 67, 225, 231, 232, 362, 363, 367, 371, 377, 397, 413, 457, 501], "232": [5, 28, 231, 362], "sqrt": [5, 6, 28, 29, 51, 362, 363], "squar": [5, 11, 28, 34, 232, 344, 345, 347, 354, 362, 363, 365, 367, 371, 397, 399, 400, 402, 403, 404, 406, 410, 416, 417, 418, 423, 462], "root": [5, 28, 50, 232, 362, 536, 539, 540, 545, 559, 568], "73": [5, 34, 232, 367, 373, 397, 482, 561], "44": [5, 6, 15, 28, 29, 38, 179, 220, 228, 232, 233, 252, 362, 363, 364, 366, 367, 371, 374, 377, 392, 413, 464, 481, 482, 490, 501], "subtract": [5, 28, 45, 46, 362, 363, 543, 546, 550], "differ": [5, 6, 7, 19, 23, 29, 30, 42, 45, 46, 53, 121, 177, 234, 265, 266, 360, 362, 363, 364, 366, 367, 369, 377, 392, 393, 416, 433, 443, 499, 500, 505, 507, 508, 529, 531, 532, 533, 537, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 573, 576, 577, 578, 579, 582, 585, 586], "tan": [5, 28, 249, 362, 364, 546, 551, 554, 555, 558, 559, 565], "tanh": [5, 28, 362, 565], "762": [5, 28, 236, 362], "964": [5, 28, 236, 362], "trunc": [5, 28, 362], "025": [5, 237, 362], "trunc_divid": [5, 28, 362], "activ": [6, 7, 21, 29, 44, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 310, 363, 529, 535, 539, 540, 562, 569, 579, 582], "_arraywithactivationsexperiment": [6, 45], "batch_norm": [6, 29, 363], "mean": [6, 7, 10, 13, 15, 19, 21, 23, 29, 30, 33, 36, 38, 42, 44, 51, 168, 259, 344, 345, 347, 354, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 377, 384, 386, 387, 388, 391, 392, 400, 439, 453, 454, 455, 462, 481, 482, 529, 539, 540, 541, 542, 544, 546, 548, 549, 550, 555, 557, 558, 559, 561, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 576, 579], "varianc": [6, 19, 29, 42, 51, 363, 377, 508], "offset": [6, 11, 29, 34, 363, 367, 401, 422, 519], "scale": [6, 10, 14, 29, 31, 33, 37, 51, 52, 55, 166, 167, 349, 361, 363, 365, 366, 372, 392, 395, 396, 475, 579, 581], "train": [6, 8, 10, 29, 31, 33, 51, 342, 343, 348, 363, 365, 366, 392, 529, 533, 546, 549, 555, 568, 569, 570, 571, 572, 573, 574, 577, 578, 583, 585, 586], "ep": [6, 11, 29, 34, 121, 360, 363, 367, 411, 414], "batch": [6, 7, 11, 23, 29, 30, 34, 54, 166, 167, 262, 265, 266, 324, 361, 363, 364, 366, 367, 370, 372, 393, 407, 425, 453, 454, 455, 475, 529, 546, 555, 568, 577], "featur": [6, 29, 51, 363, 529, 539, 540, 543, 554, 559, 562, 563, 568, 573, 579, 580, 581, 585], "follow": [6, 7, 8, 10, 11, 17, 23, 29, 30, 31, 33, 34, 52, 55, 124, 168, 227, 281, 282, 283, 308, 309, 343, 346, 348, 349, 350, 360, 361, 362, 363, 364, 365, 366, 367, 371, 375, 395, 396, 409, 415, 425, 462, 468, 491, 492, 493, 494, 529, 531, 532, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 579, 582], "spatial": [6, 10, 29, 33, 363, 366, 382, 383, 384, 385, 387, 389, 391, 572], "normal": [6, 14, 15, 29, 37, 38, 51, 54, 363, 369, 372, 373, 433, 443, 475, 480, 482, 529, 538, 559, 563, 568, 577], "present": [6, 23, 29, 363, 531, 538, 540, 546, 548, 549, 554, 558, 565, 576, 577, 586], "ad": [6, 13, 29, 36, 44, 56, 308, 309, 363, 364, 367, 369, 403, 404, 435, 529, 532, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 569, 573, 578, 579], "small": [6, 11, 14, 29, 34, 37, 51, 54, 363, 367, 372, 411, 414, 416, 475, 529, 539, 547, 550, 555, 560, 563, 565, 569, 573, 580], "avoid": [6, 29, 197, 211, 252, 362, 363, 364, 539, 540, 544, 545, 546, 547, 548, 552, 553, 556, 559, 561, 562, 563, 579], "logit": [6, 12, 29, 35, 363, 368, 430, 529], "outpu": [6, 29, 363], "clamp": [6, 29, 363, 570], "elementwis": [6, 14, 29, 37, 238, 363, 367, 372, 423, 475, 555, 562, 565], "19722438": [6, 29, 363], "38629448": [6, 29, 363], "38629436": [6, 29, 363], "logsigmoid": [6, 29, 363], "31326175": [6, 22, 363], "126928": [6, 29], "01814993": 6, "00004578": 6, "57888985": 6, "31326169": [6, 29, 363], "69314718": [6, 22, 29, 363], "01104775": 6, "prelu": [6, 29, 363], "take": [6, 11, 13, 19, 29, 36, 51, 90, 188, 359, 362, 363, 367, 369, 408, 412, 439, 499, 520, 529, 533, 534, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 555, 558, 559, 560, 561, 563, 565, 567, 569, 570, 573, 576, 577, 585], "produc": [6, 10, 29, 33, 363, 366, 396, 538, 548, 560, 561, 562, 580, 582], "f": [6, 13, 29, 36, 363, 369, 371, 439, 459, 463, 464, 465, 473, 474, 529, 533, 534, 540, 541, 546, 547, 553, 565, 568, 575], "unidirect": [6, 363], "smaller": [6, 13, 19, 36, 258, 363, 364, 369, 377, 432, 440, 499, 500, 505, 507, 529, 540, 565], "relu6": [6, 29, 363], "rectifi": [6, 22, 29, 61, 63, 64, 356, 363], "linear": [6, 7, 10, 22, 29, 30, 33, 51, 52, 59, 60, 61, 63, 64, 67, 262, 291, 356, 363, 364, 366, 371, 417, 463, 529, 546, 551, 555, 559, 561, 563, 565, 568, 569, 570, 577, 578, 579, 582], "unit": [6, 22, 29, 59, 61, 62, 63, 64, 65, 66, 67, 356, 363, 529, 539, 542, 548, 559, 560, 561, 573, 580, 583], "selu": [6, 29, 363], "11133075": [6, 363], "05070102": [6, 29, 363], "10140204": [6, 363], "15210295": [6, 363], "20280409": [6, 363], "25350523": [6, 363], "30420589": [6, 363], "35490704": [6, 363], "thresholded_relu": [6, 29, 363], "custom": [6, 29, 363, 532, 536, 547, 552, 560, 561, 563, 569, 579, 583, 584, 585], "_arraywithconversionsexperiment": [6, 45], "creation": [6, 23, 29, 46, 545, 548, 549, 552, 554, 556, 559, 560, 561, 562, 565, 579, 581, 585], "_arraywithcreationexperiment": [6, 45], "eye_lik": [6, 29, 363], "refer": [6, 13, 19, 20, 29, 31, 36, 42, 43, 52, 82, 197, 211, 342, 343, 359, 362, 363, 365, 367, 369, 377, 378, 400, 424, 439, 506, 508, 509, 510, 529, 537, 538, 539, 540, 542, 543, 547, 548, 554, 555, 556, 557, 559, 560, 561, 573, 574, 579], "elsewher": [6, 29, 82, 359, 363, 374, 490, 539], "_arraywithdata_typeexperiment": [6, 45], "_arraywithdeviceexperiment": [6, 45], "_arraywithelementwiseexperiment": [6, 45], "allclos": [6, 29, 363], "rtol": [6, 11, 29, 34, 363, 367, 411, 414, 513, 515, 560], "atol": [6, 11, 29, 34, 363, 367, 411, 513, 515, 560], "08": [6, 19, 29, 38, 179, 362, 363, 366, 396, 482, 483, 508, 513], "equal_nan": [6, 29, 363], "rel": [6, 8, 11, 13, 18, 25, 29, 31, 34, 36, 41, 45, 85, 343, 346, 348, 349, 350, 363, 365, 367, 369, 376, 401, 411, 414, 422, 436, 440, 495, 497, 513, 515, 540, 545, 547, 560, 563, 579, 581], "toler": [6, 11, 29, 34, 363, 367, 411, 414, 513, 515, 542, 560, 579], "compar": [6, 7, 17, 18, 23, 29, 30, 41, 247, 250, 363, 364, 375, 376, 491, 492, 493, 494, 495, 497, 515, 529, 544, 550, 552, 553, 560, 561, 563, 568, 575, 577, 579, 585, 586], "consid": [6, 11, 17, 29, 34, 51, 215, 216, 362, 363, 367, 375, 400, 411, 491, 492, 493, 494, 531, 532, 543, 547, 548, 555, 557, 562, 563, 566, 567, 568, 576, 580, 584, 586], "altern": [6, 29, 363, 529, 538, 539, 545, 558, 559, 568, 582], "given": [6, 7, 12, 13, 15, 23, 29, 30, 31, 35, 36, 38, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 60, 73, 80, 86, 87, 114, 115, 116, 117, 118, 133, 155, 163, 165, 166, 167, 168, 170, 173, 266, 295, 296, 303, 342, 343, 346, 348, 349, 350, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 426, 428, 429, 430, 432, 435, 436, 437, 438, 440, 441, 445, 446, 463, 464, 473, 474, 481, 482, 483, 485, 496, 497, 499, 500, 513, 515, 520, 523, 532, 533, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 569, 572, 576, 581, 582, 585, 586], "1e10": [6, 363], "00001e10": [6, 363], "00001e": [6, 363], "005": [6, 363], "deg": [6, 29, 363], "complex": [6, 11, 26, 29, 34, 114, 128, 135, 141, 206, 308, 360, 362, 363, 364, 367, 402, 403, 404, 418, 535, 538, 545, 548, 550, 559, 561, 563, 568, 569, 570, 573, 574, 575, 577, 579, 581, 585, 586], "def": [6, 29, 252, 364, 371, 462, 529, 538, 539, 542, 543, 546, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570], "set_backend": [6, 21, 29, 123, 151, 152, 165, 166, 360, 361, 363, 529, 542, 544, 548, 555, 556, 557, 565, 567, 570], "tensorflow": [6, 7, 29, 151, 310, 361, 363, 364, 513, 520, 529, 532, 533, 537, 538, 539, 540, 542, 547, 548, 549, 554, 558, 559, 560, 561, 562, 563, 565, 570, 573, 574, 577, 580, 582, 583, 585, 586], "2j": [6, 29, 363], "3j": [6, 28, 29, 206, 362, 363], "35619449": [6, 363], "78539816": [6, 363], "numpi": [6, 7, 19, 29, 30, 151, 251, 283, 308, 310, 314, 361, 363, 364, 377, 501, 513, 515, 529, 531, 532, 537, 538, 539, 540, 542, 543, 544, 547, 548, 549, 552, 554, 558, 560, 561, 562, 563, 565, 567, 570, 574, 581, 586], "135": [6, 253, 363, 364], "binar": [6, 29, 363], "map": [6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 52, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 324, 346, 352, 363, 364, 371, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 463, 464, 468, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 543, 546, 548, 554, 555, 559, 561, 562, 568, 572, 573, 574, 580], "outcom": [6, 29, 363], "comparison": [6, 29, 363, 367, 419, 552], "conj": [6, 29, 363], "conjug": [6, 11, 29, 34, 363, 367, 408, 412], "copysign": [6, 29, 363], "new": [6, 7, 8, 13, 14, 23, 25, 29, 30, 31, 34, 36, 37, 40, 49, 52, 54, 55, 80, 83, 84, 85, 90, 91, 92, 95, 96, 140, 182, 221, 223, 226, 258, 259, 260, 262, 265, 266, 270, 295, 296, 299, 305, 308, 309, 314, 343, 346, 348, 349, 350, 359, 360, 362, 363, 364, 365, 369, 371, 372, 413, 435, 439, 443, 461, 473, 474, 475, 494, 529, 531, 532, 533, 534, 538, 539, 540, 541, 543, 544, 546, 547, 548, 550, 551, 553, 556, 558, 559, 560, 561, 562, 563, 564, 567, 570, 572, 574, 577, 581, 585, 586], "unsign": [6, 19, 29, 363, 377, 499, 500, 505, 507, 548, 565], "count_nonzero": [6, 29, 363], "keepdim": [6, 11, 13, 16, 19, 20, 23, 29, 34, 36, 39, 42, 43, 363, 367, 369, 374, 377, 378, 409, 425, 446, 486, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 552, 559, 565], "count": [6, 13, 17, 20, 29, 36, 40, 43, 162, 361, 363, 367, 369, 375, 378, 424, 433, 436, 491, 492, 509, 510, 546, 550, 568], "flatten": [6, 7, 11, 13, 16, 17, 29, 30, 34, 36, 39, 40, 50, 258, 262, 363, 364, 367, 369, 374, 375, 405, 413, 425, 433, 438, 440, 486, 487, 491, 492, 493, 494, 513, 515, 529, 563], "left": [6, 11, 16, 18, 29, 34, 39, 41, 185, 258, 362, 363, 364, 367, 374, 376, 402, 403, 409, 418, 423, 486, 496, 539, 540, 542, 545, 547, 548, 550], "size": [6, 7, 10, 11, 13, 15, 16, 23, 29, 30, 33, 34, 36, 38, 39, 45, 46, 52, 86, 166, 167, 168, 295, 359, 361, 363, 364, 366, 367, 369, 373, 374, 378, 396, 401, 405, 409, 413, 415, 418, 424, 435, 440, 441, 442, 480, 486, 489, 509, 510, 529, 560, 561, 563, 568], "correctli": [6, 11, 16, 29, 34, 39, 363, 367, 374, 409, 486, 538, 539, 540, 543, 546, 548, 550, 552, 553, 554, 558, 560, 561, 563, 569, 573], "total": [6, 19, 23, 29, 42, 46, 170, 361, 363, 374, 377, 489, 506, 508, 529, 533, 534, 540, 548, 549, 550, 561, 563, 568, 569, 573], "diff": [6, 23, 29, 363, 550, 558], "prepend": [6, 29, 363, 367, 369, 408, 435], "append": [6, 11, 23, 29, 185, 362, 363, 367, 369, 401, 408, 435, 529, 547, 552, 561, 565, 568], "time": [6, 8, 11, 17, 29, 31, 40, 52, 53, 343, 348, 363, 365, 366, 367, 369, 370, 374, 375, 392, 394, 408, 445, 453, 454, 455, 486, 487, 491, 492, 531, 532, 533, 538, 539, 540, 544, 546, 547, 548, 550, 554, 555, 556, 558, 559, 561, 562, 565, 568, 570, 573, 577, 579, 580, 583, 584, 585], "differenc": [6, 29, 363], "taken": [6, 11, 29, 34, 363, 367, 401, 547, 553, 559, 562, 570, 580], "prior": [6, 29, 363, 552, 562], "expand": [6, 7, 13, 29, 30, 262, 363, 364, 369, 435, 545, 546], "direct": [6, 29, 363, 376, 497, 538, 543, 545, 559, 563, 569, 570, 572, 575, 579, 580, 583], "except": [6, 7, 13, 15, 20, 23, 29, 30, 34, 38, 43, 53, 110, 257, 283, 298, 310, 316, 360, 361, 363, 364, 367, 369, 373, 374, 378, 414, 433, 435, 443, 481, 482, 483, 489, 509, 510, 513, 516, 529, 540, 541, 542, 543, 547, 548, 551, 553, 554, 558, 559, 563, 567, 573], "th": [6, 29, 363], "discret": [6, 29, 363, 368, 429], "exp2": [6, 29, 363], "power": [6, 7, 11, 29, 30, 34, 45, 46, 51, 187, 196, 224, 271, 299, 309, 362, 363, 364, 367, 371, 410, 423, 462, 567, 568, 569, 579, 581, 585], "fix": [6, 29, 363, 529, 539, 540, 542, 548, 561, 562], "nearest": [6, 29, 177, 228, 362, 363, 563], "toward": [6, 13, 36, 238, 362, 363, 369, 440, 529, 535, 539, 562, 565, 575, 579], "float_pow": [6, 29, 363], "rais": [6, 7, 13, 15, 17, 20, 23, 29, 30, 36, 38, 40, 43, 53, 55, 110, 196, 224, 251, 271, 283, 299, 309, 310, 316, 355, 360, 361, 362, 363, 364, 365, 367, 369, 373, 374, 375, 377, 378, 408, 410, 424, 435, 439, 443, 481, 482, 483, 489, 494, 502, 504, 509, 510, 513, 529, 532, 540, 542, 544, 552, 553, 558, 559, 565, 567], "thei": [6, 11, 15, 23, 34, 38, 56, 132, 360, 363, 367, 370, 373, 423, 453, 454, 480, 513, 529, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 561, 562, 563, 565, 567, 568, 569, 570, 573, 576, 579, 581, 582, 585, 586], "common": [6, 23, 29, 133, 360, 363, 531, 538, 539, 545, 546, 548, 549, 550, 553, 555, 556, 559, 562, 563, 573, 576, 579, 586], "becom": [6, 29, 363, 369, 432, 531, 533, 540, 545, 546, 550, 552, 559, 573], "125": [6, 11, 34, 187, 362, 363, 367, 423], "fmax": [6, 29, 363], "fmin": [6, 29, 363], "fmod": [6, 29, 362], "divis": [6, 7, 8, 29, 30, 31, 55, 187, 193, 199, 200, 227, 238, 272, 300, 308, 342, 343, 348, 362, 363, 364, 365, 366, 382, 389, 390, 555], "frexp": [6, 29, 363], "next": [6, 29, 51, 53, 55, 121, 360, 363, 533, 535, 538, 539, 540, 544, 550, 551, 556, 559, 562, 566, 567, 568, 579, 581], "represent": [6, 7, 23, 29, 30, 46, 106, 107, 121, 124, 150, 151, 174, 177, 183, 186, 188, 217, 248, 312, 357, 360, 361, 362, 363, 364, 572, 577, 578, 580, 584, 585], "gcd": [6, 29, 363], "gradient": [6, 29, 53, 55, 168, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 361, 363, 370, 453, 454, 455, 515, 520, 541, 562, 568, 569, 572, 573, 579], "edge_ord": [6, 29, 363], "w": [6, 7, 8, 10, 23, 28, 29, 30, 31, 33, 214, 258, 260, 308, 342, 343, 344, 346, 348, 349, 350, 363, 364, 365, 366, 371, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 462, 529, 557, 565, 568, 569], "r": [6, 11, 23, 29, 34, 344, 363, 365, 367, 369, 415, 446, 539, 540, 541, 557, 560], "t": [6, 10, 21, 29, 33, 44, 45, 283, 310, 344, 363, 364, 365, 366, 371, 393, 394, 464, 529, 532, 533, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 556, 557, 558, 561, 562, 563, 565, 567, 568, 569, 570, 573, 577, 579, 581], "estim": [6, 29, 363], "boundari": [6, 15, 29, 38, 363, 373, 483, 579], "note": [6, 11, 13, 17, 29, 34, 36, 133, 211, 227, 228, 252, 360, 362, 363, 364, 367, 369, 375, 377, 402, 403, 416, 418, 439, 443, 492, 494, 503, 535, 538, 539, 540, 543, 545, 548, 550, 551, 559, 560, 561, 562], "jax": [6, 7, 17, 30, 251, 283, 310, 324, 363, 364, 375, 491, 492, 493, 494, 529, 532, 533, 537, 538, 539, 540, 542, 544, 548, 549, 552, 554, 557, 558, 559, 560, 561, 562, 563, 565, 567, 570, 573, 580, 582, 585, 586], "over": [6, 11, 19, 20, 21, 26, 29, 34, 42, 43, 44, 54, 324, 363, 364, 367, 372, 373, 377, 378, 409, 420, 424, 425, 475, 483, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 531, 533, 539, 540, 544, 550, 551, 557, 558, 560, 565, 567, 573, 577, 579], "partial": [6, 23, 29, 53, 347, 363, 365, 367, 407, 540, 545, 563], "diment": [6, 363], "40": [6, 7, 29, 30, 38, 42, 46, 187, 191, 232, 258, 260, 266, 296, 308, 324, 344, 362, 363, 364, 365, 367, 371, 377, 406, 413, 465, 482, 501, 505, 547], "80": [6, 29, 363, 367, 371, 377, 413, 467, 501, 532, 552], "72": [6, 15, 29, 31, 196, 197, 346, 362, 363, 365, 367, 377, 413, 482, 501], "33333333": [6, 29, 226, 362, 363], "hypot": [6, 29, 363], "hypotenus": [6, 363], "4031": [6, 363], "8102": [6, 363], "imag": [6, 10, 29, 33, 258, 363, 364, 366, 382, 383, 384, 385, 386, 389, 390, 391, 529, 535, 539, 562, 563, 565, 566, 568, 570, 572, 579], "imaginari": [6, 29, 363, 550], "4j": [6, 29, 363], "isclos": [6, 29, 363, 542], "hold": [6, 7, 11, 19, 29, 34, 42, 295, 296, 363, 364, 367, 377, 409, 500, 516, 529, 568, 580], "lcm": [6, 29, 363], "least": [6, 11, 29, 363, 367, 408, 529, 540, 543, 547, 548, 550, 555, 561], "multipl": [6, 11, 14, 19, 20, 23, 28, 29, 30, 31, 34, 36, 37, 42, 43, 52, 187, 213, 218, 219, 247, 291, 342, 343, 346, 348, 350, 352, 362, 363, 364, 365, 366, 367, 369, 372, 374, 377, 378, 384, 385, 386, 387, 397, 406, 408, 409, 432, 435, 440, 441, 475, 486, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 533, 540, 543, 544, 545, 546, 550, 552, 555, 558, 559, 560, 561, 563, 565, 573, 577, 578, 579, 586], "60": [6, 19, 29, 30, 38, 42, 266, 282, 296, 308, 324, 363, 364, 367, 371, 377, 413, 459, 481, 499, 501, 505, 547], "ldexp": [6, 29, 363], "logaddexp2": [6, 29, 363], "169925": [6, 29, 363], "nan_to_num": [6, 29, 363], "posinf": [6, 29, 363], "neginf": [6, 29, 363], "replac": [6, 7, 13, 15, 23, 29, 30, 36, 38, 82, 295, 296, 359, 363, 364, 369, 373, 432, 480, 532, 540, 545, 546, 548, 549, 550, 556, 559, 561, 567, 570, 573, 586], "doe": [6, 7, 13, 23, 29, 36, 188, 283, 362, 363, 364, 367, 369, 402, 441, 513, 532, 538, 540, 541, 544, 547, 548, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 565, 567, 568, 573, 574, 575, 579, 580, 586], "requir": [6, 23, 29, 49, 232, 362, 363, 367, 369, 402, 403, 404, 443, 520, 535, 536, 538, 539, 543, 545, 547, 548, 549, 550, 551, 552, 554, 556, 559, 560, 561, 562, 563, 565, 567, 573, 579, 585], "pass": [6, 21, 23, 29, 44, 46, 49, 53, 55, 56, 113, 133, 151, 168, 181, 283, 360, 361, 362, 363, 364, 370, 453, 454, 513, 515, 520, 529, 538, 540, 542, 543, 544, 546, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 573, 577], "veri": [6, 29, 363, 367, 416, 531, 532, 537, 538, 539, 540, 545, 546, 548, 549, 550, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 568, 569, 570, 573, 575, 576, 577, 579, 580, 581, 584, 585, 586], "larg": [6, 29, 177, 362, 363, 367, 416, 539, 540, 547, 568, 579], "itself": [6, 248, 316, 363, 364, 371, 468, 531, 539, 540, 542, 545, 546, 547, 552, 558, 559, 569, 572, 573, 578, 579, 580, 585], "5e": [6, 8, 29, 348, 363, 365], "nansum": [6, 29, 363], "accumul": [6, 29, 363], "By": [6, 13, 19, 20, 29, 36, 42, 43, 363, 367, 369, 377, 378, 424, 438, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 548, 550, 552, 555, 557, 558, 559, 565, 569, 570], "reduc": [6, 7, 11, 16, 19, 20, 23, 29, 30, 34, 39, 42, 43, 168, 259, 361, 363, 364, 367, 374, 377, 378, 415, 486, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 547, 552, 559, 563, 565, 567, 577, 581, 582, 583], "nextaft": [6, 29, 363], "0e": [6, 8, 29, 31, 348, 363, 365], "50": [6, 19, 28, 29, 30, 192, 225, 260, 266, 281, 282, 296, 308, 362, 363, 364, 367, 371, 374, 377, 406, 413, 457, 459, 489, 501, 557, 567], "4013e": [6, 29, 363], "4028e": [6, 29, 363], "hand": [6, 529, 542, 545, 548, 555, 561, 573], "signbit": [6, 29, 363], "sinc": [6, 29, 363, 529, 532, 539, 540, 542, 543, 546, 547, 552, 558, 559, 573, 579, 585], "637": [6, 29, 363], "212": [6, 10, 29, 363, 393], "0909": [6, 29, 363], "trapz": [6, 28, 363], "dx": [6, 28, 363], "apart": [6, 28, 363], "between": [6, 10, 11, 12, 13, 17, 23, 28, 29, 33, 35, 36, 46, 55, 73, 121, 181, 224, 359, 360, 362, 363, 366, 368, 369, 371, 373, 375, 392, 413, 428, 429, 430, 435, 443, 462, 481, 491, 492, 493, 494, 531, 543, 544, 546, 550, 554, 555, 556, 559, 560, 561, 563, 564, 566, 567, 568, 570, 572, 575, 576, 578, 579, 580, 585], "definit": [6, 11, 28, 34, 363, 367, 397, 529, 540, 543, 548, 555, 567], "singl": [6, 15, 23, 28, 38, 315, 323, 344, 363, 364, 365, 373, 375, 481, 482, 483, 491, 533, 538, 539, 540, 542, 545, 546, 547, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 573], "trapezoid": [6, 28, 363], "xlogi": [6, 29, 363], "0986": [6, 29, 363], "3863": [6, 29, 363], "0000": [6, 29, 363], "zeta": [6, 29, 363], "q": [6, 10, 11, 29, 33, 34, 363, 366, 367, 371, 396, 402, 403, 415, 464, 539, 540, 541, 560, 573], "0369": [6, 29, 363], "2021": [6, 29, 363, 529], "_arraywithgeneralexperiment": [6, 45], "isin": [6, 29, 364], "test_el": [6, 29, 289, 364], "assume_uniqu": [6, 29, 289, 364], "invert": [6, 29, 184, 289, 362, 364, 367, 410], "uniqu": [6, 17, 29, 40, 289, 363, 364, 370, 371, 375, 453, 454, 455, 458, 462, 491, 492, 493, 494, 529, 531, 542, 546, 555, 559, 560, 563, 573, 582], "speed": [6, 29, 289, 364, 531, 555, 561, 582], "up": [6, 29, 50, 289, 363, 364, 366, 392, 531, 532, 533, 534, 535, 538, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "_arraywithgradientsexperiment": [6, 45], "_arraywithimageexperiment": [6, 45], "layer": [6, 14, 29, 37, 50, 51, 53, 54, 55, 56, 372, 394, 395, 475, 529, 531, 545, 551, 559, 562, 563, 565, 566, 569, 577, 579, 583, 586], "_arraywithlayersexperiment": [6, 45], "adaptive_avg_pool1d": [6, 29, 363], "output_s": [6, 29, 363, 529], "1d": [6, 29, 52, 363], "adapt": [6, 29, 31, 55, 349, 363, 365, 532], "averag": [6, 8, 29, 31, 51, 342, 343, 348, 363, 365, 370, 453, 454], "pool": [6, 29, 363], "signal": [6, 29, 363, 578, 579], "compos": [6, 29, 50, 363, 539, 546, 559, 561, 573, 579, 586], "sever": [6, 29, 363, 539, 540, 562, 573, 577, 583], "plane": [6, 29, 363], "l_in": [6, 29, 363], "Will": [6, 29, 50, 363, 573], "l_out": [6, 29, 363], "adaptive_avg_pool2d": [6, 29, 363], "2d": [6, 29, 52, 363, 529, 555, 559, 563], "h_in": [6, 29, 363], "w_in": [6, 29, 363], "s_0": [6, 29, 363], "s_1": [6, 29, 363], "avg_pool1d": [6, 29, 363], "kernel": [6, 10, 29, 33, 363, 366, 394, 563, 565, 573, 579, 582, 583], "stride": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 579], "pad": [6, 10, 13, 29, 33, 36, 52, 262, 363, 364, 366, 369, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 434, 447, 529], "data_format": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 529], "nwc": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 389, 390], "batch_siz": [6, 10, 15, 29, 33, 38, 363, 366, 373, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 480, 529, 568], "d_in": [6, 10, 29, 33, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "window": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 535, 540, 584], "slide": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "valid": [6, 10, 20, 29, 33, 43, 52, 113, 286, 360, 363, 364, 366, 369, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 435, 443, 509, 510, 539, 544, 548, 550, 557, 560, 561, 580], "algorithm": [6, 10, 22, 29, 33, 52, 59, 363, 367, 383, 385, 386, 387, 388, 391, 416, 548, 559, 563, 573, 579, 581, 583], "per": [6, 10, 29, 33, 52, 363, 383, 385, 386, 387, 388, 391, 540, 547, 559, 568], "ncw": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 389, 390], "arang": [6, 11, 19, 29, 34, 86, 291, 324, 359, 363, 364, 367, 377, 409, 425, 501, 529, 548, 586], "reshap": [6, 10, 11, 13, 23, 29, 33, 34, 36, 324, 363, 364, 366, 367, 369, 385, 387, 391, 409, 425, 512, 558, 559, 561, 563, 565, 567, 570], "avg_pool2d": [6, 29, 363], "nhwc": [6, 10, 29, 33, 52, 363, 366, 382, 385, 386, 389, 390, 391], "h": [6, 7, 10, 29, 30, 33, 258, 260, 363, 364, 366, 371, 382, 385, 386, 387, 388, 389, 390, 391, 459, 463, 465, 473, 541, 546, 547, 575], "nchw": [6, 10, 29, 33, 52, 363, 366, 382, 385, 386, 389, 390, 391, 529], "max_pool2d": [6, 29, 363], "46": [6, 15, 29, 33, 38, 87, 211, 229, 359, 362, 363, 371, 393, 457, 481, 482], "avg_pool3d": [6, 29, 363], "ndhwc": [6, 10, 29, 33, 52, 363, 366, 382, 387, 388, 389, 390], "d": [6, 10, 11, 25, 29, 30, 33, 34, 87, 134, 250, 360, 363, 366, 367, 371, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 400, 401, 409, 413, 423, 459, 463, 464, 465, 473, 474, 529, 532, 533, 534, 539, 541, 546, 557, 561, 563, 568, 575], "volum": [6, 10, 29, 33, 363, 366, 387, 388, 535], "convolut": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 577, 579], "filter": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 529], "ncdhw": [6, 10, 29, 33, 52, 363, 366, 382, 387, 388, 389, 390], "43": [6, 38, 46, 187, 362, 363, 373, 374, 482, 483, 490], "dct": [6, 29, 363, 568], "norm": [6, 7, 11, 29, 30, 34, 55, 253, 254, 283, 363, 364, 367, 409, 425, 475, 562], "liter": [6, 11, 29, 34, 363, 367, 376, 409, 425, 496, 553, 563], "lenght": [6, 29, 363], "transform": [6, 10, 29, 33, 363, 366, 393, 529, 561, 570, 572, 574, 577, 579, 580, 581], "truncat": [6, 29, 50, 298, 363, 364, 552, 568], "larger": [6, 13, 19, 29, 36, 42, 121, 360, 363, 369, 377, 432, 440, 506, 508, 561, 563, 586], "ortho": [6, 29, 363], "102": [6, 29, 38, 363, 481], "406": [6, 29, 253, 363, 364], "dft": [6, 29, 363], "onesid": [6, 29, 363], "dft_length": [6, 29, 363], "backward": [6, 20, 29, 43, 227, 362, 363, 367, 378, 424, 509, 510, 573], "fourier": [6, 262, 363, 364], "need": [6, 7, 13, 29, 30, 36, 253, 254, 283, 363, 364, 367, 369, 371, 402, 432, 435, 467, 529, 533, 535, 536, 538, 539, 540, 542, 543, 545, 546, 547, 548, 550, 551, 552, 555, 557, 558, 559, 560, 562, 563, 565, 567, 568, 572, 573, 575, 579, 580, 581, 585], "fft": [6, 29, 363, 538, 579], "after": [6, 7, 8, 10, 14, 23, 29, 30, 31, 33, 37, 55, 140, 232, 283, 343, 346, 348, 349, 350, 360, 361, 362, 363, 364, 365, 366, 371, 372, 382, 383, 384, 385, 387, 389, 391, 392, 467, 475, 529, 535, 538, 539, 540, 542, 545, 547, 548, 550, 552, 554, 557, 559, 561, 564, 579], "n_fft": [6, 363], "becaus": [6, 363, 539, 540, 543, 544, 545, 546, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 569, 570, 573, 579, 582, 585], "satisfi": [6, 363, 550], "symmetri": [6, 363], "possibl": [6, 13, 36, 291, 353, 363, 364, 365, 366, 369, 377, 392, 439, 502, 504, 529, 532, 534, 538, 539, 540, 542, 546, 548, 550, 551, 555, 557, 558, 559, 560, 561, 563, 565, 568, 572, 573, 577, 579, 585], "enabl": [6, 23, 46, 355, 363, 365, 529, 532, 539, 540, 543, 546, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 568, 570, 573, 574, 577, 578, 579, 580, 581, 582, 585, 586], "fast": [6, 363, 579], "rfft": [6, 363], "invok": [6, 363, 529], "forward": [6, 29, 49, 51, 53, 55, 363, 529, 539, 544, 551, 557, 561, 562, 563, 570, 572, 573, 579, 580], "expect": [6, 11, 50, 51, 53, 133, 249, 360, 363, 364, 413, 529, 533, 540, 542, 548, 552, 560, 561, 563, 573], "batch_idx": [6, 363], "signal_dim1": [6, 363], "signal_dim2": [6, 363], "signal_dimn": [6, 363], "signal_dim": [6, 363], "embed": [6, 29, 363, 579], "max_norm": [6, 7, 29, 30, 253, 254, 363, 364], "dim": [6, 23, 25, 29, 52, 90, 359, 363, 366, 382, 389, 390, 529, 548, 552, 559, 560, 563], "ifft": [6, 29, 363], "befor": [6, 10, 11, 13, 17, 19, 23, 29, 33, 34, 50, 168, 361, 363, 366, 367, 369, 370, 371, 375, 377, 382, 383, 384, 385, 387, 389, 391, 395, 396, 408, 425, 433, 453, 454, 468, 491, 492, 493, 494, 499, 500, 505, 507, 538, 539, 540, 542, 543, 545, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 565, 568, 573, 579], "pi": [6, 29, 357, 363], "44509285e": [6, 29, 363], "14423775e": [6, 29, 363], "17j": [6, 29, 363], "00000000e": [6, 29, 30, 262, 363], "00": [6, 7, 29, 30, 34, 197, 262, 362, 363, 364, 367, 404, 561], "11483250e": [6, 29, 363], "16j": [6, 29, 363], "33486982e": [6, 29, 363], "22464680e": [6, 29, 363], "95799250e": [6, 29, 363], "66951701e": [6, 29, 363], "30636606e": [6, 29, 363], "43029718e": [6, 29, 363], "18j": [6, 29, 363], "53080850e": [6, 29, 363], "58689626e": [6, 29, 363], "24474906e": [6, 29, 363], "91858728e": [6, 29, 363], "01435406e": [6, 29, 363], "interpol": [6, 29, 363, 563, 579], "mode": [6, 11, 23, 29, 34, 168, 177, 273, 297, 298, 301, 303, 304, 317, 318, 319, 321, 322, 361, 362, 363, 364, 367, 415, 535, 539, 540, 546, 550, 563, 573, 579, 582], "scale_factor": [6, 29, 363, 563], "recompute_scale_factor": [6, 29, 363, 563], "align_corn": [6, 29, 363, 563], "antialia": [6, 29, 363, 563], "down": [6, 29, 50, 363, 539, 561, 574, 579, 585], "channel": [6, 7, 10, 29, 30, 33, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 258, 262, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 383, 384, 385, 386, 387, 388, 391, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "height": [6, 7, 10, 29, 30, 33, 50, 258, 363, 364, 366, 385, 386, 387, 388, 391, 568], "width": [6, 7, 10, 29, 30, 33, 258, 363, 364, 366, 383, 384, 385, 386, 387, 388, 391], "bilinear": [6, 29, 363, 563], "trilinear": [6, 29, 363, 563], "nearest_exact": [6, 29, 363, 563], "tf_area": [6, 29, 363, 563], "bicub": [6, 29, 363, 563], "mitchellcub": [6, 29, 363, 563], "lanczos3": [6, 29, 363, 563], "lanczos5": [6, 29, 363, 563], "gaussian": [6, 29, 59, 356, 363, 563], "overwrit": [6, 23, 29, 168, 361, 363, 540, 558, 559, 565], "corner": [6, 29, 363, 539, 540, 559], "pixel": [6, 29, 363], "align": [6, 23, 29, 363, 539, 540, 559, 565, 567, 574, 585], "thu": [6, 29, 187, 224, 227, 362, 363, 367, 402, 403, 535, 538, 547, 552, 559], "preserv": [6, 7, 8, 23, 29, 30, 31, 46, 283, 352, 363, 364, 365, 369, 436, 561, 570, 573], "edg": [6, 13, 29, 36, 363, 369, 432, 434, 447, 542, 561, 579, 581, 585], "antialias": [6, 29, 363], "downsampl": [6, 29, 363], "resiz": [6, 29, 363, 563], "max_pool1d": [6, 29, 363], "dilat": [6, 10, 29, 33, 52, 363, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "ceil_mod": [6, 29, 363], "max_pool3d": [6, 29, 363], "linear_algebra": [6, 11, 29, 34, 367, 562], "_arraywithlinearalgebraexperiment": [6, 45], "adjoint": [6, 11, 29, 34, 363, 367, 406, 417, 418], "cond": [6, 29, 68, 70, 358, 363, 573], "p": [6, 7, 11, 29, 30, 34, 52, 88, 253, 254, 359, 363, 364, 367, 371, 409, 425, 464, 539, 540, 541], "933034373659268": 6, "diagflat": [6, 29, 363], "padding_valu": [6, 29, 363], "right_left": [6, 29, 363], "num_row": [6, 29, 363], "num_col": [6, 29, 363], "eig": [6, 11, 29, 363, 367, 403, 404], "37228132": [6, 29, 363, 402], "82456484": [6, 363, 402], "41597356": [6, 363, 402], "56576746": [6, 363, 402], "90937671": [6, 363, 402], "eigh_tridiagon": [6, 29, 363], "eigvals_onli": [6, 29, 363], "select": [6, 19, 29, 42, 363, 377, 499, 500, 538, 539, 540, 547, 558, 561, 565, 567, 570, 573, 579, 582, 583], "select_rang": [6, 29, 363], "tol": [6, 29, 363], "super": [6, 29, 363, 529, 552, 555, 565, 568, 569, 570], "eigenvalu": [6, 11, 29, 34, 363, 367, 402, 403, 404], "eigenvector": [6, 29, 363, 367, 402, 403], "string": [6, 10, 23, 29, 33, 50, 58, 60, 106, 107, 119, 126, 146, 150, 151, 152, 153, 155, 163, 169, 170, 173, 256, 356, 360, 361, 363, 364, 366, 367, 382, 383, 384, 385, 387, 389, 391, 404, 515, 544, 545, 547, 548, 549, 552, 553, 559, 565, 568], "v": [6, 10, 18, 25, 29, 33, 41, 50, 52, 53, 54, 55, 56, 87, 363, 366, 376, 395, 396, 496, 515, 529, 535, 536, 539, 540, 541, 545, 565, 568, 569, 570], "interv": [6, 15, 20, 29, 38, 43, 73, 86, 87, 359, 363, 367, 369, 373, 378, 424, 432, 435, 443, 481, 483, 509, 510, 540], "togeth": [6, 23, 29, 56, 363, 529, 532, 543, 546, 553, 559, 562, 563, 569, 570, 573, 577, 579, 580, 585], "cluster": [6, 29, 363, 573, 579], "converg": [6, 29, 363, 533], "li": [6, 29, 363, 531], "_2": [6, 29, 363], "machin": [6, 11, 29, 34, 121, 124, 360, 363, 367, 411, 414, 532, 539, 542, 555, 572, 574, 577, 579, 581, 582, 583, 584, 585], "precis": [6, 11, 29, 34, 121, 232, 360, 362, 363, 367, 416, 425, 547, 548, 559, 563, 583], "eig_val": [6, 29, 363], "decreas": [6, 29, 363], "eig_vector": [6, 29, 363], "38196": [6, 363], "61803": [6, 363], "eigval": [6, 29, 363], "kron": [6, 29, 363, 586], "matrix_exp": [6, 29, 363], "7183": [6, 29, 363], "3891": [6, 29, 363], "multi_dot": [6, 29, 363], "49": [6, 15, 29, 34, 232, 362, 363, 377, 423, 482, 501], "148": [6, 28, 29, 196, 363], "loss": [6, 29, 363, 428, 429, 430, 529, 547, 548, 555, 559, 562, 568, 569, 570, 579, 586], "_arraywithlossesexperiment": [6, 45], "manipul": [6, 29, 363, 531, 559, 562, 563, 565, 570, 572, 579], "_arraywithmanipulationexperiment": [6, 45], "atleast_1d": [6, 29, 363], "ari": [6, 29, 363], "cannot": [6, 540, 542, 544, 548, 559, 565, 570, 585], "ndim": [6, 11, 16, 34, 39, 45, 324, 363, 364, 367, 374, 415, 418, 489, 512, 546, 552], "made": [6, 13, 29, 363, 443, 532, 535, 538, 540, 542, 543, 546, 547, 552, 557, 558, 559, 562, 563, 565, 567, 579], "necessari": [6, 13, 29, 36, 363, 369, 439, 529, 539, 540, 543, 544, 546, 550, 556, 558, 559, 561, 563], "a1": [6, 30, 82, 250, 359], "a2": 6, "atleast_2d": [6, 29, 363], "atleast_3d": [6, 29, 363], "view": [6, 13, 29, 83, 359, 363, 539, 540, 552, 579], "three": [6, 88, 359, 363, 539, 540, 546, 547, 550, 559, 561, 563, 564, 565, 580, 585], "more": [6, 11, 13, 17, 29, 34, 36, 40, 73, 109, 197, 211, 359, 360, 362, 363, 367, 369, 375, 401, 407, 408, 414, 416, 418, 425, 436, 443, 491, 492, 493, 494, 529, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 577, 578, 579, 580, 581, 582, 585, 586], "dsplit": [6, 29, 363], "indices_or_sect": [6, 29, 363], "split": [6, 13, 23, 29, 36, 166, 167, 168, 258, 291, 361, 363, 364, 366, 369, 382, 389, 390, 395, 444, 515, 529, 534, 540, 547, 564, 565, 573, 586], "3rd": [6, 29, 363], "dstack": [6, 29, 363], "nativeshap": [6, 10, 13, 15, 29, 36, 38, 80, 84, 91, 95, 296, 306, 311, 313, 359, 363, 364, 366, 369, 373, 382, 384, 386, 388, 390, 439, 481, 482, 483], "you": [6, 7, 29, 30, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 265, 266, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "want": [6, 21, 44, 50, 53, 363, 529, 532, 534, 536, 538, 539, 540, 545, 547, 552, 555, 556, 557, 558, 561, 563, 568, 569, 570, 573], "start_dim": [6, 29, 363, 529], "end_dim": [6, 29, 363, 529], "read": [6, 13, 23, 29, 36, 363, 369, 439, 538, 539, 545, 547, 561, 563, 579], "fastest": [6, 13, 29, 36, 363, 369, 439], "back": [6, 13, 29, 36, 51, 53, 55, 297, 317, 363, 364, 369, 439, 532, 539, 540, 543, 548, 552, 556, 557, 564, 573, 577, 581], "slowest": [6, 13, 29, 36, 363, 369, 439], "fortran": [6, 13, 29, 36, 363, 369, 439, 579, 583], "account": [6, 13, 29, 36, 51, 363, 369, 439, 539, 547, 551, 559], "layout": [6, 13, 29, 36, 363, 369, 439, 544, 559, 563], "underli": [6, 13, 29, 36, 183, 186, 188, 217, 362, 363, 367, 369, 416, 439, 546, 563, 579], "fliplr": [6, 29, 363], "flip": [6, 13, 29, 36, 184, 362, 363, 369, 567, 568, 570], "revers": [6, 7, 11, 19, 29, 34, 42, 45, 46, 257, 363, 364, 367, 369, 377, 423, 436, 499, 500, 538, 546, 547, 548, 550, 551, 559, 563, 570, 573], "diag": [6, 11, 29, 34, 363, 367, 565], "flipud": [6, 29, 363], "heavisid": [6, 29, 363], "step": [6, 8, 25, 29, 31, 50, 55, 73, 86, 342, 343, 346, 348, 349, 350, 359, 363, 365, 370, 453, 454, 455, 529, 533, 535, 538, 539, 540, 543, 544, 546, 547, 548, 549, 550, 557, 559, 561, 565, 568, 569, 570, 572, 579], "5000": [6, 363, 367, 406], "hsplit": [6, 29, 363], "horizont": [6, 29, 258, 363, 364], "hstack": [6, 29, 363], "vstack": [6, 29, 363], "i0": [6, 29, 363], "modifi": [6, 23, 29, 363, 538, 539, 540, 542, 544, 545, 548, 549, 551, 553, 555, 560, 561, 562, 565], "bessel": [6, 19, 29, 42, 363, 377, 506, 508], "kind": [6, 19, 29, 121, 124, 125, 224, 360, 362, 377, 499, 500, 505, 507, 537, 559, 561, 563, 565, 573], "26606588": [6, 29, 363], "2795853": [6, 29, 363], "88079259": [6, 29, 363], "moveaxi": [6, 29, 363], "destin": [6, 29, 363], "unstack": [6, 13, 23, 36, 369, 546, 565, 568, 586], "reorder": [6, 13, 29, 36, 258, 363, 364, 369, 436], "origin": [6, 11, 13, 19, 23, 29, 34, 36, 42, 45, 46, 181, 362, 363, 367, 369, 377, 409, 439, 440, 500, 515, 529, 533, 538, 539, 540, 544, 545, 547, 548, 556, 558, 559, 560, 565, 579, 580], "These": [6, 29, 363, 367, 402, 403, 529, 531, 532, 533, 535, 537, 538, 539, 540, 542, 546, 548, 550, 551, 553, 554, 555, 558, 559, 561, 562, 565, 566, 568, 569, 570, 573, 574, 579, 583, 585, 586], "pad_width": [6, 13, 29, 36, 363, 369, 434, 447], "constant": [6, 13, 14, 29, 36, 37, 51, 53, 54, 363, 369, 371, 372, 434, 462, 475, 529, 555, 560, 562, 569, 570, 573], "stat_length": [6, 29, 363], "constant_valu": [6, 29, 363], "end_valu": [6, 29, 363], "reflect_typ": [6, 29, 363], "even": [6, 29, 224, 228, 362, 363, 532, 533, 539, 540, 542, 547, 548, 549, 551, 554, 555, 558, 559, 560, 563, 567, 568, 569, 570, 573, 585], "rot90": [6, 29, 363], "rotat": [6, 29, 363, 572], "take_along_axi": [6, 29, 363], "extract": [6, 29, 363, 559, 562, 575, 579, 580, 585], "One": [6, 7, 13, 15, 29, 30, 36, 38, 259, 363, 364, 369, 373, 439, 481, 543, 546, 548, 550, 555, 560, 561, 565, 567, 568], "drop": [6, 29, 51, 363, 539, 573], "control": [6, 29, 50, 363, 367, 400, 546, 548, 557, 558, 559, 560, 563, 567, 568, 572, 574, 579, 585], "how": [6, 29, 50, 51, 52, 53, 363, 529, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 569, 570, 572, 573, 575, 579], "bound": [6, 29, 363, 552, 561, 565, 585], "arr": [6, 7, 26, 29, 129, 296, 360, 363, 548, 549], "top_k": [6, 29, 363], "largest": [6, 23, 29, 121, 124, 360, 363, 367, 409, 418, 572], "top": [6, 13, 29, 50, 258, 363, 364, 433, 529, 539, 540, 548, 559, 561, 563, 568, 569, 579, 583], "retun": [6, 29, 363], "we": [6, 21, 29, 44, 50, 53, 258, 310, 344, 345, 347, 354, 363, 364, 365, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 579, 580, 584, 585], "smallest": [6, 23, 29, 121, 124, 189, 360, 362, 363, 367, 409], "name": [6, 11, 17, 21, 34, 40, 44, 58, 60, 248, 249, 356, 363, 364, 367, 375, 402, 403, 407, 415, 416, 418, 423, 491, 492, 493, 515, 520, 525, 538, 539, 540, 544, 545, 546, 547, 550, 551, 552, 553, 554, 559, 560, 561, 562, 563, 565, 568, 570, 579], "vsplit": [6, 29, 363], "vertic": [6, 29, 258, 363, 364, 540], "_arraywithnormsexperiment": [6, 45], "instance_norm": [6, 29, 363], "bia": [6, 10, 29, 33, 37, 52, 291, 363, 364, 366, 372, 382, 389, 390, 393, 394, 475, 565, 569], "momentum": [6, 29, 363, 532], "running_mean": [6, 29, 363], "running_stddev": [6, 29, 363], "affin": [6, 29, 54, 363], "track_running_stat": [6, 29, 363], "4d": [6, 363], "run": [6, 8, 29, 31, 52, 53, 342, 343, 348, 363, 365, 370, 453, 454, 455, 515, 516, 529, 535, 536, 538, 539, 541, 543, 544, 547, 550, 552, 553, 554, 555, 556, 559, 560, 565, 566, 567, 568, 569, 570, 572, 573, 577, 579, 580, 581, 582, 584, 585, 586], "statist": [6, 29, 44, 363, 538, 548, 561, 562, 579], "deviat": [6, 14, 15, 19, 29, 37, 38, 42, 51, 54, 363, 372, 373, 377, 475, 482, 506, 533, 542], "track": [6, 29, 50, 53, 363, 365, 371, 468, 539, 540, 542, 557, 579], "OR": [6, 20, 29, 43, 186, 216, 362, 363, 378, 510, 539, 540, 557], "stddev": [6, 29, 363], "ey": [6, 29, 33, 359, 363, 366, 385, 391, 563, 570], "82836342": [6, 363], "58581817": [6, 363], "29290909": [6, 29, 363], "41418171": [6, 29, 363], "14645454": [6, 363], "20709085": [6, 363], "30000001": [6, 29, 258, 363, 364, 375, 492], "52426404": [6, 29, 363], "l2_normal": [6, 29, 363], "l2": [6, 11, 34, 363, 367, 425, 546], "whole": [6, 363, 540, 545], "4472": [6, 363], "8944": [6, 363], "lp_normal": [6, 29, 363], "lp": [6, 363], "random": [6, 10, 23, 29, 33, 363, 366, 392, 480, 481, 482, 483, 484, 485, 529, 538, 549, 560, 561, 562, 570, 572, 579], "_arraywithrandomexperiment": [6, 45], "bernoulli": [6, 29, 363], "seed": [6, 10, 15, 17, 23, 29, 33, 38, 49, 363, 366, 373, 375, 392, 480, 481, 482, 483, 485, 491, 520, 560, 561], "probabl": [6, 10, 15, 29, 33, 38, 51, 52, 363, 366, 373, 392, 480, 529, 533, 545, 561], "event": [6, 29, 363, 561], "entri": [6, 13, 23, 29, 36, 40, 86, 359, 363, 369, 371, 441, 469, 491, 539, 547, 561, 579], "parameter": [6, 15, 29, 38, 363, 373, 480, 482, 483], "independ": [6, 15, 29, 38, 363, 367, 373, 398, 417, 480, 529, 542, 548, 550, 556, 565, 570, 577], "distribut": [6, 12, 15, 29, 35, 38, 51, 52, 53, 363, 368, 373, 428, 429, 430, 480, 481, 482, 483, 485, 538, 547, 549, 573, 579, 582], "prob": [6, 10, 29, 33, 38, 52, 363, 366, 373, 392, 480, 529], "odd": [6, 29, 224, 362, 363, 537, 542], "g": [6, 15, 17, 19, 21, 29, 38, 44, 51, 107, 134, 150, 360, 361, 363, 371, 373, 375, 377, 459, 463, 465, 473, 481, 482, 483, 491, 492, 493, 494, 499, 500, 502, 504, 505, 507, 533, 534, 538, 539, 541, 542, 546, 557, 559, 561, 565, 573, 574, 575], "drawn": [6, 15, 29, 38, 51, 363, 373, 480, 481, 482, 483, 561], "python": [6, 15, 29, 38, 73, 163, 173, 227, 324, 359, 361, 362, 363, 364, 373, 480, 481, 482, 483, 485, 530, 531, 532, 537, 539, 540, 542, 543, 545, 546, 547, 552, 553, 559, 561, 563, 565, 567, 568, 573, 574, 576, 579, 580, 581, 585, 586], "dirichlet": [6, 29, 363], "shuffl": [6, 15, 23, 29, 38, 373], "10598304": [6, 363], "21537054": [6, 363], "67864642": [6, 363], "48006698": [6, 363], "07472073": [6, 363], "44521229": [6, 363], "55479872": [6, 363], "05426367": [6, 363], "39093761": [6, 363], "19531053": [6, 363], "51675832": [6, 363], "28793114": [6, 363], "12315625": [6, 363], "29823365": [6, 363], "5786101": [6, 363], "15564976": [6, 363], "50542368": [6, 363], "33892656": [6, 363], "1325352": [6, 363], "44439589": [6, 363], "42306891": [6, 363], "gamma": [6, 14, 37, 363, 372, 475], "poisson": [6, 29, 363], "rate": [6, 8, 29, 31, 52, 55, 343, 346, 348, 349, 350, 363, 365, 370, 453, 454, 455, 547], "paramt": [6, 371, 463, 473], "request": [6, 160, 361, 363, 529, 533, 534, 538, 550, 562, 563], "lam": [6, 29, 363], "_arraywithsearchingexperiment": [6, 45], "unravel_index": [6, 29, 363], "unravel": [6, 29, 363], "_arraywithsetexperiment": [6, 45], "sort": [6, 23, 29, 46, 363, 367, 402, 403, 418, 419, 495, 496, 529, 537, 547, 562], "_arraywithsortingexperiment": [6, 45], "lexsort": [6, 29, 363], "indirectli": [6, 29, 363], "column": [6, 11, 29, 34, 51, 82, 359, 363, 367, 402, 403, 409, 415, 417, 418, 423], "msort": [6, 29, 363], "_arraywithstatisticalexperiment": [6, 45], "bincount": [6, 29, 363], "weight": [6, 8, 10, 29, 31, 33, 51, 52, 53, 55, 342, 343, 346, 348, 349, 350, 363, 365, 366, 393, 394, 396, 529, 546, 555, 565, 569, 570, 578], "minlength": [6, 29, 363], "alreadi": [6, 23, 29, 189, 198, 228, 237, 362, 363, 367, 405, 413, 529, 538, 539, 540, 544, 546, 548, 554, 559, 563, 573, 579, 581, 586], "bin": [6, 29, 535, 539, 540, 542, 546], "corrcoef": [6, 29, 363], "rowvar": [6, 29, 363], "row": [6, 29, 51, 82, 359, 363, 367, 373, 374, 409, 417, 418, 423, 480, 489], "variabl": [6, 7, 8, 14, 23, 29, 30, 31, 37, 49, 50, 51, 52, 53, 54, 55, 56, 251, 283, 284, 285, 286, 288, 310, 343, 344, 346, 348, 349, 350, 363, 364, 365, 366, 367, 370, 372, 395, 417, 453, 454, 455, 475, 515, 520, 540, 544, 548, 551, 553, 554, 557, 558, 561, 562, 565, 568, 569, 570, 573, 580], "observ": [6, 29, 540, 552, 565, 581], "relationship": [6, 29, 51], "transpos": [6, 10, 11, 23, 29, 33, 34, 45, 52, 363, 366, 367, 382, 384, 386, 388, 389, 390, 408, 412, 414, 529, 558, 567, 570], "while": [6, 10, 23, 29, 33, 46, 90, 133, 215, 216, 359, 360, 362, 363, 366, 375, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 491, 503, 506, 516, 531, 532, 538, 539, 540, 543, 544, 545, 547, 548, 550, 553, 554, 555, 557, 558, 559, 560, 561, 563, 567, 569, 570, 573, 579, 585, 586], "median": [6, 29, 363, 559], "nanmean": [6, 29, 363], "anyth": [6, 29, 363, 540, 561, 562, 579, 580], "through": [6, 29, 53, 181, 362, 363, 371, 459, 465, 529, 534, 537, 538, 540, 541, 544, 545, 546, 547, 550, 552, 555, 556, 558, 559, 560, 561, 563, 564, 565, 568, 569, 570, 572, 577, 579, 580, 581], "sub": [6, 11, 13, 23, 24, 28, 29, 30, 34, 36, 46, 50, 219, 363, 367, 369, 370, 401, 441, 453, 454, 455, 538, 540, 541, 546, 552, 559, 560, 561, 567, 568, 569, 575], "6666666666666665": [6, 29, 363], "nanmedian": [6, 29, 363], "overwrite_input": [6, 29, 363], "allow": [6, 29, 50, 53, 86, 291, 359, 363, 364, 376, 496, 529, 532, 535, 538, 540, 543, 547, 548, 552, 553, 555, 556, 557, 559, 560, 561, 563, 565, 567, 573, 574, 577, 579, 583, 584], "call": [6, 21, 26, 29, 44, 46, 50, 52, 53, 55, 128, 129, 168, 275, 302, 316, 344, 345, 347, 361, 363, 364, 365, 367, 371, 416, 456, 462, 466, 467, 515, 529, 532, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 573, 579, 580, 583], "save": [6, 23, 29, 53, 278, 305, 361, 363, 364, 533, 535, 547, 553, 561, 573, 578], "do": [6, 7, 23, 29, 30, 227, 283, 362, 363, 364, 371, 456, 463, 466, 467, 468, 473, 529, 533, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 567, 568, 569, 570, 573, 574, 580, 585, 586], "content": [6, 23, 29, 363, 538, 545, 558, 565, 568], "treat": [6, 23, 29, 363, 515, 557, 561, 566, 570], "undefin": [6, 29, 363, 553, 557], "fulli": [6, 29, 52, 363, 529, 533, 543, 548, 554, 557, 558, 563, 565, 566, 567, 568, 569, 570, 573, 577, 578, 579, 585, 586], "quantil": [6, 29, 363], "inclus": [6, 29, 73, 359, 363, 373, 481, 534, 544, 558, 563], "higher": [6, 29, 51, 363, 564, 565, 570, 573, 576, 579, 580, 583, 585, 586], "midpoint": [6, 29, 363], "fraction": [6, 29, 363, 366, 392], "surround": [6, 29, 363, 563], "whichev": [6, 29, 363], "work": [6, 29, 363, 371, 463, 464, 468, 473, 474, 529, 533, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 559, 560, 561, 562, 564, 565, 567, 569, 570, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "util": [6, 29, 155, 361, 523, 525, 526, 527, 528, 529, 535, 545, 549, 552, 558, 562, 577, 585, 586], "_arraywithutilityexperiment": [6, 45], "_arraywithgener": [7, 45], "all_equ": [7, 30, 364], "equality_matrix": [7, 30, 247, 364], "array_equ": [7, 30, 364], "assert_supports_inplac": [7, 30, 364], "ivybackendexcept": [7, 30, 251, 283, 364, 526, 543, 552], "jaxlib": [7, 30, 251, 364, 539, 543, 548, 549, 554, 562, 565, 567], "xla_extens": [7, 30, 251, 364, 543, 548, 549, 554, 562, 565, 567], "devicearrai": [7, 30, 251, 364, 543, 559, 565, 567], "clip_matrix_norm": [7, 30, 364], "downscal": [7, 30, 253, 254, 283, 364], "894": [7, 30, 253, 254, 364, 372, 475], "79": [7, 30, 38, 45, 188, 193, 253, 254, 362, 363, 364, 483], "clip_vector_norm": [7, 30, 364], "default_v": [7, 257, 364], "catch_except": [7, 257, 364], "rev": [7, 257, 364], "with_cal": [7, 257, 364], "catch": [7, 257, 364, 561], "callabl": [7, 21, 30, 44, 55, 58, 60, 76, 77, 78, 122, 123, 156, 157, 168, 248, 252, 257, 259, 263, 264, 291, 316, 324, 345, 347, 354, 356, 359, 360, 361, 363, 364, 365, 366, 370, 371, 395, 453, 454, 455, 462, 463, 464, 466, 467, 468, 469, 513, 516, 520, 526, 546, 552, 557, 559, 565], "might": [7, 133, 257, 360, 364, 538, 539, 540, 547, 548, 550, 553, 556, 558, 559, 561, 562, 563, 565, 567, 568, 574], "exist": [7, 13, 23, 36, 55, 257, 364, 369, 433, 439, 523, 529, 531, 532, 538, 539, 542, 544, 545, 550, 551, 555, 556, 558, 559, 561, 563, 565, 573, 574, 577, 579, 582, 585], "els": [7, 15, 29, 38, 60, 114, 115, 116, 117, 118, 251, 257, 261, 360, 363, 364, 371, 373, 466, 469, 481, 482, 483, 513, 529, 538, 540, 542, 544, 548, 552, 555, 558, 559, 560, 561, 562, 563, 565, 567, 569, 570, 573, 580], "einops_rearrang": [7, 30, 364], "pattern": [7, 30, 258, 259, 260, 364, 533, 548, 551], "axes_length": [7, 30, 258, 259, 260, 364], "re": [7, 16, 39, 168, 252, 258, 361, 364, 367, 369, 374, 420, 440, 488, 490, 530, 531, 532, 534, 538, 539, 540, 541, 542, 548, 557, 558, 559, 562, 563, 567, 570, 573, 579], "arrang": [7, 258, 364], "rearrang": [7, 30, 258, 260, 364], "einop": [7, 30, 258, 259, 260, 364, 532], "been": [7, 15, 30, 38, 153, 228, 258, 259, 260, 361, 362, 364, 373, 480, 538, 540, 542, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 561, 565, 567, 572, 573, 574, 579, 586], "einops_reduc": [7, 30, 364], "reduct": [7, 12, 20, 23, 29, 30, 35, 43, 259, 295, 296, 363, 364, 368, 378, 428, 429, 430, 509, 510, 548, 552, 561, 567], "avail": [7, 30, 153, 159, 160, 161, 171, 259, 361, 364, 529, 531, 539, 540, 545, 546, 547, 549, 551, 552, 559, 561, 563, 573, 584, 585], "prod": [7, 19, 30, 42, 259, 364, 377, 548, 550, 565], "einops_repeat": [7, 30, 364], "repeat": [7, 13, 30, 36, 260, 364, 369, 445, 535, 540, 543, 544, 550, 551, 553, 561], "fourier_encod": [7, 30, 364], "max_freq": [7, 30, 262, 364], "num_band": [7, 30, 262, 364], "concat": [7, 13, 23, 36, 168, 262, 361, 364, 369, 447, 560, 563, 565], "encod": [7, 30, 262, 364, 529, 532, 568], "frequenc": [7, 30, 262, 364, 540], "band": [7, 30, 262, 364], "linearli": [7, 30, 262, 364, 367, 417], "oppos": [7, 30, 262, 364, 548], "geometr": [7, 30, 262, 364, 367, 423], "concaten": [7, 13, 34, 258, 262, 364, 369, 413, 433, 560, 563, 565, 568], "seper": [7, 262, 364, 550, 560, 561], "0000000e": [7, 30, 262, 364], "2246468e": [7, 30, 262, 364], "4492936e": [7, 262, 364], "6739404e": [7, 30, 262, 364], "gather": [7, 30, 266, 270, 364, 586], "batch_dim": [7, 30, 265, 266, 364, 523], "let": [7, 19, 30, 265, 266, 364, 377, 503, 506, 507, 508, 529, 533, 535, 543, 545, 546, 548, 549, 550, 551, 552, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 586], "gather_nd": [7, 30, 364], "get_num_dim": [7, 30, 364], "as_arrai": [7, 30, 274, 306, 364], "has_nan": [7, 30, 364], "include_inf": [7, 30, 279, 323, 364], "inplace_decr": [7, 30, 364], "val": [7, 23, 29, 30, 281, 282, 283, 299, 300, 363, 364, 558, 567], "decrement": [7, 30, 281, 364], "inplace_incr": [7, 30, 364], "increment": [7, 30, 282, 364, 540, 562, 579], "inplace_upd": [7, 30, 49, 364, 558], "ensure_in_backend": [7, 30, 283, 364, 558], "keep_input_dtyp": [7, 30, 283, 364], "ensur": [7, 30, 283, 364, 513, 529, 538, 539, 540, 543, 548, 550, 552, 553, 554, 556, 558, 559, 560, 561, 562, 579], "is_arrai": [7, 30, 364, 559], "exclus": [7, 19, 23, 30, 42, 73, 285, 286, 288, 359, 364, 373, 377, 481, 499, 500, 546, 548, 555, 562, 570, 583, 585], "rather": [7, 23, 30, 73, 168, 285, 286, 288, 359, 361, 364, 532, 540, 542, 546, 548, 551, 558, 559, 560, 561, 562, 570, 573, 575, 578, 579], "trace": [7, 11, 23, 30, 34, 277, 285, 286, 288, 298, 304, 318, 322, 364, 367, 529, 542, 548, 565, 573, 574, 580, 585], "is_ivy_arrai": [7, 30, 364, 558, 567], "is_ivy_contain": [7, 364], "is_native_arrai": [7, 30, 286, 363, 364, 567], "scatter_flat": [7, 30, 364], "occupi": [7, 121, 124, 295, 296, 360, 364], "scatter_nd": [7, 30, 364, 563, 567], "empti": [7, 23, 30, 73, 253, 296, 355, 359, 363, 364, 365, 367, 371, 377, 378, 425, 470, 507, 509, 510, 538, 539, 543, 545, 548, 549], "stable_divid": [7, 30, 364, 555], "denomin": [7, 14, 30, 37, 54, 272, 300, 308, 364, 372, 475, 555, 573, 576], "min_denomin": [7, 30, 308, 364], "global": [7, 14, 23, 30, 37, 46, 54, 114, 115, 116, 117, 118, 166, 167, 168, 271, 272, 275, 299, 300, 302, 308, 309, 320, 351, 353, 355, 360, 361, 363, 364, 365, 372, 475, 520, 539, 543, 544, 547, 548, 549, 552, 555, 559, 565, 579], "_min_denomin": [7, 30, 308, 364], "stable_pow": [7, 30, 364], "min_bas": [7, 30, 309, 364], "_min_bas": [7, 14, 30, 37, 54, 309, 364, 372, 475], "stabl": [7, 18, 30, 41, 228, 271, 272, 299, 300, 308, 309, 362, 363, 364, 376, 495, 497, 539, 544, 548, 559, 565, 573], "supports_inplace_upd": [7, 30, 364], "current": [7, 23, 46, 50, 53, 122, 123, 126, 141, 142, 143, 144, 145, 146, 155, 156, 157, 158, 162, 164, 173, 263, 264, 267, 268, 269, 273, 277, 280, 284, 293, 294, 307, 310, 355, 360, 361, 363, 364, 365, 367, 371, 402, 456, 466, 467, 515, 529, 533, 536, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 552, 555, 556, 559, 560, 561, 563, 565, 570, 572, 573, 579, 585, 586], "to_list": [7, 30, 364], "to_numpi": [7, 30, 364, 529, 560, 568], "address": [7, 314, 364, 533, 538, 540, 542, 543, 565, 575, 577, 579, 585], "to_scalar": [7, 30, 364], "value_is_nan": [7, 30, 364], "92": [7, 38, 323, 350, 365, 367, 399, 482, 483], "_arraywithgradi": [8, 45], "adam_step": [8, 31, 365], "mw": [8, 31, 342, 343, 365, 569], "vw": [8, 31, 342, 343, 365, 569], "beta1": [8, 31, 55, 249, 342, 343, 348, 364, 365, 569], "beta2": [8, 31, 55, 249, 342, 343, 348, 364, 365, 569], "999": [8, 28, 31, 55, 236, 342, 343, 348, 350, 362, 365, 569], "epsilon": [8, 11, 12, 14, 29, 31, 34, 35, 37, 54, 55, 249, 342, 343, 348, 363, 364, 365, 367, 368, 372, 411, 414, 428, 429, 430, 475, 546, 555, 558, 569], "07": [8, 12, 28, 29, 31, 35, 38, 55, 181, 209, 213, 229, 342, 343, 345, 346, 347, 348, 354, 362, 363, 365, 368, 428, 429, 430, 482, 569], "cost": [8, 31, 342, 343, 346, 348, 349, 350, 365, 370, 453, 454, 455, 563, 577], "dc": [8, 31, 342, 343, 346, 348, 349, 350, 365], "dw": [8, 31, 342, 343, 346, 348, 349, 350, 365], "moment": [8, 31, 55, 342, 343, 348, 365, 538, 544, 573], "forget": [8, 31, 55, 342, 343, 348, 365, 529, 548], "factor": [8, 10, 11, 29, 31, 33, 34, 51, 52, 55, 166, 167, 168, 342, 343, 348, 349, 361, 365, 366, 367, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 397, 532, 552], "adam": [8, 31, 55, 249, 342, 343, 348, 364, 365, 529, 568, 569, 570, 579], "prevent": [8, 31, 51, 55, 252, 342, 343, 348, 364, 365, 366, 377, 392, 507, 538, 540, 547, 548, 552, 553, 558, 559, 562, 563], "delta": [8, 31, 342, 365], "dcdw": [8, 31, 342, 343, 346, 348, 349, 365], "adam_step_delta": [8, 31, 342, 365], "2020105": [8, 342, 365], "22187898": [8, 342, 365], "24144873": [8, 342, 365], "10000002": [8, 42, 342, 365, 503], "20000005": [8, 342, 365], "00300002": [8, 342, 365], "00800002": [8, 342, 365], "adam_upd": [8, 31, 365, 569], "lr": [8, 31, 55, 249, 343, 346, 348, 349, 350, 364, 365, 568, 569], "mw_tm1": [8, 31, 343, 348, 365], "vw_tm1": [8, 31, 343, 348, 365], "stop_gradi": [8, 31, 55, 168, 249, 343, 346, 348, 349, 350, 361, 364, 365, 370, 453, 454, 455, 569], "learn": [8, 31, 55, 258, 343, 346, 348, 349, 350, 364, 365, 370, 453, 454, 455, 529, 531, 532, 534, 537, 538, 539, 541, 542, 555, 557, 564, 572, 574, 577, 581, 582, 583, 584, 585, 586], "previou": [8, 31, 51, 141, 142, 143, 144, 145, 317, 319, 320, 321, 343, 348, 360, 363, 364, 365, 540, 542, 544, 547, 554, 559, 561, 563, 570, 573, 582], "ws_new": [8, 31, 343, 348, 349, 350, 365], "updated_weight": [8, 31, 343, 365], "92558753": [8, 343], "92558873": [8, 343, 365], "92558718": [8, 343, 365], "00000063e": [8, 31, 343, 365], "00000016e": [8, 31, 343, 365], "00000086e": [8, 31, 343, 365], "gradient_descent_upd": [8, 31, 365, 370, 453, 454, 455], "descent": [8, 31, 55, 346, 365, 569, 579], "new_weight": [8, 31, 346, 348, 365, 568], "95": [8, 15, 22, 31, 38, 59, 342, 346, 350, 356, 363, 365, 373, 482, 483], "97": [8, 28, 31, 38, 179, 346, 362, 365, 482], "96": [8, 28, 29, 30, 38, 190, 235, 258, 259, 346, 362, 363, 364, 365, 367, 377, 413, 483, 501], "lamb_upd": [8, 31, 365], "max_trust_ratio": [8, 31, 55, 348, 365], "decay_lambda": [8, 31, 55, 348, 349, 365], "trust": [8, 31, 55, 348, 365], "ratio": [8, 31, 55, 348, 365], "decai": [8, 31, 55, 348, 349, 365], "lamb": [8, 31, 55, 348, 365, 569], "784": [8, 348, 365], "78": [8, 188, 229, 348, 362, 365, 367, 373, 377, 413, 482, 501], "lars_upd": [8, 31, 365], "lar": [8, 31, 55, 349, 365, 569], "optimizer_upd": [8, 31, 365], "effective_grad": [8, 31, 350, 365], "optim": [8, 31, 51, 249, 350, 364, 365, 370, 453, 454, 455, 529, 533, 558, 566, 568, 570, 572, 577, 578, 579, 580, 581, 582, 583, 586], "3e": [8, 31, 350, 365], "preserve_typ": [8, 31, 352, 365], "_arraywithimag": [9, 45], "_arraywithlay": [10, 45], "conv1d": [10, 33, 52, 366], "fw": [10, 33, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 515, 561], "d_out": [10, 33, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390], "wio": [10, 366, 383, 384], "conv1d_transpos": [10, 33, 366], "output_shap": [10, 33, 52, 366, 382, 384, 386, 388, 390], "low": [10, 15, 33, 38, 366, 373, 382, 383, 384, 385, 387, 389, 391, 481, 483, 546, 559, 563, 565, 575, 577, 579, 580, 581, 583, 585], "high": [10, 15, 33, 38, 366, 373, 382, 383, 384, 385, 387, 389, 391, 481, 483, 533, 538, 557, 559, 563, 568, 574, 575, 576, 577, 578, 579, 583, 585, 586], "pair": [10, 33, 181, 362, 363, 366, 367, 382, 383, 384, 385, 387, 389, 391, 396, 398, 547], "give": [10, 33, 50, 51, 133, 360, 366, 369, 382, 383, 384, 385, 387, 389, 391, 439, 529, 533, 535, 539, 540, 541, 544, 545, 547, 550, 551, 554, 561, 579, 583], "conv2d": [10, 33, 52, 366, 386, 529], "fh": [10, 33, 366, 382, 385, 386, 387, 388, 389, 390, 391], "hwio": [10, 366, 385], "conv2d_transpos": [10, 33, 366], "random_norm": [10, 11, 15, 33, 34, 38, 258, 364, 366, 367, 373, 384, 386, 387, 388, 391, 394, 418], "std": [10, 15, 19, 33, 38, 42, 363, 366, 373, 377, 384, 386, 387, 388, 391, 481, 482, 550], "conv3d": [10, 33, 52, 366], "fd": [10, 33, 366, 382, 387, 388, 389, 390], "conv3d_transpos": [10, 33, 366], "depthwise_conv2d": [10, 33, 366], "randint": [10, 15, 17, 33, 38, 373, 375, 391, 394, 491, 548], "255": [10, 29, 33, 187, 362, 391, 529], "dropout": [10, 33, 52, 363, 366, 568], "noise_shap": [10, 33, 366, 392], "droput": [10, 392], "turn": [10, 33, 366, 392, 533, 539, 546, 550, 559, 561], "off": [10, 11, 33, 34, 51, 366, 367, 392, 401, 422, 533, 539, 564, 585], "reproduc": [10, 33, 366, 392, 520, 542], "binari": [10, 12, 29, 33, 35, 183, 186, 188, 217, 362, 363, 366, 368, 392, 428], "mask": [10, 33, 270, 364, 366, 392, 395, 396, 563], "42857146": [10, 366, 392], "85714293": [10, 366, 392], "28571415": [10, 33, 366, 392], "71428585": [10, 33, 366, 392], "14285755": [10, 33, 366, 392], "5714283": [10, 366, 392], "4285717": [10, 33, 366, 392], "8571434": [10, 33, 366, 392], "2857151": [10, 366, 392], "dropout1d": [10, 33, 363], "droput1d": 10, "dropout3d": [10, 33, 363], "droput3d": 10, "outer_batch_shap": [10, 33, 366, 393], "inner_batch_shap": [10, 33, 366, 393], "in_featur": [10, 33, 366, 393], "out_featur": [10, 33, 366, 393], "84": [10, 19, 28, 37, 38, 124, 155, 211, 360, 361, 367, 372, 377, 393, 413, 475, 482, 483, 501], "133": [10, 254, 364, 393], "134": [10, 367, 393, 410], "lstm_updat": [10, 33, 366, 565], "init_h": [10, 33, 366, 394, 565], "init_c": [10, 33, 366, 394, 565], "recurrent_kernel": [10, 33, 366, 394, 565], "recurrent_bia": [10, 33, 366, 394, 565], "initi": [10, 23, 33, 46, 49, 50, 52, 53, 55, 366, 394, 529, 532, 540, 544, 548, 549, 560, 561, 565, 579, 585, 586], "state": [10, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 141, 142, 143, 144, 145, 268, 269, 277, 307, 317, 319, 320, 321, 360, 364, 366, 394, 516, 529, 532, 539, 545, 548, 551, 552, 554, 559, 561, 564, 565, 566, 568, 572, 585, 586], "cell": [10, 33, 52, 366, 394, 547, 565], "batch_shap": [10, 15, 25, 33, 38, 52, 82, 90, 359, 366, 367, 373, 394, 395, 396, 426, 480, 563, 565, 567], "hidden": [10, 33, 52, 366, 394, 545, 552, 565, 569], "recurr": [10, 33, 366, 394, 565, 579, 583], "timestep": [10, 33, 52, 366, 394, 565], "h_i": [10, 33, 394], "c_i": [10, 33, 394], "rc": [10, 33, 394], "multi_head_attent": [10, 33, 366, 558], "num_head": [10, 33, 52, 366, 395], "context": [10, 33, 52, 292, 361, 364, 365, 366, 395, 539, 540, 550], "to_q_fn": [10, 33, 366, 395], "to_kv_fn": [10, 33, 366, 395], "to_out_fn": [10, 33, 366, 395, 558], "to_q_v": [10, 33, 366, 395], "to_kv_v": [10, 33, 366, 395], "to_out_v": [10, 33, 366, 395], "scaled_dot_product_attent": [10, 33, 366], "queri": [10, 23, 33, 52, 155, 167, 270, 361, 364, 366, 395, 396, 546, 548, 567, 579], "num_queri": [10, 33, 366, 395, 396], "feat_dim": [10, 33, 366, 396], "num_kei": [10, 33, 366, 395, 396], "applic": [10, 33, 366, 371, 395, 396, 462, 463, 464, 468, 469, 529, 539, 548, 549, 556, 569, 576, 577, 579, 581, 583, 585], "dot": [10, 29, 33, 52, 363, 366, 367, 395, 396, 424, 529, 547], "attent": [10, 33, 52, 366, 395, 396, 532, 540, 543], "score": [10, 33, 366, 396, 529], "_arraywithlinearalgebra": [11, 45], "choleski": [11, 34, 367, 558], "symmetr": [11, 29, 34, 363, 367, 397, 402, 403, 404, 426, 546], "u": [11, 25, 34, 87, 367, 371, 397, 404, 418, 464, 529, 532, 534, 539, 540, 541, 545, 546, 547, 555, 556, 558, 559, 560, 561, 562, 563, 569, 573], "l": [11, 28, 34, 214, 367, 397, 402, 403, 404, 408, 422, 540, 541], "625": [11, 29, 367, 397], "cross": [11, 12, 29, 34, 35, 363, 367, 368, 428, 429, 430, 529, 547], "vif": [11, 34, 367, 398], "det": [11, 34, 367, 416, 547], "axis1": [11, 13, 34, 36, 367, 369, 401, 422, 444], "axis2": [11, 34, 367, 401, 422], "remov": [11, 23, 34, 353, 365, 367, 369, 370, 371, 401, 408, 422, 442, 453, 454, 470, 529, 538, 544, 545, 547, 548, 551, 555, 561, 563, 570, 579], "eigh": [11, 34, 367, 402], "uplo": [11, 34, 367, 403, 404], "eigvalsh": [11, 34, 367], "inner": [11, 25, 34, 90, 359, 367, 370, 402, 403, 408, 453, 454, 455, 538, 558], "inv": [11, 34, 367], "matmul": [11, 34, 324, 364, 367, 418, 544, 561, 562, 565], "transpose_a": [11, 34, 367, 408], "transpose_b": [11, 34, 367, 408], "adjoint_a": [11, 34, 367, 408], "adjoint_b": [11, 34, 367, 408], "detail": [11, 13, 17, 34, 36, 40, 83, 359, 363, 375, 401, 408, 414, 418, 443, 491, 492, 493, 494, 529, 538, 540, 542, 544, 545, 546, 547, 554, 555, 556, 559, 560, 561, 562, 565, 567, 568, 569, 581, 585], "found": [11, 13, 17, 23, 34, 36, 40, 46, 50, 158, 361, 371, 401, 408, 443, 467, 491, 535, 538, 539, 540, 543, 544, 545, 546, 548, 551, 553, 556, 558, 559, 563, 581], "matrix_norm": [11, 34, 367], "ord": [11, 34, 367, 409, 425], "fro": [11, 34, 367, 409], "nuc": [11, 34, 367, 409], "matrix_pow": [11, 34, 367], "matrix_rank": [11, 34, 367], "singular": [11, 34, 367, 409, 411, 414, 418, 419, 548], "stack": [11, 13, 23, 29, 34, 36, 45, 52, 93, 94, 277, 298, 304, 322, 359, 363, 364, 367, 369, 371, 399, 401, 402, 403, 404, 406, 408, 410, 411, 412, 414, 415, 416, 418, 419, 422, 456, 466, 467, 529, 537, 542, 565, 575, 577, 584, 585], "largest_singular_valu": [11, 34, 367, 411, 414], "equival": [11, 34, 73, 187, 215, 216, 227, 359, 362, 367, 411, 414, 417, 425, 558, 559, 563, 568, 570], "associ": [11, 34, 177, 362, 367, 411, 414, 426, 515, 540, 548, 555, 556, 559, 560, 561, 573], "full": [11, 33, 34, 121, 202, 208, 269, 277, 298, 304, 318, 322, 359, 360, 362, 364, 366, 367, 384, 386, 387, 388, 411, 415, 417, 418, 515, 520, 529, 532, 533, 540, 548, 551, 552, 554, 559, 561, 563, 565, 573, 577, 579, 585], "defici": [11, 367, 411], "matrix_transpos": [11, 34, 367, 567], "outer": [11, 34, 367, 370, 453, 454, 455, 538], "pinv": [11, 34, 367], "pseudo": [11, 34, 367, 414, 557], "0426": [11, 34, 414], "0964": [11, 34, 414], "0605": [11, 34, 414], "1368": [11, 34, 414], "qr": [11, 34, 367, 560], "decomposit": [11, 34, 367, 397, 407, 415, 418, 538, 586], "orthonorm": [11, 34, 367, 415, 418], "lead": [11, 23, 34, 46, 367, 415, 418, 532, 533, 547, 550, 562, 573], "complet": [11, 23, 34, 367, 415, 532, 538, 539, 540, 542, 543, 546, 547, 550, 552, 559, 560, 561, 563, 567, 568, 577], "namedtupl": [11, 17, 34, 40, 367, 375, 402, 403, 415, 416, 418, 491, 492, 493], "field": [11, 17, 34, 40, 367, 375, 402, 403, 415, 416, 418, 491, 492, 493, 529, 547, 572, 577, 585], "those": [11, 13, 23, 29, 34, 36, 73, 133, 324, 359, 360, 364, 367, 369, 371, 415, 418, 432, 458, 531, 538, 539, 540, 543, 546, 547, 548, 556, 559, 560, 561, 563, 576], "slogdet": [11, 34, 367], "logabsdet": [11, 34, 367, 416], "natur": [11, 34, 196, 209, 211, 228, 362, 367, 416, 532, 543, 545, 550, 552, 560, 572], "6931472": [11, 34, 367, 416], "098611": [11, 367, 416], "solv": [11, 34, 367, 529, 539, 542, 559, 566, 572, 581], "svd": [11, 34, 367, 419], "compute_uv": [11, 34, 367, 418], "full_matric": [11, 34, 367, 418], "svf": [11, 418], "vh": [11, 34, 367, 418], "right": [11, 23, 34, 46, 185, 187, 258, 362, 363, 364, 367, 376, 418, 423, 496, 534, 539, 540, 541, 542, 550, 563, 568], "significantli": [11, 34, 367, 418, 531, 547, 577], "faster": [11, 34, 367, 418, 537, 574, 581, 584], "still": [11, 23, 34, 367, 418, 532, 538, 540, 543, 548, 551, 552, 558, 559, 561, 563, 569, 573, 576, 579, 585], "howev": [11, 34, 367, 416, 418, 532, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 554, 555, 558, 559, 560, 561, 563, 565, 567, 568, 569, 570, 573, 578, 579, 585], "onc": [11, 15, 34, 38, 168, 361, 367, 373, 402, 403, 404, 418, 480, 533, 538, 539, 540, 546, 547, 548, 549, 550, 559, 561, 563, 565, 568, 573], "hermitian": [11, 34, 363, 367, 402, 403, 404, 418], "reconstruct": [11, 17, 40, 367, 375, 418, 491, 493, 560], "close": [11, 197, 211, 228, 362, 367, 369, 418, 435, 538, 539, 540, 551, 559, 563, 579], "reconstructed_x": [11, 367, 418], "svdval": [11, 34, 367], "tensordot": [11, 34, 367, 548], "tensorsolv": [11, 34, 367], "vander": [11, 34, 367], "increas": [11, 13, 34, 36, 363, 367, 369, 371, 423, 434, 447, 468, 531, 548, 552, 559, 562, 563, 579], "vandermond": [11, 34, 367, 423], "vecdot": [11, 34, 367], "vector_norm": [11, 34, 367], "singleton": [11, 16, 19, 20, 34, 39, 42, 43, 367, 369, 374, 377, 378, 425, 435, 442, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 565], "accordingli": [11, 16, 17, 19, 20, 34, 39, 42, 43, 88, 197, 211, 359, 362, 367, 374, 375, 377, 378, 425, 487, 491, 492, 493, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 553, 559, 565], "mathemat": [11, 34, 177, 181, 197, 211, 357, 362, 367, 409, 425, 548, 559, 563, 579, 585], "l1": [11, 34, 367, 425, 546, 568], "manhattan": [11, 34, 367, 425], "euclidean": [11, 34, 367, 425], "7416575": [11, 34, 367, 425], "vector_to_skew_symmetric_matrix": [11, 34, 367], "_arraywithloss": [12, 45], "binary_cross_entropi": [12, 35, 368, 547], "pred": [12, 29, 35, 363, 368, 428, 429, 430, 529, 546, 555, 558], "label": [12, 29, 35, 363, 368, 428, 429, 430, 529, 538, 540, 542, 547, 559, 564, 565, 566, 570, 579], "predict": [12, 29, 35, 363, 368, 428, 429, 430, 529], "amount": [12, 29, 35, 170, 361, 363, 368, 428, 429, 430, 539, 547, 549, 560], "smooth": [12, 29, 35, 363, 368, 428, 429, 430, 557], "entropi": [12, 29, 35, 363, 368, 428, 429, 430, 529], "357": [12, 35, 368, 428, 430], "223": [12, 35, 368, 428, 430], "cross_entropi": [12, 35, 368, 430, 529, 546, 555, 558], "3862944": [12, 368, 429], "sparse_cross_entropi": [12, 35, 368], "_arraywithmanipul": [13, 45], "x_min": [13, 36, 369, 432, 570], "x_max": [13, 36, 369, 432, 570], "join": [13, 23, 36, 369, 433, 443, 529, 552], "constant_pad": [13, 36, 369], "before_1": [13, 36, 363, 369, 434, 447], "after_1": [13, 36, 363, 369, 434, 447], "before_n": [13, 36, 363, 369, 434, 447], "after_n": [13, 36, 363, 369, 434, 447], "expand_dim": [13, 36, 366, 369, 391, 529, 559, 565, 568], "permute_dim": [13, 36, 369], "permut": [13, 36, 45, 369, 437, 444], "repetit": [13, 36, 369, 438, 445, 552, 563], "fit": [13, 36, 369, 438, 559, 565, 575, 576, 579], "flat": [13, 23, 36, 50, 295, 363, 364, 369, 438], "allowzero": [13, 36, 369, 439], "remain": [13, 16, 36, 39, 177, 227, 362, 363, 369, 371, 374, 439, 462, 489, 540, 547, 550, 552, 562, 563, 573], "never": [13, 36, 369, 439, 540, 548, 559, 561, 563], "valueerror": [13, 36, 40, 369, 439, 442, 494, 526, 552], "reus": [13, 36, 369, 439, 552, 561, 584], "buffer": [13, 36, 369, 439, 573], "roll": [13, 36, 369, 546, 554], "shift": [13, 25, 36, 46, 85, 185, 187, 362, 363, 369, 440, 539, 540, 550, 554], "restor": [13, 36, 369, 440], "num_or_size_split": [13, 23, 36, 366, 369, 395, 441, 565], "with_remaind": [13, 23, 36, 369, 441], "mani": [13, 23, 36, 50, 363, 369, 441, 529, 531, 532, 533, 538, 539, 540, 543, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 563, 565, 567, 568, 573, 575, 579, 582, 585, 586], "squeez": [13, 36, 369, 579], "document": [13, 324, 364, 443, 534, 536, 537, 540, 545, 547, 548, 550, 552, 559, 560, 561, 568, 570], "swapax": [13, 36, 369], "axis0": [13, 36, 369, 444], "swap_ax": [13, 444], "swap": [13, 36, 369, 444], "tile": [13, 30, 36, 260, 369], "unpack": [13, 36, 369, 446, 553, 560, 561], "keep": [13, 23, 36, 369, 446, 537, 538, 539, 540, 542, 545, 546, 547, 552, 559, 561, 562, 563, 568, 570], "zero_pad": [13, 36, 369], "_arraywithnorm": [14, 45], "layer_norm": [14, 37, 372], "normalized_idx": [14, 37, 372, 475], "new_std": [14, 37, 54, 372, 475], "learnabl": [14, 37, 54, 372, 475, 570], "post": [14, 37, 372, 475, 539, 557, 570], "0976": [14, 372, 475], "3452": [14, 372, 475], "2740": [14, 372, 475], "1047": [14, 372, 475], "5886": [14, 372, 475], "2732": [14, 372, 475], "7696": [14, 372, 475], "7024": [14, 372, 475], "2518": [14, 372, 475], "826": [14, 372, 475], "178": [14, 372, 475], "981": [14, 372, 475], "831": [14, 372, 475], "421": [14, 372, 475], "_arraywithrandom": [15, 45], "multinomi": [15, 38, 363, 373], "population_s": [15, 38, 373, 480], "num_sampl": [15, 38, 373, 480], "unnorm": [15, 38, 373, 480, 561], "popul": [15, 19, 23, 38, 42, 363, 373, 377, 480, 506, 508, 548, 549, 561, 565, 585], "uniform": [15, 38, 51, 373, 480, 481, 483, 529, 569, 586], "draw": [15, 38, 51, 363, 373, 480, 482, 483, 520, 538, 542, 560, 561], "ve": [15, 38, 373, 480, 538, 539, 540, 561, 563, 564, 567, 574], "highest": [15, 38, 373, 481], "half": [15, 38, 73, 359, 373, 481, 483, 563], "open": [15, 38, 73, 359, 373, 481, 483, 529, 531, 532, 533, 534, 539, 540, 545, 548, 551, 559, 560, 563, 572, 577, 578, 579, 581, 582], "int64": [15, 16, 18, 19, 26, 38, 39, 41, 42, 91, 111, 117, 120, 122, 124, 128, 129, 131, 138, 359, 360, 363, 374, 376, 377, 481, 486, 487, 488, 496, 499, 500, 505, 507, 548, 559, 561, 565], "235": [15, 482], "float16": [15, 26, 38, 113, 116, 121, 123, 360, 363, 367, 425, 482, 483, 548, 561], "807": [15, 482], "random_uniform": [15, 38, 373, 549, 561, 565, 569], "86": [15, 38, 342, 365, 482, 483], "53": [15, 28, 170, 197, 345, 347, 354, 361, 365, 372, 475, 483], "_arraywithsearch": [16, 45], "argmax": [16, 39, 374, 529, 559], "select_last_index": [16, 39, 374, 486, 487], "occurr": [16, 374, 375, 486, 487, 491], "insert": [16, 39, 369, 371, 374, 376, 435, 461, 486, 496, 547], "appropri": [16, 21, 39, 44, 177, 362, 363, 374, 486, 538, 540, 556, 561], "argmin": [16, 39, 374], "output_dtyp": [16, 39, 374, 487], "across": [16, 23, 30, 39, 166, 167, 250, 279, 361, 364, 366, 371, 374, 392, 462, 486, 487, 538, 542, 546, 548, 550, 552, 554, 555, 557, 559, 561, 563, 577, 579, 584], "argwher": [16, 39, 374, 553], "nonzero": [16, 39, 177, 362, 374], "as_tupl": [16, 39, 374, 489], "fewer": [16, 39, 374, 489], "yield": [16, 363, 374, 490, 529, 547, 553], "condit": [16, 29, 39, 363, 371, 374, 466, 467, 490, 542, 548, 550, 552, 555, 556, 558, 572], "_arraywithset": [17, 45], "unique_al": [17, 40, 375], "inverse_indic": [17, 40, 375, 491, 493], "vari": [17, 258, 364, 375, 491, 492, 493, 494, 546, 550, 559, 561, 567], "unique_count": [17, 40, 375], "unique_invers": [17, 40, 375], "unique_valu": [17, 40, 375], "admonit": [17, 494], "import": [17, 21, 25, 44, 151, 152, 156, 157, 165, 166, 361, 363, 375, 494, 520, 529, 532, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 553, 557, 558, 559, 560, 561, 562, 565, 567, 568, 570, 573, 575, 577, 579, 582, 583, 585], "henc": [17, 369, 375, 435, 491, 492, 493, 494, 539, 546, 547, 561], "build": [17, 52, 53, 375, 491, 492, 493, 494, 529, 532, 534, 535, 539, 541, 547, 548, 555, 557, 564, 566, 569, 570, 573, 574, 577, 579, 581, 584, 585, 586], "graph": [17, 53, 375, 491, 492, 493, 494, 520, 529, 533, 546, 555, 559, 563, 566, 573, 574, 575, 579, 582], "dask": [17, 375, 491, 492, 493, 494, 532], "find": [17, 23, 371, 375, 458, 491, 492, 493, 494, 529, 531, 534, 537, 538, 539, 540, 542, 545, 547, 557, 561, 563, 565, 568, 574], "difficult": [17, 375, 491, 492, 493, 494, 540, 542, 548, 561, 573], "without": [17, 23, 275, 302, 316, 364, 369, 371, 375, 439, 457, 491, 492, 493, 494, 540, 543, 546, 547, 548, 549, 550, 552, 553, 554, 555, 559, 561, 562, 563, 567, 568, 569, 572, 573, 576, 579, 580, 581, 585], "know": [17, 375, 491, 492, 493, 494, 533, 536, 540, 545, 560, 561, 562, 580], "omit": [17, 228, 362, 375, 491, 492, 493, 494, 554, 558, 559], "x_i": [17, 19, 28, 29, 51, 174, 175, 176, 178, 179, 180, 184, 189, 190, 191, 196, 197, 198, 203, 204, 205, 206, 209, 210, 211, 212, 215, 228, 229, 230, 231, 232, 233, 235, 236, 237, 362, 363, 375, 377, 491, 492, 493, 494, 502, 503, 504, 506, 507, 508, 551], "x_j": [17, 375, 491, 492, 493, 494], "impli": [17, 375, 491, 492, 493, 494, 561], "behavior": [17, 224, 227, 362, 375, 491, 492, 493, 494, 545, 546, 547, 548, 555, 559, 560, 561, 563, 565, 573, 576], "As": [17, 21, 44, 375, 491, 492, 493, 494, 529, 531, 540, 543, 545, 546, 547, 548, 549, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 567, 568, 569, 573, 579, 584], "distinct": [17, 375, 491, 492, 493, 494, 532, 539, 546, 551, 557, 558, 559, 564, 579], "could": [17, 375, 491, 492, 493, 494, 532, 533, 538, 539, 540, 542, 545, 547, 548, 550, 556, 558, 559, 560, 561, 565, 567, 568, 569, 579, 584, 585], "typeerror": [17, 40, 375, 494, 567], "_arraywithsort": [18, 45], "argsort": [18, 41, 376, 496, 559], "descend": [18, 41, 367, 376, 418, 419, 495, 497], "ascend": [18, 41, 363, 376, 495, 496], "stabil": [18, 41, 308, 309, 364, 376, 495, 497, 548, 557, 563], "maintain": [18, 41, 376, 495, 497, 531, 540, 542, 547, 559, 560, 561, 578], "searchsort": [18, 41, 376], "side": [18, 41, 363, 376, 496, 539, 540, 545], "sorter": [18, 41, 376, 496], "ret_dtyp": [18, 41, 376, 496], "_arraywithstatist": [19, 45], "cumprod": [19, 42, 377, 559, 570], "cumul": [19, 42, 377, 499, 500, 572], "exclud": [19, 42, 73, 359, 363, 373, 483, 499, 550, 565], "uint64": [19, 118, 123, 125, 126, 134, 136, 139, 360, 377, 499, 500, 505, 507, 548, 561, 565], "uint16": [19, 113, 118, 123, 124, 131, 360, 377, 499, 500, 505, 507, 548, 559, 561, 565], "bit": [19, 120, 121, 124, 184, 185, 187, 360, 362, 377, 499, 500, 505, 507, 537, 538, 539, 546, 547, 548, 550, 555, 565, 567, 585], "uint32": [19, 118, 123, 124, 125, 145, 360, 377, 499, 500, 505, 507, 548, 561, 565], "resolv": [19, 369, 377, 435, 499, 500, 505, 507, 540, 545, 548, 565], "120": [19, 42, 46, 367, 413, 499, 529], "cumsum": [19, 42, 377, 548], "einsum": [19, 42, 377], "equat": [19, 29, 42, 363, 367, 377, 417, 501, 579], "operand": [19, 175, 176, 177, 178, 179, 180, 181, 188, 189, 190, 191, 196, 197, 198, 209, 210, 211, 212, 213, 224, 227, 228, 230, 231, 232, 235, 236, 237, 362, 363, 377, 501, 502, 504, 507, 543, 546, 551, 559], "describ": [19, 29, 363, 377, 501, 505, 507, 536, 538, 540, 547, 561, 565, 570, 579], "contract": [19, 367, 377, 420, 501], "seq": [19, 377, 501], "consist": [19, 23, 53, 367, 377, 402, 403, 501, 531, 542, 543, 547, 548, 552, 558, 565, 580], "ii": [19, 42, 377, 501, 540], "jk": [19, 377, 501], "ik": [19, 377, 501], "66": [19, 30, 31, 188, 258, 259, 346, 362, 364, 365, 367, 377, 413, 501], "104": [19, 367, 377, 413, 501], "126": [19, 59, 225, 356, 362, 367, 377, 410, 501], "just": [19, 52, 363, 377, 501, 520, 529, 532, 533, 539, 540, 542, 544, 547, 548, 550, 551, 555, 556, 558, 559, 560, 561, 565, 567, 568, 573, 579, 580, 585], "510": [19, 377, 501], "entir": [19, 20, 23, 30, 42, 43, 52, 168, 279, 361, 363, 377, 378, 502, 503, 504, 505, 506, 507, 508, 509, 510, 532, 533, 538, 539, 540, 542, 543, 546, 548, 550, 552, 558, 559, 560, 561, 563, 565, 568, 569, 570, 573, 579, 585, 586], "wa": [19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 316, 323, 346, 352, 361, 363, 364, 371, 377, 378, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 529, 532, 540, 542, 547, 550, 557, 559, 565, 567, 578, 579, 581], "special": [19, 34, 45, 46, 51, 174, 175, 176, 177, 178, 179, 180, 181, 188, 189, 190, 191, 196, 197, 198, 209, 210, 211, 212, 213, 215, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 362, 363, 377, 502, 503, 504, 506, 507, 508, 520, 538, 542, 543, 547, 550, 551, 552, 554, 558, 560, 562, 563, 579, 580, 581], "arithmet": [19, 42, 187, 362, 377, 503, 559], "propag": [19, 187, 362, 377, 502, 503, 504, 506, 507, 508, 557], "04999995": [19, 503], "correct": [19, 42, 140, 360, 369, 377, 432, 506, 508, 515, 529, 538, 540, 541, 545, 546, 547, 548, 549, 553, 554, 555, 560, 561], "freedom": [19, 42, 377, 506, 508, 544], "adjust": [19, 42, 377, 506, 508], "choic": [19, 42, 377, 506, 508, 529, 533, 539, 558, 559, 568, 579], "constitut": [19, 42, 377, 506, 508, 555, 565, 580], "commonli": [19, 42, 377, 506, 508, 552, 555, 557], "8164966": [19, 377, 506], "var": [19, 42, 44, 68, 69, 70, 71, 358, 370, 377, 453, 454, 523, 539, 550, 565], "unbias": [19, 42, 377, 508], "6666665": [19, 508, 568], "667": [19, 30, 193, 254, 308, 362, 364, 508], "_arraywithutil": [20, 45], "logic": [20, 43, 160, 214, 215, 216, 361, 362, 378, 509, 510, 538, 543, 547, 548, 549, 552, 556, 557, 559, 561, 563, 567], "AND": [20, 43, 183, 214, 362, 378, 509], "invalid": [20, 43, 367, 369, 378, 424, 435, 509, 510, 539, 545, 548, 553], "_wrap_funct": [21, 44, 545, 555, 556], "function_nam": [21, 44, 538], "new_funct": [21, 44, 545], "add_ivy_array_instance_method": 21, "cl": [21, 44], "modul": [21, 23, 44, 46, 48, 49, 50, 52, 54, 56, 292, 363, 364, 515, 529, 533, 536, 539, 543, 544, 545, 552, 553, 555, 558, 559, 561, 565, 566, 568, 570, 572, 573, 579, 580, 582], "to_ignor": [21, 44, 371, 467, 468], "loop": [21, 44, 370, 453, 454, 455, 529, 544, 553, 573], "don": [21, 44, 529, 533, 538, 539, 540, 545, 547, 548, 557, 561, 563, 569, 573], "shown": [21, 23, 44, 206, 277, 362, 363, 364, 538, 540, 542, 545, 547, 548, 550, 552, 553, 554, 559, 560, 561, 562, 565, 567, 573], "our": [21, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 552, 553, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 573, 584, 585], "toi": [21, 44], "arrayexampl": 21, "hasattr": [21, 44], "_containerwithactiv": [22, 46], "dict_in": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "queue": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 275, 302, 320, 364, 568], "queue_load_s": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "container_combine_method": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "list_join": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "queue_timeout": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "print_limit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "key_length_limit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "print_ind": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "print_line_spac": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "ivyh": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "default_key_color": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "green": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 528, 539, 540], "keyword_color_dict": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "rebuild_child_contain": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "types_to_iteratively_nest": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "alphabetical_kei": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46], "dynamic_backend": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53], "containerbas": [22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 546], "static": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 49, 79, 310, 359, 413, 538, 550, 551, 555, 556, 559, 573, 578, 579, 580], "_static_gelu": 22, "key_chain": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 131, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "to_appli": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 131, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 371, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "prune_unappli": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 131, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 371, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "map_sequ": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 81, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 108, 109, 110, 111, 119, 121, 124, 127, 128, 129, 130, 131, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510], "exact": [22, 23, 59, 363, 375, 491, 493, 539, 540, 542, 550, 565], "formul": [22, 59], "chain": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 50, 56, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 370, 371, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 453, 454, 458, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 543, 546, 557, 559, 569, 570, 573, 579], "skip": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 371, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 469, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 545, 556, 561], "prune": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 59, 61, 62, 63, 64, 65, 66, 67, 85, 90, 92, 96, 109, 111, 124, 128, 129, 134, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 247, 250, 251, 253, 254, 258, 259, 260, 262, 265, 266, 274, 279, 281, 282, 283, 285, 286, 288, 295, 296, 308, 309, 310, 312, 314, 315, 323, 346, 352, 371, 383, 384, 385, 386, 392, 393, 396, 397, 398, 404, 406, 408, 409, 411, 413, 415, 416, 422, 428, 429, 430, 432, 436, 439, 440, 441, 442, 443, 446, 447, 469, 470, 471, 472, 480, 481, 482, 483, 485, 488, 491, 492, 493, 494, 495, 499, 500, 503, 505, 506, 508, 509, 510, 516, 547], "static_gelu": 22, "185": 22, "046": 22, "_static_leaky_relu": 22, "static_leaky_relu": 22, "38999999": [22, 61], "_static_log_softmax": 22, "static_log_softmax": 22, "371": [22, 62], "_static_mish": 22, "static_mish": 22, "30883577": [22, 63, 356], "28903052": [22, 63, 356], "10714479": [22, 63, 356], "_static_relu": 22, "static_relu": 22, "40000001": [22, 45, 46, 61, 64, 356, 375, 492], "_static_sigmoid": 22, "static_sigmoid": 22, "2689414": [22, 65, 66], "7310586": [22, 65, 66], "88079703": [22, 65], "62245935": [22, 65], "4750208": [22, 65], "_static_softmax": 22, "static_softmax": 22, "72844321": [22, 66], "19852395": [22, 66], "07303288": [22, 66], "_static_softplu": 22, "revert": [22, 67, 356], "static_softplu": 22, "53499615": 22, "42036411": 22, "948": [22, 67], "166": [22, 59, 356], "159": [22, 59, 356, 366, 393], "__getitem__": [23, 546], "slice": [23, 30, 265, 266, 270, 363, 364, 371, 465, 579], "__init__": [23, 45, 46, 48, 51, 52, 53, 54, 55, 56, 359, 360, 361, 363, 364, 365, 512, 516, 518, 519, 526, 529, 538, 543, 544, 548, 552, 559, 562, 565, 567, 568, 569, 570], "dictionari": [23, 40, 46, 58, 60, 167, 344, 356, 361, 365, 494, 515, 543, 547, 548, 559, 568, 573], "around": [23, 46, 363, 540, 543, 545, 554, 555, 559, 562, 567, 573, 574, 577, 579, 586], "multiprocess": [23, 46, 364, 568, 573], "asynchron": [23, 46, 579], "wait": [23, 46, 302, 364, 529, 538, 540, 547, 559], "combin": [23, 46, 263, 264, 364, 367, 398, 408, 540, 543, 546, 548, 550, 552, 555, 561, 563, 570, 579], "arriv": [23, 46, 302, 364, 563], "cont_list_join": [23, 46], "timeout": [23, 46, 275, 302, 320, 364], "limit": [23, 46, 51, 121, 124, 253, 254, 360, 364, 369, 432, 523, 529, 539, 540, 545, 547, 550, 552, 553, 559, 561, 563, 568, 573, 578, 579, 580], "whitespac": [23, 46], "indent": [23, 46, 568], "extra": [23, 46, 324, 364, 543, 548, 550, 556, 559, 560, 563, 565, 576, 581], "newlin": [23, 46, 551], "color": [23, 46, 528], "termin": [23, 46, 539, 540, 546, 565, 568], "termcolor": [23, 46], "rebuild": [23, 46, 535], "constructor": [23, 46, 49, 56, 249, 364, 515, 548, 549, 567], "param": [23, 29, 30, 40, 46, 220, 248, 265, 266, 362, 364, 494, 523, 529, 570], "kept": [23, 46, 370, 453, 454, 540, 558, 562], "structur": [23, 26, 46, 50, 121, 124, 255, 364, 371, 469, 529, 540, 543, 546, 555, 560, 561, 562, 568, 569, 578, 579], "alphabet": [23, 46], "__setitem__": [23, 543, 546, 567], "_cont_at_key_chains_input_as_dict": 23, "current_chain": 23, "ignore_key_error": 23, "_cont_at_key_chains_input_as_seq": 23, "_cont_call_static_method_with_flexible_arg": 23, "static_method": 23, "kw": 23, "self_idx": 23, "_cont_concat_unifi": 23, "_cont_get_dev": 23, "_cont_get_shap": 23, "properti": [23, 45, 53, 55, 363, 512, 542, 546, 550, 555, 560, 561, 567, 568, 569, 585], "_cont_ivi": 23, "_cont_mean_unifi": 23, "_1": 23, "_cont_prune_key_chains_input_as_dict": 23, "return_cont": 23, "_cont_prune_key_chains_input_as_seq": 23, "_cont_slice_kei": 23, "key_slic": 23, "_cont_sum_unifi": 23, "_get_queue_item": 23, "cont_all_fals": 23, "assert_is_bool": 23, "assert": [23, 251, 364, 520, 541, 542, 553, 559, 560, 561, 562, 567, 568], "cont_all_key_chain": 23, "include_empti": 23, "cont_all_tru": [23, 546, 568], "cont_as_bool": 23, "cont_assert_contains_sub_contain": 23, "sub_cont": 23, "screen": [23, 539, 568], "cont_assert_contains_sub_structur": 23, "check_shap": [23, 523], "cont_assert_ident": 23, "check_typ": 23, "same_arrai": [23, 568], "arrays_equ": 23, "ident": [23, 82, 158, 270, 359, 361, 364, 367, 371, 410, 469, 531, 533, 546, 555, 556, 559, 560, 562, 563, 567, 568, 573, 574], "node": [23, 30, 51, 251, 310, 371, 466, 467, 532, 545, 546, 559, 580], "cont_assert_identical_structur": 23, "cont_at_key_chain": 23, "ignore_non": 23, "cont_at_kei": 23, "substr": 23, "try": [23, 51, 316, 363, 364, 529, 530, 532, 533, 538, 539, 540, 542, 543, 546, 547, 548, 552, 553, 558, 559, 560, 565, 567, 573], "access": [23, 538, 539, 540, 547, 548, 559, 579, 581, 583], "cont_combin": 23, "config": [23, 371, 469, 535, 539, 542, 545, 547, 568, 580], "prioriti": [23, 363, 540, 558], "most": [23, 25, 90, 359, 367, 402, 403, 529, 532, 537, 538, 539, 543, 546, 547, 548, 549, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 573, 579, 580, 582, 583, 585, 586], "duplic": [23, 371, 458, 544, 551, 553, 556, 557, 560, 569, 585], "configur": [23, 167, 361, 371, 469, 535, 539, 540, 545, 547, 548, 556], "container_rightmost": 23, "cont_common_key_chain": [23, 546], "cont_config": 23, "cont_contains_sub_contain": 23, "cont_contains_sub_structur": 23, "cont_copi": [23, 568], "cont_create_if_abs": 23, "noth": [23, 563, 585], "cont_cutoff_at_depth": 23, "depth_cutoff": 23, "summari": [23, 125, 255, 276, 360, 364, 539, 540, 561], "cont_cutoff_at_height": 23, "height_cutoff": 23, "cont_deep_copi": [23, 568], "deep": [23, 258, 364, 529, 531, 534, 536, 537, 538, 540, 542, 545, 546, 548, 557, 560, 564, 567, 568, 577, 579, 582, 583, 585, 586], "intern": [23, 51, 52, 53, 54, 56, 371, 456, 466, 467, 512, 543, 546, 549, 551, 558, 560, 561], "cont_dev": 23, "belong": [23, 538, 542, 569], "cont_dev_str": 23, "cont_diff": [23, 546, 568], "diff_kei": 23, "detect_key_diff": 23, "detect_value_diff": 23, "detect_shape_diff": 23, "share": [23, 140, 360, 529, 532, 544, 546, 550, 555, 557, 559, 560, 561, 563, 565, 577, 578, 585], "among": [23, 533, 547, 561, 563, 579], "flag": [23, 153, 361, 515, 520, 540, 548, 556, 558, 559, 560, 561], "container0": 23, "cont_duplicate_array_keychain": 23, "cont_find_sub_contain": 23, "sub_cont_to_find": 23, "exsit": 23, "cont_find_sub_structur": 23, "sub_struc_to_find": 23, "cont_flatten_key_chain": [23, 568], "__": [23, 550, 568], "above_height": [23, 568], "below_depth": [23, 568], "cont_format_key_chain": 23, "format_fn": 23, "cont_from_disk_as_hdf5": [23, 568], "h5_obj_or_filepath": 23, "slice_obj": 23, "load": [23, 529, 561, 573, 578, 585], "disk": [23, 568, 578], "h5py": 23, "file": [23, 53, 278, 305, 364, 538, 539, 540, 542, 543, 544, 545, 546, 547, 551, 552, 553, 555, 559, 560, 561, 562, 565, 568, 575, 578, 579, 580], "hdf5": [23, 53, 568], "filepath": [23, 540, 542], "h5": 23, "cont_from_disk_as_json": [23, 568], "json_filepath": 23, "json": [23, 535, 539, 568], "some": [23, 31, 52, 197, 211, 342, 343, 346, 348, 349, 350, 361, 362, 363, 365, 371, 467, 529, 532, 533, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 568, 569, 572, 573, 574, 575, 576, 578, 579, 580, 585, 586], "were": [23, 26, 124, 128, 129, 540, 548, 552, 553, 557, 561, 562, 563, 565, 579, 580, 585], "abl": [23, 539, 540, 542, 548, 555, 558, 559, 563, 565, 570, 582, 585], "cont_from_disk_as_pickl": [23, 568], "pickle_filepath": 23, "pickl": [23, 546, 568], "cont_from_flat_list": 23, "flat_list": 23, "hierarchi": [23, 538, 568, 575, 585], "cont_handle_inplac": 23, "prime": 23, "being": [23, 44, 45, 50, 51, 73, 252, 275, 302, 359, 363, 364, 367, 404, 512, 515, 529, 532, 533, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 556, 558, 559, 560, 561, 563, 565, 568, 572, 573, 575, 577, 578, 579, 580, 585, 586], "overwritten": [23, 543, 544], "cont_has_kei": 23, "query_kei": 23, "somewher": [23, 547], "cont_has_key_chain": 23, "cont_ident": [23, 568], "cont_identical_array_shap": 23, "regardless": [23, 533, 534, 548, 567, 570], "cont_identical_config": 23, "cont_identical_structur": 23, "cont_if_exist": 23, "cont_inplace_upd": 23, "cont_ivi": 23, "cont_key_chains_contain": 23, "sub_str": 23, "cont_list_stack": [23, 568], "cont_map": [23, 546, 568], "func": [23, 168, 252, 324, 344, 345, 347, 354, 361, 363, 364, 365, 371, 469, 515, 538, 542, 543, 550, 552, 557, 558], "cont_map_sub_cont": 23, "include_self": 23, "possibi": 23, "cont_max_depth": 23, "cont_multi_map": [23, 546], "map_nest": 23, "assert_ident": 23, "leftmost": [23, 371, 469], "cont_multi_map_in_funct": [23, 546], "fn": [23, 26, 76, 77, 78, 122, 123, 156, 157, 248, 263, 264, 316, 359, 360, 361, 363, 364, 371, 462, 463, 464, 466, 467, 468, 513, 515, 523, 526, 527, 552, 559, 565], "cont_num_arrai": 23, "cont_overwrite_at_key_chain": 23, "target_dict": 23, "return_dict": 23, "cont_prune_empti": 23, "keep_non": 23, "cont_prune_key_chain": 23, "key1": [23, 529, 569], "key2": [23, 529], "key3": 23, "cont_prune_key_from_key_chain": 23, "certain": [23, 73, 86, 87, 359, 529, 539, 540, 542, 548, 555, 561, 563, 573, 583], "decid": [23, 371, 456, 457, 466, 467, 468, 529, 538, 539, 548, 563], "cont_prune_kei": 23, "cont_prune_keys_from_key_chain": 23, "cont_reduc": 23, "cont_remove_key_length_limit": 23, "cont_remove_print_limit": 23, "cont_reshape_lik": 23, "leading_shap": 23, "cont_restructur": 23, "keep_orig": 23, "old": [23, 539, 544, 558], "cont_restructure_key_chain": 23, "keychain_map": 23, "cont_set_at_key_chain": 23, "cont_set_at_kei": 23, "cont_shap": [23, 366, 387], "attribut": [23, 121, 122, 123, 124, 156, 157, 164, 263, 264, 360, 361, 363, 364, 516, 545, 546, 548, 551, 556, 558, 559, 566, 567, 568, 569], "cont_show": 23, "cont_show_sub_contain": 23, "sub_cont_or_keychain": 23, "cont_size_ordered_arrai": 23, "keychain": [23, 29], "cont_slice_kei": 23, "all_depth": 23, "cont_slice_via_kei": 23, "slice_kei": 23, "cont_sort_by_kei": 23, "cont_structural_diff": 23, "cont_to_dict": 23, "cont_to_disk_as_hdf5": [23, 568], "starting_index": 23, "max_batch_s": 23, "later": [23, 252, 364, 538, 561, 579], "cont_to_disk_as_json": [23, 568], "cont_to_disk_as_pickl": [23, 568], "cont_to_flat_list": 23, "cont_to_iter": [23, 546], "leaf_keys_onli": 23, "cont_to_iterator_kei": 23, "cont_to_iterator_valu": 23, "cont_to_json": 23, "cont_to_nested_list": 23, "cont_to_raw": 23, "raw": [23, 529, 551, 580], "cont_trim_kei": 23, "max_length": 23, "trim": 23, "cont_try_kc": 23, "tri": [23, 516], "cont_unifi": 23, "unifi": [23, 168, 361, 529, 530, 532, 541, 542, 543, 548, 552, 557, 559, 563, 565, 573, 575, 576, 577, 579, 583, 586], "concatten": [23, 168, 361], "cont_unstack_cont": 23, "dim_siz": 23, "cont_update_config": 23, "cont_with_default_key_color": 23, "cont_with_entries_as_list": 23, "cont_with_ivy_backend": 23, "ivy_backend": 23, "cont_with_key_length_limit": [23, 568], "cont_with_print_ind": [23, 568], "cont_with_print_limit": [23, 568], "cont_with_print_line_spac": 23, "h5_file_s": 23, "shuffle_h5_fil": 23, "seed_valu": [23, 373, 484], "dataset": [23, 529, 568, 571], "split_cont": 23, "constitu": [23, 570], "_is_json": 23, "_repr": 23, "_containerwithconvers": [24, 46], "_static_to_ivi": 24, "_static_to_n": 24, "_containerwithcr": [25, 46], "_static_arang": 25, "_static_asarrai": 25, "_static_empty_lik": 25, "_static_ey": 25, "n_row": [25, 29, 82, 359, 363], "n_col": [25, 29, 82, 359, 363], "_static_from_dlpack": 25, "_static_full_lik": 25, "static_full_lik": 25, "2324": [25, 85, 359], "234": [25, 28, 85, 195, 237, 359, 362, 366, 393], "123": [25, 26, 85, 124, 261, 359, 364, 561], "_static_linspac": 25, "_static_logspac": 25, "static_logspac": 25, "15443469": [25, 87], "64158883": [25, 87], "_static_meshgrid": 25, "_static_native_arrai": 25, "_static_one_hot": 25, "static_one_hot": 25, "_static_on": 25, "_static_ones_lik": 25, "_static_tril": 25, "_static_triu": 25, "_static_zero": 25, "_static_zeros_lik": 25, "5443469": [25, 87, 359], "_containerwithdatatyp": [26, 46], "_static_astyp": 26, "718": [26, 28, 108, 216, 360], "618": [26, 28, 108, 216, 360], "static_astyp": 26, "_static_broadcast_arrai": 26, "And": [26, 529, 545, 561], "static_broadcast_arrai": 26, "_static_broadcast_to": 26, "static_broadcast_to": 26, "_static_can_cast": 26, "from_": [26, 111, 360], "static_can_cast": 26, "_static_default_complex_dtyp": 26, "complex_dtyp": [26, 114, 135, 360], "_static_default_float_dtyp": 26, "float_dtyp": [26, 116, 137, 360], "_static_dtyp": 26, "_static_finfo": 26, "inquir": [26, 121, 124], "static_finfo": 26, "55040e": [26, 121, 360], "7976931348623157e": [26, 121, 360], "308": [26, 121, 360, 561], "_static_function_supported_dtyp": 26, "_static_function_unsupported_dtyp": 26, "_static_iinfo": 26, "1800": [26, 124, 360], "1084": 26, "40000": 26, "static_iinfo": 26, "2147483648": [26, 124, 360], "2147483647": [26, 124, 360], "_static_is_bool_dtyp": 26, "dtype_in": [26, 106, 107, 120, 126, 127, 128, 129, 130, 131, 146, 360, 363], "_static_is_complex_dtyp": 26, "is_complex_dtyp": [26, 360], "roughli": [26, 539, 542, 582], "static_is_complex_dtyp": 26, "complex64": [26, 114, 128, 135, 141, 360], "_static_is_float_dtyp": 26, "static_is_float_dtyp": 26, "_static_is_int_dtyp": 26, "_static_is_uint_dtyp": 26, "_static_result_typ": 26, "static_result_typ": 26, "broadcats": [26, 109], "_containerwithdevic": [27, 46], "_static_dev": 27, "static_dev": 27, "_static_to_devic": 27, "static_to_devic": 27, "contaion": [27, 154], "_containerwithelementwis": [28, 46], "_static_ab": 28, "static_ab": 28, "_static_aco": 28, "static_aco": 28, "_static_acosh": 28, "static_acosh": 28, "_static_add": 28, "static_add": [28, 546, 550, 551], "_static_asin": 28, "static_asin": 28, "524": [28, 178, 362], "412": [28, 33, 178, 362], "201": [28, 29, 178, 362], "_static_asinh": 28, "static_asinh": 28, "_static_atan": 28, "static_atan": 28, "_static_atan2": 28, "static_atan2": 28, "915": [28, 181, 362], "29": [28, 30, 31, 38, 181, 258, 259, 344, 348, 362, 364, 365, 481, 482, 483], "983": [28, 181, 362], "978": [28, 65, 181, 356, 362], "696": [28, 38, 181, 362, 482], "993": [28, 181, 362], "_static_atanh": 28, "static_atanh": 28, "203": [28, 37, 182, 372, 475], "_static_bitwise_and": 28, "static_bitwise_and": 28, "_static_bitwise_invert": 28, "static_bitwise_invert": 28, "_static_bitwise_left_shift": 28, "_static_bitwise_or": 28, "static_bitwise_or": 28, "_static_bitwise_right_shift": 28, "static_bitwise_right_shift": 28, "_static_bitwise_xor": 28, "static_bitwise_xor": 28, "_static_ceil": 28, "static_ceil": 28, "_static_co": 28, "static_co": 28, "_static_cosh": 28, "static_cosh": 28, "34": [28, 29, 30, 38, 124, 188, 191, 213, 231, 252, 258, 259, 360, 362, 364, 367, 373, 410, 482, 483], "_static_deg2rad": 28, "static_deg2rad": 28, "0262": [28, 192, 225, 362], "873": [28, 192, 225, 362], "_static_divid": 28, "static_divid": 28, "_static_equ": 28, "static_equ": 28, "_static_erf": 28, "static_erf": 28, "27632612": [28, 195], "934008": [28, 195], "99999928": [28, 195], "91903949": [28, 195], "_static_exp": 28, "static_exp": 28, "59814835": [28, 196], "4131622": [28, 196], "_static_expm1": 28, "thefunct": [28, 195], "areal": 28, "static_expm1": 28, "71828175": 28, "38905621": 28, "59815216": 28, "_static_floor": 28, "static_floor": 28, "_static_floor_divid": 28, "static_floor_divid": 28, "_static_great": 28, "static_great": 28, "_static_greater_equ": 28, "static_greater_equ": 28, "_static_isfinit": 28, "999999999999": [28, 203, 362], "static_isfinit": 28, "_static_isinf": 28, "static_isinf": 28, "_static_isnan": 28, "static_isnan": 28, "_static_isr": 28, "0j": [28, 29, 206, 362, 363], "23j": [28, 29], "9j": [28, 29], "static_isr": 28, "_static_less": 28, "static_less": 28, "_static_less_equ": 28, "static_less_equ": 28, "_static_log": 28, "static_log": 28, "_static_log10": 28, "static_log10": 28, "898": [28, 210, 362], "0414": [28, 210, 362], "_static_log1p": 28, "static_log1p": 28, "_static_log2": 28, "_static_logaddexp": 28, "static_logaddexp": 28, "_static_logical_and": 28, "static_logical_and": 28, "_static_logical_not": 28, "static_logical_not": 28, "_static_logical_or": 28, "static_logical_or": 28, "_static_logical_xor": 28, "static_logical_xor": 28, "_static_maximum": 28, "static_maximum": 28, "_static_minimum": 28, "static_minimum": 28, "_static_multipli": 28, "static_multipli": 28, "_static_neg": 28, "static_neg": 28, "_static_not_equ": 28, "static_not_equ": 28, "_static_posit": 28, "static_posit": 28, "_static_pow": 28, "static_pow": 28, "_static_rad2deg": 28, "static_rad2deg": 28, "5160": 28, "10300": [28, 225, 362], "15500": 28, "20600": 28, "2860": [28, 225], "_static_reciproc": 28, "recirpoc": [28, 226], "static_reciproc": 28, "_static_remaind": 28, "static_remaind": 28, "_static_round": 28, "thevfunct": 28, "300": [28, 30, 228, 266, 296, 362, 363, 364, 367, 406, 561], "527": [28, 228, 362], "static_round": 28, "301": [28, 228, 362], "_static_sign": 28, "static_sign": 28, "_static_sin": 28, "static_sin": 28, "757": [28, 230, 362], "959": [28, 197, 230, 362], "279": [28, 230, 253, 362, 363, 364], "_static_sinh": 28, "static_sinh": 28, "835": [28, 231], "347": [28, 231, 552], "721": [28, 231], "_static_sqrt": 28, "93": [28, 30, 38, 155, 232, 258, 259, 361, 364, 482, 483], "static_sqrt": 28, "_static_squar": 28, "static_squar": 28, "_static_subtract": 28, "static_subtract": 28, "_static_tan": 28, "static_tan": [28, 546, 550], "143": [28, 46, 235, 362, 550], "_static_tanh": 28, "static_tanh": 28, "995": [28, 236, 362], "9999": 28, "_static_trapz": 28, "static_trapz": 28, "_static_trunc": 28, "static_trunc": 28, "_static_trunc_divid": 28, "644": [28, 178, 362, 569], "305": [28, 29, 33, 178, 362, 363, 393], "351": [28, 192, 225, 362], "00613": [28, 192], "0154": [28, 192], "403": [28, 196], "428772": [28, 196], "649": [28, 197], "220": [28, 197], "865": [28, 197], "metho": [28, 202, 212], "7j": [28, 29, 206, 362, 363], "956": [28, 211], "nuner": [28, 220], "65": [28, 31, 38, 187, 220, 281, 342, 362, 363, 364, 365, 367, 377, 413, 482, 483, 501], "413": [28, 225, 552], "_containerwithactivationexperiment": [29, 46], "contan": 29, "19722462": 29, "84729779": 29, "31326163": 29, "46328258": 29, "51301527": 29, "79813886": 29, "22856998": 29, "42028043": 29, "31868932": 29, "static_batch_norm": 29, "static_logit": 29, "static_logsigmoid": 29, "34115386": 29, "64439666": 29, "24115384": 29, "55435526": 29, "07888974": 29, "00741899": 29, "26328245": 29, "00012302": 29, "static_prelu": 29, "static_relu6": 29, "static_selu": 29, "static_thresholded_relu": 29, "_containerwithconversionexperiment": [29, 46], "_containerwithcreationexperiment": [29, 46], "hamming_window": [29, 363], "period": [29, 363, 540, 562], "coeffici": [29, 363, 367, 417], "ham": [29, 363], "8000": [29, 363], "2000": [29, 363], "4180": 29, "8180": 29, "hann_window": [29, 363], "hann": [29, 363], "7500": 29, "3455": 29, "9045": 29, "kaiser_bessel_derived_window": [29, 363], "suitabl": [29, 363, 376, 496, 539, 540, 546, 562, 579], "spectral": [29, 363], "analysi": [29, 363, 579, 580], "design": [29, 363, 529, 531, 532, 541, 545, 547, 548, 558, 559, 560, 563, 565, 567, 573, 575, 577, 579, 582, 583, 584], "kaiser": [29, 363], "70710677": [29, 363], "18493208": [29, 363], "9827513": [29, 363], "kaiser_window": [29, 363], "static_kaiser_window": 29, "2049": 29, "8712": 29, "0367": [29, 363], "7753": 29, "static_eye_lik": 29, "static_hamming_window": 29, "static_hann_window": 29, "window_length": [29, 363], "static_hann": 29, "static_kaiser_bessel_derived_window": 29, "static_tril_indic": 29, "static_triu_indic": 29, "static_vorbis_window": 29, "vorbis_window": [29, 363], "vorbi": [29, 363], "38268343": 29, "92387953": 29, "14943586": [29, 363], "51644717": 29, "85631905": 29, "98877142": 29, "tril_indic": [29, 363], "triu_indic": [29, 363], "_containerwithdata_typeexperiment": [29, 46], "_containerwithdeviceexperiment": [29, 46], "_containerwithelementwiseexperiment": [29, 46], "0003": [29, 367, 406], "0006": 29, "75j": 29, "01317055": 29, "05634501": 29, "115": [29, 192, 225, 362, 363], "3461759": 29, "524111": 29, "335": 29, "345j": 29, "2345j": 29, "mantissa": [29, 363], "frist": [29, 363], "coord": 29, "6055": 29, "1080": 29, "1550": 29, "130": 29, "160": 29, "10240": 29, "08746284": 29, "32192809": 29, "000": 29, "took": 29, "0707": [29, 363], "0579": [29, 363], "static_allclos": 29, "static_angl": 29, "static_binar": 29, "static_conj": 29, "static_copysign": 29, "static_count_nonzero": 29, "static_diff": 29, "static_exp2": 29, "static_fix": 29, "static_float_pow": 29, "static_fmax": 29, "static_fmin": 29, "static_fmod": 29, "static_frexp": 29, "static_gcd": 29, "static_gradi": 29, "static_hypot": 29, "static_imag": 29, "static_isclos": 29, "static_lcm": 29, "static_ldexp": 29, "static_logaddexp2": 29, "static_nan_to_num": 29, "static_nansum": 29, "static_nextaft": 29, "static_r": 29, "static_signbit": 29, "static_sinc": 29, "636": 29, "090": 29, "070": 29, "057": 29, "static_xlogi": 29, "static_zeta": 29, "0244": 29, "_containerwithgeneralexperiment": [29, 46], "static_isin": 29, "_containerwithgradientsexperiment": [29, 46], "_containerwithimageexperiment": [29, 46], "_containerwithlayersexperiment": [29, 46], "673": 29, "0507": 29, "static_adaptive_avg_pool1d": 29, "static_adaptive_avg_pool2d": 29, "static_avg_pool1d": 29, "static_avg_pool2d": 29, "static_avg_pool3d": 29, "static_dct": 29, "132": 29, "182": 29, "242": 29, "253": [29, 231, 362], "515": [29, 373, 482], "467": 29, "static_dft": 29, "static_embed": 29, "static_fft": 29, "static_ifft": 29, "static_interpol": 29, "static_max_pool1d": 29, "static_max_pool2d": 29, "max_pool2dd": 29, "static_max_pool3d": 29, "_containerwithlinearalgebraexperiment": [29, 46], "933034": [29, 363], "eigenvealu": [29, 402], "xx": [29, 402], "37228107": [29, 402], "3722816": [29, 402], "8245648": [29, 402], "41597357": [29, 402], "56576747": [29, 402], "9093767": [29, 402], "56155": [29, 363], "82842": [29, 363], "450": 29, "static_adjoint": 29, "static_cond": 29, "static_diagflat": 29, "static_eig": 29, "static_eigh_tridiagon": 29, "static_eigv": 29, "static_kron": 29, "kroneck": [29, 363], "static_matrix_exp": 29, "static_multi_dot": 29, "regular": [29, 363, 367, 407, 539, 540, 559, 579], "_containerwithlossesexperiment": [29, 46], "binary_cross_entropy_with_logit": [29, 363, 547], "pos_weight": [29, 363], "027": [29, 363], "263": [29, 254, 363, 364], "953": [29, 363], "static_binary_cross_entropy_with_logit": 29, "_containerwithmanipulationexperiment": [29, 46], "atleast": [29, 363], "ary1": [29, 363], "ary2": [29, 363], "3d": [29, 52, 363, 555, 563, 572], "broadcast_shap": [29, 363], "30192195": 29, "static_atleast_1d": 29, "static_atleast_2d": 29, "static_atleast_3d": 29, "static_broadcast_shap": 29, "static_dsplit": 29, "static_dstack": 29, "static_expand": 29, "static_flatten": 29, "static_fliplr": 29, "static_flipud": 29, "static_heavisid": 29, "static_hsplit": 29, "static_hstack": 29, "static_i0": 29, "static_moveaxi": 29, "static_pad": 29, "static_rot90": 29, "static_take_along_axi": 29, "static_top_k": 29, "static_vsplit": 29, "static_vstack": 29, "_containerwithnormsexperiment": [29, 46], "static_instance_norm": 29, "68283635": 29, "25858182": 29, "14645457": 29, "20709086": 29, "59998751": 29, "10000312": 29, "20000625": 29, "19997501": 29, "25000787": 29, "49996877": 29, "35001087": 29, "09995651": 29, "30002821": 29, "79988766": 29, "17999999": 29, "46000001": 29, "45999998": 29, "static_l2_norm": 29, "16903085": 29, "50709254": 29, "84515423": 29, "44183609": 29, "56807494": 29, "69431382": 29, "89442718": 29, "44721359": 29, "static_lp_norm": 29, "12500000": 29, "37500000": 29, "62500000": 29, "27500000": 29, "35000000": 29, "42500000": 29, "0000000": 29, "5000000": 29, "2500000": 29, "_containerwithrandomexperiment": [29, 46], "43643127": 29, "32325703": 29, "24031169": 29, "34251311": 29, "31692529": 29, "3405616": 29, "5319725": 29, "22458365": 29, "24344385": 29, "26588406": 29, "61075421": 29, "12336174": 29, "51142915": 29, "25041268": 29, "23815817": 29, "64042903": 29, "25763214": 29, "10193883": 29, "31624692": 29, "46567987": 29, "21807321": 29, "37677699": 29, "39914594": 29, "22407707": 29, "static_bernoulli": 29, "static_beta": 29, "static_dirichlet": 29, "static_poisson": 29, "_containerwithsearchingexperiment": [29, 46], "static_unravel_index": 29, "_containerwithsetexperiment": [29, 46], "_containerwithsortingexperiment": [29, 46], "static_lexsort": 29, "static_msort": 29, "_containerwithstatisticalexperiment": [29, 46], "static_bincount": 29, "static_corrcoef": 29, "static_median": 29, "static_nanmean": 29, "static_nanmedian": 29, "static_quantil": 29, "_containerwithutilityexperiment": [29, 46], "_containerwithgener": [30, 46], "_static_all_equ": 30, "static_all_equ": 30, "_static_array_equ": 30, "x0": [30, 250, 364, 550], "level": [30, 50, 250, 529, 533, 534, 538, 540, 546, 552, 555, 557, 559, 563, 564, 565, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586], "a0": [30, 250], "static_array_equ": 30, "_static_assert_supports_inplac": 30, "_static_clip_matrix_norm": 30, "static_clip_matrix_norm": 30, "849": [30, 253, 254, 364], "_static_clip_vector_norm": 30, "static_clip_vector_norm": 30, "_static_einops_rearrang": 30, "static_einops_rearrang": 30, "_static_einops_reduc": 30, "static_einops_reduc": 30, "29333329": [30, 259, 364], "53000069": [30, 259, 364], "39666676": [30, 259, 364], "20666695": [30, 259, 364], "_static_einops_repeat": 30, "static_einops_repeat": 30, "_static_fourier_encod": 30, "static_fourier_encod": 30, "classivi": [30, 36, 262, 369, 375, 441, 445, 492], "89858720e": [30, 262], "79717439e": [30, 262], "_static_gath": 30, "static_gath": 30, "_static_gather_nd": 30, "200": [30, 187, 266, 296, 362, 363, 364, 568], "400": [30, 266, 296, 363, 364, 367, 406, 547], "500": [30, 266, 363, 364], "static_gather_nd": 30, "_static_get_num_dim": 30, "static_get_num_dim": 30, "_static_has_nan": 30, "well": [30, 279, 364, 367, 417, 529, 536, 540, 545, 547, 548, 552, 558, 559, 560, 561, 569, 570, 572, 578, 579, 580, 584], "leafwis": 30, "static_has_nan": 30, "_static_inplace_decr": 30, "_static_inplace_incr": 30, "_static_inplace_upd": 30, "_static_is_arrai": 30, "static_is_arrai": 30, "_static_is_ivy_arrai": 30, "static_is_ivy_arrai": 30, "_static_is_native_arrai": 30, "static_is_native_arrai": 30, "_static_scatter_flat": 30, "ref": [30, 34, 207, 220, 222, 227, 234, 362, 369, 443, 551], "_static_scatter_nd": 30, "70": [30, 266, 296, 363, 367, 377, 413, 501, 532], "static_scatter_nd": 30, "_static_stable_divid": 30, "22222222": 30, "11111111": 30, "857": [30, 308, 364], "444": 30, "_static_stable_pow": 30, "_static_supports_inplace_upd": 30, "_static_to_list": 30, "static_to_list": 30, "_static_to_numpi": 30, "static_to_numpi": 30, "_static_to_scalar": 30, "static_to_scalar": 30, "_static_value_is_nan": 30, "452": 30, "static_value_is_nan": 30, "833": [30, 254], "600": [30, 266, 363, 547], "700": [30, 266], "425": [30, 323], "_containerwithgradi": [31, 46], "_static_stop_gradi": 31, "static_stop_gradi": 31, "87": [31, 187, 211, 342, 362, 365], "976": [31, 236, 342, 362, 365], "49e": [31, 342, 365], "74e": [31, 342, 365], "95e": [31, 342, 365], "024": [31, 342, 363, 365], "096": [31, 192, 342, 362, 365], "216": [31, 34, 342, 365, 423], "384": [31, 342, 365], "626": [31, 342, 365], "en": [31, 342, 343, 365, 367, 426, 547], "wikipedia": [31, 342, 343, 365, 367, 426], "wiki": [31, 342, 343, 365, 367, 426], "stochastic_gradient_desc": [31, 342, 343, 365], "01099": [31, 343], "01003": [31, 343, 365], "01015": [31, 343, 365], "99936122": [31, 343, 365], "99936116": [31, 343, 365], "99936128": [31, 343, 365], "99936104": [31, 343, 365], "w_new": [31, 346, 365], "88": [31, 38, 61, 188, 346, 356, 362, 365, 367, 373, 377, 413, 419, 483, 501], "708": [31, 348, 365], "445": [31, 348, 365], "6e": [31, 348, 365], "00036": [31, 348, 365], "00016": [31, 348, 365], "00049": [31, 348, 365], "layerwis": [31, 349, 365], "_containerwithimag": [32, 46], "_containerwithlay": [33, 46], "_static_conv1d": 33, "static_conv1d": 33, "_static_conv1d_transpos": 33, "static_conv1d_transpos": 33, "112": [33, 367, 377, 384, 413, 501], "_static_conv2d": 33, "static_conv2d": 33, "_static_conv2d_transpos": 33, "static_conv2d_transpos": 33, "_static_conv3d": 33, "fdfh": [33, 387], "static_conv3d": 33, "_static_conv3d_transpos": 33, "static_conv3d_transpos": 33, "_static_depthwise_conv2d": 33, "inp": [33, 366, 391], "static_depthwise_conv2d": 33, "_static_dropout": 33, "static_dropout": 33, "_static_dropout1d": 33, "static_dropout1d": 33, "_static_dropout3d": 33, "_static_linear": 33, "278": [33, 366, 392, 393], "105": [33, 366, 367, 368, 392, 393, 413, 428], "static_linear": 33, "352": [33, 366, 393], "195": [33, 393], "_static_lstm_upd": 33, "_static_multi_head_attent": 33, "_static_scaled_dot_product_attent": 33, "static_scaled_dot_product_attent": 33, "_containerwithlinearalgebra": [34, 46], "_static_choleski": 34, "static_choleski": 34, "577": [34, 367, 397], "707": [34, 367, 397], "static_rol": [34, 36, 546, 550], "_static_cross": 34, "static_cross": 34, "_static_det": 34, "_static_diag": 34, "_static_diagon": 34, "static_diagon": 34, "_static_eigh": 34, "_static_eigvalsh": 34, "static_eigvalsh": 34, "51572949": [34, 367, 404], "17091519": [34, 367, 404], "3448143": [34, 367, 404], "88178420e": [34, 367, 404], "35898387e": [34, 367, 404], "46410179e": [34, 367, 404], "_static_inn": 34, "_static_inv": 34, "static_inv": [34, 367, 406], "_static_matmul": 34, "matul": 34, "static_matmul": 34, "_static_matrix_norm": 34, "deimens": 34, "static_matrix_norm": 34, "_static_matrix_pow": 34, "_static_matrix_rank": 34, "static_matrix_rank": 34, "_static_matrix_transpos": 34, "static_matrix_transpos": 34, "_static_out": 34, "n1": [34, 88, 359], "n2": [34, 88, 359], "static_out": [34, 413], "_static_pinv": 34, "static_pinv": 34, "_static_qr": 34, "_static_slogdet": 34, "static_slogdet": 34, "0986123": [34, 367, 416], "_static_solv": 34, "_static_svd": 34, "static_svd": 34, "au": [34, 418], "aS": [34, 418], "avh": [34, 418], "bu": [34, 418, 532], "bvh": [34, 418], "_static_svdv": 34, "_static_tensordot": 34, "_static_tensorsolv": 34, "_static_trac": 34, "static_trac": 34, "_static_vand": 34, "static_vand": 34, "343": [34, 228, 362, 423], "512": [34, 366, 384, 423, 529], "729": [34, 423, 569], "_static_vecdot": 34, "_static_vector_norm": 34, "static_vector_norm": 34, "77359247": [34, 425], "_static_vector_to_skew_symmetric_matrix": 34, "99999988": [34, 414], "_containerwithloss": [35, 46], "_static_binary_cross_entropi": 35, "static_binary_cross_entropi": 35, "511": [35, 368, 428, 430], "_static_cross_entropi": 35, "static_cross_entropi": 35, "20397282": 35, "83258148": 35, "60943794": 35, "_static_sparse_cross_entropi": 35, "static_sparse_cross_entropi": 35, "5108256": [35, 429], "609438": [35, 367, 416, 429], "_containerwithmanipul": [36, 46], "_static_clip": 36, "static_clip": 36, "_static_concat": 36, "_static_constant_pad": 36, "static_constant_pad": 36, "_static_expand_dim": 36, "static_expand_dim": 36, "container_axi": [36, 369, 435], "_static_flip": 36, "static_flip": 36, "_static_permute_dim": 36, "static_permute_dim": 36, "_static_repeat": 36, "static_repeat": 36, "_static_reshap": 36, "static_reshap": 36, "_static_rol": 36, "positivclip": 36, "_static_split": 36, "static_split": 36, "_static_squeez": 36, "static_squeez": 36, "_static_stack": 36, "leavv": 36, "static_stack": 36, "_static_swapax": 36, "_static_til": 36, "static_til": 36, "_static_unstack": 36, "static_unstack": 36, "_static_zero_pad": 36, "repreat": [36, 438], "_containerwithnorm": [37, 46], "342": [37, 372, 475], "0427": [37, 372, 475], "299": [37, 372, 475], "241": [37, 475], "_containerwithrandom": [38, 46], "_static_multinomi": 38, "_static_randint": 38, "static_randint": 38, "_static_random_norm": 38, "static_random_norm": 38, "651": 38, "_static_random_uniform": 38, "static_random_uniform": 38, "481": 38, "0999": 38, "_static_shuffl": 38, "static_shuffl": 38, "431": [38, 482], "83": [38, 232, 362, 363, 366, 393, 482], "274": [38, 482], "91": [38, 188, 362, 366, 367, 373, 377, 393, 413, 482, 501], "_containerwithsearch": [39, 46], "_static_argmax": 39, "static_argmax": 39, "_static_argmin": 39, "static_argmin": 39, "_static_argwher": 39, "static_argwher": 39, "_static_nonzero": 39, "_static_wher": 39, "static_wher": 39, "_containerwithset": [40, 46], "_static_unique_al": 40, "static_unique_al": [40, 491], "_static_unique_count": 40, "static_unique_count": 40, "_static_unique_invers": 40, "static_unique_invers": 40, "_static_unique_valu": 40, "them": [40, 252, 294, 364, 494, 529, 530, 531, 532, 533, 536, 538, 540, 542, 543, 544, 545, 546, 547, 552, 556, 558, 559, 560, 561, 565, 567, 568, 569, 573, 574, 576, 577, 579, 581, 585], "_containerwithsort": [41, 46], "_static_argsort": 41, "static_argsort": 41, "_static_searchsort": 41, "_static_sort": 41, "static_sort": 41, "_containerwithstatist": [42, 46], "_static_cumprod": 42, "static_cumprod": 42, "_static_cumsum": 42, "static_cumsum": 42, "_static_prod": 42, "static_prod": 42, "11000001": [42, 505], "23100001": [42, 505], "30800003": [42, 377, 505], "_static_sum": 42, "_static_var": 42, "static_var": 42, "12666667": [42, 377, 508], "11555555": [42, 377, 508], "60000002": [42, 46, 503], "respectv": [42, 506], "81649649": [42, 506], "94280904": [42, 506], "509902": [42, 377, 506], "2472192": [42, 506], "44948983": [42, 506], "41421354": [42, 506], "contian": [42, 508], "6666667": [42, 508], "_containerwithutil": [43, 46], "_static_al": 43, "static_al": 43, "_static_ani": 43, "static_ani": 43, "add_ivy_container_instance_method": 44, "containerexampl": 44, "__abs__": [45, 46], "__add__": [45, 46, 543, 546, 550, 551, 554, 559, 560, 567], "__eq__": [45, 46], "__ge__": [45, 46], "__gt__": [45, 46, 563], "__le__": [45, 46], "__lt__": [45, 46], "__ne__": [45, 46], "__pow__": [45, 46, 567], "69678056": 45, "59876156": 45, "82660675": 45, "__radd__": [45, 46, 550, 551, 559], "__rrshift__": [45, 46], "__rshift__": [45, 46], "__rsub__": [45, 46], "__sub__": [45, 46, 543, 546, 550, 554, 567], "__truediv__": [45, 46, 543, 546, 550], "__xor__": [45, 46], "hardwar": [45, 512, 532, 539, 563, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585], "resid": [45, 369, 435, 512, 545, 559, 565, 569], "mt": [45, 567], "hopefulli": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 531, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572], "overview": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 545, 547, 561, 564, 572], "submodul": [45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 538, 539, 540, 542, 545, 547, 549, 555, 556, 561, 564, 565, 569, 574], "question": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 531, 532, 533, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "pleas": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 531, 532, 533, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "feel": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "free": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "reach": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 468, 531, 532, 533, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "discord": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 529, 531, 532, 533, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "forum": [45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "eq": 46, "insid": [46, 363, 516, 539, 540, 543, 546, 548, 556, 561, 562, 585], "ge": 46, "gt": [46, 560, 565], "le": 46, "lt": 46, "ne": 46, "75979435": 46, "52153397": 46, "13532257": 46, "rshift": 46, "truediv": 46, "66666669": [46, 344, 365], "neural": [48, 52, 366, 529, 572, 575, 577, 578, 579, 583, 585, 586], "network": [48, 50, 51, 52, 53, 366, 393, 529, 532, 546, 555, 565, 569, 572, 575, 577, 578, 579, 583, 585, 586], "geglu": 48, "moduleconvert": [49, 53], "from_haiku_modul": 49, "native_modul": 49, "params_hk": 49, "rng_seed": 49, "constructor_arg": 49, "constructor_kwarg": 49, "instance_arg": 49, "instance_kwarg": 49, "haiku": [49, 529, 533, 570, 579], "trainabl": [49, 53, 56, 529, 551, 566, 568, 569], "from_keras_modul": 49, "kera": [49, 529, 533, 585], "from_torch_modul": 49, "dedic": [49, 554, 567, 569], "to_ivy_modul": [49, 570], "native_module_class": 49, "modulehelp": [50, 53], "check_submod_ret": 50, "user": [50, 52, 53, 58, 60, 356, 363, 529, 531, 532, 535, 539, 540, 541, 543, 544, 546, 547, 548, 552, 556, 557, 558, 559, 561, 563, 564, 565, 573, 577, 579, 585, 586], "expected_submod_ret": [50, 53], "get_mod_kei": 50, "top_mod": 50, "explicit": [50, 539, 546, 548, 557, 558, 559, 560, 565, 573, 579], "mod_depth": 50, "mod_height": 50, "mod_with_top_mod_key_chain": 50, "flatten_key_chain": 50, "end": [50, 73, 181, 359, 362, 363, 529, 539, 540, 544, 547, 558, 562, 563, 564, 572, 573, 577, 582], "iimedi": 50, "parent": [50, 355, 365, 538, 547, 567], "show_mod_in_top_mod": 50, "upper_depth": 50, "lower_depth": 50, "show": [50, 277, 298, 304, 322, 364, 529, 538, 539, 540, 547, 550, 558, 559, 561, 572, 573, 579], "coverag": [50, 548, 561], "prompt": [50, 540], "show_structur": 50, "this_repr": 50, "show_v_in_top_v": 50, "perspect": 50, "top_v": 50, "sub_mod": 50, "show_v": 50, "comopos": 50, "begin": [50, 363, 371, 456, 467, 539, 542, 560], "enumer": [50, 529], "track_submod_call_ord": [50, 53], "track_submod_ret": [50, 53], "v_with_top_v_key_chain": 50, "create_vari": [51, 569], "var_shap": [51, 569], "fan_out": [51, 569], "fan_in": [51, 569], "rectangular": 51, "firstlayersiren": 51, "siren": 51, "distribt": 51, "glorotuniform": [51, 52, 569], "glorot": 51, "known": [51, 542, 547, 548, 559, 561], "xavier": 51, "neuron": 51, "w_1x_1": 51, "w_2x_2": 51, "w_nx_n": 51, "w_i": 51, "To": [51, 302, 364, 535, 539, 542, 543, 545, 546, 548, 550, 552, 553, 555, 559, 560, 561, 562, 568, 569, 570], "vanish": 51, "too": [51, 177, 362, 538, 539, 540, 542, 548, 552, 553, 573], "explod": [51, 530, 531], "big": [51, 534, 573, 579], "pick": 51, "carefulli": [51, 559, 577, 582], "abstract": [51, 55, 361, 531, 546, 548, 559, 561, 563, 569, 573, 577, 579, 581, 582, 586], "kaimingnorm": 51, "fan_mod": [51, 569], "kaim": 51, "he": 51, "distibut": 51, "center": 51, "negative_slop": 51, "fan": 51, "propog": 51, "fan_sum": [51, 569], "much": [51, 363, 532, 538, 539, 540, 543, 546, 548, 558, 559, 560, 562, 565, 567, 568, 577, 579, 585, 586], "proport": 51, "Ones": 51, "init": [51, 529, 542, 570], "w0": 51, "gain": [51, 540, 542, 564, 569, 579], "wlim": 51, "help": [51, 248, 364, 377, 507, 529, 534, 535, 536, 538, 539, 543, 544, 546, 547, 548, 550, 556, 559, 561, 562, 563, 567, 568, 569, 571, 574, 575, 579, 581, 585], "issu": [51, 533, 534, 537, 538, 539, 542, 544, 547, 548, 550, 552, 559, 561, 562, 565, 569, 573], "intend": [51, 377, 507, 516, 542, 554, 557, 577, 579, 583, 584], "predefin": 51, "initialz": 51, "fan_avg": 51, "input_channel": [52, 529, 565, 569], "output_channel": [52, 529, 569], "filter_s": 52, "weight_initi": [52, 569], "bias_initi": [52, 569], "construct": [52, 54, 55, 56, 369, 445, 565, 569, 570, 577, 579, 586], "conv1dtranspos": 52, "filter_shap": 52, "conv2dtranspos": 52, "conv3dtranspos": 52, "depthwiseconv2d": 52, "num_channel": 52, "depthwis": [52, 366, 391], "randomli": [52, 363, 366, 392, 520], "bernoul": 52, "lstm": [52, 366, 394, 565, 579], "num_lay": 52, "return_sequ": 52, "return_st": 52, "get_initial_st": 52, "explicitli": [52, 53, 367, 403, 404, 515, 542, 543, 544, 546, 548, 551, 552, 555, 556, 557, 558, 560, 561, 565, 573, 579], "with_bia": [52, 529, 569], "dens": [52, 529], "connect": [52, 532, 539, 569, 570, 577], "receiv": [52, 249, 291, 364, 370, 453, 454, 540, 548, 549, 561, 563], "term": [52, 366, 394, 529, 531, 540, 546, 565, 574, 579], "multiheadattent": 52, "query_dim": [52, 366, 395], "head_dim": [52, 366, 395], "dropout_r": 52, "context_dim": 52, "with_to_q_fn": 52, "with_to_kv_fn": 52, "with_to_out_fn": 52, "build_mod": [52, 53], "on_init": [52, 53], "multi": [52, 366, 367, 395, 398, 529, 550, 564, 573, 575, 577, 579, 583], "head": [52, 366, 395, 529, 537, 539, 559], "similar": [52, 227, 362, 366, 395, 531, 538, 539, 546, 548, 549, 552, 555, 556, 557, 559, 560, 561, 562, 568, 573, 575, 576, 577, 578, 585], "measur": [52, 366, 395], "built": [52, 53, 73, 359, 529, 539, 540, 545, 546, 561, 566, 574, 578, 579, 583], "now": [52, 53, 82, 92, 96, 359, 529, 533, 539, 542, 543, 544, 545, 546, 547, 548, 553, 554, 556, 559, 560, 561, 562, 563, 567, 568, 570, 572, 573, 579], "__call__": [52, 53, 515, 529], "compile_on_next_step": [53, 55, 249, 364, 569], "store_var": 53, "arg_stateful_idx": 53, "kwarg_stateful_idx": 53, "fallback_to_non_compil": [53, 55], "with_partial_v": 53, "with_grad": [53, 351, 353, 365], "submod_depth": 53, "submods_to_track": 53, "varibl": 53, "temporarili": [53, 542, 562], "compil": [53, 55, 515, 520, 529, 546, 559, 562, 563, 564, 566, 573, 574, 575, 578, 579, 580, 583, 586], "id": [53, 153, 361, 529, 535, 537, 539, 543, 545, 546, 553, 557], "fall": [53, 55, 538, 540, 548, 564], "from_cal": 53, "denot": [53, 181, 351, 355, 362, 365], "trigger": [53, 538], "successfulli": [53, 539, 543, 553], "built_": 53, "compile_kwarg": 53, "_unified_ivy_graph": 53, "_call": 53, "target": [53, 152, 361, 529, 539, 541, 560, 562, 564, 568, 569, 570, 575, 577, 578, 579, 582, 584, 585], "save_weight": 53, "weights_path": 53, "show_graph": 53, "randomness_factor": 53, "save_to_disk": 53, "with_edge_label": 53, "with_arg_label": 53, "with_output_label": 53, "output_connected_onli": 53, "include_gener": 53, "array_cach": 53, "highlight_subgraph": 53, "fname": [53, 568], "return_graph": 53, "layernorm": 54, "normalized_shap": 54, "elementwise_affin": 54, "mini": [54, 372, 475], "trail": 54, "pytorch": [55, 228, 362, 529, 532, 533, 537, 538, 543, 548, 549, 552, 554, 555, 558, 559, 560, 562, 563, 565, 570, 573, 574, 580, 582, 583, 585, 586], "set_stat": [55, 569], "init_on_first_step": 55, "grad": [55, 342, 365, 529, 557, 568, 569, 570], "ignore_miss": 55, "overridden": [55, 543], "privat": [55, 559, 561], "_step": [55, 569], "miss": [55, 538, 539, 543, 546, 547, 550, 553, 561, 563], "sgd": [55, 579], "stochast": [55, 579], "sub_modul": 56, "custom_object": [58, 60, 356], "identifi": [58, 60, 356, 542, 547, 561, 563], "xxxxxxxxxxxxxx": [58, 60, 356], "custom_fn": [58, 60, 356], "lambda": [58, 60, 257, 344, 345, 347, 354, 356, 364, 365, 366, 371, 395, 463, 464, 538, 552, 555, 556, 557, 560, 563, 565, 568], "24000001": [61, 356], "703": [62, 356], "683": [62, 356], "408": [62, 356], "313": [62, 356], "437": [62, 356], "40337825": [63, 356], "56114835": [63, 356], "20788449": [63, 356], "214": [65, 356], "891": [65, 356], "846": [65, 356], "985": [65, 356], "0768": [66, 192, 356, 362], "231": [66, 356], "body_fn": [68, 69, 70, 71, 358], "orelse_fn": [68, 70, 358], "test_fn": [69, 71, 358, 516, 529], "chosen": [73, 181, 359, 362, 374, 490, 538, 547, 559], "ml_framework": [73, 359], "distanc": [73, 359], "adjac": [73, 359], "obj": [74, 75, 359], "nestedsequ": [74, 75, 359], "typevar": [74, 75, 359], "supportsbufferprotocol": [74, 75, 359], "static_copy_arrai": [79, 359], "intdtyp": [82, 92, 96, 117, 128, 131, 138, 144, 359, 360], "suppos": [82, 258, 359, 364, 561], "numrow": [82, 359], "numcolumn": [82, 359], "anoth": [83, 109, 111, 359, 360, 529, 532, 538, 539, 540, 545, 546, 548, 552, 555, 556, 558, 559, 561, 563, 565, 567, 570, 574, 579, 585], "interchang": [83, 359, 369, 444], "33333337": [86, 344, 359, 365], "66666663": [86, 359], "gpu": [86, 153, 155, 156, 159, 161, 163, 165, 166, 167, 170, 172, 173, 359, 361, 529, 540, 549, 567, 577, 579, 582, 583, 584], "41588834": [87, 359], "7827941": [87, 359], "6227766": [87, 359], "23413252": [87, 359], "n3": [88, 359], "nn": [88, 359, 529, 555, 560, 563, 570, 580], "similarli": [88, 359, 363, 544, 548, 559, 563, 567, 585], "xv": [88, 359], "yv": [88, 359], "x_nativ": [89, 359, 558], "y_nativ": [89, 359], "z_nativ": [89, 359], "locat": [90, 359, 373, 376, 480, 496, 538, 540, 544, 545, 549, 559, 560, 561, 562, 577], "d_type": [91, 359], "__new__": [91, 359], "y1": [92, 96, 359, 363], "y2": [92, 96, 359], "y3": [92, 96, 359], "incompat": [110, 360], "data_type_funct": [111, 360], "uint8": [111, 118, 122, 131, 134, 139, 145, 360, 548, 561], "helper": [112, 360, 513, 514, 515, 516, 518, 519, 529, 538, 545, 548, 552, 568, 574], "closest": [113, 189, 198, 199, 228, 237, 360, 362, 561, 563], "xtype": [113, 360], "ytype": [113, 360], "native_uint16": [113, 360], "complexdtyp": [114, 128, 135, 360], "set_default_complex_dtyp": [114, 141, 360], "complex128": [114, 128, 135, 141, 360], "4294": [114, 116, 360], "967346": [114, 116, 360], "floatdtyp": [116, 137, 360], "set_default_float_dtyp": [116, 125, 135, 143, 360, 548], "int_dtyp": [117, 138, 360], "set_default_int_dtyp": [117, 125, 144, 360, 548], "4294967346": [117, 118, 360], "uint_dtyp": [118, 139, 360], "uint": [118, 131, 139, 145, 360, 548, 560], "uintdtyp": [118, 131, 139, 145, 360], "set_default_uint_dtyp": [118, 125, 145, 360], "native_bool": [120, 360], "followng": [121, 360], "ieee": [121, 177, 197, 211, 227, 232, 357, 360, 362, 532], "754": [121, 177, 197, 211, 227, 232, 357, 360, 362, 532], "smallest_norm": [121, 360], "bfloat16": [122, 360, 548, 559, 561, 562], "unsupport": [123, 157, 263, 264, 360, 361, 364, 513, 516, 539, 553, 559], "encapsul": [124, 360, 547], "314": [124, 360, 363], "9223372036854775808": [124, 360], "9223372036854775807": [124, 360], "65535": [124, 360], "4294967295": [124, 360], "un": [126, 360, 565], "native_uint8": [126, 360], "type1": [132, 360], "type2": [132, 360], "array_api_promot": [132, 133, 360], "unexpect": [133, 360, 548], "default_complex_dtyp": [135, 360], "default_dtype_stack": [136, 142, 360], "unset_default_dtyp": [136, 360], "native_uint64": [136, 360], "default_float_dtyp": [137, 360, 548], "default_int_dtyp": [138, 144, 360, 548], "default_uint_dtyp": [139, 145, 360], "ret1": [140, 360], "ret2": [140, 360], "reset": [141, 142, 143, 144, 145, 172, 317, 318, 319, 320, 321, 322, 360, 361, 364], "default_complex_dtype_stack": [141, 360], "set_default_dtyp": [142, 360, 548, 555], "default_float_dtype_stack": [143, 360], "native_float16": [146, 360], "unmodifi": [151, 361, 544, 548], "tpu": [151, 166, 171, 361, 549, 579, 582], "clear": [152, 361, 529, 531, 532, 533, 538, 540, 544, 548, 549, 550, 559, 563, 565, 567, 579], "cach": [152, 252, 361, 364, 555, 561], "aliv": [158, 162, 164, 267, 293, 294, 361, 364, 549], "139740789224448": [158, 361], "core": [160, 361, 529, 531, 538, 539, 549, 561, 570, 577, 578, 579, 580, 584, 586], "physic": [160, 361], "default_devic": [162, 165, 166, 172, 361, 549, 552], "process_specif": [163, 173, 361], "percentag": [163, 361], "ram": [163, 170, 173, 361], "process": [163, 173, 361, 532, 533, 534, 539, 540, 546, 547, 555, 557, 559, 560, 561, 563, 565, 570, 577, 578, 579, 582, 583, 585, 586], "alon": [163, 173, 361, 529, 535, 561], "036902561555": [163, 361], "7024003467681645": [163, 361], "as_native_dev": [163, 361], "7095597456708771": [163, 361], "attr_onli": [164, 361], "chunk": [166, 167, 168, 361], "codebas": [166, 167, 361, 533, 534, 541, 548, 558, 559, 561, 562, 564], "split_factor": [166, 361, 552], "max_chunk_s": [168, 361], "chunk_siz": [168, 361], "input_ax": [168, 361], "output_ax": [168, 361], "feed": [168, 361, 579, 580], "usag": [168, 361, 532, 548, 561, 565, 573, 582], "fed": [168, 361, 569], "fist": [168, 361], "gb": [170, 173, 361, 539], "66700032": [170, 361], "589934592": [170, 361], "set_default_devic": [172, 361, 549], "219563008": [173, 361], "902400346": [173, 361], "525205504": [173, 361], "magnitud": [174, 177, 362, 367, 418, 419], "particular": [174, 215, 362, 539, 540, 542, 544, 547, 548, 550, 556, 558, 559, 561, 562, 563, 575, 579, 585], "princip": [175, 178, 180, 362, 363], "domain": [175, 176, 178, 179, 180, 181, 190, 191, 196, 197, 209, 210, 212, 230, 231, 232, 235, 236, 362, 363, 551, 577, 579], "codomain": [175, 176, 178, 179, 180, 181, 190, 191, 196, 197, 209, 210, 212, 230, 231, 232, 235, 236, 362, 363, 551], "\u03c0": [175, 178, 180, 181, 357, 362], "x1_i": [177, 181, 183, 185, 186, 187, 188, 193, 194, 199, 201, 202, 207, 208, 213, 214, 216, 217, 220, 222, 224, 227, 234, 362, 542], "neither": [177, 355, 362, 365, 547, 559, 563], "nor": [177, 355, 362, 365, 547, 559, 583], "2019": [177, 197, 211, 362, 579, 582], "overflow": [177, 362, 367, 377, 416, 507, 537, 548], "commut": [177, 362], "809": [179, 362], "199": [179, 362], "569": [179, 362], "733": [179, 362], "notat": [181, 362, 377, 501, 547], "quadrant": [181, 362], "branch": [181, 362, 540, 542, 547, 573, 579], "rai": [181, 362, 532], "3\u03c0": [181, 362], "bitwis": [183, 186, 188, 217, 362], "170": [187, 362], "243": [187, 362], "225": [187, 362], "xor": [188, 217, 362], "77": [188, 362, 367, 377, 413, 501], "654": [190, 362, 547], "368": [191, 362], "670": [191, 362], "202": [191, 362, 542], "548": [191, 362], "1490": [191, 362], "0192": [192, 362], "0384": [192, 362], "0576": [192, 362], "698": [193, 362], "truth": [194, 201, 202, 207, 208, 222, 362, 513, 515, 559, 561], "purpos": [197, 211, 362, 363, 367, 416, 540, 543, 546, 547, 550, 552, 554, 555, 556, 559, 561, 563, 564, 567, 574, 578, 580, 583, 584, 585], "accur": [197, 211, 362, 367, 416], "fdlibm": [197, 211, 362], "compliant": [197, 211, 215, 216, 362, 377, 502, 503, 504, 506], "potenti": [197, 211, 362, 529, 538, 539, 540, 547, 548, 559, 564, 582], "632": [197, 362], "20e": [197, 362], "72e": [197, 362], "greatest": [198, 199, 362, 363], "742": [211, 362], "NOT": [215, 362, 538], "recommend": [215, 216, 227, 362, 377, 503, 506, 539, 540, 544, 545, 557], "unspecifi": [224, 227, 362, 367, 369, 402, 403, 443, 558], "versu": [224, 362], "52095687": [224, 362], "92457771": [224, 362], "49372482": [224, 362], "22738838": [224, 362], "156": [224, 362], "5877228": [224, 362], "189": [225, 362], "252": [225, 362], "315": [225, 362], "378": [225, 362], "1150": [225, 362], "2890": [225, 362], "172": [225, 362], "229": [225, 362], "487": [225, 362, 366, 393], "344": [225, 362], "semant": [227, 362, 531, 565, 570, 580], "That": [227, 362, 539, 540, 543, 561, 567, 568, 569, 580], "primarili": [227, 362, 540, 546, 579], "reason": [227, 362, 532, 538, 540, 542, 543, 546, 547, 548, 550, 555, 558, 559, 562, 563, 565, 567, 585], "decim": [228, 362], "doc": [228, 362, 363, 529, 534, 537, 538, 541, 550, 551, 554, 561, 565, 568, 569], "deliber": [228, 362, 563], "here": [228, 362, 529, 537, 538, 539, 540, 542, 545, 546, 547, 550, 554, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 579, 580], "due": [228, 362, 532, 535, 539, 542, 547, 552, 558, 559, 579], "imprecis": [228, 362], "5654": [228, 362], "034": [228, 362], "433": [228, 345, 347, 354, 362, 365], "932": [230, 362], "746": [230, 362], "443": [230, 362], "657": [230, 254, 362, 364], "indistinguish": [232, 362], "infinit": [232, 362], "32455532": [232, 362], "89897949": [232, 362], "169": [232, 362], "546": [235, 362, 366, 393], "916": [235, 362, 368, 428], "996": [235, 362], "462": [236, 362], "604": [236, 362], "984": [236, 362], "997": [236, 362], "0375": [237, 362], "032": [237, 362], "idx": [248, 364, 529, 549, 567], "inspect": [248, 364], "retriev": [248, 364, 540, 559], "decor": [252, 364, 520, 542, 543, 546, 548, 549, 555, 556, 558, 559, 560], "recalcul": [252, 364], "my_sum": [252, 364], "val1": [252, 364], "val2": [252, 364], "cached_sum": [252, 364], "line_eq": [252, 364], "slp": [252, 364], "itc": [252, 364], "cached_line_eq": [252, 364], "0353": [253, 364], "424": [253, 364], "58": [253, 364], "176": [253, 364], "339": [253, 364], "271": [253, 364], "168": [253, 364], "391": [253, 364], "417": [254, 364], "583": [254, 364], "0667": [254, 364], "267": [254, 364], "131": [254, 364], "394": [254, 364, 373, 485], "526": [254, 364], "788": [254, 364], "expos": [255, 364, 529, 531, 547, 565, 569], "public": [255, 364, 547, 557, 567, 582], "default_str": [257, 364], "46999979": [258, 364], "66000009": [258, 364], "93000001": [258, 364], "29000092": [258, 364], "33999991": [258, 364], "6400001": [258, 364], "96000004": [258, 364], "36000013": [258, 364], "51999998": [258, 364], "67000008": [258, 364], "960": [258, 364], "1280": [258, 364, 529], "3600": [258, 364], "bottom": [258, 364, 539, 547, 585], "h1": [258, 364], "w1": [258, 364], "40499985": [259, 364], "61000061": [259, 364], "1500001": [259, 364], "simpl": [261, 364, 529, 531, 538, 539, 540, 543, 545, 546, 548, 549, 550, 551, 555, 558, 559, 561, 562, 563, 567, 569, 570, 573, 574, 578, 579, 580, 581], "array_mod": [268, 364], "set_array_mod": [268, 317, 364], "exception_trace_mod": [269, 364], "set_exception_trace_mod": [269, 318, 364, 552], "get_exception_trace_mod": [273, 298, 318, 364], "set_nestable_mod": [273, 319, 364], "set_queue_timeout": [275, 320, 364], "max_depth": [276, 364, 371, 468], "seen_set": [276, 364], "local_set": [276, 364], "set_show_func_wrapper_trace_mod": [277, 322, 364, 552], "path": [278, 364, 515, 520, 539, 545, 558, 559, 560, 579], "directori": [278, 305, 361, 364, 535, 536, 538, 539, 540, 547, 559, 561], "temporari": [278, 305, 364, 538, 548], "thrown": [283, 364, 543, 549, 552, 573], "ivyexcept": [283, 310, 355, 364, 365, 526, 552, 559], "doesn": [283, 364, 539, 544, 545, 546, 547, 548, 550, 557, 561, 563, 565, 573, 577], "allow_dupl": [291, 364], "best": [291, 364, 529, 534, 537, 538, 539, 540, 541, 547, 548, 553, 561, 562, 582, 583], "o": [291, 364, 529, 539, 541, 547, 565], "fork": [292, 364, 534, 542, 547], "forkserv": [292, 364], "spawn": [292, 364], "garbag": [294, 364], "collector": [294, 364], "get_all_arrays_in_memori": [294, 364], "consol": [294, 364, 540, 561, 567], "get_array_mod": [297, 317, 364], "rtype": [297, 298, 301, 303, 304, 364], "exept": [298, 364], "get_min_bas": [299, 364], "get_min_denomin": [300, 364], "get_nestable_mod": [301, 319, 364], "get_queue_timeout": [302, 320, 364], "shape_array_mod": [303, 321, 364], "get_show_func_wrapper_trace_mod": [304, 322, 364], "tmp_dr": [305, 364], "get_tmp_dir": [305, 364], "tmp": [305, 364], "my_tmp": [305, 364], "set_shape_array_mod": [307, 321, 364], "49999999999975": [308, 364], "5015015015010504": [308, 364], "000444502911705e": [308, 364], "9999999999995j": [308, 364], "isn": [310, 364, 540, 556, 568, 573, 581], "possibli": [312, 364, 559, 561, 573], "100000023841858": [312, 364], "200000047683716": [312, 364], "299999952316284": [312, 364], "400000095367432": [312, 364], "599999904632568": [312, 364], "execut": [316, 361, 364, 539, 540, 545, 546, 547, 550, 552, 555, 556, 558, 561, 563, 565, 567, 570, 573, 574, 575, 579, 580, 581, 582, 583, 585], "dictionai": [316, 364], "__name__": [316, 364, 529, 552], "hemant": [316, 364], "unset_shape_array_mod": [317, 320, 364], "previous": [318, 364, 539, 544, 555, 557, 561, 565], "451": [323, 364], "in_ax": [324, 364], "out_ax": [324, 364], "thereof": [324, 364], "fun": [324, 364, 371, 467, 547], "appear": [324, 363, 364, 539, 540, 542, 559, 563], "summaris": [324, 364], "0125": [342, 365], "171": [342, 365], "90000075": [343, 365], "90000164": [343, 365], "9000032": [343, 365], "50000012e": [343, 365], "92558754": [343, 365], "92558694": [343, 365], "92558682": [343, 365], "92558861": [343, 365], "60000025e": [343, 365], "01024": [343, 365], "retain_grad": [344, 365], "xs_grad_idx": [344, 365, 515, 529, 557], "ret_grad_idx": [344, 365, 515, 529, 557], "func_ret": [344, 365, 557], "retain": [344, 363, 365, 557, 574], "33333334": [344, 365, 367, 425], "666666": [344, 365], "333332": [344, 365], "66666675": [344, 365], "grad_fn": [345, 354, 365, 568], "933": [345, 347, 354, 365], "jacobian": [347, 365, 573, 579], "jac_fn": [347, 365], "639": [348, 365], "361": [348, 365], "compon": [351, 353, 355, 365, 529, 532, 565, 575, 580, 582], "with_grads_stack": [351, 353, 355, 365], "delet": [353, 365, 540, 547], "set_with_grad": [353, 355, 365], "value_grad": [354, 365], "423332": [354, 365], "enter": [355, 361, 365, 539, 540, 543, 548, 549, 554, 556], "block": [355, 361, 363, 365, 529, 540, 543, 546, 552, 553, 555, 561, 564, 566, 570, 573, 574, 584, 586], "deseri": 356, "718281828459045": 357, "euler": [357, 572], "Not": [357, 363, 544, 560, 568, 569, 573], "newaxi": 357, "alia": [357, 538, 559], "141592653589793": 357, "ifels": 358, "whileloop": 358, "if_els": 358, "while_loop": 358, "protocol": 359, "_t_co": 359, "asarray_handle_nest": 359, "asarray_infer_devic": 359, "asarray_to_native_arrays_and_back": 359, "defaultcomplexdtyp": 360, "defaultdtyp": 360, "defaultfloatdtyp": 360, "defaultintdtyp": 360, "defaultuintdtyp": 360, "as_ivy_dtyp": [360, 559], "as_native_dtyp": 360, "check_float": 360, "closest_valid_dtyp": 360, "default_dtyp": [360, 548, 555], "dtype_bit": 360, "function_supported_dtyp": [360, 548], "function_unsupported_dtyp": [360, 548], "infer_default_dtyp": 360, "invalid_dtyp": [360, 548], "promote_typ": [360, 548], "promote_types_of_input": [360, 548, 558], "type_promote_arrai": [360, 548], "unset_default_complex_dtyp": 360, "unset_default_float_dtyp": 360, "unset_default_int_dtyp": 360, "unset_default_uint_dtyp": 360, "valid_dtyp": 360, "defaultdevic": 361, "__enter__": 361, "runtim": [361, 541, 555, 561, 563, 579], "relat": [361, 529, 535, 537, 539, 540, 552, 553, 559, 561, 562, 563, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "_dev": 361, "__exit__": 361, "exc_typ": 361, "exc_val": 361, "exc_tb": 361, "exit": 361, "baseexcept": [361, 516], "traceback": [361, 561], "initialis": [361, 542, 559, 561], "profil": 361, "save_dir": 361, "as_ivy_dev": [361, 567], "clear_cached_mem_on_dev": 361, "dev_util": [361, 549], "function_supported_devic": 361, "function_unsupported_devic": 361, "get_all_ivy_arrays_on_dev": [361, 549], "gpu_is_avail": [361, 529], "num_cpu_cor": [361, 549], "num_gpu": [361, 549, 561], "num_ivy_arrays_on_dev": 361, "percent_used_mem_on_dev": 361, "print_all_ivy_arrays_on_dev": 361, "set_split_factor": [361, 552], "split_func_cal": 361, "total_mem_on_dev": [361, 549], "tpu_is_avail": 361, "unset_default_devic": 361, "used_mem_on_dev": 361, "nativesparsearrai": 363, "sparsearrai": 363, "coo_indic": 363, "crow_indic": 363, "col_indic": 363, "ccol_indic": 363, "row_indic": 363, "dense_shap": 363, "to_dense_arrai": 363, "typic": [363, 376, 496, 542, 555, 578, 586], "yj": 363, "whilst": [363, 570, 574, 579], "ary3": 363, "avg": 363, "dimensio": 363, "distrubut": 363, "paramter": 363, "463": 363, "022": 363, "059": 363, "601": 363, "015": 363, "868": 363, "908": 363, "672": 363, "002": 363, "029": 363, "144": 363, "822": 363, "bind_custom_gradient_funct": [363, 557], "custom_grad_func": 363, "bind": [363, 538, 546, 557, 578, 579], "upstream": [363, 539, 540, 542, 557], "arrrai": 363, "355j": 363, "55j": 363, "current_backend": [363, 552, 555, 562, 565], "global_backend": 363, "py": [363, 529, 538, 539, 540, 542, 544, 547, 548, 549, 551, 552, 553, 554, 555, 559, 560, 561, 562, 565, 567, 569, 570], "tranform": 363, "22e": 363, "24e": 363, "91e": 363, "10e": 363, "16e": 363, "81e": 363, "280": 363, "container_n": 363, "container_typ": [363, 364], "container_norm": 363, "superdiagon": [363, 367, 400], "subdiagon": [363, 367, 400], "seen": [363, 531, 532, 547, 550, 552, 559, 561, 565, 567, 568, 585], "multivari": 363, "bayesian": 363, "ed": 363, "rest": [363, 539, 545, 547, 570, 581], "5d": 363, "third": [363, 367, 375, 418, 491, 545, 558, 573, 578, 579, 585], "eigenvali": 363, "necessarili": [363, 543, 546], "72281323e": 363, "37228132e": 363, "88578059e": 363, "10000000e": 363, "76822128": 363, "70710678": 363, "6401844": 363, "tridiagon": 363, "18749806": 363, "81250191": 363, "350609": 363, "56713122": 363, "06563006": 363, "74146169": 363, "74215561": 363, "0636413": 363, "56742489": 363, "35291126": 363, "emb": 363, "everywher": 363, "t1": 363, "frac": 363, "02733949e": 363, "00j": 363, "49660576e": 363, "68178638e": 363, "01j": 363, "98912367e": 363, "21802426e": 363, "04549134e": 363, "82842712e": 363, "86902654e": 363, "25501143e": 363, "32978028e": 363, "52068201e": 363, "71158374e": 363, "position": 363, "inexact": 363, "decompos": [363, 559], "0800": 363, "3979": 363, "9121": 363, "5400": 363, "handle_array_funct": 363, "array_funct": 363, "handle_array_like_without_promot": 363, "handle_except": [363, 526], "handle_nest": [363, 546, 555, 556, 565], "handle_out_argu": [363, 548, 549, 554, 556, 558, 565], "handle_view": 363, "_base": [363, 371, 456, 466, 467], "view_ref": 363, "han": 363, "taper": 363, "horizot": 363, "triangl": 363, "15318303e": 363, "15148591e": 363, "19j": 363, "25000000e": 363, "35378602e": 363, "02j": 363, "65404249e": 363, "17611649e": 363, "24320230e": 363, "79344813e": 363, "22374531e": 363, "45929364e": 363, "14208718e": 363, "07177031e": 363, "infer_devic": [363, 548, 549, 554, 556], "infer_dtyp": [363, 548, 549, 554, 556], "inputs_to_native_arrai": [363, 543, 556], "integer_arrays_to_float": 363, "interp": [363, 563], "xp": [363, 542], "fp": 363, "bicubic_tensorflowbicub": 363, "is_ivy_sparse_arrai": 363, "is_native_dtyp": 363, "is_native_sparse_arrai": 363, "999999e": 363, "00713103": 363, "99997455": 363, "kaiser_derived_window": 363, "00726415": 363, "9999736": 363, "2773e": 363, "0172e": 363, "9294e": 363, "4149": 363, "9138": 363, "5529": 363, "composit": [363, 538, 541, 543, 544, 546, 548, 556, 558, 560, 561, 563, 565, 569, 570, 573, 574, 580], "indirect": 363, "primari": [363, 541, 544, 548, 556, 558, 559, 561, 563, 573, 574], "secondari": 363, "20141329": 363, "40318608": 363, "48683619": 363, "46328247": 363, "59813893": 363, "43748799": 363, "3333": 363, "6666": 363, "behaviour": [363, 537, 538, 540, 541, 542, 543, 546, 548, 551, 552, 554, 558, 559, 561, 562, 567], "native_sparse_arrai": 363, "native_sparse_array_to_indices_values_and_shap": 363, "ndenumer": 363, "multidimension": [363, 579], "ndindex": 363, "outputs_to_ivy_arrai": [363, 543, 548, 549, 554, 556], "shortcut": [363, 539], "linear_ramp": 363, "reflect": [363, 535, 540, 543, 561], "suppli": [363, 543], "ramp": 363, "mirror": [363, 538, 579], "padding_func": 363, "iaxis_pad_width": 363, "iaxi": 363, "style": [363, 374, 489, 540, 579], "unalt": 363, "extend": [363, 540, 544, 545, 551, 552, 554, 559, 562, 573, 576, 579, 585], "parametr": [363, 542, 561, 579], "6705687": 363, "52016652": 363, "40560818": 363, "45630932": 363, "217234": 363, "to_native_arrays_and_back": [363, 554, 556, 565], "happen": [363, 529, 533, 539, 540, 561, 568], "col": 363, "downward": 363, "upward": 363, "2xn": 363, "subarrai": 363, "complementari": [363, 577, 585], "38268346": 363, "38268352": 363, "8563191": 363, "14943568": 363, "hurwitz": 363, "arraymod": 364, "manag": [364, 365, 529, 533, 534, 558, 573, 581, 583], "arg_info": 364, "arg_nam": 364, "cache_fn": [364, 555], "current_backend_str": [364, 552, 565, 567], "function_supported_devices_and_dtyp": 364, "function_unsupported_devices_and_dtyp": 364, "get_item": 364, "get_referrers_recurs": 364, "inplace_arrays_support": 364, "inplace_variables_support": 364, "isscalar": 364, "match_kwarg": 364, "num_arrays_in_memori": 364, "print_all_arrays_in_memori": 364, "set_min_bas": 364, "set_min_denomin": 364, "set_tmp_dir": 364, "to_ivy_shap": 364, "to_native_shap": 364, "try_else_non": 364, "unset_array_mod": 364, "unset_exception_trace_mod": 364, "unset_nestable_mod": 364, "unset_queue_timeout": 364, "unset_show_func_wrapper_trace_mod": 364, "vmap": [364, 573, 579], "gradienttrack": 365, "execute_with_gradi": [365, 529, 568, 569, 570, 573], "jac": 365, "unset_with_grad": 365, "value_and_grad": [365, 557], "conv": [366, 563], "channel_last": [366, 382, 389, 390], "feature_group_count": [366, 382, 389, 390], "x_dilat": [366, 382, 389], "channel_first": [366, 382, 389, 390], "group": [366, 371, 382, 389, 390, 458, 542, 546, 555, 559, 560, 575, 578, 584], "258": [366, 384, 386, 388], "dhwio": [366, 387], "conv_general_dil": [366, 559], "conv_general_transpos": 366, "hwi": [366, 391], "overfit": [366, 392], "overal": [366, 392, 546, 548, 549, 551, 570, 575, 577, 578, 579], "1428566": [366, 392], "19999981": [366, 392], "39999962": [366, 392], "4000001": [366, 392], "49000001": [366, 392], "55599999": [366, 392], "21000004": [366, 392], "incom": [366, 393], "666": [366, 367, 393, 409], "4269": [366, 393], "911": [366, 393], "157": [366, 393], "753": [366, 393], "101": [366, 367, 371, 393, 406, 462], "545": [366, 373, 393, 483], "547": [366, 393], "124": [366, 393, 552], "852": [366, 393], "963": [366, 393], "108": [366, 377, 393, 501], "196": [366, 393], "306": [366, 393], "long": [366, 394, 539, 540, 547, 548, 550, 552, 565, 579], "short": [366, 394, 540, 548, 559, 562, 565, 569], "unrol": [366, 394, 565, 568], "cont_feat_dim": [366, 395], "numhead": [366, 395], "out_feat_dim": [366, 395], "5678761": [366, 395], "65441847": [366, 395], "18969631": [366, 395], "40131447": [366, 395], "19991851": [366, 395], "40000153": [366, 395], "68589532": [366, 395], "40129396": [366, 395], "40000817": [366, 395], "31219625": [366, 395], "25698996": [366, 395], "31022024": [366, 395], "16286421": [366, 395], "30296469": [366, 395], "16460133": [366, 395], "59497029": [366, 395], "40046397": [366, 395], "14009905": [366, 395], "81691194": [366, 395], "10732293": [366, 395], "40012637": [366, 395], "73519301": [366, 395], "40021262": [366, 395], "7615059": [366, 395], "40326414": [366, 395], "30141067": [366, 395], "19610119": [366, 395], "32028484": [366, 395], "1708746": [366, 395], "34100914": [366, 395], "14920235": [366, 395], "40000009": [366, 395], "73333335": [366, 395], "axisa": [367, 398], "axisb": [367, 398], "axisc": [367, 398], "293": [367, 399], "46997": [367, 399], "eigendecomposit": [367, 402, 403], "qlq\u1d40": [367, 402, 403], "orthogon": [367, 402, 403], "behav": [367, 402, 538, 542, 552, 558, 559, 560, 567, 580], "futur": [367, 403, 404, 529, 531, 533, 539, 540, 545, 547, 548, 561, 562, 563, 567, 573, 585], "done": [367, 404, 537, 538, 539, 540, 542, 545, 547, 550, 553, 559, 561, 568, 579], "45033181e": [367, 404], "02829754e": [367, 404], "54220343e": [367, 404], "12647155e": [367, 404], "38447177e": [367, 404], "56155300e": [367, 404], "26794919": [367, 404], "7320509": [367, 404], "array_lik": [367, 405, 413], "0012": [367, 406], "00342": [367, 406], "000565": [367, 406], "0104": [367, 406], "000981": [367, 406], "00282": [367, 406], "000766": [367, 406], "0322": [367, 406], "00237": [367, 406], "000151": [367, 406], "00101": [367, 406], "00019": [367, 406], "0214": [367, 406], "00171": [367, 406], "0107": [367, 406], "0167": [367, 406], "0472": [367, 406], "0536": [367, 406], "0177": [367, 406], "000429": [367, 406], "00762": [367, 406], "lu_factor": 367, "pivot": [367, 407], "lu": [367, 407], "convent": [367, 377, 408, 501, 531, 544, 554, 562, 572, 585], "frobeniu": [367, 409], "nuclear": [367, 409], "induc": [367, 409], "47722558": [367, 409], "776": [367, 409], "6000004": [367, 409], "118": [367, 410, 552], "moor": [367, 414], "penros": [367, 414], "underflow": [367, 416, 548], "logsabsdet": [367, 416], "although": [367, 416, 543, 546, 559, 563, 577, 579], "again": [367, 416, 532, 533, 540, 543, 544, 545, 546, 550, 552, 558, 559, 561, 562, 563, 568, 570, 573, 584, 585], "subject": [367, 416], "linalg": [367, 416, 538, 558, 560], "solut": [367, 417, 529, 540, 546, 548, 560, 561, 563, 577, 581], "system": [367, 417, 529, 539, 540, 544, 547, 548, 573, 577, 579, 582, 584, 586], "ordin": [367, 417, 572], "usvh": [367, 418], "et": [367, 418], "cetera": [367, 418], "ss": [367, 419], "615": [367, 419], "866": [367, 419], "864": [367, 419], "0x": [367, 423], "Such": [367, 423, 540, 555, 561], "progress": [367, 423, 539, 540, 570], "alexandr": [367, 423], "theophil": [367, 423], "9000001": [367, 425], "64158917": [367, 425], "skew": [367, 426], "symmetric_matrix": [367, 426], "cross_product": [367, 426], "35667497": [368, 429], "793291": [368, 430], "512926": [368, 430], "outsid": [369, 432, 443, 549, 553, 555, 567, 584], "indexerror": [369, 435, 526, 552], "beyond": [369, 440, 551, 559, 585], "introduc": [369, 375, 440, 491, 531, 546, 548, 560, 561, 563, 568], "squeezabl": [369, 442], "famili": [369, 443], "intxx": [369, 443], "floatxx": [369, 443], "rep": [369, 445], "manipulation_funct": [369, 447], "fomaml_step": 370, "inner_cost_fn": [370, 453, 454], "outer_cost_fn": [370, 453, 454], "inner_grad_step": [370, 453, 454, 455], "inner_learning_r": [370, 453, 454, 455], "inner_optimization_step": [370, 453, 454, 455], "inner_batch_fn": [370, 453, 454], "outer_batch_fn": [370, 453, 454], "average_across_step": [370, 453, 454], "inner_v": [370, 453, 454], "keep_inner_v": [370, 453, 454], "outer_v": [370, 453, 454], "keep_outer_v": [370, 453, 454], "return_inner_v": [370, 453, 454, 455], "num_task": [370, 453, 454, 455], "maml": [370, 453, 454], "task": [370, 453, 454, 455, 529, 534, 540, 559, 560, 572, 579, 585, 586], "0x7fa6475e53a0": [370, 453, 454, 455], "maml_step": 370, "vanilla": [370, 454, 569, 579], "recev": [370, 454], "reptile_step": 370, "cost_fn": [370, 455], "reptil": [370, 455], "receivng": [370, 455], "all_nested_indic": 371, "include_nest": [371, 456], "_index": [371, 456, 467], "extra_nest_typ": [371, 456, 457, 466, 467, 468], "themselv": [371, 456, 546, 548, 549, 551, 555, 559, 569, 576, 585], "far": [371, 456, 467, 549, 550, 566, 584, 585], "manual": [371, 456, 466, 467, 538, 539, 540, 559, 561, 569], "go": [371, 456, 457, 466, 467, 468, 529, 534, 535, 538, 539, 540, 541, 544, 545, 547, 548, 550, 559, 560, 561, 562, 564, 568, 573, 575, 579, 580, 584, 586], "deeper": [371, 456, 457, 466, 467, 468, 531, 540, 541, 561, 564], "copy_nest": 371, "to_mut": [371, 457, 468], "deepli": [371, 457, 573, 579], "mutabl": [371, 457, 463, 464, 468, 473, 474], "copied_nest": [371, 457], "1337": [371, 457], "duplicate_array_index_chain": 371, "index_nest": [371, 555], "insert_into_nest_at_index": 371, "insert_into_nest_at_indic": 371, "onto": [371, 462, 468, 530, 531, 579], "special_squar": [371, 462], "6666666666666667": [371, 462], "special_pow": [371, 462], "linear_model": [371, 462], "map_nest_at_index": 371, "shallow": [371, 463, 464, 468, 473, 474], "_result": [371, 463, 473], "placehold": [371, 463, 468, 473, 540, 543, 545, 553, 554, 574], "hh": [371, 463], "map_nest_at_indic": 371, "ub": [371, 464], "tb": [371, 464], "multi_index_nest": 371, "repeatedli": [371, 465, 547, 561], "nested_ani": 371, "check_nest": [371, 466, 467], "via": [371, 466, 467, 540, 542, 546, 548, 549, 558, 562, 563, 565, 567, 568, 572, 579], "conditon": [371, 466, 467], "nested_argwher": 371, "stop_after_n_found": [371, 467], "nested_indic": [371, 467], "nested_map": [371, 555], "_depth": [371, 468], "_tuple_check_fn": [371, 468], "_list_check_fn": [371, 468], "_dict_check_fn": [371, 468], "wherebi": [371, 468, 538, 576], "directli": [371, 468, 529, 533, 540, 542, 543, 545, 546, 547, 548, 549, 551, 555, 556, 558, 559, 560, 562, 563, 565, 567, 569, 570, 572, 573, 583, 584, 585], "nested_multi_map": 371, "index_chain": [371, 469], "nest0": [371, 469], "ivy_arrai": [371, 469, 543, 559], "unappli": [371, 469], "prune_empti": 371, "prune_nest_at_index": 371, "prune_nest_at_indic": 371, "set_nest_at_index": 371, "set_nest_at_indic": 371, "111": [371, 474], "xyz": [371, 474], "pqr": [371, 474], "217": [372, 475], "uniformli": [373, 481, 483], "22346112": [373, 482], "0922": [373, 482], "49671414": [373, 482], "1382643": [373, 482], "64768857": [373, 482], "5230298": [373, 482], "23415337": [373, 482], "23413695": [373, 482], "9213753": [373, 482], "12818667": [373, 482], "799": [373, 482], "469": [373, 482], "287": [373, 482], "0366": [373, 482], "26431865": [373, 483], "475": [373, 483], "878": [373, 483], "861": [373, 483], "929": [373, 483], "789": [373, 483], "519": [373, 483], "0435": [373, 483], "381": [373, 483], "4608004": [373, 483], "8458502": [373, 483], "67270088": [373, 483], "31128597": [373, 483], "major": [374, 489, 532, 548, 549, 560, 561, 573, 576, 579], "guarante": [375, 491, 493, 533, 543, 573], "aggreg": [375, 491, 547], "fourth": [375, 491], "1141": [375, 491], "8101": [375, 491], "9298": [375, 491], "8460": [375, 491], "2119": [375, 491], "3519": [375, 491], "6252": [375, 491], "4033": [375, 491], "7443": [375, 491], "2577": [375, 491], "3707": [375, 491], "0545": [375, 491], "3238": [375, 491], "5944": [375, 491], "0775": [375, 491], "4327": [375, 491], "62519997": [375, 491], "40329999": [375, 491], "59439999": [375, 491], "74430001": [375, 491], "81010002": [375, 491], "84600002": [375, 491], "92979997": [375, 491], "29999995": [375, 492], "einstein": [377, 501], "summat": [377, 501], "117": [377, 501], "sentinel": [377, 502, 504], "90000004": [377, 503], "statistical_funct": [377, 506], "07472222": [377, 508], "00666667": [377, 508], "08966666": [377, 508], "simplicit": [378, 509, 510], "meta": [453, 454, 455, 543, 562, 579], "nested_arrai": [512, 545], "nestedarrai": 512, "classmethod": 512, "from_row_length": 512, "row_length": 512, "from_row_split": 512, "row_split": 512, "unbind": 512, "ivy_test": [513, 514, 515, 516, 518, 519, 520, 538, 539, 540, 542, 545, 547, 560], "test_ivi": [513, 514, 515, 516, 518, 519, 520, 538, 539, 540, 545, 547, 560, 561], "assert_all_clos": [513, 560], "ret_np": [513, 515, 560], "ret_from_gt_np": [513, 560], "ground_truth_backend": [513, 515, 516, 520, 560], "ground": [513, 515, 531, 559, 561], "mark": [513, 538, 540, 542, 561, 565], "fail": [513, 538, 539, 540, 542, 547, 548, 550, 553, 559, 560], "assert_same_type_and_shap": 513, "this_key_chain": 513, "check_unsupported_devic": 513, "input_devic": 513, "all_as_kwargs_np": [513, 515], "presenc": [513, 546, 558], "check_unsupported_device_and_dtyp": 513, "input_dtyp": [513, 515, 519, 560, 561], "check_unsupported_dtyp": 513, "test_unsupported_funct": 513, "value_test": 513, "ret_np_flat": 513, "ret_np_from_gt_flat": 513, "ret_from_np_gt_flat": 513, "available_framework": 514, "ground_truth": 514, "function_test": 515, "args_to_contain": 515, "array_arg": [515, 555], "args_to_frontend": 515, "frontend_array_fn": 515, "arrays_to_frontend": 515, "as_list": 515, "compiled_if_requir": 515, "test_compil": [515, 519, 520], "convtru": 515, "nativeclass": 515, "counter": [515, 569], "create_args_kwarg": 515, "args_np": 515, "arg_np_val": 515, "args_idx": 515, "kwargs_np": 515, "kwarg_np_val": 515, "kwargs_idx": 515, "test_flag": [515, 560, 561], "on_devic": [515, 519, 560], "empty_func": 515, "flatten_and_to_np": 515, "flatten_frontend": 515, "flatten_frontend_to_np": 515, "flatten_fw_and_to_np": 515, "framework_compar": 515, "get_frontend_ret": 515, "as_ivy_arrai": 515, "get_ret_and_flattened_np_arrai": 515, "gradient_incompatible_funct": 515, "gradient_test": [515, 561], "rtol_": 515, "atol_": [515, 560], "gradient_unsupported_dtyp": 515, "kwargs_to_args_n_kwarg": 515, "num_positional_arg": [515, 519, 520, 560, 561], "port": [515, 533], "make_json_pick": 515, "test_frontend_funct": [515, 560], "fn_tree": [515, 516, 520, 559, 560, 561], "test_valu": [515, 560, 561], "all_alias": [515, 560], "alias": [515, 520, 538, 559, 560], "namespac": [515, 538, 548, 556, 559, 560, 562, 565, 570], "test_frontend_method": [515, 560], "init_input_dtyp": [515, 560], "method_input_dtyp": [515, 560], "init_flag": [515, 560, 561], "method_flag": [515, 519, 560, 561], "init_all_as_kwargs_np": [515, 560], "method_all_as_kwargs_np": [515, 560], "frontend_method_data": [515, 560], "consum": [515, 546, 547, 554, 560, 561], "init_as_variable_flag": [515, 520], "dictat": [515, 543, 550, 554, 558], "init_num_positional_arg": [515, 520], "init_native_array_flag": 515, "with_v": 515, "ret_gt": 515, "test_funct": [515, 539, 540, 547, 560, 561], "fn_name": [515, 516, 520, 544, 560, 561], "return_flat_np_arrai": 515, "functiontestflag": [515, 519], "with_out": [515, 519, 556, 560, 561], "instance_method": [515, 519, 556, 561], "as_vari": [515, 519, 556, 560, 561], "as_variable_flag": [515, 520, 560], "native_array_flag": [515, 520, 560], "container_flag": [515, 519, 520], "test_method": 515, "class_nam": 515, "method_nam": [515, 518, 520, 560], "init_with_v": 515, "method_with_v": 515, "test_gradi": [515, 519, 520, 556], "method_as_variable_flag": [515, 520], "method_num_positional_arg": [515, 520], "method_native_array_flag": 515, "method_container_flag": [515, 520], "tthe": 515, "var_fn": 515, "holder": 516, "interruptedtest": 516, "test_interrup": 516, "testdata": 516, "supported_device_dtyp": 516, "is_method": 516, "remove_all_current_framework": 516, "setup_api_test": 516, "test_data": 516, "setup_frontend_test": 516, "teardown_api_test": 516, "teardown_frontend_test": 516, "frontendmethoddata": 518, "ivy_init_modul": 518, "framework_init_modul": 518, "init_nam": 518, "test_parameter_flag": 519, "frontendfunctiontestflag": 519, "generate_frontend_arrai": [519, 520], "testflag": 519, "apply_flag": 519, "args_to_iter": 519, "frontendmethodtestflag": 519, "initmethodtestflag": 519, "methodtestflag": 519, "as_cont": 519, "build_flag": 519, "frontend_function_flag": 519, "searchstrategi": [519, 520, 561], "frontend_method_flag": 519, "function_flag": 519, "init_method_flag": 519, "testing_help": 520, "handle_frontend_method": [520, 560, 561], "class_tre": [520, 560], "init_tre": [520, 560], "init_native_arrai": 520, "min_siz": [520, 561], "max_siz": [520, 561], "_as_varaible_strategi": 520, "method_native_arrai": 520, "_given_kwarg": 520, "wrapper": [520, 543, 545, 546, 548, 552, 556, 558, 559, 563, 567, 574, 575, 579], "strategi": [520, 538, 556, 560], "handle_frontend_test": [520, 560, 561], "number_positional_arg": [520, 560], "test_with_out": [520, 560], "test_inplac": 520, "handle_method": [520, 561], "method_tre": [520, 560, 561], "_gradient_strategi": 520, "_compile_strategi": 520, "handle_test": [520, 561], "test_instance_method": 520, "ex": [520, 547], "hypothesi": [520, 538, 540, 542, 547, 556], "num_positional_args_method": 520, "check_al": 523, "messag": [523, 526, 528, 532, 539, 540, 547, 550, 552, 553, 559, 565, 567], "check_all_or_any_fn": 523, "check_ani": 523, "check_dimens": 523, "check_elem_in_list": [523, 559], "elem": 523, "check_equ": [523, 559], "check_exist": 523, "check_fals": 523, "check_fill_value_and_dtype_are_compat": 523, "check_gather_input_valid": 523, "check_gather_nd_input_valid": 523, "check_great": 523, "allow_equ": [523, 552], "check_inplace_sizes_valid": 523, "check_isinst": 523, "allowed_typ": 523, "check_kernel_padding_s": 523, "kernel_s": 523, "padding_s": 523, "check_less": [523, 552], "check_one_way_broadcast": 523, "check_same_dtyp": 523, "check_shapes_broadcast": 523, "check_tru": 523, "dynamic_import": 525, "import_modul": [525, 565], "packag": [525, 529, 535, 539, 547, 552, 553, 559, 573, 579, 581], "ivyerror": [526, 529, 552], "attributeerror": [526, 552, 567], "ivynotimplementedexcept": 526, "notimplementederror": [526, 553], "add_array_spec": 527, "fn_array_spec": 527, "cprint": [528, 565], "warn": [529, 540, 545], "publicli": 529, "yet": [529, 538, 539, 573], "readm": [529, 545, 573], "won": [529, 532, 533, 539, 540, 546, 570], "websit": [529, 532, 542], "faq": [529, 545], "ai": [529, 577, 581], "your": [529, 532, 533, 534, 535, 537, 538, 539, 542, 545, 547, 551, 557, 562, 563, 568, 569, 573, 579], "fingertip": 529, "ml": [529, 530, 532, 533, 534, 537, 559, 564, 565, 566, 568, 569, 570, 572, 575, 576, 577, 578, 579, 582, 584, 586], "model": [529, 568, 569, 574, 577, 578, 579, 580, 581, 582, 583, 585, 586], "written": [529, 531, 539, 542, 543, 545, 551, 554, 558, 559, 562, 565, 567, 570, 573, 577, 579, 583, 585, 586], "prefer": [529, 539, 546, 552, 556, 559, 563, 579], "straight": [529, 559, 561, 567], "awai": [529, 577, 579], "dive": [529, 534, 536, 537, 538, 540, 542, 546, 548, 560, 564, 567, 568, 573, 585], "grow": [529, 562, 579], "guid": [529, 534, 538, 539, 540, 553, 559, 585], "look": [529, 531, 535, 539, 540, 544, 545, 546, 548, 549, 550, 552, 554, 555, 559, 560, 561, 562, 563, 565, 567, 569, 570, 575, 579], "own": [529, 532, 533, 539, 542, 547, 548, 551, 552, 559, 562, 565, 573, 574, 575, 578, 579, 584, 585], "line": [529, 533, 539, 542, 543, 547, 550, 552, 553, 556, 561, 563, 566, 567, 568, 569, 571, 582], "under": [529, 538, 539, 540, 541, 542, 545, 546, 550, 551, 555, 559, 560, 561, 563, 564, 565, 568, 570, 573, 579, 582, 586], "hood": [529, 541, 546, 550, 555, 559, 561, 563, 564, 565, 568, 570, 586], "leverag": [529, 558, 577, 579], "link": [529, 535, 538, 539, 540, 545, 547, 548, 559, 561, 575, 577], "wai": [529, 531, 532, 536, 537, 538, 539, 542, 543, 544, 545, 547, 548, 558, 559, 560, 561, 563, 567, 568, 569, 570, 573, 581, 585, 586], "make": [529, 532, 533, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 577, 579, 580, 581, 582, 585, 586], "project": [529, 531, 532, 533, 536, 539, 540, 543, 544, 545, 561, 569, 572, 573, 575, 577, 579, 582, 586], "research": [529, 531, 572, 579, 586], "develop": [529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 545, 547, 562, 572, 573, 574, 577, 578, 579, 580, 581, 584, 585, 586], "deploi": [529, 547, 574, 577, 578, 579, 581, 585], "wanto": 529, "effici": [529, 539, 540, 546, 553, 555, 556, 558, 561, 565, 568, 573, 579, 581, 582], "redund": [529, 540, 548, 552, 559, 563], "eagerli": 529, "lazili": 529, "instantli": 529, "eager_graph": 529, "lazy_graph": 529, "publish": [529, 533, 573], "pipelin": [529, 531, 536, 541, 542, 543, 560, 570, 574, 579, 580, 585], "variou": [529, 540, 542, 548, 551, 552, 554, 556, 557, 559, 560, 561, 572, 574, 575, 577, 578, 579, 582, 585], "tool": [529, 530, 533, 540, 550, 566, 570, 572, 573, 577, 578, 579, 580, 582, 585, 586], "job": [529, 547], "applii": 529, "perk": [529, 543, 546], "essenti": [529, 531, 532, 538, 546, 549, 550, 555, 559, 562, 585], "mainli": [529, 540, 541, 557, 561, 566, 568, 574, 579], "handler": [529, 553, 564, 566, 570, 574], "what": [529, 532, 533, 535, 540, 541, 545, 546, 547, 550, 551, 554, 556, 557, 559, 560, 561, 564, 565, 567, 568, 569, 570, 572, 573, 575, 580, 581, 584], "behind": [529, 540, 541, 554, 561, 564, 566], "scene": [529, 530, 531, 541, 564, 566, 579], "likewis": [529, 540, 546, 548, 551, 554, 555, 559, 563, 568, 585], "facilit": [529, 556], "agnost": [529, 539, 543, 554, 565, 567, 570, 573, 585, 586], "jnp": [529, 548, 549, 552, 554, 558, 562, 565, 570], "tf": [529, 543, 548, 549, 554, 558, 559, 561, 562, 563, 565, 570, 573, 574, 579], "mse_loss": 529, "jax_ms": 529, "tf_mse": 529, "np_mse": 529, "torch_ms": 529, "mymodel": [529, 568], "linear0": [529, 568, 569], "linear1": [529, 568, 569], "_forward": [529, 551, 565, 568, 569], "put": [529, 538, 545, 561, 573, 585], "togheth": 529, "ll": [529, 533, 534, 539, 540, 545, 550, 557, 558, 568], "someth": [529, 540, 562, 568, 569, 573, 585], "easili": [529, 532, 539, 543, 547, 559, 563, 568, 569, 570, 573, 579, 585, 586], "favorit": 529, "x_in": [529, 568, 569, 570], "loss_fn": [529, 568, 569, 570], "finish": [529, 534, 538, 539, 541], "usabl": [529, 554, 562], "cover": [529, 538, 542, 543, 545, 550, 551, 555, 556, 561, 563, 564], "topic": [529, 556, 567, 579], "mechan": [529, 547, 571, 573], "vision": [529, 535, 571, 575, 585], "robot": [529, 571], "reinforc": [529, 572], "gym": 529, "builder": [529, 536, 571, 573, 574], "trainer": [529, 533, 571, 573, 586], "loader": [529, 568, 573], "break": [529, 544, 548, 553, 554, 562, 573], "highli": [529, 563, 579], "flexibl": [529, 546, 554, 557, 562, 563, 579], "everyon": [529, 533, 534, 540, 573], "plan": [529, 572], "interoper": [529, 532, 576, 577, 579, 582], "There": [529, 531, 538, 539, 540, 542, 543, 545, 546, 548, 550, 552, 553, 555, 557, 559, 560, 565, 568, 573, 580, 581, 585, 586], "environ": [529, 534, 535, 540, 572, 579, 581], "easiest": [529, 536, 539], "command": [529, 536, 539, 542, 545, 547, 556], "python3": [529, 535, 539, 540, 552], "pre": [529, 535, 538, 561, 570, 573, 579], "pull": [529, 533, 534, 535, 538, 539, 542, 550, 562, 563, 573], "unifyai": [529, 535, 536, 539, 540, 545], "advantag": [529, 540, 558, 559, 579], "everyth": [529, 533, 538, 540, 541, 547, 550, 559, 560, 561, 562, 566, 573], "sweat_smil": 529, "git": [529, 535, 536, 537, 539, 540, 542, 545, 547, 561], "clone": [529, 535, 536, 540], "github": [529, 531, 535, 536, 537, 538, 540, 542, 547, 548, 550, 551, 561], "com": [529, 535, 536, 539, 542, 545, 547, 548], "cd": [529, 535, 536, 539, 540], "page": [529, 539, 540, 545, 547, 566, 567, 570, 571], "instruct": [529, 538, 539, 542, 552, 560, 561, 577, 580, 583, 585], "video": [529, 534, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 577], "tutori": [529, 540, 559], "quit": [529, 540, 543, 550, 551, 555, 556, 561, 563, 579, 585], "lot": [529, 532, 533, 547, 548, 556, 561, 573, 578], "jax_fn": 529, "jax_x": 529, "torch_x": 529, "torch_fn": 529, "focus": [529, 562, 572, 577, 578, 579, 585, 586], "architectur": [529, 539, 570, 573, 577, 578, 579, 582, 583, 584], "orient": [529, 572], "contributor": [529, 534, 539, 540, 559, 564, 579], "explain": [529, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 575, 582, 585], "nuanc": 529, "background": [529, 539, 545, 579, 581], "contextualis": 529, "problem": [529, 532, 540, 542, 543, 545, 559, 567, 575, 581, 585], "explos": [529, 530, 532], "why": [529, 530, 532, 540, 545, 558, 567], "adher": [529, 531, 532, 542, 548, 551, 554, 563, 565, 570, 575, 576, 585], "lastli": [529, 543], "paint": [529, 531, 565], "pictur": [529, 531, 538, 565], "role": [529, 540, 559, 566, 580, 582, 586], "plai": [529, 543, 559, 561, 570, 579, 582], "wide": [529, 540, 561, 577, 579], "demo": [529, 535, 572], "showcas": [529, 550, 572], "shorter": [529, 567], "ensp": 529, "pretrain": 529, "eff_encod": 529, "efficientnet_v2": 529, "efficientnetv2b0": 529, "include_top": 529, "imagenet": 529, "input_shap": 529, "224": 529, "nois": 529, "torch_eff_encod": 529, "classifi": 529, "num_class": [529, 570], "fc": [529, 569], "customiz": [529, 545], "rand": 529, "script": [529, 535, 539, 540, 547, 550, 565, 573, 579], "deepmind_perceiver_io": 529, "perceiver_backbon": 529, "dummy_input": 529, "rng": [529, 570], "backbon": [529, 565, 568], "params_v": 529, "perceiverioclassifi": 529, "max_pool": 529, "maxpool2d": 529, "1024": 529, "sm_framework": 529, "segmentation_model": 529, "sm": 529, "torch_sm": 529, "metric": [529, 573], "iou_scor": 529, "rax": 529, "torch_rax": 529, "poly1_softmax_loss": 529, "madmom": 529, "madmon": 529, "torch_madmom": 529, "freq": 529, "audio": 529, "hz2midi": 529, "todo": [529, 538, 548, 559, 561], "timm": 529, "mlp_encod": 529, "create_model": 529, "mixer_b16_224": 529, "randn": 529, "output_dens": 529, "maxpooling1d": 529, "pool_siz": 529, "kornia": 529, "pil": 529, "tf_kornia": 529, "url": 529, "cocodataset": 529, "train2017": 529, "000000000034": 529, "jpg": 529, "raw_img": 529, "img": [529, 568], "enhanc": 529, "sharp": 529, "tf_rax": 529, "tf_madmom": 529, "hk": [529, 570], "_forward_classifi": 529, "rng_kei": 529, "prngkei": [529, 570], "forward_classifi": 529, "hk_eff_encod": 529, "dummy_x": 529, "jax_kornia": 529, "jax_sm": 529, "jax_madmom": 529, "np_kornia": 529, "np_sm": 529, "np_rax": 529, "Or": [529, 536, 568], "yourself": [529, 538, 540, 559, 561, 563, 572], "anyon": [529, 532, 534, 540, 547, 573, 585], "classif": [529, 579], "ivynet": 529, "h_w": 529, "extractor": 529, "sequenti": [529, 545, 546, 569], "image_height": 529, "image_width": 529, "favourit": [529, 539], "pure": [529, 551, 554, 559, 563, 567, 570, 573, 579, 585, 586], "generate_batch": 529, "dataset_s": 529, "y_train": 529, "num_correct": 529, "y_pred": 529, "model_nam": 529, "hyperparam": 529, "num_epoch": 529, "epoch": 529, "epoch_loss": 529, "running_loss": 529, "training_accuraci": 529, "train_loss": 529, "train_correct": 529, "train_loop": 529, "tqdm": 529, "xbatch": 529, "ybatch": 529, "ybatch_encod": 529, "loss_prob": 529, "batch_loss": 529, "set_descript": 529, "set_postfix": 529, "accuracy_percentag": 529, "naverag": 529, "6f": 529, "plot": [529, 579], "_train_summari": 529, "csv": 529, "writer": 529, "writerow": 529, "prepar": [529, 547], "folder": [529, 535, 539, 540, 542, 545, 547, 555, 559, 561, 562], "believ": [529, 532, 540], "bug": [529, 540, 545, 559, 561, 562], "feedback": [529, 547], "welcom": [529, 534, 539, 540], "appreci": 529, "info": [529, 551], "amaz": 529, "acceler": [529, 559, 577, 581, 582, 583, 584], "journei": [529, 534], "achiev": [529, 547, 548, 553, 556, 561, 563, 568, 570, 574], "ambiti": 529, "goal": [529, 532, 538, 579, 585], "season": 529, "server": [529, 539, 540, 545, 579], "perfect": [529, 572], "ask": [529, 533, 538, 539, 550, 565, 567, 573], "idea": [529, 533, 535, 559, 562, 566, 572, 578], "fellow": 529, "team": [529, 534, 538, 539, 540, 559, 581], "twitter": 529, "sneak": 529, "peek": 529, "certainli": [529, 532, 585], "great": [529, 532, 533, 540, 561, 565, 567, 585], "stai": [529, 547], "proper": [529, 538, 559], "credit": 529, "accompani": 529, "paper": [529, 533], "continu": [529, 532, 533, 537, 538, 539, 541, 542, 553, 561, 573, 579], "articl": 529, "lenton2021ivi": 529, "titl": [529, 538, 540, 545, 559], "templat": [529, 545, 551, 561], "inter": [529, 560], "author": [529, 538, 540, 577, 581], "lenton": 529, "daniel": 529, "pardo": 529, "fabio": 529, "falck": 529, "fabian": 529, "jame": 529, "stephen": 529, "clark": 529, "ronald": 529, "journal": 529, "arxiv": 529, "preprint": 529, "2102": 529, "02886": 529, "year": [529, 531, 533, 542, 573, 579], "huge": [530, 532, 547, 568, 579, 585], "collabor": [530, 531, 532], "consortium": [530, 532], "grown": 531, "consider": [531, 550, 554, 563, 576, 577], "recent": [531, 532, 539, 540, 561], "especi": [531, 539, 563, 579], "rapidli": 531, "repo": [531, 535, 537, 540, 542, 545, 547, 548, 559, 560, 561, 562], "wonder": [531, 533, 567], "thing": [531, 532, 533, 537, 538, 539, 540, 544, 553, 559, 561, 563, 567, 568, 579], "evolv": [531, 579], "shareabl": 531, "hinder": [531, 554], "outdat": 531, "matter": [531, 550], "month": [531, 539], "rigor": [531, 561], "newest": 531, "softwar": [531, 532, 539, 540, 577, 582, 583, 584], "rapid": [531, 532, 539, 579], "prototyp": [531, 579], "vital": [531, 570], "signific": [531, 532, 573, 579], "bottleneck": 531, "quickli": [531, 533, 539, 540, 547, 568, 569, 579, 586], "obsolet": [531, 533], "constantli": [531, 562, 563], "invent": 531, "wheel": 531, "simultan": [531, 533], "modern": [531, 532, 557, 584], "scalabl": [531, 565, 584, 585], "exactli": [531, 533, 546, 547, 548, 549, 550, 561, 563], "univers": [531, 559], "languag": [531, 533, 559, 563, 565, 574, 577, 580, 582, 583, 584, 585], "front": [531, 559, 564, 565, 568, 577, 579], "runner": 531, "littl": [531, 567, 581], "principl": [531, 577, 579, 582], "almost": [531, 537, 546, 560, 566, 568], "syntax": [531, 532, 548, 553, 579], "unsurprisingli": [531, 550], "fundament": [531, 547, 559, 563, 565, 579], "2006": 531, "cut": [531, 585], "cloth": 531, "central": [532, 538, 563, 585], "forgiven": 532, "eyebrow": 532, "somehow": 532, "strong": [532, 573, 579], "industri": [532, 579, 581], "wors": 532, "funni": 532, "comic": 532, "strip": 532, "easi": [532, 539, 540, 543, 546, 555, 557, 560, 561, 563, 577, 579, 585, 586], "feasibl": [532, 538, 547], "unlik": [532, 542, 546, 547, 550, 558, 584, 586], "charger": 532, "charact": [532, 553, 559], "instant": 532, "mandat": [532, 548, 558, 561, 562], "adopt": [532, 540, 543, 554, 563, 578, 579, 584], "despit": [532, 546, 548, 549, 560, 563, 565, 576, 579], "bring": [532, 542, 561, 565, 566, 574], "benefit": [532, 533, 539, 543, 546, 555, 558, 563, 567, 568, 573, 577, 581, 584], "unrel": [532, 540], "contrari": 532, "bumpi": 532, "road": 532, "allud": [532, 568], "technologi": [532, 577, 581], "success": 532, "thank": [532, 568], "bio": [532, 539], "pcie": 532, "interfac": [532, 567, 570, 573, 574, 575, 576, 577, 578, 579, 583, 586], "motherboard": 532, "raid": 532, "storag": [532, 568], "virtual": [532, 535, 540, 559, 582, 583], "bluetooth": 532, "wireless": 532, "exchang": [532, 537, 575, 577], "btx": 532, "sata": 532, "host": [532, 536, 547, 573, 584], "tcp": 532, "ip": 532, "commun": [532, 534, 538, 539, 540, 573, 578, 579, 581], "smtp": 532, "send": [532, 584], "gmail": [532, 547], "outlook": 532, "pop": [532, 539], "email": [532, 547], "live": [532, 533, 548, 575, 577], "did": [532, 538, 545, 570, 585], "aris": [532, 548, 573], "until": [532, 540, 553, 562, 565, 573, 586], "substanti": [532, 540, 543, 548, 561, 579], "innov": 532, "growth": [532, 582], "necess": 532, "parti": [532, 545, 573, 578, 579, 585], "engag": [532, 534, 540], "regard": [532, 537, 546, 559, 560, 563], "2015": [532, 579], "alongsid": 532, "frame": [532, 572, 579], "matur": [532, 573, 579], "preced": [532, 569], "mention": [532, 538, 539, 540, 543, 550, 554, 555, 558, 559, 561, 563, 579], "aros": 532, "effort": [532, 534, 573, 575, 579, 585], "stage": [532, 534, 540, 541, 545, 553, 561, 579], "mission": [532, 581], "At": [532, 538, 539, 542, 559, 561, 562, 579], "ourselv": [532, 585], "quansight": [532, 585], "compani": [532, 575], "organ": [532, 543, 546, 555, 559, 562, 574], "panda": 532, "scipi": [532, 581, 586], "conda": [532, 539, 581], "apach": [532, 581, 585], "mxnet": [532, 586], "onnx": [532, 577, 585], "scikit": 532, "jupyt": [532, 581], "aw": 532, "cupi": [532, 579, 586], "net": [532, 533, 565, 570], "sympi": 532, "modin": 532, "spyder": 532, "member": [532, 538, 540, 559], "googl": [532, 547], "octoml": [532, 585], "further": [532, 533, 540, 542, 543, 547, 550, 552, 554, 559, 561, 564, 565, 568, 569, 584, 585], "sponsor": 532, "lg": 532, "electron": 532, "microsoft": [532, 579, 584, 586], "shaw": 532, "intel": [532, 577, 584], "promis": 532, "pursuit": 532, "unif": [532, 534, 567, 575, 585], "clearli": [532, 538, 540, 550, 560, 561, 583], "thought": [532, 539, 540, 554, 577], "care": [532, 540, 559, 563, 570], "gone": [532, 564], "simplifi": [532, 552, 559, 565, 566, 569, 575, 577, 578, 579, 582, 585, 586], "excit": [532, 534, 541], "complianc": 532, "hope": [532, 573, 585], "suit": [532, 539, 541, 542, 547, 561, 568, 572, 574, 579, 585], "motiv": [532, 567], "convinc": 532, "celebr": 532, "encourag": [532, 572, 573], "foundat": [532, 582], "perfectli": 533, "happi": [533, 539, 573], "abund": 533, "better": [533, 535, 541, 559, 560, 562, 563, 564, 567, 568, 569, 582], "streamlin": [533, 582], "workflow": [533, 538, 540, 544, 548, 557, 559, 568, 571, 574, 578, 585, 586], "week": [533, 540], "sai": [533, 539, 556, 567], "deepmind": 533, "releas": [533, 538, 539, 540, 548, 559, 562, 563, 573, 579, 585], "awesom": 533, "love": 533, "perceiverio": 533, "slew": 533, "rush": 533, "inevit": [533, 580], "often": [533, 537, 542, 552, 553, 554, 555, 559, 561, 573, 580, 583, 586], "erron": 533, "poor": 533, "repositori": [533, 535, 536, 539, 540, 541, 542, 553], "confus": [533, 545, 548, 552, 558, 563, 574], "hour": [533, 547], "spent": 533, "spin": 533, "discuss": [533, 540, 545, 548, 549, 558, 559, 561, 563, 566, 567, 568, 573, 575, 580], "sake": 533, "few": [533, 537, 538, 540, 546, 548, 549, 554, 555, 557, 558, 561, 563, 565, 566, 567, 568, 569, 571, 579, 581], "automat": [533, 538, 539, 540, 541, 545, 546, 547, 548, 553, 555, 561, 563, 564, 566, 569, 570, 574, 579, 582, 586], "wouldn": 533, "nice": [533, 561, 579], "frantic": 533, "lucid": 533, "honk": 533, "improv": [533, 540, 548, 554, 555, 563, 565, 574, 577, 579, 581, 582], "understand": [533, 535, 537, 538, 539, 540, 541, 542, 545, 550, 551, 554, 560, 563, 564, 575, 585], "hasn": 533, "spend": [533, 579], "torchvis": 533, "sonnet": 533, "said": 533, "statu": [533, 538, 547], "quo": 533, "dopamin": 533, "ignit": 533, "catalyst": 533, "lightn": 533, "fastai": 533, "flax": [533, 570, 573, 579], "trax": [533, 570], "objax": [533, 570], "offer": [533, 559, 569, 579, 585, 586], "strongli": [534, 539, 585, 586], "skill": [534, 581], "veteran": 534, "beginn": [534, 579], "aspect": [534, 557, 568, 579], "board": [534, 545], "basic": [534, 538, 550, 561], "local": [534, 535, 539, 542, 545, 555, 560, 561], "resourc": [534, 538, 547], "contribut": [535, 537, 538, 539, 540, 545, 559, 565, 583], "slightli": [535, 546, 559, 565, 569], "setup": [535, 539, 540, 545, 547], "mech": [535, 536], "grasp": [535, 559], "tree": [535, 548], "dir": [535, 568], "mutual": [535, 546, 555], "venv": [535, 552], "ivy_dev": [535, 539, 540], "bat": [535, 539, 540], "mac": [535, 539, 540], "linux": [535, 539, 540, 582, 584], "instal": [535, 536, 539, 540, 544, 545, 553, 572], "edit": [535, 538, 539, 540], "pip": [535, 539, 572], "immedi": [535, 539, 563], "ivy_robot": [535, 572], "docker": [535, 537], "desktop": [535, 539], "my": [535, 547, 562], "mount": [535, 536, 540], "rm": [535, 536, 540], "pwd": [535, 536], "pycharm": 535, "vscode": [535, 539], "devcontain": [535, 539], "remot": [535, 539, 542], "codespac": 535, "good": [535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 565, 566, 569], "commit": [535, 538, 542, 550, 561], "make_doc": 536, "sh": [536, 539, 540, 542, 547], "ssh": [536, 547], "Then": [536, 538, 539, 540, 545, 547, 556, 562, 573], "make_docs_without_dock": [536, 545], "sphinx": [536, 545], "resours": 537, "climb": 537, "steep": 537, "curv": 537, "realpython": 537, "pyn": 537, "platform": [537, 539, 577, 581, 583], "pilot": 537, "stuck": [537, 538], "spell": 537, "though": [537, 538, 540, 548, 551, 555, 558, 559, 563, 568, 573], "sound": [537, 547, 564], "peopl": [537, 539, 540, 541, 579, 581], "action": [537, 547, 550, 561], "frequent": [538, 540, 579], "outlin": [538, 539, 540, 541, 546, 548, 551, 555, 558, 559, 561], "broad": [538, 581], "individu": [538, 540, 542, 548, 555, 558, 559, 579, 582, 585, 586], "explan": [538, 540, 546, 551, 554, 559, 567], "focu": [538, 557, 577, 578, 581, 586], "pypi": [538, 539, 573], "familiar": [538, 539], "sure": [538, 539, 540, 542, 547, 559, 560, 561, 563], "aforement": 538, "categori": [538, 542, 543, 546, 548, 559, 562, 564], "arraywithelementwis": [538, 543, 567], "containerwithmanipul": 538, "thorough": [538, 551, 554, 561], "comment": [538, 539, 540, 542, 545, 548, 553, 559], "add_reformatting_checklist_": 538, "category_nam": [538, 548, 549, 551, 554, 555], "pr": [538, 540, 542, 559, 560, 561], "autom": [538, 547, 561, 574, 581], "bot": 538, "markdown": [538, 545], "text": [538, 540, 545, 550, 551], "patient": [538, 539], "symbol": [538, 539, 579, 580], "emoji": 538, "legend": 538, "review": [538, 540, 547, 550, 559, 562], "checkbox": [538, 539], "proce": [538, 539], "elabor": 538, "struggl": 538, "assigne": 538, "status": 538, "refrain": 538, "transpil": [538, 552, 559, 564, 565, 566, 574, 579, 585, 586], "subsect": [538, 540, 542, 547], "verifi": [538, 548, 549, 559, 561, 562], "func_nam": [538, 550, 551, 555, 559], "simpler": [538, 540, 559, 580, 586], "suggest": [538, 539, 540, 545, 548, 557, 559, 561, 562], "assess": [538, 563], "merg": [538, 540, 542, 547, 559, 579], "composition": [538, 558], "pend": 538, "helpfulli": [538, 563, 577], "problemat": [538, 539], "unimpl": 538, "issue_link": 538, "alias_nam": 538, "notic": [538, 543, 547, 563], "push": [538, 540, 542, 553, 560, 561, 585], "liner": 538, "meanwhil": [538, 547], "reselect": 538, "placement": 538, "categoris": [538, 542, 559], "faithfulli": 538, "creation_routin": [538, 560], "indexing_routin": 538, "ma": 538, "manipulation_routin": 538, "mathematical_funct": [538, 559], "sorting_searching_count": 538, "ufunc": [538, 559], "matrix_and_vector_product": 538, "matrix_eigenvalu": 538, "norms_and_other_numb": 538, "solving_equations_and_inverting_matric": 538, "seem": [538, 539, 563, 569, 570, 573, 579], "gleam": 538, "uncom": 538, "test_numpy_inn": 538, "test_frontend": [538, 547, 560], "unsur": [538, 561], "explor": [538, 539, 540, 548, 563, 566, 570, 572, 579, 582], "confirm": 538, "backend_nam": [538, 544, 548, 549, 551, 554, 555, 556], "relevant_submodul": 538, "sometim": [538, 539, 540, 542, 548, 555, 559, 561, 562, 563], "recreat": [538, 542], "defer": [538, 543, 546, 548, 549, 555, 556, 558, 559, 561, 585], "clearer": [538, 552, 560, 568], "mind": [538, 543, 546, 561], "realli": [539, 546, 573, 584, 585], "button": [539, 540], "your_usernam": 539, "gh": 539, "your_fold": 539, "sync": [539, 542], "cours": [539, 540, 542, 543, 550, 559, 562, 563, 568, 573, 584, 585], "whatev": [539, 546, 573], "elig": 539, "student": 539, "licenc": 539, "remind": 539, "licens": [539, 582], "expir": 539, "profession": 539, "trial": 539, "jetbrain": 539, "bui": [539, 585], "paid": 539, "pace": 539, "person": [539, 540], "experi": [539, 552, 561, 566, 568, 573], "abil": [539, 563, 566, 573, 579], "perhap": [539, 567, 568, 569, 573, 585], "click": [539, 540, 547, 551, 566], "icon": [539, 540], "panel": 539, "builtin": [539, 567, 569], "cmd": 539, "virtualenv": 539, "tick": [539, 540, 547], "test_array_api": [539, 540, 542, 561], "txt": [539, 542, 545, 562], "visual": [539, 545, 559, 573, 579, 581, 584], "mitig": [539, 585], "conflict": [539, 540, 547, 559, 568], "wsl": 539, "powershel": 539, "admin": 539, "visit": [539, 540, 547], "deploy": [539, 578, 581, 582, 585, 586], "menu": 539, "On": [539, 548, 559, 561, 563, 566, 570], "tag": [539, 540], "introspect": 539, "usr": 539, "debug": [539, 540, 546, 547, 557, 561, 563, 568, 579], "dialog": 539, "caus": [539, 540, 542, 544, 545, 546, 547, 548, 550, 558, 560, 561, 573], "earlier": [539, 540], "virtualis": 539, "dropdown": 539, "dockerfil": 539, "navig": [539, 540, 541], "tab": [539, 547, 568], "m1": 539, "optional_m1_1": 539, "optional_m1_2": 539, "sudo": 539, "apt": 539, "ca": 539, "certif": 539, "curl": 539, "gnupg": 539, "lsb": 539, "mkdir": [539, 547], "keyr": 539, "fssl": 539, "download": [539, 561], "gpg": 539, "dearmor": 539, "echo": [539, 547], "deb": 539, "arch": 539, "dpkg": 539, "lsb_releas": 539, "tee": 539, "null": 539, "ce": 539, "cli": 539, "containerd": 539, "io": [539, 547], "plugin": 539, "systemctl": 539, "permiss": [539, 547], "press": [539, 540, 568], "ok": 539, "successful": 539, "face": [539, 557, 563, 565, 579, 585], "4a": 539, "socket": 539, "chmod": [539, 547], "rwx": 539, "sock": 539, "pid": 539, "coupl": [539, 543, 567, 569, 579], "test_ab": [539, 561], "editor": 539, "pytest": [539, 540, 542, 547, 561], "keyboard": 539, "displai": [539, 545, 546, 552, 561, 568], "screenshot": 539, "ctrl": [539, 540], "test_elementwis": 539, "bar": [539, 545], "shell": [539, 540], "run_tests_cli": [539, 542], "run_ivy_core_test": 539, "run_ivy_nn_test": 539, "run_ivy_stateful_test": 539, "run_test": [539, 547], "test_depend": 539, "test_ivy_cor": 539, "test_ivy_nn": 539, "test_ivy_st": 539, "test_": [539, 560], "test_cor": [539, 540, 560], "wish": [539, 559], "ivy_cor": 539, "ivy_nn": 539, "ivy_st": 539, "simplest": [539, 550, 561, 563], "header": [539, 540], "advanc": [539, 578], "arrow": 539, "test_stat": 539, "test_submodule_nam": 539, "test_function_nam": 539, "debugg": 539, "studio": 539, "afterward": [539, 568], "restart": 539, "overlap": [539, 547, 562, 563, 580], "test_file_path": 539, "test_fn_nam": 539, "engin": [539, 579, 581, 582], "comma": 539, "postcreatecommand": 539, "bash": [539, 540, 542], "post_create_command": 539, "poststartcommand": 539, "safe": [539, 559], "containerworkspacefold": 539, "reopen": 539, "test_fle_path": 539, "slash": 539, "headach": 539, "arm": [539, 540], "vm": [539, 547], "azur": 539, "cloud": [539, 547, 572, 581], "longer": [539, 548, 556, 558, 561, 579], "worri": 539, "usual": [539, 542, 559, 561, 563], "theme": [539, 545], "slow": 539, "ipad": 539, "browser": [539, 545], "cool": [539, 562], "quota": 539, "requisit": 539, "pane": [539, 540, 547], "readi": 539, "master": [539, 540, 542, 547, 562, 579], "box": 539, "upto": [539, 540], "minut": [539, 547], "subsequ": [539, 543, 547, 548, 550, 554, 555, 558, 561, 563, 569, 580], "launch": 539, "approach": [539, 540, 543, 546, 548, 555, 556, 559, 561, 563, 567, 568, 573, 576, 583, 585], "colour": 539, "chanc": 539, "troubleshoot": 539, "ever": 539, "flask": 539, "toolbar": [539, 540], "_array_modul": [539, 542], "array_api_test": [539, 540, 542], "refresh": 539, "conftest": 539, "nutshel": [539, 554], "hook": 539, "lint": 539, "attempt": [539, 553, 573], "succe": 539, "properli": [539, 541, 552, 559, 561], "quick": [540, 541, 560, 569], "tendenc": 540, "land": 540, "world": [540, 581], "come": [540, 543, 547, 559, 562, 563, 569, 571, 574, 579], "fly": [540, 579], "hard": [540, 567, 579], "respons": [540, 547, 548], "internship": 540, "serv": [540, 543, 546, 554, 555, 559, 561, 563, 564, 574, 577], "suspect": 540, "act": [540, 550, 573, 586], "iii": 540, "reformat": [540, 553], "issue_numb": 540, "No": [540, 547, 579], "clean": [540, 562, 563, 565, 566, 568], "soon": [540, 547, 548, 571, 573], "respond": 540, "dai": 540, "freed": 540, "basi": [540, 542, 568], "situat": [540, 547, 570], "upon": [540, 550, 558, 561, 563, 573, 578, 579], "unabl": [540, 563], "obvious": [540, 547], "qualiti": 540, "hypothet": 540, "frustrat": 540, "delai": 540, "busi": 540, "fine": [540, 548, 550, 559, 567, 570, 585], "inact": 540, "me": 540, "unfairli": 540, "investig": 540, "incomplet": 540, "assign": [540, 544, 548, 553, 558, 567], "regist": 540, "wherea": [540, 543, 546, 548, 549, 550, 554, 555, 561, 562, 570, 576], "invit": 540, "roadmap": [540, 547], "ideal": [540, 547, 558, 563, 568], "easier": [540, 542, 543, 548, 559, 560, 562, 574, 579, 581], "forth": 540, "rare": [540, 549, 573, 584], "scenario": [540, 557], "someon": [540, 573], "unfortun": [540, 545], "practic": [540, 547, 559, 582], "separ": [540, 543, 546, 547, 561, 565, 567, 568, 580, 584], "date": [540, 562], "complic": [540, 560, 565], "merge_with_upstream": 540, "name_of_your_branch": 540, "abort": 540, "tediou": [540, 550, 563], "stash": 540, "reinstat": 540, "fetch": [540, 542, 547], "uncommit": 540, "unstag": 540, "untrack": 540, "comprehens": [540, 542], "atlassian": 540, "wrote": 540, "piec": [540, 543, 555, 556, 565, 575, 577], "blame": 540, "revis": 540, "eg": 540, "past": [540, 542, 560, 561, 579], "grep": 540, "commit_id": 540, "handi": 540, "histori": 540, "toggl": 540, "highlight": [540, 547, 550, 559], "whenev": [540, 547, 548, 552, 556, 558, 561, 568], "think": [540, 547, 550, 580], "approv": 540, "hash": [540, 568], "cancel": 540, "speedup": 540, "unavail": 540, "tickbox": 540, "span": [540, 563, 577, 585], "intent": [540, 558], "discourag": 540, "philosophi": 540, "valuabl": 540, "infrequ": 540, "earli": [540, 579], "wast": [540, 547], "spot": [540, 550, 555], "mistak": [540, 553], "propos": [540, 559, 563, 579], "mountain": 540, "advoc": [540, 573], "actual": [540, 541, 547, 555, 558, 559, 560, 561, 563, 564, 569, 573, 580, 585], "aim": [540, 542, 559, 561, 564, 577, 579, 582], "session": [540, 579], "beauti": 540, "particularli": [540, 568, 573, 577], "concern": [540, 541, 546, 550, 558, 563, 564, 585], "undo": 540, "stress": 540, "nifti": 540, "reassur": 540, "isol": [540, 580, 585], "fact": [540, 542, 547, 559, 561, 565, 568], "local_path_to_ivi": 540, "subfold": [540, 560, 561, 562], "dep": 540, "fresh": 540, "arsen": 540, "declar": 540, "exec": 540, "rf": 540, "cp": 540, "ivy_contain": 540, "test_imag": 540, "test_random_crop": 540, "test_creation_funct": 540, "test_arang": 540, "cursor": 540, "alt": 540, "blog": 540, "breakpoint": 540, "gutter": 540, "caret": 540, "f8": 540, "f9": 540, "Into": 540, "f7": 540, "smart": 540, "interest": 540, "fragment": [540, 575, 577, 581], "pychram": 540, "dummi": 540, "wherein": [540, 556, 561], "failur": [540, 547, 560, 561], "who": [541, 552, 564, 573, 579, 581], "weed": [541, 564], "tour": 541, "superset": [541, 559, 573], "goe": [541, 563], "dynam": [541, 548, 549, 558, 559, 565, 579, 583], "borrow": 541, "conjunct": 542, "establish": [542, 581], "2020": [542, 579], "popular": [542, 579], "sens": [542, 550, 559, 567], "unconnect": 542, "decis": [542, 546, 548, 559, 563, 565, 567, 579], "checkout": [542, 561], "everytim": [542, 548], "thoroughli": 542, "ci": [542, 548, 553, 560, 561, 573], "test_linalg": [542, 560], "test_set_funct": 542, "test_signatur": 542, "excess": [542, 544, 550], "array_modul": 542, "vv": 542, "test_manipulation_funct": 542, "test_concat": [542, 561], "nb": 542, "liber": 542, "bodi": [542, 561], "fortun": 542, "falsifi": [542, 561], "______________________": 542, "test_remaind": 542, "_______________________": 542, "test_operators_and_elementwise_funct": 542, "1264": 542, "st": [542, 560, 561], "1277": 542, "binary_param_assert_against_refimpl": 542, "ctx": 542, "mod": 542, "620": 542, "binary_assert_against_refimpl": 542, "324": 542, "scalar_o": 542, "assertionerror": [542, 552, 560, 561], "17304064": 542, "binaryparamcontext": 542, "reproduce_failur": [542, 561], "axic42baaowcnp": 542, "rumwmabaear0": 542, "make_binary_param": 542, "dh": 542, "numeric_dtyp": 542, "left_strat": 542, "left_sym": 542, "right_strat": 542, "right_sym": 542, "right_is_scalar": 542, "binary_param_assert_dtyp": 542, "binary_param_assert_shap": 542, "led": [542, 581], "unexpectedli": 542, "discrep": [542, 560], "varieti": [542, 547, 548, 549, 561, 575, 577, 581, 582, 585, 586], "test_asarray_arrai": 542, "test_floor_divid": 542, "health": 542, "test_iop": 542, "__imod__": 542, "isequ": 542, "test_matrix_norm": 542, "alter": 542, "tweak": 542, "array_api_methods_to_test": 542, "test_trac": 542, "latter": [542, 544, 548, 551, 559], "scheme": [542, 569, 579], "test_special_cas": 542, "__ipow__": 542, "is_integ": 542, "revisit": [542, 554], "_data": [543, 559, 567], "organiz": [543, 546, 559], "inherit": [543, 546, 552, 567, 573, 574], "bear": [543, 546, 548, 559], "underpin": [543, 546, 565], "programmat": [543, 546, 580], "backup": [543, 545, 546], "accident": [543, 546, 559], "readabl": [543, 546, 552, 554, 561, 562, 567, 568], "absent": [543, 546], "auto": [543, 545, 546, 568], "__mul__": [543, 546, 550, 554, 563, 567], "throw": [543, 548, 552, 567, 579], "imposs": 543, "firstli": [543, 548, 550, 551, 552, 555, 556, 558, 563, 568, 575, 585], "anywai": [543, 556, 559], "secondli": [543, 548], "permit": [543, 554, 559, 561, 563], "standalon": [543, 561, 574, 575, 580, 585, 586], "__ivy_array_function__": 543, "inspir": [543, 572], "__torch_function__": 543, "myarrai": 543, "handled_funct": 543, "notimpl": [543, 553], "four": [543, 548, 550, 554, 555, 561, 563, 568], "enough": [543, 547, 561, 567, 568, 569], "ivy_funct": 543, "my_ab": 543, "my_arrai": 543, "Of": [543, 559, 568, 584, 585], "subset": [543, 547, 551, 554, 557, 559, 561, 565, 579], "implicit_backend": [544, 565], "__dict__": [544, 565], "ivy_original_dict": [544, 565], "get_backend": [544, 555], "opt": [544, 548, 558, 561, 562, 563], "previous_backend": 544, "fallback": 544, "unset_backend": 544, "backend_handl": [544, 565], "requires_grad": 544, "memory_format": 544, "preserve_format": 544, "weren": 544, "vast": [544, 548, 579], "minor": [544, 563, 573], "fn_name_v_1p12_and_abov": 544, "fn_name_v_1p01_to_1p1": 544, "heavili": [545, 556, 559, 573], "characterist": 545, "conf": 545, "cleanup": 545, "disabl": 545, "procedur": [545, 547, 550], "segment": [545, 550], "toctre": 545, "maxdepth": 545, "related_work": 545, "deep_div": 545, "glossari": 545, "autosummari": 545, "top_level_toc": 545, "restructuredtext": 545, "render": [545, 551], "inlin": 545, "discov": [545, 548], "ivy_toctree_caption_map": 545, "stub": 545, "inturn": 545, "forc": [545, 547], "demonstr": [545, 548, 550, 552, 567], "underlin": 545, "remove_before_her": 545, "top_level_modul": 545, "fullnam": 545, "endfor": 545, "\u2139": 545, "foo": 545, "candid": 545, "postprocess": 545, "linker": 545, "discussion_channel_map": 545, "1000043690254946374": 545, "1028298816526499912": 545, "1000043749088436315": 545, "1028298847950225519": 545, "seri": [545, 559, 561, 579, 581], "discussion_paragraph": 545, "discord_link": 545, "channel_link": 545, "forum_link": 545, "gg": 545, "zvqdvbznqj": 545, "799879767196958751": 545, "channel_id": 545, "forum_id": 545, "paragraph": 545, "autoskippablemethod": 545, "skippable_method_attribut": 545, "__qualname__": 545, "five": [546, 568], "recap": [546, 550, 569], "arbitrarili": [546, 556, 568], "multi_map": 546, "containerwithelementwis": 546, "__repr__": 546, "__getattr__": 546, "__setattr__": 546, "__contains__": 546, "__getstate__": 546, "__setstate__": 546, "unpickl": 546, "num_dim": [546, 570], "__len__": 546, "restrict": [546, 547, 559, 565, 576], "enforc": [546, 567], "extern": [546, 554, 559, 561, 562], "c1": 546, "lefthand": 546, "righthand": 546, "addition": [546, 558, 559, 585], "counterpart": [546, 556], "absenc": [546, 554, 579], "implicitli": [546, 557, 561, 565], "log_pr": [546, 555, 558], "intuit": [546, 561, 568, 569, 575], "chronolog": 546, "concurr": [546, 547, 555, 579], "had": [546, 547, 558, 565, 579, 580], "But": [546, 547, 551, 556, 558, 563, 570], "flow": [546, 572, 579, 580], "implic": 546, "whatsoev": [546, 555, 574, 585], "implicit": [546, 551, 559, 561, 565, 579], "eager": [546, 573, 579], "children": 546, "shallowest": 546, "deepest": 546, "regularli": 547, "rollback": 547, "incorpor": [547, 568, 579], "fold": 547, "techniqu": 547, "triplet": 547, "test_torch": [547, 560], "test_tensor": [547, 560], "test_torch_instance_arctan_": 547, "7284": 547, "daili": 547, "shoot": 547, "impact": [547, 561, 569, 581], "_reduce_loss": 547, "test_nn": 547, "test_loss": 547, "test_binary_cross_entropy_with_logit": 547, "test_cross_entropi": 547, "test_binary_cross_entropi": 547, "test_sparse_cross_entropi": 547, "test_loss_funct": 547, "test_torch_binary_cross_entropi": 547, "test_torch_cross_entropi": 547, "torch_binary_cross_entropi": 547, "torch_cross_entropi": 547, "underneath": [547, 577], "magic": 547, "statement": [547, 553, 558, 561, 563, 573], "readthedoc": 547, "affect": [547, 559], "pedagog": 547, "f1": 547, "fm": 547, "yeah": 547, "cyclic": 547, "intellig": [547, 561, 563, 581], "tests_fil": 547, "file_nam": [547, 561, 562], "del": 547, "intersect": [547, 561, 572], "tests_lin": 547, "elif": [547, 552, 558, 559, 560], "correspondingli": 547, "tests_to_run": 547, "determine_tests_lin": 547, "mongodb": 547, "databas": [547, 561], "secret": 547, "db": 547, "ssh_deploy_kei": 547, "suffic": [547, 556, 561], "massiv": 547, "constraint": [547, 548, 557], "mb": 547, "yml": 547, "felicit": 547, "clone_map": 547, "home": 547, "deploy_kei": 547, "user_email": 547, "rashul": 547, "chutani": 547, "user_nam": 547, "target_branch": 547, "github_serv": 547, "deploy_key_fil": 547, "ssh_known_hosts_fil": 547, "known_host": 547, "keyscan": 547, "export": [547, 578, 585], "git_ssh_command": 547, "userknownhostsfil": 547, "methodologi": 547, "master1": 547, "restructur": 547, "index_map": 547, "test_map": 547, "routin": [547, 559, 563, 573, 579], "incorrect": 547, "snowbal": 547, "irrelev": [547, 548, 550], "recalibr": 547, "workflow_dispatch": 547, "schedul": [547, 573, 579, 586], "cron": 547, "saturdai": 547, "night": 547, "pm": 547, "gut": 547, "lesser": [547, 552], "lol": 547, "cater": 547, "master2": 547, "master32": 547, "synchron": 547, "runner2": 547, "corrupt": 547, "discard": 547, "decoupl": [547, 569], "150": 547, "cycl": [547, 561], "rashulchutani": 547, "yellow": 547, "queu": 547, "redirect": 547, "book": 547, "ran": 547, "badg": 547, "clickabl": 547, "all_dtyp": 548, "all_numeric_dtyp": 548, "all_int_dtyp": 548, "all_float_dtyp": 548, "replic": [548, 550, 557, 559, 563], "thirdli": 548, "native_float32": 548, "importantli": [548, 567, 570, 572], "conveni": [548, 549, 554, 560, 566, 568, 569, 574, 585], "arguabl": [548, 549, 559], "tabl": [548, 559, 579], "jaxarrai": [548, 549, 554, 558, 562, 565], "_handle_0_dim_output": [548, 558], "experiment": [548, 559, 562, 565, 579], "subtli": [548, 558], "promote_types_frontend_nam": 548, "promote_types_of_frontend_name_input": 548, "frontend_nam": 548, "accuraci": 548, "upcast": 548, "instabl": 548, "nearli": [548, 554, 556, 579], "downcast": 548, "footprint": 548, "concret": 548, "compound": 548, "settabl": [548, 549], "deleg": [548, 586], "shape_to_tupl": 548, "with_supported_dtyp": 548, "with_unsupported_dtyp": 548, "unment": 548, "backend_vers": 548, "_cast_for_unary_op": 548, "target_typ": 548, "unsupported_dtyp": 548, "former": [548, 551, 559], "lack": [548, 558, 579, 586], "patch": [548, 579], "subtl": [548, 562, 585], "offici": [548, 565], "inconsist": [548, 552, 557], "84530": 548, "unwarr": 548, "risk": [548, 585], "needlessli": 548, "bloat": 548, "undergo": [548, 573], "supported_dtyp": [548, 559], "unsupported_devic": 548, "supported_devic": 548, "slight": [548, 561, 569], "downsid": 548, "inflat": 548, "dual": 549, "categor": [549, 555, 559], "eight": [550, 564], "static_func_nam": 550, "op_nam": 550, "__r": 550, "combinatori": 550, "variat": [550, 559, 561], "unus": [550, 553, 558], "okai": [550, 563, 565], "meant": 550, "spec": [550, 551], "my_func": [550, 562], "some_flag": 550, "another_flag": 550, "jointli": 550, "5574077": 550, "1850398": 550, "5463025": 550, "8422884": 550, "91601413": 550, "9647598": 550, "3738229": 550, "1597457": 550, "0963247": 550, "9955841": 550, "3278579": 550, "pars": [550, 573], "asid": [550, 572], "increasingli": 550, "14254655": 550, "1578213": 550, "380515": 550, "trivial": 550, "exlud": 550, "failing_fn_nam": 550, "onlin": [550, 551], "minutest": 550, "suffici": [550, 559, 561], "fault": [550, 579], "contrast": [551, 554, 559, 585], "instanti": 551, "array_api": 551, "preview": 551, "incorrectli": 551, "needless": [551, 560], "renam": [551, 559], "judgment": 551, "operator_nam": 551, "succinct": 551, "contstructor": 551, "docst": 551, "_default": 552, "_delimit": 552, "comfort": 552, "encount": [552, 561], "julia": [552, 582, 585], "new_fn": [552, 559], "new_arg": 552, "new_kwarg": 552, "186": 552, "lib": 552, "site": [552, 580], "_src": 552, "219": 552, "_reduce_al": 552, "_ensure_optional_ax": 552, "213": [552, 561], "_reduct": 552, "lax": [552, 559, 560, 563, 570, 573], "preproc": 552, "_cast_to_bool": 552, "pos_dim": 552, "_reduction_dim": 552, "113": 552, "canon_axi": 552, "_canonicalize_axis_allow_nam": 552, "genexpr": 552, "106": 552, "maybe_named_axi": 552, "_canonicalize_axi": 552, "stdin": 552, "295": 552, "262": 552, "ivy_arg": 552, "ivy_kwarg": 552, "354": 552, "truth_value_test": 552, "121": 552, "switch": [552, 555, 556, 586], "visibl": 552, "unwieldi": 552, "awar": 552, "recov": [552, 559], "squash": 552, "hid": 552, "cleaner": [552, 568], "caught": 552, "functool": [552, 559, 567], "_print_traceback_histori": 552, "error_stack": 552, "axiserror": 552, "got": 552, "polici": [552, 561, 572], "moreov": 552, "met": 552, "flake8": 553, "annot": [553, 554], "star": 553, "byte": [553, 584, 585], "unsuccess": 553, "exceed": 553, "black": 553, "disobei": 553, "inde": [553, 554, 563, 573, 577], "adress": 554, "sole": [554, 562, 578, 579, 580], "strictli": [554, 558], "rational": 554, "__div__": [554, 563], "dicat": 554, "pep": 554, "484": 554, "brittl": 554, "freeli": 554, "technic": [554, 558, 573, 579, 581], "original_typ": 554, "cumbersom": 554, "venn": 555, "diagram": [555, 585], "light": [555, 559, 573, 574, 580, 585], "maximis": 555, "handle_mixed_funct": [555, 556, 563], "condition": 555, "reap": 555, "deal": [555, 557, 559, 573], "modif": [555, 579], "briefli": [555, 561, 568], "get_all_arrays_on_dev": 555, "inputs_to_ivy_arrai": 556, "integer_array_to_float": 556, "handle_cmd_line_arg": 556, "crucial": 557, "inter_func": 557, "custom_grad_fn": 557, "args1": 557, "detach": 557, "disambigu": 557, "eas": [557, 579], "captur": [557, 561, 570, 580], "program": [558, 576, 577, 579, 582, 583, 586], "ration": [558, 563], "speak": 558, "val_n": 558, "_is_vari": 558, "predominantli": [558, 562, 572], "support_native_out": [558, 565], "math": [558, 559, 560, 570, 577], "_wrap_fn": 558, "dim0": 558, "dim1": 558, "res_floor": 558, "mul": [558, 567], "extent": [558, 559], "maxim": [558, 565, 576, 577, 581, 582, 583], "capabl": [558, 561, 563], "input_arrai": 558, "tf_frontend": 559, "wrong": [559, 563], "torch_frontend": [559, 560], "numpy_frontend": 559, "jax_frontend": 559, "to_ivy_arrays_and_back": [559, 560], "fidel": 559, "algebra": [559, 577, 578, 579, 582, 586], "xla": [559, 573, 574, 579], "dynamic": 559, "mimic": 559, "arithmetic_oper": 559, "handle_numpy_out": 559, "handle_numpy_dtyp": 559, "handle_numpy_cast": 559, "from_zero_dim_arrays_to_scalar": 559, "_add": 559, "same_kind": 559, "subok": [559, 560, 563], "promote_types_of_numpy_input": 559, "underscor": 559, "obtain": 559, "unhandl": 559, "subclass": [559, 563], "trigonometric_funct": 559, "_tan": 559, "check_tensorflow_cast": 559, "raw_op": [559, 560], "tackl": 559, "map_raw_ops_alia": 559, "unnecessari": [559, 563], "output_typ": 559, "kwargs_to_upd": 559, "implemnt": 559, "pointwise_op": 559, "preferred_element_typ": 559, "finer": 559, "margin": 559, "meet": 559, "criteria": 559, "reduce_logsumexp": 559, "input_tensor": 559, "logsumexp": 559, "trick": 559, "max_input_tensor": 559, "omiss": 559, "sensibl": 559, "deem": 559, "reserv": 559, "resum": 559, "ahead": [559, 579], "heavi": [559, 560, 563, 580], "logicaland": 559, "np_frontend": 559, "_ivy_arrai": 559, "radd": 559, "_init_data": 559, "isinst": [559, 561, 562, 569, 570], "_process_str_data": 559, "_dtype": [559, 560, 567], "_shape": [559, 567], "govern": 559, "promote_types_of_": 559, "_input": 559, "promote_types_of_torch_input": [559, 560], "saniti": 559, "func_wrapp": 559, "handle_numpy_casting_speci": 559, "equiv": 559, "unsaf": 559, "array_type_test": 559, "_isfinit": 559, "organis": 559, "watch": 559, "youtub": 559, "jump": 560, "knowledg": 560, "lift": [560, 580], "get_dtyp": [560, 561], "dtype_and_valu": [560, 561], "get_shap": [560, 561], "np_frontend_help": 560, "test_jax": 560, "test_jax_lax_oper": 560, "dtype_and_x": [560, 561], "available_dtyp": [560, 561], "test_jax_lax_tan": 560, "test_numpi": 560, "test_mathematical_funct": 560, "test_np_trigonometric_funct": 560, "dtypes_values_cast": 560, "dtypes_values_casting_dtyp": 560, "arr_func": 560, "get_dtypes_kind": 560, "get_num_positional_args_ufunc": 560, "test_numpy_tan": 560, "handle_where_and_array_bool": 560, "test_tensorflow": 560, "test_math": 560, "test_tensorflow_tan": 560, "test_pointwise_op": 560, "test_torch_tan": 560, "_fill_valu": 560, "min_valu": [560, 561], "max_valu": [560, 561], "allow_non": [560, 561], "min_num_dim": [560, 561], "max_num_dim": [560, 561], "min_dim_s": [560, 561], "max_dim_s": 560, "test_jax_lax_ful": 560, "test_from_shape_or_valu": 560, "_input_fill_and_dtyp": 560, "dtype_and_input": 560, "dtype_to_cast": 560, "input_fill_dtyp": 560, "test_numpy_ful": 560, "test_tf_funct": 560, "test_tensorflow_fil": 560, "test_creation_op": 560, "test_torch_ful": 560, "add_nois": 560, "all_clos": 560, "_get_dtype_and_matrix": 560, "test_torch_qr": 560, "frontend_ret": 560, "frontend_q": 560, "frontend_r": 560, "walkthrough": 560, "comparison_op": 560, "test_comparison_op": 560, "num_arrai": [560, 561], "allow_inf": [560, 561], "shared_dtyp": 560, "test_torch_great": 560, "test_ndarrai": 560, "test_numpy_instance_add__": 560, "test_tensorflow_instance_add": 560, "eagertensor": 560, "1e04": 560, "allow_infin": 560, "test_torch_instance_add": 560, "_arrays_idx_n_dtyp": 560, "test_manipul": [560, 561], "surprisingli": 560, "cat": [560, 563, 565, 570], "closest_relevant_group": 560, "strive": [560, 561, 563, 573, 581], "exhaust": [561, 576, 585], "fixtur": 561, "hit": [561, 565], "eleg": [561, 579], "unexplor": 561, "upload": 561, "artifact": 561, "bespok": 561, "_array_or_typ": 561, "test_default_int_dtyp": 561, "clariti": [561, 563, 579], "print_hypothesis_exampl": 561, "custom_strategi": 561, "sampled_from": 561, "randomis": 561, "simplist": 561, "intricaci": 561, "glanc": 561, "stratigi": 561, "one_of": 561, "datum": 561, "pipe": 561, "overload": 561, "shorthand": 561, "scaler": 561, "array_or_scal": 561, "len_of_arrai": 561, "test_add": 561, "keywoard": 561, "test_gpu_is_avail": 561, "requri": 561, "summara": 561, "pretest": 561, "slighlti": 561, "pytet": 561, "snippet": 561, "thankfulli": 561, "mostli": 561, "seamlessli": 561, "criterion": 561, "array_valu": 561, "valid_ax": 561, "craft": 561, "hoc": 561, "44758124e": 561, "11228": 561, "456": 561, "268": 561, "wherev": 561, "dtype_values_axi": 561, "9622": 561, "28136": 561, "6375": 561, "12720": 561, "21354": 561, "900e": 561, "955e": 561, "exclude_min": 561, "large_abs_safety_factor": 561, "safety_factor_scal": 561, "57384": 561, "25687": 561, "248": 561, "array_dtyp": 561, "array_bool": 561, "na": 561, "test_devic": 561, "array_shap": 561, "common_shap": 561, "test_lay": 561, "size_bound": 561, "reshape_shap": 561, "stand": 561, "fashion": 561, "some_sequ": 561, "allow_nan": 561, "allow_subnorm": 561, "get_bound": 561, "arrays_valu": 561, "36418": 561, "21716926": 561, "none_or_list_of_float": 561, "get_prob": 561, "get_mean_std": 561, "103515625e": 561, "099609375": 561, "probabilist": 561, "get_axi": 561, "number_positional_argu": 561, "unreproduc": 561, "report": 561, "ivy_np": 561, "valid_float_dtyp": 561, "test_demo": 561, "failing_test": 561, "shrink": 561, "prescrib": 561, "scratch": 561, "therebi": 561, "test_gelu": 561, "test_fil": 561, "brief": 561, "phase": [561, 573, 579], "notabl": [561, 579], "verbos": [561, 565], "newer": 561, "max_exampl": 561, "deadlin": 561, "weird": 561, "systemat": 561, "safeguard": 561, "inabl": 561, "test_result_typ": 561, "9090909090909091": 561, "judgement": 562, "some_namespac": 562, "some_backend": 562, "another_backend": 562, "refactor": 562, "ongo": 562, "op": [562, 565, 573], "cooler": 562, "something_cool": 562, "_assert_fill_value_and_dtype_are_compat": 562, "_to_devic": 562, "shouldn": 562, "older": 562, "unbound": 562, "battl": 562, "answer": [563, 567, 573], "contradict": 563, "entail": 563, "sacrif": 563, "dimems": 563, "jacfwd": 563, "jacrev": 563, "banner": 563, "ravel": 563, "pointwis": 563, "fuse": 563, "tensorrt": 563, "expens": 563, "incredibli": [563, 568, 573, 582], "six": 563, "price": 563, "pai": 563, "intrus": 563, "x_beta": 563, "equip": 563, "priorit": 563, "simplif": 563, "allevi": 563, "ineffici": [563, 573, 579], "hybrid": 563, "workaround": 563, "bicubic_tensorflow": 563, "fulfil": 564, "fledg": [565, 566], "syntact": [565, 570], "power_seq": 565, "unset": 565, "backend_stack": 565, "_determine_backend_from_arg": 565, "importlib": 565, "_backend_dict": 565, "illustr": [565, 572], "x_shape": 565, "x_flat": 565, "wi": 565, "wi_x": 565, "wii_x": 565, "wif_x": 565, "wig_x": 565, "wio_x": 565, "wh": 565, "ht": 565, "ct": 565, "hts_list": 565, "wii_xt": 565, "wif_xt": 565, "wig_xt": 565, "wio_xt": 565, "zip": 565, "htm1": 565, "ctm1": 565, "wh_htm1": 565, "whi_htm1": 565, "whf_htm1": 565, "whg_htm1": 565, "who_htm1": 565, "ft": 565, "ot": 565, "reliabl": 565, "sacrific": 565, "hear": 565, "virtu": [565, 576], "pure_ivi": 565, "compile_graph": [565, 570], "pure_torch": 565, "_layer": 565, "unclean": 565, "wx": 565, "temp": 565, "ivy_func": 565, "emphas": 565, "torchscript": [565, 574, 586], "example_input": 565, "static_argnum": 565, "static_argnam": 565, "jit": [565, 573, 579], "primit": [566, 573, 577, 579], "upcom": 566, "hierarch": [566, 568, 569, 579], "arraywithactiv": 567, "arraywithcr": 567, "arraywithdatatyp": 567, "arraywithdevic": 567, "arraywithgener": 567, "arraywithgradi": 567, "arraywithimag": 567, "arraywithlay": 567, "arraywithlinearalgebra": 567, "arraywithloss": 567, "arraywithmanipul": 567, "arraywithnorm": 567, "arraywithrandom": 567, "arraywithsearch": 567, "arraywithset": 567, "arraywithsort": 567, "arraywithstatist": 567, "arraywithutil": 567, "_init": 567, "_size": 567, "_devic": 567, "_dev_str": 567, "_pre_repr": 567, "_post_repr": 567, "framework_str": 567, "noinspect": 567, "pypep8nam": 567, "immut": 567, "claim": 567, "truli": 567, "_native_wrapp": 567, "genuin": 567, "some_method": 567, "rewritten": 567, "strang": 567, "compartment": 567, "newshap": 567, "new_shap": 567, "tidi": 567, "crystal": 567, "ton": 568, "ado": [568, 569], "soup": 568, "walk": [568, 569], "cnt": 568, "combo": 568, "3333335": 568, "delimit": 568, "autocomplet": 568, "midwai": 568, "agent": 568, "total_spe": 568, "total_height": 568, "total_width": 568, "ag": 568, "tot": 568, "total_": 568, "total_h": 568, "cnt0": 568, "cnt1": 568, "diff_0": 568, "diff_1": 568, "config0": 568, "config1": 568, "decod": 568, "l0": 568, "decoder__l0": 568, "decoder__l1": 568, "encoder__l0": 568, "encoder__l1": 568, "l0__b": 568, "l0__w": 568, "l1__b": 568, "l1__w": 568, "printabl": 568, "obviou": [568, 579], "foresight": 568, "untidili": 568, "update_ag": 568, "normalize_img": 568, "img_max": 568, "reduce_max": 568, "img_min": 568, "reduce_min": 568, "img_rang": 568, "agent_posit": 568, "agent_veloc": 568, "agent_cam_front_rgb": 568, "agent_cam_front_depth": 568, "agent_cam_rear_rgb": 568, "agent_cam_rear_depth": 568, "agent_cam_lidar": 568, "camera": 568, "front_rgb": 568, "front_depth": 568, "rear_rgb": 568, "rear_depth": 568, "lidar": 568, "rgb": 568, "rear": 568, "veloc": 568, "cam": 568, "cam_max": 568, "cam_min": 568, "cam_rang": 568, "perman": 568, "thread": [568, 579], "pretti": [568, 585], "straightforward": 568, "dataload": [568, 571], "_cnt": 568, "img_": 568, "png": 568, "_dataset_s": 568, "_batch_siz": 568, "_count": [568, 569], "__next__": 568, "filenam": 568, "img_fnam": 568, "loaded_img": 568, "cv2": 568, "imread": 568, "from_numpi": 568, "batch_slic": 568, "reduce_mean": [568, 569, 570], "0145": 568, "addbackward0": 568, "_create_vari": 569, "_input_channel": 569, "_output_channel": 569, "_w_shape": 569, "_b_shape": 569, "_with_bia": 569, "396": 569, "764": 569, "872": 569, "211": 569, "439": 569, "nightmar": 569, "overcom": 569, "v0": 569, "v1": 569, "key0": 569, "linear3": 569, "v2": 569, "_w_init": 569, "_b_init": 569, "misnom": 569, "saw": 569, "_beta1": 569, "_beta2": 569, "_epsilon": 569, "_mw": 569, "_vw": 569, "_first_pass": 569, "_should_compil": 569, "new_v": 569, "_lr": 569, "_inplac": 569, "_stop_gradi": 569, "clip_by_valu": 570, "sparse_funct": 570, "new_axi": 570, "_linear": 570, "jax_graph": 570, "to_backend": 570, "thinli": 570, "to_haiku_modul": 570, "loss_fn_t": 570, "without_apply_rng": 570, "update_rul": 570, "tree_multimap": 570, "differenti": [572, 579], "pose": 572, "quaternion": 572, "ivy_mech": 572, "target_facing_rotation_matrix": 572, "polar_to_cartesian_coord": 572, "warp": 572, "optic": 572, "voxel": 572, "ivy_vis": 572, "coords_to_voxel_grid": 572, "render_pixel_coord": 572, "radianc": 572, "nerf": 572, "trajectori": 572, "motion": 572, "mobil": [572, 579], "sample_spline_path": 572, "rigidmobil": 572, "sample_bodi": 572, "drone": 572, "sample_link": 572, "openai": 572, "swimmer": 572, "reward": 572, "supervis": 572, "door": [572, 573], "cartpol": 572, "mountain_car": 572, "pendulum": 572, "reacher": 572, "learnt": 572, "ture": 572, "ntm": 572, "egospher": 572, "esm": 572, "ivy_memori": 572, "egocentr": 572, "room": 572, "doubt": 573, "grate": 573, "probe": 573, "remark": 573, "surpris": 573, "lock": 573, "gold": 573, "dex": 573, "ye": 573, "scan": 573, "tricki": [573, 574], "predictor": 573, "tight": 573, "driver": 573, "dispatch": [573, 579, 582], "ast": 573, "checkpoint": 573, "autodiff": 573, "shine": 573, "merci": 573, "autograd": 573, "compet": [573, 579], "paradigm": [573, 579], "parallelis": 573, "spmd": 573, "mixtur": 573, "expert": 573, "sophist": 573, "depart": 573, "hundr": 573, "thousand": 573, "broadli": [573, 585], "supplementari": 573, "reusabl": [573, 577, 579], "fanci": [573, 579], "fusion": [573, 583], "lose": 573, "pmap": 573, "overhead": [573, 582], "eventu": 573, "supplement": 573, "backdoor": 573, "callback": 573, "record": [573, 580], "somewhat": [573, 579], "outsourc": 573, "nail": 574, "funtion": 574, "asset": 574, "scientist": 574, "correl": 574, "analyz": 574, "conceptu": [575, 580], "broken": [575, 579], "tracer": 575, "infrastructur": [575, 581, 582], "vendor": [575, 581], "complimentari": [575, 585], "acycl": [575, 580], "insert_numb": 576, "insert_t": 576, "scaffold": [577, 585], "heart": 577, "toolchain": [577, 582], "intermedi": [577, 578, 579, 580, 585], "ir": [577, 580, 585], "assembli": [577, 584, 585], "idl": 577, "middl": 577, "emit": 577, "gnu": [577, 582], "gcc": [577, 584], "broader": 577, "heterogen": 577, "aid": 577, "coprocessor": 577, "programm": [577, 584], "gate": 577, "onednn": 577, "sit": [577, 580, 585], "tandem": 577, "possess": 577, "khrono": [578, 584], "appl": 578, "interact": [578, 579, 584], "coremltool": 578, "albeit": 578, "promin": 579, "abbrevi": 579, "laboratori": 579, "proprietari": [579, 583, 584], "mathwork": 579, "commerci": 579, "1984": 579, "toolbox": 579, "mupad": 579, "simulink": 579, "graphic": [579, 583, 584], "simul": 579, "million": [579, 582], "worldwid": 579, "scienc": [579, 581], "econom": 579, "2001": 579, "scientif": 579, "od": 579, "solver": 579, "cython": 579, "friendli": 579, "2002": 579, "lua": 579, "luajit": 579, "idiap": 579, "epfl": 579, "2005": 579, "numarrai": 579, "cpython": 579, "partli": 579, "2007": 579, "regress": [579, 586], "forest": 579, "boost": 579, "dbscan": 579, "inbuilt": 579, "esqu": 579, "aesara": 579, "2008": 579, "datafram": 579, "critic": [579, 585], "2012": 579, "Its": 579, "polymorph": 579, "parallel": [579, 583, 584], "mpi": 579, "openmp": 579, "glue": 579, "jaot": 579, "nasa": 579, "cern": 579, "climat": 579, "allianc": 579, "influenti": 579, "2014": 579, "analyt": [579, 581, 585], "scala": 579, "ship": 579, "forgiv": 579, "decemb": 579, "announc": 579, "transit": 579, "mainten": 579, "v7": 579, "meaning": 579, "2016": 579, "imper": 579, "amazon": 579, "traction": 579, "cognit": [579, 586], "toolkit": [579, 580, 586], "grade": 579, "realiz": 579, "dnn": 579, "cnn": 579, "rnn": 579, "backpropag": 579, "succumb": 579, "came": 579, "monitor": 579, "practition": [579, 583, 584, 585], "hobbyist": 579, "tremend": 579, "ecosystem": 579, "gear": 579, "batteri": 579, "zygot": 579, "jl": 579, "workload": 579, "daggerflux": 579, "frontier": 579, "hessian": 579, "2018": 579, "lightweight": [579, 586], "shortcom": 579, "barrier": 579, "inexperienc": 579, "underdevelop": 579, "fanat": 579, "ounc": 579, "infanc": 579, "emerg": 579, "nich": 579, "introduct": 579, "lite": 579, "enterpris": 579, "reinvent": [579, 581], "inertia": 579, "haven": 579, "creator": [579, 581], "paszk": 579, "hi": 579, "safeti": 579, "bulk": 579, "haskel": 579, "dataflow": 580, "distil": 580, "essenc": [580, 585], "enclos": 580, "scope": [580, 584], "trace_modul": 580, "scriptfunct": 580, "scriptmodul": 580, "fake": 580, "proxi": 580, "graphmodul": 580, "travi": 581, "oliph": 581, "leader": 581, "cornerston": 581, "numba": 581, "numfocu": 581, "pydata": 581, "confer": 581, "consult": 581, "servic": 581, "expertis": 581, "devop": 581, "mlop": 581, "dashboard": 581, "startup": 581, "mlir": [581, 582, 585], "Their": 581, "held": 581, "privileg": 581, "presum": 581, "llvm": [581, 584], "founder": 581, "tvm": [581, 585], "sustain": 581, "empow": 581, "har": 581, "burden": 581, "benchmark": 581, "convention": 582, "precompil": 582, "executor": 582, "exploit": 582, "fsf": 582, "gpl": 582, "biggest": [582, 585], "nvidia": [583, 584], "conduct": 583, "throughput": 583, "autotun": 583, "consumpt": 583, "gpgpu": 583, "talk": 584, "classic": 584, "sycl": 584, "dpc": 584, "processor": 584, "maco": 584, "x86": 584, "oneapi": 584, "ia": 584, "aka": 584, "xeon": 584, "gen9": 584, "xe": 584, "card": 584, "arria": 584, "gx": 584, "fpga": 584, "tune": [584, 585], "lofti": 585, "ambit": 585, "realm": 585, "bedrock": 585, "flux": 585, "bite": 585, "chew": 585, "eagerpi": 585, "tensorli": 585, "thinc": 585, "neuropod": 585, "exhibit": 585, "emploi": 585, "fx": 585, "retrain": 585, "wider": 585, "closer": 585, "greatli": 585, "challeng": 585, "modular": 585, "anywher": 585, "theano": 586, "plaidml": 586, "partial_svd": 586, "tucker_mode_dot": 586, "excel": 586, "subsystem": 586}, "objects": {"ivy.Array": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [342, 0, 1, "", "adam_step"], [343, 0, 1, "", "adam_update"], [177, 0, 1, "", "add"], [509, 0, 1, "", "all"], [247, 0, 1, "", "all_equal"], [510, 0, 1, "", "any"], [486, 0, 1, "", "argmax"], [487, 0, 1, "", "argmin"], [495, 0, 1, "", "argsort"], [488, 0, 1, "", "argwhere"], [250, 0, 1, "", "array_equal"], [75, 0, 1, "", "asarray"], [178, 0, 1, "", "asin"], [179, 0, 1, "", "asinh"], [251, 0, 1, "", "assert_supports_inplace"], [108, 0, 1, "", "astype"], [180, 0, 1, "", "atan"], [181, 0, 1, "", "atan2"], [182, 0, 1, "", "atanh"], [428, 0, 1, "", "binary_cross_entropy"], [183, 0, 1, "", "bitwise_and"], [184, 0, 1, "", "bitwise_invert"], [185, 0, 1, "", "bitwise_left_shift"], [186, 0, 1, "", "bitwise_or"], [187, 0, 1, "", "bitwise_right_shift"], [188, 0, 1, "", "bitwise_xor"], [109, 0, 1, "", "broadcast_arrays"], [110, 0, 1, "", "broadcast_to"], [111, 0, 1, "", "can_cast"], [189, 0, 1, "", "ceil"], [397, 0, 1, "", "cholesky"], [432, 0, 1, "", "clip"], [253, 0, 1, "", "clip_matrix_norm"], [254, 0, 1, "", "clip_vector_norm"], [433, 0, 1, "", "concat"], [434, 0, 1, "", "constant_pad"], [383, 0, 1, "", "conv1d"], [384, 0, 1, "", "conv1d_transpose"], [385, 0, 1, "", "conv2d"], [386, 0, 1, "", "conv2d_transpose"], [387, 0, 1, "", "conv3d"], [388, 0, 1, "", "conv3d_transpose"], [79, 0, 1, "", "copy_array"], [190, 0, 1, "", "cos"], [191, 0, 1, "", "cosh"], [398, 0, 1, "", "cross"], [429, 0, 1, "", "cross_entropy"], [499, 0, 1, "", "cumprod"], [500, 0, 1, "", "cumsum"], [257, 0, 1, "", "default"], [192, 0, 1, "", "deg2rad"], [391, 0, 1, "", "depthwise_conv2d"], [399, 0, 1, "", "det"], [154, 0, 1, "", "dev"], [400, 0, 1, "", "diag"], [401, 0, 1, "", "diagonal"], [193, 0, 1, "", "divide"], [392, 0, 1, "", "dropout"], [119, 0, 1, "", "dtype"], [402, 0, 1, "", "eig"], [403, 0, 1, "", "eigh"], [404, 0, 1, "", "eigvalsh"], [258, 0, 1, "", "einops_rearrange"], [259, 0, 1, "", "einops_reduce"], [260, 0, 1, "", "einops_repeat"], [501, 0, 1, "", "einsum"], [81, 0, 1, "", "empty_like"], [194, 0, 1, "", "equal"], [195, 0, 1, "", "erf"], [261, 0, 1, "", "exists"], [196, 0, 1, "", "exp"], [435, 0, 1, "", "expand_dims"], [197, 0, 1, "", "expm1"], [121, 0, 1, "", "finfo"], [436, 0, 1, "", "flip"], [198, 0, 1, "", "floor"], [199, 0, 1, "", "floor_divide"], [200, 0, 1, "", "fmod"], [262, 0, 1, "", "fourier_encode"], [83, 0, 1, "", "from_dlpack"], [85, 0, 1, "", "full_like"], [265, 0, 1, "", "gather"], [266, 0, 1, "", "gather_nd"], [59, 0, 1, "", "gelu"], [274, 0, 1, "", "get_num_dims"], [346, 0, 1, "", "gradient_descent_update"], [201, 0, 1, "", "greater"], [202, 0, 1, "", "greater_equal"], [279, 0, 1, "", "has_nans"], [124, 0, 1, "", "iinfo"], [405, 0, 1, "", "inner"], [281, 0, 1, "", "inplace_decrement"], [282, 0, 1, "", "inplace_increment"], [283, 0, 1, "", "inplace_update"], [406, 0, 1, "", "inv"], [285, 0, 1, "", "is_array"], [127, 0, 1, "", "is_bool_dtype"], [129, 0, 1, "", "is_float_dtype"], [130, 0, 1, "", "is_int_dtype"], [286, 0, 1, "", "is_ivy_array"], [287, 0, 1, "", "is_ivy_container"], [288, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [203, 0, 1, "", "isfinite"], [289, 0, 1, "", "isin"], [204, 0, 1, "", "isinf"], [205, 0, 1, "", "isnan"], [206, 0, 1, "", "isreal"], [348, 0, 1, "", "lamb_update"], [349, 0, 1, "", "lars_update"], [475, 0, 1, "", "layer_norm"], [61, 0, 1, "", "leaky_relu"], [207, 0, 1, "", "less"], [208, 0, 1, "", "less_equal"], [393, 0, 1, "", "linear"], [86, 0, 1, "", "linspace"], [209, 0, 1, "", "log"], [210, 0, 1, "", "log10"], [211, 0, 1, "", "log1p"], [212, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [213, 0, 1, "", "logaddexp"], [214, 0, 1, "", "logical_and"], [215, 0, 1, "", "logical_not"], [216, 0, 1, "", "logical_or"], [217, 0, 1, "", "logical_xor"], [87, 0, 1, "", "logspace"], [394, 0, 1, "", "lstm_update"], [408, 0, 1, "", "matmul"], [409, 0, 1, "", "matrix_norm"], [410, 0, 1, "", "matrix_power"], [411, 0, 1, "", "matrix_rank"], [412, 0, 1, "", "matrix_transpose"], [502, 0, 1, "", "max"], [218, 0, 1, "", "maximum"], [503, 0, 1, "", "mean"], [88, 0, 1, "", "meshgrid"], [504, 0, 1, "", "min"], [219, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [395, 0, 1, "", "multi_head_attention"], [480, 0, 1, "", "multinomial"], [220, 0, 1, "", "multiply"], [89, 0, 1, "", "native_array"], [221, 0, 1, "", "negative"], [489, 0, 1, "", "nonzero"], [222, 0, 1, "", "not_equal"], [90, 0, 1, "", "one_hot"], [92, 0, 1, "", "ones_like"], [350, 0, 1, "", "optimizer_update"], [413, 0, 1, "", "outer"], [437, 0, 1, "", "permute_dims"], [414, 0, 1, "", "pinv"], [223, 0, 1, "", "positive"], [224, 0, 1, "", "pow"], [505, 0, 1, "", "prod"], [415, 0, 1, "", "qr"], [225, 0, 1, "", "rad2deg"], [481, 0, 1, "", "randint"], [482, 0, 1, "", "random_normal"], [483, 0, 1, "", "random_uniform"], [226, 0, 1, "", "reciprocal"], [64, 0, 1, "", "relu"], [227, 0, 1, "", "remainder"], [438, 0, 1, "", "repeat"], [439, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [440, 0, 1, "", "roll"], [228, 0, 1, "", "round"], [396, 0, 1, "", "scaled_dot_product_attention"], [295, 0, 1, "", "scatter_flat"], [296, 0, 1, "", "scatter_nd"], [496, 0, 1, "", "searchsorted"], [306, 0, 1, "", "shape"], [485, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [229, 0, 1, "", "sign"], [230, 0, 1, "", "sin"], [231, 0, 1, "", "sinh"], [416, 0, 1, "", "slogdet"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [417, 0, 1, "", "solve"], [497, 0, 1, "", "sort"], [430, 0, 1, "", "sparse_cross_entropy"], [441, 0, 1, "", "split"], [232, 0, 1, "", "sqrt"], [233, 0, 1, "", "square"], [442, 0, 1, "", "squeeze"], [308, 0, 1, "", "stable_divide"], [309, 0, 1, "", "stable_pow"], [443, 0, 1, "", "stack"], [506, 0, 1, "", "std"], [352, 0, 1, "", "stop_gradient"], [234, 0, 1, "", "subtract"], [507, 0, 1, "", "sum"], [310, 0, 1, "", "supports_inplace_updates"], [418, 0, 1, "", "svd"], [419, 0, 1, "", "svdvals"], [444, 0, 1, "", "swapaxes"], [235, 0, 1, "", "tan"], [236, 0, 1, "", "tanh"], [420, 0, 1, "", "tensordot"], [421, 0, 1, "", "tensorsolve"], [445, 0, 1, "", "tile"], [169, 0, 1, "", "to_device"], [312, 0, 1, "", "to_list"], [314, 0, 1, "", "to_numpy"], [315, 0, 1, "", "to_scalar"], [422, 0, 1, "", "trace"], [93, 0, 1, "", "tril"], [94, 0, 1, "", "triu"], [237, 0, 1, "", "trunc"], [238, 0, 1, "", "trunc_divide"], [491, 0, 1, "", "unique_all"], [492, 0, 1, "", "unique_counts"], [493, 0, 1, "", "unique_inverse"], [494, 0, 1, "", "unique_values"], [446, 0, 1, "", "unstack"], [323, 0, 1, "", "value_is_nan"], [423, 0, 1, "", "vander"], [508, 0, 1, "", "var"], [424, 0, 1, "", "vecdot"], [425, 0, 1, "", "vector_norm"], [426, 0, 1, "", "vector_to_skew_symmetric_matrix"], [490, 0, 1, "", "where"], [447, 0, 1, "", "zero_pad"], [96, 0, 1, "", "zeros_like"]], "ivy.Container": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [342, 0, 1, "", "adam_step"], [343, 0, 1, "", "adam_update"], [177, 0, 1, "", "add"], [509, 0, 1, "", "all"], [247, 0, 1, "", "all_equal"], [510, 0, 1, "", "any"], [486, 0, 1, "", "argmax"], [487, 0, 1, "", "argmin"], [495, 0, 1, "", "argsort"], [488, 0, 1, "", "argwhere"], [250, 0, 1, "", "array_equal"], [178, 0, 1, "", "asin"], [179, 0, 1, "", "asinh"], [251, 0, 1, "", "assert_supports_inplace"], [108, 0, 1, "", "astype"], [180, 0, 1, "", "atan"], [181, 0, 1, "", "atan2"], [182, 0, 1, "", "atanh"], [428, 0, 1, "", "binary_cross_entropy"], [183, 0, 1, "", "bitwise_and"], [184, 0, 1, "", "bitwise_invert"], [185, 0, 1, "", "bitwise_left_shift"], [186, 0, 1, "", "bitwise_or"], [187, 0, 1, "", "bitwise_right_shift"], [188, 0, 1, "", "bitwise_xor"], [109, 0, 1, "", "broadcast_arrays"], [110, 0, 1, "", "broadcast_to"], [111, 0, 1, "", "can_cast"], [189, 0, 1, "", "ceil"], [397, 0, 1, "", "cholesky"], [432, 0, 1, "", "clip"], [253, 0, 1, "", "clip_matrix_norm"], [254, 0, 1, "", "clip_vector_norm"], [433, 0, 1, "", "concat"], [434, 0, 1, "", "constant_pad"], [383, 0, 1, "", "conv1d"], [384, 0, 1, "", "conv1d_transpose"], [385, 0, 1, "", "conv2d"], [386, 0, 1, "", "conv2d_transpose"], [387, 0, 1, "", "conv3d"], [388, 0, 1, "", "conv3d_transpose"], [190, 0, 1, "", "cos"], [191, 0, 1, "", "cosh"], [398, 0, 1, "", "cross"], [429, 0, 1, "", "cross_entropy"], [499, 0, 1, "", "cumprod"], [500, 0, 1, "", "cumsum"], [192, 0, 1, "", "deg2rad"], [391, 0, 1, "", "depthwise_conv2d"], [399, 0, 1, "", "det"], [154, 0, 1, "", "dev"], [400, 0, 1, "", "diag"], [401, 0, 1, "", "diagonal"], [193, 0, 1, "", "divide"], [392, 0, 1, "", "dropout"], [119, 0, 1, "", "dtype"], [402, 0, 1, "", "eig"], [403, 0, 1, "", "eigh"], [404, 0, 1, "", "eigvalsh"], [258, 0, 1, "", "einops_rearrange"], [259, 0, 1, "", "einops_reduce"], [260, 0, 1, "", "einops_repeat"], [501, 0, 1, "", "einsum"], [81, 0, 1, "", "empty_like"], [194, 0, 1, "", "equal"], [195, 0, 1, "", "erf"], [196, 0, 1, "", "exp"], [435, 0, 1, "", "expand_dims"], [197, 0, 1, "", "expm1"], [121, 0, 1, "", "finfo"], [436, 0, 1, "", "flip"], [198, 0, 1, "", "floor"], [199, 0, 1, "", "floor_divide"], [200, 0, 1, "", "fmod"], [262, 0, 1, "", "fourier_encode"], [83, 0, 1, "", "from_dlpack"], [85, 0, 1, "", "full_like"], [265, 0, 1, "", "gather"], [266, 0, 1, "", "gather_nd"], [59, 0, 1, "", "gelu"], [60, 0, 1, "", "get"], [274, 0, 1, "", "get_num_dims"], [346, 0, 1, "", "gradient_descent_update"], [201, 0, 1, "", "greater"], [202, 0, 1, "", "greater_equal"], [279, 0, 1, "", "has_nans"], [124, 0, 1, "", "iinfo"], [405, 0, 1, "", "inner"], [281, 0, 1, "", "inplace_decrement"], [282, 0, 1, "", "inplace_increment"], [283, 0, 1, "", "inplace_update"], [406, 0, 1, "", "inv"], [285, 0, 1, "", "is_array"], [127, 0, 1, "", "is_bool_dtype"], [128, 0, 1, "", "is_complex_dtype"], [129, 0, 1, "", "is_float_dtype"], [130, 0, 1, "", "is_int_dtype"], [286, 0, 1, "", "is_ivy_array"], [288, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [203, 0, 1, "", "isfinite"], [289, 0, 1, "", "isin"], [204, 0, 1, "", "isinf"], [205, 0, 1, "", "isnan"], [206, 0, 1, "", "isreal"], [348, 0, 1, "", "lamb_update"], [349, 0, 1, "", "lars_update"], [475, 0, 1, "", "layer_norm"], [61, 0, 1, "", "leaky_relu"], [207, 0, 1, "", "less"], [208, 0, 1, "", "less_equal"], [393, 0, 1, "", "linear"], [86, 0, 1, "", "linspace"], [209, 0, 1, "", "log"], [210, 0, 1, "", "log10"], [211, 0, 1, "", "log1p"], [212, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [213, 0, 1, "", "logaddexp"], [214, 0, 1, "", "logical_and"], [215, 0, 1, "", "logical_not"], [216, 0, 1, "", "logical_or"], [217, 0, 1, "", "logical_xor"], [87, 0, 1, "", "logspace"], [394, 0, 1, "", "lstm_update"], [408, 0, 1, "", "matmul"], [409, 0, 1, "", "matrix_norm"], [410, 0, 1, "", "matrix_power"], [411, 0, 1, "", "matrix_rank"], [412, 0, 1, "", "matrix_transpose"], [502, 0, 1, "", "max"], [218, 0, 1, "", "maximum"], [503, 0, 1, "", "mean"], [88, 0, 1, "", "meshgrid"], [504, 0, 1, "", "min"], [219, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [395, 0, 1, "", "multi_head_attention"], [480, 0, 1, "", "multinomial"], [220, 0, 1, "", "multiply"], [89, 0, 1, "", "native_array"], [221, 0, 1, "", "negative"], [489, 0, 1, "", "nonzero"], [222, 0, 1, "", "not_equal"], [90, 0, 1, "", "one_hot"], [92, 0, 1, "", "ones_like"], [350, 0, 1, "", "optimizer_update"], [413, 0, 1, "", "outer"], [437, 0, 1, "", "permute_dims"], [414, 0, 1, "", "pinv"], [223, 0, 1, "", "positive"], [224, 0, 1, "", "pow"], [505, 0, 1, "", "prod"], [415, 0, 1, "", "qr"], [225, 0, 1, "", "rad2deg"], [481, 0, 1, "", "randint"], [482, 0, 1, "", "random_normal"], [483, 0, 1, "", "random_uniform"], [226, 0, 1, "", "reciprocal"], [64, 0, 1, "", "relu"], [227, 0, 1, "", "remainder"], [438, 0, 1, "", "repeat"], [439, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [440, 0, 1, "", "roll"], [228, 0, 1, "", "round"], [396, 0, 1, "", "scaled_dot_product_attention"], [295, 0, 1, "", "scatter_flat"], [296, 0, 1, "", "scatter_nd"], [496, 0, 1, "", "searchsorted"], [485, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [229, 0, 1, "", "sign"], [230, 0, 1, "", "sin"], [231, 0, 1, "", "sinh"], [416, 0, 1, "", "slogdet"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [417, 0, 1, "", "solve"], [497, 0, 1, "", "sort"], [430, 0, 1, "", "sparse_cross_entropy"], [441, 0, 1, "", "split"], [232, 0, 1, "", "sqrt"], [233, 0, 1, "", "square"], [442, 0, 1, "", "squeeze"], [308, 0, 1, "", "stable_divide"], [309, 0, 1, "", "stable_pow"], [443, 0, 1, "", "stack"], [506, 0, 1, "", "std"], [352, 0, 1, "", "stop_gradient"], [234, 0, 1, "", "subtract"], [507, 0, 1, "", "sum"], [310, 0, 1, "", "supports_inplace_updates"], [418, 0, 1, "", "svd"], [419, 0, 1, "", "svdvals"], [444, 0, 1, "", "swapaxes"], [235, 0, 1, "", "tan"], [236, 0, 1, "", "tanh"], [420, 0, 1, "", "tensordot"], [421, 0, 1, "", "tensorsolve"], [445, 0, 1, "", "tile"], [169, 0, 1, "", "to_device"], [312, 0, 1, "", "to_list"], [314, 0, 1, "", "to_numpy"], [315, 0, 1, "", "to_scalar"], [422, 0, 1, "", "trace"], [93, 0, 1, "", "tril"], [94, 0, 1, "", "triu"], [237, 0, 1, "", "trunc"], [238, 0, 1, "", "trunc_divide"], [491, 0, 1, "", "unique_all"], [492, 0, 1, "", "unique_counts"], [493, 0, 1, "", "unique_inverse"], [494, 0, 1, "", "unique_values"], [446, 0, 1, "", "unstack"], [323, 0, 1, "", "value_is_nan"], [423, 0, 1, "", "vander"], [508, 0, 1, "", "var"], [424, 0, 1, "", "vecdot"], [425, 0, 1, "", "vector_norm"], [426, 0, 1, "", "vector_to_skew_symmetric_matrix"], [490, 0, 1, "", "where"], [447, 0, 1, "", "zero_pad"], [96, 0, 1, "", "zeros_like"]], "ivy": [[68, 1, 1, "", "IfElse"], [69, 1, 1, "", "WhileLoop"], [174, 1, 1, "", "abs"], [175, 1, 1, "", "acos"], [176, 1, 1, "", "acosh"], [342, 1, 1, "", "adam_step"], [343, 1, 1, "", "adam_update"], [177, 1, 1, "", "add"], [509, 1, 1, "", "all"], [247, 1, 1, "", "all_equal"], [456, 1, 1, "", "all_nested_indices"], [510, 1, 1, "", "any"], [73, 1, 1, "", "arange"], [248, 1, 1, "", "arg_info"], [249, 1, 1, "", "arg_names"], [486, 1, 1, "", "argmax"], [487, 1, 1, "", "argmin"], [495, 1, 1, "", "argsort"], [488, 1, 1, "", "argwhere"], [74, 1, 1, "", "array"], [250, 1, 1, "", "array_equal"], [150, 1, 1, "", "as_ivy_dev"], [106, 1, 1, "", "as_ivy_dtype"], [151, 1, 1, "", "as_native_dev"], [107, 1, 1, "", "as_native_dtype"], [75, 1, 1, "", "asarray"], [76, 1, 1, "", "asarray_handle_nestable"], [77, 1, 1, "", "asarray_infer_device"], [78, 1, 1, "", "asarray_to_native_arrays_and_back"], [178, 1, 1, "", "asin"], [179, 1, 1, "", "asinh"], [251, 1, 1, "", "assert_supports_inplace"], [108, 1, 1, "", "astype"], [180, 1, 1, "", "atan"], [181, 1, 1, "", "atan2"], [182, 1, 1, "", "atanh"], [428, 1, 1, "", "binary_cross_entropy"], [183, 1, 1, "", "bitwise_and"], [184, 1, 1, "", "bitwise_invert"], [185, 1, 1, "", "bitwise_left_shift"], [186, 1, 1, "", "bitwise_or"], [187, 1, 1, "", "bitwise_right_shift"], [188, 1, 1, "", "bitwise_xor"], [109, 1, 1, "", "broadcast_arrays"], [110, 1, 1, "", "broadcast_to"], [252, 1, 1, "", "cache_fn"], [111, 1, 1, "", "can_cast"], [189, 1, 1, "", "ceil"], [112, 1, 1, "", "check_float"], [397, 1, 1, "", "cholesky"], [152, 1, 1, "", "clear_cached_mem_on_dev"], [432, 1, 1, "", "clip"], [253, 1, 1, "", "clip_matrix_norm"], [254, 1, 1, "", "clip_vector_norm"], [113, 1, 1, "", "closest_valid_dtype"], [433, 1, 1, "", "concat"], [434, 1, 1, "", "constant_pad"], [255, 1, 1, "", "container_types"], [382, 1, 1, "", "conv"], [383, 1, 1, "", "conv1d"], [384, 1, 1, "", "conv1d_transpose"], [385, 1, 1, "", "conv2d"], [386, 1, 1, "", "conv2d_transpose"], [387, 1, 1, "", "conv3d"], [388, 1, 1, "", "conv3d_transpose"], [389, 1, 1, "", "conv_general_dilated"], [390, 1, 1, "", "conv_general_transpose"], [79, 1, 1, "", "copy_array"], [457, 1, 1, "", "copy_nest"], [190, 1, 1, "", "cos"], [191, 1, 1, "", "cosh"], [398, 1, 1, "", "cross"], [429, 1, 1, "", "cross_entropy"], [499, 1, 1, "", "cumprod"], [500, 1, 1, "", "cumsum"], [256, 1, 1, "", "current_backend_str"], [257, 1, 1, "", "default"], [114, 1, 1, "", "default_complex_dtype"], [153, 1, 1, "", "default_device"], [115, 1, 1, "", "default_dtype"], [116, 1, 1, "", "default_float_dtype"], [117, 1, 1, "", "default_int_dtype"], [118, 1, 1, "", "default_uint_dtype"], [192, 1, 1, "", "deg2rad"], [391, 1, 1, "", "depthwise_conv2d"], [58, 1, 1, "", "deserialize"], [399, 1, 1, "", "det"], [154, 1, 1, "", "dev"], [155, 1, 1, "", "dev_util"], [400, 1, 1, "", "diag"], [401, 1, 1, "", "diagonal"], [193, 1, 1, "", "divide"], [392, 1, 1, "", "dropout"], [119, 1, 1, "", "dtype"], [120, 1, 1, "", "dtype_bits"], [458, 1, 1, "", "duplicate_array_index_chains"], [402, 1, 1, "", "eig"], [403, 1, 1, "", "eigh"], [404, 1, 1, "", "eigvalsh"], [258, 1, 1, "", "einops_rearrange"], [259, 1, 1, "", "einops_reduce"], [260, 1, 1, "", "einops_repeat"], [501, 1, 1, "", "einsum"], [80, 1, 1, "", "empty"], [81, 1, 1, "", "empty_like"], [194, 1, 1, "", "equal"], [195, 1, 1, "", "erf"], [344, 1, 1, "", "execute_with_gradients"], [261, 1, 1, "", "exists"], [196, 1, 1, "", "exp"], [435, 1, 1, "", "expand_dims"], [197, 1, 1, "", "expm1"], [82, 1, 1, "", "eye"], [121, 1, 1, "", "finfo"], [436, 1, 1, "", "flip"], [198, 1, 1, "", "floor"], [199, 1, 1, "", "floor_divide"], [200, 1, 1, "", "fmod"], [453, 1, 1, "", "fomaml_step"], [262, 1, 1, "", "fourier_encode"], [83, 1, 1, "", "from_dlpack"], [84, 1, 1, "", "full"], [85, 1, 1, "", "full_like"], [156, 1, 1, "", "function_supported_devices"], [263, 1, 1, "", "function_supported_devices_and_dtypes"], [122, 1, 1, "", "function_supported_dtypes"], [157, 1, 1, "", "function_unsupported_devices"], [264, 1, 1, "", "function_unsupported_devices_and_dtypes"], [123, 1, 1, "", "function_unsupported_dtypes"], [265, 1, 1, "", "gather"], [266, 1, 1, "", "gather_nd"], [59, 1, 1, "", "gelu"], [60, 1, 1, "", "get"], [267, 1, 1, "", "get_all_arrays_in_memory"], [158, 1, 1, "", "get_all_ivy_arrays_on_dev"], [268, 1, 1, "", "get_array_mode"], [269, 1, 1, "", "get_exception_trace_mode"], [270, 1, 1, "", "get_item"], [271, 1, 1, "", "get_min_base"], [272, 1, 1, "", "get_min_denominator"], [273, 1, 1, "", "get_nestable_mode"], [274, 1, 1, "", "get_num_dims"], [275, 1, 1, "", "get_queue_timeout"], [276, 1, 1, "", "get_referrers_recursive"], [277, 1, 1, "", "get_show_func_wrapper_trace_mode"], [278, 1, 1, "", "get_tmp_dir"], [159, 1, 1, "", "gpu_is_available"], [345, 1, 1, "", "grad"], [346, 1, 1, "", "gradient_descent_update"], [201, 1, 1, "", "greater"], [202, 1, 1, "", "greater_equal"], [279, 1, 1, "", "has_nans"], [70, 1, 1, "", "if_else"], [124, 1, 1, "", "iinfo"], [459, 1, 1, "", "index_nest"], [125, 1, 1, "", "infer_default_dtype"], [405, 1, 1, "", "inner"], [280, 1, 1, "", "inplace_arrays_supported"], [281, 1, 1, "", "inplace_decrement"], [282, 1, 1, "", "inplace_increment"], [283, 1, 1, "", "inplace_update"], [284, 1, 1, "", "inplace_variables_supported"], [460, 1, 1, "", "insert_into_nest_at_index"], [461, 1, 1, "", "insert_into_nest_at_indices"], [406, 1, 1, "", "inv"], [126, 1, 1, "", "invalid_dtype"], [285, 1, 1, "", "is_array"], [127, 1, 1, "", "is_bool_dtype"], [128, 1, 1, "", "is_complex_dtype"], [129, 1, 1, "", "is_float_dtype"], [130, 1, 1, "", "is_int_dtype"], [286, 1, 1, "", "is_ivy_array"], [287, 1, 1, "", "is_ivy_container"], [288, 1, 1, "", "is_native_array"], [131, 1, 1, "", "is_uint_dtype"], [203, 1, 1, "", "isfinite"], [289, 1, 1, "", "isin"], [204, 1, 1, "", "isinf"], [205, 1, 1, "", "isnan"], [206, 1, 1, "", "isreal"], [290, 1, 1, "", "isscalar"], [347, 1, 1, "", "jac"], [348, 1, 1, "", "lamb_update"], [349, 1, 1, "", "lars_update"], [475, 1, 1, "", "layer_norm"], [61, 1, 1, "", "leaky_relu"], [207, 1, 1, "", "less"], [208, 1, 1, "", "less_equal"], [393, 1, 1, "", "linear"], [86, 1, 1, "", "linspace"], [209, 1, 1, "", "log"], [210, 1, 1, "", "log10"], [211, 1, 1, "", "log1p"], [212, 1, 1, "", "log2"], [62, 1, 1, "", "log_softmax"], [213, 1, 1, "", "logaddexp"], [214, 1, 1, "", "logical_and"], [215, 1, 1, "", "logical_not"], [216, 1, 1, "", "logical_or"], [217, 1, 1, "", "logical_xor"], [87, 1, 1, "", "logspace"], [394, 1, 1, "", "lstm_update"], [407, 1, 1, "", "lu_factor"], [454, 1, 1, "", "maml_step"], [462, 1, 1, "", "map"], [463, 1, 1, "", "map_nest_at_index"], [464, 1, 1, "", "map_nest_at_indices"], [291, 1, 1, "", "match_kwargs"], [408, 1, 1, "", "matmul"], [409, 1, 1, "", "matrix_norm"], [410, 1, 1, "", "matrix_power"], [411, 1, 1, "", "matrix_rank"], [412, 1, 1, "", "matrix_transpose"], [502, 1, 1, "", "max"], [218, 1, 1, "", "maximum"], [503, 1, 1, "", "mean"], [88, 1, 1, "", "meshgrid"], [504, 1, 1, "", "min"], [219, 1, 1, "", "minimum"], [63, 1, 1, "", "mish"], [395, 1, 1, "", "multi_head_attention"], [465, 1, 1, "", "multi_index_nest"], [480, 1, 1, "", "multinomial"], [220, 1, 1, "", "multiply"], [292, 1, 1, "", "multiprocessing"], [89, 1, 1, "", "native_array"], [221, 1, 1, "", "negative"], [466, 1, 1, "", "nested_any"], [467, 1, 1, "", "nested_argwhere"], [468, 1, 1, "", "nested_map"], [469, 1, 1, "", "nested_multi_map"], [489, 1, 1, "", "nonzero"], [222, 1, 1, "", "not_equal"], [293, 1, 1, "", "num_arrays_in_memory"], [160, 1, 1, "", "num_cpu_cores"], [161, 1, 1, "", "num_gpus"], [162, 1, 1, "", "num_ivy_arrays_on_dev"], [90, 1, 1, "", "one_hot"], [91, 1, 1, "", "ones"], [92, 1, 1, "", "ones_like"], [350, 1, 1, "", "optimizer_update"], [413, 1, 1, "", "outer"], [163, 1, 1, "", "percent_used_mem_on_dev"], [437, 1, 1, "", "permute_dims"], [414, 1, 1, "", "pinv"], [223, 1, 1, "", "positive"], [224, 1, 1, "", "pow"], [294, 1, 1, "", "print_all_arrays_in_memory"], [164, 1, 1, "", "print_all_ivy_arrays_on_dev"], [505, 1, 1, "", "prod"], [132, 1, 1, "", "promote_types"], [133, 1, 1, "", "promote_types_of_inputs"], [470, 1, 1, "", "prune_empty"], [471, 1, 1, "", "prune_nest_at_index"], [472, 1, 1, "", "prune_nest_at_indices"], [415, 1, 1, "", "qr"], [225, 1, 1, "", "rad2deg"], [481, 1, 1, "", "randint"], [482, 1, 1, "", "random_normal"], [483, 1, 1, "", "random_uniform"], [226, 1, 1, "", "reciprocal"], [64, 1, 1, "", "relu"], [227, 1, 1, "", "remainder"], [438, 1, 1, "", "repeat"], [455, 1, 1, "", "reptile_step"], [439, 1, 1, "", "reshape"], [134, 1, 1, "", "result_type"], [440, 1, 1, "", "roll"], [228, 1, 1, "", "round"], [396, 1, 1, "", "scaled_dot_product_attention"], [295, 1, 1, "", "scatter_flat"], [296, 1, 1, "", "scatter_nd"], [496, 1, 1, "", "searchsorted"], [484, 1, 1, "", "seed"], [297, 1, 1, "", "set_array_mode"], [135, 1, 1, "", "set_default_complex_dtype"], [165, 1, 1, "", "set_default_device"], [136, 1, 1, "", "set_default_dtype"], [137, 1, 1, "", "set_default_float_dtype"], [138, 1, 1, "", "set_default_int_dtype"], [139, 1, 1, "", "set_default_uint_dtype"], [298, 1, 1, "", "set_exception_trace_mode"], [299, 1, 1, "", "set_min_base"], [300, 1, 1, "", "set_min_denominator"], [473, 1, 1, "", "set_nest_at_index"], [474, 1, 1, "", "set_nest_at_indices"], [301, 1, 1, "", "set_nestable_mode"], [302, 1, 1, "", "set_queue_timeout"], [303, 1, 1, "", "set_shape_array_mode"], [304, 1, 1, "", "set_show_func_wrapper_trace_mode"], [166, 1, 1, "", "set_split_factor"], [305, 1, 1, "", "set_tmp_dir"], [351, 1, 1, "", "set_with_grads"], [306, 1, 1, "", "shape"], [307, 1, 1, "", "shape_array_mode"], [485, 1, 1, "", "shuffle"], [65, 1, 1, "", "sigmoid"], [229, 1, 1, "", "sign"], [230, 1, 1, "", "sin"], [231, 1, 1, "", "sinh"], [416, 1, 1, "", "slogdet"], [66, 1, 1, "", "softmax"], [67, 1, 1, "", "softplus"], [417, 1, 1, "", "solve"], [497, 1, 1, "", "sort"], [430, 1, 1, "", "sparse_cross_entropy"], [441, 1, 1, "", "split"], [167, 1, 1, "", "split_factor"], [168, 1, 1, "", "split_func_call"], [232, 1, 1, "", "sqrt"], [233, 1, 1, "", "square"], [442, 1, 1, "", "squeeze"], [308, 1, 1, "", "stable_divide"], [309, 1, 1, "", "stable_pow"], [443, 1, 1, "", "stack"], [506, 1, 1, "", "std"], [352, 1, 1, "", "stop_gradient"], [234, 1, 1, "", "subtract"], [507, 1, 1, "", "sum"], [310, 1, 1, "", "supports_inplace_updates"], [418, 1, 1, "", "svd"], [419, 1, 1, "", "svdvals"], [444, 1, 1, "", "swapaxes"], [235, 1, 1, "", "tan"], [236, 1, 1, "", "tanh"], [420, 1, 1, "", "tensordot"], [421, 1, 1, "", "tensorsolve"], [445, 1, 1, "", "tile"], [169, 1, 1, "", "to_device"], [311, 1, 1, "", "to_ivy_shape"], [312, 1, 1, "", "to_list"], [313, 1, 1, "", "to_native_shape"], [314, 1, 1, "", "to_numpy"], [315, 1, 1, "", "to_scalar"], [170, 1, 1, "", "total_mem_on_dev"], [171, 1, 1, "", "tpu_is_available"], [422, 1, 1, "", "trace"], [93, 1, 1, "", "tril"], [94, 1, 1, "", "triu"], [237, 1, 1, "", "trunc"], [238, 1, 1, "", "trunc_divide"], [316, 1, 1, "", "try_else_none"], [140, 1, 1, "", "type_promote_arrays"], [491, 1, 1, "", "unique_all"], [492, 1, 1, "", "unique_counts"], [493, 1, 1, "", "unique_inverse"], [494, 1, 1, "", "unique_values"], [317, 1, 1, "", "unset_array_mode"], [141, 1, 1, "", "unset_default_complex_dtype"], [172, 1, 1, "", "unset_default_device"], [142, 1, 1, "", "unset_default_dtype"], [143, 1, 1, "", "unset_default_float_dtype"], [144, 1, 1, "", "unset_default_int_dtype"], [145, 1, 1, "", "unset_default_uint_dtype"], [318, 1, 1, "", "unset_exception_trace_mode"], [319, 1, 1, "", "unset_nestable_mode"], [320, 1, 1, "", "unset_queue_timeout"], [321, 1, 1, "", "unset_shape_array_mode"], [322, 1, 1, "", "unset_show_func_wrapper_trace_mode"], [353, 1, 1, "", "unset_with_grads"], [446, 1, 1, "", "unstack"], [173, 1, 1, "", "used_mem_on_dev"], [146, 1, 1, "", "valid_dtype"], [354, 1, 1, "", "value_and_grad"], [323, 1, 1, "", "value_is_nan"], [423, 1, 1, "", "vander"], [508, 1, 1, "", "var"], [424, 1, 1, "", "vecdot"], [425, 1, 1, "", "vector_norm"], [426, 1, 1, "", "vector_to_skew_symmetric_matrix"], [324, 1, 1, "", "vmap"], [490, 1, 1, "", "where"], [71, 1, 1, "", "while_loop"], [355, 1, 1, "", "with_grads"], [447, 1, 1, "", "zero_pad"], [95, 1, 1, "", "zeros"], [96, 1, 1, "", "zeros_like"]], "ivy.data_classes.array": [[0, 2, 0, "-", "activations"], [45, 2, 0, "-", "array"], [1, 2, 0, "-", "conversions"], [2, 2, 0, "-", "creation"], [3, 2, 0, "-", "data_type"], [4, 2, 0, "-", "device"], [5, 2, 0, "-", "elementwise"], [6, 2, 0, "-", "experimental"], [7, 2, 0, "-", "general"], [8, 2, 0, "-", "gradients"], [9, 2, 0, "-", "image"], [10, 2, 0, "-", "layers"], [11, 2, 0, "-", "linear_algebra"], [12, 2, 0, "-", "losses"], [13, 2, 0, "-", "manipulation"], [14, 2, 0, "-", "norms"], [15, 2, 0, "-", "random"], [16, 2, 0, "-", "searching"], [17, 2, 0, "-", "set"], [18, 2, 0, "-", "sorting"], [19, 2, 0, "-", "statistical"], [20, 2, 0, "-", "utility"], [21, 2, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[0, 3, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[0, 4, 1, "", "_abc_impl"], [0, 0, 1, "", "gelu"], [0, 0, 1, "", "leaky_relu"], [0, 0, 1, "", "log_softmax"], [0, 0, 1, "", "mish"], [0, 0, 1, "", "relu"], [0, 0, 1, "", "sigmoid"], [0, 0, 1, "", "softmax"], [0, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[45, 3, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[45, 5, 1, "", "T"], [45, 0, 1, "", "__abs__"], [45, 0, 1, "", "__add__"], [45, 0, 1, "", "__eq__"], [45, 0, 1, "", "__ge__"], [45, 0, 1, "", "__gt__"], [45, 0, 1, "", "__init__"], [45, 0, 1, "", "__le__"], [45, 0, 1, "", "__lt__"], [45, 0, 1, "", "__ne__"], [45, 0, 1, "", "__pow__"], [45, 0, 1, "", "__radd__"], [45, 0, 1, "", "__rrshift__"], [45, 0, 1, "", "__rshift__"], [45, 0, 1, "", "__rsub__"], [45, 0, 1, "", "__sub__"], [45, 0, 1, "", "__truediv__"], [45, 0, 1, "", "__xor__"], [45, 5, 1, "", "data"], [45, 5, 1, "", "device"], [45, 5, 1, "", "dtype"], [45, 5, 1, "", "dynamic_backend"], [45, 5, 1, "", "mT"], [45, 5, 1, "", "ndim"], [45, 5, 1, "", "shape"], [45, 5, 1, "", "size"]], "ivy.data_classes.array.conversions": [[1, 1, 1, "", "_to_ivy"], [1, 1, 1, "", "_to_native"], [1, 1, 1, "", "args_to_ivy"], [1, 1, 1, "", "args_to_native"], [1, 1, 1, "", "to_ivy"], [1, 1, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[2, 3, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[2, 4, 1, "", "_abc_impl"], [2, 0, 1, "", "asarray"], [2, 0, 1, "", "copy_array"], [2, 0, 1, "", "empty_like"], [2, 0, 1, "", "from_dlpack"], [2, 0, 1, "", "full_like"], [2, 0, 1, "", "linspace"], [2, 0, 1, "", "logspace"], [2, 0, 1, "", "meshgrid"], [2, 0, 1, "", "native_array"], [2, 0, 1, "", "one_hot"], [2, 0, 1, "", "ones_like"], [2, 0, 1, "", "tril"], [2, 0, 1, "", "triu"], [2, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[3, 3, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "astype"], [3, 0, 1, "", "broadcast_arrays"], [3, 0, 1, "", "broadcast_to"], [3, 0, 1, "", "can_cast"], [3, 0, 1, "", "dtype"], [3, 0, 1, "", "finfo"], [3, 0, 1, "", "iinfo"], [3, 0, 1, "", "is_bool_dtype"], [3, 0, 1, "", "is_float_dtype"], [3, 0, 1, "", "is_int_dtype"], [3, 0, 1, "", "is_uint_dtype"], [3, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[4, 3, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[4, 4, 1, "", "_abc_impl"], [4, 0, 1, "", "dev"], [4, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[5, 3, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "abs"], [5, 0, 1, "", "acos"], [5, 0, 1, "", "acosh"], [5, 0, 1, "", "add"], [5, 0, 1, "", "asin"], [5, 0, 1, "", "asinh"], [5, 0, 1, "", "atan"], [5, 0, 1, "", "atan2"], [5, 0, 1, "", "atanh"], [5, 0, 1, "", "bitwise_and"], [5, 0, 1, "", "bitwise_invert"], [5, 0, 1, "", "bitwise_left_shift"], [5, 0, 1, "", "bitwise_or"], [5, 0, 1, "", "bitwise_right_shift"], [5, 0, 1, "", "bitwise_xor"], [5, 0, 1, "", "ceil"], [5, 0, 1, "", "cos"], [5, 0, 1, "", "cosh"], [5, 0, 1, "", "deg2rad"], [5, 0, 1, "", "divide"], [5, 0, 1, "", "equal"], [5, 0, 1, "", "erf"], [5, 0, 1, "", "exp"], [5, 0, 1, "", "expm1"], [5, 0, 1, "", "floor"], [5, 0, 1, "", "floor_divide"], [5, 0, 1, "", "greater"], [5, 0, 1, "", "greater_equal"], [5, 0, 1, "", "isfinite"], [5, 0, 1, "", "isinf"], [5, 0, 1, "", "isnan"], [5, 0, 1, "", "isreal"], [5, 0, 1, "", "less"], [5, 0, 1, "", "less_equal"], [5, 0, 1, "", "log"], [5, 0, 1, "", "log10"], [5, 0, 1, "", "log1p"], [5, 0, 1, "", "log2"], [5, 0, 1, "", "logaddexp"], [5, 0, 1, "", "logical_and"], [5, 0, 1, "", "logical_not"], [5, 0, 1, "", "logical_or"], [5, 0, 1, "", "logical_xor"], [5, 0, 1, "", "maximum"], [5, 0, 1, "", "minimum"], [5, 0, 1, "", "multiply"], [5, 0, 1, "", "negative"], [5, 0, 1, "", "not_equal"], [5, 0, 1, "", "positive"], [5, 0, 1, "", "pow"], [5, 0, 1, "", "rad2deg"], [5, 0, 1, "", "reciprocal"], [5, 0, 1, "", "remainder"], [5, 0, 1, "", "round"], [5, 0, 1, "", "sign"], [5, 0, 1, "", "sin"], [5, 0, 1, "", "sinh"], [5, 0, 1, "", "sqrt"], [5, 0, 1, "", "square"], [5, 0, 1, "", "subtract"], [5, 0, 1, "", "tan"], [5, 0, 1, "", "tanh"], [5, 0, 1, "", "trunc"], [5, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[6, 2, 0, "-", "activations"], [6, 2, 0, "-", "conversions"], [6, 2, 0, "-", "creation"], [6, 2, 0, "-", "data_type"], [6, 2, 0, "-", "device"], [6, 2, 0, "-", "elementwise"], [6, 2, 0, "-", "general"], [6, 2, 0, "-", "gradients"], [6, 2, 0, "-", "image"], [6, 2, 0, "-", "layers"], [6, 2, 0, "-", "linear_algebra"], [6, 2, 0, "-", "losses"], [6, 2, 0, "-", "manipulation"], [6, 2, 0, "-", "norms"], [6, 2, 0, "-", "random"], [6, 2, 0, "-", "searching"], [6, 2, 0, "-", "set"], [6, 2, 0, "-", "sorting"], [6, 2, 0, "-", "statistical"], [6, 2, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[6, 3, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "batch_norm"], [6, 0, 1, "", "logit"], [6, 0, 1, "", "logsigmoid"], [6, 0, 1, "", "prelu"], [6, 0, 1, "", "relu6"], [6, 0, 1, "", "selu"], [6, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[6, 3, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[6, 3, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "eye_like"]], "ivy.data_classes.array.experimental.data_type": [[6, 3, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[6, 3, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[6, 3, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "allclose"], [6, 0, 1, "", "angle"], [6, 0, 1, "", "binarizer"], [6, 0, 1, "", "conj"], [6, 0, 1, "", "copysign"], [6, 0, 1, "", "count_nonzero"], [6, 0, 1, "", "diff"], [6, 0, 1, "", "exp2"], [6, 0, 1, "", "fix"], [6, 0, 1, "", "float_power"], [6, 0, 1, "", "fmax"], [6, 0, 1, "", "fmin"], [6, 0, 1, "", "fmod"], [6, 0, 1, "", "frexp"], [6, 0, 1, "", "gcd"], [6, 0, 1, "", "gradient"], [6, 0, 1, "", "hypot"], [6, 0, 1, "", "imag"], [6, 0, 1, "", "isclose"], [6, 0, 1, "", "lcm"], [6, 0, 1, "", "ldexp"], [6, 0, 1, "", "logaddexp2"], [6, 0, 1, "", "nan_to_num"], [6, 0, 1, "", "nansum"], [6, 0, 1, "", "nextafter"], [6, 0, 1, "", "real"], [6, 0, 1, "", "signbit"], [6, 0, 1, "", "sinc"], [6, 0, 1, "", "trapz"], [6, 0, 1, "", "xlogy"], [6, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[6, 3, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "isin"]], "ivy.data_classes.array.experimental.gradients": [[6, 3, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[6, 3, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[6, 3, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "adaptive_avg_pool1d"], [6, 0, 1, "", "adaptive_avg_pool2d"], [6, 0, 1, "", "avg_pool1d"], [6, 0, 1, "", "avg_pool2d"], [6, 0, 1, "", "avg_pool3d"], [6, 0, 1, "", "dct"], [6, 0, 1, "", "dft"], [6, 0, 1, "", "embedding"], [6, 0, 1, "", "fft"], [6, 0, 1, "", "ifft"], [6, 0, 1, "", "interpolate"], [6, 0, 1, "", "max_pool1d"], [6, 0, 1, "", "max_pool2d"], [6, 0, 1, "", "max_pool3d"]], "ivy.data_classes.array.experimental.linear_algebra": [[6, 3, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "adjoint"], [6, 0, 1, "", "cond"], [6, 0, 1, "", "diagflat"], [6, 0, 1, "", "eig"], [6, 0, 1, "", "eigh_tridiagonal"], [6, 0, 1, "", "eigvals"], [6, 0, 1, "", "kron"], [6, 0, 1, "", "matrix_exp"], [6, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[6, 3, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[6, 3, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "atleast_1d"], [6, 0, 1, "", "atleast_2d"], [6, 0, 1, "", "atleast_3d"], [6, 0, 1, "", "dsplit"], [6, 0, 1, "", "dstack"], [6, 0, 1, "", "expand"], [6, 0, 1, "", "flatten"], [6, 0, 1, "", "fliplr"], [6, 0, 1, "", "flipud"], [6, 0, 1, "", "heaviside"], [6, 0, 1, "", "hsplit"], [6, 0, 1, "", "hstack"], [6, 0, 1, "", "i0"], [6, 0, 1, "", "moveaxis"], [6, 0, 1, "", "pad"], [6, 0, 1, "", "rot90"], [6, 0, 1, "", "take_along_axis"], [6, 0, 1, "", "top_k"], [6, 0, 1, "", "vsplit"], [6, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[6, 3, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "instance_norm"], [6, 0, 1, "", "l2_normalize"], [6, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[6, 3, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "bernoulli"], [6, 0, 1, "", "beta"], [6, 0, 1, "", "dirichlet"], [6, 0, 1, "", "gamma"], [6, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[6, 3, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[6, 3, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[6, 3, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "lexsort"], [6, 0, 1, "", "msort"]], "ivy.data_classes.array.experimental.statistical": [[6, 3, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "bincount"], [6, 0, 1, "", "corrcoef"], [6, 0, 1, "", "median"], [6, 0, 1, "", "nanmean"], [6, 0, 1, "", "nanmedian"], [6, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[6, 3, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[6, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[7, 3, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "all_equal"], [7, 0, 1, "", "array_equal"], [7, 0, 1, "", "assert_supports_inplace"], [7, 0, 1, "", "clip_matrix_norm"], [7, 0, 1, "", "clip_vector_norm"], [7, 0, 1, "", "default"], [7, 0, 1, "", "einops_rearrange"], [7, 0, 1, "", "einops_reduce"], [7, 0, 1, "", "einops_repeat"], [7, 0, 1, "", "exists"], [7, 0, 1, "", "fourier_encode"], [7, 0, 1, "", "gather"], [7, 0, 1, "", "gather_nd"], [7, 0, 1, "", "get_num_dims"], [7, 0, 1, "", "has_nans"], [7, 0, 1, "", "inplace_decrement"], [7, 0, 1, "", "inplace_increment"], [7, 0, 1, "", "inplace_update"], [7, 0, 1, "", "is_array"], [7, 0, 1, "", "is_ivy_array"], [7, 0, 1, "", "is_ivy_container"], [7, 0, 1, "", "is_native_array"], [7, 0, 1, "", "scatter_flat"], [7, 0, 1, "", "scatter_nd"], [7, 0, 1, "", "stable_divide"], [7, 0, 1, "", "stable_pow"], [7, 0, 1, "", "supports_inplace_updates"], [7, 0, 1, "", "to_list"], [7, 0, 1, "", "to_numpy"], [7, 0, 1, "", "to_scalar"], [7, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[8, 3, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adam_step"], [8, 0, 1, "", "adam_update"], [8, 0, 1, "", "gradient_descent_update"], [8, 0, 1, "", "lamb_update"], [8, 0, 1, "", "lars_update"], [8, 0, 1, "", "optimizer_update"], [8, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[9, 3, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[10, 3, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "conv1d"], [10, 0, 1, "", "conv1d_transpose"], [10, 0, 1, "", "conv2d"], [10, 0, 1, "", "conv2d_transpose"], [10, 0, 1, "", "conv3d"], [10, 0, 1, "", "conv3d_transpose"], [10, 0, 1, "", "depthwise_conv2d"], [10, 0, 1, "", "dropout"], [10, 0, 1, "", "dropout1d"], [10, 0, 1, "", "dropout3d"], [10, 0, 1, "", "linear"], [10, 0, 1, "", "lstm_update"], [10, 0, 1, "", "multi_head_attention"], [10, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[11, 3, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "cholesky"], [11, 0, 1, "", "cross"], [11, 0, 1, "", "det"], [11, 0, 1, "", "diag"], [11, 0, 1, "", "diagonal"], [11, 0, 1, "", "eig"], [11, 0, 1, "", "eigh"], [11, 0, 1, "", "eigvalsh"], [11, 0, 1, "", "inner"], [11, 0, 1, "", "inv"], [11, 0, 1, "", "matmul"], [11, 0, 1, "", "matrix_norm"], [11, 0, 1, "", "matrix_power"], [11, 0, 1, "", "matrix_rank"], [11, 0, 1, "", "matrix_transpose"], [11, 0, 1, "", "outer"], [11, 0, 1, "", "pinv"], [11, 0, 1, "", "qr"], [11, 0, 1, "", "slogdet"], [11, 0, 1, "", "solve"], [11, 0, 1, "", "svd"], [11, 0, 1, "", "svdvals"], [11, 0, 1, "", "tensordot"], [11, 0, 1, "", "tensorsolve"], [11, 0, 1, "", "trace"], [11, 0, 1, "", "vander"], [11, 0, 1, "", "vecdot"], [11, 0, 1, "", "vector_norm"], [11, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[12, 3, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "binary_cross_entropy"], [12, 0, 1, "", "cross_entropy"], [12, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[13, 3, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "clip"], [13, 0, 1, "", "concat"], [13, 0, 1, "", "constant_pad"], [13, 0, 1, "", "expand_dims"], [13, 0, 1, "", "flip"], [13, 0, 1, "", "permute_dims"], [13, 0, 1, "", "repeat"], [13, 0, 1, "", "reshape"], [13, 0, 1, "", "roll"], [13, 0, 1, "", "split"], [13, 0, 1, "", "squeeze"], [13, 0, 1, "", "stack"], [13, 0, 1, "", "swapaxes"], [13, 0, 1, "", "tile"], [13, 0, 1, "", "unstack"], [13, 0, 1, "", "view"], [13, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[14, 3, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[15, 3, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "multinomial"], [15, 0, 1, "", "randint"], [15, 0, 1, "", "random_normal"], [15, 0, 1, "", "random_uniform"], [15, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[16, 3, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "argmax"], [16, 0, 1, "", "argmin"], [16, 0, 1, "", "argwhere"], [16, 0, 1, "", "nonzero"], [16, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[17, 3, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "unique_all"], [17, 0, 1, "", "unique_counts"], [17, 0, 1, "", "unique_inverse"], [17, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[18, 3, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "argsort"], [18, 0, 1, "", "searchsorted"], [18, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[19, 3, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "cumprod"], [19, 0, 1, "", "cumsum"], [19, 0, 1, "", "einsum"], [19, 0, 1, "", "max"], [19, 0, 1, "", "mean"], [19, 0, 1, "", "min"], [19, 0, 1, "", "prod"], [19, 0, 1, "", "std"], [19, 0, 1, "", "sum"], [19, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[20, 3, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "all"], [20, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[21, 1, 1, "", "_wrap_function"], [21, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[22, 2, 0, "-", "activations"], [23, 2, 0, "-", "base"], [46, 2, 0, "-", "container"], [24, 2, 0, "-", "conversions"], [25, 2, 0, "-", "creation"], [26, 2, 0, "-", "data_type"], [27, 2, 0, "-", "device"], [28, 2, 0, "-", "elementwise"], [29, 2, 0, "-", "experimental"], [30, 2, 0, "-", "general"], [31, 2, 0, "-", "gradients"], [32, 2, 0, "-", "image"], [33, 2, 0, "-", "layers"], [34, 2, 0, "-", "linear_algebra"], [35, 2, 0, "-", "losses"], [36, 2, 0, "-", "manipulation"], [37, 2, 0, "-", "norms"], [38, 2, 0, "-", "random"], [39, 2, 0, "-", "searching"], [40, 2, 0, "-", "set"], [41, 2, 0, "-", "sorting"], [42, 2, 0, "-", "statistical"], [43, 2, 0, "-", "utility"], [44, 2, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[22, 3, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "_static_gelu"], [22, 0, 1, "", "_static_leaky_relu"], [22, 0, 1, "", "_static_log_softmax"], [22, 0, 1, "", "_static_mish"], [22, 0, 1, "", "_static_relu"], [22, 0, 1, "", "_static_sigmoid"], [22, 0, 1, "", "_static_softmax"], [22, 0, 1, "", "_static_softplus"], [22, 0, 1, "", "gelu"], [22, 0, 1, "", "leaky_relu"], [22, 0, 1, "", "log_softmax"], [22, 0, 1, "", "mish"], [22, 0, 1, "", "relu"], [22, 0, 1, "", "sigmoid"], [22, 0, 1, "", "softmax"], [22, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[23, 3, 1, "", "ContainerBase"], [23, 1, 1, "", "_is_jsonable"], [23, 1, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[23, 0, 1, "", "__getitem__"], [23, 0, 1, "", "__init__"], [23, 0, 1, "", "__setitem__"], [23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [23, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [23, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [23, 0, 1, "", "_cont_concat_unify"], [23, 0, 1, "", "_cont_get_dev"], [23, 0, 1, "", "_cont_get_shape"], [23, 0, 1, "", "_cont_get_shapes"], [23, 5, 1, "", "_cont_ivy"], [23, 0, 1, "", "_cont_mean_unify"], [23, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [23, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [23, 0, 1, "", "_cont_slice_keys"], [23, 0, 1, "", "_cont_sum_unify"], [23, 0, 1, "", "_get_queue_item"], [23, 0, 1, "", "cont_all_false"], [23, 0, 1, "", "cont_all_key_chains"], [23, 0, 1, "", "cont_all_true"], [23, 0, 1, "", "cont_as_bools"], [23, 0, 1, "", "cont_assert_contains_sub_container"], [23, 0, 1, "", "cont_assert_contains_sub_structure"], [23, 0, 1, "", "cont_assert_identical"], [23, 0, 1, "", "cont_assert_identical_structure"], [23, 0, 1, "", "cont_at_key_chain"], [23, 0, 1, "", "cont_at_key_chains"], [23, 0, 1, "", "cont_at_keys"], [23, 0, 1, "", "cont_combine"], [23, 0, 1, "", "cont_common_key_chains"], [23, 5, 1, "", "cont_config"], [23, 0, 1, "", "cont_contains_sub_container"], [23, 0, 1, "", "cont_contains_sub_structure"], [23, 0, 1, "", "cont_copy"], [23, 0, 1, "", "cont_create_if_absent"], [23, 0, 1, "", "cont_cutoff_at_depth"], [23, 0, 1, "", "cont_cutoff_at_height"], [23, 0, 1, "", "cont_deep_copy"], [23, 5, 1, "", "cont_dev"], [23, 5, 1, "", "cont_dev_str"], [23, 0, 1, "", "cont_diff"], [23, 0, 1, "", "cont_duplicate_array_keychains"], [23, 0, 1, "", "cont_find_sub_container"], [23, 0, 1, "", "cont_find_sub_structure"], [23, 0, 1, "", "cont_flatten_key_chain"], [23, 0, 1, "", "cont_flatten_key_chains"], [23, 0, 1, "", "cont_format_key_chains"], [23, 0, 1, "", "cont_from_disk_as_hdf5"], [23, 0, 1, "", "cont_from_disk_as_json"], [23, 0, 1, "", "cont_from_disk_as_pickled"], [23, 0, 1, "", "cont_from_flat_list"], [23, 0, 1, "", "cont_handle_inplace"], [23, 0, 1, "", "cont_has_key"], [23, 0, 1, "", "cont_has_key_chain"], [23, 0, 1, "", "cont_identical"], [23, 0, 1, "", "cont_identical_array_shapes"], [23, 0, 1, "", "cont_identical_configs"], [23, 0, 1, "", "cont_identical_structure"], [23, 0, 1, "", "cont_if_exists"], [23, 0, 1, "", "cont_inplace_update"], [23, 5, 1, "", "cont_ivy"], [23, 0, 1, "", "cont_key_chains_containing"], [23, 0, 1, "", "cont_list_join"], [23, 0, 1, "", "cont_list_stack"], [23, 0, 1, "", "cont_map"], [23, 0, 1, "", "cont_map_sub_conts"], [23, 5, 1, "", "cont_max_depth"], [23, 0, 1, "", "cont_multi_map"], [23, 0, 1, "", "cont_multi_map_in_function"], [23, 0, 1, "", "cont_num_arrays"], [23, 0, 1, "", "cont_overwrite_at_key_chain"], [23, 0, 1, "", "cont_overwrite_at_key_chains"], [23, 0, 1, "", "cont_prune_empty"], [23, 0, 1, "", "cont_prune_key_chain"], [23, 0, 1, "", "cont_prune_key_chains"], [23, 0, 1, "", "cont_prune_key_from_key_chains"], [23, 0, 1, "", "cont_prune_keys"], [23, 0, 1, "", "cont_prune_keys_from_key_chains"], [23, 0, 1, "", "cont_reduce"], [23, 0, 1, "", "cont_remove_key_length_limit"], [23, 0, 1, "", "cont_remove_print_limit"], [23, 0, 1, "", "cont_reshape_like"], [23, 0, 1, "", "cont_restructure"], [23, 0, 1, "", "cont_restructure_key_chains"], [23, 0, 1, "", "cont_set_at_key_chain"], [23, 0, 1, "", "cont_set_at_key_chains"], [23, 0, 1, "", "cont_set_at_keys"], [23, 5, 1, "", "cont_shape"], [23, 5, 1, "", "cont_shapes"], [23, 0, 1, "", "cont_show"], [23, 0, 1, "", "cont_show_sub_container"], [23, 0, 1, "", "cont_size_ordered_arrays"], [23, 0, 1, "", "cont_slice_keys"], [23, 0, 1, "", "cont_slice_via_key"], [23, 0, 1, "", "cont_sort_by_key"], [23, 0, 1, "", "cont_structural_diff"], [23, 0, 1, "", "cont_to_dict"], [23, 0, 1, "", "cont_to_disk_as_hdf5"], [23, 0, 1, "", "cont_to_disk_as_json"], [23, 0, 1, "", "cont_to_disk_as_pickled"], [23, 0, 1, "", "cont_to_flat_list"], [23, 0, 1, "", "cont_to_iterator"], [23, 0, 1, "", "cont_to_iterator_keys"], [23, 0, 1, "", "cont_to_iterator_values"], [23, 0, 1, "", "cont_to_jsonable"], [23, 0, 1, "", "cont_to_nested_list"], [23, 0, 1, "", "cont_to_raw"], [23, 0, 1, "", "cont_trim_key"], [23, 0, 1, "", "cont_try_kc"], [23, 0, 1, "", "cont_unify"], [23, 0, 1, "", "cont_unstack_conts"], [23, 0, 1, "", "cont_update_config"], [23, 0, 1, "", "cont_with_default_key_color"], [23, 0, 1, "", "cont_with_entries_as_lists"], [23, 0, 1, "", "cont_with_ivy_backend"], [23, 0, 1, "", "cont_with_key_length_limit"], [23, 0, 1, "", "cont_with_print_indent"], [23, 0, 1, "", "cont_with_print_limit"], [23, 0, 1, "", "cont_with_print_line_spacing"], [23, 5, 1, "", "dynamic_backend"], [23, 0, 1, "", "h5_file_size"], [23, 0, 1, "", "shuffle_h5_file"], [23, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[46, 3, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[46, 0, 1, "", "__abs__"], [46, 0, 1, "", "__add__"], [46, 0, 1, "", "__eq__"], [46, 0, 1, "", "__ge__"], [46, 0, 1, "", "__gt__"], [46, 0, 1, "", "__init__"], [46, 0, 1, "", "__le__"], [46, 0, 1, "", "__lt__"], [46, 0, 1, "", "__ne__"], [46, 0, 1, "", "__pow__"], [46, 0, 1, "", "__radd__"], [46, 0, 1, "", "__rrshift__"], [46, 0, 1, "", "__rshift__"], [46, 0, 1, "", "__rsub__"], [46, 0, 1, "", "__sub__"], [46, 0, 1, "", "__truediv__"], [46, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[24, 3, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[24, 4, 1, "", "_abc_impl"], [24, 0, 1, "", "_static_to_ivy"], [24, 0, 1, "", "_static_to_native"], [24, 0, 1, "", "to_ivy"], [24, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[25, 3, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_arange"], [25, 0, 1, "", "_static_asarray"], [25, 0, 1, "", "_static_empty_like"], [25, 0, 1, "", "_static_eye"], [25, 0, 1, "", "_static_from_dlpack"], [25, 0, 1, "", "_static_full_like"], [25, 0, 1, "", "_static_linspace"], [25, 0, 1, "", "_static_logspace"], [25, 0, 1, "", "_static_meshgrid"], [25, 0, 1, "", "_static_native_array"], [25, 0, 1, "", "_static_one_hot"], [25, 0, 1, "", "_static_ones"], [25, 0, 1, "", "_static_ones_like"], [25, 0, 1, "", "_static_tril"], [25, 0, 1, "", "_static_triu"], [25, 0, 1, "", "_static_zeros"], [25, 0, 1, "", "_static_zeros_like"], [25, 0, 1, "", "empty_like"], [25, 0, 1, "", "from_dlpack"], [25, 0, 1, "", "full_like"], [25, 0, 1, "", "linspace"], [25, 0, 1, "", "logspace"], [25, 0, 1, "", "meshgrid"], [25, 0, 1, "", "native_array"], [25, 0, 1, "", "one_hot"], [25, 0, 1, "", "ones_like"], [25, 0, 1, "", "tril"], [25, 0, 1, "", "triu"], [25, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[26, 3, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_static_astype"], [26, 0, 1, "", "_static_broadcast_arrays"], [26, 0, 1, "", "_static_broadcast_to"], [26, 0, 1, "", "_static_can_cast"], [26, 0, 1, "", "_static_default_complex_dtype"], [26, 0, 1, "", "_static_default_float_dtype"], [26, 0, 1, "", "_static_dtype"], [26, 0, 1, "", "_static_finfo"], [26, 0, 1, "", "_static_function_supported_dtypes"], [26, 0, 1, "", "_static_function_unsupported_dtypes"], [26, 0, 1, "", "_static_iinfo"], [26, 0, 1, "", "_static_is_bool_dtype"], [26, 0, 1, "", "_static_is_complex_dtype"], [26, 0, 1, "", "_static_is_float_dtype"], [26, 0, 1, "", "_static_is_int_dtype"], [26, 0, 1, "", "_static_is_uint_dtype"], [26, 0, 1, "", "_static_result_type"], [26, 0, 1, "", "astype"], [26, 0, 1, "", "broadcast_arrays"], [26, 0, 1, "", "broadcast_to"], [26, 0, 1, "", "can_cast"], [26, 0, 1, "", "dtype"], [26, 0, 1, "", "finfo"], [26, 0, 1, "", "iinfo"], [26, 0, 1, "", "is_bool_dtype"], [26, 0, 1, "", "is_complex_dtype"], [26, 0, 1, "", "is_float_dtype"], [26, 0, 1, "", "is_int_dtype"], [26, 0, 1, "", "is_uint_dtype"], [26, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[27, 3, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_dev"], [27, 0, 1, "", "_static_to_device"], [27, 0, 1, "", "dev"], [27, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[28, 3, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_abs"], [28, 0, 1, "", "_static_acos"], [28, 0, 1, "", "_static_acosh"], [28, 0, 1, "", "_static_add"], [28, 0, 1, "", "_static_asin"], [28, 0, 1, "", "_static_asinh"], [28, 0, 1, "", "_static_atan"], [28, 0, 1, "", "_static_atan2"], [28, 0, 1, "", "_static_atanh"], [28, 0, 1, "", "_static_bitwise_and"], [28, 0, 1, "", "_static_bitwise_invert"], [28, 0, 1, "", "_static_bitwise_left_shift"], [28, 0, 1, "", "_static_bitwise_or"], [28, 0, 1, "", "_static_bitwise_right_shift"], [28, 0, 1, "", "_static_bitwise_xor"], [28, 0, 1, "", "_static_ceil"], [28, 0, 1, "", "_static_cos"], [28, 0, 1, "", "_static_cosh"], [28, 0, 1, "", "_static_deg2rad"], [28, 0, 1, "", "_static_divide"], [28, 0, 1, "", "_static_equal"], [28, 0, 1, "", "_static_erf"], [28, 0, 1, "", "_static_exp"], [28, 0, 1, "", "_static_expm1"], [28, 0, 1, "", "_static_floor"], [28, 0, 1, "", "_static_floor_divide"], [28, 0, 1, "", "_static_greater"], [28, 0, 1, "", "_static_greater_equal"], [28, 0, 1, "", "_static_isfinite"], [28, 0, 1, "", "_static_isinf"], [28, 0, 1, "", "_static_isnan"], [28, 0, 1, "", "_static_isreal"], [28, 0, 1, "", "_static_less"], [28, 0, 1, "", "_static_less_equal"], [28, 0, 1, "", "_static_log"], [28, 0, 1, "", "_static_log10"], [28, 0, 1, "", "_static_log1p"], [28, 0, 1, "", "_static_log2"], [28, 0, 1, "", "_static_logaddexp"], [28, 0, 1, "", "_static_logical_and"], [28, 0, 1, "", "_static_logical_not"], [28, 0, 1, "", "_static_logical_or"], [28, 0, 1, "", "_static_logical_xor"], [28, 0, 1, "", "_static_maximum"], [28, 0, 1, "", "_static_minimum"], [28, 0, 1, "", "_static_multiply"], [28, 0, 1, "", "_static_negative"], [28, 0, 1, "", "_static_not_equal"], [28, 0, 1, "", "_static_positive"], [28, 0, 1, "", "_static_pow"], [28, 0, 1, "", "_static_rad2deg"], [28, 0, 1, "", "_static_reciprocal"], [28, 0, 1, "", "_static_remainder"], [28, 0, 1, "", "_static_round"], [28, 0, 1, "", "_static_sign"], [28, 0, 1, "", "_static_sin"], [28, 0, 1, "", "_static_sinh"], [28, 0, 1, "", "_static_sqrt"], [28, 0, 1, "", "_static_square"], [28, 0, 1, "", "_static_subtract"], [28, 0, 1, "", "_static_tan"], [28, 0, 1, "", "_static_tanh"], [28, 0, 1, "", "_static_trapz"], [28, 0, 1, "", "_static_trunc"], [28, 0, 1, "", "_static_trunc_divide"], [28, 0, 1, "", "abs"], [28, 0, 1, "", "acos"], [28, 0, 1, "", "acosh"], [28, 0, 1, "", "add"], [28, 0, 1, "", "asin"], [28, 0, 1, "", "asinh"], [28, 0, 1, "", "atan"], [28, 0, 1, "", "atan2"], [28, 0, 1, "", "atanh"], [28, 0, 1, "", "bitwise_and"], [28, 0, 1, "", "bitwise_invert"], [28, 0, 1, "", "bitwise_left_shift"], [28, 0, 1, "", "bitwise_or"], [28, 0, 1, "", "bitwise_right_shift"], [28, 0, 1, "", "bitwise_xor"], [28, 0, 1, "", "ceil"], [28, 0, 1, "", "cos"], [28, 0, 1, "", "cosh"], [28, 0, 1, "", "deg2rad"], [28, 0, 1, "", "divide"], [28, 0, 1, "", "equal"], [28, 0, 1, "", "erf"], [28, 0, 1, "", "exp"], [28, 0, 1, "", "expm1"], [28, 0, 1, "", "floor"], [28, 0, 1, "", "floor_divide"], [28, 0, 1, "", "greater"], [28, 0, 1, "", "greater_equal"], [28, 0, 1, "", "isfinite"], [28, 0, 1, "", "isinf"], [28, 0, 1, "", "isnan"], [28, 0, 1, "", "isreal"], [28, 0, 1, "", "less"], [28, 0, 1, "", "less_equal"], [28, 0, 1, "", "log"], [28, 0, 1, "", "log10"], [28, 0, 1, "", "log1p"], [28, 0, 1, "", "log2"], [28, 0, 1, "", "logaddexp"], [28, 0, 1, "", "logical_and"], [28, 0, 1, "", "logical_not"], [28, 0, 1, "", "logical_or"], [28, 0, 1, "", "logical_xor"], [28, 0, 1, "", "maximum"], [28, 0, 1, "", "minimum"], [28, 0, 1, "", "multiply"], [28, 0, 1, "", "negative"], [28, 0, 1, "", "not_equal"], [28, 0, 1, "", "positive"], [28, 0, 1, "", "pow"], [28, 0, 1, "", "rad2deg"], [28, 0, 1, "", "reciprocal"], [28, 0, 1, "", "remainder"], [28, 0, 1, "", "round"], [28, 0, 1, "", "sign"], [28, 0, 1, "", "sin"], [28, 0, 1, "", "sinh"], [28, 0, 1, "", "sqrt"], [28, 0, 1, "", "square"], [28, 0, 1, "", "subtract"], [28, 0, 1, "", "tan"], [28, 0, 1, "", "tanh"], [28, 0, 1, "", "trapz"], [28, 0, 1, "", "trunc"], [28, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[29, 2, 0, "-", "activations"], [29, 2, 0, "-", "conversions"], [29, 2, 0, "-", "creation"], [29, 2, 0, "-", "data_type"], [29, 2, 0, "-", "device"], [29, 2, 0, "-", "elementwise"], [29, 2, 0, "-", "general"], [29, 2, 0, "-", "gradients"], [29, 2, 0, "-", "image"], [29, 2, 0, "-", "layers"], [29, 2, 0, "-", "linear_algebra"], [29, 2, 0, "-", "losses"], [29, 2, 0, "-", "manipulation"], [29, 2, 0, "-", "norms"], [29, 2, 0, "-", "random"], [29, 2, 0, "-", "searching"], [29, 2, 0, "-", "set"], [29, 2, 0, "-", "sorting"], [29, 2, 0, "-", "statistical"], [29, 2, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[29, 3, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "batch_norm"], [29, 0, 1, "", "logit"], [29, 0, 1, "", "logsigmoid"], [29, 0, 1, "", "prelu"], [29, 0, 1, "", "relu6"], [29, 0, 1, "", "selu"], [29, 0, 1, "", "static_batch_norm"], [29, 0, 1, "", "static_logit"], [29, 0, 1, "", "static_logsigmoid"], [29, 0, 1, "", "static_prelu"], [29, 0, 1, "", "static_relu6"], [29, 0, 1, "", "static_selu"], [29, 0, 1, "", "static_thresholded_relu"], [29, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[29, 3, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[29, 3, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "eye_like"], [29, 0, 1, "", "hamming_window"], [29, 0, 1, "", "hann_window"], [29, 0, 1, "", "kaiser_bessel_derived_window"], [29, 0, 1, "", "kaiser_window"], [29, 0, 1, "", "static_eye_like"], [29, 0, 1, "", "static_hamming_window"], [29, 0, 1, "", "static_hann_window"], [29, 0, 1, "", "static_kaiser_bessel_derived_window"], [29, 0, 1, "", "static_kaiser_window"], [29, 0, 1, "", "static_tril_indices"], [29, 0, 1, "", "static_triu_indices"], [29, 0, 1, "", "static_vorbis_window"], [29, 0, 1, "", "tril_indices"], [29, 0, 1, "", "triu_indices"], [29, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[29, 3, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[29, 3, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[29, 3, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "allclose"], [29, 0, 1, "", "angle"], [29, 0, 1, "", "binarizer"], [29, 0, 1, "", "conj"], [29, 0, 1, "", "copysign"], [29, 0, 1, "", "count_nonzero"], [29, 0, 1, "", "diff"], [29, 0, 1, "", "exp2"], [29, 0, 1, "", "fix"], [29, 0, 1, "", "float_power"], [29, 0, 1, "", "fmax"], [29, 0, 1, "", "fmin"], [29, 0, 1, "", "fmod"], [29, 0, 1, "", "frexp"], [29, 0, 1, "", "gcd"], [29, 0, 1, "", "gradient"], [29, 0, 1, "", "hypot"], [29, 0, 1, "", "imag"], [29, 0, 1, "", "isclose"], [29, 0, 1, "", "lcm"], [29, 0, 1, "", "ldexp"], [29, 0, 1, "", "logaddexp2"], [29, 0, 1, "", "nan_to_num"], [29, 0, 1, "", "nansum"], [29, 0, 1, "", "nextafter"], [29, 0, 1, "", "real"], [29, 0, 1, "", "signbit"], [29, 0, 1, "", "sinc"], [29, 0, 1, "", "static_allclose"], [29, 0, 1, "", "static_angle"], [29, 0, 1, "", "static_binarizer"], [29, 0, 1, "", "static_conj"], [29, 0, 1, "", "static_copysign"], [29, 0, 1, "", "static_count_nonzero"], [29, 0, 1, "", "static_diff"], [29, 0, 1, "", "static_exp2"], [29, 0, 1, "", "static_fix"], [29, 0, 1, "", "static_float_power"], [29, 0, 1, "", "static_fmax"], [29, 0, 1, "", "static_fmin"], [29, 0, 1, "", "static_fmod"], [29, 0, 1, "", "static_frexp"], [29, 0, 1, "", "static_gcd"], [29, 0, 1, "", "static_gradient"], [29, 0, 1, "", "static_hypot"], [29, 0, 1, "", "static_imag"], [29, 0, 1, "", "static_isclose"], [29, 0, 1, "", "static_lcm"], [29, 0, 1, "", "static_ldexp"], [29, 0, 1, "", "static_logaddexp2"], [29, 0, 1, "", "static_nan_to_num"], [29, 0, 1, "", "static_nansum"], [29, 0, 1, "", "static_nextafter"], [29, 0, 1, "", "static_real"], [29, 0, 1, "", "static_signbit"], [29, 0, 1, "", "static_sinc"], [29, 0, 1, "", "static_xlogy"], [29, 0, 1, "", "static_zeta"], [29, 0, 1, "", "xlogy"], [29, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[29, 3, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "isin"], [29, 0, 1, "", "static_isin"]], "ivy.data_classes.container.experimental.gradients": [[29, 3, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[29, 3, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[29, 3, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "adaptive_avg_pool1d"], [29, 0, 1, "", "adaptive_avg_pool2d"], [29, 0, 1, "", "avg_pool1d"], [29, 0, 1, "", "avg_pool2d"], [29, 0, 1, "", "avg_pool3d"], [29, 0, 1, "", "dct"], [29, 0, 1, "", "dft"], [29, 0, 1, "", "embedding"], [29, 0, 1, "", "fft"], [29, 0, 1, "", "ifft"], [29, 0, 1, "", "interpolate"], [29, 0, 1, "", "max_pool1d"], [29, 0, 1, "", "max_pool2d"], [29, 0, 1, "", "max_pool3d"], [29, 0, 1, "", "static_adaptive_avg_pool1d"], [29, 0, 1, "", "static_adaptive_avg_pool2d"], [29, 0, 1, "", "static_avg_pool1d"], [29, 0, 1, "", "static_avg_pool2d"], [29, 0, 1, "", "static_avg_pool3d"], [29, 0, 1, "", "static_dct"], [29, 0, 1, "", "static_dft"], [29, 0, 1, "", "static_embedding"], [29, 0, 1, "", "static_fft"], [29, 0, 1, "", "static_ifft"], [29, 0, 1, "", "static_interpolate"], [29, 0, 1, "", "static_max_pool1d"], [29, 0, 1, "", "static_max_pool2d"], [29, 0, 1, "", "static_max_pool3d"]], "ivy.data_classes.container.experimental.linear_algebra": [[29, 3, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "adjoint"], [29, 0, 1, "", "cond"], [29, 0, 1, "", "diagflat"], [29, 0, 1, "", "eig"], [29, 0, 1, "", "eigh_tridiagonal"], [29, 0, 1, "", "eigvals"], [29, 0, 1, "", "kron"], [29, 0, 1, "", "matrix_exp"], [29, 0, 1, "", "multi_dot"], [29, 0, 1, "", "static_adjoint"], [29, 0, 1, "", "static_cond"], [29, 0, 1, "", "static_diagflat"], [29, 0, 1, "", "static_eig"], [29, 0, 1, "", "static_eigh_tridiagonal"], [29, 0, 1, "", "static_eigvals"], [29, 0, 1, "", "static_kron"], [29, 0, 1, "", "static_matrix_exp"], [29, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.losses": [[29, 3, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "binary_cross_entropy_with_logits"], [29, 0, 1, "", "static_binary_cross_entropy_with_logits"]], "ivy.data_classes.container.experimental.manipulation": [[29, 3, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "atleast_1d"], [29, 0, 1, "", "atleast_2d"], [29, 0, 1, "", "atleast_3d"], [29, 0, 1, "", "broadcast_shapes"], [29, 0, 1, "", "dsplit"], [29, 0, 1, "", "dstack"], [29, 0, 1, "", "expand"], [29, 0, 1, "", "flatten"], [29, 0, 1, "", "fliplr"], [29, 0, 1, "", "flipud"], [29, 0, 1, "", "heaviside"], [29, 0, 1, "", "hsplit"], [29, 0, 1, "", "hstack"], [29, 0, 1, "", "i0"], [29, 0, 1, "", "moveaxis"], [29, 0, 1, "", "pad"], [29, 0, 1, "", "rot90"], [29, 0, 1, "", "static_atleast_1d"], [29, 0, 1, "", "static_atleast_2d"], [29, 0, 1, "", "static_atleast_3d"], [29, 0, 1, "", "static_broadcast_shapes"], [29, 0, 1, "", "static_dsplit"], [29, 0, 1, "", "static_dstack"], [29, 0, 1, "", "static_expand"], [29, 0, 1, "", "static_flatten"], [29, 0, 1, "", "static_fliplr"], [29, 0, 1, "", "static_flipud"], [29, 0, 1, "", "static_heaviside"], [29, 0, 1, "", "static_hsplit"], [29, 0, 1, "", "static_hstack"], [29, 0, 1, "", "static_i0"], [29, 0, 1, "", "static_moveaxis"], [29, 0, 1, "", "static_pad"], [29, 0, 1, "", "static_rot90"], [29, 0, 1, "", "static_take_along_axis"], [29, 0, 1, "", "static_top_k"], [29, 0, 1, "", "static_vsplit"], [29, 0, 1, "", "static_vstack"], [29, 0, 1, "", "take_along_axis"], [29, 0, 1, "", "top_k"], [29, 0, 1, "", "vsplit"], [29, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[29, 3, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "instance_norm"], [29, 0, 1, "", "l2_normalize"], [29, 0, 1, "", "lp_normalize"], [29, 0, 1, "", "static_instance_norm"], [29, 0, 1, "", "static_l2_normalize"], [29, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[29, 3, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "bernoulli"], [29, 0, 1, "", "beta"], [29, 0, 1, "", "dirichlet"], [29, 0, 1, "", "poisson"], [29, 0, 1, "", "static_bernoulli"], [29, 0, 1, "", "static_beta"], [29, 0, 1, "", "static_dirichlet"], [29, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[29, 3, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "static_unravel_index"], [29, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[29, 3, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[29, 3, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "lexsort"], [29, 0, 1, "", "msort"], [29, 0, 1, "", "static_lexsort"], [29, 0, 1, "", "static_msort"]], "ivy.data_classes.container.experimental.statistical": [[29, 3, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "bincount"], [29, 0, 1, "", "corrcoef"], [29, 0, 1, "", "median"], [29, 0, 1, "", "nanmean"], [29, 0, 1, "", "nanmedian"], [29, 0, 1, "", "quantile"], [29, 0, 1, "", "static_bincount"], [29, 0, 1, "", "static_corrcoef"], [29, 0, 1, "", "static_median"], [29, 0, 1, "", "static_nanmean"], [29, 0, 1, "", "static_nanmedian"], [29, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[29, 3, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[29, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[30, 3, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_all_equal"], [30, 0, 1, "", "_static_array_equal"], [30, 0, 1, "", "_static_assert_supports_inplace"], [30, 0, 1, "", "_static_clip_matrix_norm"], [30, 0, 1, "", "_static_clip_vector_norm"], [30, 0, 1, "", "_static_einops_rearrange"], [30, 0, 1, "", "_static_einops_reduce"], [30, 0, 1, "", "_static_einops_repeat"], [30, 0, 1, "", "_static_fourier_encode"], [30, 0, 1, "", "_static_gather"], [30, 0, 1, "", "_static_gather_nd"], [30, 0, 1, "", "_static_get_num_dims"], [30, 0, 1, "", "_static_has_nans"], [30, 0, 1, "", "_static_inplace_decrement"], [30, 0, 1, "", "_static_inplace_increment"], [30, 0, 1, "", "_static_inplace_update"], [30, 0, 1, "", "_static_is_array"], [30, 0, 1, "", "_static_is_ivy_array"], [30, 0, 1, "", "_static_is_native_array"], [30, 0, 1, "", "_static_scatter_flat"], [30, 0, 1, "", "_static_scatter_nd"], [30, 0, 1, "", "_static_stable_divide"], [30, 0, 1, "", "_static_stable_pow"], [30, 0, 1, "", "_static_supports_inplace_updates"], [30, 0, 1, "", "_static_to_list"], [30, 0, 1, "", "_static_to_numpy"], [30, 0, 1, "", "_static_to_scalar"], [30, 0, 1, "", "_static_value_is_nan"], [30, 0, 1, "", "all_equal"], [30, 0, 1, "", "array_equal"], [30, 0, 1, "", "assert_supports_inplace"], [30, 0, 1, "", "clip_matrix_norm"], [30, 0, 1, "", "clip_vector_norm"], [30, 0, 1, "", "einops_rearrange"], [30, 0, 1, "", "einops_reduce"], [30, 0, 1, "", "einops_repeat"], [30, 0, 1, "", "fourier_encode"], [30, 0, 1, "", "gather"], [30, 0, 1, "", "gather_nd"], [30, 0, 1, "", "get_num_dims"], [30, 0, 1, "", "has_nans"], [30, 0, 1, "", "inplace_decrement"], [30, 0, 1, "", "inplace_increment"], [30, 0, 1, "", "inplace_update"], [30, 0, 1, "", "is_array"], [30, 0, 1, "", "is_ivy_array"], [30, 0, 1, "", "is_native_array"], [30, 0, 1, "", "scatter_flat"], [30, 0, 1, "", "scatter_nd"], [30, 0, 1, "", "stable_divide"], [30, 0, 1, "", "stable_pow"], [30, 0, 1, "", "supports_inplace_updates"], [30, 0, 1, "", "to_list"], [30, 0, 1, "", "to_numpy"], [30, 0, 1, "", "to_scalar"], [30, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[31, 3, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_stop_gradient"], [31, 0, 1, "", "adam_step"], [31, 0, 1, "", "adam_update"], [31, 0, 1, "", "gradient_descent_update"], [31, 0, 1, "", "lamb_update"], [31, 0, 1, "", "lars_update"], [31, 0, 1, "", "optimizer_update"], [31, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[32, 3, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[33, 3, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_conv1d"], [33, 0, 1, "", "_static_conv1d_transpose"], [33, 0, 1, "", "_static_conv2d"], [33, 0, 1, "", "_static_conv2d_transpose"], [33, 0, 1, "", "_static_conv3d"], [33, 0, 1, "", "_static_conv3d_transpose"], [33, 0, 1, "", "_static_depthwise_conv2d"], [33, 0, 1, "", "_static_dropout"], [33, 0, 1, "", "_static_dropout1d"], [33, 0, 1, "", "_static_dropout3d"], [33, 0, 1, "", "_static_linear"], [33, 0, 1, "", "_static_lstm_update"], [33, 0, 1, "", "_static_multi_head_attention"], [33, 0, 1, "", "_static_scaled_dot_product_attention"], [33, 0, 1, "", "conv1d"], [33, 0, 1, "", "conv1d_transpose"], [33, 0, 1, "", "conv2d"], [33, 0, 1, "", "conv2d_transpose"], [33, 0, 1, "", "conv3d"], [33, 0, 1, "", "conv3d_transpose"], [33, 0, 1, "", "depthwise_conv2d"], [33, 0, 1, "", "dropout"], [33, 0, 1, "", "dropout1d"], [33, 0, 1, "", "dropout3d"], [33, 0, 1, "", "linear"], [33, 0, 1, "", "lstm_update"], [33, 0, 1, "", "multi_head_attention"], [33, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[34, 3, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_cholesky"], [34, 0, 1, "", "_static_cross"], [34, 0, 1, "", "_static_det"], [34, 0, 1, "", "_static_diag"], [34, 0, 1, "", "_static_diagonal"], [34, 0, 1, "", "_static_eigh"], [34, 0, 1, "", "_static_eigvalsh"], [34, 0, 1, "", "_static_inner"], [34, 0, 1, "", "_static_inv"], [34, 0, 1, "", "_static_matmul"], [34, 0, 1, "", "_static_matrix_norm"], [34, 0, 1, "", "_static_matrix_power"], [34, 0, 1, "", "_static_matrix_rank"], [34, 0, 1, "", "_static_matrix_transpose"], [34, 0, 1, "", "_static_outer"], [34, 0, 1, "", "_static_pinv"], [34, 0, 1, "", "_static_qr"], [34, 0, 1, "", "_static_slogdet"], [34, 0, 1, "", "_static_solve"], [34, 0, 1, "", "_static_svd"], [34, 0, 1, "", "_static_svdvals"], [34, 0, 1, "", "_static_tensordot"], [34, 0, 1, "", "_static_tensorsolve"], [34, 0, 1, "", "_static_trace"], [34, 0, 1, "", "_static_vander"], [34, 0, 1, "", "_static_vecdot"], [34, 0, 1, "", "_static_vector_norm"], [34, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [34, 0, 1, "", "cholesky"], [34, 0, 1, "", "cross"], [34, 0, 1, "", "det"], [34, 0, 1, "", "diag"], [34, 0, 1, "", "diagonal"], [34, 0, 1, "", "eigh"], [34, 0, 1, "", "eigvalsh"], [34, 0, 1, "", "inner"], [34, 0, 1, "", "inv"], [34, 0, 1, "", "matmul"], [34, 0, 1, "", "matrix_norm"], [34, 0, 1, "", "matrix_power"], [34, 0, 1, "", "matrix_rank"], [34, 0, 1, "", "matrix_transpose"], [34, 0, 1, "", "outer"], [34, 0, 1, "", "pinv"], [34, 0, 1, "", "qr"], [34, 0, 1, "", "slogdet"], [34, 0, 1, "", "solve"], [34, 0, 1, "", "svd"], [34, 0, 1, "", "svdvals"], [34, 0, 1, "", "tensordot"], [34, 0, 1, "", "tensorsolve"], [34, 0, 1, "", "trace"], [34, 0, 1, "", "vander"], [34, 0, 1, "", "vecdot"], [34, 0, 1, "", "vector_norm"], [34, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[35, 3, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_binary_cross_entropy"], [35, 0, 1, "", "_static_cross_entropy"], [35, 0, 1, "", "_static_sparse_cross_entropy"], [35, 0, 1, "", "binary_cross_entropy"], [35, 0, 1, "", "cross_entropy"], [35, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[36, 3, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_clip"], [36, 0, 1, "", "_static_concat"], [36, 0, 1, "", "_static_constant_pad"], [36, 0, 1, "", "_static_expand_dims"], [36, 0, 1, "", "_static_flip"], [36, 0, 1, "", "_static_permute_dims"], [36, 0, 1, "", "_static_repeat"], [36, 0, 1, "", "_static_reshape"], [36, 0, 1, "", "_static_roll"], [36, 0, 1, "", "_static_split"], [36, 0, 1, "", "_static_squeeze"], [36, 0, 1, "", "_static_stack"], [36, 0, 1, "", "_static_swapaxes"], [36, 0, 1, "", "_static_tile"], [36, 0, 1, "", "_static_unstack"], [36, 0, 1, "", "_static_zero_pad"], [36, 0, 1, "", "clip"], [36, 0, 1, "", "concat"], [36, 0, 1, "", "constant_pad"], [36, 0, 1, "", "expand_dims"], [36, 0, 1, "", "flip"], [36, 0, 1, "", "permute_dims"], [36, 0, 1, "", "repeat"], [36, 0, 1, "", "reshape"], [36, 0, 1, "", "roll"], [36, 0, 1, "", "split"], [36, 0, 1, "", "squeeze"], [36, 0, 1, "", "stack"], [36, 0, 1, "", "swapaxes"], [36, 0, 1, "", "tile"], [36, 0, 1, "", "unstack"], [36, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[37, 3, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[38, 3, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_multinomial"], [38, 0, 1, "", "_static_randint"], [38, 0, 1, "", "_static_random_normal"], [38, 0, 1, "", "_static_random_uniform"], [38, 0, 1, "", "_static_shuffle"], [38, 0, 1, "", "multinomial"], [38, 0, 1, "", "randint"], [38, 0, 1, "", "random_normal"], [38, 0, 1, "", "random_uniform"], [38, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[39, 3, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_argmax"], [39, 0, 1, "", "_static_argmin"], [39, 0, 1, "", "_static_argwhere"], [39, 0, 1, "", "_static_nonzero"], [39, 0, 1, "", "_static_where"], [39, 0, 1, "", "argmax"], [39, 0, 1, "", "argmin"], [39, 0, 1, "", "argwhere"], [39, 0, 1, "", "nonzero"], [39, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[40, 3, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "_static_unique_all"], [40, 0, 1, "", "_static_unique_counts"], [40, 0, 1, "", "_static_unique_inverse"], [40, 0, 1, "", "_static_unique_values"], [40, 0, 1, "", "unique_all"], [40, 0, 1, "", "unique_counts"], [40, 0, 1, "", "unique_inverse"], [40, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[41, 3, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_argsort"], [41, 0, 1, "", "_static_searchsorted"], [41, 0, 1, "", "_static_sort"], [41, 0, 1, "", "argsort"], [41, 0, 1, "", "searchsorted"], [41, 0, 1, "", "sort"]], "ivy.data_classes.container.statistical": [[42, 3, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_cumprod"], [42, 0, 1, "", "_static_cumsum"], [42, 0, 1, "", "_static_prod"], [42, 0, 1, "", "_static_sum"], [42, 0, 1, "", "_static_var"], [42, 0, 1, "", "cumprod"], [42, 0, 1, "", "cumsum"], [42, 0, 1, "", "einsum"], [42, 0, 1, "", "max"], [42, 0, 1, "", "mean"], [42, 0, 1, "", "min"], [42, 0, 1, "", "prod"], [42, 0, 1, "", "std"], [42, 0, 1, "", "sum"], [42, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[43, 3, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_all"], [43, 0, 1, "", "_static_any"], [43, 0, 1, "", "all"], [43, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[44, 1, 1, "", "_wrap_function"], [44, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.functional.ivy": [[356, 2, 0, "-", "activations"], [357, 2, 0, "-", "constants"], [358, 2, 0, "-", "control_flow_ops"], [359, 2, 0, "-", "creation"], [360, 2, 0, "-", "data_type"], [361, 2, 0, "-", "device"], [362, 2, 0, "-", "elementwise"], [363, 2, 0, "-", "experimental"], [364, 2, 0, "-", "general"], [365, 2, 0, "-", "gradients"], [366, 2, 0, "-", "layers"], [367, 2, 0, "-", "linear_algebra"], [368, 2, 0, "-", "losses"], [369, 2, 0, "-", "manipulation"], [370, 2, 0, "-", "meta"], [371, 2, 0, "-", "nest"], [372, 2, 0, "-", "norms"], [373, 2, 0, "-", "random"], [374, 2, 0, "-", "searching"], [375, 2, 0, "-", "set"], [376, 2, 0, "-", "sorting"], [377, 2, 0, "-", "statistical"], [378, 2, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[356, 1, 1, "", "deserialize"], [356, 1, 1, "", "gelu"], [356, 1, 1, "", "get"], [356, 1, 1, "", "leaky_relu"], [356, 1, 1, "", "log_softmax"], [356, 1, 1, "", "mish"], [356, 1, 1, "", "relu"], [356, 1, 1, "", "sigmoid"], [356, 1, 1, "", "softmax"], [356, 1, 1, "", "softplus"]], "ivy.functional.ivy.constants": [[357, 6, 1, "", "e"], [357, 6, 1, "", "inf"], [357, 6, 1, "", "nan"], [357, 6, 1, "", "newaxis"], [357, 6, 1, "", "pi"]], "ivy.functional.ivy.control_flow_ops": [[358, 1, 1, "", "IfElse"], [358, 1, 1, "", "WhileLoop"], [358, 1, 1, "", "if_else"], [358, 1, 1, "", "while_loop"]], "ivy.functional.ivy.creation": [[359, 3, 1, "", "NestedSequence"], [359, 1, 1, "", "arange"], [359, 1, 1, "", "array"], [359, 1, 1, "", "asarray"], [359, 1, 1, "", "asarray_handle_nestable"], [359, 1, 1, "", "asarray_infer_device"], [359, 1, 1, "", "asarray_to_native_arrays_and_back"], [359, 1, 1, "", "copy_array"], [359, 1, 1, "", "empty"], [359, 1, 1, "", "empty_like"], [359, 1, 1, "", "eye"], [359, 1, 1, "", "from_dlpack"], [359, 1, 1, "", "full"], [359, 1, 1, "", "full_like"], [359, 1, 1, "", "linspace"], [359, 1, 1, "", "logspace"], [359, 1, 1, "", "meshgrid"], [359, 1, 1, "", "native_array"], [359, 1, 1, "", "one_hot"], [359, 1, 1, "", "ones"], [359, 1, 1, "", "ones_like"], [359, 1, 1, "", "tril"], [359, 1, 1, "", "triu"], [359, 1, 1, "", "zeros"], [359, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.creation.NestedSequence": [[359, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type": [[360, 3, 1, "", "DefaultComplexDtype"], [360, 3, 1, "", "DefaultDtype"], [360, 3, 1, "", "DefaultFloatDtype"], [360, 3, 1, "", "DefaultIntDtype"], [360, 3, 1, "", "DefaultUintDtype"], [360, 1, 1, "", "as_ivy_dtype"], [360, 1, 1, "", "as_native_dtype"], [360, 1, 1, "", "astype"], [360, 1, 1, "", "broadcast_arrays"], [360, 1, 1, "", "broadcast_to"], [360, 1, 1, "", "can_cast"], [360, 1, 1, "", "check_float"], [360, 1, 1, "", "closest_valid_dtype"], [360, 1, 1, "", "default_complex_dtype"], [360, 1, 1, "", "default_dtype"], [360, 1, 1, "", "default_float_dtype"], [360, 1, 1, "", "default_int_dtype"], [360, 1, 1, "", "default_uint_dtype"], [360, 1, 1, "", "dtype"], [360, 1, 1, "", "dtype_bits"], [360, 1, 1, "", "finfo"], [360, 1, 1, "", "function_supported_dtypes"], [360, 1, 1, "", "function_unsupported_dtypes"], [360, 1, 1, "", "iinfo"], [360, 1, 1, "", "infer_default_dtype"], [360, 1, 1, "", "invalid_dtype"], [360, 1, 1, "", "is_bool_dtype"], [360, 1, 1, "", "is_complex_dtype"], [360, 1, 1, "", "is_float_dtype"], [360, 1, 1, "", "is_int_dtype"], [360, 1, 1, "", "is_uint_dtype"], [360, 1, 1, "", "promote_types"], [360, 1, 1, "", "promote_types_of_inputs"], [360, 1, 1, "", "result_type"], [360, 1, 1, "", "set_default_complex_dtype"], [360, 1, 1, "", "set_default_dtype"], [360, 1, 1, "", "set_default_float_dtype"], [360, 1, 1, "", "set_default_int_dtype"], [360, 1, 1, "", "set_default_uint_dtype"], [360, 1, 1, "", "type_promote_arrays"], [360, 1, 1, "", "unset_default_complex_dtype"], [360, 1, 1, "", "unset_default_dtype"], [360, 1, 1, "", "unset_default_float_dtype"], [360, 1, 1, "", "unset_default_int_dtype"], [360, 1, 1, "", "unset_default_uint_dtype"], [360, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultComplexDtype": [[360, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultDtype": [[360, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[360, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[360, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultUintDtype": [[360, 0, 1, "", "__init__"]], "ivy.functional.ivy.device": [[361, 3, 1, "", "DefaultDevice"], [361, 3, 1, "", "Profiler"], [361, 1, 1, "", "as_ivy_dev"], [361, 1, 1, "", "as_native_dev"], [361, 1, 1, "", "clear_cached_mem_on_dev"], [361, 1, 1, "", "default_device"], [361, 1, 1, "", "dev"], [361, 1, 1, "", "dev_util"], [361, 1, 1, "", "function_supported_devices"], [361, 1, 1, "", "function_unsupported_devices"], [361, 1, 1, "", "get_all_ivy_arrays_on_dev"], [361, 1, 1, "", "gpu_is_available"], [361, 1, 1, "", "num_cpu_cores"], [361, 1, 1, "", "num_gpus"], [361, 1, 1, "", "num_ivy_arrays_on_dev"], [361, 1, 1, "", "percent_used_mem_on_dev"], [361, 1, 1, "", "print_all_ivy_arrays_on_dev"], [361, 1, 1, "", "set_default_device"], [361, 1, 1, "", "set_split_factor"], [361, 1, 1, "", "split_factor"], [361, 1, 1, "", "split_func_call"], [361, 1, 1, "", "to_device"], [361, 1, 1, "", "total_mem_on_dev"], [361, 1, 1, "", "tpu_is_available"], [361, 1, 1, "", "unset_default_device"], [361, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[361, 0, 1, "", "__enter__"], [361, 0, 1, "", "__exit__"], [361, 0, 1, "", "__init__"]], "ivy.functional.ivy.device.Profiler": [[361, 0, 1, "", "__init__"], [361, 0, 1, "", "start"], [361, 0, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[362, 1, 1, "", "abs"], [362, 1, 1, "", "acos"], [362, 1, 1, "", "acosh"], [362, 1, 1, "", "add"], [362, 1, 1, "", "asin"], [362, 1, 1, "", "asinh"], [362, 1, 1, "", "atan"], [362, 1, 1, "", "atan2"], [362, 1, 1, "", "atanh"], [362, 1, 1, "", "bitwise_and"], [362, 1, 1, "", "bitwise_invert"], [362, 1, 1, "", "bitwise_left_shift"], [362, 1, 1, "", "bitwise_or"], [362, 1, 1, "", "bitwise_right_shift"], [362, 1, 1, "", "bitwise_xor"], [362, 1, 1, "", "ceil"], [362, 1, 1, "", "cos"], [362, 1, 1, "", "cosh"], [362, 1, 1, "", "deg2rad"], [362, 1, 1, "", "divide"], [362, 1, 1, "", "equal"], [362, 1, 1, "", "erf"], [362, 1, 1, "", "exp"], [362, 1, 1, "", "expm1"], [362, 1, 1, "", "floor"], [362, 1, 1, "", "floor_divide"], [362, 1, 1, "", "fmod"], [362, 1, 1, "", "greater"], [362, 1, 1, "", "greater_equal"], [362, 1, 1, "", "isfinite"], [362, 1, 1, "", "isinf"], [362, 1, 1, "", "isnan"], [362, 1, 1, "", "isreal"], [362, 1, 1, "", "less"], [362, 1, 1, "", "less_equal"], [362, 1, 1, "", "log"], [362, 1, 1, "", "log10"], [362, 1, 1, "", "log1p"], [362, 1, 1, "", "log2"], [362, 1, 1, "", "logaddexp"], [362, 1, 1, "", "logical_and"], [362, 1, 1, "", "logical_not"], [362, 1, 1, "", "logical_or"], [362, 1, 1, "", "logical_xor"], [362, 1, 1, "", "maximum"], [362, 1, 1, "", "minimum"], [362, 1, 1, "", "multiply"], [362, 1, 1, "", "negative"], [362, 1, 1, "", "not_equal"], [362, 1, 1, "", "positive"], [362, 1, 1, "", "pow"], [362, 1, 1, "", "rad2deg"], [362, 1, 1, "", "reciprocal"], [362, 1, 1, "", "remainder"], [362, 1, 1, "", "round"], [362, 1, 1, "", "sign"], [362, 1, 1, "", "sin"], [362, 1, 1, "", "sinh"], [362, 1, 1, "", "sqrt"], [362, 1, 1, "", "square"], [362, 1, 1, "", "subtract"], [362, 1, 1, "", "tan"], [362, 1, 1, "", "tanh"], [362, 1, 1, "", "trunc"], [362, 1, 1, "", "trunc_divide"]], "ivy.functional.ivy.experimental": [[363, 3, 1, "", "NativeSparseArray"], [363, 3, 1, "", "SparseArray"], [363, 1, 1, "", "adaptive_avg_pool1d"], [363, 1, 1, "", "adaptive_avg_pool2d"], [363, 1, 1, "", "adjoint"], [363, 1, 1, "", "allclose"], [363, 1, 1, "", "angle"], [363, 1, 1, "", "atleast_1d"], [363, 1, 1, "", "atleast_2d"], [363, 1, 1, "", "atleast_3d"], [363, 1, 1, "", "avg_pool1d"], [363, 1, 1, "", "avg_pool2d"], [363, 1, 1, "", "avg_pool3d"], [363, 1, 1, "", "batch_norm"], [363, 1, 1, "", "bernoulli"], [363, 1, 1, "", "beta"], [363, 1, 1, "", "binarizer"], [363, 1, 1, "", "binary_cross_entropy_with_logits"], [363, 1, 1, "", "bincount"], [363, 1, 1, "", "bind_custom_gradient_function"], [363, 1, 1, "", "broadcast_shapes"], [363, 1, 1, "", "cond"], [363, 1, 1, "", "conj"], [363, 1, 1, "", "copysign"], [363, 1, 1, "", "corrcoef"], [363, 1, 1, "", "count_nonzero"], [363, 1, 1, "", "current_backend"], [363, 1, 1, "", "dct"], [363, 1, 1, "", "dft"], [363, 1, 1, "", "diagflat"], [363, 1, 1, "", "diff"], [363, 1, 1, "", "dirichlet"], [363, 1, 1, "", "dropout1d"], [363, 1, 1, "", "dropout3d"], [363, 1, 1, "", "dsplit"], [363, 1, 1, "", "dstack"], [363, 1, 1, "", "eig"], [363, 1, 1, "", "eigh_tridiagonal"], [363, 1, 1, "", "eigvals"], [363, 1, 1, "", "embedding"], [363, 1, 1, "", "exp2"], [363, 1, 1, "", "expand"], [363, 1, 1, "", "eye_like"], [363, 1, 1, "", "fft"], [363, 1, 1, "", "fix"], [363, 1, 1, "", "flatten"], [363, 1, 1, "", "fliplr"], [363, 1, 1, "", "flipud"], [363, 1, 1, "", "float_power"], [363, 1, 1, "", "fmax"], [363, 1, 1, "", "fmin"], [363, 1, 1, "", "frexp"], [363, 1, 1, "", "gamma"], [363, 1, 1, "", "gcd"], [363, 1, 1, "", "gradient"], [363, 1, 1, "", "hamming_window"], [363, 1, 1, "", "handle_array_function"], [363, 1, 1, "", "handle_array_like_without_promotion"], [363, 1, 1, "", "handle_exceptions"], [363, 1, 1, "", "handle_nestable"], [363, 1, 1, "", "handle_out_argument"], [363, 1, 1, "", "handle_view"], [363, 1, 1, "", "hann_window"], [363, 1, 1, "", "heaviside"], [363, 1, 1, "", "hsplit"], [363, 1, 1, "", "hstack"], [363, 1, 1, "", "hypot"], [363, 1, 1, "", "i0"], [363, 1, 1, "", "ifft"], [363, 1, 1, "", "imag"], [363, 1, 1, "", "infer_device"], [363, 1, 1, "", "infer_dtype"], [363, 1, 1, "", "inputs_to_native_arrays"], [363, 1, 1, "", "instance_norm"], [363, 1, 1, "", "integer_arrays_to_float"], [363, 1, 1, "", "interp"], [363, 1, 1, "", "interpolate"], [363, 1, 1, "", "is_ivy_sparse_array"], [363, 1, 1, "", "is_native_dtype"], [363, 1, 1, "", "is_native_sparse_array"], [363, 1, 1, "", "isclose"], [363, 1, 1, "", "kaiser_bessel_derived_window"], [363, 1, 1, "", "kaiser_window"], [363, 1, 1, "", "kron"], [363, 1, 1, "", "l2_normalize"], [363, 1, 1, "", "lcm"], [363, 1, 1, "", "ldexp"], [363, 1, 1, "", "lexsort"], [363, 1, 1, "", "logaddexp2"], [363, 1, 1, "", "logit"], [363, 1, 1, "", "logsigmoid"], [363, 1, 1, "", "lp_normalize"], [363, 1, 1, "", "matrix_exp"], [363, 1, 1, "", "max_pool1d"], [363, 1, 1, "", "max_pool2d"], [363, 1, 1, "", "max_pool3d"], [363, 1, 1, "", "median"], [363, 1, 1, "", "moveaxis"], [363, 1, 1, "", "msort"], [363, 1, 1, "", "multi_dot"], [363, 1, 1, "", "nan_to_num"], [363, 1, 1, "", "nanmean"], [363, 1, 1, "", "nanmedian"], [363, 1, 1, "", "nansum"], [363, 1, 1, "", "native_sparse_array"], [363, 1, 1, "", "native_sparse_array_to_indices_values_and_shape"], [363, 1, 1, "", "ndenumerate"], [363, 1, 1, "", "ndindex"], [363, 1, 1, "", "nextafter"], [363, 1, 1, "", "outputs_to_ivy_arrays"], [363, 1, 1, "", "pad"], [363, 1, 1, "", "poisson"], [363, 1, 1, "", "prelu"], [363, 1, 1, "", "quantile"], [363, 1, 1, "", "real"], [363, 1, 1, "", "relu6"], [363, 1, 1, "", "rot90"], [363, 1, 1, "", "selu"], [363, 1, 1, "", "signbit"], [363, 1, 1, "", "sinc"], [363, 1, 1, "", "take_along_axis"], [363, 1, 1, "", "thresholded_relu"], [363, 1, 1, "", "to_native_arrays_and_back"], [363, 1, 1, "", "top_k"], [363, 1, 1, "", "trapz"], [363, 1, 1, "", "tril_indices"], [363, 1, 1, "", "triu_indices"], [363, 1, 1, "", "unravel_index"], [363, 1, 1, "", "vorbis_window"], [363, 1, 1, "", "vsplit"], [363, 1, 1, "", "vstack"], [363, 1, 1, "", "xlogy"], [363, 1, 1, "", "zeta"]], "ivy.functional.ivy.experimental.SparseArray": [[363, 0, 1, "", "__init__"], [363, 5, 1, "", "ccol_indices"], [363, 5, 1, "", "col_indices"], [363, 5, 1, "", "coo_indices"], [363, 5, 1, "", "crow_indices"], [363, 5, 1, "", "data"], [363, 5, 1, "", "dense_shape"], [363, 5, 1, "", "row_indices"], [363, 0, 1, "", "to_dense_array"], [363, 5, 1, "", "values"]], "ivy.functional.ivy.general": [[364, 3, 1, "", "ArrayMode"], [364, 1, 1, "", "all_equal"], [364, 1, 1, "", "arg_info"], [364, 1, 1, "", "arg_names"], [364, 1, 1, "", "array_equal"], [364, 1, 1, "", "assert_supports_inplace"], [364, 1, 1, "", "cache_fn"], [364, 1, 1, "", "clip_matrix_norm"], [364, 1, 1, "", "clip_vector_norm"], [364, 1, 1, "", "container_types"], [364, 1, 1, "", "current_backend_str"], [364, 1, 1, "", "default"], [364, 1, 1, "", "einops_rearrange"], [364, 1, 1, "", "einops_reduce"], [364, 1, 1, "", "einops_repeat"], [364, 1, 1, "", "exists"], [364, 1, 1, "", "fourier_encode"], [364, 1, 1, "", "function_supported_devices_and_dtypes"], [364, 1, 1, "", "function_unsupported_devices_and_dtypes"], [364, 1, 1, "", "gather"], [364, 1, 1, "", "gather_nd"], [364, 1, 1, "", "get_all_arrays_in_memory"], [364, 1, 1, "", "get_array_mode"], [364, 1, 1, "", "get_exception_trace_mode"], [364, 1, 1, "", "get_item"], [364, 1, 1, "", "get_min_base"], [364, 1, 1, "", "get_min_denominator"], [364, 1, 1, "", "get_nestable_mode"], [364, 1, 1, "", "get_num_dims"], [364, 1, 1, "", "get_queue_timeout"], [364, 1, 1, "", "get_referrers_recursive"], [364, 1, 1, "", "get_show_func_wrapper_trace_mode"], [364, 1, 1, "", "get_tmp_dir"], [364, 1, 1, "", "has_nans"], [364, 1, 1, "", "inplace_arrays_supported"], [364, 1, 1, "", "inplace_decrement"], [364, 1, 1, "", "inplace_increment"], [364, 1, 1, "", "inplace_update"], [364, 1, 1, "", "inplace_variables_supported"], [364, 1, 1, "", "is_array"], [364, 1, 1, "", "is_ivy_array"], [364, 1, 1, "", "is_ivy_container"], [364, 1, 1, "", "is_native_array"], [364, 1, 1, "", "isin"], [364, 1, 1, "", "isscalar"], [364, 1, 1, "", "match_kwargs"], [364, 1, 1, "", "multiprocessing"], [364, 1, 1, "", "num_arrays_in_memory"], [364, 1, 1, "", "print_all_arrays_in_memory"], [364, 1, 1, "", "scatter_flat"], [364, 1, 1, "", "scatter_nd"], [364, 1, 1, "", "set_array_mode"], [364, 1, 1, "", "set_exception_trace_mode"], [364, 1, 1, "", "set_min_base"], [364, 1, 1, "", "set_min_denominator"], [364, 1, 1, "", "set_nestable_mode"], [364, 1, 1, "", "set_queue_timeout"], [364, 1, 1, "", "set_shape_array_mode"], [364, 1, 1, "", "set_show_func_wrapper_trace_mode"], [364, 1, 1, "", "set_tmp_dir"], [364, 1, 1, "", "shape"], [364, 1, 1, "", "shape_array_mode"], [364, 1, 1, "", "stable_divide"], [364, 1, 1, "", "stable_pow"], [364, 1, 1, "", "supports_inplace_updates"], [364, 1, 1, "", "to_ivy_shape"], [364, 1, 1, "", "to_list"], [364, 1, 1, "", "to_native_shape"], [364, 1, 1, "", "to_numpy"], [364, 1, 1, "", "to_scalar"], [364, 1, 1, "", "try_else_none"], [364, 1, 1, "", "unset_array_mode"], [364, 1, 1, "", "unset_exception_trace_mode"], [364, 1, 1, "", "unset_nestable_mode"], [364, 1, 1, "", "unset_queue_timeout"], [364, 1, 1, "", "unset_shape_array_mode"], [364, 1, 1, "", "unset_show_func_wrapper_trace_mode"], [364, 1, 1, "", "value_is_nan"], [364, 1, 1, "", "vmap"]], "ivy.functional.ivy.general.ArrayMode": [[364, 0, 1, "", "__init__"]], "ivy.functional.ivy.gradients": [[365, 3, 1, "", "GradientTracking"], [365, 1, 1, "", "adam_step"], [365, 1, 1, "", "adam_update"], [365, 1, 1, "", "execute_with_gradients"], [365, 1, 1, "", "grad"], [365, 1, 1, "", "gradient_descent_update"], [365, 1, 1, "", "jac"], [365, 1, 1, "", "lamb_update"], [365, 1, 1, "", "lars_update"], [365, 1, 1, "", "optimizer_update"], [365, 1, 1, "", "set_with_grads"], [365, 1, 1, "", "stop_gradient"], [365, 1, 1, "", "unset_with_grads"], [365, 1, 1, "", "value_and_grad"], [365, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[365, 0, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[366, 1, 1, "", "conv"], [366, 1, 1, "", "conv1d"], [366, 1, 1, "", "conv1d_transpose"], [366, 1, 1, "", "conv2d"], [366, 1, 1, "", "conv2d_transpose"], [366, 1, 1, "", "conv3d"], [366, 1, 1, "", "conv3d_transpose"], [366, 1, 1, "", "conv_general_dilated"], [366, 1, 1, "", "conv_general_transpose"], [366, 1, 1, "", "depthwise_conv2d"], [366, 1, 1, "", "dropout"], [366, 1, 1, "", "linear"], [366, 1, 1, "", "lstm_update"], [366, 1, 1, "", "multi_head_attention"], [366, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[367, 1, 1, "", "cholesky"], [367, 1, 1, "", "cross"], [367, 1, 1, "", "det"], [367, 1, 1, "", "diag"], [367, 1, 1, "", "diagonal"], [367, 1, 1, "", "eig"], [367, 1, 1, "", "eigh"], [367, 1, 1, "", "eigvalsh"], [367, 1, 1, "", "inner"], [367, 1, 1, "", "inv"], [367, 1, 1, "", "lu_factor"], [367, 1, 1, "", "matmul"], [367, 1, 1, "", "matrix_norm"], [367, 1, 1, "", "matrix_power"], [367, 1, 1, "", "matrix_rank"], [367, 1, 1, "", "matrix_transpose"], [367, 1, 1, "", "outer"], [367, 1, 1, "", "pinv"], [367, 1, 1, "", "qr"], [367, 1, 1, "", "slogdet"], [367, 1, 1, "", "solve"], [367, 1, 1, "", "svd"], [367, 1, 1, "", "svdvals"], [367, 1, 1, "", "tensordot"], [367, 1, 1, "", "tensorsolve"], [367, 1, 1, "", "trace"], [367, 1, 1, "", "vander"], [367, 1, 1, "", "vecdot"], [367, 1, 1, "", "vector_norm"], [367, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[368, 1, 1, "", "binary_cross_entropy"], [368, 1, 1, "", "cross_entropy"], [368, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[369, 1, 1, "", "clip"], [369, 1, 1, "", "concat"], [369, 1, 1, "", "constant_pad"], [369, 1, 1, "", "expand_dims"], [369, 1, 1, "", "flip"], [369, 1, 1, "", "permute_dims"], [369, 1, 1, "", "repeat"], [369, 1, 1, "", "reshape"], [369, 1, 1, "", "roll"], [369, 1, 1, "", "split"], [369, 1, 1, "", "squeeze"], [369, 1, 1, "", "stack"], [369, 1, 1, "", "swapaxes"], [369, 1, 1, "", "tile"], [369, 1, 1, "", "unstack"], [369, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[370, 1, 1, "", "fomaml_step"], [370, 1, 1, "", "maml_step"], [370, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[371, 1, 1, "", "all_nested_indices"], [371, 1, 1, "", "copy_nest"], [371, 1, 1, "", "duplicate_array_index_chains"], [371, 1, 1, "", "index_nest"], [371, 1, 1, "", "insert_into_nest_at_index"], [371, 1, 1, "", "insert_into_nest_at_indices"], [371, 1, 1, "", "map"], [371, 1, 1, "", "map_nest_at_index"], [371, 1, 1, "", "map_nest_at_indices"], [371, 1, 1, "", "multi_index_nest"], [371, 1, 1, "", "nested_any"], [371, 1, 1, "", "nested_argwhere"], [371, 1, 1, "", "nested_map"], [371, 1, 1, "", "nested_multi_map"], [371, 1, 1, "", "prune_empty"], [371, 1, 1, "", "prune_nest_at_index"], [371, 1, 1, "", "prune_nest_at_indices"], [371, 1, 1, "", "set_nest_at_index"], [371, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[372, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[373, 1, 1, "", "multinomial"], [373, 1, 1, "", "randint"], [373, 1, 1, "", "random_normal"], [373, 1, 1, "", "random_uniform"], [373, 1, 1, "", "seed"], [373, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[374, 1, 1, "", "argmax"], [374, 1, 1, "", "argmin"], [374, 1, 1, "", "argwhere"], [374, 1, 1, "", "nonzero"], [374, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[375, 1, 1, "", "unique_all"], [375, 1, 1, "", "unique_counts"], [375, 1, 1, "", "unique_inverse"], [375, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[376, 1, 1, "", "argsort"], [376, 1, 1, "", "searchsorted"], [376, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[377, 1, 1, "", "cumprod"], [377, 1, 1, "", "cumsum"], [377, 1, 1, "", "einsum"], [377, 1, 1, "", "max"], [377, 1, 1, "", "mean"], [377, 1, 1, "", "min"], [377, 1, 1, "", "prod"], [377, 1, 1, "", "std"], [377, 1, 1, "", "sum"], [377, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[378, 1, 1, "", "all"], [378, 1, 1, "", "any"]], "ivy.nested_array": [[512, 2, 0, "-", "nested_array"]], "ivy.nested_array.nested_array": [[512, 3, 1, "", "NestedArray"]], "ivy.nested_array.nested_array.NestedArray": [[512, 0, 1, "", "__init__"], [512, 5, 1, "", "data"], [512, 5, 1, "", "device"], [512, 5, 1, "", "dtype"], [512, 0, 1, "", "from_row_lengths"], [512, 0, 1, "", "from_row_split"], [512, 5, 1, "", "ndim"], [512, 0, 1, "", "nested_array"], [512, 0, 1, "", "reshape"], [512, 5, 1, "", "shape"], [512, 0, 1, "", "unbind"]], "ivy.stateful": [[48, 2, 0, "-", "activations"], [49, 2, 0, "-", "converters"], [50, 2, 0, "-", "helpers"], [51, 2, 0, "-", "initializers"], [52, 2, 0, "-", "layers"], [53, 2, 0, "-", "module"], [54, 2, 0, "-", "norms"], [55, 2, 0, "-", "optimizers"], [56, 2, 0, "-", "sequential"]], "ivy.stateful.activations": [[48, 3, 1, "", "GEGLU"], [48, 3, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[48, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[48, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[49, 3, 1, "", "ModuleConverters"], [49, 1, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[49, 0, 1, "", "from_haiku_module"], [49, 0, 1, "", "from_keras_module"], [49, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[50, 3, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[50, 0, 1, "", "check_submod_rets"], [50, 0, 1, "", "get_mod_key"], [50, 0, 1, "", "mod_depth"], [50, 0, 1, "", "mod_height"], [50, 0, 1, "", "mod_with_top_mod_key_chain"], [50, 0, 1, "", "show_mod_in_top_mod"], [50, 0, 1, "", "show_structure"], [50, 0, 1, "", "show_v_in_top_v"], [50, 0, 1, "", "sub_mods"], [50, 0, 1, "", "track_submod_call_order"], [50, 0, 1, "", "track_submod_rets"], [50, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[51, 3, 1, "", "Constant"], [51, 3, 1, "", "FirstLayerSiren"], [51, 3, 1, "", "GlorotUniform"], [51, 3, 1, "", "Initializer"], [51, 3, 1, "", "KaimingNormal"], [51, 3, 1, "", "Ones"], [51, 3, 1, "", "Siren"], [51, 3, 1, "", "Uniform"], [51, 3, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[51, 0, 1, "", "__init__"], [51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[51, 0, 1, "", "__init__"], [51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[51, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[51, 0, 1, "", "__init__"], [51, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[51, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[52, 3, 1, "", "Conv1D"], [52, 3, 1, "", "Conv1DTranspose"], [52, 3, 1, "", "Conv2D"], [52, 3, 1, "", "Conv2DTranspose"], [52, 3, 1, "", "Conv3D"], [52, 3, 1, "", "Conv3DTranspose"], [52, 3, 1, "", "DepthwiseConv2D"], [52, 3, 1, "", "Dropout"], [52, 3, 1, "", "LSTM"], [52, 3, 1, "", "Linear"], [52, 3, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[52, 0, 1, "", "__init__"], [52, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[52, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[52, 0, 1, "", "__init__"]], "ivy.stateful.module": [[53, 3, 1, "", "Module"]], "ivy.stateful.module.Module": [[53, 0, 1, "", "__call__"], [53, 0, 1, "", "__init__"], [53, 0, 1, "", "build"], [53, 5, 1, "", "build_mode"], [53, 5, 1, "", "built_"], [53, 0, 1, "", "compile"], [53, 0, 1, "", "save_weights"], [53, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[54, 3, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[54, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[55, 3, 1, "", "Adam"], [55, 3, 1, "", "LAMB"], [55, 3, 1, "", "LARS"], [55, 3, 1, "", "Optimizer"], [55, 3, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[55, 0, 1, "", "__init__"], [55, 0, 1, "", "set_state"], [55, 5, 1, "", "state"]], "ivy.stateful.sequential": [[56, 3, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[56, 0, 1, "", "__init__"]], "ivy.utils": [[523, 2, 0, "-", "assertions"], [524, 2, 0, "-", "backend"], [525, 2, 0, "-", "dynamic_import"], [526, 2, 0, "-", "exceptions"], [527, 2, 0, "-", "inspection"], [528, 2, 0, "-", "verbosity"]], "ivy.utils.assertions": [[523, 1, 1, "", "check_all"], [523, 1, 1, "", "check_all_or_any_fn"], [523, 1, 1, "", "check_any"], [523, 1, 1, "", "check_dimensions"], [523, 1, 1, "", "check_elem_in_list"], [523, 1, 1, "", "check_equal"], [523, 1, 1, "", "check_exists"], [523, 1, 1, "", "check_false"], [523, 1, 1, "", "check_fill_value_and_dtype_are_compatible"], [523, 1, 1, "", "check_gather_input_valid"], [523, 1, 1, "", "check_gather_nd_input_valid"], [523, 1, 1, "", "check_greater"], [523, 1, 1, "", "check_inplace_sizes_valid"], [523, 1, 1, "", "check_isinstance"], [523, 1, 1, "", "check_kernel_padding_size"], [523, 1, 1, "", "check_less"], [523, 1, 1, "", "check_one_way_broadcastable"], [523, 1, 1, "", "check_same_dtype"], [523, 1, 1, "", "check_shape"], [523, 1, 1, "", "check_shapes_broadcastable"], [523, 1, 1, "", "check_true"]], "ivy.utils.dynamic_import": [[525, 1, 1, "", "import_module"]], "ivy.utils.exceptions": [[526, 7, 1, "", "IvyBackendException"], [526, 7, 1, "", "IvyError"], [526, 7, 1, "", "IvyException"], [526, 7, 1, "", "IvyNotImplementedException"], [526, 1, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.IvyBackendException": [[526, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[526, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[526, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[526, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[527, 1, 1, "", "add_array_specs"], [527, 1, 1, "", "fn_array_spec"]], "ivy.utils.verbosity": [[528, 1, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[513, 2, 0, "-", "assertions"], [514, 2, 0, "-", "available_frameworks"], [515, 2, 0, "-", "function_testing"], [516, 2, 0, "-", "globals"], [517, 2, 0, "-", "hypothesis_helpers"], [518, 2, 0, "-", "structs"], [519, 2, 0, "-", "test_parameter_flags"], [520, 2, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[513, 1, 1, "", "assert_all_close"], [513, 1, 1, "", "assert_same_type_and_shape"], [513, 1, 1, "", "check_unsupported_device"], [513, 1, 1, "", "check_unsupported_device_and_dtype"], [513, 1, 1, "", "check_unsupported_dtype"], [513, 1, 1, "", "test_unsupported_function"], [513, 1, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[514, 1, 1, "", "available_frameworks"], [514, 1, 1, "", "ground_truth"]], "ivy_tests.test_ivy.helpers.function_testing": [[515, 1, 1, "", "args_to_container"], [515, 1, 1, "", "args_to_frontend"], [515, 1, 1, "", "arrays_to_frontend"], [515, 1, 1, "", "as_lists"], [515, 1, 1, "", "compiled_if_required"], [515, 1, 1, "", "convtrue"], [515, 1, 1, "", "create_args_kwargs"], [515, 1, 1, "", "empty_func"], [515, 1, 1, "", "flatten"], [515, 1, 1, "", "flatten_and_to_np"], [515, 1, 1, "", "flatten_frontend"], [515, 1, 1, "", "flatten_frontend_to_np"], [515, 1, 1, "", "flatten_fw_and_to_np"], [515, 1, 1, "", "framework_comparator"], [515, 1, 1, "", "get_frontend_ret"], [515, 1, 1, "", "get_ret_and_flattened_np_array"], [515, 1, 1, "", "gradient_incompatible_function"], [515, 1, 1, "", "gradient_test"], [515, 1, 1, "", "gradient_unsupported_dtypes"], [515, 1, 1, "", "kwargs_to_args_n_kwargs"], [515, 1, 1, "", "make_json_pickable"], [515, 1, 1, "", "test_frontend_function"], [515, 1, 1, "", "test_frontend_method"], [515, 1, 1, "", "test_function"], [515, 1, 1, "", "test_method"], [515, 1, 1, "", "var_fn"]], "ivy_tests.test_ivy.helpers.globals": [[516, 7, 1, "", "InterruptedTest"], [516, 3, 1, "", "TestData"], [516, 1, 1, "", "remove_all_current_framework"], [516, 1, 1, "", "setup_api_test"], [516, 1, 1, "", "setup_frontend_test"], [516, 1, 1, "", "teardown_api_test"], [516, 1, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[516, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[516, 0, 1, "", "__init__"], [516, 4, 1, "", "fn_name"], [516, 4, 1, "", "fn_tree"], [516, 4, 1, "", "is_method"], [516, 4, 1, "", "supported_device_dtypes"], [516, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.structs": [[518, 3, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[518, 0, 1, "", "__init__"], [518, 4, 1, "", "framework_init_module"], [518, 4, 1, "", "init_name"], [518, 4, 1, "", "ivy_init_module"], [518, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[519, 3, 1, "", "FrontendFunctionTestFlags"], [519, 3, 1, "", "FrontendMethodTestFlags"], [519, 3, 1, "", "FunctionTestFlags"], [519, 3, 1, "", "InitMethodTestFlags"], [519, 3, 1, "", "MethodTestFlags"], [519, 3, 1, "", "TestFlags"], [519, 1, 1, "", "as_cont"], [519, 1, 1, "", "build_flag"], [519, 1, 1, "", "frontend_function_flags"], [519, 1, 1, "", "frontend_method_flags"], [519, 1, 1, "", "function_flags"], [519, 1, 1, "", "init_method_flags"], [519, 1, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[519, 0, 1, "", "__init__"], [519, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[519, 0, 1, "", "__init__"], [519, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[519, 0, 1, "", "__init__"], [519, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[519, 0, 1, "", "__init__"], [519, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[519, 0, 1, "", "__init__"], [519, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[519, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[520, 1, 1, "", "handle_frontend_method"], [520, 1, 1, "", "handle_frontend_test"], [520, 1, 1, "", "handle_method"], [520, 1, 1, "", "handle_test"], [520, 1, 1, "", "num_positional_args"], [520, 1, 1, "", "num_positional_args_method"], [520, 1, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:function", "2": "py:module", "3": "py:class", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "function", "Python function"], "2": ["py", "module", "Python module"], "3": ["py", "class", "Python class"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"activ": [0, 22, 48, 356], "convers": [1, 24], "creation": [2, 25, 359], "data": [3, 26, 360, 375, 491, 492, 493, 494, 548, 559, 561, 568, 573], "type": [3, 26, 360, 548, 555, 559, 573], "devic": [4, 27, 361, 549, 554, 559], "elementwis": [5, 28, 362], "experiment": [6, 29, 363, 538, 540], "gener": [7, 30, 364, 557, 561, 563], "gradient": [8, 31, 365, 557], "imag": [9, 32, 536, 545], "layer": [10, 33, 52, 366], "linear": [11, 34, 367, 393], "algebra": [11, 34, 367], "loss": [12, 35, 368], "manipul": [13, 36, 369], "norm": [14, 37, 54, 372], "random": [15, 38, 373], "search": [16, 39, 374], "set": [17, 40, 375, 529, 539, 544], "sort": [18, 41, 376, 497], "statist": [19, 42, 377], "util": [20, 43, 378, 522], "wrap": [21, 44, 556], "base": 23, "arrai": [45, 74, 512, 532, 542, 543, 547, 554, 567, 576], "contain": [46, 540, 546, 568], "state": [47, 569, 573], "convert": [49, 570], "helper": [50, 517, 520, 521, 560, 561, 562], "initi": [51, 569], "modul": [53, 548, 549, 569], "optim": [55, 569], "sequenti": 56, "ivi": [57, 529, 535, 538, 540, 543, 545, 547, 550, 552, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 572, 585], "deseri": 58, "gelu": 59, "get": [60, 540], "leaky_relu": 61, "log_softmax": 62, "mish": 63, "relu": 64, "sigmoid": 65, "softmax": 66, "softplu": 67, "ifels": 68, "whileloop": 69, "if_els": 70, "while_loop": 71, "_ivy_to_n": 72, "arang": 73, "asarrai": 75, "asarray_handle_nest": 76, "asarray_infer_devic": 77, "asarray_to_native_arrays_and_back": 78, "copy_arrai": 79, "empti": 80, "empty_lik": 81, "ey": 82, "from_dlpack": 83, "note": [83, 359], "full": [84, 560], "full_lik": 85, "linspac": 86, "logspac": 87, "meshgrid": 88, "native_arrai": 89, "one_hot": 90, "ones": 91, "ones_lik": 92, "tril": 93, "triu": 94, "zero": 95, "zeros_lik": 96, "_check_complex128": 97, "_check_float64": 98, "_get_dtyp": 99, "_get_function_list": 100, "_get_functions_from_str": 101, "_handle_nestable_dtype_info": 102, "_is_valid_dtypes_attribut": 103, "_lstrip_lin": 104, "_nested_get": 105, "as_ivy_dtyp": 106, "as_native_dtyp": 107, "astyp": 108, "broadcast_arrai": 109, "broadcast_to": 110, "can_cast": 111, "check_float": 112, "closest_valid_dtyp": 113, "default_complex_dtyp": 114, "default_dtyp": 115, "default_float_dtyp": 116, "default_int_dtyp": 117, "default_uint_dtyp": 118, "dtype": [119, 554], "dtype_bit": 120, "finfo": 121, "function_supported_dtyp": 122, "function_unsupported_dtyp": 123, "iinfo": 124, "infer_default_dtyp": 125, "invalid_dtyp": 126, "is_bool_dtyp": 127, "is_complex_dtyp": 128, "is_float_dtyp": 129, "is_int_dtyp": 130, "is_uint_dtyp": 131, "promote_typ": 132, "promote_types_of_input": 133, "result_typ": 134, "set_default_complex_dtyp": 135, "set_default_dtyp": 136, "set_default_float_dtyp": 137, "set_default_int_dtyp": 138, "set_default_uint_dtyp": 139, "type_promote_arrai": 140, "unset_default_complex_dtyp": 141, "unset_default_dtyp": 142, "unset_default_float_dtyp": 143, "unset_default_int_dtyp": 144, "unset_default_uint_dtyp": 145, "valid_dtyp": 146, "_get_devic": 147, "_get_nvml_gpu_handl": 148, "_is_valid_devices_attribut": 149, "as_ivy_dev": 150, "as_native_dev": 151, "clear_cached_mem_on_dev": 152, "default_devic": 153, "dev": 154, "dev_util": 155, "function_supported_devic": 156, "function_unsupported_devic": 157, "get_all_ivy_arrays_on_dev": 158, "gpu_is_avail": 159, "num_cpu_cor": 160, "num_gpu": 161, "num_ivy_arrays_on_dev": 162, "percent_used_mem_on_dev": 163, "print_all_ivy_arrays_on_dev": 164, "set_default_devic": 165, "set_split_factor": 166, "split_factor": 167, "split_func_cal": 168, "to_devic": 169, "total_mem_on_dev": 170, "tpu_is_avail": 171, "unset_default_devic": 172, "used_mem_on_dev": 173, "ab": 174, "aco": 175, "acosh": 176, "add": [177, 550, 560, 585], "asin": 178, "asinh": 179, "atan": 180, "atan2": 181, "atanh": 182, "bitwise_and": 183, "bitwise_invert": 184, "bitwise_left_shift": 185, "bitwise_or": 186, "bitwise_right_shift": 187, "bitwise_xor": 188, "ceil": 189, "co": 190, "cosh": 191, "deg2rad": 192, "divid": 193, "equal": 194, "erf": 195, "exp": 196, "expm1": 197, "floor": 198, "floor_divid": 199, "fmod": 200, "greater": 201, "greater_equ": 202, "isfinit": 203, "isinf": 204, "isnan": 205, "isreal": 206, "less": 207, "less_equ": 208, "log": [209, 539], "log10": 210, "log1p": 211, "log2": 212, "logaddexp": 213, "logical_and": 214, "logical_not": 215, "logical_or": 216, "logical_xor": 217, "maximum": 218, "minimum": 219, "multipli": 220, "neg": 221, "not_equ": 222, "posit": [223, 554], "pow": 224, "rad2deg": 225, "reciproc": 226, "remaind": 227, "round": 228, "sign": 229, "sin": 230, "sinh": 231, "sqrt": 232, "squar": 233, "subtract": 234, "tan": [235, 550, 560], "tanh": 236, "trunc": 237, "trunc_divid": 238, "_all_dnd_combin": 239, "_dnd_dict_differ": 240, "_dnd_dict_intersect": 241, "_dnd_dict_union": 242, "_get_devices_and_dtyp": 243, "_is_valid_device_and_dtypes_attribut": 244, "_parse_ellipsi": 245, "_valid_attrib_combin": 246, "all_equ": 247, "arg_info": 248, "arg_nam": 249, "array_equ": 250, "assert_supports_inplac": 251, "cache_fn": 252, "clip_matrix_norm": 253, "clip_vector_norm": 254, "container_typ": 255, "current_backend_str": 256, "default": 257, "einops_rearrang": 258, "einops_reduc": 259, "einops_repeat": 260, "exist": [261, 536], "fourier_encod": 262, "function_supported_devices_and_dtyp": 263, "function_unsupported_devices_and_dtyp": 264, "gather": 265, "gather_nd": 266, "get_all_arrays_in_memori": 267, "get_array_mod": 268, "get_exception_trace_mod": 269, "get_item": 270, "get_min_bas": 271, "get_min_denomin": 272, "get_nestable_mod": 273, "get_num_dim": 274, "get_queue_timeout": 275, "get_referrers_recurs": 276, "get_show_func_wrapper_trace_mod": 277, "get_tmp_dir": 278, "has_nan": 279, "inplace_arrays_support": 280, "inplace_decr": 281, "inplace_incr": 282, "inplace_upd": 283, "inplace_variables_support": 284, "is_arrai": 285, "is_ivy_arrai": 286, "is_ivy_contain": 287, "is_native_arrai": 288, "isin": 289, "isscalar": 290, "match_kwarg": 291, "multiprocess": 292, "num_arrays_in_memori": 293, "print_all_arrays_in_memori": 294, "scatter_flat": 295, "scatter_nd": 296, "set_array_mod": 297, "paramet": [297, 298, 301, 303, 304, 364, 519], "set_exception_trace_mod": 298, "set_min_bas": 299, "set_min_denomin": 300, "set_nestable_mod": 301, "set_queue_timeout": 302, "set_shape_array_mod": 303, "set_show_func_wrapper_trace_mod": 304, "set_tmp_dir": 305, "shape": [306, 375, 491, 492, 493, 494, 573], "shape_array_mod": 307, "stable_divid": 308, "stable_pow": 309, "supports_inplace_upd": 310, "to_ivy_shap": 311, "to_list": 312, "to_native_shap": 313, "to_numpi": 314, "to_scalar": 315, "try_else_non": 316, "unset_array_mod": 317, "unset_exception_trace_mod": 318, "unset_nestable_mod": 319, "unset_queue_timeout": 320, "unset_shape_array_mod": 321, "unset_show_func_wrapper_trace_mod": 322, "value_is_nan": 323, "vmap": 324, "_arrays_to_float_vari": 325, "_check_if_empti": 326, "_get_duplicate_index_chain": 327, "_get_native_variables_and_indic": 328, "_get_native_i": 329, "_get_required_float_vari": 330, "_get_required_native_vari": 331, "_get_y_and_ret_idx": 332, "_idxs_to_str": 333, "_is_vari": 334, "_non_finite_to_zero": 335, "_process_func_ret_and_grad": 336, "_set_dupl": 337, "_stop_grad_and_index": 338, "_to_ivi": 339, "_variabl": 340, "_variable_data": 341, "adam_step": 342, "adam_upd": 343, "execute_with_gradi": [344, 557], "grad": 345, "gradient_descent_upd": 346, "jac": 347, "lamb_upd": 348, "lars_upd": 349, "optimizer_upd": 350, "set_with_grad": 351, "stop_gradi": 352, "unset_with_grad": 353, "value_and_grad": 354, "with_grad": 355, "constant": 357, "control": [358, 573], "flow": [358, 573], "op": 358, "meta": 370, "nest": [371, 512], "depend": [375, 491, 492, 493, 494], "output": [375, 491, 492, 493, 494], "_deconv_length": 379, "_get_x_data_format": 380, "_handle_pad": 381, "conv": 382, "conv1d": 383, "conv1d_transpos": 384, "conv2d": 385, "conv2d_transpos": 386, "conv3d": 387, "conv3d_transpos": 388, "conv_general_dil": 389, "conv_general_transpos": 390, "depthwise_conv2d": 391, "dropout": 392, "lstm_updat": 394, "multi_head_attent": 395, "scaled_dot_product_attent": 396, "choleski": 397, "cross": 398, "det": 399, "diag": 400, "diagon": 401, "eig": 402, "eigh": 403, "eigvalsh": 404, "inner": 405, "inv": 406, "lu_factor": 407, "matmul": 408, "matrix_norm": 409, "matrix_pow": 410, "matrix_rank": 411, "matrix_transpos": 412, "outer": 413, "pinv": 414, "qr": 415, "slogdet": 416, "solv": 417, "svd": 418, "svdval": 419, "tensordot": 420, "tensorsolv": 421, "trace": [422, 552], "vander": 423, "vecdot": 424, "vector_norm": 425, "vector_to_skew_symmetric_matrix": 426, "_reduce_loss": 427, "binary_cross_entropi": 428, "cross_entropi": 429, "sparse_cross_entropi": 430, "_calculate_out_shap": 431, "clip": 432, "concat": 433, "constant_pad": 434, "expand_dim": 435, "flip": 436, "permute_dim": 437, "repeat": 438, "reshap": 439, "roll": [440, 550], "split": 441, "squeez": 442, "stack": [443, 552], "swapax": 444, "tile": 445, "unstack": 446, "zero_pad": 447, "_compute_cost_and_update_grad": 448, "_train_task": [449, 450], "_train_tasks_batch": 451, "_train_tasks_with_for_loop": 452, "fomaml_step": 453, "maml_step": 454, "reptile_step": 455, "all_nested_indic": 456, "copy_nest": 457, "duplicate_array_index_chain": 458, "index_nest": 459, "insert_into_nest_at_index": 460, "insert_into_nest_at_indic": 461, "map": [462, 547], "map_nest_at_index": 463, "map_nest_at_indic": 464, "multi_index_nest": 465, "nested_ani": 466, "nested_argwher": 467, "nested_map": 468, "nested_multi_map": 469, "prune_empti": 470, "prune_nest_at_index": 471, "prune_nest_at_indic": 472, "set_nest_at_index": 473, "set_nest_at_indic": 474, "layer_norm": 475, "_check_bounds_and_get_shap": 476, "_check_shapes_broadcast": 477, "_check_valid_scal": 478, "_randint_check_dtype_and_bound": 479, "multinomi": 480, "randint": 481, "random_norm": 482, "random_uniform": 483, "seed": 484, "shuffl": 485, "argmax": 486, "argmin": 487, "argwher": 488, "nonzero": 489, "where": [490, 538], "unique_al": 491, "unique_count": 492, "unique_invers": 493, "unique_valu": 494, "argsort": 495, "searchsort": 496, "_get_promoted_type_of_operand": 498, "cumprod": 499, "cumsum": 500, "einsum": 501, "max": 502, "mean": 503, "min": 504, "prod": 505, "std": 506, "sum": 507, "var": 508, "all": 509, "ani": 510, "nested_arrai": 511, "assert": [513, 523, 552], "avail": 514, "framework": [514, 529, 557, 566, 579, 582, 585, 586], "function": [515, 538, 546, 548, 549, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 570, 573], "test": [515, 519, 520, 539, 540, 542, 547, 560, 561], "global": 516, "hypothesi": [517, 539, 560, 561], "struct": 518, "flag": 519, "backend": [524, 544, 548, 557, 562, 565, 573], "dynam": [525, 573], "import": 525, "except": [526, 552], "inspect": 527, "verbos": 528, "content": 529, "transpil": [529, 570], "when": [529, 563], "should": 529, "i": [529, 545, 563], "us": [529, 536, 539, 542, 557, 560, 568], "up": [529, 539], "instal": 529, "pip": 529, "docker": [529, 536, 539, 540, 545], "from": 529, "sourc": 529, "document": 529, "exampl": [529, 535, 550, 554, 557, 560, 563], "contribut": [529, 534], "commun": 529, "citat": 529, "background": 530, "ml": [531, 581, 585], "explos": 531, "standard": [532, 563, 576, 585], "skeptic": 532, "complimentari": 532, "v": [532, 573], "competit": 532, "do": [532, 561], "work": [532, 575], "The": [532, 540, 545, 557, 559, 567, 573], "api": [532, 538, 540, 542, 546, 547, 557, 562, 565, 567, 569, 570, 576, 583, 585], "why": [533, 561], "unifi": [533, 567, 581, 585], "No": [533, 539], "more": [533, 539, 563], "re": [533, 561], "implement": [533, 547, 557], "infinit": 533, "shelf": 533, "life": 533, "appli": [535, 572], "librari": [535, 572], "introduct": [535, 559, 560], "robot": [535, 572], "build": [536, 545, 565], "doc": [536, 545], "conveni": [536, 545, 555], "script": [536, 545], "hub": 536, "local": [536, 540], "without": [536, 560], "help": [537, 540], "resourc": 537, "open": 538, "task": 538, "format": [538, 553, 578, 585], "checklist": 538, "frontend": [538, 544, 559, 560, 570], "place": 538, "fork": [539, 540], "clone": [539, 547], "repo": 539, "pycharm": [539, 540], "virtual": 539, "environ": 539, "miniconda": 539, "venv": 539, "interpret": 539, "window": 539, "maco": 539, "ubuntu": 539, "detail": 539, "free": 539, "github": 539, "codespac": 539, "pre": [539, 553], "commit": [539, 540, 547, 553], "basic": [540, 559], "todo": 540, "list": 540, "issu": 540, "manag": 540, "your": [540, 561], "who": 540, "To": 540, "ask": 540, "With": 540, "command": 540, "line": 540, "browser": 540, "pull": [540, 547], "request": [540, 547], "small": 540, "often": 540, "interact": 540, "run": [540, 542, 545, 561], "most": 540, "out": [540, 554, 558], "id": [540, 542], "deep": 541, "dive": 541, "termin": 542, "regener": 542, "failur": 542, "skip": 542, "nativ": [543, 563], "handl": [543, 552, 573], "integr": [543, 547, 561], "custom": [543, 545, 557, 568, 573], "class": [543, 552, 559, 567], "version": [544, 562, 573], "support": [544, 548, 559, 573], "pipelin": [545, 547, 561, 573], "how": [545, 561], "builder": 545, "being": 545, "option": 545, "": 545, "structur": [545, 557, 573], "index": 545, "rst": 545, "partial_conf": 545, "py": 545, "prebuild": 545, "sh": 545, "extens": [545, 571], "custom_autosummari": 545, "hide": 545, "tabl": 545, "includ": 545, "fix": 545, "directori": 545, "substitut": 545, "caption": 545, "custom_build": 545, "discussion_link": 545, "skippable_funct": 545, "instanc": [546, 559, 560, 567], "method": [546, 559, 560, 567, 568], "static": 546, "special": [546, 559], "nestabl": [546, 554, 555], "continu": 547, "push": 547, "pr": 547, "trigger": 547, "A": [547, 563], "top": 547, "down": 547, "view": 547, "store": 547, "retriev": 547, "repositori": 547, "nitti": 547, "gritti": 547, "storag": 547, "space": 547, "unifyai": 547, "determin": 547, "coverag": 547, "workflow": 547, "multipl": 547, "runner": 547, "race": 547, "condit": 547, "period": 547, "manual": 547, "dispatch": 547, "ci": 547, "dashboard": 547, "promot": [548, 559], "argument": [548, 549, 554, 558, 559], "other": [548, 549], "unsupport": 548, "bug": 548, "superset": [548, 563], "docstr": [550, 551], "configur": [552, 568], "mode": 552, "func_wrapp": 552, "prune": 552, "handle_except": 552, "decor": [552, 561], "lint": 553, "check": [553, 573], "hook": 553, "keyword": 554, "input": 554, "number": 554, "oper": [554, 567, 573], "integ": 554, "sequenc": 554, "primari": 555, "composit": [555, 559], "mix": 555, "standalon": 555, "overview": 557, "usag": [557, 563], "signatur": 557, "an": 557, "design": [557, 562, 564], "our": 557, "polici": [557, 559], "specif": [557, 583, 584, 585], "consider": 557, "inplac": 558, "updat": 558, "copi": 558, "unus": 559, "miss": 559, "temporari": 559, "rule": 559, "numpi": [559, 579], "cast": 559, "duplic": [559, 563], "valu": 560, "alia": 560, "write": 561, "own": 561, "strategi": 561, "we": 561, "need": 561, "effect": 561, "bonu": 561, "extend": [561, 563], "featur": 561, "self": 561, "consist": 561, "explicit": 561, "test_array_funct": 561, "fail": 561, "navig": 562, "code": 562, "categor": 562, "submodul": 562, "pin": 562, "behaviour": 563, "what": [563, 585], "non": 563, "too": 563, "much": 563, "balanc": 563, "effici": 563, "maxim": 563, "block": 565, "handler": 565, "graph": [565, 570, 580, 585], "compil": [565, 570, 577, 582, 584, 585], "monkei": 567, "patch": 567, "construct": 568, "represent": 568, "recurs": 568, "built": 568, "ins": 568, "access": 568, "save": 568, "load": 568, "comparison": 568, "case": 568, "compartment": 568, "network": [568, 570], "weight": 568, "role": 570, "model": [570, 573], "mechan": 572, "vision": 572, "gym": 572, "memori": 572, "faq": 573, "maintain": 573, "size": 573, "gpu": 573, "deploy": 573, "auto": 573, "differenti": 573, "replica": 573, "parallel": 573, "altern": 573, "glossari": 574, "relat": 575, "infrastructur": [577, 585], "llvm": 577, "mlir": 577, "oneapi": 577, "exchang": [578, 585], "onnx": 578, "nnef": 578, "coreml": 578, "matlab": 579, "scipi": 579, "torch": [579, 580], "scikit": 579, "learn": 579, "theano": 579, "panda": 579, "julia": 579, "apach": [579, 582], "spark": 579, "mllib": 579, "caff": 579, "chainer": 579, "tensorflow": 579, "1": 579, "mxnet": 579, "cntk": 579, "pytorch": 579, "flux": 579, "jax": 579, "2": 579, "dex": 579, "languag": 579, "tracer": [580, 585], "tf": 580, "jaxpr": 580, "jit": 580, "fx": 580, "compani": [581, 585], "quansight": 581, "modular": 581, "octoml": 581, "multi": [582, 585], "vendor": [582, 583, 584, 585], "tvm": 582, "xla": 582, "gcc": 582, "tensorrt": 583, "cuda": 583, "icc": 584, "icx": 584, "nvcc": 584, "doe": 585, "wrapper": [585, 586], "eagerpi": 586, "kera": 586, "thinc": 586, "tensorli": 586, "neuropod": 586}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Activations": [[0, "module-ivy.data_classes.array.activations"], [22, "module-ivy.data_classes.container.activations"], [48, "module-ivy.stateful.activations"], [356, "activations"]], "Conversions": [[1, "module-ivy.data_classes.array.conversions"], [24, "module-ivy.data_classes.container.conversions"]], "Creation": [[2, "module-ivy.data_classes.array.creation"], [25, "module-ivy.data_classes.container.creation"], [359, "creation"]], "Data type": [[3, "module-ivy.data_classes.array.data_type"], [26, "module-ivy.data_classes.container.data_type"], [360, "data-type"]], "Device": [[4, "module-ivy.data_classes.array.device"], [27, "module-ivy.data_classes.container.device"], [361, "device"]], "Elementwise": [[5, "module-ivy.data_classes.array.elementwise"], [28, "module-ivy.data_classes.container.elementwise"], [362, "elementwise"]], "Experimental": [[6, "module-ivy.data_classes.array.experimental"], [29, "module-ivy.data_classes.container.experimental"], [363, "experimental"]], "General": [[7, "module-ivy.data_classes.array.general"], [30, "module-ivy.data_classes.container.general"], [364, "general"]], "Gradients": [[8, "module-ivy.data_classes.array.gradients"], [31, "module-ivy.data_classes.container.gradients"], [365, "gradients"], [557, "gradients"]], "Image": [[9, "module-ivy.data_classes.array.image"], [32, "module-ivy.data_classes.container.image"]], "Layers": [[10, "module-ivy.data_classes.array.layers"], [33, "module-ivy.data_classes.container.layers"], [52, "module-ivy.stateful.layers"], [366, "layers"]], "Linear algebra": [[11, "module-ivy.data_classes.array.linear_algebra"], [34, "module-ivy.data_classes.container.linear_algebra"], [367, "linear-algebra"]], "Losses": [[12, "module-ivy.data_classes.array.losses"], [35, "module-ivy.data_classes.container.losses"], [368, "losses"]], "Manipulation": [[13, "module-ivy.data_classes.array.manipulation"], [36, "module-ivy.data_classes.container.manipulation"], [369, "manipulation"]], "Norms": [[14, "module-ivy.data_classes.array.norms"], [37, "module-ivy.data_classes.container.norms"], [54, "module-ivy.stateful.norms"], [372, "norms"]], "Random": [[15, "module-ivy.data_classes.array.random"], [38, "module-ivy.data_classes.container.random"], [373, "random"]], "Searching": [[16, "module-ivy.data_classes.array.searching"], [39, "module-ivy.data_classes.container.searching"], [374, "searching"]], "Set": [[17, "module-ivy.data_classes.array.set"], [40, "module-ivy.data_classes.container.set"], [375, "set"]], "Sorting": [[18, "module-ivy.data_classes.array.sorting"], [41, "module-ivy.data_classes.container.sorting"], [376, "sorting"]], "Statistical": [[19, "module-ivy.data_classes.array.statistical"], [42, "module-ivy.data_classes.container.statistical"], [377, "statistical"]], "Utility": [[20, "module-ivy.data_classes.array.utility"], [43, "module-ivy.data_classes.container.utility"], [378, "utility"]], "Wrapping": [[21, "module-ivy.data_classes.array.wrapping"], [44, "module-ivy.data_classes.container.wrapping"]], "Base": [[23, "module-ivy.data_classes.container.base"]], "Array": [[45, "array"]], "Container": [[46, "container"]], "stateful": [[47, "stateful"]], "Converters": [[49, "module-ivy.stateful.converters"]], "Helpers": [[50, "module-ivy.stateful.helpers"]], "Initializers": [[51, "module-ivy.stateful.initializers"], [569, "initializers"]], "Module": [[53, "module-ivy.stateful.module"]], "Optimizers": [[55, "module-ivy.stateful.optimizers"], [569, "optimizers"]], "Sequential": [[56, "module-ivy.stateful.sequential"]], "ivy": [[57, "ivy"]], "deserialize": [[58, "deserialize"]], "gelu": [[59, "gelu"]], "get": [[60, "get"]], "leaky_relu": [[61, "leaky-relu"]], "log_softmax": [[62, "log-softmax"]], "mish": [[63, "mish"]], "relu": [[64, "relu"]], "sigmoid": [[65, "sigmoid"]], "softmax": [[66, "softmax"]], "softplus": [[67, "softplus"]], "IfElse": [[68, "ifelse"]], "WhileLoop": [[69, "whileloop"]], "if_else": [[70, "if-else"]], "while_loop": [[71, "while-loop"]], "_ivy_to_native": [[72, "ivy-to-native"]], "arange": [[73, "arange"]], "array": [[74, "array"]], "asarray": [[75, "asarray"]], "asarray_handle_nestable": [[76, "asarray-handle-nestable"]], "asarray_infer_device": [[77, "asarray-infer-device"]], "asarray_to_native_arrays_and_back": [[78, "asarray-to-native-arrays-and-back"]], "copy_array": [[79, "copy-array"]], "empty": [[80, "empty"]], "empty_like": [[81, "empty-like"]], "eye": [[82, "eye"]], "from_dlpack": [[83, "from-dlpack"]], "Note": [[83, null], [359, null]], "full": [[84, "full"]], "full_like": [[85, "full-like"]], "linspace": [[86, "linspace"]], "logspace": [[87, "logspace"]], "meshgrid": [[88, "meshgrid"]], "native_array": [[89, "native-array"]], "one_hot": [[90, "one-hot"]], "ones": [[91, "ones"]], "ones_like": [[92, "ones-like"]], "tril": [[93, "tril"]], "triu": [[94, "triu"]], "zeros": [[95, "zeros"]], "zeros_like": [[96, "zeros-like"]], "_check_complex128": [[97, "check-complex128"]], "_check_float64": [[98, "check-float64"]], "_get_dtypes": [[99, "get-dtypes"]], "_get_function_list": [[100, "get-function-list"]], "_get_functions_from_string": [[101, "get-functions-from-string"]], "_handle_nestable_dtype_info": [[102, "handle-nestable-dtype-info"]], "_is_valid_dtypes_attributes": [[103, "is-valid-dtypes-attributes"]], "_lstrip_lines": [[104, "lstrip-lines"]], "_nested_get": [[105, "nested-get"]], "as_ivy_dtype": [[106, "as-ivy-dtype"]], "as_native_dtype": [[107, "as-native-dtype"]], "astype": [[108, "astype"]], "broadcast_arrays": [[109, "broadcast-arrays"]], "broadcast_to": [[110, "broadcast-to"]], "can_cast": [[111, "can-cast"]], "check_float": [[112, "check-float"]], "closest_valid_dtype": [[113, "closest-valid-dtype"]], "default_complex_dtype": [[114, "default-complex-dtype"]], "default_dtype": [[115, "default-dtype"]], "default_float_dtype": [[116, "default-float-dtype"]], "default_int_dtype": [[117, "default-int-dtype"]], "default_uint_dtype": [[118, "default-uint-dtype"]], "dtype": [[119, "dtype"]], "dtype_bits": [[120, "dtype-bits"]], "finfo": [[121, "finfo"]], "function_supported_dtypes": [[122, "function-supported-dtypes"]], "function_unsupported_dtypes": [[123, "function-unsupported-dtypes"]], "iinfo": [[124, "iinfo"]], "infer_default_dtype": [[125, "infer-default-dtype"]], "invalid_dtype": [[126, "invalid-dtype"]], "is_bool_dtype": [[127, "is-bool-dtype"]], "is_complex_dtype": [[128, "is-complex-dtype"]], "is_float_dtype": [[129, "is-float-dtype"]], "is_int_dtype": [[130, "is-int-dtype"]], "is_uint_dtype": [[131, "is-uint-dtype"]], "promote_types": [[132, "promote-types"]], "promote_types_of_inputs": [[133, "promote-types-of-inputs"]], "result_type": [[134, "result-type"]], "set_default_complex_dtype": [[135, "set-default-complex-dtype"]], "set_default_dtype": [[136, "set-default-dtype"]], "set_default_float_dtype": [[137, "set-default-float-dtype"]], "set_default_int_dtype": [[138, "set-default-int-dtype"]], "set_default_uint_dtype": [[139, "set-default-uint-dtype"]], "type_promote_arrays": [[140, "type-promote-arrays"]], "unset_default_complex_dtype": [[141, "unset-default-complex-dtype"]], "unset_default_dtype": [[142, "unset-default-dtype"]], "unset_default_float_dtype": [[143, "unset-default-float-dtype"]], "unset_default_int_dtype": [[144, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[145, "unset-default-uint-dtype"]], "valid_dtype": [[146, "valid-dtype"]], "_get_devices": [[147, "get-devices"]], "_get_nvml_gpu_handle": [[148, "get-nvml-gpu-handle"]], "_is_valid_devices_attributes": [[149, "is-valid-devices-attributes"]], "as_ivy_dev": [[150, "as-ivy-dev"]], "as_native_dev": [[151, "as-native-dev"]], "clear_cached_mem_on_dev": [[152, "clear-cached-mem-on-dev"]], "default_device": [[153, "default-device"]], "dev": [[154, "dev"]], "dev_util": [[155, "dev-util"]], "function_supported_devices": [[156, "function-supported-devices"]], "function_unsupported_devices": [[157, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[158, "get-all-ivy-arrays-on-dev"]], "gpu_is_available": [[159, "gpu-is-available"]], "num_cpu_cores": [[160, "num-cpu-cores"]], "num_gpus": [[161, "num-gpus"]], "num_ivy_arrays_on_dev": [[162, "num-ivy-arrays-on-dev"]], "percent_used_mem_on_dev": [[163, "percent-used-mem-on-dev"]], "print_all_ivy_arrays_on_dev": [[164, "print-all-ivy-arrays-on-dev"]], "set_default_device": [[165, "set-default-device"]], "set_split_factor": [[166, "set-split-factor"]], "split_factor": [[167, "split-factor"]], "split_func_call": [[168, "split-func-call"]], "to_device": [[169, "to-device"]], "total_mem_on_dev": [[170, "total-mem-on-dev"]], "tpu_is_available": [[171, "tpu-is-available"]], "unset_default_device": [[172, "unset-default-device"]], "used_mem_on_dev": [[173, "used-mem-on-dev"]], "abs": [[174, "abs"]], "acos": [[175, "acos"]], "acosh": [[176, "acosh"]], "add": [[177, "add"]], "asin": [[178, "asin"]], "asinh": [[179, "asinh"]], "atan": [[180, "atan"]], "atan2": [[181, "atan2"]], "atanh": [[182, "atanh"]], "bitwise_and": [[183, "bitwise-and"]], "bitwise_invert": [[184, "bitwise-invert"]], "bitwise_left_shift": [[185, "bitwise-left-shift"]], "bitwise_or": [[186, "bitwise-or"]], "bitwise_right_shift": [[187, "bitwise-right-shift"]], "bitwise_xor": [[188, "bitwise-xor"]], "ceil": [[189, "ceil"]], "cos": [[190, "cos"]], "cosh": [[191, "cosh"]], "deg2rad": [[192, "deg2rad"]], "divide": [[193, "divide"]], "equal": [[194, "equal"]], "erf": [[195, "erf"]], "exp": [[196, "exp"]], "expm1": [[197, "expm1"]], "floor": [[198, "floor"]], "floor_divide": [[199, "floor-divide"]], "fmod": [[200, "fmod"]], "greater": [[201, "greater"]], "greater_equal": [[202, "greater-equal"]], "isfinite": [[203, "isfinite"]], "isinf": [[204, "isinf"]], "isnan": [[205, "isnan"]], "isreal": [[206, "isreal"]], "less": [[207, "less"]], "less_equal": [[208, "less-equal"]], "log": [[209, "log"]], "log10": [[210, "log10"]], "log1p": [[211, "log1p"]], "log2": [[212, "log2"]], "logaddexp": [[213, "logaddexp"]], "logical_and": [[214, "logical-and"]], "logical_not": [[215, "logical-not"]], "logical_or": [[216, "logical-or"]], "logical_xor": [[217, "logical-xor"]], "maximum": [[218, "maximum"]], "minimum": [[219, "minimum"]], "multiply": [[220, "multiply"]], "negative": [[221, "negative"]], "not_equal": [[222, "not-equal"]], "positive": [[223, "positive"]], "pow": [[224, "pow"]], "rad2deg": [[225, "rad2deg"]], "reciprocal": [[226, "reciprocal"]], "remainder": [[227, "remainder"]], "round": [[228, "round"]], "sign": [[229, "sign"]], "sin": [[230, "sin"]], "sinh": [[231, "sinh"]], "sqrt": [[232, "sqrt"]], "square": [[233, "square"]], "subtract": [[234, "subtract"]], "tan": [[235, "tan"]], "tanh": [[236, "tanh"]], "trunc": [[237, "trunc"]], "trunc_divide": [[238, "trunc-divide"]], "_all_dnd_combinations": [[239, "all-dnd-combinations"]], "_dnd_dict_difference": [[240, "dnd-dict-difference"]], "_dnd_dict_intersection": [[241, "dnd-dict-intersection"]], "_dnd_dict_union": [[242, "dnd-dict-union"]], "_get_devices_and_dtypes": [[243, "get-devices-and-dtypes"]], "_is_valid_device_and_dtypes_attributes": [[244, "is-valid-device-and-dtypes-attributes"]], "_parse_ellipsis": [[245, "parse-ellipsis"]], "_valid_attrib_combinations": [[246, "valid-attrib-combinations"]], "all_equal": [[247, "all-equal"]], "arg_info": [[248, "arg-info"]], "arg_names": [[249, "arg-names"]], "array_equal": [[250, "array-equal"]], "assert_supports_inplace": [[251, "assert-supports-inplace"]], "cache_fn": [[252, "cache-fn"]], "clip_matrix_norm": [[253, "clip-matrix-norm"]], "clip_vector_norm": [[254, "clip-vector-norm"]], "container_types": [[255, "container-types"]], "current_backend_str": [[256, "current-backend-str"]], "default": [[257, "default"]], "einops_rearrange": [[258, "einops-rearrange"]], "einops_reduce": [[259, "einops-reduce"]], "einops_repeat": [[260, "einops-repeat"]], "exists": [[261, "exists"]], "fourier_encode": [[262, "fourier-encode"]], "function_supported_devices_and_dtypes": [[263, "function-supported-devices-and-dtypes"]], "function_unsupported_devices_and_dtypes": [[264, "function-unsupported-devices-and-dtypes"]], "gather": [[265, "gather"]], "gather_nd": [[266, "gather-nd"]], "get_all_arrays_in_memory": [[267, "get-all-arrays-in-memory"]], "get_array_mode": [[268, "get-array-mode"]], "get_exception_trace_mode": [[269, "get-exception-trace-mode"]], "get_item": [[270, "get-item"]], "get_min_base": [[271, "get-min-base"]], "get_min_denominator": [[272, "get-min-denominator"]], "get_nestable_mode": [[273, "get-nestable-mode"]], "get_num_dims": [[274, "get-num-dims"]], "get_queue_timeout": [[275, "get-queue-timeout"]], "get_referrers_recursive": [[276, "get-referrers-recursive"]], "get_show_func_wrapper_trace_mode": [[277, "get-show-func-wrapper-trace-mode"]], "get_tmp_dir": [[278, "get-tmp-dir"]], "has_nans": [[279, "has-nans"]], "inplace_arrays_supported": [[280, "inplace-arrays-supported"]], "inplace_decrement": [[281, "inplace-decrement"]], "inplace_increment": [[282, "inplace-increment"]], "inplace_update": [[283, "inplace-update"]], "inplace_variables_supported": [[284, "inplace-variables-supported"]], "is_array": [[285, "is-array"]], "is_ivy_array": [[286, "is-ivy-array"]], "is_ivy_container": [[287, "is-ivy-container"]], "is_native_array": [[288, "is-native-array"]], "isin": [[289, "isin"]], "isscalar": [[290, "isscalar"]], "match_kwargs": [[291, "match-kwargs"]], "multiprocessing": [[292, "multiprocessing"]], "num_arrays_in_memory": [[293, "num-arrays-in-memory"]], "print_all_arrays_in_memory": [[294, "print-all-arrays-in-memory"]], "scatter_flat": [[295, "scatter-flat"]], "scatter_nd": [[296, "scatter-nd"]], "set_array_mode": [[297, "set-array-mode"]], "Parameter": [[297, "parameter"], [298, "parameter"], [301, "parameter"], [303, "parameter"], [304, "parameter"], [364, "parameter"], [364, "id1"], [364, "id2"], [364, "id3"], [364, "id4"]], "set_exception_trace_mode": [[298, "set-exception-trace-mode"]], "set_min_base": [[299, "set-min-base"]], "set_min_denominator": [[300, "set-min-denominator"]], "set_nestable_mode": [[301, "set-nestable-mode"]], "set_queue_timeout": [[302, "set-queue-timeout"]], "set_shape_array_mode": [[303, "set-shape-array-mode"]], "set_show_func_wrapper_trace_mode": [[304, "set-show-func-wrapper-trace-mode"]], "set_tmp_dir": [[305, "set-tmp-dir"]], "shape": [[306, "shape"]], "shape_array_mode": [[307, "shape-array-mode"]], "stable_divide": [[308, "stable-divide"]], "stable_pow": [[309, "stable-pow"]], "supports_inplace_updates": [[310, "supports-inplace-updates"]], "to_ivy_shape": [[311, "to-ivy-shape"]], "to_list": [[312, "to-list"]], "to_native_shape": [[313, "to-native-shape"]], "to_numpy": [[314, "to-numpy"]], "to_scalar": [[315, "to-scalar"]], "try_else_none": [[316, "try-else-none"]], "unset_array_mode": [[317, "unset-array-mode"]], "unset_exception_trace_mode": [[318, "unset-exception-trace-mode"]], "unset_nestable_mode": [[319, "unset-nestable-mode"]], "unset_queue_timeout": [[320, "unset-queue-timeout"]], "unset_shape_array_mode": [[321, "unset-shape-array-mode"]], "unset_show_func_wrapper_trace_mode": [[322, "unset-show-func-wrapper-trace-mode"]], "value_is_nan": [[323, "value-is-nan"]], "vmap": [[324, "vmap"]], "_arrays_to_float_variables": [[325, "arrays-to-float-variables"]], "_check_if_empty": [[326, "check-if-empty"]], "_get_duplicate_index_chains": [[327, "get-duplicate-index-chains"]], "_get_native_variables_and_indices": [[328, "get-native-variables-and-indices"]], "_get_native_y": [[329, "get-native-y"]], "_get_required_float_variables": [[330, "get-required-float-variables"]], "_get_required_native_variables": [[331, "get-required-native-variables"]], "_get_y_and_ret_idxs": [[332, "get-y-and-ret-idxs"]], "_idxs_to_str": [[333, "idxs-to-str"]], "_is_variable": [[334, "is-variable"]], "_non_finite_to_zero": [[335, "non-finite-to-zero"]], "_process_func_ret_and_grads": [[336, "process-func-ret-and-grads"]], "_set_duplicates": [[337, "set-duplicates"]], "_stop_grad_and_index": [[338, "stop-grad-and-index"]], "_to_ivy": [[339, "to-ivy"]], "_variable": [[340, "variable"]], "_variable_data": [[341, "variable-data"]], "adam_step": [[342, "adam-step"]], "adam_update": [[343, "adam-update"]], "execute_with_gradients": [[344, "execute-with-gradients"]], "grad": [[345, "grad"]], "gradient_descent_update": [[346, "gradient-descent-update"]], "jac": [[347, "jac"]], "lamb_update": [[348, "lamb-update"]], "lars_update": [[349, "lars-update"]], "optimizer_update": [[350, "optimizer-update"]], "set_with_grads": [[351, "set-with-grads"]], "stop_gradient": [[352, "stop-gradient"]], "unset_with_grads": [[353, "unset-with-grads"]], "value_and_grad": [[354, "value-and-grad"]], "with_grads": [[355, "with-grads"]], "Constants": [[357, "constants"]], "Control flow ops": [[358, "control-flow-ops"]], "Meta": [[370, "meta"]], "Nest": [[371, "nest"]], "Data-dependent output shape": [[375, null], [375, null], [375, null], [375, null], [491, null], [492, null], [493, null], [494, null]], "_deconv_length": [[379, "deconv-length"]], "_get_x_data_format": [[380, "get-x-data-format"]], "_handle_padding": [[381, "handle-padding"]], "conv": [[382, "conv"]], "conv1d": [[383, "conv1d"]], "conv1d_transpose": [[384, "conv1d-transpose"]], "conv2d": [[385, "conv2d"]], "conv2d_transpose": [[386, "conv2d-transpose"]], "conv3d": [[387, "conv3d"]], "conv3d_transpose": [[388, "conv3d-transpose"]], "conv_general_dilated": [[389, "conv-general-dilated"]], "conv_general_transpose": [[390, "conv-general-transpose"]], "depthwise_conv2d": [[391, "depthwise-conv2d"]], "dropout": [[392, "dropout"]], "linear": [[393, "linear"]], "lstm_update": [[394, "lstm-update"]], "multi_head_attention": [[395, "multi-head-attention"]], "scaled_dot_product_attention": [[396, "scaled-dot-product-attention"]], "cholesky": [[397, "cholesky"]], "cross": [[398, "cross"]], "det": [[399, "det"]], "diag": [[400, "diag"]], "diagonal": [[401, "diagonal"]], "eig": [[402, "eig"]], "eigh": [[403, "eigh"]], "eigvalsh": [[404, "eigvalsh"]], "inner": [[405, "inner"]], "inv": [[406, "inv"]], "lu_factor": [[407, "lu-factor"]], "matmul": [[408, "matmul"]], "matrix_norm": [[409, "matrix-norm"]], "matrix_power": [[410, "matrix-power"]], "matrix_rank": [[411, "matrix-rank"]], "matrix_transpose": [[412, "matrix-transpose"]], "outer": [[413, "outer"]], "pinv": [[414, "pinv"]], "qr": [[415, "qr"]], "slogdet": [[416, "slogdet"]], "solve": [[417, "solve"]], "svd": [[418, "svd"]], "svdvals": [[419, "svdvals"]], "tensordot": [[420, "tensordot"]], "tensorsolve": [[421, "tensorsolve"]], "trace": [[422, "trace"]], "vander": [[423, "vander"]], "vecdot": [[424, "vecdot"]], "vector_norm": [[425, "vector-norm"]], "vector_to_skew_symmetric_matrix": [[426, "vector-to-skew-symmetric-matrix"]], "_reduce_loss": [[427, "reduce-loss"]], "binary_cross_entropy": [[428, "binary-cross-entropy"]], "cross_entropy": [[429, "cross-entropy"]], "sparse_cross_entropy": [[430, "sparse-cross-entropy"]], "_calculate_out_shape": [[431, "calculate-out-shape"]], "clip": [[432, "clip"]], "concat": [[433, "concat"]], "constant_pad": [[434, "constant-pad"]], "expand_dims": [[435, "expand-dims"]], "flip": [[436, "flip"]], "permute_dims": [[437, "permute-dims"]], "repeat": [[438, "repeat"]], "reshape": [[439, "reshape"]], "roll": [[440, "roll"]], "split": [[441, "split"]], "squeeze": [[442, "squeeze"]], "stack": [[443, "stack"]], "swapaxes": [[444, "swapaxes"]], "tile": [[445, "tile"]], "unstack": [[446, "unstack"]], "zero_pad": [[447, "zero-pad"]], "_compute_cost_and_update_grads": [[448, "compute-cost-and-update-grads"]], "_train_task": [[449, "train-task"]], "_train_tasks": [[450, "train-tasks"]], "_train_tasks_batched": [[451, "train-tasks-batched"]], "_train_tasks_with_for_loop": [[452, "train-tasks-with-for-loop"]], "fomaml_step": [[453, "fomaml-step"]], "maml_step": [[454, "maml-step"]], "reptile_step": [[455, "reptile-step"]], "all_nested_indices": [[456, "all-nested-indices"]], "copy_nest": [[457, "copy-nest"]], "duplicate_array_index_chains": [[458, "duplicate-array-index-chains"]], "index_nest": [[459, "index-nest"]], "insert_into_nest_at_index": [[460, "insert-into-nest-at-index"]], "insert_into_nest_at_indices": [[461, "insert-into-nest-at-indices"]], "map": [[462, "map"]], "map_nest_at_index": [[463, "map-nest-at-index"]], "map_nest_at_indices": [[464, "map-nest-at-indices"]], "multi_index_nest": [[465, "multi-index-nest"]], "nested_any": [[466, "nested-any"]], "nested_argwhere": [[467, "nested-argwhere"]], "nested_map": [[468, "nested-map"]], "nested_multi_map": [[469, "nested-multi-map"]], "prune_empty": [[470, "prune-empty"]], "prune_nest_at_index": [[471, "prune-nest-at-index"]], "prune_nest_at_indices": [[472, "prune-nest-at-indices"]], "set_nest_at_index": [[473, "set-nest-at-index"]], "set_nest_at_indices": [[474, "set-nest-at-indices"]], "layer_norm": [[475, "layer-norm"]], "_check_bounds_and_get_shape": [[476, "check-bounds-and-get-shape"]], "_check_shapes_broadcastable": [[477, "check-shapes-broadcastable"]], "_check_valid_scale": [[478, "check-valid-scale"]], "_randint_check_dtype_and_bound": [[479, "randint-check-dtype-and-bound"]], "multinomial": [[480, "multinomial"]], "randint": [[481, "randint"]], "random_normal": [[482, "random-normal"]], "random_uniform": [[483, "random-uniform"]], "seed": [[484, "seed"]], "shuffle": [[485, "shuffle"]], "argmax": [[486, "argmax"]], "argmin": [[487, "argmin"]], "argwhere": [[488, "argwhere"]], "nonzero": [[489, "nonzero"]], "where": [[490, "where"]], "unique_all": [[491, "unique-all"]], "unique_counts": [[492, "unique-counts"]], "unique_inverse": [[493, "unique-inverse"]], "unique_values": [[494, "unique-values"]], "argsort": [[495, "argsort"]], "searchsorted": [[496, "searchsorted"]], "sort": [[497, "sort"]], "_get_promoted_type_of_operands": [[498, "get-promoted-type-of-operands"]], "cumprod": [[499, "cumprod"]], "cumsum": [[500, "cumsum"]], "einsum": [[501, "einsum"]], "max": [[502, "max"]], "mean": [[503, "mean"]], "min": [[504, "min"]], "prod": [[505, "prod"]], "std": [[506, "std"]], "sum": [[507, "sum"]], "var": [[508, "var"]], "all": [[509, "all"]], "any": [[510, "any"]], "nested_array": [[511, "nested-array"]], "Nested array": [[512, "module-ivy.nested_array.nested_array"]], "Assertions": [[513, "module-ivy_tests.test_ivy.helpers.assertions"], [523, "module-ivy.utils.assertions"]], "Available frameworks": [[514, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Function testing": [[515, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[516, "module-ivy_tests.test_ivy.helpers.globals"]], "Hypothesis helpers": [[517, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "Structs": [[518, "module-ivy_tests.test_ivy.helpers.structs"]], "Test parameter flags": [[519, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Testing helpers": [[520, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "helpers": [[521, "helpers"]], "utils": [[522, "utils"]], "Backend": [[524, "module-ivy.utils.backend"]], "Dynamic import": [[525, "module-ivy.utils.dynamic_import"]], "Exceptions": [[526, "module-ivy.utils.exceptions"]], "Inspection": [[527, "module-ivy.utils.inspection"]], "Verbosity": [[528, "module-ivy.utils.verbosity"]], "Contents": [[529, "contents"]], "Ivy as a transpiler": [[529, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[529, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[529, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[529, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[529, "setting-up-ivy"]], "Installing using pip": [[529, "installing-using-pip"]], "Docker": [[529, "docker"]], "Installing from source": [[529, "installing-from-source"]], "Using Ivy": [[529, "using-ivy"]], "Documentation": [[529, "documentation"]], "Examples": [[529, "examples"], [554, "examples"]], "Contributing": [[529, "contributing"], [534, "contributing"]], "Community": [[529, "community"]], "Citation": [[529, "citation"]], "Background": [[530, "background"]], "ML Explosion": [[531, "ml-explosion"]], "Standardization": [[532, "standardization"]], "Skepticism": [[532, "skepticism"]], "Complimentary vs Competitive": [[532, "complimentary-vs-competitive"]], "Do Standards Work?": [[532, "do-standards-work"]], "The Array API Standard": [[532, "the-array-api-standard"]], "Why Unify?": [[533, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[533, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[533, "infinite-shelf-life"]], "Applied Libraries": [[535, "applied-libraries"], [572, "applied-libraries"]], "Introduction": [[535, "introduction"], [559, "introduction"], [560, "introduction"]], "Example - Ivy Robot": [[535, "example-ivy-robot"]], "Building the Docs": [[536, "building-the-docs"]], "Building the Docs using Docker": [[536, "building-the-docs-using-docker"]], "Using convenience script": [[536, "using-convenience-script"]], "Using existing image on Docker Hub": [[536, "using-existing-image-on-docker-hub"]], "Building the image locally": [[536, "building-the-image-locally"]], "Building the Docs without Docker": [[536, "building-the-docs-without-docker"]], "Helpful Resources": [[537, "helpful-resources"]], "Open Tasks": [[538, "open-tasks"]], "Function Formatting": [[538, "function-formatting"]], "Formatting checklist": [[538, "formatting-checklist"]], "Frontend APIs": [[538, "frontend-apis"]], "Where to place a frontend function": [[538, "where-to-place-a-frontend-function"]], "Ivy Experimental API": [[538, "ivy-experimental-api"], [540, "ivy-experimental-api"]], "Setting Up": [[539, "setting-up"]], "Forking and cloning the repo": [[539, "forking-and-cloning-the-repo"]], "PyCharm": [[539, "pycharm"]], "Virtual environments - No Docker": [[539, "virtual-environments-no-docker"]], "Using miniconda": [[539, "using-miniconda"]], "Using venv": [[539, "using-venv"]], "Docker Interpreter with PyCharm": [[539, "docker-interpreter-with-pycharm"]], "Windows": [[539, "windows"], [539, "id6"]], "MacOS": [[539, "macos"]], "Ubuntu": [[539, "ubuntu"], [539, "id8"]], "Setting Up Testing": [[539, "setting-up-testing"]], "More Detailed Hypothesis Logs": [[539, "more-detailed-hypothesis-logs"]], "Setting up for Free": [[539, "setting-up-for-free"]], "GitHub Codespaces": [[539, "github-codespaces"]], "Pre-Commit": [[539, "pre-commit"]], "The Basics": [[540, "the-basics"]], "Getting Help": [[540, "getting-help"]], "ToDo List Issues": [[540, "todo-list-issues"]], "Managing Your Fork": [[540, "managing-your-fork"]], "Who To Ask": [[540, "who-to-ask"]], "With Command Line:": [[540, "with-command-line"]], "With Browser:": [[540, "with-browser"]], "Pull Requests": [[540, "pull-requests"]], "Small Commits Often": [[540, "small-commits-often"]], "Interactive Ivy Docker Container": [[540, "interactive-ivy-docker-container"]], "Running Tests Locally": [[540, "running-tests-locally"]], "With Docker": [[540, "with-docker"]], "Getting the most out of IDE": [[540, "getting-the-most-out-of-ide"]], "with PyCharm": [[540, "with-pycharm"]], "Deep Dive": [[541, "deep-dive"]], "Array API Tests": [[542, "array-api-tests"], [547, "array-api-tests"]], "Running the Tests": [[542, "running-the-tests"]], "Using Terminal": [[542, "using-terminal"]], "Using the IDE": [[542, "using-the-ide"]], "Regenerating Test Failures": [[542, "regenerating-test-failures"]], "Test Skipping": [[542, "test-skipping"]], "Arrays": [[543, "arrays"]], "Native Array": [[543, "native-array"]], "Ivy Array": [[543, "ivy-array"], [567, "ivy-array"]], "Array Handling": [[543, "array-handling"]], "Integrating custom classes with Ivy": [[543, "integrating-custom-classes-with-ivy"]], "Backend Setting": [[544, "backend-setting"]], "Backend and Frontend Version Support": [[544, "backend-and-frontend-version-support"]], "Building the Docs Pipeline": [[545, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[545, "how-the-doc-builder-is-being-run"]], "The convenience script": [[545, "the-convenience-script"]], "Options": [[545, "options"]], "The Docker image": [[545, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[545, "how-ivy-s-docs-is-structured"]], "index.rst": [[545, "index-rst"]], "partial_conf.py": [[545, "partial-conf-py"]], "prebuild.sh": [[545, "prebuild-sh"]], "Custom Extensions": [[545, "custom-extensions"]], "custom_autosummary": [[545, "custom-autosummary"]], ":hide-table:": [[545, "hide-table"]], ":include:": [[545, "include"]], ":fix-directory:": [[545, "fix-directory"]], ":substitute-caption:": [[545, "substitute-caption"]], "custom_builder": [[545, "custom-builder"]], "discussion_linker": [[545, "discussion-linker"]], "skippable_function": [[545, "skippable-function"]], "Containers": [[546, "containers"]], "Container Instance Methods": [[546, "container-instance-methods"]], "Container Static Methods": [[546, "container-static-methods"]], "API Static Methods": [[546, "api-static-methods"]], "API Instance Methods": [[546, "api-instance-methods"]], "API Special Methods": [[546, "api-special-methods"]], "Nestable Functions": [[546, "nestable-functions"], [554, "nestable-functions"], [555, "nestable-functions"]], "Continuous Integration": [[547, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[547, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[547, "ivy-tests"], [561, "ivy-tests"]], "Implementation": [[547, "implementation"]], "A Top-Down View": [[547, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[547, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[547, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[547, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[547, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[547, "determine-test-coverage-workflow"]], "Multiple Runners": [[547, "multiple-runners"]], "Race Condition": [[547, "race-condition"]], "Periodic Testing": [[547, "periodic-testing"]], "Manually Dispatched Workflows": [[547, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[547, "ci-pipeline"]], "Push": [[547, "push"]], "Pull Request": [[547, "pull-request"]], "Dashboard": [[547, "dashboard"]], "Data Types": [[548, "data-types"]], "Data Type Module": [[548, "data-type-module"]], "Data Type Promotion": [[548, "data-type-promotion"]], "Arguments in other Functions": [[548, "arguments-in-other-functions"], [549, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[548, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[548, "backend-data-type-bugs"]], "Superset Data Type Support": [[548, "superset-data-type-support"]], "Devices": [[549, "devices"]], "Device Module": [[549, "device-module"]], "Docstring Examples": [[550, "docstring-examples"]], "ivy.tan": [[550, "ivy-tan"]], "ivy.roll": [[550, "ivy-roll"]], "ivy.add": [[550, "ivy-add"]], "Docstrings": [[551, "docstrings"]], "Exception Handling": [[552, "exception-handling"]], "Ivy Exception Class": [[552, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[552, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[552, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[552, "handle-exceptions-decorator"]], "Assertion Function": [[552, "assertion-function"]], "Formatting": [[553, "formatting"]], "Lint Checks": [[553, "lint-checks"]], "Pre-Commit Hook": [[553, "pre-commit-hook"]], "Function Arguments": [[554, "function-arguments"]], "Positional and Keyword Arguments": [[554, "positional-and-keyword-arguments"]], "Input Arrays": [[554, "input-arrays"]], "out Argument": [[554, "out-argument"]], "dtype and device arguments": [[554, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[554, "numbers-in-operator-functions"]], "Integer Sequences": [[554, "integer-sequences"]], "Function Types": [[555, "function-types"]], "Primary Functions": [[555, "primary-functions"]], "Compositional Functions": [[555, "compositional-functions"]], "Mixed Functions": [[555, "mixed-functions"]], "Standalone Functions": [[555, "standalone-functions"]], "Convenience Functions": [[555, "convenience-functions"]], "Function Wrapping": [[556, "function-wrapping"]], "Overview": [[557, "overview"]], "Example Usage of the Gradient API": [[557, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[557, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[557, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[557, "custom-gradient-functions"]], "Design of the Gradient API": [[557, "design-of-the-gradient-api"]], "Our policy on gradients": [[557, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[557, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[557, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[557, "framework-specific-considerations"]], "Inplace Updates": [[558, "inplace-updates"]], "out argument": [[558, "out-argument"]], "copy argument": [[558, "copy-argument"]], "Ivy Frontends": [[559, "ivy-frontends"]], "The Frontend Basics": [[559, "the-frontend-basics"]], "Unused Arguments": [[559, "unused-arguments"]], "Compositions": [[559, "compositions"]], "Missing Ivy Functions": [[559, "missing-ivy-functions"]], "Temporary Compositions": [[559, "temporary-compositions"]], "Supported Data Types and Devices": [[559, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[559, "id6"]], "Frontend Data Type Promotion Rules": [[559, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[559, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[559, "frontends-duplicate-policy"]], "Ivy Frontend Tests": [[560, "ivy-frontend-tests"]], "Frontend Test Examples": [[560, "frontend-test-examples"]], "ivy.tan()": [[560, "ivy-tan"]], "ivy.full()": [[560, "ivy-full"]], "Testing Without Using Tests Values": [[560, "testing-without-using-tests-values"]], "Alias functions": [[560, "alias-functions"]], "Frontend Instance Method Tests": [[560, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[560, "frontend-instance-method-test-examples"]], "ivy.add()": [[560, "ivy-add"]], "Hypothesis Helpers": [[560, "hypothesis-helpers"]], "Testing Pipeline": [[561, "testing-pipeline"]], "Hypothesis": [[561, "id2"]], "Data Generation": [[561, "id3"]], "Writing your own strategy": [[561, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[561, "writing-hypothesis-test"]], "Ivy Test Decorators": [[561, "ivy-test-decorators"]], "Writing Ivy Tests": [[561, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[561, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[561, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[561, "how-to-write-hypothesis-tests-effectively"]], "Bonus: Hypothesis\u2019 Extended Features": [[561, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[561, "self-consistent-and-explicit-testing"]], "test_array_function": [[561, "id6"]], "Running Ivy Tests": [[561, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[561, "re-running-failed-ivy-tests"]], "Navigating the Code": [[562, "navigating-the-code"]], "Categorization": [[562, "categorization"]], "Submodule Design": [[562, "submodule-design"]], "Ivy API": [[562, "ivy-api"]], "Backend API": [[562, "backend-api"]], "Submodule Helper Functions": [[562, "submodule-helper-functions"]], "Version Pinning": [[562, "version-pinning"]], "Superset Behaviour": [[563, "superset-behaviour"]], "Extending the Standard": [[563, "extending-the-standard"]], "What is the Superset?": [[563, "what-is-the-superset"]], "A Non-Duplicate Superset": [[563, "a-non-duplicate-superset"]], "What is not the Superset?": [[563, "what-is-not-the-superset"]], "When the Superset is Too Much": [[563, "when-the-superset-is-too-much"]], "Balancing Generalization with Efficiency": [[563, "balancing-generalization-with-efficiency"]], "More Examples": [[563, "more-examples"]], "Maximizing Usage of Native Functionality": [[563, "maximizing-usage-of-native-functionality"]], "Design": [[564, "design"]], "Building Blocks": [[565, "building-blocks"]], "Backend Functional APIs \u2705": [[565, "backend-functional-apis"]], "Ivy Functional API \u2705": [[565, "ivy-functional-api"]], "Backend Handler \u2705": [[565, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[565, "graph-compiler"]], "Ivy as a Framework": [[566, "ivy-as-a-framework"]], "The Array Class": [[567, "the-array-class"]], "Unifying Operators": [[567, "unifying-operators"]], "API Monkey Patching": [[567, "api-monkey-patching"]], "Instance Methods": [[567, "instance-methods"]], "Ivy Container": [[568, "ivy-container"]], "Construction": [[568, "construction"]], "Representation": [[568, "representation"]], "Recursive Methods": [[568, "recursive-methods"]], "Built-ins": [[568, "built-ins"]], "Access": [[568, "access"]], "Saving and Loading": [[568, "saving-and-loading"]], "Comparisons": [[568, "comparisons"]], "Customized Representations": [[568, "customized-representations"]], "Use Cases": [[568, "use-cases"]], "Compartmentalization": [[568, "compartmentalization"]], "Configuration": [[568, "configuration"]], "Data loading": [[568, "data-loading"]], "Network weights": [[568, "network-weights"]], "Ivy Stateful API": [[569, "ivy-stateful-api"]], "Modules": [[569, "modules"]], "Ivy as a Transpiler": [[570, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[570, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[570, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[570, "converting-network-models"]], "Extensions": [[571, "extensions"]], "Ivy Mechanics": [[572, "ivy-mechanics"]], "Ivy Vision": [[572, "ivy-vision"]], "Ivy Robot": [[572, "ivy-robot"]], "Ivy Gym": [[572, "ivy-gym"]], "Ivy Memory": [[572, "ivy-memory"]], "FAQ": [[573, "faq"]], "Maintaining Backend Versions": [[573, "maintaining-backend-versions"]], "Dynamic Sizes": [[573, "dynamic-sizes"]], "Type and Shape Checking": [[573, "type-and-shape-checking"]], "GPU handling": [[573, "gpu-handling"]], "Model Deployment": [[573, "model-deployment"]], "Dynamic Control Flow": [[573, "dynamic-control-flow"]], "Auto-Differentiation": [[573, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[573, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[573, "support-for-functions"]], "Alternative Data Structures": [[573, "alternative-data-structures"]], "Custom Operations": [[573, "custom-operations"]], "The Pipeline": [[573, "the-pipeline"]], "State": [[573, "state"]], "Glossary": [[574, "glossary"]], "Related Work": [[575, "related-work"]], "API Standards": [[576, "api-standards"], [585, "api-standards"]], "Array API Standard": [[576, "id1"]], "Compiler Infrastructure": [[577, "compiler-infrastructure"], [585, "compiler-infrastructure"]], "LLVM": [[577, "id1"]], "MLIR": [[577, "id2"]], "OneAPI": [[577, "id3"]], "Exchange Formats": [[578, "exchange-formats"], [585, "exchange-formats"]], "ONNX onnx": [[578, "onnx-onnx"]], "NNEF nnef": [[578, "nnef-nnef"]], "CoreML coreml": [[578, "coreml-coreml"]], "Frameworks": [[579, "frameworks"], [585, "frameworks"]], "MATLAB matlab": [[579, "matlab-matlab"]], "SciPy scipy": [[579, "scipy-scipy"]], "Torch torch": [[579, "torch-torch"]], "NumPy numpy": [[579, "numpy-numpy"]], "SciKit Learn scikit-learn": [[579, "scikit-learn-scikit-learn"]], "Theano theano": [[579, "theano-theano"]], "Pandas pandas": [[579, "pandas-pandas"]], "Julia julia": [[579, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[579, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[579, "caffe-caffe"]], "Chainer chainer": [[579, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[579, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[579, "mxnet-mxnet"]], "CNTK cntk": [[579, "cntk-cntk"]], "PyTorch pytorch": [[579, "pytorch-pytorch"]], "Flux flux": [[579, "flux-flux"]], "JAX jax": [[579, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[579, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[579, "dex-language-dex-language"]], "Graph Tracers": [[580, "graph-tracers"], [585, "graph-tracers"]], "tf.Graph": [[580, "tf-graph"]], "Jaxpr": [[580, "jaxpr"]], "torch.jit": [[580, "torch-jit"]], "torch.fx": [[580, "torch-fx"]], "ML-Unifying Companies": [[581, "ml-unifying-companies"], [585, "ml-unifying-companies"]], "Quansight": [[581, "id1"]], "Modular": [[581, "id2"]], "OctoML": [[581, "id3"]], "Multi-Vendor Compiler Frameworks": [[582, "multi-vendor-compiler-frameworks"], [585, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[582, "apache-tvm"]], "XLA": [[582, "xla"]], "GCC": [[582, "gcc"]], "Vendor-Specific APIs": [[583, "vendor-specific-apis"], [585, "vendor-specific-apis"]], "TensorRT tensorrt": [[583, "tensorrt-tensorrt"]], "CUDA cuda": [[583, "cuda-cuda"]], "Vendor-Specific Compilers": [[584, "vendor-specific-compilers"], [585, "vendor-specific-compilers"]], "ICC": [[584, "id1"]], "ICX": [[584, "icx"]], "NVCC": [[584, "nvcc"]], "What does Ivy Add?": [[585, "what-does-ivy-add"]], "Wrapper Frameworks": [[585, "wrapper-frameworks"], [586, "wrapper-frameworks"]], "EagerPy eagerpy": [[586, "eagerpy-eagerpy"]], "Keras keras": [[586, "keras-keras"]], "Thinc thinc": [[586, "thinc-thinc"]], "TensorLy tensorly": [[586, "tensorly-tensorly"]], "NeuroPod": [[586, "id1"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "ivy.data_classes.array.activations": [[0, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[0, "module-ivy.data_classes.array.activations"], [1, "module-ivy.data_classes.array.conversions"], [2, "module-ivy.data_classes.array.creation"], [3, "module-ivy.data_classes.array.data_type"], [4, "module-ivy.data_classes.array.device"], [5, "module-ivy.data_classes.array.elementwise"], [6, "module-ivy.data_classes.array.experimental"], [6, "module-ivy.data_classes.array.experimental.activations"], [6, "module-ivy.data_classes.array.experimental.conversions"], [6, "module-ivy.data_classes.array.experimental.creation"], [6, "module-ivy.data_classes.array.experimental.data_type"], [6, "module-ivy.data_classes.array.experimental.device"], [6, "module-ivy.data_classes.array.experimental.elementwise"], [6, "module-ivy.data_classes.array.experimental.general"], [6, "module-ivy.data_classes.array.experimental.gradients"], [6, "module-ivy.data_classes.array.experimental.image"], [6, "module-ivy.data_classes.array.experimental.layers"], [6, "module-ivy.data_classes.array.experimental.linear_algebra"], [6, "module-ivy.data_classes.array.experimental.losses"], [6, "module-ivy.data_classes.array.experimental.manipulation"], [6, "module-ivy.data_classes.array.experimental.norms"], [6, "module-ivy.data_classes.array.experimental.random"], [6, "module-ivy.data_classes.array.experimental.searching"], [6, "module-ivy.data_classes.array.experimental.set"], [6, "module-ivy.data_classes.array.experimental.sorting"], [6, "module-ivy.data_classes.array.experimental.statistical"], [6, "module-ivy.data_classes.array.experimental.utility"], [7, "module-ivy.data_classes.array.general"], [8, "module-ivy.data_classes.array.gradients"], [9, "module-ivy.data_classes.array.image"], [10, "module-ivy.data_classes.array.layers"], [11, "module-ivy.data_classes.array.linear_algebra"], [12, "module-ivy.data_classes.array.losses"], [13, "module-ivy.data_classes.array.manipulation"], [14, "module-ivy.data_classes.array.norms"], [15, "module-ivy.data_classes.array.random"], [16, "module-ivy.data_classes.array.searching"], [17, "module-ivy.data_classes.array.set"], [18, "module-ivy.data_classes.array.sorting"], [19, "module-ivy.data_classes.array.statistical"], [20, "module-ivy.data_classes.array.utility"], [21, "module-ivy.data_classes.array.wrapping"], [22, "module-ivy.data_classes.container.activations"], [23, "module-ivy.data_classes.container.base"], [24, "module-ivy.data_classes.container.conversions"], [25, "module-ivy.data_classes.container.creation"], [26, "module-ivy.data_classes.container.data_type"], [27, "module-ivy.data_classes.container.device"], [28, "module-ivy.data_classes.container.elementwise"], [29, "module-ivy.data_classes.container.experimental"], [29, "module-ivy.data_classes.container.experimental.activations"], [29, "module-ivy.data_classes.container.experimental.conversions"], [29, "module-ivy.data_classes.container.experimental.creation"], [29, "module-ivy.data_classes.container.experimental.data_type"], [29, "module-ivy.data_classes.container.experimental.device"], [29, "module-ivy.data_classes.container.experimental.elementwise"], [29, "module-ivy.data_classes.container.experimental.general"], [29, "module-ivy.data_classes.container.experimental.gradients"], [29, "module-ivy.data_classes.container.experimental.image"], [29, "module-ivy.data_classes.container.experimental.layers"], [29, "module-ivy.data_classes.container.experimental.linear_algebra"], [29, "module-ivy.data_classes.container.experimental.losses"], [29, "module-ivy.data_classes.container.experimental.manipulation"], [29, "module-ivy.data_classes.container.experimental.norms"], [29, "module-ivy.data_classes.container.experimental.random"], [29, "module-ivy.data_classes.container.experimental.searching"], [29, "module-ivy.data_classes.container.experimental.set"], [29, "module-ivy.data_classes.container.experimental.sorting"], [29, "module-ivy.data_classes.container.experimental.statistical"], [29, "module-ivy.data_classes.container.experimental.utility"], [30, "module-ivy.data_classes.container.general"], [31, "module-ivy.data_classes.container.gradients"], [32, "module-ivy.data_classes.container.image"], [33, "module-ivy.data_classes.container.layers"], [34, "module-ivy.data_classes.container.linear_algebra"], [35, "module-ivy.data_classes.container.losses"], [36, "module-ivy.data_classes.container.manipulation"], [37, "module-ivy.data_classes.container.norms"], [38, "module-ivy.data_classes.container.random"], [39, "module-ivy.data_classes.container.searching"], [40, "module-ivy.data_classes.container.set"], [41, "module-ivy.data_classes.container.sorting"], [42, "module-ivy.data_classes.container.statistical"], [43, "module-ivy.data_classes.container.utility"], [44, "module-ivy.data_classes.container.wrapping"], [45, "module-ivy.data_classes.array.array"], [46, "module-ivy.data_classes.container.container"], [48, "module-ivy.stateful.activations"], [49, "module-ivy.stateful.converters"], [50, "module-ivy.stateful.helpers"], [51, "module-ivy.stateful.initializers"], [52, "module-ivy.stateful.layers"], [53, "module-ivy.stateful.module"], [54, "module-ivy.stateful.norms"], [55, "module-ivy.stateful.optimizers"], [56, "module-ivy.stateful.sequential"], [356, "module-ivy.functional.ivy.activations"], [357, "module-ivy.functional.ivy.constants"], [358, "module-ivy.functional.ivy.control_flow_ops"], [359, "module-ivy.functional.ivy.creation"], [360, "module-ivy.functional.ivy.data_type"], [361, "module-ivy.functional.ivy.device"], [362, "module-ivy.functional.ivy.elementwise"], [363, "module-ivy.functional.ivy.experimental"], [364, "module-ivy.functional.ivy.general"], [365, "module-ivy.functional.ivy.gradients"], [366, "module-ivy.functional.ivy.layers"], [367, "module-ivy.functional.ivy.linear_algebra"], [368, "module-ivy.functional.ivy.losses"], [369, "module-ivy.functional.ivy.manipulation"], [370, "module-ivy.functional.ivy.meta"], [371, "module-ivy.functional.ivy.nest"], [372, "module-ivy.functional.ivy.norms"], [373, "module-ivy.functional.ivy.random"], [374, "module-ivy.functional.ivy.searching"], [375, "module-ivy.functional.ivy.set"], [376, "module-ivy.functional.ivy.sorting"], [377, "module-ivy.functional.ivy.statistical"], [378, "module-ivy.functional.ivy.utility"], [512, "module-ivy.nested_array.nested_array"], [513, "module-ivy_tests.test_ivy.helpers.assertions"], [514, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [515, "module-ivy_tests.test_ivy.helpers.function_testing"], [516, "module-ivy_tests.test_ivy.helpers.globals"], [517, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [518, "module-ivy_tests.test_ivy.helpers.structs"], [519, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [520, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [523, "module-ivy.utils.assertions"], [524, "module-ivy.utils.backend"], [525, "module-ivy.utils.dynamic_import"], [526, "module-ivy.utils.exceptions"], [527, "module-ivy.utils.inspection"], [528, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[0, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[1, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[1, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[2, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[2, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[3, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[3, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[4, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[4, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[4, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[4, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[4, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[5, "module-ivy.data_classes.array.elementwise"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[5, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[6, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[6, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[6, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[6, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[6, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[6, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[6, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[6, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[6, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[6, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[6, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[6, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[6, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[6, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[6, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[6, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[6, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[6, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[6, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[6, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.angle"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[6, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gcd() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "isin() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[6, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.isin"]], "ivy.data_classes.array.experimental": [[6, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[6, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[6, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[6, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[6, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[6, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[6, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[6, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[6, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[6, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[6, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[6, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[6, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[6, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[6, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[6, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[6, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[6, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[6, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[6, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[6, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[6, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[6, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[6, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[6, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[6, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[6, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[6, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trapz() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.trapz"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[6, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[6, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[6, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "ivy.data_classes.array.general": [[7, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[7, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[8, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[8, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[9, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[9, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[9, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[10, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[10, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[11, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[11, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[12, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[12, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[13, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[13, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[14, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[14, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[14, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[14, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[15, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[15, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[15, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[15, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[16, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[16, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[17, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[17, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[17, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[17, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[18, "module-ivy.data_classes.array.sorting"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[18, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[19, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[19, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[20, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[20, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[21, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[21, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[21, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "ivy.data_classes.container.activations": [[22, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[22, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[23, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[23, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[23, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[23, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[23, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[23, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[23, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[23, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[24, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[24, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[25, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[25, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[26, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[26, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[27, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[27, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[27, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[27, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[28, "module-ivy.data_classes.container.elementwise"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[28, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[29, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[29, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[29, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[29, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[29, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[29, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[29, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[29, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[29, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[29, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[29, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[29, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[29, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[29, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.angle"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.binary_cross_entropy_with_logits"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "isin() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.isin"]], "ivy.data_classes.container.experimental": [[29, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[29, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[29, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[29, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[29, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[29, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[29, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[29, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[29, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[29, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[29, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[29, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[29, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[29, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[29, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[29, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[29, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[29, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[29, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[29, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[29, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_angle"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[29, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.static_binary_cross_entropy_with_logits"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_exp2"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_fft"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmin"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gcd"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_imag"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_isin() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[29, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.static_isin"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lcm"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_logaddexp2"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[29, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[29, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[29, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_msort"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[29, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nan_to_num"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[29, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[29, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_real"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_triu_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[29, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.triu_indices"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[29, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[29, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[29, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[29, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "ivy.data_classes.container.general": [[30, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[30, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[31, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[31, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[32, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[32, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[32, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[33, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[33, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[34, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[34, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[35, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[35, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[36, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[36, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[37, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[37, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[37, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[37, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[38, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[38, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[38, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[39, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[39, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[40, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[40, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[40, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[40, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[40, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[41, "module-ivy.data_classes.container.sorting"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[41, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[42, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[42, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[43, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[43, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[44, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[44, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[44, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[45, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[45, "ivy.data_classes.array.array.Array.__xor__"]], "data (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.dynamic_backend"]], "ivy.data_classes.array.array": [[45, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.ndim"]], "shape (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[45, "ivy.data_classes.array.array.Array.size"]], "container (class in ivy.data_classes.container.container)": [[46, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[46, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[46, "module-ivy.data_classes.container.container"]], "geglu (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[48, "ivy.stateful.activations.GELU"]], "__init__() (ivy.stateful.activations.geglu method)": [[48, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[48, "ivy.stateful.activations.GELU.__init__"]], "ivy.stateful.activations": [[48, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[49, "ivy.stateful.converters.ModuleConverters"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[49, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[49, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[49, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[49, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[49, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[50, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[50, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[50, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Ones"]], "siren (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[51, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[51, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[51, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[51, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[51, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[51, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[51, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[51, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[51, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[51, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[51, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[51, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[51, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[51, "module-ivy.stateful.initializers"]], "conv1d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Conv3DTranspose"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Dropout"]], "lstm (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.Linear"]], "multiheadattention (class in ivy.stateful.layers)": [[52, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.conv1d method)": [[52, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[52, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[52, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[52, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[52, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[52, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[52, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[52, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[52, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[52, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[52, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[52, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[52, "module-ivy.stateful.layers"]], "module (class in ivy.stateful.module)": [[53, "ivy.stateful.module.Module"]], "__call__() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[53, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[53, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[53, "module-ivy.stateful.module"]], "save_weights() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[53, "ivy.stateful.module.Module.show_graph"]], "layernorm (class in ivy.stateful.norms)": [[54, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.layernorm method)": [[54, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[54, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[55, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[55, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[55, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[55, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[55, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[55, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[55, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[55, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[55, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[55, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[55, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[55, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[55, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[55, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[55, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[55, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[55, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[56, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[56, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[56, "module-ivy.stateful.sequential"]], "deserialize() (in module ivy)": [[58, "ivy.deserialize"]], "gelu() (in module ivy)": [[59, "ivy.gelu"]], "gelu() (ivy.array method)": [[59, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[59, "ivy.Container.gelu"]], "get() (in module ivy)": [[60, "ivy.get"]], "get() (ivy.container method)": [[60, "ivy.Container.get"]], "leaky_relu() (in module ivy)": [[61, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[61, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[61, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[62, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[62, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[62, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[63, "ivy.mish"]], "mish() (ivy.array method)": [[63, "ivy.Array.mish"]], "mish() (ivy.container method)": [[63, "ivy.Container.mish"]], "relu() (in module ivy)": [[64, "ivy.relu"]], "relu() (ivy.array method)": [[64, "ivy.Array.relu"]], "relu() (ivy.container method)": [[64, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[65, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[65, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[65, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[66, "ivy.softmax"]], "softmax() (ivy.array method)": [[66, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[66, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[67, "ivy.softplus"]], "softplus() (ivy.array method)": [[67, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[67, "ivy.Container.softplus"]], "ifelse() (in module ivy)": [[68, "ivy.IfElse"]], "whileloop() (in module ivy)": [[69, "ivy.WhileLoop"]], "if_else() (in module ivy)": [[70, "ivy.if_else"]], "while_loop() (in module ivy)": [[71, "ivy.while_loop"]], "arange() (in module ivy)": [[73, "ivy.arange"]], "array() (in module ivy)": [[74, "ivy.array"]], "asarray() (in module ivy)": [[75, "ivy.asarray"]], "asarray() (ivy.array method)": [[75, "ivy.Array.asarray"]], "asarray_handle_nestable() (in module ivy)": [[76, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[77, "ivy.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[78, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[79, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[79, "ivy.Array.copy_array"]], "empty() (in module ivy)": [[80, "ivy.empty"]], "empty_like() (in module ivy)": [[81, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[81, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[81, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[82, "ivy.eye"]], "from_dlpack() (in module ivy)": [[83, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[83, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[83, "ivy.Container.from_dlpack"]], "full() (in module ivy)": [[84, "ivy.full"]], "full_like() (in module ivy)": [[85, "ivy.full_like"]], "full_like() (ivy.array method)": [[85, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[85, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[86, "ivy.linspace"]], "linspace() (ivy.array method)": [[86, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[86, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[87, "ivy.logspace"]], "logspace() (ivy.array method)": [[87, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[87, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[88, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[88, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[88, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[89, "ivy.native_array"]], "native_array() (ivy.array method)": [[89, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[89, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[90, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[90, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[90, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[91, "ivy.ones"]], "ones_like() (in module ivy)": [[92, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[92, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[92, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[93, "ivy.tril"]], "tril() (ivy.array method)": [[93, "ivy.Array.tril"]], "tril() (ivy.container method)": [[93, "ivy.Container.tril"]], "triu() (in module ivy)": [[94, "ivy.triu"]], "triu() (ivy.array method)": [[94, "ivy.Array.triu"]], "triu() (ivy.container method)": [[94, "ivy.Container.triu"]], "zeros() (in module ivy)": [[95, "ivy.zeros"]], "zeros_like() (in module ivy)": [[96, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[96, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[96, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[106, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[107, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[108, "ivy.astype"]], "astype() (ivy.array method)": [[108, "ivy.Array.astype"]], "astype() (ivy.container method)": [[108, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[109, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[109, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[109, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[110, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[110, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[110, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[111, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[111, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[111, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[112, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[113, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[114, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[115, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[116, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[117, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[118, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[119, "ivy.dtype"]], "dtype() (ivy.array method)": [[119, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[119, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[120, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[121, "ivy.finfo"]], "finfo() (ivy.array method)": [[121, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[121, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[122, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[123, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[124, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[124, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[124, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[125, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[126, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[127, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[127, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[127, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[128, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[128, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[129, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[129, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[129, "ivy.Container.is_float_dtype"]], "is_int_dtype() (in module ivy)": [[130, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[130, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[130, "ivy.Container.is_int_dtype"]], "is_uint_dtype() (in module ivy)": [[131, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[131, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[131, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[132, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[133, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[134, "ivy.result_type"]], "result_type() (ivy.array method)": [[134, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[134, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[135, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[136, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[137, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[138, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[139, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[140, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[141, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[142, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[143, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[144, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[145, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[146, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[150, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[151, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[152, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[153, "ivy.default_device"]], "dev() (in module ivy)": [[154, "ivy.dev"]], "dev() (ivy.array method)": [[154, "ivy.Array.dev"]], "dev() (ivy.container method)": [[154, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[155, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[156, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[157, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[158, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[159, "ivy.gpu_is_available"]], "num_cpu_cores() (in module ivy)": [[160, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[161, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[162, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[163, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[164, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[165, "ivy.set_default_device"]], "set_split_factor() (in module ivy)": [[166, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[167, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[168, "ivy.split_func_call"]], "to_device() (in module ivy)": [[169, "ivy.to_device"]], "to_device() (ivy.array method)": [[169, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[169, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[170, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[171, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[172, "ivy.unset_default_device"]], "used_mem_on_dev() (in module ivy)": [[173, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[174, "ivy.abs"]], "abs() (ivy.array method)": [[174, "ivy.Array.abs"]], "abs() (ivy.container method)": [[174, "ivy.Container.abs"]], "acos() (in module ivy)": [[175, "ivy.acos"]], "acos() (ivy.array method)": [[175, "ivy.Array.acos"]], "acos() (ivy.container method)": [[175, "ivy.Container.acos"]], "acosh() (in module ivy)": [[176, "ivy.acosh"]], "acosh() (ivy.array method)": [[176, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[176, "ivy.Container.acosh"]], "add() (in module ivy)": [[177, "ivy.add"]], "add() (ivy.array method)": [[177, "ivy.Array.add"]], "add() (ivy.container method)": [[177, "ivy.Container.add"]], "asin() (in module ivy)": [[178, "ivy.asin"]], "asin() (ivy.array method)": [[178, "ivy.Array.asin"]], "asin() (ivy.container method)": [[178, "ivy.Container.asin"]], "asinh() (in module ivy)": [[179, "ivy.asinh"]], "asinh() (ivy.array method)": [[179, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[179, "ivy.Container.asinh"]], "atan() (in module ivy)": [[180, "ivy.atan"]], "atan() (ivy.array method)": [[180, "ivy.Array.atan"]], "atan() (ivy.container method)": [[180, "ivy.Container.atan"]], "atan2() (in module ivy)": [[181, "ivy.atan2"]], "atan2() (ivy.array method)": [[181, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[181, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[182, "ivy.atanh"]], "atanh() (ivy.array method)": [[182, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[182, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[183, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[183, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[183, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[184, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[184, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[184, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[185, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[185, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[185, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[186, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[186, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[186, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[187, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[187, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[187, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[188, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[188, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[188, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[189, "ivy.ceil"]], "ceil() (ivy.array method)": [[189, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[189, "ivy.Container.ceil"]], "cos() (in module ivy)": [[190, "ivy.cos"]], "cos() (ivy.array method)": [[190, "ivy.Array.cos"]], "cos() (ivy.container method)": [[190, "ivy.Container.cos"]], "cosh() (in module ivy)": [[191, "ivy.cosh"]], "cosh() (ivy.array method)": [[191, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[191, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[192, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[192, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[192, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[193, "ivy.divide"]], "divide() (ivy.array method)": [[193, "ivy.Array.divide"]], "divide() (ivy.container method)": [[193, "ivy.Container.divide"]], "equal() (in module ivy)": [[194, "ivy.equal"]], "equal() (ivy.array method)": [[194, "ivy.Array.equal"]], "equal() (ivy.container method)": [[194, "ivy.Container.equal"]], "erf() (in module ivy)": [[195, "ivy.erf"]], "erf() (ivy.array method)": [[195, "ivy.Array.erf"]], "erf() (ivy.container method)": [[195, "ivy.Container.erf"]], "exp() (in module ivy)": [[196, "ivy.exp"]], "exp() (ivy.array method)": [[196, "ivy.Array.exp"]], "exp() (ivy.container method)": [[196, "ivy.Container.exp"]], "expm1() (in module ivy)": [[197, "ivy.expm1"]], "expm1() (ivy.array method)": [[197, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[197, "ivy.Container.expm1"]], "floor() (in module ivy)": [[198, "ivy.floor"]], "floor() (ivy.array method)": [[198, "ivy.Array.floor"]], "floor() (ivy.container method)": [[198, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[199, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[199, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[199, "ivy.Container.floor_divide"]], "fmod() (in module ivy)": [[200, "ivy.fmod"]], "fmod() (ivy.array method)": [[200, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[200, "ivy.Container.fmod"]], "greater() (in module ivy)": [[201, "ivy.greater"]], "greater() (ivy.array method)": [[201, "ivy.Array.greater"]], "greater() (ivy.container method)": [[201, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[202, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[202, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[202, "ivy.Container.greater_equal"]], "isfinite() (in module ivy)": [[203, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[203, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[203, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[204, "ivy.isinf"]], "isinf() (ivy.array method)": [[204, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[204, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[205, "ivy.isnan"]], "isnan() (ivy.array method)": [[205, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[205, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[206, "ivy.isreal"]], "isreal() (ivy.array method)": [[206, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[206, "ivy.Container.isreal"]], "less() (in module ivy)": [[207, "ivy.less"]], "less() (ivy.array method)": [[207, "ivy.Array.less"]], "less() (ivy.container method)": [[207, "ivy.Container.less"]], "less_equal() (in module ivy)": [[208, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[208, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[208, "ivy.Container.less_equal"]], "log() (in module ivy)": [[209, "ivy.log"]], "log() (ivy.array method)": [[209, "ivy.Array.log"]], "log() (ivy.container method)": [[209, "ivy.Container.log"]], "log10() (in module ivy)": [[210, "ivy.log10"]], "log10() (ivy.array method)": [[210, "ivy.Array.log10"]], "log10() (ivy.container method)": [[210, "ivy.Container.log10"]], "log1p() (in module ivy)": [[211, "ivy.log1p"]], "log1p() (ivy.array method)": [[211, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[211, "ivy.Container.log1p"]], "log2() (in module ivy)": [[212, "ivy.log2"]], "log2() (ivy.array method)": [[212, "ivy.Array.log2"]], "log2() (ivy.container method)": [[212, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[213, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[213, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[213, "ivy.Container.logaddexp"]], "logical_and() (in module ivy)": [[214, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[214, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[214, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[215, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[215, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[215, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[216, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[216, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[216, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[217, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[217, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[217, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[218, "ivy.maximum"]], "maximum() (ivy.array method)": [[218, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[218, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[219, "ivy.minimum"]], "minimum() (ivy.array method)": [[219, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[219, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[220, "ivy.multiply"]], "multiply() (ivy.array method)": [[220, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[220, "ivy.Container.multiply"]], "negative() (in module ivy)": [[221, "ivy.negative"]], "negative() (ivy.array method)": [[221, "ivy.Array.negative"]], "negative() (ivy.container method)": [[221, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[222, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[222, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[222, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[223, "ivy.positive"]], "positive() (ivy.array method)": [[223, "ivy.Array.positive"]], "positive() (ivy.container method)": [[223, "ivy.Container.positive"]], "pow() (in module ivy)": [[224, "ivy.pow"]], "pow() (ivy.array method)": [[224, "ivy.Array.pow"]], "pow() (ivy.container method)": [[224, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[225, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[225, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[225, "ivy.Container.rad2deg"]], "reciprocal() (in module ivy)": [[226, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[226, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[226, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[227, "ivy.remainder"]], "remainder() (ivy.array method)": [[227, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[227, "ivy.Container.remainder"]], "round() (in module ivy)": [[228, "ivy.round"]], "round() (ivy.array method)": [[228, "ivy.Array.round"]], "round() (ivy.container method)": [[228, "ivy.Container.round"]], "sign() (in module ivy)": [[229, "ivy.sign"]], "sign() (ivy.array method)": [[229, "ivy.Array.sign"]], "sign() (ivy.container method)": [[229, "ivy.Container.sign"]], "sin() (in module ivy)": [[230, "ivy.sin"]], "sin() (ivy.array method)": [[230, "ivy.Array.sin"]], "sin() (ivy.container method)": [[230, "ivy.Container.sin"]], "sinh() (in module ivy)": [[231, "ivy.sinh"]], "sinh() (ivy.array method)": [[231, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[231, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[232, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[232, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[232, "ivy.Container.sqrt"]], "square() (in module ivy)": [[233, "ivy.square"]], "square() (ivy.array method)": [[233, "ivy.Array.square"]], "square() (ivy.container method)": [[233, "ivy.Container.square"]], "subtract() (in module ivy)": [[234, "ivy.subtract"]], "subtract() (ivy.array method)": [[234, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[234, "ivy.Container.subtract"]], "tan() (in module ivy)": [[235, "ivy.tan"]], "tan() (ivy.array method)": [[235, "ivy.Array.tan"]], "tan() (ivy.container method)": [[235, "ivy.Container.tan"]], "tanh() (in module ivy)": [[236, "ivy.tanh"]], "tanh() (ivy.array method)": [[236, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[236, "ivy.Container.tanh"]], "trunc() (in module ivy)": [[237, "ivy.trunc"]], "trunc() (ivy.array method)": [[237, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[237, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[238, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[238, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[238, "ivy.Container.trunc_divide"]], "all_equal() (in module ivy)": [[247, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[247, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[247, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[248, "ivy.arg_info"]], "arg_names() (in module ivy)": [[249, "ivy.arg_names"]], "array_equal() (in module ivy)": [[250, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[250, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[250, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[251, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[251, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[251, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[252, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[253, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[253, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[253, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[254, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[254, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[254, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[255, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[256, "ivy.current_backend_str"]], "default() (in module ivy)": [[257, "ivy.default"]], "default() (ivy.array method)": [[257, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[258, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[258, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[258, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[259, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[259, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[259, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[260, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[260, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[260, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[261, "ivy.exists"]], "exists() (ivy.array method)": [[261, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[262, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[262, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[262, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[263, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[264, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[265, "ivy.gather"]], "gather() (ivy.array method)": [[265, "ivy.Array.gather"]], "gather() (ivy.container method)": [[265, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[266, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[266, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[266, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[267, "ivy.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy)": [[268, "ivy.get_array_mode"]], "get_exception_trace_mode() (in module ivy)": [[269, "ivy.get_exception_trace_mode"]], "get_item() (in module ivy)": [[270, "ivy.get_item"]], "get_min_base() (in module ivy)": [[271, "ivy.get_min_base"]], "get_min_denominator() (in module ivy)": [[272, "ivy.get_min_denominator"]], "get_nestable_mode() (in module ivy)": [[273, "ivy.get_nestable_mode"]], "get_num_dims() (in module ivy)": [[274, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[274, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[274, "ivy.Container.get_num_dims"]], "get_queue_timeout() (in module ivy)": [[275, "ivy.get_queue_timeout"]], "get_referrers_recursive() (in module ivy)": [[276, "ivy.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy)": [[277, "ivy.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy)": [[278, "ivy.get_tmp_dir"]], "has_nans() (in module ivy)": [[279, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[279, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[279, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[280, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[281, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[281, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[281, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[282, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[282, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[282, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[283, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[283, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[283, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[284, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[285, "ivy.is_array"]], "is_array() (ivy.array method)": [[285, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[285, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[286, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[286, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[286, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[287, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[287, "ivy.Array.is_ivy_container"]], "is_native_array() (in module ivy)": [[288, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[288, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[288, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[289, "ivy.isin"]], "isin() (ivy.array method)": [[289, "ivy.Array.isin"]], "isin() (ivy.container method)": [[289, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[290, "ivy.isscalar"]], "match_kwargs() (in module ivy)": [[291, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[292, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[293, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[294, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[295, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[295, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[295, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[296, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[296, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[296, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[297, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[298, "ivy.set_exception_trace_mode"]], "set_min_base() (in module ivy)": [[299, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[300, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[301, "ivy.set_nestable_mode"]], "set_queue_timeout() (in module ivy)": [[302, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[303, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[304, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[305, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[306, "ivy.shape"]], "shape() (ivy.array method)": [[306, "ivy.Array.shape"]], "shape_array_mode() (in module ivy)": [[307, "ivy.shape_array_mode"]], "stable_divide() (in module ivy)": [[308, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[308, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[308, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[309, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[309, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[309, "ivy.Container.stable_pow"]], "supports_inplace_updates() (in module ivy)": [[310, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[310, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[310, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[311, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[312, "ivy.to_list"]], "to_list() (ivy.array method)": [[312, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[312, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[313, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[314, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[314, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[314, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[315, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[315, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[315, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[316, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[317, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[318, "ivy.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy)": [[319, "ivy.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy)": [[320, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[321, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[322, "ivy.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy)": [[323, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[323, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[323, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[324, "ivy.vmap"]], "adam_step() (in module ivy)": [[342, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[342, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[342, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[343, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[343, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[343, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[344, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[345, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[346, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[346, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[346, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[347, "ivy.jac"]], "lamb_update() (in module ivy)": [[348, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[348, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[348, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[349, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[349, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[349, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[350, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[350, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[350, "ivy.Container.optimizer_update"]], "set_with_grads() (in module ivy)": [[351, "ivy.set_with_grads"]], "stop_gradient() (in module ivy)": [[352, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[352, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[352, "ivy.Container.stop_gradient"]], "unset_with_grads() (in module ivy)": [[353, "ivy.unset_with_grads"]], "value_and_grad() (in module ivy)": [[354, "ivy.value_and_grad"]], "with_grads() (in module ivy)": [[355, "ivy.with_grads"]], "deserialize() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.deserialize"]], "gelu() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.gelu"]], "get() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.get"]], "ivy.functional.ivy.activations": [[356, "module-ivy.functional.ivy.activations"]], "leaky_relu() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.leaky_relu"]], "log_softmax() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.log_softmax"]], "mish() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.mish"]], "relu() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.relu"]], "sigmoid() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.sigmoid"]], "softmax() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.softmax"]], "softplus() (in module ivy.functional.ivy.activations)": [[356, "ivy.functional.ivy.activations.softplus"]], "e (in module ivy.functional.ivy.constants)": [[357, "ivy.functional.ivy.constants.e"]], "inf (in module ivy.functional.ivy.constants)": [[357, "ivy.functional.ivy.constants.inf"]], "ivy.functional.ivy.constants": [[357, "module-ivy.functional.ivy.constants"]], "nan (in module ivy.functional.ivy.constants)": [[357, "ivy.functional.ivy.constants.nan"]], "newaxis (in module ivy.functional.ivy.constants)": [[357, "ivy.functional.ivy.constants.newaxis"]], "pi (in module ivy.functional.ivy.constants)": [[357, "ivy.functional.ivy.constants.pi"]], "ifelse() (in module ivy.functional.ivy.control_flow_ops)": [[358, "ivy.functional.ivy.control_flow_ops.IfElse"]], "whileloop() (in module ivy.functional.ivy.control_flow_ops)": [[358, "ivy.functional.ivy.control_flow_ops.WhileLoop"]], "if_else() (in module ivy.functional.ivy.control_flow_ops)": [[358, "ivy.functional.ivy.control_flow_ops.if_else"]], "ivy.functional.ivy.control_flow_ops": [[358, "module-ivy.functional.ivy.control_flow_ops"]], "while_loop() (in module ivy.functional.ivy.control_flow_ops)": [[358, "ivy.functional.ivy.control_flow_ops.while_loop"]], "nestedsequence (class in ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.NestedSequence"]], "__init__() (ivy.functional.ivy.creation.nestedsequence method)": [[359, "ivy.functional.ivy.creation.NestedSequence.__init__"]], "arange() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.arange"]], "array() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.array"]], "asarray() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.asarray"]], "asarray_handle_nestable() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.copy_array"]], "empty() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.empty"]], "empty_like() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.empty_like"]], "eye() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.eye"]], "from_dlpack() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.from_dlpack"]], "full() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.full"]], "full_like() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.full_like"]], "ivy.functional.ivy.creation": [[359, "module-ivy.functional.ivy.creation"]], "linspace() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.linspace"]], "logspace() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.logspace"]], "meshgrid() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.meshgrid"]], "native_array() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.native_array"]], "one_hot() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.one_hot"]], "ones() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.ones"]], "ones_like() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.ones_like"]], "tril() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.tril"]], "triu() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.triu"]], "zeros() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.zeros"]], "zeros_like() (in module ivy.functional.ivy.creation)": [[359, "ivy.functional.ivy.creation.zeros_like"]], "defaultcomplexdtype (class in ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.DefaultComplexDtype"]], "defaultdtype (class in ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.DefaultDtype"]], "defaultfloatdtype (class in ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.DefaultFloatDtype"]], "defaultintdtype (class in ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.DefaultIntDtype"]], "defaultuintdtype (class in ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.DefaultUintDtype"]], "__init__() (ivy.functional.ivy.data_type.defaultcomplexdtype method)": [[360, "ivy.functional.ivy.data_type.DefaultComplexDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultdtype method)": [[360, "ivy.functional.ivy.data_type.DefaultDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultfloatdtype method)": [[360, "ivy.functional.ivy.data_type.DefaultFloatDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultintdtype method)": [[360, "ivy.functional.ivy.data_type.DefaultIntDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultuintdtype method)": [[360, "ivy.functional.ivy.data_type.DefaultUintDtype.__init__"]], "as_ivy_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.as_ivy_dtype"]], "as_native_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.as_native_dtype"]], "astype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.astype"]], "broadcast_arrays() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.broadcast_arrays"]], "broadcast_to() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.broadcast_to"]], "can_cast() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.can_cast"]], "check_float() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.check_float"]], "closest_valid_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.closest_valid_dtype"]], "default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.default_complex_dtype"]], "default_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.default_dtype"]], "default_float_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.default_float_dtype"]], "default_int_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.default_int_dtype"]], "default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.default_uint_dtype"]], "dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.dtype"]], "dtype_bits() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.dtype_bits"]], "finfo() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.finfo"]], "function_supported_dtypes() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.function_unsupported_dtypes"]], "iinfo() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.iinfo"]], "infer_default_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.infer_default_dtype"]], "invalid_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.invalid_dtype"]], "is_bool_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.is_bool_dtype"]], "is_complex_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.is_complex_dtype"]], "is_float_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.is_float_dtype"]], "is_int_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.is_int_dtype"]], "is_uint_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.is_uint_dtype"]], "ivy.functional.ivy.data_type": [[360, "module-ivy.functional.ivy.data_type"]], "promote_types() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.promote_types"]], "promote_types_of_inputs() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.promote_types_of_inputs"]], "result_type() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.result_type"]], "set_default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.set_default_complex_dtype"]], "set_default_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.set_default_dtype"]], "set_default_float_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.unset_default_uint_dtype"]], "valid_dtype() (in module ivy.functional.ivy.data_type)": [[360, "ivy.functional.ivy.data_type.valid_dtype"]], "defaultdevice (class in ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.DefaultDevice"]], "profiler (class in ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.Profiler"]], "__enter__() (ivy.functional.ivy.device.defaultdevice method)": [[361, "ivy.functional.ivy.device.DefaultDevice.__enter__"]], "__exit__() (ivy.functional.ivy.device.defaultdevice method)": [[361, "ivy.functional.ivy.device.DefaultDevice.__exit__"]], "__init__() (ivy.functional.ivy.device.defaultdevice method)": [[361, "ivy.functional.ivy.device.DefaultDevice.__init__"]], "__init__() (ivy.functional.ivy.device.profiler method)": [[361, "ivy.functional.ivy.device.Profiler.__init__"]], "as_ivy_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.as_ivy_dev"]], "as_native_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.clear_cached_mem_on_dev"]], "default_device() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.default_device"]], "dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.dev"]], "dev_util() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.dev_util"]], "function_supported_devices() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.function_supported_devices"]], "function_unsupported_devices() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.gpu_is_available"]], "ivy.functional.ivy.device": [[361, "module-ivy.functional.ivy.device"]], "num_cpu_cores() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.num_cpu_cores"]], "num_gpus() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.set_default_device"]], "set_split_factor() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.set_split_factor"]], "split_factor() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.split_factor"]], "split_func_call() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.split_func_call"]], "start() (ivy.functional.ivy.device.profiler method)": [[361, "ivy.functional.ivy.device.Profiler.start"]], "stop() (ivy.functional.ivy.device.profiler method)": [[361, "ivy.functional.ivy.device.Profiler.stop"]], "to_device() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.to_device"]], "total_mem_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.total_mem_on_dev"]], "tpu_is_available() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.tpu_is_available"]], "unset_default_device() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.unset_default_device"]], "used_mem_on_dev() (in module ivy.functional.ivy.device)": [[361, "ivy.functional.ivy.device.used_mem_on_dev"]], "abs() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.abs"]], "acos() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.acos"]], "acosh() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.acosh"]], "add() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.add"]], "asin() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.asin"]], "asinh() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.asinh"]], "atan() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.atan"]], "atan2() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.atan2"]], "atanh() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.atanh"]], "bitwise_and() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.bitwise_and"]], "bitwise_invert() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.bitwise_invert"]], "bitwise_left_shift() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.bitwise_left_shift"]], "bitwise_or() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.bitwise_or"]], "bitwise_right_shift() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.bitwise_right_shift"]], "bitwise_xor() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.bitwise_xor"]], "ceil() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.ceil"]], "cos() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.cos"]], "cosh() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.cosh"]], "deg2rad() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.deg2rad"]], "divide() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.divide"]], "equal() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.equal"]], "erf() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.erf"]], "exp() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.exp"]], "expm1() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.expm1"]], "floor() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.floor"]], "floor_divide() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.floor_divide"]], "fmod() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.fmod"]], "greater() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.greater"]], "greater_equal() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.greater_equal"]], "isfinite() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.isfinite"]], "isinf() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.isinf"]], "isnan() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.isnan"]], "isreal() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.isreal"]], "ivy.functional.ivy.elementwise": [[362, "module-ivy.functional.ivy.elementwise"]], "less() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.less"]], "less_equal() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.less_equal"]], "log() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.log"]], "log10() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.log10"]], "log1p() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.log1p"]], "log2() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.log2"]], "logaddexp() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.logaddexp"]], "logical_and() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.logical_and"]], "logical_not() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.logical_not"]], "logical_or() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.logical_or"]], "logical_xor() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.logical_xor"]], "maximum() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.maximum"]], "minimum() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.minimum"]], "multiply() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.multiply"]], "negative() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.negative"]], "not_equal() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.not_equal"]], "positive() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.positive"]], "pow() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.pow"]], "rad2deg() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.rad2deg"]], "reciprocal() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.reciprocal"]], "remainder() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.remainder"]], "round() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.round"]], "sign() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.sign"]], "sin() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.sin"]], "sinh() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.sinh"]], "sqrt() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.sqrt"]], "square() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.square"]], "subtract() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.subtract"]], "tan() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.tan"]], "tanh() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.tanh"]], "trunc() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.trunc"]], "trunc_divide() (in module ivy.functional.ivy.elementwise)": [[362, "ivy.functional.ivy.elementwise.trunc_divide"]], "nativesparsearray (class in ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.NativeSparseArray"]], "sparsearray (class in ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.SparseArray"]], "__init__() (ivy.functional.ivy.experimental.sparsearray method)": [[363, "ivy.functional.ivy.experimental.SparseArray.__init__"]], "adaptive_avg_pool1d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.adaptive_avg_pool2d"]], "adjoint() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.adjoint"]], "allclose() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.allclose"]], "angle() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.angle"]], "atleast_1d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.atleast_1d"]], "atleast_2d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.atleast_2d"]], "atleast_3d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.atleast_3d"]], "avg_pool1d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.avg_pool1d"]], "avg_pool2d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.avg_pool2d"]], "avg_pool3d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.avg_pool3d"]], "batch_norm() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.batch_norm"]], "bernoulli() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.bernoulli"]], "beta() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.beta"]], "binarizer() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.binarizer"]], "binary_cross_entropy_with_logits() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.binary_cross_entropy_with_logits"]], "bincount() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.bincount"]], "bind_custom_gradient_function() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.bind_custom_gradient_function"]], "broadcast_shapes() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.broadcast_shapes"]], "ccol_indices (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.ccol_indices"]], "col_indices (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.col_indices"]], "cond() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.cond"]], "conj() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.conj"]], "coo_indices (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.coo_indices"]], "copysign() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.copysign"]], "corrcoef() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.corrcoef"]], "count_nonzero() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.count_nonzero"]], "crow_indices (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.crow_indices"]], "current_backend() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.current_backend"]], "data (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.data"]], "dct() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dct"]], "dense_shape (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.dense_shape"]], "dft() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dft"]], "diagflat() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.diagflat"]], "diff() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.diff"]], "dirichlet() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dirichlet"]], "dropout1d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dropout1d"]], "dropout3d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dropout3d"]], "dsplit() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dsplit"]], "dstack() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.dstack"]], "eig() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.eig"]], "eigh_tridiagonal() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.eigh_tridiagonal"]], "eigvals() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.eigvals"]], "embedding() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.embedding"]], "exp2() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.exp2"]], "expand() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.expand"]], "eye_like() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.eye_like"]], "fft() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.fft"]], "fix() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.fix"]], "flatten() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.flatten"]], "fliplr() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.fliplr"]], "flipud() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.flipud"]], "float_power() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.float_power"]], "fmax() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.fmax"]], "fmin() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.fmin"]], "frexp() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.frexp"]], "gamma() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.gamma"]], "gcd() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.gcd"]], "gradient() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.gradient"]], "hamming_window() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.hamming_window"]], "handle_array_function() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.handle_array_function"]], "handle_array_like_without_promotion() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.handle_array_like_without_promotion"]], "handle_exceptions() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.handle_exceptions"]], "handle_nestable() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.handle_nestable"]], "handle_out_argument() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.handle_out_argument"]], "handle_view() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.handle_view"]], "hann_window() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.hann_window"]], "heaviside() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.heaviside"]], "hsplit() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.hsplit"]], "hstack() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.hstack"]], "hypot() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.hypot"]], "i0() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.i0"]], "ifft() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.ifft"]], "imag() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.imag"]], "infer_device() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.infer_device"]], "infer_dtype() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.infer_dtype"]], "inputs_to_native_arrays() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.inputs_to_native_arrays"]], "instance_norm() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.instance_norm"]], "integer_arrays_to_float() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.integer_arrays_to_float"]], "interp() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.interp"]], "interpolate() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.interpolate"]], "is_ivy_sparse_array() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.is_ivy_sparse_array"]], "is_native_dtype() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.is_native_dtype"]], "is_native_sparse_array() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.is_native_sparse_array"]], "isclose() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.isclose"]], "ivy.functional.ivy.experimental": [[363, "module-ivy.functional.ivy.experimental"]], "kaiser_bessel_derived_window() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.kaiser_window"]], "kron() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.kron"]], "l2_normalize() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.l2_normalize"]], "lcm() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.lcm"]], "ldexp() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.ldexp"]], "lexsort() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.lexsort"]], "logaddexp2() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.logaddexp2"]], "logit() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.logit"]], "logsigmoid() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.logsigmoid"]], "lp_normalize() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.lp_normalize"]], "matrix_exp() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.matrix_exp"]], "max_pool1d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.max_pool1d"]], "max_pool2d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.max_pool2d"]], "max_pool3d() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.max_pool3d"]], "median() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.median"]], "moveaxis() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.moveaxis"]], "msort() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.msort"]], "multi_dot() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.multi_dot"]], "nan_to_num() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.nan_to_num"]], "nanmean() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.nanmean"]], "nanmedian() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.nanmedian"]], "nansum() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.nansum"]], "native_sparse_array() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.native_sparse_array_to_indices_values_and_shape"]], "ndenumerate() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.ndenumerate"]], "ndindex() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.ndindex"]], "nextafter() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.nextafter"]], "outputs_to_ivy_arrays() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.outputs_to_ivy_arrays"]], "pad() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.pad"]], "poisson() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.poisson"]], "prelu() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.prelu"]], "quantile() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.quantile"]], "real() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.real"]], "relu6() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.relu6"]], "rot90() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.rot90"]], "row_indices (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.row_indices"]], "selu() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.selu"]], "signbit() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.signbit"]], "sinc() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.sinc"]], "take_along_axis() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.take_along_axis"]], "thresholded_relu() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.thresholded_relu"]], "to_dense_array() (ivy.functional.ivy.experimental.sparsearray method)": [[363, "ivy.functional.ivy.experimental.SparseArray.to_dense_array"]], "to_native_arrays_and_back() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.to_native_arrays_and_back"]], "top_k() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.top_k"]], "trapz() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.trapz"]], "tril_indices() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.tril_indices"]], "triu_indices() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.triu_indices"]], "unravel_index() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.unravel_index"]], "values (ivy.functional.ivy.experimental.sparsearray property)": [[363, "ivy.functional.ivy.experimental.SparseArray.values"]], "vorbis_window() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.vorbis_window"]], "vsplit() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.vsplit"]], "vstack() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.vstack"]], "xlogy() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.xlogy"]], "zeta() (in module ivy.functional.ivy.experimental)": [[363, "ivy.functional.ivy.experimental.zeta"]], "arraymode (class in ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.ArrayMode"]], "__init__() (ivy.functional.ivy.general.arraymode method)": [[364, "ivy.functional.ivy.general.ArrayMode.__init__"]], "all_equal() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.all_equal"]], "arg_info() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.arg_info"]], "arg_names() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.arg_names"]], "array_equal() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.array_equal"]], "assert_supports_inplace() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.assert_supports_inplace"]], "cache_fn() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.cache_fn"]], "clip_matrix_norm() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.clip_matrix_norm"]], "clip_vector_norm() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.clip_vector_norm"]], "container_types() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.container_types"]], "current_backend_str() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.current_backend_str"]], "default() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.default"]], "einops_rearrange() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.einops_rearrange"]], "einops_reduce() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.einops_reduce"]], "einops_repeat() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.einops_repeat"]], "exists() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.exists"]], "fourier_encode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.gather"]], "gather_nd() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.gather_nd"]], "get_all_arrays_in_memory() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_array_mode"]], "get_exception_trace_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_exception_trace_mode"]], "get_item() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_item"]], "get_min_base() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_min_base"]], "get_min_denominator() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_min_denominator"]], "get_nestable_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_nestable_mode"]], "get_num_dims() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_num_dims"]], "get_queue_timeout() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_queue_timeout"]], "get_referrers_recursive() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.get_tmp_dir"]], "has_nans() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.has_nans"]], "inplace_arrays_supported() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.inplace_arrays_supported"]], "inplace_decrement() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.inplace_decrement"]], "inplace_increment() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.inplace_increment"]], "inplace_update() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.inplace_update"]], "inplace_variables_supported() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.inplace_variables_supported"]], "is_array() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.is_array"]], "is_ivy_array() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.is_ivy_array"]], "is_ivy_container() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.is_ivy_container"]], "is_native_array() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.is_native_array"]], "isin() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.isin"]], "isscalar() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.isscalar"]], "ivy.functional.ivy.general": [[364, "module-ivy.functional.ivy.general"]], "match_kwargs() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.match_kwargs"]], "multiprocessing() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.multiprocessing"]], "num_arrays_in_memory() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.scatter_flat"]], "scatter_nd() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.scatter_nd"]], "set_array_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_array_mode"]], "set_exception_trace_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_exception_trace_mode"]], "set_min_base() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_min_base"]], "set_min_denominator() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_min_denominator"]], "set_nestable_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_nestable_mode"]], "set_queue_timeout() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_queue_timeout"]], "set_shape_array_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.set_tmp_dir"]], "shape() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.shape"]], "shape_array_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.shape_array_mode"]], "stable_divide() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.stable_divide"]], "stable_pow() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.stable_pow"]], "supports_inplace_updates() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.supports_inplace_updates"]], "to_ivy_shape() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.to_ivy_shape"]], "to_list() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.to_list"]], "to_native_shape() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.to_native_shape"]], "to_numpy() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.to_numpy"]], "to_scalar() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.to_scalar"]], "try_else_none() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.try_else_none"]], "unset_array_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.value_is_nan"]], "vmap() (in module ivy.functional.ivy.general)": [[364, "ivy.functional.ivy.general.vmap"]], "gradienttracking (class in ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.GradientTracking"]], "__init__() (ivy.functional.ivy.gradients.gradienttracking method)": [[365, "ivy.functional.ivy.gradients.GradientTracking.__init__"]], "adam_step() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.adam_step"]], "adam_update() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.adam_update"]], "execute_with_gradients() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.execute_with_gradients"]], "grad() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.grad"]], "gradient_descent_update() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.gradient_descent_update"]], "ivy.functional.ivy.gradients": [[365, "module-ivy.functional.ivy.gradients"]], "jac() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.jac"]], "lamb_update() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.lamb_update"]], "lars_update() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.lars_update"]], "optimizer_update() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.optimizer_update"]], "set_with_grads() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.set_with_grads"]], "stop_gradient() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.stop_gradient"]], "unset_with_grads() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.unset_with_grads"]], "value_and_grad() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.value_and_grad"]], "with_grads() (in module ivy.functional.ivy.gradients)": [[365, "ivy.functional.ivy.gradients.with_grads"]], "conv() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv"]], "conv1d() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv1d"]], "conv1d_transpose() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv1d_transpose"]], "conv2d() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv2d"]], "conv2d_transpose() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv2d_transpose"]], "conv3d() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv3d"]], "conv3d_transpose() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv3d_transpose"]], "conv_general_dilated() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv_general_dilated"]], "conv_general_transpose() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.conv_general_transpose"]], "depthwise_conv2d() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.depthwise_conv2d"]], "dropout() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.dropout"]], "ivy.functional.ivy.layers": [[366, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.linear"]], "lstm_update() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.lstm_update"]], "multi_head_attention() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy.functional.ivy.layers)": [[366, "ivy.functional.ivy.layers.scaled_dot_product_attention"]], "cholesky() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.cholesky"]], "cross() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.cross"]], "det() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.det"]], "diag() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.diag"]], "diagonal() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.diagonal"]], "eig() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.eig"]], "eigh() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.eigh"]], "eigvalsh() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.eigvalsh"]], "inner() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.inner"]], "inv() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.inv"]], "ivy.functional.ivy.linear_algebra": [[367, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.lu_factor"]], "matmul() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.matmul"]], "matrix_norm() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.matrix_norm"]], "matrix_power() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.matrix_power"]], "matrix_rank() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.matrix_rank"]], "matrix_transpose() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.matrix_transpose"]], "outer() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.outer"]], "pinv() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.pinv"]], "qr() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.qr"]], "slogdet() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.slogdet"]], "solve() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.solve"]], "svd() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.svd"]], "svdvals() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.svdvals"]], "tensordot() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.tensordot"]], "tensorsolve() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.tensorsolve"]], "trace() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.trace"]], "vander() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.vander"]], "vecdot() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.vecdot"]], "vector_norm() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy.functional.ivy.linear_algebra)": [[367, "ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy.functional.ivy.losses)": [[368, "ivy.functional.ivy.losses.binary_cross_entropy"]], "cross_entropy() (in module ivy.functional.ivy.losses)": [[368, "ivy.functional.ivy.losses.cross_entropy"]], "ivy.functional.ivy.losses": [[368, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy.functional.ivy.losses)": [[368, "ivy.functional.ivy.losses.sparse_cross_entropy"]], "clip() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.clip"]], "concat() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.concat"]], "constant_pad() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.constant_pad"]], "expand_dims() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.expand_dims"]], "flip() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.flip"]], "ivy.functional.ivy.manipulation": [[369, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.permute_dims"]], "repeat() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.repeat"]], "reshape() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.reshape"]], "roll() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.roll"]], "split() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.split"]], "squeeze() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.squeeze"]], "stack() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.stack"]], "swapaxes() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.swapaxes"]], "tile() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.tile"]], "unstack() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.unstack"]], "zero_pad() (in module ivy.functional.ivy.manipulation)": [[369, "ivy.functional.ivy.manipulation.zero_pad"]], "fomaml_step() (in module ivy.functional.ivy.meta)": [[370, "ivy.functional.ivy.meta.fomaml_step"]], "ivy.functional.ivy.meta": [[370, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy.functional.ivy.meta)": [[370, "ivy.functional.ivy.meta.maml_step"]], "reptile_step() (in module ivy.functional.ivy.meta)": [[370, "ivy.functional.ivy.meta.reptile_step"]], "all_nested_indices() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.all_nested_indices"]], "copy_nest() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.copy_nest"]], "duplicate_array_index_chains() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.duplicate_array_index_chains"]], "index_nest() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.index_nest"]], "insert_into_nest_at_index() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[371, "module-ivy.functional.ivy.nest"]], "map() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.map"]], "map_nest_at_index() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.map_nest_at_index"]], "map_nest_at_indices() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.map_nest_at_indices"]], "multi_index_nest() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.multi_index_nest"]], "nested_any() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.nested_any"]], "nested_argwhere() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.nested_argwhere"]], "nested_map() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.nested_map"]], "nested_multi_map() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.nested_multi_map"]], "prune_empty() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.prune_empty"]], "prune_nest_at_index() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.set_nest_at_index"]], "set_nest_at_indices() (in module ivy.functional.ivy.nest)": [[371, "ivy.functional.ivy.nest.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[372, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy.functional.ivy.norms)": [[372, "ivy.functional.ivy.norms.layer_norm"]], "ivy.functional.ivy.random": [[373, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy.functional.ivy.random)": [[373, "ivy.functional.ivy.random.multinomial"]], "randint() (in module ivy.functional.ivy.random)": [[373, "ivy.functional.ivy.random.randint"]], "random_normal() (in module ivy.functional.ivy.random)": [[373, "ivy.functional.ivy.random.random_normal"]], "random_uniform() (in module ivy.functional.ivy.random)": [[373, "ivy.functional.ivy.random.random_uniform"]], "seed() (in module ivy.functional.ivy.random)": [[373, "ivy.functional.ivy.random.seed"]], "shuffle() (in module ivy.functional.ivy.random)": [[373, "ivy.functional.ivy.random.shuffle"]], "argmax() (in module ivy.functional.ivy.searching)": [[374, "ivy.functional.ivy.searching.argmax"]], "argmin() (in module ivy.functional.ivy.searching)": [[374, "ivy.functional.ivy.searching.argmin"]], "argwhere() (in module ivy.functional.ivy.searching)": [[374, "ivy.functional.ivy.searching.argwhere"]], "ivy.functional.ivy.searching": [[374, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy.functional.ivy.searching)": [[374, "ivy.functional.ivy.searching.nonzero"]], "where() (in module ivy.functional.ivy.searching)": [[374, "ivy.functional.ivy.searching.where"]], "ivy.functional.ivy.set": [[375, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy.functional.ivy.set)": [[375, "ivy.functional.ivy.set.unique_all"]], "unique_counts() (in module ivy.functional.ivy.set)": [[375, "ivy.functional.ivy.set.unique_counts"]], "unique_inverse() (in module ivy.functional.ivy.set)": [[375, "ivy.functional.ivy.set.unique_inverse"]], "unique_values() (in module ivy.functional.ivy.set)": [[375, "ivy.functional.ivy.set.unique_values"]], "argsort() (in module ivy.functional.ivy.sorting)": [[376, "ivy.functional.ivy.sorting.argsort"]], "ivy.functional.ivy.sorting": [[376, "module-ivy.functional.ivy.sorting"]], "searchsorted() (in module ivy.functional.ivy.sorting)": [[376, "ivy.functional.ivy.sorting.searchsorted"]], "sort() (in module ivy.functional.ivy.sorting)": [[376, "ivy.functional.ivy.sorting.sort"]], "cumprod() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.cumprod"]], "cumsum() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.cumsum"]], "einsum() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.einsum"]], "ivy.functional.ivy.statistical": [[377, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.max"]], "mean() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.mean"]], "min() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.min"]], "prod() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.prod"]], "std() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.std"]], "sum() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.sum"]], "var() (in module ivy.functional.ivy.statistical)": [[377, "ivy.functional.ivy.statistical.var"]], "all() (in module ivy.functional.ivy.utility)": [[378, "ivy.functional.ivy.utility.all"]], "any() (in module ivy.functional.ivy.utility)": [[378, "ivy.functional.ivy.utility.any"]], "ivy.functional.ivy.utility": [[378, "module-ivy.functional.ivy.utility"]], "conv() (in module ivy)": [[382, "ivy.conv"]], "conv1d() (in module ivy)": [[383, "ivy.conv1d"]], "conv1d() (ivy.array method)": [[383, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[383, "ivy.Container.conv1d"]], "conv1d_transpose() (in module ivy)": [[384, "ivy.conv1d_transpose"]], "conv1d_transpose() (ivy.array method)": [[384, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[384, "ivy.Container.conv1d_transpose"]], "conv2d() (in module ivy)": [[385, "ivy.conv2d"]], "conv2d() (ivy.array method)": [[385, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[385, "ivy.Container.conv2d"]], "conv2d_transpose() (in module ivy)": [[386, "ivy.conv2d_transpose"]], "conv2d_transpose() (ivy.array method)": [[386, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[386, "ivy.Container.conv2d_transpose"]], "conv3d() (in module ivy)": [[387, "ivy.conv3d"]], "conv3d() (ivy.array method)": [[387, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[387, "ivy.Container.conv3d"]], "conv3d_transpose() (in module ivy)": [[388, "ivy.conv3d_transpose"]], "conv3d_transpose() (ivy.array method)": [[388, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[388, "ivy.Container.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[389, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[390, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[391, "ivy.depthwise_conv2d"]], "depthwise_conv2d() (ivy.array method)": [[391, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[391, "ivy.Container.depthwise_conv2d"]], "dropout() (in module ivy)": [[392, "ivy.dropout"]], "dropout() (ivy.array method)": [[392, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[392, "ivy.Container.dropout"]], "linear() (in module ivy)": [[393, "ivy.linear"]], "linear() (ivy.array method)": [[393, "ivy.Array.linear"]], "linear() (ivy.container method)": [[393, "ivy.Container.linear"]], "lstm_update() (in module ivy)": [[394, "ivy.lstm_update"]], "lstm_update() (ivy.array method)": [[394, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[394, "ivy.Container.lstm_update"]], "multi_head_attention() (in module ivy)": [[395, "ivy.multi_head_attention"]], "multi_head_attention() (ivy.array method)": [[395, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[395, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[396, "ivy.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[396, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[396, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[397, "ivy.cholesky"]], "cholesky() (ivy.array method)": [[397, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[397, "ivy.Container.cholesky"]], "cross() (in module ivy)": [[398, "ivy.cross"]], "cross() (ivy.array method)": [[398, "ivy.Array.cross"]], "cross() (ivy.container method)": [[398, "ivy.Container.cross"]], "det() (in module ivy)": [[399, "ivy.det"]], "det() (ivy.array method)": [[399, "ivy.Array.det"]], "det() (ivy.container method)": [[399, "ivy.Container.det"]], "diag() (in module ivy)": [[400, "ivy.diag"]], "diag() (ivy.array method)": [[400, "ivy.Array.diag"]], "diag() (ivy.container method)": [[400, "ivy.Container.diag"]], "diagonal() (in module ivy)": [[401, "ivy.diagonal"]], "diagonal() (ivy.array method)": [[401, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[401, "ivy.Container.diagonal"]], "eig() (in module ivy)": [[402, "ivy.eig"]], "eig() (ivy.array method)": [[402, "ivy.Array.eig"]], "eig() (ivy.container method)": [[402, "ivy.Container.eig"]], "eigh() (in module ivy)": [[403, "ivy.eigh"]], "eigh() (ivy.array method)": [[403, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[403, "ivy.Container.eigh"]], "eigvalsh() (in module ivy)": [[404, "ivy.eigvalsh"]], "eigvalsh() (ivy.array method)": [[404, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[404, "ivy.Container.eigvalsh"]], "inner() (in module ivy)": [[405, "ivy.inner"]], "inner() (ivy.array method)": [[405, "ivy.Array.inner"]], "inner() (ivy.container method)": [[405, "ivy.Container.inner"]], "inv() (in module ivy)": [[406, "ivy.inv"]], "inv() (ivy.array method)": [[406, "ivy.Array.inv"]], "inv() (ivy.container method)": [[406, "ivy.Container.inv"]], "lu_factor() (in module ivy)": [[407, "ivy.lu_factor"]], "matmul() (in module ivy)": [[408, "ivy.matmul"]], "matmul() (ivy.array method)": [[408, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[408, "ivy.Container.matmul"]], "matrix_norm() (in module ivy)": [[409, "ivy.matrix_norm"]], "matrix_norm() (ivy.array method)": [[409, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[409, "ivy.Container.matrix_norm"]], "matrix_power() (in module ivy)": [[410, "ivy.matrix_power"]], "matrix_power() (ivy.array method)": [[410, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[410, "ivy.Container.matrix_power"]], "matrix_rank() (in module ivy)": [[411, "ivy.matrix_rank"]], "matrix_rank() (ivy.array method)": [[411, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[411, "ivy.Container.matrix_rank"]], "matrix_transpose() (in module ivy)": [[412, "ivy.matrix_transpose"]], "matrix_transpose() (ivy.array method)": [[412, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[412, "ivy.Container.matrix_transpose"]], "outer() (in module ivy)": [[413, "ivy.outer"]], "outer() (ivy.array method)": [[413, "ivy.Array.outer"]], "outer() (ivy.container method)": [[413, "ivy.Container.outer"]], "pinv() (in module ivy)": [[414, "ivy.pinv"]], "pinv() (ivy.array method)": [[414, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[414, "ivy.Container.pinv"]], "qr() (in module ivy)": [[415, "ivy.qr"]], "qr() (ivy.array method)": [[415, "ivy.Array.qr"]], "qr() (ivy.container method)": [[415, "ivy.Container.qr"]], "slogdet() (in module ivy)": [[416, "ivy.slogdet"]], "slogdet() (ivy.array method)": [[416, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[416, "ivy.Container.slogdet"]], "solve() (in module ivy)": [[417, "ivy.solve"]], "solve() (ivy.array method)": [[417, "ivy.Array.solve"]], "solve() (ivy.container method)": [[417, "ivy.Container.solve"]], "svd() (in module ivy)": [[418, "ivy.svd"]], "svd() (ivy.array method)": [[418, "ivy.Array.svd"]], "svd() (ivy.container method)": [[418, "ivy.Container.svd"]], "svdvals() (in module ivy)": [[419, "ivy.svdvals"]], "svdvals() (ivy.array method)": [[419, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[419, "ivy.Container.svdvals"]], "tensordot() (in module ivy)": [[420, "ivy.tensordot"]], "tensordot() (ivy.array method)": [[420, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[420, "ivy.Container.tensordot"]], "tensorsolve() (in module ivy)": [[421, "ivy.tensorsolve"]], "tensorsolve() (ivy.array method)": [[421, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[421, "ivy.Container.tensorsolve"]], "trace() (in module ivy)": [[422, "ivy.trace"]], "trace() (ivy.array method)": [[422, "ivy.Array.trace"]], "trace() (ivy.container method)": [[422, "ivy.Container.trace"]], "vander() (in module ivy)": [[423, "ivy.vander"]], "vander() (ivy.array method)": [[423, "ivy.Array.vander"]], "vander() (ivy.container method)": [[423, "ivy.Container.vander"]], "vecdot() (in module ivy)": [[424, "ivy.vecdot"]], "vecdot() (ivy.array method)": [[424, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[424, "ivy.Container.vecdot"]], "vector_norm() (in module ivy)": [[425, "ivy.vector_norm"]], "vector_norm() (ivy.array method)": [[425, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[425, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[426, "ivy.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[426, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[426, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[428, "ivy.binary_cross_entropy"]], "binary_cross_entropy() (ivy.array method)": [[428, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[428, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[429, "ivy.cross_entropy"]], "cross_entropy() (ivy.array method)": [[429, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[429, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (in module ivy)": [[430, "ivy.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[430, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[430, "ivy.Container.sparse_cross_entropy"]], "clip() (in module ivy)": [[432, "ivy.clip"]], "clip() (ivy.array method)": [[432, "ivy.Array.clip"]], "clip() (ivy.container method)": [[432, "ivy.Container.clip"]], "concat() (in module ivy)": [[433, "ivy.concat"]], "concat() (ivy.array method)": [[433, "ivy.Array.concat"]], "concat() (ivy.container method)": [[433, "ivy.Container.concat"]], "constant_pad() (in module ivy)": [[434, "ivy.constant_pad"]], "constant_pad() (ivy.array method)": [[434, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[434, "ivy.Container.constant_pad"]], "expand_dims() (in module ivy)": [[435, "ivy.expand_dims"]], "expand_dims() (ivy.array method)": [[435, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[435, "ivy.Container.expand_dims"]], "flip() (in module ivy)": [[436, "ivy.flip"]], "flip() (ivy.array method)": [[436, "ivy.Array.flip"]], "flip() (ivy.container method)": [[436, "ivy.Container.flip"]], "permute_dims() (in module ivy)": [[437, "ivy.permute_dims"]], "permute_dims() (ivy.array method)": [[437, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[437, "ivy.Container.permute_dims"]], "repeat() (in module ivy)": [[438, "ivy.repeat"]], "repeat() (ivy.array method)": [[438, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[438, "ivy.Container.repeat"]], "reshape() (in module ivy)": [[439, "ivy.reshape"]], "reshape() (ivy.array method)": [[439, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[439, "ivy.Container.reshape"]], "roll() (in module ivy)": [[440, "ivy.roll"]], "roll() (ivy.array method)": [[440, "ivy.Array.roll"]], "roll() (ivy.container method)": [[440, "ivy.Container.roll"]], "split() (in module ivy)": [[441, "ivy.split"]], "split() (ivy.array method)": [[441, "ivy.Array.split"]], "split() (ivy.container method)": [[441, "ivy.Container.split"]], "squeeze() (in module ivy)": [[442, "ivy.squeeze"]], "squeeze() (ivy.array method)": [[442, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[442, "ivy.Container.squeeze"]], "stack() (in module ivy)": [[443, "ivy.stack"]], "stack() (ivy.array method)": [[443, "ivy.Array.stack"]], "stack() (ivy.container method)": [[443, "ivy.Container.stack"]], "swapaxes() (in module ivy)": [[444, "ivy.swapaxes"]], "swapaxes() (ivy.array method)": [[444, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[444, "ivy.Container.swapaxes"]], "tile() (in module ivy)": [[445, "ivy.tile"]], "tile() (ivy.array method)": [[445, "ivy.Array.tile"]], "tile() (ivy.container method)": [[445, "ivy.Container.tile"]], "unstack() (in module ivy)": [[446, "ivy.unstack"]], "unstack() (ivy.array method)": [[446, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[446, "ivy.Container.unstack"]], "zero_pad() (in module ivy)": [[447, "ivy.zero_pad"]], "zero_pad() (ivy.array method)": [[447, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[447, "ivy.Container.zero_pad"]], "fomaml_step() (in module ivy)": [[453, "ivy.fomaml_step"]], "maml_step() (in module ivy)": [[454, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[455, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[456, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[457, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[458, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[459, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[460, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[461, "ivy.insert_into_nest_at_indices"]], "map() (in module ivy)": [[462, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[463, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[464, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[465, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[466, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[467, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[468, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[469, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[470, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[471, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[472, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[473, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[474, "ivy.set_nest_at_indices"]], "layer_norm() (in module ivy)": [[475, "ivy.layer_norm"]], "layer_norm() (ivy.array method)": [[475, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[475, "ivy.Container.layer_norm"]], "multinomial() (in module ivy)": [[480, "ivy.multinomial"]], "multinomial() (ivy.array method)": [[480, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[480, "ivy.Container.multinomial"]], "randint() (in module ivy)": [[481, "ivy.randint"]], "randint() (ivy.array method)": [[481, "ivy.Array.randint"]], "randint() (ivy.container method)": [[481, "ivy.Container.randint"]], "random_normal() (in module ivy)": [[482, "ivy.random_normal"]], "random_normal() (ivy.array method)": [[482, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[482, "ivy.Container.random_normal"]], "random_uniform() (in module ivy)": [[483, "ivy.random_uniform"]], "random_uniform() (ivy.array method)": [[483, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[483, "ivy.Container.random_uniform"]], "seed() (in module ivy)": [[484, "ivy.seed"]], "shuffle() (in module ivy)": [[485, "ivy.shuffle"]], "shuffle() (ivy.array method)": [[485, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[485, "ivy.Container.shuffle"]], "argmax() (in module ivy)": [[486, "ivy.argmax"]], "argmax() (ivy.array method)": [[486, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[486, "ivy.Container.argmax"]], "argmin() (in module ivy)": [[487, "ivy.argmin"]], "argmin() (ivy.array method)": [[487, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[487, "ivy.Container.argmin"]], "argwhere() (in module ivy)": [[488, "ivy.argwhere"]], "argwhere() (ivy.array method)": [[488, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[488, "ivy.Container.argwhere"]], "nonzero() (in module ivy)": [[489, "ivy.nonzero"]], "nonzero() (ivy.array method)": [[489, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[489, "ivy.Container.nonzero"]], "where() (in module ivy)": [[490, "ivy.where"]], "where() (ivy.array method)": [[490, "ivy.Array.where"]], "where() (ivy.container method)": [[490, "ivy.Container.where"]], "unique_all() (in module ivy)": [[491, "ivy.unique_all"]], "unique_all() (ivy.array method)": [[491, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[491, "ivy.Container.unique_all"]], "unique_counts() (in module ivy)": [[492, "ivy.unique_counts"]], "unique_counts() (ivy.array method)": [[492, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[492, "ivy.Container.unique_counts"]], "unique_inverse() (in module ivy)": [[493, "ivy.unique_inverse"]], "unique_inverse() (ivy.array method)": [[493, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[493, "ivy.Container.unique_inverse"]], "unique_values() (in module ivy)": [[494, "ivy.unique_values"]], "unique_values() (ivy.array method)": [[494, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[494, "ivy.Container.unique_values"]], "argsort() (in module ivy)": [[495, "ivy.argsort"]], "argsort() (ivy.array method)": [[495, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[495, "ivy.Container.argsort"]], "searchsorted() (in module ivy)": [[496, "ivy.searchsorted"]], "searchsorted() (ivy.array method)": [[496, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[496, "ivy.Container.searchsorted"]], "sort() (in module ivy)": [[497, "ivy.sort"]], "sort() (ivy.array method)": [[497, "ivy.Array.sort"]], "sort() (ivy.container method)": [[497, "ivy.Container.sort"]], "cumprod() (in module ivy)": [[499, "ivy.cumprod"]], "cumprod() (ivy.array method)": [[499, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[499, "ivy.Container.cumprod"]], "cumsum() (in module ivy)": [[500, "ivy.cumsum"]], "cumsum() (ivy.array method)": [[500, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[500, "ivy.Container.cumsum"]], "einsum() (in module ivy)": [[501, "ivy.einsum"]], "einsum() (ivy.array method)": [[501, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[501, "ivy.Container.einsum"]], "max() (in module ivy)": [[502, "ivy.max"]], "max() (ivy.array method)": [[502, "ivy.Array.max"]], "max() (ivy.container method)": [[502, "ivy.Container.max"]], "mean() (in module ivy)": [[503, "ivy.mean"]], "mean() (ivy.array method)": [[503, "ivy.Array.mean"]], "mean() (ivy.container method)": [[503, "ivy.Container.mean"]], "min() (in module ivy)": [[504, "ivy.min"]], "min() (ivy.array method)": [[504, "ivy.Array.min"]], "min() (ivy.container method)": [[504, "ivy.Container.min"]], "prod() (in module ivy)": [[505, "ivy.prod"]], "prod() (ivy.array method)": [[505, "ivy.Array.prod"]], "prod() (ivy.container method)": [[505, "ivy.Container.prod"]], "std() (in module ivy)": [[506, "ivy.std"]], "std() (ivy.array method)": [[506, "ivy.Array.std"]], "std() (ivy.container method)": [[506, "ivy.Container.std"]], "sum() (in module ivy)": [[507, "ivy.sum"]], "sum() (ivy.array method)": [[507, "ivy.Array.sum"]], "sum() (ivy.container method)": [[507, "ivy.Container.sum"]], "var() (in module ivy)": [[508, "ivy.var"]], "var() (ivy.array method)": [[508, "ivy.Array.var"]], "var() (ivy.container method)": [[508, "ivy.Container.var"]], "all() (in module ivy)": [[509, "ivy.all"]], "all() (ivy.array method)": [[509, "ivy.Array.all"]], "all() (ivy.container method)": [[509, "ivy.Container.all"]], "any() (in module ivy)": [[510, "ivy.any"]], "any() (ivy.array method)": [[510, "ivy.Array.any"]], "any() (ivy.container method)": [[510, "ivy.Container.any"]], "nestedarray (class in ivy.nested_array.nested_array)": [[512, "ivy.nested_array.nested_array.NestedArray"]], "__init__() (ivy.nested_array.nested_array.nestedarray method)": [[512, "ivy.nested_array.nested_array.NestedArray.__init__"]], "data (ivy.nested_array.nested_array.nestedarray property)": [[512, "ivy.nested_array.nested_array.NestedArray.data"]], "device (ivy.nested_array.nested_array.nestedarray property)": [[512, "ivy.nested_array.nested_array.NestedArray.device"]], "dtype (ivy.nested_array.nested_array.nestedarray property)": [[512, "ivy.nested_array.nested_array.NestedArray.dtype"]], "from_row_lengths() (ivy.nested_array.nested_array.nestedarray class method)": [[512, "ivy.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_split() (ivy.nested_array.nested_array.nestedarray class method)": [[512, "ivy.nested_array.nested_array.NestedArray.from_row_split"]], "ivy.nested_array.nested_array": [[512, "module-ivy.nested_array.nested_array"]], "ndim (ivy.nested_array.nested_array.nestedarray property)": [[512, "ivy.nested_array.nested_array.NestedArray.ndim"]], "nested_array() (ivy.nested_array.nested_array.nestedarray class method)": [[512, "ivy.nested_array.nested_array.NestedArray.nested_array"]], "reshape() (ivy.nested_array.nested_array.nestedarray method)": [[512, "ivy.nested_array.nested_array.NestedArray.reshape"]], "shape (ivy.nested_array.nested_array.nestedarray property)": [[512, "ivy.nested_array.nested_array.NestedArray.shape"]], "unbind() (ivy.nested_array.nested_array.nestedarray method)": [[512, "ivy.nested_array.nested_array.NestedArray.unbind"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[513, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[513, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "available_frameworks() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[514, "ivy_tests.test_ivy.helpers.available_frameworks.available_frameworks"]], "ground_truth() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[514, "ivy_tests.test_ivy.helpers.available_frameworks.ground_truth"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[514, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "empty_func() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.empty_func"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "flatten_fw_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.flatten_fw_and_to_np"]], "framework_comparator() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.framework_comparator"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[515, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.make_json_pickable"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "var_fn() (in module ivy_tests.test_ivy.helpers.function_testing)": [[515, "ivy_tests.test_ivy.helpers.function_testing.var_fn"]], "interruptedtest": [[516, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[516, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[516, "module-ivy_tests.test_ivy.helpers.globals"]], "remove_all_current_framework() (in module ivy_tests.test_ivy.helpers.globals)": [[516, "ivy_tests.test_ivy.helpers.globals.remove_all_current_framework"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[516, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[516, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[516, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[516, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[516, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[517, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[518, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[518, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[518, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[518, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[518, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[518, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[518, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "as_cont() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.as_cont"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[519, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[519, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[520, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[520, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "check_all() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_any"]], "check_dimensions() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[523, "ivy.utils.assertions.check_true"]], "ivy.utils.assertions": [[523, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[524, "module-ivy.utils.backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[525, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[525, "module-ivy.utils.dynamic_import"]], "ivybackendexception": [[526, "ivy.utils.exceptions.IvyBackendException"]], "ivyerror": [[526, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[526, "ivy.utils.exceptions.IvyException"]], "ivynotimplementedexception": [[526, "ivy.utils.exceptions.IvyNotImplementedException"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[526, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[526, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[526, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[526, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[526, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[526, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[527, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[527, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[527, "module-ivy.utils.inspection"]], "cprint() (in module ivy.utils.verbosity)": [[528, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[528, "module-ivy.utils.verbosity"]], "applied libraries": [[574, "term-Applied-Libraries"]], "automatic code conversions": [[574, "term-Automatic-Code-Conversions"]], "backend handler": [[574, "term-Backend-Handler"]], "compositional functions": [[574, "term-Compositional-Functions"]], "convenience functions": [[574, "term-Convenience-Functions"]], "framework": [[574, "term-Framework"]], "framework handler": [[574, "term-Framework-Handler"]], "graph compiler": [[574, "term-Graph-Compiler"]], "ivy array": [[574, "term-Ivy-Array"]], "ivy backends": [[574, "term-Ivy-Backends"]], "ivy builder": [[574, "term-Ivy-Builder"]], "ivy compiler": [[574, "term-Ivy-Compiler"]], "ivy container": [[574, "term-Ivy-Container"]], "ivy frontends": [[574, "term-Ivy-Frontends"]], "ivy functional api": [[574, "term-Ivy-Functional-API"]], "ivy graph compiler": [[574, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[574, "term-Ivy-Transpiler"]], "mixed functions": [[574, "term-Mixed-Functions"]], "native array": [[574, "term-Native-Array"]], "nestable functions": [[574, "term-Nestable-Functions"]], "pipeline": [[574, "term-Pipeline"]], "primary functions": [[574, "term-Primary-Functions"]], "standalone functions": [[574, "term-Standalone-Functions"]], "submodule helper functions": [[574, "term-Submodule-Helper-Functions"]]}})