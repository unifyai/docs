Search.setIndex({"docnames": ["compiler/compiler", "compiler/transpiler", "docs/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/ivy.data_classes.array", "docs/data_classes/ivy.data_classes.container", "docs/framework/ivy.stateful", "docs/framework/stateful/ivy.stateful.activations", "docs/framework/stateful/ivy.stateful.converters", "docs/framework/stateful/ivy.stateful.helpers", "docs/framework/stateful/ivy.stateful.initializers", "docs/framework/stateful/ivy.stateful.layers", "docs/framework/stateful/ivy.stateful.module", "docs/framework/stateful/ivy.stateful.norms", "docs/framework/stateful/ivy.stateful.optimizers", "docs/framework/stateful/ivy.stateful.sequential", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation._ivy_to_native", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_complex128", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_float64", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_function_list", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_functions_from_string", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._handle_nestable_dtype_info", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._is_valid_dtypes_attributes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._lstrip_lines", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._nested_get", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device._get_devices", "docs/functional/ivy/device/ivy.functional.ivy.device._get_nvml_gpu_handle", "docs/functional/ivy/device/ivy.functional.ivy.device._is_valid_devices_attributes", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/general/ivy.functional.ivy.general._all_dnd_combinations", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_difference", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_intersection", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_union", "docs/functional/ivy/general/ivy.functional.ivy.general._get_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general._is_valid_device_and_dtypes_attributes", "docs/functional/ivy/general/ivy.functional.ivy.general._parse_ellipsis", "docs/functional/ivy/general/ivy.functional.ivy.general._valid_attrib_combinations", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._arrays_to_float_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._check_if_empty", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_duplicate_index_chains", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_variables_and_indices", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_y", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_float_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_native_variables", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_y_and_ret_idxs", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._idxs_to_str", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._is_variable", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._non_finite_to_zero", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._process_func_ret_and_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._set_duplicates", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._stop_grad_and_index", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._to_ivy", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable_data", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers._deconv_length", "docs/functional/ivy/layers/ivy.functional.ivy.layers._get_x_data_format", "docs/functional/ivy/layers/ivy.functional.ivy.layers._handle_padding", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses._reduce_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation._calculate_out_shape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta._compute_cost_and_update_grads", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_task", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_batched", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_with_for_loop", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random._check_bounds_and_get_shape", "docs/functional/ivy/random/ivy.functional.ivy.random._check_shapes_broadcastable", "docs/functional/ivy/random/ivy.functional.ivy.random._check_valid_scale", "docs/functional/ivy/random/ivy.functional.ivy.random._randint_check_dtype_and_bound", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical._get_promoted_type_of_operands", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/nested-array/ivy.nested_array", "docs/nested-array/nested_array/ivy.nested_array.nested_array", "docs/testing/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/testing/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/testing/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/testing/helpers/ivy_tests.test_ivy.helpers.globals", "docs/testing/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/testing/helpers/ivy_tests.test_ivy.helpers.structs", "docs/testing/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/testing/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/testing/ivy_tests.test_ivy.helpers", "docs/utilities/ivy.utils", "docs/utilities/utils/ivy.utils.assertions", "docs/utilities/utils/ivy.utils.backend", "docs/utilities/utils/ivy.utils.dynamic_import", "docs/utilities/utils/ivy.utils.exceptions", "docs/utilities/utils/ivy.utils.inspection", "docs/utilities/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/transpiler.rst", "docs/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/ivy.data_classes.array.rst", "docs/data_classes/ivy.data_classes.container.rst", "docs/framework/ivy.stateful.rst", "docs/framework/stateful/ivy.stateful.activations.rst", "docs/framework/stateful/ivy.stateful.converters.rst", "docs/framework/stateful/ivy.stateful.helpers.rst", "docs/framework/stateful/ivy.stateful.initializers.rst", "docs/framework/stateful/ivy.stateful.layers.rst", "docs/framework/stateful/ivy.stateful.module.rst", "docs/framework/stateful/ivy.stateful.norms.rst", "docs/framework/stateful/ivy.stateful.optimizers.rst", "docs/framework/stateful/ivy.stateful.sequential.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.deserialize.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.get.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.IfElse.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.WhileLoop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation._ivy_to_native.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_complex128.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._check_float64.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_function_list.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._get_functions_from_string.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._handle_nestable_dtype_info.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._is_valid_dtypes_attributes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._lstrip_lines.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type._nested_get.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._get_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._get_nvml_gpu_handle.rst", "docs/functional/ivy/device/ivy.functional.ivy.device._is_valid_devices_attributes.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._all_dnd_combinations.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_difference.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_intersection.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._dnd_dict_union.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._get_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._is_valid_device_and_dtypes_attributes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._parse_ellipsis.rst", "docs/functional/ivy/general/ivy.functional.ivy.general._valid_attrib_combinations.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._arrays_to_float_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._check_if_empty.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_duplicate_index_chains.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_variables_and_indices.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_native_y.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_float_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_required_native_variables.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._get_y_and_ret_idxs.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._idxs_to_str.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._is_variable.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._non_finite_to_zero.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._process_func_ret_and_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._set_duplicates.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._stop_grad_and_index.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._to_ivy.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients._variable_data.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.set_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.unset_with_grads.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.with_grads.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._deconv_length.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._get_x_data_format.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers._handle_padding.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses._reduce_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation._calculate_out_shape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._compute_cost_and_update_grads.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_task.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_batched.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta._train_tasks_with_for_loop.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_bounds_and_get_shape.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_shapes_broadcastable.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._check_valid_scale.rst", "docs/functional/ivy/random/ivy.functional.ivy.random._randint_check_dtype_and_bound.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical._get_promoted_type_of_operands.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/nested-array/ivy.nested_array.rst", "docs/nested-array/nested_array/ivy.nested_array.nested_array.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/testing/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/testing/ivy_tests.test_ivy.helpers.rst", "docs/utilities/ivy.utils.rst", "docs/utilities/utils/ivy.utils.assertions.rst", "docs/utilities/utils/ivy.utils.backend.rst", "docs/utilities/utils/ivy.utils.dynamic_import.rst", "docs/utilities/utils/ivy.utils.exceptions.rst", "docs/utilities/utils/ivy.utils.inspection.rst", "docs/utilities/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "stateful", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Module", "Norms", "Optimizers", "Sequential", "ivy", "deserialize", "gelu", "get", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "IfElse", "WhileLoop", "if_else", "while_loop", "_ivy_to_native", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "_check_complex128", "_check_float64", "_get_dtypes", "_get_function_list", "_get_functions_from_string", "_handle_nestable_dtype_info", "_is_valid_dtypes_attributes", "_lstrip_lines", "_nested_get", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "_get_devices", "_get_nvml_gpu_handle", "_is_valid_devices_attributes", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "fmod", "greater", "greater_equal", "isfinite", "isinf", "isnan", "isreal", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "rad2deg", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "trunc_divide", "_all_dnd_combinations", "_dnd_dict_difference", "_dnd_dict_intersection", "_dnd_dict_union", "_get_devices_and_dtypes", "_is_valid_device_and_dtypes_attributes", "_parse_ellipsis", "_valid_attrib_combinations", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_show_func_wrapper_trace_mode", "get_tmp_dir", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "isin", "isscalar", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "stable_pow", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "value_is_nan", "vmap", "_arrays_to_float_variables", "_check_if_empty", "_get_duplicate_index_chains", "_get_native_variables_and_indices", "_get_native_y", "_get_required_float_variables", "_get_required_native_variables", "_get_y_and_ret_idxs", "_idxs_to_str", "_is_variable", "_non_finite_to_zero", "_process_func_ret_and_grads", "_set_duplicates", "_stop_grad_and_index", "_to_ivy", "_variable", "_variable_data", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "value_and_grad", "with_grads", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "_deconv_length", "_get_x_data_format", "_handle_padding", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "_reduce_loss", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "_calculate_out_shape", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "_compute_cost_and_update_grads", "_train_task", "_train_tasks", "_train_tasks_batched", "_train_tasks_with_for_loop", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "_check_bounds_and_get_shape", "_check_shapes_broadcastable", "_check_valid_scale", "_randint_check_dtype_and_bound", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "searchsorted", "sort", "_get_promoted_type_of_operands", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "nested_array", "Nested array", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Structs", "Test parameter flags", "Testing helpers", "helpers", "utils", "Assertions", "Backend", "Dynamic import", "Exceptions", "Inspection", "Verbosity", "Contents", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 1, 532, 543, 548], "The": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 85, 87, 89, 92, 94, 95, 96, 98, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 128, 130, 131, 134, 135, 137, 138, 140, 141, 142, 143, 149, 153, 154, 155, 156, 158, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 275, 277, 278, 281, 282, 284, 285, 286, 288, 289, 290, 291, 295, 298, 299, 302, 303, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 523, 532, 533, 534, 536, 537, 538, 539, 541, 542, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "transpil": [0, 541, 555, 562, 567, 568, 569, 577, 582, 588, 589], "ar": [0, 1, 3, 4, 7, 8, 9, 13, 15, 17, 18, 25, 27, 30, 31, 32, 36, 38, 40, 41, 47, 48, 52, 53, 55, 58, 75, 87, 89, 92, 161, 165, 167, 171, 193, 195, 218, 219, 228, 231, 233, 238, 250, 253, 254, 255, 270, 276, 280, 283, 287, 296, 297, 304, 313, 322, 347, 358, 362, 364, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 395, 396, 401, 405, 406, 407, 411, 412, 414, 417, 421, 422, 426, 427, 428, 435, 436, 439, 443, 445, 460, 465, 470, 471, 472, 484, 485, 486, 489, 490, 491, 492, 494, 496, 516, 518, 523, 526, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "publicli": [0, 1, 532], "avail": [0, 1, 9, 32, 156, 162, 163, 164, 174, 262, 364, 367, 532, 534, 542, 543, 548, 549, 550, 552, 554, 555, 562, 564, 566, 576, 587, 588], "yet": [0, 1, 532, 541, 542, 576], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 366, 369, 374, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 417, 418, 419, 421, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 470, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 532, 534, 535, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 582, 583, 584, 586], "certain": [0, 1, 25, 75, 88, 89, 362, 532, 542, 543, 545, 551, 558, 564, 566, 576, 586], "part": [0, 1, 4, 8, 31, 55, 95, 96, 209, 362, 365, 366, 370, 407, 518, 532, 538, 543, 545, 548, 558, 562, 564, 565, 566, 568, 569, 573, 575, 576, 580, 582, 587, 588, 589], "thi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 111, 112, 113, 123, 126, 129, 130, 131, 132, 136, 137, 154, 157, 166, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 278, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 305, 311, 312, 313, 315, 317, 318, 326, 327, 345, 346, 347, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 465, 466, 471, 472, 476, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 519, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "doc": [0, 1, 231, 365, 366, 532, 537, 540, 541, 544, 553, 554, 557, 564, 568, 571, 572], "won": [0, 1, 532, 535, 536, 542, 543, 549, 573], "t": [0, 1, 8, 12, 23, 31, 35, 46, 47, 286, 313, 347, 366, 367, 368, 369, 374, 396, 397, 467, 532, 535, 536, 538, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 553, 559, 560, 561, 564, 565, 566, 568, 570, 571, 572, 573, 576, 580, 582, 584], "work": [0, 1, 8, 31, 366, 374, 466, 467, 471, 476, 477, 532, 536, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 555, 562, 563, 564, 565, 567, 568, 570, 572, 573, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "expect": [0, 1, 8, 13, 52, 53, 55, 136, 252, 363, 366, 367, 416, 532, 536, 543, 545, 551, 555, 563, 564, 566, 576], "now": [0, 1, 54, 55, 84, 94, 98, 362, 532, 536, 542, 545, 546, 547, 548, 549, 550, 551, 556, 557, 559, 562, 563, 564, 565, 566, 570, 571, 573, 575, 576, 582], "when": [0, 1, 4, 5, 8, 13, 14, 17, 18, 21, 25, 27, 28, 30, 31, 36, 37, 40, 41, 44, 48, 52, 53, 55, 92, 110, 180, 200, 214, 227, 286, 305, 312, 362, 363, 365, 366, 367, 369, 370, 371, 374, 376, 377, 380, 385, 414, 419, 431, 432, 433, 459, 460, 469, 470, 471, 484, 485, 486, 489, 490, 492, 493, 505, 507, 509, 511, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 568, 570, 571, 573, 576, 580, 582, 585, 586, 587, 588], "we": [0, 1, 8, 23, 31, 46, 52, 55, 261, 313, 347, 348, 350, 357, 366, 367, 368, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 582, 583, 587, 588], "call": [0, 1, 8, 23, 28, 31, 46, 48, 52, 54, 55, 57, 130, 131, 171, 278, 305, 319, 347, 348, 350, 364, 366, 367, 368, 370, 374, 419, 459, 465, 469, 470, 518, 532, 535, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 576, 582, 583, 586], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 123, 126, 129, 132, 136, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 254, 256, 257, 265, 268, 277, 282, 284, 285, 286, 288, 289, 290, 291, 299, 309, 313, 317, 318, 319, 327, 347, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 465, 478, 484, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 522, 523, 532, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 588, 589], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 522, 523, 526, 528, 529, 530, 531, 535, 536, 537, 539, 540, 542, 544, 545, 547, 549, 551, 552, 554, 556, 557, 558, 559, 561, 566, 567, 574, 576, 577, 578, 589], "function": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 53, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 111, 112, 113, 114, 123, 124, 125, 126, 129, 130, 131, 132, 136, 137, 157, 159, 160, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 297, 298, 299, 304, 305, 307, 311, 312, 313, 315, 317, 318, 319, 322, 325, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 461, 465, 466, 467, 469, 470, 471, 472, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 519, 523, 530, 532, 534, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 556, 561, 567, 569, 570, 571, 572, 574, 575, 577, 579, 580, 581, 582, 583, 588, 589], "i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 149, 154, 156, 157, 159, 160, 162, 163, 166, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 298, 299, 305, 309, 311, 312, 313, 315, 317, 318, 319, 326, 327, 346, 349, 351, 352, 353, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 519, 523, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "alwai": [0, 5, 15, 28, 38, 110, 180, 286, 363, 365, 366, 367, 372, 442, 532, 541, 543, 546, 547, 549, 551, 554, 556, 557, 558, 561, 562, 563, 564, 565, 566, 568, 576], "small": [0, 1, 8, 13, 16, 31, 36, 39, 53, 56, 366, 370, 375, 414, 417, 419, 478, 532, 542, 550, 553, 558, 563, 566, 568, 572, 576, 583], "perform": [0, 1, 4, 8, 12, 13, 21, 22, 27, 31, 32, 35, 36, 44, 45, 64, 68, 88, 89, 241, 261, 262, 263, 284, 285, 286, 300, 307, 359, 362, 365, 366, 367, 369, 370, 373, 374, 380, 381, 395, 397, 421, 428, 456, 457, 458, 466, 467, 502, 503, 512, 513, 516, 536, 545, 546, 547, 549, 551, 552, 553, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 571, 576, 579, 582, 583, 584, 585, 586, 587, 589], "hit": [0, 564, 568], "due": [0, 1, 231, 365, 535, 538, 542, 545, 550, 555, 561, 562, 582], "ad": [0, 8, 15, 31, 38, 46, 58, 311, 312, 366, 367, 370, 372, 406, 407, 438, 532, 535, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 572, 576, 581, 582], "python": [0, 8, 17, 31, 40, 75, 166, 176, 230, 327, 362, 364, 365, 366, 367, 376, 483, 484, 485, 486, 488, 533, 534, 535, 540, 542, 543, 545, 546, 548, 549, 550, 555, 556, 562, 564, 566, 568, 570, 571, 576, 577, 579, 582, 583, 584, 588, 589], "wrap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 307, 311, 312, 313, 315, 317, 318, 325, 326, 345, 346, 349, 351, 352, 353, 355, 366, 367, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 417, 418, 419, 421, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 515, 518, 532, 544, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 561, 562, 564, 568, 570, 573, 576, 577, 578, 582, 583, 588, 589], "overhead": [0, 576, 585], "becom": [0, 8, 31, 366, 372, 435, 534, 536, 543, 548, 549, 553, 555, 562, 576], "increasingli": [0, 553], "notic": [0, 541, 546, 550, 566], "larg": [0, 8, 31, 180, 365, 366, 370, 419, 542, 543, 550, 571, 582], "model": [0, 1, 532, 571, 572, 577, 580, 581, 582, 583, 584, 585, 586, 588, 589], "multipl": [0, 8, 13, 16, 21, 22, 25, 30, 31, 32, 33, 36, 38, 39, 44, 45, 54, 190, 216, 221, 222, 250, 294, 345, 346, 349, 351, 353, 355, 365, 366, 367, 368, 369, 370, 372, 375, 377, 380, 381, 387, 388, 389, 390, 400, 409, 411, 412, 435, 438, 443, 444, 478, 489, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 536, 543, 546, 547, 548, 549, 553, 555, 558, 561, 562, 563, 564, 566, 568, 576, 580, 581, 582, 589], "improv": [0, 536, 543, 551, 557, 558, 566, 568, 577, 580, 582, 584, 585], "remov": [0, 1, 13, 25, 36, 356, 368, 370, 372, 373, 374, 404, 411, 425, 445, 456, 457, 473, 532, 541, 547, 548, 550, 551, 554, 558, 564, 566, 573, 582], "extra": [0, 1, 25, 48, 327, 367, 546, 551, 553, 559, 562, 563, 566, 568, 579, 584], "around": [0, 25, 48, 366, 543, 546, 548, 557, 558, 562, 565, 570, 576, 577, 580, 582, 589], "each": [0, 1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 25, 28, 30, 31, 32, 33, 35, 36, 38, 41, 42, 44, 47, 48, 54, 56, 57, 58, 65, 66, 67, 69, 90, 111, 123, 126, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 253, 261, 268, 269, 292, 327, 346, 347, 349, 351, 352, 353, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 400, 401, 402, 405, 406, 407, 411, 413, 414, 415, 417, 419, 420, 421, 426, 437, 441, 443, 444, 446, 448, 450, 465, 472, 483, 492, 494, 495, 497, 503, 504, 511, 534, 535, 536, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 575, 576, 578, 579, 583, 585, 588], "take": [0, 1, 8, 13, 15, 21, 31, 38, 53, 92, 191, 362, 365, 366, 370, 372, 411, 415, 442, 502, 523, 532, 536, 537, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 558, 561, 562, 563, 564, 566, 568, 570, 572, 573, 576, 579, 580, 588], "ani": [0, 1, 3, 4, 6, 7, 8, 9, 13, 22, 23, 27, 29, 30, 31, 32, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 113, 114, 129, 132, 136, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 260, 261, 262, 263, 264, 268, 277, 282, 284, 288, 290, 312, 318, 319, 327, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 462, 465, 466, 468, 469, 476, 478, 486, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 516, 519, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "framework": [0, 1, 3, 9, 51, 57, 128, 149, 162, 164, 174, 259, 283, 287, 313, 316, 363, 364, 367, 374, 461, 516, 518, 519, 523, 534, 535, 536, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 570, 573, 575, 576, 577, 578, 579, 580, 581, 583, 586], "specif": [0, 1, 6, 9, 29, 32, 42, 55, 137, 169, 172, 218, 219, 261, 262, 263, 295, 363, 364, 365, 367, 370, 372, 373, 376, 379, 380, 406, 407, 423, 446, 456, 457, 458, 483, 497, 499, 505, 506, 507, 509, 518, 530, 532, 534, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 555, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 589], "backend": [0, 1, 3, 4, 8, 9, 13, 25, 31, 32, 36, 51, 55, 57, 81, 124, 125, 128, 149, 159, 160, 162, 164, 174, 254, 266, 267, 283, 286, 287, 295, 313, 316, 362, 363, 364, 366, 367, 370, 421, 516, 518, 519, 532, 534, 540, 541, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 566, 567, 569, 570, 573, 577, 582, 585, 588, 589], "composit": [0, 366, 541, 544, 546, 547, 549, 551, 559, 561, 563, 564, 566, 568, 572, 573, 576, 577, 583], "both": [0, 1, 4, 7, 8, 13, 27, 30, 31, 36, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 113, 129, 132, 135, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 277, 282, 284, 292, 318, 355, 357, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 532, 543, 547, 549, 550, 551, 552, 553, 554, 557, 558, 561, 562, 564, 566, 568, 570, 571, 572, 573, 575, 576, 582, 585, 587, 588, 589], "produc": [0, 8, 12, 31, 35, 366, 369, 399, 541, 551, 563, 564, 565, 583, 585], "simplifi": [0, 535, 555, 562, 568, 569, 572, 578, 580, 581, 582, 585, 588, 589], "execut": [0, 319, 364, 367, 542, 543, 548, 549, 550, 553, 555, 558, 559, 561, 564, 566, 568, 570, 573, 576, 577, 578, 582, 583, 584, 585, 586, 588], "comput": [0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 19, 21, 24, 25, 30, 31, 32, 33, 35, 36, 37, 44, 64, 68, 171, 180, 186, 189, 191, 197, 198, 203, 204, 205, 210, 211, 217, 218, 219, 220, 222, 225, 229, 230, 255, 256, 257, 345, 347, 348, 350, 354, 355, 357, 358, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 378, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 400, 401, 405, 406, 407, 410, 411, 412, 416, 418, 420, 421, 427, 428, 431, 432, 433, 438, 465, 494, 495, 496, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 518, 532, 535, 536, 542, 549, 550, 551, 558, 560, 562, 564, 566, 568, 571, 576, 577, 578, 580, 582, 583, 585, 586, 588], "compos": [0, 8, 31, 52, 366, 542, 549, 562, 564, 576, 582, 589], "from": [0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 40, 41, 44, 45, 46, 48, 51, 52, 53, 54, 55, 57, 75, 77, 83, 85, 86, 87, 90, 91, 94, 98, 113, 131, 136, 137, 156, 161, 165, 170, 171, 195, 228, 235, 255, 260, 268, 269, 273, 297, 305, 315, 327, 346, 351, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 386, 394, 395, 398, 404, 421, 425, 426, 427, 436, 439, 442, 445, 456, 457, 458, 460, 471, 472, 473, 483, 484, 485, 486, 490, 493, 494, 496, 502, 503, 508, 509, 510, 511, 512, 513, 516, 518, 523, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 586, 587, 588, 589], "onli": [0, 1, 4, 8, 13, 15, 17, 25, 27, 31, 36, 38, 40, 47, 55, 57, 89, 135, 136, 167, 176, 218, 219, 255, 362, 363, 364, 365, 366, 367, 370, 372, 374, 376, 377, 379, 380, 411, 418, 421, 439, 442, 459, 460, 466, 467, 469, 470, 471, 476, 477, 484, 485, 486, 489, 490, 499, 506, 509, 519, 532, 534, 537, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 574, 576, 581, 582, 583, 588, 589], "which": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 111, 113, 115, 121, 123, 126, 128, 131, 137, 149, 157, 161, 165, 167, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 260, 261, 262, 263, 265, 268, 269, 270, 273, 277, 282, 284, 285, 286, 288, 289, 291, 292, 296, 297, 298, 299, 311, 312, 313, 315, 317, 318, 326, 327, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 395, 396, 398, 399, 400, 401, 403, 404, 407, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 425, 427, 428, 431, 432, 433, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 449, 450, 464, 465, 466, 467, 472, 474, 475, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 530, 532, 534, 535, 536, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 587, 588, 589], "result": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 110, 112, 136, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 268, 269, 286, 292, 298, 299, 345, 346, 347, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 462, 465, 466, 468, 472, 476, 478, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 523, 526, 532, 543, 545, 546, 548, 549, 550, 551, 553, 554, 557, 559, 560, 561, 562, 563, 564, 565, 568, 571, 576, 583, 585], "code": [0, 1, 6, 7, 25, 29, 30, 48, 172, 211, 254, 262, 263, 286, 298, 313, 358, 364, 367, 368, 369, 370, 372, 394, 413, 414, 415, 446, 532, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589], "all": [0, 1, 3, 4, 8, 9, 12, 13, 15, 17, 22, 23, 25, 26, 30, 31, 32, 35, 36, 38, 40, 45, 46, 52, 53, 75, 92, 95, 96, 161, 167, 222, 250, 253, 270, 296, 297, 311, 317, 318, 327, 347, 362, 364, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 381, 395, 397, 414, 419, 420, 423, 428, 439, 443, 445, 456, 457, 458, 459, 460, 461, 470, 471, 472, 473, 483, 486, 491, 516, 518, 522, 526, 530, 532, 534, 535, 536, 537, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 588, 589], "don": [0, 23, 46, 532, 536, 541, 542, 543, 548, 550, 551, 560, 564, 566, 572, 576], "contribut": [0, 538, 540, 541, 542, 543, 548, 562, 568, 586], "output": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 53, 54, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 110, 112, 136, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 255, 256, 257, 261, 262, 263, 265, 269, 286, 292, 298, 299, 300, 320, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 472, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 532, 539, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 570, 572, 573, 576, 577, 583], "print": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 110, 111, 112, 113, 115, 121, 122, 123, 124, 125, 128, 130, 131, 132, 137, 149, 153, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 273, 274, 275, 277, 278, 282, 284, 285, 286, 288, 289, 290, 291, 294, 297, 298, 299, 302, 303, 305, 308, 309, 311, 313, 315, 317, 318, 319, 323, 326, 327, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 404, 407, 409, 411, 412, 414, 415, 416, 417, 419, 421, 422, 423, 425, 428, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 542, 543, 549, 553, 563, 564, 568, 570, 571, 572], "statement": [0, 1, 550, 556, 561, 564, 566, 576], "logger": 0, "etc": [0, 4, 8, 17, 19, 23, 27, 31, 40, 46, 53, 54, 55, 56, 57, 58, 81, 88, 89, 92, 362, 366, 376, 378, 483, 484, 485, 486, 494, 495, 496, 497, 536, 541, 542, 543, 545, 546, 548, 549, 551, 553, 555, 557, 562, 563, 564, 565, 568, 570, 571, 576, 577, 580, 582, 588], "ha": [0, 4, 8, 13, 15, 19, 21, 25, 28, 31, 32, 36, 38, 42, 44, 52, 90, 156, 177, 209, 227, 231, 282, 358, 362, 364, 365, 366, 368, 370, 372, 378, 380, 411, 420, 421, 425, 438, 445, 494, 495, 496, 497, 502, 503, 506, 508, 509, 510, 511, 534, 535, 536, 541, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573, 575, 576, 578, 581, 582, 584, 585, 588], "": [0, 1, 4, 8, 9, 10, 13, 21, 31, 33, 36, 44, 52, 53, 54, 55, 56, 57, 58, 90, 95, 96, 124, 125, 156, 159, 160, 170, 230, 266, 267, 313, 346, 348, 349, 350, 351, 353, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 380, 387, 389, 391, 393, 403, 414, 421, 422, 428, 471, 509, 511, 518, 532, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 578, 581, 582, 583, 585, 586, 587, 588], "likewis": [0, 1, 532, 543, 549, 551, 554, 557, 558, 562, 566, 571, 588], "redund": [0, 532, 543, 551, 555, 562, 566], "oper": [0, 4, 5, 8, 9, 12, 25, 27, 28, 31, 32, 35, 48, 88, 89, 137, 180, 190, 230, 254, 261, 262, 263, 313, 362, 363, 365, 366, 367, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 532, 534, 541, 542, 545, 546, 549, 551, 552, 553, 554, 555, 558, 561, 562, 564, 566, 568, 571, 572, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589], "origin": [0, 1, 8, 13, 15, 21, 25, 31, 36, 38, 44, 47, 48, 184, 365, 366, 370, 372, 380, 412, 442, 443, 503, 518, 532, 536, 541, 542, 543, 547, 548, 550, 551, 559, 561, 562, 563, 568, 582, 583], "also": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 53, 54, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 111, 112, 113, 126, 129, 130, 131, 132, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 469, 470, 471, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 585, 587, 588, 589], "increas": [0, 13, 15, 36, 38, 366, 370, 372, 374, 426, 437, 450, 471, 534, 551, 555, 562, 565, 566, 582], "its": [0, 3, 5, 8, 15, 25, 28, 32, 38, 52, 111, 116, 117, 118, 119, 120, 171, 265, 316, 363, 364, 366, 367, 370, 372, 374, 411, 438, 442, 443, 447, 465, 518, 522, 532, 541, 542, 543, 546, 548, 550, 551, 554, 559, 560, 562, 563, 564, 565, 566, 568, 573, 576, 577, 581, 582, 588], "overal": [0, 369, 395, 549, 551, 552, 554, 573, 578, 580, 581, 582], "obj": [0, 1, 76, 77, 362], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 126, 128, 129, 130, 131, 132, 134, 137, 147, 149, 155, 156, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 279, 282, 284, 285, 286, 288, 289, 291, 295, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 346, 347, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 523, 528, 532, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573], "arg_stateful_idx": [0, 55], "kwarg_stateful_idx": [0, 55], "include_gener": [0, 55], "true": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67, 68, 69, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 114, 121, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 137, 149, 156, 157, 159, 160, 163, 166, 167, 168, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 276, 277, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 300, 304, 306, 307, 309, 310, 311, 312, 313, 315, 317, 318, 320, 322, 324, 325, 326, 346, 347, 349, 351, 352, 353, 354, 355, 356, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 465, 466, 467, 469, 470, 471, 472, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 526, 532, 549, 550, 551, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 568, 571, 572, 573], "array_cach": [0, 55], "return_backend_compiled_fn": 0, "fals": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 55, 57, 61, 63, 64, 65, 66, 67, 68, 69, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 156, 157, 162, 163, 166, 167, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 271, 273, 276, 277, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 298, 299, 300, 304, 306, 307, 309, 310, 311, 312, 313, 315, 317, 318, 320, 322, 324, 325, 326, 346, 347, 349, 353, 354, 355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 465, 469, 470, 471, 472, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 523, 526, 532, 545, 547, 551, 553, 555, 561, 562, 563, 564, 566, 568, 571, 572, 573], "static_argnum": [0, 568], "static_argnam": [0, 568], "arg": [0, 1, 3, 25, 51, 55, 171, 319, 362, 364, 366, 367, 516, 518, 526, 532, 546, 555, 560, 562, 566, 568, 572], "kwarg": [0, 1, 3, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 55, 294, 319, 362, 366, 367, 516, 518, 532, 546, 555, 562, 566, 568, 572], "callabl": [0, 1, 9, 23, 32, 46, 57, 60, 62, 78, 79, 80, 124, 125, 159, 160, 171, 251, 255, 260, 262, 266, 267, 294, 319, 327, 348, 350, 357, 359, 362, 363, 364, 366, 367, 368, 369, 373, 374, 398, 456, 457, 458, 465, 466, 467, 469, 470, 471, 472, 516, 519, 523, 529, 549, 555, 560, 562, 568], "set": [0, 1, 3, 8, 9, 12, 13, 18, 20, 21, 25, 31, 32, 35, 36, 41, 43, 44, 52, 53, 54, 57, 138, 139, 140, 141, 142, 156, 168, 169, 170, 171, 184, 250, 254, 261, 286, 300, 301, 302, 303, 304, 305, 306, 307, 308, 313, 321, 363, 364, 365, 366, 367, 369, 370, 374, 376, 377, 379, 380, 395, 401, 412, 414, 417, 420, 421, 459, 466, 469, 470, 471, 476, 477, 487, 489, 490, 494, 496, 497, 498, 500, 509, 511, 518, 523, 534, 537, 543, 544, 545, 546, 549, 550, 551, 552, 553, 555, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 580, 581, 582, 583, 584, 586, 589], "them": [0, 1, 42, 255, 297, 367, 497, 532, 533, 534, 535, 536, 539, 541, 543, 545, 546, 547, 548, 549, 550, 555, 559, 561, 562, 563, 564, 568, 570, 571, 572, 576, 577, 579, 580, 582, 584, 588], "If": [0, 1, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 53, 55, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 137, 156, 170, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 327, 347, 349, 355, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 395, 396, 399, 400, 401, 403, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 431, 432, 433, 435, 436, 438, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 471, 472, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 532, 534, 537, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "specifi": [0, 1, 4, 5, 8, 9, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 28, 31, 32, 36, 37, 38, 40, 41, 44, 45, 52, 63, 75, 82, 86, 88, 93, 95, 96, 97, 110, 112, 161, 165, 167, 170, 171, 172, 230, 251, 268, 269, 273, 282, 327, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 398, 403, 404, 407, 412, 423, 425, 426, 427, 428, 431, 432, 433, 435, 436, 437, 438, 439, 443, 445, 446, 449, 450, 464, 466, 467, 474, 475, 476, 477, 484, 485, 486, 489, 490, 492, 494, 495, 496, 497, 498, 502, 503, 504, 508, 510, 512, 513, 543, 544, 548, 551, 552, 557, 558, 559, 561, 562, 563, 564, 566, 568, 571, 572, 588], "eagerli": [0, 1, 532], "otherwis": [0, 1, 3, 4, 5, 7, 8, 9, 12, 13, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 55, 61, 63, 64, 65, 66, 67, 68, 69, 75, 81, 87, 88, 89, 92, 94, 98, 110, 111, 113, 114, 116, 117, 118, 119, 120, 129, 132, 136, 137, 156, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 319, 326, 349, 355, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 377, 379, 380, 381, 386, 387, 388, 389, 395, 396, 399, 400, 401, 402, 407, 409, 411, 412, 414, 416, 418, 419, 421, 425, 427, 428, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 472, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 532, 543, 546, 549, 551, 552, 553, 558, 559, 564, 568], "happen": [0, 1, 366, 532, 536, 542, 543, 564, 571], "lazili": [0, 1, 532], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 147, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 277, 279, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 298, 299, 302, 303, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 523, 530, 532, 541, 546, 554, 555, 557, 558, 559, 562, 563, 564, 565, 568, 570, 571, 575, 583], "creat": [0, 1, 4, 8, 17, 25, 27, 31, 36, 40, 51, 53, 54, 55, 56, 57, 58, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 315, 327, 357, 362, 366, 367, 368, 376, 416, 483, 484, 485, 486, 488, 518, 523, 535, 537, 538, 541, 542, 543, 546, 548, 550, 551, 552, 555, 559, 561, 562, 563, 564, 566, 568, 569, 572, 574, 575, 577, 582, 583, 588], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 51, 53, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 126, 128, 137, 149, 156, 167, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 259, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 295, 298, 299, 311, 312, 313, 315, 317, 318, 319, 326, 345, 346, 347, 349, 351, 352, 353, 355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 465, 466, 469, 470, 471, 476, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 523, 541, 542, 543, 549, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 568, 573, 576, 582, 588], "list": [0, 3, 4, 5, 8, 9, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 87, 90, 91, 92, 94, 98, 111, 113, 126, 130, 131, 137, 156, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 252, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 270, 277, 282, 284, 285, 286, 288, 289, 291, 294, 298, 299, 311, 312, 313, 315, 317, 318, 319, 326, 327, 349, 354, 355, 356, 358, 359, 362, 363, 364, 366, 367, 368, 370, 372, 374, 375, 377, 378, 379, 386, 387, 388, 389, 390, 391, 394, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 423, 425, 431, 432, 433, 435, 436, 439, 442, 443, 444, 445, 446, 449, 450, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 476, 477, 478, 483, 484, 485, 486, 488, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 509, 511, 512, 513, 515, 516, 518, 523, 526, 540, 541, 542, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 562, 563, 564, 565, 568, 571, 572, 573, 576, 582, 583, 588], "instanc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 123, 126, 129, 130, 131, 132, 137, 157, 168, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 306, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 523, 538, 541, 542, 543, 545, 546, 551, 553, 554, 557, 558, 559, 560, 561, 564, 571, 572, 573, 577, 583], "consid": [0, 8, 13, 19, 31, 36, 53, 218, 219, 365, 366, 370, 378, 403, 414, 494, 495, 496, 497, 534, 535, 546, 550, 551, 558, 560, 565, 566, 569, 570, 571, 579, 583, 587, 589], "dure": [0, 6, 10, 21, 25, 29, 33, 44, 52, 55, 57, 172, 319, 345, 346, 351, 364, 366, 367, 368, 369, 370, 373, 380, 395, 411, 456, 457, 458, 509, 511, 542, 549, 551, 552, 555, 558, 559, 561, 562, 563, 564, 566, 576, 582, 583, 588], "posit": [0, 3, 7, 8, 9, 13, 15, 30, 31, 32, 36, 38, 51, 84, 123, 177, 206, 207, 229, 230, 255, 265, 327, 360, 362, 363, 365, 366, 367, 370, 372, 376, 377, 381, 400, 403, 425, 438, 443, 487, 492, 512, 513, 518, 523, 532, 541, 543, 545, 549, 559, 562, 564, 565, 571, 575, 584], "argument": [0, 1, 3, 4, 7, 8, 9, 13, 25, 26, 30, 31, 32, 48, 51, 55, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 137, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 251, 252, 254, 255, 260, 262, 263, 268, 277, 282, 284, 286, 294, 298, 299, 313, 318, 319, 327, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 465, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 523, 530, 532, 534, 541, 544, 545, 546, 547, 548, 549, 553, 554, 556, 558, 559, 563, 564, 565, 566, 568, 570, 571, 577, 582], "keyword": [0, 1, 3, 4, 25, 48, 55, 90, 252, 255, 294, 319, 362, 366, 367, 374, 380, 465, 510, 516, 518, 541, 546, 549, 551, 552, 559, 561, 562, 563, 564, 565, 566, 571], "str": [0, 1, 3, 4, 8, 9, 12, 13, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 87, 90, 92, 94, 98, 108, 111, 113, 115, 116, 117, 118, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 137, 138, 139, 140, 141, 142, 149, 153, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 259, 261, 262, 263, 265, 268, 269, 272, 277, 282, 284, 285, 286, 288, 289, 291, 295, 298, 299, 301, 308, 311, 312, 313, 315, 317, 318, 326, 347, 355, 359, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 458, 465, 466, 476, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 504, 506, 508, 509, 511, 512, 513, 518, 519, 521, 523, 551, 552, 555, 556, 562, 565, 568, 573], "current": [0, 9, 25, 48, 52, 55, 124, 125, 128, 144, 145, 146, 147, 148, 149, 158, 159, 160, 161, 165, 167, 176, 266, 267, 270, 271, 272, 276, 280, 283, 287, 296, 297, 310, 313, 358, 363, 364, 366, 367, 368, 370, 374, 405, 459, 469, 470, 518, 532, 536, 539, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 555, 558, 559, 562, 563, 564, 566, 568, 573, 575, 576, 582, 588, 589], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 61, 63, 64, 65, 66, 67, 68, 69, 76, 77, 81, 86, 87, 88, 89, 90, 92, 94, 98, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 145, 149, 156, 157, 159, 160, 162, 163, 166, 167, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 276, 277, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 309, 310, 311, 312, 313, 315, 317, 318, 326, 346, 347, 349, 351, 352, 353, 354, 355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 379, 380, 381, 385, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 425, 426, 428, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 458, 459, 460, 465, 466, 467, 469, 470, 471, 476, 477, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 519, 551, 553, 555, 561, 562, 564, 565, 566, 568, 573], "includ": [0, 1, 4, 8, 9, 13, 18, 21, 22, 25, 27, 30, 31, 32, 36, 41, 44, 45, 53, 54, 56, 75, 76, 77, 88, 89, 91, 203, 282, 326, 362, 366, 367, 370, 374, 376, 377, 380, 381, 405, 426, 428, 459, 486, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 530, 532, 535, 541, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 568, 575, 576, 579, 580, 582, 584, 587, 588, 589], "creation": [0, 8, 25, 31, 48, 548, 551, 552, 555, 557, 559, 562, 563, 564, 565, 568, 582, 584, 588], "constant": [0, 8, 15, 16, 31, 38, 39, 53, 55, 56, 366, 372, 374, 375, 437, 465, 478, 532, 558, 563, 565, 572, 573, 576], "appear": [0, 327, 366, 367, 542, 543, 545, 562, 566], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 51, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67, 68, 69, 76, 77, 87, 92, 94, 98, 110, 111, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 149, 156, 157, 159, 160, 162, 163, 166, 167, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 276, 277, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 298, 299, 300, 301, 304, 306, 307, 309, 311, 312, 313, 315, 317, 318, 322, 325, 326, 346, 347, 349, 351, 352, 353, 354, 355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 380, 381, 386, 387, 388, 389, 395, 396, 399, 400, 401, 406, 407, 409, 410, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 458, 459, 460, 465, 466, 467, 469, 470, 471, 472, 476, 477, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 516, 518, 532, 537, 541, 542, 546, 549, 551, 553, 557, 558, 561, 562, 564, 565, 566], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 56, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 359, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 380, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 414, 416, 417, 418, 419, 421, 425, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 465, 468, 471, 472, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 532, 537, 539, 541, 542, 543, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 570, 571, 572, 573, 574, 576, 577, 583], "nativ": [0, 1, 3, 4, 6, 9, 26, 29, 32, 47, 51, 91, 108, 109, 115, 116, 117, 118, 119, 120, 133, 136, 154, 155, 156, 157, 166, 173, 176, 286, 288, 291, 297, 316, 362, 363, 364, 366, 367, 515, 518, 523, 532, 551, 555, 559, 561, 562, 563, 564, 568, 570, 571, 577, 580, 589], "e": [0, 4, 8, 13, 17, 19, 20, 21, 23, 31, 36, 40, 43, 44, 46, 47, 81, 89, 90, 109, 137, 153, 177, 184, 188, 190, 192, 199, 201, 202, 206, 212, 214, 221, 222, 227, 230, 360, 362, 363, 364, 365, 366, 370, 372, 374, 376, 378, 379, 380, 401, 411, 412, 414, 417, 420, 421, 428, 438, 446, 462, 466, 467, 468, 476, 477, 484, 485, 486, 494, 495, 496, 497, 498, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 532, 535, 536, 537, 538, 541, 542, 543, 544, 545, 549, 555, 560, 562, 564, 568, 571, 576, 577, 578], "tf": [0, 1, 532, 546, 551, 552, 557, 561, 562, 564, 565, 566, 568, 573, 576, 577, 582], "after": [0, 1, 8, 9, 10, 12, 16, 25, 31, 32, 33, 35, 39, 57, 143, 235, 286, 346, 349, 351, 352, 353, 363, 364, 365, 366, 367, 368, 369, 374, 375, 385, 386, 387, 388, 390, 392, 394, 395, 470, 478, 532, 538, 541, 542, 543, 545, 548, 550, 551, 553, 555, 557, 560, 562, 564, 567, 582], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 149, 153, 154, 155, 156, 157, 158, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 270, 273, 277, 282, 284, 285, 286, 288, 289, 291, 292, 294, 298, 299, 309, 311, 312, 313, 314, 315, 316, 317, 318, 326, 327, 345, 346, 347, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 546, 549, 551, 552, 553, 555, 556, 557, 558, 561, 565, 566, 568, 573], "int": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 53, 64, 68, 69, 76, 77, 84, 86, 87, 88, 89, 92, 95, 96, 112, 119, 122, 123, 126, 132, 147, 163, 164, 165, 171, 172, 180, 186, 187, 188, 189, 190, 191, 237, 251, 261, 262, 263, 265, 268, 269, 277, 296, 298, 311, 327, 345, 346, 347, 351, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 401, 403, 404, 412, 413, 423, 425, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 462, 465, 466, 468, 470, 471, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 492, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 549, 551, 552, 553, 555, 556, 557, 558, 561, 563, 564, 565, 566, 568, 573], "iter": [0, 3, 9, 15, 23, 25, 32, 38, 46, 48, 171, 250, 294, 364, 366, 367, 372, 374, 437, 441, 448, 450, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 474, 475, 477, 536, 549, 568, 571], "For": [0, 4, 8, 13, 19, 31, 36, 51, 75, 90, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 194, 199, 200, 201, 212, 213, 214, 215, 216, 218, 227, 230, 231, 233, 234, 235, 238, 239, 240, 362, 365, 366, 370, 372, 378, 380, 419, 421, 425, 435, 446, 494, 495, 496, 497, 505, 507, 510, 534, 535, 536, 538, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 579, 580, 583, 588, 589], "jax": [0, 1, 8, 9, 19, 32, 254, 286, 313, 327, 366, 367, 378, 494, 495, 496, 497, 532, 535, 536, 540, 541, 542, 543, 545, 547, 551, 552, 555, 557, 560, 561, 562, 563, 564, 565, 566, 568, 570, 573, 576, 583, 585, 588, 589], "jit": [0, 568, 576, 582], "tupl": [0, 1, 3, 4, 5, 8, 9, 12, 13, 15, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 53, 55, 61, 63, 64, 65, 66, 67, 68, 69, 76, 77, 87, 91, 92, 94, 98, 111, 112, 113, 124, 125, 126, 130, 131, 136, 137, 143, 156, 159, 160, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 273, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 327, 345, 346, 347, 349, 351, 355, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 377, 378, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 405, 406, 407, 409, 410, 411, 412, 414, 416, 417, 418, 419, 421, 423, 424, 425, 428, 431, 432, 433, 435, 436, 437, 439, 440, 442, 443, 444, 445, 446, 449, 450, 456, 457, 458, 459, 460, 462, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 483, 484, 485, 486, 488, 491, 492, 494, 495, 496, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 546, 551, 555, 556, 557, 563, 564, 568, 571, 572, 576], "dict": [0, 1, 3, 9, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 51, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 126, 130, 131, 137, 156, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 261, 262, 263, 265, 266, 267, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 294, 298, 299, 311, 312, 313, 315, 317, 318, 326, 355, 359, 364, 366, 367, 374, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 471, 472, 476, 477, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 518, 519, 546, 549, 556, 571, 572, 577], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 143, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 302, 303, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 522, 523, 529, 530, 532, 542, 543, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 576, 583], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 302, 303, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 522, 523, 526, 529, 532, 538, 541, 542, 543, 544, 545, 546, 549, 552, 553, 554, 556, 557, 559, 561, 563, 564, 565, 566, 568, 570, 571, 582, 583, 586], "lazygraph": [0, 1], "modul": [0, 23, 25, 46, 48, 50, 51, 52, 54, 56, 58, 295, 366, 367, 518, 532, 536, 539, 542, 546, 547, 548, 555, 556, 558, 561, 562, 564, 568, 569, 571, 573, 575, 576, 582, 583, 585], "moduletyp": [0, 1], "A": [0, 1, 4, 5, 8, 9, 15, 17, 21, 22, 25, 28, 30, 31, 32, 36, 38, 40, 42, 45, 48, 52, 53, 58, 84, 91, 111, 154, 171, 224, 226, 229, 253, 284, 285, 311, 312, 315, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 376, 380, 381, 395, 404, 409, 410, 415, 416, 420, 421, 435, 438, 440, 444, 446, 459, 462, 464, 466, 467, 468, 469, 470, 474, 475, 476, 477, 483, 484, 485, 486, 488, 494, 504, 512, 513, 516, 518, 519, 523, 533, 534, 535, 536, 540, 541, 542, 544, 549, 551, 552, 555, 557, 558, 562, 563, 564, 568, 571, 576, 577, 582, 583], "non": [0, 1, 5, 8, 13, 17, 18, 21, 22, 28, 31, 36, 40, 41, 44, 45, 53, 55, 57, 110, 128, 136, 218, 219, 363, 365, 366, 370, 374, 376, 377, 380, 381, 402, 412, 414, 421, 423, 427, 428, 472, 485, 489, 490, 491, 492, 505, 506, 507, 508, 509, 511, 512, 513, 546, 549, 551, 553, 559, 568, 582], "initi": [0, 1, 12, 25, 35, 48, 51, 52, 54, 55, 57, 369, 397, 532, 535, 543, 547, 551, 552, 563, 564, 568, 582, 588, 589], "object": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 54, 55, 60, 62, 81, 85, 93, 114, 123, 126, 133, 136, 172, 222, 359, 362, 363, 364, 366, 367, 368, 374, 376, 462, 464, 466, 467, 468, 474, 475, 476, 477, 488, 515, 518, 519, 521, 522, 532, 546, 549, 550, 559, 562, 563, 564, 566, 570, 573, 582, 588], "forward": [0, 8, 31, 51, 53, 55, 57, 366, 532, 542, 547, 554, 560, 564, 565, 566, 573, 575, 576, 582, 583], "pass": [0, 1, 8, 23, 25, 31, 46, 48, 51, 55, 57, 58, 115, 136, 154, 171, 184, 286, 363, 364, 365, 366, 367, 373, 456, 457, 516, 518, 523, 532, 541, 543, 545, 546, 547, 549, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 576, 580], "same": [0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 15, 17, 19, 20, 21, 25, 27, 28, 30, 31, 33, 35, 36, 38, 40, 42, 44, 47, 54, 67, 75, 83, 87, 89, 90, 92, 94, 95, 96, 98, 110, 111, 112, 123, 126, 171, 177, 178, 179, 180, 181, 183, 187, 189, 192, 201, 224, 226, 230, 231, 232, 240, 292, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 404, 405, 406, 407, 409, 411, 413, 415, 416, 417, 418, 420, 421, 425, 427, 436, 439, 440, 442, 443, 445, 446, 456, 457, 472, 486, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 532, 534, 536, 538, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573, 576, 579, 581, 588, 589], "copi": [0, 1, 4, 5, 6, 8, 9, 15, 25, 27, 28, 29, 31, 32, 38, 76, 77, 81, 85, 110, 172, 311, 317, 318, 362, 363, 364, 366, 367, 372, 374, 379, 438, 439, 440, 442, 444, 445, 447, 449, 460, 500, 542, 543, 545, 547, 550, 551, 554, 562, 563, 568, 575, 576], "everi": [0, 1, 4, 8, 9, 31, 32, 86, 87, 250, 362, 366, 367, 538, 541, 543, 545, 547, 548, 549, 550, 551, 553, 557, 558, 559, 561, 562, 563, 564, 565, 568, 570, 572, 582], "method": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 123, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 354, 355, 356, 358, 362, 363, 365, 366, 367, 368, 370, 371, 374, 377, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 470, 471, 472, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 523, 541, 543, 545, 546, 550, 551, 553, 554, 556, 557, 558, 559, 564, 565, 568, 569, 572, 573, 576, 583, 589], "To": [0, 1, 53, 305, 367, 538, 542, 545, 546, 548, 549, 551, 553, 555, 556, 558, 562, 563, 564, 565, 571, 572, 573], "you": [0, 1, 8, 9, 31, 32, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 268, 269, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "need": [0, 1, 8, 9, 15, 31, 32, 38, 256, 257, 286, 366, 367, 370, 372, 374, 405, 435, 438, 470, 532, 536, 538, 539, 541, 542, 543, 545, 546, 548, 549, 550, 551, 553, 554, 555, 558, 560, 561, 562, 563, 565, 566, 568, 570, 571, 575, 576, 578, 582, 583, 584, 588], "correspond": [0, 1, 5, 7, 8, 9, 12, 15, 18, 19, 21, 25, 28, 30, 31, 35, 38, 44, 48, 60, 62, 111, 123, 126, 184, 227, 311, 327, 359, 363, 365, 366, 367, 369, 370, 372, 376, 377, 378, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 405, 406, 412, 419, 420, 443, 483, 489, 490, 494, 495, 496, 497, 502, 503, 508, 509, 510, 511, 518, 532, 541, 543, 546, 547, 549, 550, 551, 553, 554, 557, 558, 559, 560, 562, 564, 566, 568, 582], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 154, 156, 157, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 276, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 300, 304, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 462, 465, 466, 467, 468, 470, 471, 472, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 523, 545, 546, 547, 549, 551, 552, 553, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 576, 583, 586], "let": [0, 1, 9, 21, 32, 268, 269, 367, 380, 506, 509, 510, 511, 532, 536, 538, 546, 548, 549, 551, 552, 553, 554, 555, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 589], "start": [0, 1, 4, 25, 27, 52, 75, 88, 89, 362, 364, 366, 532, 537, 538, 541, 542, 543, 544, 550, 551, 553, 554, 557, 562, 564, 566, 567, 568, 570, 571, 572, 575, 576, 582, 588], "simpl": [0, 1, 264, 367, 532, 534, 541, 542, 543, 546, 548, 549, 551, 552, 553, 554, 558, 561, 562, 564, 565, 566, 570, 572, 573, 576, 577, 581, 582, 583, 584], "import": [0, 1, 19, 23, 27, 46, 154, 155, 159, 160, 168, 169, 364, 366, 378, 497, 523, 532, 535, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 560, 561, 562, 563, 564, 565, 568, 570, 571, 573, 576, 578, 580, 582, 585, 586, 588], "set_backend": [0, 1, 8, 23, 31, 125, 133, 154, 155, 168, 169, 363, 364, 366, 532, 545, 547, 551, 558, 559, 560, 568, 570, 573], "torch": [0, 1, 4, 9, 13, 23, 32, 36, 51, 81, 125, 154, 155, 168, 169, 231, 286, 313, 362, 363, 364, 365, 367, 370, 421, 518, 532, 542, 543, 545, 546, 547, 548, 550, 551, 552, 555, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 576, 577, 588], "def": [0, 1, 8, 31, 255, 367, 374, 465, 532, 541, 542, 545, 546, 549, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573], "fn": [0, 25, 28, 78, 79, 80, 124, 125, 159, 160, 251, 266, 267, 319, 362, 363, 364, 366, 367, 374, 465, 466, 467, 469, 470, 471, 516, 518, 526, 529, 530, 555, 562, 568], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 110, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 126, 127, 130, 131, 132, 137, 156, 157, 161, 165, 166, 167, 170, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 270, 273, 274, 275, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 302, 303, 305, 308, 309, 311, 313, 315, 317, 318, 319, 326, 327, 346, 347, 348, 350, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 522, 526, 532, 546, 547, 549, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573], "y": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 67, 68, 69, 81, 87, 88, 89, 90, 91, 92, 93, 94, 98, 110, 111, 112, 121, 123, 126, 137, 153, 157, 161, 165, 166, 167, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 256, 257, 260, 261, 263, 264, 265, 268, 269, 270, 278, 282, 284, 285, 286, 288, 289, 291, 292, 296, 302, 303, 305, 308, 309, 311, 313, 315, 317, 318, 319, 323, 326, 327, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 387, 389, 391, 394, 395, 396, 400, 401, 402, 407, 409, 411, 412, 414, 415, 416, 417, 419, 421, 422, 423, 425, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 465, 466, 468, 476, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 547, 549, 553, 560, 562, 563, 564, 565, 566, 568, 570], "z": [0, 4, 7, 8, 9, 13, 14, 17, 19, 21, 27, 30, 31, 32, 36, 37, 38, 40, 44, 47, 48, 53, 88, 89, 91, 92, 161, 180, 184, 186, 189, 191, 196, 204, 205, 207, 208, 209, 210, 211, 216, 217, 219, 220, 221, 222, 237, 253, 265, 268, 269, 284, 285, 299, 309, 311, 319, 327, 362, 364, 365, 366, 367, 370, 371, 372, 374, 376, 377, 378, 380, 401, 411, 416, 417, 421, 428, 431, 432, 433, 435, 462, 466, 468, 476, 484, 485, 486, 489, 494, 504, 505, 507, 508, 509, 532, 547, 549, 553, 568, 570], "k": [0, 4, 8, 12, 13, 17, 27, 30, 31, 35, 36, 40, 84, 95, 96, 217, 253, 362, 366, 367, 369, 370, 374, 376, 377, 399, 403, 411, 412, 418, 420, 421, 422, 425, 467, 484, 485, 486, 492, 532, 544, 545, 562, 563, 568, 578, 582], "j": [0, 4, 8, 13, 21, 27, 30, 31, 36, 92, 217, 253, 362, 366, 367, 370, 380, 405, 425, 504, 543, 544, 578], "concat": [0, 9, 15, 25, 38, 171, 265, 364, 367, 372, 450, 563, 566, 568], "sum_j": 0, "sum": [0, 1, 7, 8, 9, 12, 13, 14, 21, 25, 30, 31, 32, 35, 36, 37, 44, 47, 48, 53, 171, 180, 216, 237, 262, 298, 299, 364, 365, 366, 367, 369, 370, 371, 380, 395, 399, 412, 421, 425, 428, 432, 433, 503, 504, 532, 549, 551, 558, 560, 561, 562, 568], "1": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 110, 111, 112, 113, 121, 122, 123, 126, 131, 132, 137, 156, 157, 161, 164, 165, 167, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 270, 273, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 296, 298, 299, 309, 311, 312, 313, 315, 317, 318, 319, 327, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 471, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 523, 532, 535, 536, 542, 543, 545, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 576], "2": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 53, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 110, 111, 112, 113, 121, 123, 131, 132, 137, 156, 157, 158, 161, 163, 165, 167, 169, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 270, 273, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 296, 298, 299, 309, 311, 313, 315, 319, 327, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 542, 543, 545, 547, 548, 549, 550, 551, 553, 555, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 572, 573, 576, 588, 589], "3": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 84, 87, 88, 90, 91, 92, 93, 94, 97, 98, 110, 111, 112, 113, 121, 123, 131, 132, 137, 154, 156, 157, 167, 169, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 298, 299, 309, 311, 315, 318, 319, 327, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 425, 426, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 532, 542, 545, 546, 547, 548, 549, 551, 553, 555, 560, 563, 564, 566, 568, 570, 571, 572, 573, 589], "4": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 57, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 84, 87, 88, 89, 90, 91, 92, 94, 98, 111, 112, 113, 121, 123, 126, 131, 132, 137, 157, 158, 165, 169, 172, 177, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 260, 261, 262, 263, 265, 268, 269, 273, 282, 284, 285, 286, 292, 298, 299, 311, 313, 315, 319, 327, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 425, 426, 428, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 532, 536, 541, 542, 547, 549, 550, 553, 560, 563, 564, 566, 568, 570, 571, 572, 573, 582, 588, 589], "compiled_fn": 0, "In": [0, 1, 6, 9, 15, 29, 32, 38, 166, 172, 173, 176, 180, 230, 251, 286, 364, 365, 366, 367, 370, 372, 376, 419, 442, 486, 532, 534, 536, 538, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 570, 571, 572, 573, 575, 576, 578, 580, 582, 583, 585, 588], "case": [0, 1, 3, 4, 8, 9, 15, 21, 25, 32, 38, 48, 54, 55, 57, 90, 154, 166, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 199, 200, 201, 212, 213, 214, 215, 216, 218, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 286, 298, 299, 362, 364, 365, 366, 367, 370, 372, 374, 380, 419, 442, 462, 468, 505, 506, 507, 509, 510, 511, 532, 535, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573, 576, 581, 585], "would": [0, 6, 8, 15, 29, 31, 38, 64, 68, 172, 359, 364, 366, 372, 442, 532, 535, 537, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 556, 557, 559, 561, 562, 563, 564, 566, 567, 568, 570, 572, 573, 576, 582, 588], "can": [0, 1, 4, 5, 8, 13, 15, 17, 19, 27, 28, 31, 36, 38, 40, 42, 76, 77, 89, 91, 113, 154, 169, 170, 171, 292, 327, 347, 362, 363, 364, 366, 367, 368, 370, 372, 376, 404, 411, 421, 425, 442, 446, 484, 485, 486, 494, 518, 523, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 588, 589], "observ": [0, 8, 31, 543, 555, 568, 584], "As": [0, 1, 19, 23, 46, 378, 494, 495, 496, 497, 532, 534, 543, 546, 548, 549, 550, 551, 552, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 570, 571, 572, 576, 582, 587], "variabl": [0, 8, 9, 10, 16, 25, 31, 32, 33, 39, 51, 52, 53, 54, 55, 56, 57, 58, 254, 286, 287, 288, 289, 291, 313, 346, 347, 349, 351, 352, 353, 366, 367, 368, 369, 370, 373, 375, 398, 420, 456, 457, 458, 478, 518, 523, 543, 547, 551, 554, 556, 557, 560, 561, 564, 565, 568, 571, 572, 573, 576, 583], "calcul": [0, 7, 8, 14, 21, 25, 30, 31, 36, 37, 44, 48, 53, 177, 178, 179, 180, 181, 182, 183, 184, 193, 194, 196, 199, 200, 212, 213, 214, 215, 216, 221, 222, 223, 227, 233, 234, 235, 237, 238, 239, 292, 365, 366, 367, 370, 371, 380, 407, 416, 419, 431, 432, 433, 505, 506, 507, 508, 509, 510, 511, 535, 541, 554, 568], "valu": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 52, 53, 54, 55, 56, 57, 62, 69, 75, 84, 86, 87, 88, 89, 92, 110, 127, 131, 136, 170, 171, 177, 178, 179, 180, 181, 183, 184, 192, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 235, 236, 237, 239, 240, 241, 254, 255, 256, 257, 258, 260, 265, 268, 269, 273, 275, 278, 279, 284, 285, 286, 292, 298, 299, 302, 303, 305, 313, 318, 323, 326, 327, 345, 346, 347, 351, 354, 356, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 403, 412, 413, 414, 417, 418, 419, 420, 421, 422, 428, 435, 436, 437, 441, 442, 450, 456, 457, 461, 463, 464, 465, 466, 467, 472, 476, 477, 478, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 516, 518, 522, 542, 543, 545, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 564, 566, 568, 570, 576, 582, 583], "wa": [0, 1, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 319, 326, 349, 355, 364, 366, 367, 374, 380, 381, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 535, 543, 545, 550, 553, 560, 562, 568, 570, 581, 582, 584], "like": [0, 1, 4, 8, 15, 27, 31, 38, 89, 114, 136, 362, 363, 366, 370, 372, 376, 405, 442, 486, 532, 535, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 582, 587], "were": [0, 25, 28, 126, 130, 131, 543, 551, 555, 556, 560, 564, 565, 566, 568, 582, 583, 588], "exclud": [0, 21, 44, 75, 362, 366, 376, 486, 502, 553, 568], "process": [0, 166, 176, 364, 535, 536, 537, 542, 543, 549, 550, 558, 560, 562, 563, 564, 566, 568, 573, 580, 581, 582, 585, 586, 588, 589], "tensor": [0, 1, 4, 7, 8, 9, 12, 15, 17, 25, 27, 30, 31, 32, 35, 36, 38, 40, 54, 81, 88, 89, 92, 121, 136, 221, 222, 298, 299, 362, 363, 365, 366, 367, 369, 370, 372, 376, 395, 397, 410, 423, 444, 483, 532, 534, 546, 547, 551, 552, 557, 558, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 576, 577, 579, 580, 583, 585, 586, 589], "shape": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 53, 54, 56, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 167, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 265, 268, 269, 277, 286, 292, 298, 299, 306, 314, 316, 324, 327, 345, 346, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 498, 500, 502, 503, 504, 506, 508, 509, 511, 512, 513, 515, 518, 532, 543, 549, 551, 552, 553, 554, 557, 561, 562, 563, 564, 565, 568, 570, 571, 572, 573], "indic": [0, 4, 8, 9, 12, 13, 15, 16, 18, 19, 20, 25, 27, 28, 31, 32, 35, 36, 38, 39, 41, 42, 43, 52, 54, 55, 76, 77, 92, 126, 130, 131, 232, 253, 268, 269, 273, 298, 299, 327, 347, 362, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 378, 379, 386, 388, 389, 390, 391, 394, 428, 442, 443, 459, 462, 464, 466, 467, 468, 470, 474, 475, 476, 477, 478, 483, 489, 490, 491, 492, 494, 496, 498, 499, 500, 518, 519, 526, 530, 550, 556, 557, 560, 562, 573], "trace": [0, 1, 9, 13, 25, 32, 36, 280, 288, 289, 291, 301, 307, 321, 325, 367, 370, 532, 545, 551, 568, 576, 577, 583, 588], "doesn": [0, 286, 367, 542, 547, 548, 549, 550, 551, 553, 560, 564, 566, 568, 576, 580], "impos": 0, "addit": [0, 6, 8, 9, 16, 29, 31, 32, 39, 54, 172, 180, 231, 261, 262, 263, 327, 364, 365, 367, 375, 478, 541, 542, 543, 547, 549, 551, 553, 554, 560, 562, 564, 565, 566, 570, 571, 573, 582, 583, 584, 588], "restrict": [0, 549, 550, 562, 568, 579], "datatyp": [0, 4, 25, 27, 77, 87, 91, 115, 135, 139, 362, 363, 516, 565], "out": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 110, 112, 121, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 252, 256, 257, 261, 262, 263, 265, 268, 269, 286, 294, 298, 299, 345, 346, 349, 351, 352, 353, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 488, 489, 490, 491, 493, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 523, 532, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "differ": [0, 1, 7, 8, 9, 21, 25, 31, 32, 44, 47, 48, 55, 123, 180, 237, 268, 269, 363, 365, 366, 367, 369, 370, 372, 380, 395, 396, 419, 436, 446, 502, 503, 508, 510, 511, 532, 534, 535, 536, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 576, 579, 580, 581, 582, 585, 588, 589], "b": [0, 7, 8, 9, 12, 16, 21, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 67, 68, 76, 77, 81, 84, 86, 87, 89, 92, 94, 98, 110, 111, 112, 113, 121, 131, 132, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 292, 298, 299, 311, 313, 317, 318, 326, 345, 346, 347, 349, 351, 353, 355, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 426, 428, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 465, 466, 467, 468, 470, 476, 477, 478, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 533, 536, 537, 544, 545, 547, 549, 550, 553, 558, 560, 563, 567, 568, 569, 571, 572, 573, 574, 578], "new": [0, 8, 9, 10, 15, 16, 25, 27, 31, 32, 33, 36, 38, 39, 42, 51, 54, 56, 57, 82, 85, 86, 87, 92, 93, 94, 97, 98, 143, 185, 224, 226, 229, 261, 262, 263, 265, 268, 269, 273, 298, 299, 302, 308, 311, 312, 317, 346, 349, 351, 352, 353, 362, 363, 365, 366, 367, 368, 372, 374, 375, 416, 438, 442, 446, 464, 476, 477, 478, 497, 532, 534, 535, 536, 537, 541, 542, 543, 544, 546, 547, 549, 550, 551, 553, 554, 556, 559, 561, 562, 563, 564, 565, 566, 567, 570, 573, 575, 577, 580, 584, 588, 589], "run": [0, 1, 8, 10, 31, 33, 54, 55, 345, 346, 351, 366, 368, 373, 456, 457, 458, 518, 519, 532, 538, 539, 541, 542, 544, 546, 547, 550, 553, 555, 556, 557, 558, 559, 562, 563, 568, 569, 570, 571, 572, 573, 575, 576, 580, 582, 583, 584, 585, 587, 588, 589], "under": [0, 1, 532, 541, 542, 543, 544, 545, 548, 549, 553, 554, 558, 562, 563, 564, 566, 567, 568, 571, 573, 576, 582, 585, 589], "hood": [0, 1, 532, 544, 549, 553, 558, 562, 564, 566, 567, 568, 571, 573, 589], "track": [0, 8, 31, 52, 55, 366, 368, 374, 471, 542, 543, 545, 560, 582], "befor": [0, 1, 8, 12, 13, 15, 19, 21, 25, 31, 35, 36, 52, 171, 364, 366, 369, 370, 372, 373, 374, 378, 380, 385, 386, 387, 388, 390, 392, 394, 398, 399, 411, 428, 436, 456, 457, 471, 494, 495, 496, 497, 502, 503, 508, 510, 541, 542, 543, 545, 546, 548, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 568, 571, 576, 582], "instead": [0, 1, 7, 30, 154, 230, 364, 365, 541, 542, 543, 545, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 566, 568, 570, 571, 576, 580, 582, 588, 589], "allow": [0, 1, 8, 31, 52, 55, 88, 294, 362, 366, 367, 379, 499, 532, 535, 538, 541, 543, 546, 550, 551, 555, 556, 558, 559, 560, 562, 563, 564, 566, 568, 570, 576, 577, 580, 582, 586, 587], "dynam": [0, 544, 551, 552, 561, 562, 568, 582, 586], "done": [0, 1, 370, 407, 540, 541, 542, 543, 545, 548, 550, 553, 556, 562, 564, 571, 582], "first": [0, 1, 4, 7, 8, 13, 15, 17, 18, 19, 21, 27, 30, 31, 32, 36, 38, 40, 42, 44, 47, 48, 53, 54, 55, 57, 88, 89, 135, 143, 156, 180, 184, 186, 188, 189, 190, 191, 197, 202, 203, 204, 205, 210, 211, 216, 217, 219, 220, 223, 225, 227, 237, 253, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 401, 404, 405, 406, 408, 411, 416, 418, 419, 421, 423, 427, 442, 443, 446, 447, 456, 457, 458, 459, 460, 469, 470, 472, 488, 489, 490, 494, 495, 496, 499, 502, 503, 518, 532, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 553, 557, 558, 559, 561, 562, 564, 566, 568, 570, 571, 573, 580, 582, 583, 587], "invok": [0, 1, 8, 366, 532], "onc": [0, 13, 17, 36, 40, 171, 364, 370, 376, 405, 406, 407, 421, 483, 536, 541, 542, 543, 549, 550, 551, 552, 553, 562, 564, 566, 568, 571, 576], "been": [0, 9, 17, 32, 40, 156, 231, 261, 262, 263, 364, 365, 367, 376, 483, 541, 543, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 564, 568, 570, 575, 576, 577, 582, 589], "directli": [0, 1, 374, 471, 532, 536, 543, 545, 546, 548, 549, 550, 551, 552, 554, 558, 559, 561, 562, 563, 565, 566, 568, 570, 572, 573, 575, 576, 586, 587, 588], "here": [0, 1, 231, 365, 532, 540, 541, 542, 543, 545, 548, 549, 550, 553, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 575, 576, 582, 583], "eager_graph": [0, 1, 532], "doe": [0, 8, 9, 15, 25, 31, 38, 191, 286, 365, 366, 367, 370, 372, 405, 444, 516, 535, 541, 543, 544, 547, 550, 551, 553, 554, 557, 558, 561, 562, 563, 564, 565, 566, 568, 570, 571, 576, 577, 578, 582, 583, 589], "lazy_graph": [0, 1, 532], "up": [0, 8, 31, 52, 292, 366, 367, 369, 395, 534, 535, 536, 537, 538, 541, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "enabl": [0, 8, 25, 48, 358, 366, 368, 532, 535, 542, 543, 546, 549, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 571, 573, 576, 577, 580, 581, 582, 583, 584, 585, 588, 589], "delai": [0, 543], "until": [0, 535, 543, 556, 565, 568, 576, 589], "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 123, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 268, 269, 286, 298, 299, 345, 346, 349, 351, 352, 353, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 533, 534, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "necessari": [0, 1, 8, 15, 31, 38, 366, 372, 442, 532, 542, 543, 546, 547, 549, 553, 559, 561, 562, 564, 566], "particularli": [0, 543, 571, 576, 580], "librari": [0, 6, 19, 29, 172, 200, 214, 218, 219, 364, 365, 370, 378, 380, 406, 407, 494, 495, 496, 497, 505, 506, 507, 509, 532, 534, 535, 536, 537, 539, 541, 542, 545, 566, 573, 574, 576, 577, 578, 579, 580, 582, 586, 589], "where": [0, 4, 7, 8, 9, 13, 15, 17, 18, 21, 22, 25, 27, 30, 31, 32, 36, 38, 40, 41, 44, 45, 53, 86, 87, 90, 92, 184, 199, 209, 214, 221, 222, 227, 286, 298, 327, 358, 362, 365, 366, 367, 368, 370, 372, 374, 376, 377, 380, 381, 405, 406, 410, 412, 414, 416, 417, 418, 421, 422, 425, 427, 435, 437, 438, 440, 446, 450, 470, 483, 484, 485, 486, 491, 492, 509, 511, 512, 513, 532, 534, 535, 536, 537, 542, 543, 545, 546, 547, 549, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 571, 572, 573, 576, 580, 589], "feasibl": [0, 535, 541, 550], "provid": [0, 1, 4, 8, 9, 13, 15, 18, 21, 22, 25, 27, 31, 32, 36, 38, 41, 44, 45, 54, 57, 60, 62, 90, 92, 116, 117, 118, 119, 120, 128, 137, 149, 156, 255, 260, 298, 299, 359, 362, 363, 364, 366, 367, 370, 372, 377, 380, 381, 413, 416, 427, 438, 439, 446, 489, 509, 511, 512, 513, 532, 534, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 564, 566, 570, 572, 575, 576, 580, 581, 582, 583, 584, 585, 586, 589], "valid": [0, 8, 12, 22, 31, 35, 45, 54, 115, 289, 363, 366, 367, 369, 372, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 438, 446, 512, 513, 542, 547, 551, 553, 560, 563, 564, 583], "look": [0, 532, 534, 538, 542, 543, 547, 548, 549, 551, 552, 553, 555, 557, 558, 562, 563, 564, 565, 566, 568, 570, 572, 573, 578, 582], "find": [0, 19, 25, 374, 378, 461, 494, 495, 496, 497, 532, 534, 537, 540, 541, 542, 543, 545, 548, 550, 560, 564, 566, 568, 571, 577], "abl": [0, 25, 542, 543, 545, 551, 558, 561, 562, 566, 568, 573, 585, 588], "through": [0, 8, 31, 55, 184, 365, 366, 374, 462, 468, 532, 537, 540, 541, 543, 544, 547, 548, 549, 550, 553, 555, 558, 559, 561, 562, 563, 564, 566, 567, 568, 571, 572, 573, 575, 580, 582, 583, 584], "flag": [0, 1, 25, 156, 364, 518, 523, 543, 551, 559, 561, 562, 563, 564], "reduc": [0, 8, 9, 13, 18, 21, 22, 25, 31, 32, 36, 41, 44, 45, 171, 262, 364, 366, 367, 370, 377, 380, 381, 418, 489, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 550, 555, 562, 566, 568, 570, 580, 584, 585, 586], "time": [0, 1, 8, 10, 13, 19, 31, 33, 42, 54, 55, 346, 351, 366, 368, 369, 370, 372, 373, 377, 378, 395, 397, 411, 448, 456, 457, 458, 489, 490, 494, 495, 534, 535, 536, 541, 542, 543, 547, 549, 550, 551, 553, 557, 558, 559, 561, 562, 564, 565, 568, 571, 573, 576, 580, 582, 583, 586, 587, 588], "comp_func": 0, "default": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 130, 131, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 156, 157, 159, 160, 163, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 255, 256, 257, 261, 262, 263, 265, 266, 267, 268, 269, 276, 277, 278, 279, 280, 282, 284, 285, 286, 288, 289, 291, 292, 294, 295, 298, 299, 305, 309, 311, 312, 313, 315, 317, 318, 326, 327, 345, 346, 347, 349, 351, 352, 353, 355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 465, 466, 467, 469, 470, 471, 472, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 523, 541, 542, 543, 547, 548, 551, 552, 553, 554, 555, 557, 558, 559, 562, 564, 566, 568, 572, 577, 582], "follow": [0, 8, 9, 10, 12, 13, 19, 25, 31, 32, 33, 35, 36, 54, 57, 126, 171, 230, 284, 285, 286, 311, 312, 346, 349, 351, 352, 353, 363, 364, 365, 366, 367, 368, 369, 370, 374, 378, 398, 399, 412, 418, 428, 465, 471, 494, 495, 496, 497, 532, 534, 535, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 579, 582, 585], "show": [0, 52, 280, 301, 307, 325, 367, 532, 541, 542, 543, 550, 553, 561, 562, 564, 575, 576, 582], "simpler": [0, 541, 543, 562, 583, 589], "obtain": [0, 562], "howev": [0, 13, 36, 370, 419, 421, 535, 541, 542, 543, 545, 546, 547, 549, 551, 552, 553, 554, 555, 557, 558, 561, 562, 563, 564, 566, 568, 570, 571, 572, 573, 576, 581, 582, 588], "desir": [0, 5, 6, 8, 18, 25, 28, 29, 31, 41, 53, 54, 110, 112, 113, 172, 363, 364, 366, 377, 491, 534, 543, 547, 550, 551, 562, 568, 582], "below": [0, 1, 4, 13, 36, 44, 95, 96, 209, 362, 365, 366, 370, 404, 425, 511, 532, 537, 541, 542, 544, 545, 549, 550, 551, 552, 553, 555, 556, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 578, 580, 585, 587], "ultim": 0, "trade": 0, "off": [0, 12, 13, 35, 36, 53, 369, 370, 395, 404, 425, 536, 542, 567, 588], "between": [0, 1, 8, 12, 13, 14, 15, 19, 25, 30, 31, 35, 37, 38, 48, 57, 75, 123, 184, 227, 362, 363, 365, 366, 369, 371, 372, 374, 376, 378, 395, 416, 431, 432, 433, 438, 446, 465, 484, 494, 495, 496, 497, 534, 546, 547, 549, 553, 557, 558, 559, 562, 563, 564, 566, 567, 569, 570, 571, 573, 575, 578, 579, 581, 582, 583, 588], "memori": [0, 4, 8, 15, 31, 38, 90, 155, 166, 171, 173, 176, 362, 364, 366, 369, 372, 397, 442, 532, 550, 551, 552, 561, 562, 566, 568, 574, 576, 582, 584, 585, 586], "store": [0, 5, 9, 13, 15, 25, 28, 32, 36, 38, 42, 55, 84, 94, 98, 112, 265, 362, 366, 367, 370, 372, 425, 444, 497, 518, 519, 539, 543, 546, 547, 549, 554, 559, 562, 568, 570, 571, 572, 577], "thei": [0, 8, 13, 17, 25, 36, 40, 58, 135, 363, 366, 370, 373, 376, 426, 456, 457, 483, 516, 532, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 561, 562, 564, 565, 566, 568, 570, 571, 572, 573, 576, 579, 582, 584, 585, 588, 589], "By": [0, 8, 15, 21, 22, 31, 38, 44, 45, 366, 370, 372, 380, 381, 427, 441, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 551, 553, 555, 558, 560, 561, 562, 568, 572, 573], "choos": [0, 6, 18, 19, 29, 172, 218, 219, 364, 365, 377, 378, 380, 493, 494, 495, 496, 497, 505, 506, 507, 509, 541, 542, 543, 564, 569, 573, 589], "node": [0, 1, 25, 32, 53, 254, 313, 374, 469, 470, 535, 548, 549, 562, 583], "bake": 0, "randint": [0, 12, 17, 19, 35, 40, 376, 378, 394, 397, 494, 551], "0": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 75, 81, 84, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 110, 111, 112, 113, 121, 123, 126, 127, 131, 132, 137, 153, 156, 158, 161, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 255, 256, 257, 260, 261, 262, 264, 265, 268, 269, 270, 273, 277, 278, 279, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 296, 298, 299, 305, 309, 311, 313, 315, 317, 318, 323, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 471, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 526, 532, 543, 545, 547, 549, 550, 551, 553, 554, 555, 560, 561, 562, 563, 564, 565, 568, 570, 571, 572, 573, 576], "100": [0, 4, 8, 27, 30, 31, 32, 89, 190, 235, 269, 285, 299, 362, 365, 366, 367, 370, 374, 409, 465, 532, 535, 536, 550, 564, 571, 572, 573, 576], "size": [0, 8, 9, 12, 13, 15, 17, 18, 25, 31, 32, 35, 36, 38, 40, 41, 47, 48, 54, 88, 169, 170, 171, 298, 362, 364, 366, 367, 369, 370, 372, 376, 377, 381, 399, 404, 408, 412, 416, 418, 421, 427, 438, 443, 444, 445, 483, 489, 492, 512, 513, 532, 563, 564, 566, 571], "rand": [0, 532], "And": [0, 28, 532, 548, 564], "final": [0, 1, 4, 9, 32, 54, 88, 89, 265, 362, 367, 541, 543, 545, 546, 548, 550, 551, 553, 554, 556, 558, 560, 561, 562, 566, 567, 571, 578, 588], "__setattr__": [0, 549], "__getattr__": [0, 549], "arbitrari": [0, 1, 4, 5, 8, 25, 28, 90, 111, 137, 347, 362, 363, 368, 549, 557, 558, 560, 561, 562, 564, 572, 576, 583, 588], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 94, 98, 123, 126, 138, 140, 141, 252, 254, 261, 286, 294, 313, 362, 363, 364, 366, 367, 368, 369, 374, 377, 378, 397, 399, 405, 416, 459, 460, 471, 492, 496, 497, 508, 509, 515, 518, 519, 521, 522, 523, 532, 541, 548, 549, 551, 552, 553, 554, 557, 560, 563, 564, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 580, 582, 583, 589], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 54, 55, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 121, 123, 126, 129, 130, 131, 132, 134, 137, 157, 159, 160, 161, 165, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 256, 257, 261, 262, 263, 264, 265, 268, 269, 276, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 304, 305, 311, 312, 313, 315, 317, 318, 322, 326, 327, 345, 346, 347, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 462, 466, 467, 468, 472, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 522, 523, 532, 534, 538, 539, 541, 542, 544, 545, 546, 548, 550, 551, 553, 554, 557, 558, 559, 560, 561, 564, 566, 567, 568, 569, 572, 576, 577, 582, 583, 588], "cont_deep_copi": [0, 25, 571], "some": [0, 1, 25, 33, 54, 200, 214, 345, 346, 349, 351, 352, 353, 364, 365, 366, 368, 374, 470, 532, 535, 536, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 572, 575, 576, 577, 578, 579, 581, 582, 583, 588, 589], "still": [0, 1, 13, 25, 36, 370, 421, 535, 541, 543, 546, 551, 554, 555, 561, 562, 564, 566, 572, 576, 579, 582, 588], "develop": [0, 1, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 548, 550, 565, 575, 576, 577, 580, 581, 582, 583, 584, 587, 588, 589], "account": [0, 8, 15, 31, 38, 53, 366, 372, 442, 542, 550, 554, 562], "point": [0, 5, 7, 8, 13, 17, 19, 21, 28, 30, 31, 36, 40, 44, 75, 76, 77, 82, 84, 86, 93, 97, 110, 123, 127, 131, 137, 178, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 196, 199, 200, 201, 212, 213, 214, 215, 216, 227, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 360, 362, 363, 365, 366, 370, 376, 378, 379, 380, 400, 402, 405, 406, 407, 409, 412, 413, 414, 417, 418, 419, 420, 421, 425, 428, 485, 486, 494, 495, 496, 497, 499, 502, 503, 505, 506, 507, 508, 509, 510, 511, 536, 541, 542, 543, 545, 546, 548, 550, 553, 554, 557, 561, 562, 564, 565, 566, 568, 570, 571, 575, 588], "wip": 0, "ll": [0, 1, 532, 536, 537, 542, 543, 548, 553, 560, 561, 571], "soon": [0, 543, 550, 551, 574, 576], "control": [0, 8, 31, 52, 366, 370, 403, 549, 551, 560, 561, 562, 563, 566, 570, 571, 575, 577, 582, 588], "flow": [0, 549, 575, 582, 583], "built": [0, 54, 55, 75, 362, 532, 542, 543, 548, 549, 564, 569, 577, 581, 582, 586], "moment": [0, 1, 10, 33, 57, 345, 346, 351, 368, 541, 547, 576], "condit": [0, 18, 31, 41, 366, 374, 377, 469, 470, 493, 545, 551, 553, 555, 558, 559, 561, 575], "branch": [0, 184, 365, 543, 545, 550, 576, 582], "loop": [0, 23, 46, 373, 456, 457, 458, 532, 547, 556, 576], "regist": [0, 543], "correctli": [0, 1, 8, 13, 18, 31, 36, 41, 366, 370, 377, 412, 489, 541, 542, 543, 546, 549, 551, 553, 555, 556, 557, 561, 563, 564, 566, 572, 576], "while": [0, 8, 12, 25, 31, 35, 48, 92, 136, 218, 219, 362, 363, 365, 366, 369, 378, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 494, 506, 509, 519, 534, 535, 541, 542, 543, 546, 547, 548, 550, 551, 553, 556, 557, 558, 560, 561, 562, 563, 564, 566, 570, 572, 573, 576, 582, 588, 589], "your": [0, 1, 532, 535, 536, 537, 538, 540, 541, 542, 545, 548, 550, 554, 560, 565, 566, 571, 572, 576, 582], "depend": [0, 4, 5, 9, 13, 19, 20, 28, 36, 43, 44, 81, 110, 177, 178, 179, 181, 182, 183, 184, 193, 194, 199, 200, 212, 213, 214, 215, 227, 233, 234, 238, 239, 313, 362, 363, 365, 366, 367, 370, 377, 379, 405, 406, 418, 419, 420, 421, 493, 498, 500, 511, 532, 535, 538, 539, 541, 542, 543, 548, 551, 554, 559, 561, 562, 563, 564, 566, 568, 576, 580, 582, 583], "chang": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 366, 372, 374, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 417, 418, 419, 421, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 460, 471, 476, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 518, 532, 536, 538, 541, 542, 543, 545, 547, 548, 549, 550, 551, 553, 554, 562, 563, 564, 565, 566, 568, 572, 576, 585, 588], "number": [0, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 21, 22, 25, 27, 28, 30, 31, 32, 35, 36, 38, 40, 41, 42, 44, 45, 47, 48, 52, 53, 54, 75, 84, 87, 88, 89, 90, 91, 92, 111, 116, 117, 118, 119, 120, 122, 123, 126, 129, 130, 131, 132, 134, 137, 163, 164, 165, 180, 184, 192, 196, 201, 202, 209, 221, 222, 227, 230, 231, 232, 240, 265, 274, 277, 296, 311, 312, 318, 326, 327, 360, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 376, 377, 378, 380, 381, 385, 392, 393, 395, 398, 405, 406, 407, 414, 419, 421, 426, 427, 435, 437, 438, 440, 441, 443, 444, 446, 448, 450, 456, 457, 458, 483, 487, 492, 494, 495, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 518, 523, 532, 533, 534, 542, 543, 549, 550, 551, 552, 553, 560, 561, 564, 566, 568, 571], "underli": [0, 8, 15, 31, 38, 186, 189, 191, 220, 365, 366, 370, 372, 419, 442, 549, 566, 582], "piec": [0, 543, 546, 558, 559, 568, 578, 580], "insid": [0, 48, 366, 519, 542, 543, 546, 549, 551, 559, 564, 565, 588], "said": [0, 536], "other": [0, 1, 5, 8, 9, 15, 21, 25, 28, 30, 31, 32, 38, 44, 47, 48, 75, 92, 111, 136, 200, 214, 222, 250, 251, 362, 363, 365, 366, 367, 376, 380, 436, 446, 486, 509, 511, 532, 535, 538, 541, 542, 543, 545, 546, 549, 550, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 588, 589], "numpi": [0, 1, 8, 9, 21, 31, 32, 133, 154, 254, 286, 311, 313, 317, 363, 364, 366, 367, 380, 504, 516, 518, 532, 534, 535, 540, 541, 542, 543, 545, 546, 547, 550, 551, 552, 555, 557, 561, 563, 564, 565, 566, 568, 570, 573, 577, 584, 589], "len": [0, 4, 8, 13, 31, 36, 90, 362, 366, 370, 426, 532, 549, 550, 561, 562, 564, 570, 573], "incorrectli": [0, 554], "There": [0, 532, 534, 541, 542, 543, 545, 546, 548, 549, 551, 553, 555, 556, 558, 560, 562, 563, 568, 571, 576, 583, 584, 588, 589], "succe": [0, 542], "hide": 0, "shouldn": [0, 565], "realli": [0, 542, 549, 576, 587, 588], "check": [0, 3, 5, 9, 25, 28, 32, 52, 114, 115, 124, 125, 128, 130, 131, 134, 149, 159, 160, 166, 176, 254, 264, 266, 267, 276, 282, 288, 289, 290, 291, 304, 313, 322, 326, 363, 364, 366, 367, 370, 374, 406, 407, 459, 460, 469, 470, 471, 516, 532, 539, 540, 541, 542, 543, 545, 549, 550, 553, 555, 558, 559, 562, 563, 564, 565, 567, 568, 570, 571, 572], "recommend": [0, 218, 219, 230, 365, 380, 506, 509, 542, 543, 547, 548, 560], "nois": [0, 1, 532], "anoth": [0, 1, 85, 111, 113, 362, 363, 532, 535, 541, 542, 543, 548, 549, 551, 555, 558, 559, 561, 562, 564, 566, 568, 570, 573, 577, 582, 588], "right": [0, 13, 25, 36, 48, 188, 190, 261, 365, 366, 367, 370, 379, 421, 426, 499, 537, 542, 543, 544, 545, 553, 566, 571], "feel": [0, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "free": [0, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 538, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "open": [0, 1, 17, 40, 75, 362, 376, 484, 486, 532, 534, 535, 536, 537, 542, 543, 548, 551, 554, 562, 563, 566, 575, 580, 581, 582, 584, 585], "issu": [0, 53, 536, 537, 540, 541, 542, 545, 547, 550, 551, 553, 555, 562, 564, 565, 568, 572, 576], "minim": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 366, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 417, 418, 419, 421, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 554, 561, 563, 566, 568, 580, 588], "resnet50": 0, "hug": 0, "face": [0, 542, 560, 566, 568, 582, 588], "classifi": [0, 1, 532], "breed": 0, "cat": [0, 1, 563, 566, 568, 573], "transform": [0, 1, 8, 12, 31, 35, 366, 369, 396, 532, 564, 573, 575, 577, 580, 582, 583, 584], "autoimageprocessor": [0, 1], "resnetforimageclassif": [0, 1], "dataset": [0, 1, 25, 532, 571, 574], "load_dataset": [0, 1], "download": [0, 1, 542, 564], "imag": [0, 1, 8, 12, 31, 35, 261, 366, 367, 369, 385, 386, 387, 388, 389, 392, 393, 394, 532, 538, 542, 565, 566, 568, 569, 571, 573, 575, 582], "huggingfac": [0, 1], "test": [0, 1, 7, 8, 22, 30, 31, 45, 129, 132, 206, 207, 208, 209, 292, 363, 365, 366, 367, 381, 512, 513, 516, 519, 532, 536, 540, 541, 544, 548, 551, 553, 555, 556, 559, 562, 565, 576, 582], "image_processor": [0, 1], "from_pretrain": [0, 1], "microsoft": [0, 1, 535, 582, 587, 589], "resnet": [0, 1], "50": [0, 1, 8, 21, 30, 31, 32, 195, 228, 263, 269, 284, 285, 299, 311, 365, 366, 367, 370, 374, 377, 380, 409, 416, 460, 462, 492, 504, 560, 570], "preprocess": 0, "return_tensor": [0, 1], "pt": 0, "normal": [0, 8, 16, 17, 31, 39, 40, 53, 56, 366, 372, 375, 376, 436, 446, 478, 483, 485, 532, 541, 562, 566, 571, 580], "feed": [0, 171, 364, 582, 583], "itself": [0, 8, 251, 319, 366, 367, 374, 471, 534, 542, 543, 545, 548, 549, 550, 555, 561, 562, 572, 575, 576, 581, 582, 583, 588], "without": [0, 19, 25, 278, 305, 319, 367, 372, 374, 378, 442, 460, 494, 495, 496, 497, 543, 546, 549, 550, 551, 552, 553, 555, 556, 557, 558, 562, 564, 565, 566, 570, 571, 572, 575, 576, 579, 582, 583, 584, 588], "pytorch": [0, 1, 57, 231, 365, 532, 535, 536, 540, 541, 546, 551, 552, 555, 557, 558, 561, 562, 563, 565, 566, 568, 573, 576, 577, 583, 585, 586, 588, 589], "no_grad": 0, "logit": [0, 8, 14, 31, 37, 366, 371, 433, 532], "With": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 21, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 76, 77, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 110, 111, 112, 113, 115, 121, 122, 123, 126, 132, 137, 138, 139, 140, 141, 154, 157, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 250, 254, 255, 256, 257, 260, 261, 262, 263, 264, 268, 269, 277, 282, 284, 285, 286, 298, 299, 311, 313, 315, 317, 318, 326, 327, 345, 346, 347, 349, 350, 351, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 407, 409, 411, 412, 413, 414, 415, 419, 421, 422, 423, 425, 426, 431, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 535, 536, 542, 553, 559, 562, 564, 566, 568, 582, 585], "compiled_graph": 0, "our": [0, 23, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 553, 555, 556, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 576, 587, 588], "predicted_label": 0, "argmax": [0, 18, 41, 377, 532, 562], "item": [0, 3, 9, 23, 25, 31, 32, 55, 117, 156, 258, 268, 269, 279, 311, 312, 356, 363, 364, 367, 368, 374, 464, 465, 466, 467, 471, 476, 477, 532, 541, 549, 551, 568, 570, 571, 573], "config": [0, 25, 374, 472, 538, 542, 545, 548, 550, 571, 583], "id2label": 0, "compil": [1, 55, 57, 518, 523, 532, 549, 562, 565, 566, 567, 569, 576, 577, 578, 581, 582, 583, 586, 589], "convert": [1, 3, 4, 7, 26, 27, 30, 76, 77, 91, 108, 109, 153, 154, 155, 156, 166, 173, 176, 195, 228, 300, 314, 316, 317, 318, 320, 362, 363, 364, 365, 366, 367, 370, 374, 429, 460, 471, 472, 518, 532, 536, 541, 546, 559, 560, 562, 564, 568, 576, 577, 580, 581, 588], "written": [1, 532, 534, 542, 545, 546, 548, 554, 557, 561, 562, 565, 568, 570, 573, 576, 580, 582, 586, 588, 589], "choic": [1, 21, 44, 380, 509, 511, 532, 536, 542, 561, 562, 571, 582], "preserv": [1, 8, 9, 10, 25, 31, 32, 33, 48, 286, 355, 366, 367, 368, 372, 439, 564, 573, 576], "logic": [1, 22, 45, 163, 217, 218, 219, 364, 365, 381, 512, 513, 541, 546, 550, 551, 552, 555, 559, 560, 562, 564, 566, 570], "target": [1, 55, 155, 364, 532, 542, 544, 563, 565, 567, 571, 572, 573, 578, 580, 581, 582, 585, 587, 588], "optim": [1, 10, 33, 53, 252, 353, 367, 368, 373, 456, 457, 458, 532, 536, 561, 569, 571, 573, 575, 580, 581, 582, 583, 584, 585, 586, 589], "tool": [1, 532, 533, 536, 543, 553, 569, 573, 575, 576, 580, 581, 582, 583, 585, 588, 589], "make": [1, 532, 535, 536, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 580, 582, 583, 584, 585, 588, 589], "ml": [1, 532, 533, 535, 536, 537, 540, 562, 567, 568, 569, 571, 572, 573, 575, 578, 579, 580, 581, 582, 585, 587, 589], "relat": [1, 364, 532, 538, 540, 542, 543, 555, 556, 562, 564, 565, 566, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "project": [1, 532, 534, 535, 536, 539, 542, 543, 546, 547, 548, 564, 572, 575, 576, 578, 580, 582, 585, 589], "independ": [1, 8, 17, 31, 40, 366, 370, 376, 401, 420, 483, 532, 545, 551, 553, 559, 568, 573, 580], "want": [1, 8, 23, 46, 52, 55, 366, 532, 535, 537, 539, 541, 542, 543, 548, 550, 555, 558, 559, 560, 561, 564, 566, 571, 572, 573, 576], "research": [1, 532, 534, 575, 582, 589], "deploi": [1, 532, 550, 577, 580, 581, 582, 584, 588], "system": [1, 370, 420, 532, 542, 543, 547, 550, 551, 576, 580, 582, 585, 587, 589], "build": [1, 19, 54, 55, 378, 494, 495, 496, 497, 532, 535, 537, 538, 542, 544, 550, 551, 558, 560, 567, 569, 572, 573, 576, 577, 580, 582, 584, 587, 588, 589], "block": [1, 358, 364, 366, 368, 532, 543, 546, 549, 555, 556, 558, 564, 567, 569, 573, 576, 577, 587, 589], "neural": [1, 50, 54, 369, 532, 575, 578, 580, 581, 582, 586, 588, 589], "network": [1, 50, 52, 53, 54, 55, 369, 396, 532, 535, 549, 558, 568, 572, 575, 578, 580, 581, 582, 586, 588, 589], "layer": [1, 8, 16, 31, 39, 52, 53, 55, 56, 57, 58, 375, 397, 398, 478, 532, 534, 548, 554, 562, 565, 566, 568, 569, 572, 580, 582, 586, 589], "activ": [1, 8, 9, 23, 31, 46, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 313, 366, 532, 538, 542, 543, 565, 572, 582, 585], "train": [1, 8, 10, 12, 31, 33, 35, 53, 345, 346, 351, 366, 368, 369, 395, 532, 536, 549, 552, 558, 571, 572, 573, 574, 575, 576, 577, 580, 581, 586, 588, 589], "pipelin": [1, 532, 534, 539, 544, 545, 546, 563, 573, 577, 582, 583, 588], "publish": [1, 532, 536, 576], "ex": [1, 523, 550], "haiku": [1, 51, 532, 536, 573, 582], "get": [1, 6, 13, 25, 29, 36, 42, 52, 53, 54, 121, 122, 123, 126, 156, 157, 158, 161, 166, 170, 173, 176, 252, 270, 271, 272, 274, 275, 276, 278, 280, 281, 297, 310, 359, 363, 364, 367, 370, 374, 428, 461, 497, 532, 536, 537, 540, 541, 542, 544, 548, 550, 551, 552, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 577, 582, 588], "access": [1, 25, 541, 542, 543, 550, 551, 562, 582, 584, 586], "latest": [1, 7, 30, 54, 113, 206, 219, 231, 363, 365, 366, 370, 372, 380, 419, 450, 509, 532, 541, 542, 543, 547, 550, 551, 554, 565, 576, 587], "integr": [1, 5, 8, 28, 30, 110, 363, 366, 532, 540, 542, 544, 580, 582, 584, 585, 586], "kornia": [1, 532], "advantag": [1, 532, 543, 561, 562, 582], "featur": [1, 8, 31, 53, 366, 532, 542, 543, 546, 557, 562, 565, 566, 571, 576, 582, 583, 584, 588], "tensorflow": [1, 8, 9, 31, 154, 313, 364, 366, 367, 516, 523, 532, 535, 536, 540, 541, 542, 543, 545, 550, 551, 552, 557, 561, 562, 563, 564, 565, 566, 568, 573, 576, 577, 580, 583, 585, 586, 588, 589], "deploy": [1, 542, 581, 584, 585, 588, 589], "definit": [1, 8, 13, 30, 36, 366, 370, 400, 532, 543, 546, 551, 558, 570], "job": [1, 532, 550], "graph": [1, 19, 55, 378, 494, 495, 496, 497, 523, 532, 536, 549, 558, 562, 566, 569, 576, 577, 578, 582, 585], "leverag": [1, 532, 561, 580, 582], "frontend": [1, 3, 301, 367, 518, 519, 523, 532, 540, 543, 544, 550, 551, 555, 560, 564, 565, 566, 567, 569, 577, 582], "link": [1, 532, 538, 541, 542, 543, 548, 550, 551, 562, 564, 578, 580], "one": [1, 4, 8, 9, 12, 13, 15, 18, 19, 21, 25, 27, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 44, 75, 81, 90, 92, 111, 113, 171, 190, 216, 221, 222, 250, 294, 298, 299, 301, 315, 317, 318, 326, 345, 346, 349, 351, 353, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 377, 378, 380, 386, 387, 388, 389, 390, 391, 394, 408, 411, 412, 416, 418, 427, 428, 438, 439, 440, 443, 445, 449, 478, 489, 492, 494, 495, 496, 497, 502, 504, 526, 532, 535, 536, 541, 542, 543, 545, 546, 547, 548, 549, 551, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 570, 571, 573, 576, 582, 583, 585, 588], "swap": [1, 15, 38, 372, 447], "equival": [1, 13, 36, 75, 190, 218, 219, 230, 362, 365, 370, 414, 417, 420, 428, 561, 562, 566, 571, 573], "replac": [1, 8, 9, 15, 17, 25, 31, 32, 38, 40, 84, 298, 299, 362, 366, 367, 372, 376, 435, 483, 535, 543, 548, 549, 551, 552, 553, 559, 562, 564, 570, 573, 576, 589], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 526, 528, 529, 530, 531, 534, 535, 536, 537, 538, 541, 542, 543, 545, 546, 549, 550, 562, 581, 582, 583, 584, 585], "debug_mod": 1, "params_v": [1, 532], "must": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 57, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 268, 269, 286, 298, 299, 327, 345, 346, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 526, 534, 536, 538, 540, 541, 542, 543, 545, 546, 550, 551, 552, 553, 554, 555, 557, 558, 562, 564, 565, 566, 568, 572, 573, 583, 589], "unless": [1, 4, 8, 13, 27, 31, 92, 362, 366, 370, 414, 547, 552, 561, 576], "explicitli": [1, 54, 55, 370, 406, 407, 518, 545, 546, 547, 549, 551, 554, 555, 558, 559, 560, 561, 563, 564, 568, 576, 582], "nn": [1, 90, 362, 532, 558, 563, 566, 573, 583], "kera": [1, 51, 532, 536, 588], "hk": [1, 532, 573], "trainabl": [1, 51, 55, 58, 532, 554, 569, 571, 572], "transpile_kwarg": 1, "It": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 53, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 110, 112, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 268, 269, 286, 298, 299, 345, 346, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 414, 415, 416, 417, 420, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 488, 489, 490, 491, 493, 497, 498, 500, 502, 503, 506, 508, 509, 511, 512, 513, 532, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 580, 582, 583, 585, 586, 587, 588, 589], "alia": [1, 360, 541, 562], "similar": [1, 54, 230, 365, 369, 398, 534, 541, 542, 549, 551, 552, 555, 558, 559, 560, 562, 563, 564, 565, 571, 576, 578, 579, 580, 581, 588], "instantli": [1, 532], "proper": [1, 532, 541, 562], "arraieither": [1, 7, 8, 9, 12, 21, 25, 30, 31, 32, 35, 36, 52, 54, 55, 85, 180, 184, 207, 212, 213, 215, 216, 230, 232, 233, 238, 260, 288, 294, 295, 319, 362, 365, 366, 367, 369, 370, 373, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 411, 416, 419, 456, 457, 458, 502, 503, 508, 510, 541, 542, 543, 547, 549, 551, 552, 553, 554, 555, 558, 561, 562, 563, 564, 566, 568, 571, 576, 582], "snippet": [1, 564], "test_fn": [1, 71, 73, 361, 519, 532], "x1": [1, 5, 7, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 43, 47, 48, 84, 94, 98, 111, 121, 136, 143, 165, 180, 184, 186, 188, 189, 190, 191, 196, 197, 202, 203, 204, 205, 210, 211, 216, 217, 219, 220, 221, 222, 223, 225, 227, 230, 237, 241, 250, 253, 362, 363, 364, 365, 366, 367, 370, 377, 379, 401, 408, 411, 416, 420, 423, 424, 427, 493, 499, 518, 526, 532, 545, 551, 553, 555, 557, 561, 562], "effici": [1, 532, 542, 543, 549, 556, 558, 559, 561, 564, 568, 571, 576, 582, 584, 585], "ret": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 111, 112, 113, 114, 115, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 149, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 309, 311, 312, 313, 314, 315, 316, 317, 318, 326, 327, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 460, 462, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 530, 532, 554, 555, 560, 561, 562, 563, 565, 568, 573], "entir": [1, 21, 22, 25, 32, 44, 45, 54, 171, 282, 364, 366, 380, 381, 505, 506, 507, 508, 509, 510, 511, 512, 513, 535, 536, 541, 542, 543, 545, 546, 549, 551, 553, 555, 561, 562, 563, 564, 566, 568, 571, 572, 573, 576, 582, 588, 589], "just": [1, 21, 54, 366, 380, 504, 523, 532, 535, 536, 542, 543, 545, 547, 550, 551, 553, 554, 558, 559, 561, 562, 563, 564, 568, 570, 571, 576, 582, 583, 588], "line": [1, 532, 536, 542, 545, 546, 550, 553, 555, 556, 559, 564, 566, 569, 570, 571, 572, 574, 585], "request": [1, 8, 163, 364, 366, 532, 536, 537, 541, 553, 565, 566], "jnp": [1, 532, 551, 552, 555, 557, 561, 565, 568, 573], "pil": [1, 532], "jax_kornia": [1, 532], "url": [1, 532], "http": [1, 7, 30, 33, 113, 206, 219, 223, 231, 345, 346, 363, 365, 366, 368, 370, 372, 380, 419, 429, 450, 509, 532, 538, 539, 542, 545, 548, 550, 551, 554], "cocodataset": [1, 532], "org": [1, 7, 30, 33, 113, 206, 219, 231, 345, 346, 363, 365, 366, 368, 370, 372, 380, 419, 429, 450, 509, 532, 554], "train2017": [1, 532], "000000000034": [1, 532], "jpg": [1, 532], "raw_img": [1, 532], "stream": [1, 6, 29, 172, 364, 532, 586], "raw": [1, 25, 532, 554, 583], "format": [1, 6, 8, 21, 24, 25, 26, 29, 31, 69, 121, 157, 261, 359, 363, 364, 366, 367, 369, 380, 385, 392, 393, 504, 516, 532, 544, 551, 552, 553, 554, 555, 562, 568, 570, 571, 578, 580, 582, 583], "img": [1, 532, 571], "transpos": [1, 8, 12, 13, 25, 31, 35, 36, 47, 54, 366, 369, 370, 385, 387, 389, 391, 392, 393, 411, 415, 417, 532, 561, 570, 573], "expand_dim": [1, 15, 38, 369, 372, 394, 532, 562, 568, 571], "255": [1, 12, 31, 35, 190, 365, 394, 532], "version": [1, 2, 8, 31, 61, 327, 366, 367, 370, 406, 407, 518, 532, 534, 535, 536, 542, 543, 548, 550, 551, 554, 563, 568, 588, 589], "enhanc": [1, 532], "5": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 54, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 111, 112, 113, 121, 123, 131, 132, 137, 157, 165, 169, 172, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 254, 255, 256, 257, 260, 261, 262, 263, 265, 268, 269, 273, 282, 284, 285, 286, 298, 299, 311, 313, 315, 319, 327, 345, 346, 348, 349, 350, 351, 353, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 412, 413, 415, 416, 417, 419, 421, 422, 423, 425, 426, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 484, 485, 486, 488, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 542, 543, 545, 547, 549, 553, 557, 560, 563, 564, 570, 571, 572], "last": [1, 4, 8, 12, 13, 14, 15, 18, 20, 21, 22, 25, 27, 31, 35, 36, 37, 38, 43, 44, 45, 47, 54, 88, 89, 92, 156, 356, 358, 362, 364, 366, 368, 369, 370, 371, 372, 377, 379, 380, 381, 397, 401, 404, 416, 425, 427, 432, 433, 436, 439, 442, 443, 444, 446, 489, 490, 498, 499, 500, 502, 503, 512, 513, 532, 536, 543, 545, 547, 548, 551, 553, 556, 561, 563, 564, 566, 568, 576, 582], "least": [1, 8, 13, 31, 366, 370, 411, 532, 543, 546, 550, 551, 553, 558, 564], "support": [1, 6, 8, 9, 13, 29, 31, 32, 36, 57, 124, 128, 149, 159, 172, 176, 180, 218, 219, 231, 254, 266, 283, 286, 287, 313, 363, 364, 365, 366, 367, 369, 370, 396, 405, 406, 407, 410, 412, 421, 428, 516, 532, 534, 535, 536, 538, 542, 545, 546, 549, 552, 553, 554, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 570, 571, 573, 577, 579, 581, 582, 585, 587, 588, 589], "timm": [1, 532], "pretrain": [1, 532], "mlp_encod": [1, 532], "create_model": [1, 532], "mixer_b16_224": [1, 532], "num_class": [1, 532, 573], "randn": [1, 532], "224": [1, 532], "encod": [1, 9, 32, 265, 367, 532, 535, 571], "__init__": [1, 25, 47, 48, 50, 53, 54, 55, 56, 57, 58, 362, 363, 364, 366, 367, 368, 515, 519, 521, 522, 529, 532, 541, 546, 547, 551, 555, 562, 565, 568, 570, 571, 572, 573], "self": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 57, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 121, 123, 126, 129, 130, 131, 132, 134, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 364, 366, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 532, 543, 546, 549, 555, 562, 563, 568, 570, 571, 572, 573], "1000": [1, 4, 27, 89, 362, 532, 571], "super": [1, 8, 31, 366, 532, 555, 558, 568, 571, 572, 573], "fc": [1, 532, 572], "linear": [1, 8, 9, 12, 24, 31, 32, 35, 53, 54, 61, 62, 63, 65, 66, 69, 265, 294, 359, 366, 367, 369, 374, 420, 466, 532, 549, 554, 558, 562, 564, 566, 568, 571, 572, 573, 580, 581, 582, 585], "output_s": [1, 8, 31, 366, 532], "with_bia": [1, 54, 532, 572], "__call__": [1, 54, 55, 518, 532], "_forward_classifi": [1, 532], "standard": [1, 7, 8, 13, 16, 17, 21, 30, 31, 39, 40, 44, 53, 56, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 113, 123, 126, 137, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 327, 362, 363, 365, 366, 367, 370, 372, 375, 376, 377, 378, 379, 380, 381, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 436, 438, 439, 440, 442, 443, 445, 446, 450, 478, 485, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 533, 544, 545, 546, 549, 551, 554, 557, 561, 564, 565, 576, 578, 580, 581, 584, 585, 587], "rng_kei": [1, 532], "random": [1, 8, 12, 25, 31, 35, 366, 369, 395, 483, 484, 485, 486, 487, 488, 532, 541, 552, 563, 564, 565, 573, 575, 582], "prngkei": [1, 532, 573], "42": [1, 2, 17, 24, 33, 39, 40, 69, 190, 345, 349, 359, 365, 366, 368, 370, 375, 376, 380, 412, 416, 478, 483, 484, 485, 486, 487, 502, 504, 532, 568, 573], "uniform": [1, 17, 40, 53, 376, 483, 484, 486, 532, 572, 589], "kei": [1, 3, 8, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 51, 52, 54, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 126, 130, 131, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 254, 256, 257, 258, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 366, 367, 369, 373, 374, 386, 387, 388, 389, 395, 396, 398, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 462, 468, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 522, 532, 548, 549, 550, 556, 562, 563, 564, 571, 582, 585, 589], "dtype": [1, 4, 5, 8, 9, 12, 13, 17, 18, 21, 27, 28, 31, 32, 35, 36, 40, 41, 44, 47, 53, 54, 55, 56, 58, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 167, 265, 266, 267, 269, 286, 317, 362, 363, 364, 366, 367, 369, 370, 374, 376, 377, 379, 380, 381, 388, 395, 412, 428, 459, 484, 485, 486, 489, 490, 491, 499, 500, 502, 503, 508, 510, 512, 513, 515, 516, 518, 526, 532, 545, 547, 551, 552, 553, 556, 558, 559, 561, 562, 563, 564, 565, 568, 570], "float32": [1, 4, 5, 9, 12, 27, 28, 32, 35, 44, 89, 92, 94, 98, 108, 109, 113, 118, 121, 122, 123, 124, 127, 130, 131, 132, 137, 140, 146, 286, 317, 362, 363, 366, 367, 369, 370, 388, 390, 394, 428, 518, 532, 551, 553, 563, 564], "forward_classifi": [1, 532], "param": [1, 25, 31, 32, 42, 48, 50, 223, 251, 268, 269, 365, 367, 497, 526, 532, 573], "init": [1, 53, 532, 545, 573], "rng": [1, 532, 573], "mention": [1, 535, 541, 542, 543, 546, 553, 557, 558, 561, 562, 564, 566, 582], "abov": [1, 4, 7, 8, 13, 17, 24, 30, 31, 36, 40, 69, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 277, 282, 284, 286, 318, 355, 359, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 484, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 566, 568, 570, 571, 572, 573, 582, 587], "exactli": [1, 534, 536, 549, 550, 551, 552, 553, 564, 566], "wai": [1, 532, 534, 535, 539, 540, 541, 542, 545, 546, 547, 548, 550, 551, 561, 562, 563, 564, 566, 570, 571, 572, 573, 576, 584, 588, 589], "transpiled_func": 1, "unified_func": 1, "fashion": [1, 564], "rough": 1, "edg": [1, 8, 15, 31, 38, 366, 372, 435, 437, 450, 545, 564, 582, 584, 588], "These": [1, 8, 31, 366, 370, 405, 406, 532, 534, 535, 536, 538, 540, 541, 542, 543, 545, 549, 551, 553, 554, 556, 557, 558, 561, 562, 564, 565, 568, 569, 571, 572, 573, 576, 577, 582, 586, 588, 589], "subclass": [1, 562, 566], "within": [1, 3, 8, 31, 75, 362, 366, 376, 486, 532, 541, 543, 546, 548, 550, 562, 563, 564, 572, 576, 578, 579, 583], "sequenti": [1, 532, 548, 549, 572], "more": [1, 8, 13, 15, 19, 31, 36, 38, 42, 75, 111, 200, 214, 362, 363, 365, 366, 370, 372, 378, 404, 410, 411, 417, 419, 421, 428, 439, 446, 494, 495, 496, 497, 532, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 580, 581, 582, 583, 584, 585, 588, 589], "complex": [1, 8, 13, 28, 31, 36, 116, 130, 138, 144, 209, 311, 363, 365, 366, 367, 370, 405, 406, 407, 421, 538, 541, 548, 551, 553, 562, 564, 566, 571, 572, 573, 576, 577, 578, 580, 582, 584, 588, 589], "should": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 24, 25, 27, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 68, 90, 92, 95, 96, 112, 136, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 255, 286, 327, 346, 349, 351, 352, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 392, 393, 399, 400, 401, 402, 404, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 423, 425, 427, 428, 442, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 508, 510, 511, 518, 519, 533, 535, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 578, 579, 582, 584, 589], "util": [1, 8, 31, 158, 364, 526, 528, 529, 530, 531, 532, 538, 548, 552, 555, 561, 565, 580, 588, 589], "requir": [1, 8, 25, 31, 51, 235, 365, 366, 370, 372, 405, 406, 407, 446, 523, 538, 539, 541, 542, 546, 548, 550, 551, 552, 553, 554, 555, 557, 559, 562, 563, 564, 565, 566, 568, 570, 576, 582, 588], "state": [1, 12, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 144, 145, 146, 147, 148, 271, 272, 280, 310, 320, 322, 323, 324, 363, 367, 369, 397, 519, 532, 535, 542, 548, 551, 554, 555, 557, 562, 564, 567, 568, 569, 571, 575, 588, 589], "mean": [1, 8, 9, 12, 15, 17, 21, 23, 25, 31, 32, 35, 38, 40, 44, 46, 53, 171, 262, 347, 348, 350, 357, 364, 366, 367, 368, 369, 370, 372, 373, 374, 376, 380, 387, 389, 390, 391, 394, 395, 403, 442, 456, 457, 458, 465, 484, 485, 532, 542, 543, 544, 545, 547, 549, 551, 552, 553, 558, 560, 561, 562, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 579, 582], "transformed_with_st": 1, "map": [1, 8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 54, 61, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 126, 130, 131, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 327, 349, 355, 366, 367, 374, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 466, 467, 471, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 546, 549, 551, 557, 558, 562, 564, 565, 571, 575, 576, 577, 583], "convolut": [1, 8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 580, 582], "n": [1, 4, 8, 12, 13, 15, 17, 18, 21, 22, 30, 31, 35, 36, 38, 40, 41, 44, 45, 47, 90, 95, 96, 362, 366, 369, 370, 372, 374, 376, 377, 380, 381, 385, 386, 387, 388, 390, 392, 394, 398, 404, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 437, 438, 440, 446, 450, 467, 484, 485, 486, 492, 506, 509, 510, 511, 512, 513, 532, 544, 564], "c": [1, 4, 8, 9, 10, 12, 15, 21, 27, 28, 30, 31, 32, 33, 35, 36, 38, 42, 44, 76, 77, 89, 92, 123, 126, 190, 212, 213, 225, 232, 253, 261, 262, 263, 277, 284, 285, 318, 345, 346, 349, 351, 352, 353, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 377, 378, 380, 386, 387, 388, 389, 390, 391, 405, 407, 409, 442, 446, 459, 462, 466, 467, 468, 470, 476, 477, 492, 497, 503, 504, 509, 511, 533, 535, 536, 537, 542, 544, 549, 553, 558, 560, 566, 567, 568, 569, 571, 576, 577, 578, 582, 586, 587, 589], "h": [1, 8, 9, 12, 31, 32, 35, 261, 263, 366, 367, 369, 374, 385, 388, 389, 390, 391, 392, 393, 394, 462, 466, 468, 476, 544, 549, 550, 578], "w": [1, 8, 9, 10, 12, 25, 30, 31, 32, 33, 35, 217, 261, 263, 311, 345, 346, 347, 349, 351, 352, 353, 366, 367, 368, 369, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 465, 532, 560, 568, 571, 572], "bigger": 1, "permut": [1, 15, 38, 47, 372, 440, 447], "infer": [1, 4, 8, 9, 12, 15, 27, 31, 32, 35, 38, 75, 77, 83, 86, 87, 91, 94, 98, 116, 117, 118, 119, 120, 277, 309, 362, 363, 366, 367, 369, 372, 395, 442, 544, 547, 548, 551, 552, 559, 564, 568, 573, 580, 581, 584, 586], "correct": [1, 21, 44, 143, 363, 372, 380, 435, 509, 511, 518, 532, 541, 543, 544, 548, 549, 550, 551, 552, 556, 557, 558, 563, 564], "keep": [1, 15, 25, 38, 372, 449, 540, 541, 542, 543, 545, 548, 549, 550, 555, 562, 564, 565, 566, 571, 573], "mind": [1, 541, 546, 549, 564], "well": [1, 32, 282, 367, 370, 420, 532, 539, 543, 548, 550, 551, 555, 561, 562, 563, 564, 572, 573, 575, 581, 582, 583, 587], "hf": 1, "tf_model": 1, "tf_input": 1, "data_class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "_arraywithactiv": [2, 47], "base": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 89, 136, 199, 212, 213, 214, 215, 227, 274, 302, 312, 362, 363, 364, 365, 366, 367, 368, 372, 378, 380, 438, 494, 495, 496, 497, 504, 515, 519, 521, 522, 529, 532, 543, 545, 549, 550, 551, 555, 557, 559, 560, 563, 564, 565, 566, 568, 575, 582, 587, 589], "abc": [2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 52, 53, 57, 264, 364, 367, 374, 477, 515, 570], "_abc_impl": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "_abc_data": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "gelu": [2, 24, 50, 359, 532], "approxim": [2, 8, 13, 24, 30, 31, 36, 50, 61, 178, 179, 181, 182, 183, 184, 193, 194, 199, 200, 212, 213, 214, 215, 227, 233, 234, 238, 239, 359, 365, 366, 370, 414, 417, 554, 562], "variant": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 123, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 366, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 414, 417, 418, 419, 421, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 546, 553, 554, 566], "simpli": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 77, 81, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 111, 112, 113, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 345, 346, 349, 351, 352, 353, 355, 365, 366, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 409, 411, 412, 417, 418, 419, 421, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 532, 541, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 561, 562, 563, 564, 566, 568, 572, 573, 576, 577, 583, 588], "docstr": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 111, 112, 113, 123, 126, 130, 131, 137, 157, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 290, 291, 292, 298, 299, 311, 312, 313, 315, 317, 318, 326, 327, 345, 346, 349, 351, 352, 353, 355, 362, 363, 365, 366, 367, 370, 372, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 540, 541, 544, 548, 556, 557, 558, 562, 565], "us": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 46, 48, 51, 52, 53, 54, 55, 56, 57, 61, 89, 92, 110, 122, 124, 125, 135, 136, 159, 160, 162, 166, 169, 170, 171, 172, 174, 176, 181, 189, 212, 213, 216, 217, 218, 219, 221, 222, 231, 235, 255, 266, 267, 274, 275, 284, 285, 294, 302, 303, 311, 312, 345, 346, 351, 352, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 396, 398, 399, 404, 422, 428, 431, 441, 442, 443, 447, 456, 457, 458, 459, 461, 462, 468, 469, 470, 472, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 496, 504, 519, 523, 536, 537, 538, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "write": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 110, 112, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 268, 269, 286, 298, 299, 345, 346, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 488, 490, 491, 493, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 519, 532, 536, 540, 541, 543, 544, 545, 547, 548, 550, 551, 553, 554, 555, 558, 561, 562, 563, 565, 568, 570, 573, 582, 589], "broadcast": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 61, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257, 261, 262, 263, 268, 269, 286, 298, 299, 345, 346, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 459, 478, 483, 484, 485, 486, 488, 489, 490, 491, 493, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 549, 551, 553, 554, 564, 565, 568], "element": [2, 4, 7, 8, 9, 12, 13, 15, 17, 18, 19, 21, 24, 25, 27, 28, 30, 31, 32, 35, 36, 38, 40, 41, 42, 44, 47, 48, 54, 61, 63, 64, 65, 66, 67, 68, 69, 75, 81, 86, 87, 95, 96, 121, 123, 126, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 253, 256, 257, 268, 269, 292, 311, 312, 313, 317, 318, 358, 359, 362, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 379, 380, 381, 395, 401, 403, 405, 406, 411, 416, 418, 419, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 459, 462, 468, 483, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 554, 563, 564, 566, 568, 586], "wise": [2, 7, 8, 13, 24, 30, 31, 36, 47, 48, 57, 61, 63, 64, 65, 66, 67, 68, 69, 177, 178, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 202, 203, 204, 205, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 237, 241, 359, 365, 366, 372, 401, 435, 566], "exampl": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 465, 466, 467, 468, 470, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 523, 536, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 561, 562, 564, 565, 568, 570, 571, 572, 573, 575, 576, 579, 580, 583, 585, 588, 589], "6": [2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 53, 61, 63, 67, 68, 76, 77, 86, 87, 90, 91, 94, 98, 111, 112, 121, 123, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 254, 256, 257, 260, 261, 262, 268, 269, 284, 285, 286, 299, 311, 313, 315, 319, 345, 346, 347, 348, 349, 350, 351, 353, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 407, 411, 412, 413, 416, 419, 421, 422, 423, 425, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 470, 477, 478, 483, 484, 485, 486, 488, 489, 490, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 532, 545, 547, 549, 550, 553, 560, 564, 566, 568, 570, 571, 572], "138": [2, 61, 359], "165": [2, 61, 359, 369, 396], "leaky_relu": [2, 24, 359], "alpha": [2, 7, 8, 24, 30, 31, 50, 63, 180, 237, 359, 365, 366, 562, 563], "float": [2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21, 24, 27, 28, 30, 31, 32, 33, 35, 36, 37, 39, 40, 44, 47, 50, 53, 56, 57, 63, 69, 75, 76, 77, 82, 84, 86, 87, 88, 89, 93, 97, 110, 114, 116, 118, 123, 127, 131, 136, 137, 140, 146, 158, 166, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 255, 256, 257, 265, 274, 275, 278, 282, 302, 303, 305, 311, 312, 326, 345, 346, 349, 351, 352, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 395, 398, 399, 400, 402, 405, 406, 407, 409, 412, 413, 414, 417, 418, 419, 420, 421, 425, 428, 431, 432, 433, 456, 457, 458, 465, 478, 485, 486, 494, 495, 496, 497, 502, 503, 505, 506, 507, 508, 509, 510, 511, 518, 545, 549, 551, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 570, 572], "slope": [2, 8, 24, 31, 50, 63, 359, 366], "neg": [2, 7, 8, 13, 15, 17, 22, 24, 30, 31, 36, 38, 40, 45, 50, 63, 75, 84, 206, 207, 227, 230, 359, 362, 365, 366, 370, 372, 376, 381, 403, 421, 425, 427, 428, 436, 438, 439, 443, 485, 512, 513, 549, 558, 561], "section": [2, 8, 19, 31, 63, 366, 378, 494, 495, 496, 497, 532, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 571, 572, 578, 585, 588], "leaki": [2, 24, 50, 63, 359], "relu": [2, 8, 23, 24, 31, 50, 63, 359, 366, 532, 563, 571, 572], "39": [2, 7, 8, 17, 24, 30, 31, 33, 40, 63, 182, 199, 212, 214, 216, 345, 359, 365, 366, 368, 370, 380, 416, 485, 504], "85": [2, 17, 24, 30, 33, 35, 40, 48, 63, 181, 190, 191, 228, 311, 349, 359, 365, 367, 368, 369, 376, 396, 484, 485, 486], "17": [2, 8, 24, 30, 31, 32, 33, 35, 40, 48, 63, 64, 89, 180, 196, 216, 223, 262, 285, 345, 347, 359, 362, 365, 366, 367, 368, 369, 370, 374, 376, 386, 395, 396, 404, 422, 467, 484, 485, 486, 488, 549, 553], "log_softmax": [2, 24, 359], "axi": [2, 4, 8, 9, 13, 14, 15, 18, 20, 21, 22, 24, 25, 27, 30, 31, 32, 36, 37, 38, 41, 43, 44, 45, 64, 68, 88, 89, 92, 171, 261, 268, 327, 359, 362, 364, 366, 367, 369, 370, 371, 372, 376, 377, 379, 380, 381, 394, 398, 401, 404, 412, 427, 428, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 488, 489, 490, 498, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 526, 549, 551, 553, 555, 557, 558, 561, 562, 564, 566, 568, 570, 573, 575], "ax": [2, 8, 13, 15, 18, 21, 22, 24, 31, 36, 38, 41, 44, 45, 47, 64, 68, 171, 261, 327, 364, 366, 367, 370, 372, 377, 380, 381, 412, 420, 423, 424, 428, 437, 439, 440, 443, 445, 447, 450, 489, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 551, 553, 564, 565, 568, 570], "along": [2, 4, 8, 9, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 27, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 64, 68, 88, 89, 171, 261, 268, 362, 364, 366, 367, 370, 371, 372, 373, 376, 377, 379, 380, 381, 416, 425, 427, 428, 432, 433, 436, 439, 440, 441, 443, 444, 446, 448, 449, 456, 457, 458, 488, 489, 490, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 532, 541, 553, 561, 565, 566, 568, 582], "98": [2, 10, 17, 24, 30, 33, 40, 64, 191, 194, 234, 349, 359, 365, 368, 370, 374, 377, 380, 416, 460, 484, 486, 493, 504], "37": [2, 7, 8, 24, 30, 31, 47, 64, 182, 190, 231, 234, 238, 365, 366, 369, 370, 374, 376, 396, 413, 467, 485], "35": [2, 12, 24, 30, 31, 35, 36, 40, 64, 184, 235, 365, 366, 369, 370, 377, 380, 396, 399, 401, 485, 493, 504], "0719": [2, 24, 64], "62": [2, 24, 31, 39, 40, 64, 234, 365, 375, 376, 478, 484, 486], "221": [2, 64], "7": [2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 63, 64, 65, 66, 67, 75, 76, 77, 88, 91, 92, 123, 126, 158, 177, 180, 182, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 201, 202, 204, 205, 209, 210, 211, 212, 213, 214, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 231, 232, 233, 235, 238, 239, 240, 241, 254, 256, 257, 261, 262, 284, 285, 286, 292, 298, 299, 311, 313, 345, 346, 348, 349, 350, 351, 353, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 386, 387, 389, 391, 394, 395, 396, 398, 399, 401, 402, 403, 404, 407, 411, 413, 416, 419, 421, 422, 423, 425, 426, 431, 432, 433, 435, 438, 439, 444, 446, 447, 449, 459, 460, 467, 478, 483, 484, 485, 486, 488, 493, 494, 496, 498, 500, 502, 503, 504, 506, 508, 510, 511, 543, 549, 550, 553, 558, 560, 561, 564], "82": [2, 7, 33, 40, 64, 182, 345, 368, 485, 486, 555], "mish": [2, 24, 50, 359], "30340147": [2, 65, 359], "86509842": [2, 24, 65, 359], "sigmoid": [2, 8, 24, 31, 60, 62, 359, 366, 532, 568, 571, 572], "269": [2, 67, 359], "731": [2, 67, 359], "881": [2, 7, 30, 67, 182, 195, 228, 359, 365], "softmax": [2, 12, 23, 24, 35, 50, 359, 369, 398, 399, 532], "422": [2, 68, 359], "155": [2, 35, 68, 359, 369, 396], "softplu": [2, 24, 50, 359, 566], "beta": [2, 8, 16, 24, 31, 39, 69, 359, 366, 375, 478, 566], "threshold": [2, 7, 8, 24, 30, 31, 69, 221, 222, 359, 365, 366, 566], "3461": [2, 24, 69, 359], "6491": [2, 24, 69, 359], "535": [2, 24, 69, 359], "22": [2, 7, 8, 9, 17, 21, 24, 31, 32, 35, 40, 64, 69, 191, 262, 299, 326, 359, 365, 366, 369, 370, 374, 377, 380, 395, 396, 404, 409, 416, 467, 477, 484, 485, 486, 493, 503, 504, 549], "09": [2, 7, 33, 40, 69, 227, 236, 345, 359, 365, 368, 369, 399, 485], "31": [2, 7, 8, 30, 31, 32, 35, 40, 64, 69, 89, 190, 216, 223, 256, 359, 362, 365, 366, 367, 370, 396, 422, 485, 486, 571], "55": [2, 40, 69, 190, 240, 284, 365, 367, 370, 376, 380, 409, 416, 422, 485, 486, 504, 545], "13": [2, 7, 8, 12, 17, 21, 30, 31, 32, 33, 35, 38, 40, 44, 47, 69, 126, 158, 180, 191, 194, 202, 227, 235, 256, 257, 261, 262, 285, 303, 311, 345, 359, 363, 364, 365, 366, 367, 368, 369, 370, 372, 377, 378, 380, 386, 387, 395, 396, 399, 404, 416, 422, 449, 484, 485, 486, 493, 494, 502, 503, 504, 549, 553], "collect": [3, 25, 26, 50, 54, 56, 57, 359, 364, 367, 368, 369, 371, 374, 375, 376, 472, 550, 555, 560, 563, 564, 575, 580, 582, 585], "accept": [3, 4, 7, 13, 26, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 262, 263, 268, 277, 282, 284, 286, 298, 313, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 542, 543, 546, 549, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 577, 580], "_to_ivi": 3, "_to_n": 3, "inplac": [3, 9, 25, 32, 51, 57, 252, 254, 283, 286, 287, 367, 374, 466, 467, 471, 476, 477, 522, 523, 544, 546, 553, 557, 559, 562, 566, 570, 572], "args_to_ivi": 3, "include_deriv": [3, 26, 374, 460, 471, 518], "form": [3, 4, 13, 25, 27, 36, 53, 76, 77, 91, 95, 96, 251, 314, 316, 362, 366, 367, 369, 370, 374, 400, 402, 404, 405, 406, 407, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425, 460, 471, 535, 537, 558, 564, 566, 572, 573, 582, 583, 588], "nest": [3, 25, 26, 48, 52, 55, 57, 315, 327, 347, 358, 367, 368, 373, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 546, 548, 549, 558, 560, 565, 571, 572, 576, 577, 582], "unchang": [3, 8, 366, 369, 395], "recurs": [3, 25, 26, 124, 125, 159, 160, 266, 267, 363, 364, 367, 374, 459, 460, 469, 470, 471, 542, 545, 548, 549, 558, 572, 576], "deriv": [3, 4, 8, 10, 26, 27, 31, 33, 55, 57, 58, 83, 87, 94, 98, 345, 346, 349, 350, 351, 352, 353, 362, 366, 368, 374, 460, 471, 551, 552, 570, 572], "word": [3, 51, 75, 362, 376, 486, 549, 562, 577], "args_to_n": [3, 561], "cont_inplac": 3, "updat": [3, 9, 10, 25, 32, 33, 51, 57, 286, 298, 299, 345, 346, 349, 351, 352, 353, 367, 368, 369, 373, 374, 395, 397, 456, 457, 466, 467, 471, 476, 477, 523, 532, 541, 542, 543, 544, 545, 546, 549, 550, 551, 553, 557, 559, 560, 562, 563, 564, 566, 568, 570, 571, 573, 576], "place": [3, 4, 7, 8, 9, 13, 15, 25, 27, 29, 30, 31, 32, 38, 57, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 113, 129, 132, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 262, 263, 268, 277, 282, 284, 285, 286, 298, 313, 318, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 538, 540, 543, 544, 545, 548, 549, 550, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 573, 577, 584], "to_ivi": [3, 26, 374, 472], "leaf": [3, 25, 44, 374, 469, 470, 472, 503, 549, 558, 571], "nativearrai": [3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 58, 61, 63, 64, 65, 66, 67, 68, 69, 76, 77, 81, 83, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 126, 129, 130, 131, 132, 134, 136, 137, 143, 156, 157, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 270, 273, 277, 282, 284, 285, 286, 289, 291, 292, 298, 299, 300, 309, 311, 312, 313, 315, 317, 318, 320, 326, 345, 346, 347, 349, 351, 352, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 461, 462, 466, 467, 468, 471, 476, 477, 478, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 546, 549, 553, 555, 556, 557, 558, 559, 561, 562, 565, 568, 570, 577], "manner": [3, 26, 374, 471, 534, 542, 552, 554, 562, 565, 571, 575, 576, 578, 580, 588, 589], "travers": [3, 26, 374, 471, 549, 551, 555, 568], "lowest": [3, 17, 26, 40, 374, 376, 471, 484, 558, 576, 577, 579, 583, 587], "leav": [3, 26, 28, 30, 31, 32, 35, 36, 38, 44, 48, 123, 126, 196, 265, 315, 372, 374, 391, 399, 404, 421, 437, 441, 446, 448, 449, 459, 460, 469, 470, 471, 472, 502, 503, 522, 532, 541, 549, 551, 553, 554, 557, 558, 561, 562, 564, 571, 572], "search": [3, 8, 26, 31, 489, 490, 523, 534, 540, 542, 548, 549, 553, 564, 565], "to_n": [3, 26, 568], "mayb": [3, 532, 542, 550, 568, 570], "_arraywithcr": [4, 47], "asarrai": [4, 8, 9, 27, 31, 32, 76, 261, 277, 284, 285, 311, 362, 366, 367, 369, 378, 386, 495, 559, 561, 562, 563], "devic": [4, 8, 17, 25, 27, 31, 40, 47, 51, 53, 54, 55, 56, 57, 58, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 252, 266, 267, 362, 366, 367, 376, 483, 484, 485, 486, 515, 516, 518, 519, 532, 535, 543, 544, 547, 551, 555, 558, 559, 563, 564, 565, 566, 568, 573, 576, 577, 581, 582, 584, 585, 586, 587], "data": [4, 7, 8, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32, 35, 36, 38, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 55, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 110, 112, 113, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 149, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 265, 286, 288, 289, 291, 313, 362, 364, 365, 366, 367, 369, 370, 372, 376, 377, 379, 380, 381, 385, 392, 393, 395, 396, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 427, 428, 436, 439, 440, 442, 443, 445, 446, 450, 484, 485, 486, 488, 489, 490, 492, 493, 498, 499, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 523, 526, 532, 533, 535, 542, 544, 545, 546, 549, 552, 554, 557, 558, 559, 561, 563, 565, 566, 568, 570, 577, 582, 583, 584, 586, 587, 588], "ndarrai": [4, 8, 9, 27, 31, 76, 77, 91, 317, 362, 366, 367, 541, 546, 551, 552, 557, 561, 562, 563, 565, 566, 568, 570, 573, 577], "boolean": [4, 5, 7, 8, 9, 15, 18, 21, 25, 27, 28, 30, 31, 32, 38, 41, 44, 47, 48, 76, 77, 81, 86, 110, 126, 128, 130, 131, 133, 149, 162, 174, 186, 187, 188, 189, 190, 191, 217, 218, 219, 220, 250, 253, 273, 282, 283, 287, 288, 289, 290, 291, 292, 300, 304, 306, 307, 326, 354, 358, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 380, 442, 456, 457, 469, 491, 493, 505, 507, 523, 549, 562, 564, 566], "nativedtyp": [4, 5, 8, 12, 13, 17, 18, 21, 27, 31, 36, 40, 41, 44, 53, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 109, 110, 115, 116, 117, 118, 119, 120, 121, 122, 127, 128, 133, 135, 139, 149, 362, 363, 366, 369, 370, 376, 377, 379, 380, 395, 428, 484, 485, 486, 489, 490, 499, 502, 503, 508, 510, 551, 552, 557, 565, 568], "nativedevic": [4, 6, 8, 17, 27, 29, 31, 40, 53, 57, 58, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 154, 155, 156, 157, 158, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 362, 364, 366, 376, 483, 484, 485, 486, 551, 552, 555, 557, 565], "interpret": [4, 27, 76, 77, 91, 362, 550, 583], "9": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 19, 20, 21, 24, 28, 30, 31, 32, 33, 35, 36, 38, 40, 42, 43, 44, 47, 48, 57, 61, 75, 76, 77, 91, 116, 118, 119, 120, 123, 126, 178, 180, 181, 182, 185, 186, 187, 190, 196, 197, 202, 206, 211, 212, 213, 218, 219, 221, 222, 223, 225, 227, 228, 231, 232, 235, 236, 237, 241, 257, 261, 262, 263, 265, 268, 284, 285, 288, 289, 291, 298, 299, 311, 345, 346, 347, 351, 359, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 379, 380, 386, 387, 388, 391, 394, 395, 396, 398, 401, 402, 404, 407, 411, 412, 413, 416, 419, 421, 422, 423, 425, 426, 435, 439, 443, 444, 446, 447, 449, 459, 460, 465, 467, 470, 483, 484, 485, 486, 488, 493, 494, 496, 498, 500, 503, 504, 506, 508, 510, 511, 549, 553, 555, 560, 564, 571, 572, 578], "39999998": [4, 76, 77, 362, 378, 495], "5999999": [4, 76, 77, 362, 369, 395], "0999999": [4, 21, 76, 77, 362, 506], "10000038": [4, 76, 77, 362], "np": [4, 8, 30, 31, 32, 76, 77, 81, 91, 133, 209, 311, 362, 363, 365, 366, 367, 374, 465, 518, 532, 541, 546, 551, 552, 555, 557, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 577], "order": [4, 8, 12, 13, 15, 19, 20, 25, 31, 35, 36, 38, 43, 47, 48, 52, 55, 58, 76, 77, 90, 184, 362, 365, 366, 369, 370, 372, 373, 377, 378, 379, 386, 387, 388, 389, 390, 391, 394, 405, 406, 412, 421, 422, 426, 428, 439, 442, 456, 457, 492, 494, 495, 496, 497, 498, 499, 500, 518, 532, 534, 541, 542, 543, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 561, 562, 563, 564, 565, 566, 571, 573, 576, 578, 581, 582, 583, 585, 588], "90786433e": [4, 76, 77, 362], "310": [4, 76, 77, 362], "copy_arrai": [4, 362], "to_ivy_arrai": [4, 81, 362], "empty_lik": [4, 27, 362, 566], "deafult": [4, 18, 41, 83, 362, 377, 489], "uniniti": [4, 82, 83, 362], "from_dlpack": [4, 27, 362], "full_lik": [4, 27, 362, 565], "fill_valu": [4, 18, 27, 41, 86, 87, 205, 211, 362, 365, 377, 492, 526, 551, 563, 565], "scalar": [4, 7, 8, 9, 13, 24, 27, 30, 31, 32, 36, 63, 87, 92, 180, 237, 318, 326, 362, 365, 366, 367, 370, 428, 551, 560, 562, 576, 582], "fill": [4, 8, 17, 18, 25, 27, 31, 40, 41, 53, 82, 86, 87, 89, 92, 93, 94, 97, 98, 362, 366, 376, 377, 484, 492, 563], "equal": [4, 5, 7, 8, 9, 13, 15, 17, 19, 20, 21, 25, 28, 30, 31, 32, 36, 38, 40, 43, 47, 48, 53, 84, 86, 87, 110, 188, 190, 206, 207, 227, 231, 250, 253, 327, 362, 363, 365, 366, 367, 370, 372, 376, 378, 379, 380, 404, 413, 414, 417, 419, 435, 437, 444, 450, 486, 494, 495, 496, 497, 498, 500, 506, 509, 510, 511, 523, 548, 549, 551, 553, 555, 558, 563, 564], "000123": [4, 87, 362], "ones": [4, 8, 10, 12, 17, 25, 27, 31, 35, 40, 84, 87, 92, 94, 98, 159, 160, 192, 345, 362, 364, 365, 366, 368, 369, 390, 484, 485, 486, 532, 546, 550, 553, 557, 564, 570, 571, 582], "linspac": [4, 27, 75, 362, 557, 566, 568, 589], "stop": [4, 10, 27, 33, 57, 75, 88, 89, 171, 346, 349, 351, 352, 353, 355, 362, 364, 368, 373, 374, 456, 457, 458, 470, 557, 560, 566, 568, 576, 582], "num": [4, 27, 88, 89, 362, 543, 557, 568], "endpoint": [4, 27, 53, 88, 89, 362, 557], "logspac": [4, 27, 362, 568], "10": [4, 7, 8, 9, 10, 12, 13, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 57, 75, 87, 88, 89, 179, 186, 187, 190, 194, 200, 205, 211, 213, 223, 228, 234, 235, 255, 261, 262, 263, 265, 268, 269, 273, 278, 284, 285, 292, 299, 305, 311, 323, 351, 362, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 386, 387, 389, 395, 402, 404, 409, 411, 412, 413, 416, 421, 422, 423, 439, 444, 445, 446, 447, 449, 465, 467, 470, 478, 483, 484, 485, 486, 492, 494, 499, 502, 503, 504, 505, 507, 508, 510, 511, 532, 535, 542, 545, 549, 550, 551, 553, 560, 563, 564, 568, 570, 571, 587], "rang": [4, 8, 21, 27, 31, 53, 75, 88, 89, 261, 327, 362, 366, 367, 378, 380, 494, 502, 503, 508, 510, 532, 551, 555, 564, 568, 571, 572, 573, 582, 588], "log": [4, 7, 8, 13, 27, 30, 31, 36, 50, 89, 214, 216, 362, 365, 366, 419, 543, 549, 550, 553, 558, 561, 562, 564, 566, 568, 571], "space": [4, 8, 9, 27, 30, 31, 32, 75, 88, 89, 261, 265, 358, 362, 366, 367, 368, 535, 566], "sequenc": [4, 8, 12, 13, 15, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 54, 56, 58, 61, 63, 64, 65, 66, 67, 68, 69, 84, 87, 89, 92, 94, 98, 111, 113, 126, 130, 131, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 294, 298, 299, 311, 312, 313, 315, 317, 318, 326, 327, 347, 349, 355, 362, 366, 367, 368, 369, 370, 372, 374, 380, 381, 385, 386, 387, 388, 389, 390, 392, 394, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 428, 431, 432, 433, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 449, 450, 459, 466, 476, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 543, 550, 551, 552, 553, 555, 564, 565, 566, 568, 573, 575, 585], "gener": [4, 7, 8, 12, 17, 23, 27, 30, 31, 35, 40, 46, 57, 75, 88, 89, 113, 206, 219, 230, 231, 362, 363, 365, 366, 369, 370, 372, 376, 380, 395, 419, 426, 450, 483, 484, 486, 487, 509, 523, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 567, 568, 570, 572, 573, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588], "relev": [4, 27, 57, 89, 362, 366, 532, 535, 541, 542, 543, 546, 549, 550, 551, 553, 560, 563, 564, 571, 580, 587, 588], "sampl": [4, 8, 17, 21, 27, 30, 31, 40, 44, 54, 88, 89, 362, 366, 376, 380, 483, 484, 485, 486, 509, 511, 559, 563, 564], "on_valu": [4, 27, 89, 92, 362], "off_valu": [4, 27, 89, 92, 362], "cuda": [4, 8, 17, 27, 31, 40, 53, 54, 55, 56, 57, 58, 88, 89, 92, 153, 154, 155, 168, 169, 362, 364, 366, 376, 483, 484, 485, 486, 532, 568, 576, 577, 587], "cpu": [4, 6, 8, 17, 27, 29, 31, 40, 53, 54, 55, 56, 57, 58, 75, 84, 86, 88, 89, 92, 93, 94, 98, 154, 156, 157, 158, 159, 163, 166, 168, 169, 172, 173, 175, 176, 362, 364, 366, 370, 376, 410, 483, 484, 485, 486, 518, 532, 543, 552, 562, 564, 576, 580, 582, 585, 587], "evenli": [4, 8, 12, 15, 25, 27, 30, 35, 38, 75, 88, 89, 362, 366, 369, 372, 385, 386, 387, 388, 390, 392, 394, 444], "descript": [4, 7, 13, 30, 36, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 277, 282, 284, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 541, 554, 560], "hint": [4, 7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 277, 282, 284, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 541, 546, 554, 557, 558, 561, 562, 565], "assum": [4, 7, 8, 13, 30, 31, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 277, 282, 284, 292, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 545, 547, 548, 550, 551, 554, 563, 564, 566, 570, 571, 576], "simplic": [4, 7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 277, 282, 284, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 554, 566, 572, 575], "nestabl": [4, 7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 262, 263, 268, 277, 282, 284, 286, 298, 313, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 544, 553, 554, 561, 564, 577], "therefor": [4, 7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 113, 129, 132, 136, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 262, 263, 268, 277, 282, 284, 286, 298, 313, 318, 355, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 478, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 534, 538, 541, 543, 545, 546, 549, 550, 551, 552, 553, 554, 555, 557, 558, 561, 562, 563, 564, 565, 566, 568, 570, 572, 576, 579, 582, 588], "01": [4, 8, 9, 10, 31, 32, 33, 36, 40, 89, 216, 231, 232, 265, 311, 345, 346, 351, 362, 365, 366, 367, 368, 370, 376, 407, 422, 485, 486, 547, 573], "02": [4, 10, 16, 17, 30, 33, 40, 89, 181, 182, 216, 311, 345, 346, 351, 362, 365, 366, 367, 368, 375, 376, 478, 485, 486, 563], "03": [4, 7, 10, 30, 33, 40, 89, 194, 214, 311, 346, 351, 362, 365, 367, 368, 369, 370, 399, 409, 485], "04": [4, 10, 24, 28, 33, 63, 64, 89, 123, 200, 302, 345, 346, 351, 359, 362, 363, 365, 367, 368, 369, 399, 564], "05": [4, 7, 8, 10, 16, 30, 31, 33, 39, 56, 89, 216, 274, 284, 302, 345, 346, 351, 362, 365, 366, 367, 368, 370, 375, 412, 478, 516, 563, 564], "464": [4, 7, 40, 89, 183, 184, 362, 365], "15888336": [4, 89, 362], "2154": [4, 89, 362], "43469003": [4, 89, 362], "10000": [4, 27, 89, 362], "meshgrid": [4, 27, 362], "spars": [4, 14, 27, 37, 90, 362, 371, 433], "index": [4, 8, 9, 15, 18, 19, 20, 25, 27, 31, 32, 38, 41, 42, 43, 84, 90, 168, 251, 269, 273, 298, 299, 360, 362, 364, 366, 367, 372, 374, 377, 378, 379, 442, 446, 461, 462, 463, 466, 467, 468, 474, 476, 489, 490, 492, 494, 495, 496, 498, 499, 530, 549, 550, 558, 560, 563, 564, 570, 582], "xy": [4, 27, 90, 362], "dimension": [4, 8, 13, 15, 18, 21, 22, 25, 30, 31, 36, 38, 44, 45, 47, 75, 84, 90, 362, 366, 370, 372, 377, 380, 381, 401, 402, 408, 411, 414, 416, 417, 427, 428, 444, 489, 490, 492, 505, 506, 507, 508, 509, 510, 511, 512, 513, 560, 566, 568, 579, 582, 589], "repres": [4, 7, 8, 12, 13, 30, 31, 35, 36, 53, 90, 92, 122, 179, 180, 182, 185, 194, 234, 239, 358, 362, 363, 365, 366, 368, 369, 370, 395, 396, 416, 419, 420, 546, 566, 570, 579, 580, 583], "grid": [4, 90, 362, 553, 564, 575], "coordin": [4, 7, 18, 30, 31, 41, 90, 184, 362, 365, 366, 377, 492], "numer": [4, 5, 7, 9, 13, 17, 18, 21, 28, 30, 31, 32, 36, 40, 41, 43, 47, 48, 53, 90, 110, 177, 180, 192, 196, 200, 201, 202, 206, 207, 208, 210, 218, 219, 223, 224, 225, 226, 227, 230, 231, 232, 236, 237, 240, 241, 274, 275, 302, 303, 311, 312, 362, 363, 365, 366, 367, 370, 376, 377, 380, 401, 408, 411, 416, 419, 421, 423, 425, 427, 484, 485, 486, 488, 489, 490, 492, 493, 498, 505, 508, 510, 551, 559, 560, 562, 563, 564, 565, 566, 568, 572, 579, 582, 588], "conserv": [4, 90, 362], "cartesian": [4, 90, 362], "matrix": [4, 8, 9, 12, 13, 31, 32, 35, 36, 47, 53, 54, 90, 95, 96, 250, 256, 362, 366, 367, 369, 370, 396, 400, 402, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425, 426, 429, 541, 551, 558, 562, 580, 582], "ij": [4, 21, 90, 362, 380, 504], "zero": [4, 5, 7, 8, 10, 12, 13, 15, 18, 19, 21, 22, 27, 28, 30, 31, 33, 35, 36, 40, 41, 44, 45, 53, 54, 57, 63, 65, 66, 81, 82, 84, 90, 92, 94, 95, 96, 98, 110, 111, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 194, 195, 200, 201, 206, 207, 208, 209, 214, 218, 219, 221, 222, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 257, 261, 294, 345, 346, 351, 352, 353, 355, 359, 362, 363, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 390, 392, 394, 395, 396, 399, 400, 402, 407, 409, 410, 411, 412, 413, 414, 415, 417, 419, 427, 428, 437, 438, 439, 440, 443, 450, 478, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 497, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 536, 546, 549, 551, 552, 553, 557, 559, 560, 563, 568, 571, 572, 581], "vector": [4, 8, 9, 12, 13, 32, 35, 36, 54, 90, 257, 261, 286, 327, 362, 366, 367, 369, 370, 396, 401, 405, 406, 408, 411, 416, 421, 422, 426, 427, 428, 429, 575, 582], "respect": [4, 7, 8, 10, 13, 30, 31, 33, 36, 53, 90, 177, 180, 184, 186, 188, 189, 190, 191, 196, 197, 202, 204, 205, 210, 211, 216, 217, 219, 220, 223, 225, 230, 237, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 362, 365, 366, 368, 369, 370, 373, 385, 392, 393, 418, 421, 456, 457, 458, 518, 540, 541, 542, 543, 546, 549, 550, 551, 553, 557, 560, 562, 564, 565, 578, 588], "effect": [4, 8, 10, 21, 31, 33, 44, 90, 345, 353, 362, 366, 368, 380, 509, 511, 535, 541, 546, 549, 550, 554, 557, 561, 566, 576], "ignor": [4, 8, 25, 31, 57, 90, 362, 366, 370, 374, 410, 470, 471, 548, 550, 553, 564, 576, 588], "rank": [4, 8, 13, 15, 22, 31, 36, 38, 45, 90, 362, 366, 370, 372, 377, 381, 401, 403, 414, 418, 420, 425, 427, 428, 437, 438, 446, 449, 450, 492, 512, 513, 555], "length": [4, 8, 15, 25, 31, 38, 48, 52, 75, 90, 327, 362, 366, 367, 370, 372, 421, 422, 442, 556, 564, 571], "ni": [4, 90, 362], "xi": [4, 90, 362], "native_arrai": [4, 5, 7, 9, 27, 29, 30, 32, 43, 61, 64, 87, 90, 92, 94, 98, 110, 111, 112, 113, 121, 126, 132, 157, 165, 172, 186, 190, 191, 195, 196, 197, 202, 204, 205, 210, 211, 218, 223, 225, 228, 230, 235, 250, 288, 289, 291, 317, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 376, 377, 380, 381, 386, 387, 394, 398, 399, 402, 407, 413, 414, 422, 423, 425, 428, 431, 433, 435, 442, 483, 492, 500, 507, 510, 512, 518, 522, 559, 563, 564], "one_hot": [4, 27, 362, 532, 573], "depth": [4, 8, 12, 27, 31, 35, 52, 55, 92, 261, 279, 362, 366, 367, 369, 374, 390, 391, 471, 543, 550, 571, 572, 573, 575], "scatter": [4, 9, 27, 32, 92, 298, 299, 362, 367, 548, 566, 589], "defin": [4, 8, 9, 13, 27, 31, 32, 36, 92, 230, 284, 285, 362, 365, 366, 367, 370, 380, 401, 406, 407, 420, 505, 506, 507, 509, 532, 541, 542, 546, 550, 551, 554, 557, 560, 562, 563, 564, 565, 570, 572, 576, 577, 579, 580, 581, 582, 583, 586, 588, 589], "hot": [4, 27, 92, 362, 532], "dimens": [4, 8, 9, 12, 13, 14, 15, 17, 18, 19, 21, 22, 25, 27, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 54, 64, 68, 92, 95, 96, 261, 262, 263, 265, 277, 309, 327, 359, 362, 366, 367, 369, 370, 371, 372, 373, 376, 377, 378, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 456, 457, 458, 488, 489, 490, 492, 494, 495, 496, 497, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 553, 555, 558, 560, 562, 563, 564, 566, 568, 571], "overrid": [4, 27, 92, 362, 546, 548], "ones_lik": [4, 27, 362, 547, 573], "tril": [4, 27, 362], "m": [4, 8, 13, 17, 30, 31, 36, 40, 47, 90, 95, 96, 217, 362, 366, 370, 374, 376, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 467, 484, 485, 486, 532, 538, 542, 543, 544, 550, 568], "whose": [4, 7, 8, 9, 13, 15, 19, 21, 27, 30, 31, 32, 36, 38, 42, 44, 47, 87, 95, 96, 179, 182, 185, 193, 194, 195, 227, 228, 233, 234, 238, 239, 255, 313, 362, 365, 366, 367, 370, 372, 378, 380, 400, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 439, 443, 494, 495, 496, 503, 504, 554, 564], "innermost": [4, 13, 36, 95, 96, 362, 370, 400, 402, 404, 405, 406, 407, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425], "two": [4, 8, 13, 19, 31, 32, 36, 47, 48, 75, 84, 90, 95, 96, 135, 143, 190, 203, 231, 253, 362, 363, 365, 366, 367, 370, 372, 378, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 447, 494, 495, 496, 497, 536, 541, 542, 545, 546, 551, 553, 554, 562, 563, 564, 566, 567, 571, 573, 579, 587], "mxn": [4, 13, 36, 95, 96, 362, 370, 404, 412, 414, 415, 417, 418, 422, 425], "matric": [4, 13, 31, 36, 47, 90, 95, 96, 362, 366, 369, 370, 396, 400, 402, 404, 405, 406, 407, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425, 426, 558, 575, 582], "diagon": [4, 8, 13, 31, 36, 84, 95, 96, 362, 366, 370, 403, 425], "main": [4, 8, 13, 31, 36, 84, 95, 96, 362, 366, 370, 403, 404, 425, 542, 545, 548, 549, 556, 559, 580, 582, 583, 588], "lower": [4, 7, 8, 13, 17, 30, 31, 36, 40, 52, 53, 84, 95, 221, 362, 365, 366, 370, 376, 400, 407, 486, 532, 543, 553, 562, 564, 566, 568, 576, 577, 578, 579, 580, 582, 583, 588, 589], "triangular": [4, 13, 36, 95, 96, 362, 366, 370, 400, 407, 418], "alloc": [4, 5, 28, 95, 96, 110, 362, 363, 541, 543, 576], "triu": [4, 27, 362], "upper": [4, 8, 13, 17, 31, 36, 40, 52, 84, 96, 362, 366, 370, 376, 400, 407, 418, 486, 561, 564], "zeros_lik": [4, 27, 36, 110, 219, 345, 346, 349, 351, 353, 362, 363, 365, 368, 369, 372, 387, 389, 394, 417, 435, 562, 566], "data_typ": [5, 8, 28, 31, 139, 363, 548, 551, 564, 565], "_arraywithdatatyp": [5, 47], "astyp": [5, 12, 28, 35, 363, 369, 388, 390, 394, 532, 551, 561, 562, 566], "irrespect": [5, 13, 28, 36, 110, 363, 370, 421, 549, 561, 570, 589], "promot": [5, 7, 8, 13, 28, 30, 31, 36, 43, 47, 48, 110, 113, 135, 136, 137, 143, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 196, 199, 200, 202, 212, 213, 214, 215, 216, 220, 223, 227, 230, 233, 234, 235, 236, 237, 238, 239, 241, 363, 365, 366, 370, 372, 380, 400, 401, 408, 409, 411, 413, 414, 416, 417, 419, 420, 427, 428, 436, 446, 498, 506, 509, 545, 554, 555, 558], "rule": [5, 8, 13, 28, 30, 36, 110, 113, 135, 136, 137, 185, 196, 223, 230, 241, 363, 365, 366, 370, 372, 400, 401, 408, 413, 416, 420, 436, 545, 546, 549, 550, 551, 553, 556, 557, 558, 560, 564, 566, 583], "cast": [5, 8, 13, 21, 28, 31, 36, 110, 113, 137, 363, 366, 370, 380, 428, 502, 503, 508, 510, 551, 558, 563, 568], "nan": [5, 7, 8, 9, 19, 21, 28, 30, 31, 32, 110, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 194, 195, 199, 200, 201, 203, 206, 208, 212, 213, 214, 215, 216, 218, 227, 228, 230, 231, 233, 234, 235, 238, 239, 240, 282, 326, 360, 363, 365, 366, 367, 378, 380, 381, 494, 495, 496, 497, 505, 506, 507, 509, 510, 511, 512, 513, 545, 551, 554, 560, 565], "infin": [5, 7, 8, 9, 13, 28, 30, 31, 36, 110, 177, 179, 180, 182, 183, 184, 192, 193, 194, 199, 200, 201, 202, 206, 207, 212, 213, 214, 215, 216, 218, 227, 230, 231, 233, 234, 235, 238, 239, 240, 282, 360, 363, 365, 366, 367, 370, 380, 381, 419, 428, 505, 507, 512, 513, 545, 554], "implement": [5, 6, 8, 19, 20, 28, 29, 31, 36, 43, 110, 137, 172, 177, 178, 179, 181, 182, 183, 184, 193, 194, 199, 200, 212, 213, 214, 215, 227, 230, 233, 234, 238, 239, 363, 364, 365, 366, 370, 378, 379, 380, 405, 406, 407, 416, 494, 495, 496, 497, 498, 500, 505, 506, 507, 509, 532, 541, 544, 545, 546, 547, 549, 551, 552, 554, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 585, 588, 589], "match": [5, 8, 25, 28, 31, 110, 230, 294, 363, 365, 366, 367, 516, 541, 546, 548, 549, 553, 563, 583, 588], "newli": [5, 28, 110, 255, 363, 367, 543, 550, 561, 564], "float64": [5, 17, 21, 28, 31, 40, 44, 75, 86, 110, 113, 118, 123, 124, 127, 128, 132, 133, 137, 139, 140, 146, 149, 362, 363, 366, 376, 485, 486, 503, 518, 551, 563, 564], "broadcast_arrai": [5, 28, 363], "against": [5, 8, 13, 18, 28, 30, 31, 36, 41, 111, 222, 292, 363, 366, 367, 370, 377, 411, 412, 414, 417, 489, 534, 564, 568, 576, 582], "x2": [5, 7, 8, 9, 13, 18, 28, 30, 31, 32, 36, 41, 47, 48, 94, 98, 111, 136, 143, 165, 180, 184, 186, 188, 189, 190, 191, 196, 197, 202, 203, 204, 205, 210, 211, 216, 217, 219, 220, 221, 222, 223, 225, 227, 230, 237, 241, 250, 362, 363, 364, 365, 366, 367, 370, 377, 401, 408, 411, 416, 420, 423, 424, 427, 493, 518, 526, 545, 551, 553, 555, 557, 561, 562], "x3": [5, 9, 94, 98, 111, 250, 362, 363, 367], "mix": [5, 7, 28, 30, 32, 37, 40, 47, 48, 111, 137, 186, 189, 190, 191, 196, 197, 202, 204, 205, 210, 211, 220, 223, 225, 230, 264, 268, 269, 286, 315, 318, 363, 365, 366, 367, 369, 370, 371, 372, 375, 377, 380, 386, 388, 391, 394, 396, 398, 399, 400, 423, 431, 433, 435, 478, 493, 504, 506, 509, 544, 553, 559, 561, 564, 566, 568, 577, 582, 586, 588], "broadcast_to": [5, 28, 363, 551], "can_cast": [5, 28, 363, 551, 558, 562], "occur": [5, 8, 19, 28, 31, 42, 113, 363, 366, 377, 378, 489, 490, 494, 495, 496, 497, 545, 550, 555], "accord": [5, 9, 15, 21, 28, 38, 44, 113, 123, 180, 190, 268, 273, 298, 299, 363, 365, 366, 367, 370, 372, 380, 427, 437, 450, 509, 511, 526, 541, 542, 545, 551, 558, 562, 564], "as_n": [5, 6, 25, 28, 29, 116, 117, 118, 119, 120, 121, 127, 156, 157, 168, 363, 364, 551], "int32": [5, 9, 17, 18, 21, 28, 32, 40, 41, 84, 94, 98, 110, 113, 115, 119, 121, 124, 126, 127, 131, 132, 133, 137, 141, 145, 147, 167, 269, 286, 317, 362, 363, 364, 366, 367, 376, 377, 380, 484, 485, 486, 490, 502, 503, 508, 510, 551, 562, 564, 568], "finfo": [5, 28, 363, 564], "inform": [5, 10, 28, 33, 123, 126, 251, 355, 363, 367, 368, 532, 540, 541, 542, 543, 545, 549, 550, 555, 564, 585], "about": [5, 28, 123, 126, 363, 532, 536, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 557, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 576, 583, 584, 587], "8": [5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 54, 61, 67, 86, 87, 91, 94, 98, 116, 118, 119, 120, 123, 158, 173, 180, 181, 182, 186, 187, 190, 192, 194, 202, 204, 205, 210, 211, 216, 218, 219, 221, 222, 223, 227, 228, 230, 231, 232, 235, 236, 239, 240, 254, 255, 257, 261, 262, 265, 268, 277, 284, 285, 286, 288, 289, 291, 298, 299, 311, 313, 345, 348, 350, 353, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 386, 390, 391, 394, 395, 396, 398, 402, 403, 404, 407, 411, 412, 413, 416, 419, 421, 422, 423, 425, 426, 428, 431, 432, 433, 435, 439, 446, 447, 449, 460, 467, 483, 484, 485, 486, 488, 493, 494, 496, 498, 500, 503, 504, 506, 508, 510, 511, 542, 549, 550, 553, 560, 564, 567, 571], "14": [5, 7, 8, 12, 17, 21, 28, 30, 31, 32, 35, 36, 38, 40, 110, 123, 126, 178, 182, 184, 191, 195, 216, 219, 223, 228, 234, 241, 311, 345, 363, 365, 366, 367, 368, 369, 370, 372, 378, 380, 386, 387, 389, 391, 395, 399, 404, 416, 425, 449, 484, 485, 486, 494, 503, 504, 549, 553, 564], "resolut": [5, 28, 123, 363, 543], "1e": [5, 8, 10, 13, 14, 16, 28, 31, 33, 36, 37, 39, 56, 57, 123, 274, 275, 302, 303, 311, 345, 346, 351, 353, 363, 366, 367, 368, 370, 371, 375, 421, 431, 432, 433, 478, 516, 518, 532, 549, 558, 561, 563, 572, 573], "06": [5, 17, 30, 33, 61, 123, 179, 194, 351, 359, 363, 366, 368, 486, 516, 518, 564, 571], "min": [5, 8, 9, 13, 21, 28, 31, 32, 36, 44, 123, 126, 222, 262, 298, 299, 311, 363, 365, 366, 367, 370, 380, 412, 418, 421, 422, 428, 532], "4028235e": [5, 123, 363], "38": [5, 8, 30, 31, 40, 123, 238, 363, 365, 366, 370, 413, 553], "max": [5, 8, 9, 13, 21, 28, 31, 32, 36, 44, 57, 123, 126, 221, 256, 257, 262, 286, 298, 299, 363, 365, 366, 367, 370, 380, 412, 414, 417, 550, 562, 564], "iinfo": [5, 28, 363, 556], "integ": [5, 7, 8, 12, 13, 15, 17, 21, 22, 25, 30, 31, 35, 36, 38, 40, 44, 45, 47, 48, 75, 86, 126, 127, 132, 136, 137, 141, 177, 186, 187, 188, 189, 190, 191, 192, 201, 202, 220, 227, 230, 231, 240, 241, 273, 327, 362, 363, 365, 366, 367, 369, 370, 372, 376, 379, 380, 381, 385, 386, 387, 388, 390, 392, 394, 403, 413, 427, 428, 444, 483, 484, 485, 486, 487, 488, 499, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 523, 543, 549, 551, 559, 560, 563, 564, 568, 570], "119": [5, 126], "122": [5, 126, 194, 365], "int8": [5, 17, 28, 40, 119, 124, 126, 127, 131, 363, 484, 551, 564], "128": [5, 8, 12, 28, 31, 35, 48, 126, 261, 273, 363, 366, 367, 369, 370, 387, 389, 394, 416], "127": [5, 8, 28, 31, 126, 363, 366], "12": [5, 7, 8, 9, 12, 13, 17, 21, 28, 30, 31, 32, 35, 36, 38, 39, 40, 44, 47, 48, 126, 180, 181, 186, 190, 191, 194, 196, 197, 198, 211, 223, 225, 231, 234, 240, 241, 257, 261, 262, 275, 298, 299, 303, 311, 365, 366, 367, 369, 370, 372, 375, 376, 377, 378, 380, 386, 390, 395, 396, 404, 412, 416, 423, 425, 439, 443, 445, 447, 449, 478, 484, 485, 486, 493, 494, 502, 503, 504, 508, 510, 542, 547, 549, 551, 553, 560, 565], "54": [5, 7, 12, 30, 31, 35, 40, 126, 193, 194, 199, 235, 240, 365, 366, 369, 370, 380, 396, 399, 413, 416, 484, 485, 486, 504, 553], "1220": [5, 126], "int16": [5, 17, 21, 28, 40, 113, 119, 124, 126, 132, 147, 363, 380, 484, 502, 503, 508, 510, 551, 562, 564, 568], "32768": [5, 28, 126], "32767": [5, 28, 126], "is_bool_dtyp": [5, 28, 363], "is_float_dtyp": [5, 28, 363, 565], "see": [5, 7, 13, 18, 19, 21, 22, 30, 31, 36, 41, 44, 45, 47, 48, 75, 85, 88, 112, 131, 137, 180, 184, 186, 188, 189, 190, 191, 196, 197, 200, 202, 204, 205, 210, 211, 214, 216, 217, 219, 220, 223, 225, 227, 230, 237, 241, 362, 363, 365, 366, 370, 377, 378, 380, 381, 401, 414, 417, 420, 427, 428, 490, 494, 495, 496, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 534, 537, 541, 542, 543, 545, 546, 548, 549, 550, 552, 553, 557, 558, 562, 563, 564, 565, 566, 568, 570, 571, 575, 576, 578], "is_int_dtyp": [5, 28, 363, 563, 565], "is_uint_dtyp": [5, 28, 363, 563, 565], "result_typ": [5, 28, 363, 551], "arrays_and_dtyp": [5, 28, 137, 363], "involv": [5, 28, 137, 180, 363, 365, 535, 537, 544, 550, 551, 553, 566, 573, 582, 588], "_arraywithdevic": [6, 47], "dev": [6, 25, 29, 93, 161, 167, 362, 364, 542, 552, 558, 570, 572], "handl": [6, 8, 25, 29, 31, 48, 57, 153, 154, 155, 156, 157, 161, 165, 166, 173, 176, 364, 366, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 566, 572, 579, 589], "to_devic": [6, 29, 156, 364, 532], "move": [6, 8, 29, 31, 172, 364, 366, 532, 543, 565], "__dlpack__": [6, 29, 85, 172, 362, 364], "mai": [6, 7, 8, 13, 19, 20, 29, 30, 36, 43, 47, 48, 75, 85, 172, 197, 205, 211, 218, 219, 225, 260, 362, 364, 365, 366, 367, 370, 378, 379, 380, 419, 428, 494, 495, 496, 497, 498, 500, 505, 506, 507, 509, 536, 540, 541, 542, 543, 545, 549, 550, 551, 555, 558, 560, 561, 562, 563, 564, 566, 569, 570, 572, 589], "caveat": [6, 29, 172, 364], "portabl": [6, 29, 172, 364, 532, 580], "_arraywithelementwis": [7, 47], "ab": [7, 13, 23, 30, 46, 47, 48, 227, 365, 366, 370, 374, 412, 422, 428, 467, 470, 518, 546, 551, 559, 562, 564], "absolut": [7, 8, 13, 23, 25, 30, 31, 36, 47, 177, 365, 366, 370, 412, 413, 414, 419, 516, 518, 537, 542, 566], "aco": [7, 30, 365], "real": [7, 8, 21, 30, 31, 44, 178, 179, 181, 183, 184, 196, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 223, 227, 230, 235, 236, 237, 239, 240, 241, 365, 366, 370, 380, 405, 419, 505, 507, 509, 549, 584], "invers": [7, 8, 13, 30, 31, 36, 178, 179, 181, 182, 183, 184, 185, 365, 366, 370, 409, 413, 417, 526, 551, 575], "cosin": [7, 30, 178, 179, 193, 194, 365, 366], "57": [7, 30, 158, 178, 179, 181, 182, 184, 194, 195, 228, 364, 365], "69": [7, 33, 40, 178, 214, 349, 365, 366, 368, 370, 412, 413, 485, 564, 571], "acosh": [7, 30, 124, 125, 363, 365], "area": [7, 8, 30, 31, 179, 182, 185, 365, 366, 535, 561, 566, 574, 578], "hyperbol": [7, 30, 179, 182, 185, 194, 234, 239, 365], "sector": [7, 30, 179, 182, 185, 365, 535], "32": [7, 8, 17, 30, 31, 36, 40, 47, 48, 63, 122, 179, 190, 191, 231, 232, 261, 285, 359, 363, 365, 366, 367, 369, 370, 376, 377, 380, 387, 389, 390, 391, 394, 396, 411, 416, 484, 485, 486, 493, 504, 532, 550, 560, 571, 587], "99": [7, 10, 28, 30, 40, 86, 179, 193, 311, 349, 362, 365, 367, 368, 380, 485, 504], "add": [7, 16, 23, 25, 30, 39, 46, 47, 48, 56, 294, 319, 354, 358, 365, 366, 367, 368, 375, 478, 518, 523, 532, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 557, 558, 561, 562, 564, 565, 566, 568, 570, 576, 578, 580, 582], "second": [7, 8, 10, 13, 15, 19, 30, 31, 32, 33, 36, 38, 42, 47, 48, 57, 135, 143, 180, 184, 186, 188, 189, 190, 191, 197, 202, 203, 204, 205, 210, 211, 216, 217, 219, 220, 223, 225, 227, 237, 253, 278, 305, 323, 345, 346, 351, 363, 365, 366, 367, 368, 370, 372, 373, 374, 378, 401, 404, 405, 406, 408, 411, 416, 418, 419, 421, 423, 427, 446, 447, 457, 460, 494, 495, 496, 536, 542, 545, 548, 551, 553, 561, 562, 564, 570, 587], "compat": [7, 13, 15, 18, 21, 22, 30, 36, 38, 41, 44, 45, 47, 48, 112, 180, 184, 186, 188, 189, 190, 191, 196, 197, 202, 204, 205, 210, 211, 216, 217, 219, 220, 223, 225, 227, 230, 237, 241, 363, 365, 370, 372, 377, 380, 381, 401, 414, 417, 420, 423, 427, 428, 442, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 535, 547, 557, 562, 563, 565, 568, 576], "multipli": [7, 8, 12, 21, 30, 31, 35, 180, 237, 365, 366, 369, 380, 395, 502, 543, 546, 547, 549, 553], "determin": [7, 8, 13, 15, 19, 22, 25, 30, 31, 32, 36, 43, 45, 47, 48, 53, 84, 113, 115, 122, 128, 129, 130, 131, 132, 133, 134, 149, 162, 163, 164, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 196, 199, 200, 202, 206, 207, 208, 209, 212, 213, 214, 215, 216, 220, 223, 227, 230, 233, 234, 235, 236, 237, 238, 239, 241, 250, 253, 282, 283, 287, 288, 289, 290, 291, 313, 326, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 378, 381, 398, 400, 401, 402, 404, 408, 409, 411, 413, 414, 416, 417, 419, 420, 425, 427, 428, 436, 456, 457, 458, 494, 495, 496, 497, 498, 512, 513, 523, 534, 549, 551, 552, 554, 558, 562, 566], "15": [7, 8, 9, 13, 17, 21, 27, 28, 30, 31, 32, 35, 36, 38, 40, 44, 48, 87, 123, 180, 186, 190, 196, 204, 210, 216, 223, 230, 231, 232, 257, 261, 262, 265, 278, 284, 285, 305, 311, 323, 362, 363, 365, 366, 367, 369, 370, 372, 374, 376, 377, 378, 380, 386, 396, 404, 407, 409, 416, 422, 423, 443, 449, 459, 484, 485, 492, 494, 502, 503, 504, 518, 542, 553, 560, 585], "asin": [7, 30, 365], "sine": [7, 30, 181, 182, 233, 234, 365], "927": [7, 30, 181], "asinh": [7, 30, 365], "atan": [7, 30, 365], "tangent": [7, 30, 183, 184, 185, 238, 239, 365, 554], "785": [7, 30, 183, 184, 365], "atan2": [7, 30, 365], "quotient": [7, 30, 184, 365], "245": [7, 35, 184, 369, 395, 396], "68": [7, 40, 64, 86, 184, 359, 362, 365, 366, 375, 478, 485, 486], "588": [7, 184, 365], "inf": [7, 8, 9, 13, 30, 31, 32, 36, 184, 200, 206, 207, 208, 209, 212, 213, 282, 326, 360, 365, 366, 367, 370, 412, 428, 551, 560], "36": [7, 8, 12, 21, 31, 32, 36, 184, 231, 232, 261, 262, 365, 366, 367, 370, 374, 380, 396, 413, 416, 422, 426, 470, 504], "75": [7, 8, 30, 31, 32, 35, 40, 88, 182, 184, 196, 263, 284, 311, 362, 365, 366, 367, 370, 374, 376, 386, 409, 416, 467, 486], "52": [7, 30, 32, 33, 40, 184, 194, 196, 261, 262, 285, 345, 365, 367, 368, 369, 370, 380, 396, 416, 486, 504], "719": [7, 184, 365], "197": [7, 184, 365], "atanh": [7, 30, 365], "549": [7, 30, 35, 185, 365, 369, 396], "47": [7, 8, 17, 30, 31, 32, 33, 40, 185, 235, 261, 262, 349, 365, 366, 367, 368, 369, 376, 396, 485, 486], "bitwise_and": [7, 30, 365, 555], "11": [7, 8, 9, 12, 13, 17, 21, 30, 31, 32, 35, 36, 38, 40, 44, 48, 180, 183, 186, 200, 230, 231, 237, 255, 261, 262, 268, 285, 299, 365, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 380, 386, 387, 395, 396, 404, 407, 409, 411, 412, 416, 421, 422, 433, 439, 444, 445, 447, 449, 465, 467, 477, 484, 485, 486, 493, 494, 502, 503, 504, 511, 549, 550, 551, 553, 560, 565], "bitwise_invert": [7, 30, 365], "bitiwse_invert": [7, 187], "bitwise_left_shift": [7, 30, 365], "bitwise_or": [7, 30, 365], "bitwise_right_shift": [7, 30, 47, 365], "64": [7, 8, 12, 30, 31, 32, 35, 36, 40, 44, 48, 54, 122, 190, 227, 235, 236, 261, 262, 351, 363, 365, 366, 367, 368, 369, 370, 380, 387, 389, 391, 394, 413, 416, 422, 426, 485, 504, 508, 532, 542, 571, 572, 587], "16": [7, 8, 9, 12, 13, 17, 21, 28, 30, 31, 32, 35, 36, 38, 40, 47, 48, 126, 190, 214, 231, 238, 262, 265, 311, 357, 363, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 380, 394, 396, 400, 404, 407, 416, 422, 449, 467, 484, 485, 486, 493, 503, 504, 532, 543, 553, 571], "bitwise_xor": [7, 30, 47, 365], "89": [7, 17, 28, 30, 31, 40, 48, 126, 191, 363, 365, 366, 370, 380, 423, 485, 486, 510], "51": [7, 8, 30, 31, 32, 40, 191, 223, 234, 365, 366, 486], "18": [7, 8, 17, 30, 31, 35, 36, 40, 44, 64, 191, 196, 230, 234, 359, 365, 366, 370, 376, 380, 390, 404, 411, 416, 484, 485, 486, 503, 504, 508, 549, 553, 555], "19": [7, 8, 17, 30, 31, 36, 40, 182, 191, 214, 223, 238, 365, 366, 370, 374, 376, 379, 404, 412, 425, 470, 484, 485, 486, 500, 553], "26": [7, 8, 16, 17, 31, 32, 33, 40, 191, 196, 234, 284, 345, 365, 366, 367, 368, 369, 370, 374, 375, 380, 394, 404, 416, 423, 460, 478, 484, 485, 504], "27": [7, 8, 13, 17, 30, 31, 35, 36, 40, 44, 190, 191, 194, 227, 234, 235, 285, 365, 366, 367, 369, 370, 374, 380, 399, 411, 416, 426, 460, 467, 485, 504, 508], "23": [7, 8, 12, 17, 27, 30, 31, 32, 40, 87, 191, 194, 207, 208, 209, 230, 231, 232, 234, 240, 362, 365, 366, 369, 370, 374, 377, 391, 399, 404, 412, 422, 460, 467, 484, 485, 486, 493, 532, 564, 568], "20": [7, 8, 12, 17, 21, 30, 31, 32, 35, 36, 40, 44, 191, 195, 199, 228, 231, 235, 261, 269, 273, 299, 311, 365, 366, 367, 370, 376, 377, 380, 386, 387, 397, 404, 409, 412, 416, 423, 484, 492, 493, 502, 503, 504, 508, 510, 532, 550, 555, 566, 570], "74": [7, 40, 191, 216, 365, 366, 370, 413], "41": [7, 8, 30, 31, 32, 36, 64, 183, 191, 223, 235, 256, 257, 359, 365, 366, 367, 370, 380, 400, 510], "59": [7, 191], "24": [7, 8, 13, 21, 31, 32, 35, 36, 40, 47, 191, 211, 223, 231, 232, 235, 261, 262, 365, 366, 367, 370, 374, 380, 386, 404, 412, 416, 460, 484, 485, 486, 502, 504, 518, 571], "ceil": [7, 30, 75, 362, 365, 561], "round": [7, 8, 30, 31, 180, 192, 201, 202, 235, 240, 241, 365, 366, 534, 535, 536, 538, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "co": [7, 9, 30, 265, 365, 367, 535, 540, 551, 568, 575], "express": [7, 8, 30, 31, 178, 181, 183, 184, 193, 195, 228, 233, 238, 365, 366, 526, 554, 556, 562, 568, 573, 582, 583], "radian": [7, 8, 30, 31, 178, 181, 183, 184, 193, 195, 228, 233, 238, 365, 366, 554], "416": [7, 193, 365], "540": [7, 193], "990": [7, 193], "cosh": [7, 30, 365], "angl": [7, 8, 30, 31, 184, 194, 234, 239, 365, 366, 575], "76": [7, 21, 28, 30, 40, 126, 179, 194, 234, 363, 365, 370, 374, 380, 423, 467, 485, 504], "81": [7, 28, 30, 36, 40, 126, 194, 214, 236, 363, 365, 370, 374, 376, 380, 413, 426, 467, 486, 504, 564], "deg2rad": [7, 30, 365], "degre": [7, 8, 21, 30, 31, 44, 195, 228, 365, 366, 380, 509, 511, 581], "convers": [7, 8, 31, 195, 228, 300, 307, 367, 536, 541, 559, 567, 569, 573, 575, 576, 577, 581, 588], "90": [7, 8, 30, 31, 191, 195, 228, 231, 365, 366, 370, 380, 416, 504, 535], "180": [7, 30, 195, 228, 365], "270": [7, 30, 195, 228, 365], "360": [7, 30, 195, 228, 365, 550], "71": [7, 30, 195, 228, 365], "28": [7, 12, 16, 30, 31, 32, 35, 36, 40, 44, 195, 214, 228, 284, 345, 365, 366, 367, 368, 369, 370, 375, 380, 387, 389, 391, 394, 396, 416, 478, 484, 485, 486, 504, 508, 532], "divid": [7, 8, 9, 15, 25, 30, 31, 38, 47, 48, 202, 311, 365, 366, 367, 372, 444, 546, 549, 553, 564], "dividend": [7, 30, 196, 202, 230, 241, 365], "divisor": [7, 8, 10, 21, 30, 31, 33, 44, 57, 196, 202, 204, 230, 241, 345, 346, 351, 365, 366, 368, 380, 509, 511], "375": [7, 197, 225], "erf": [7, 30, 365], "exponenti": [7, 8, 30, 31, 198, 199, 216, 227, 365, 366], "gauss": [7, 30, 198, 365], "error": [7, 8, 25, 30, 31, 55, 57, 61, 198, 359, 365, 366, 370, 380, 419, 422, 505, 507, 536, 540, 542, 543, 545, 546, 547, 550, 551, 552, 553, 555, 556, 557, 562, 564, 565, 570, 576, 582], "328": [7, 198, 238, 365], "677": [7, 198, 365], "842": [7, 198, 238, 365], "exp": [7, 8, 30, 31, 200, 216, 365, 366, 370, 419, 560, 562], "evalu": [7, 25, 30, 31, 199, 200, 212, 213, 214, 215, 218, 224, 226, 232, 236, 357, 365, 366, 368, 374, 381, 469, 470, 512, 513, 543, 549, 551, 558, 559, 566, 582], "71828198": [7, 30, 199], "38905573": [7, 30, 199], "08553696": [7, 30, 199], "expm1": [7, 30, 365, 551], "244": [7, 200, 366, 532], "918": [7, 200], "48": [7, 8, 30, 31, 32, 33, 40, 63, 179, 200, 235, 284, 345, 349, 359, 365, 366, 367, 368, 370, 374, 380, 416, 460, 485, 504], "_": [7, 25, 30, 33, 113, 200, 206, 219, 231, 261, 345, 346, 363, 365, 366, 367, 368, 370, 372, 374, 380, 419, 422, 429, 450, 466, 509, 538, 549, 554, 556, 561, 564, 571], "147": [7, 200, 365], "floor": [7, 8, 30, 190, 365, 366, 561], "floor_divid": [7, 30, 365, 523], "greater": [7, 8, 17, 30, 31, 40, 47, 48, 178, 181, 184, 188, 190, 201, 202, 227, 230, 232, 240, 365, 366, 370, 372, 376, 401, 413, 445, 486, 543, 563], "greater_equ": [7, 30, 47, 48, 216, 365], "isfinit": [7, 30, 365, 562], "out_i": [7, 30, 31, 206, 207, 208, 209, 365, 366], "self_i": [7, 30, 31, 206, 207, 208, 209], "finit": [7, 8, 30, 31, 180, 184, 206, 227, 230, 365, 366], "isinf": [7, 30, 365], "detect_posit": [7, 30, 207, 365], "detect_neg": [7, 30, 207, 365], "detect": [7, 25, 30, 207, 365, 374, 459, 470, 541, 542, 547, 549, 550, 556, 564, 571, 572], "isnan": [7, 30, 365], "isreal": [7, 30, 365], "1j": [7, 8, 30, 31, 209, 311, 366, 367], "5j": [7, 30, 31, 209, 365, 366], "6j": [7, 8, 31, 209, 365, 366], "less": [7, 8, 13, 17, 21, 30, 31, 36, 40, 47, 48, 178, 179, 181, 184, 192, 212, 213, 214, 215, 227, 230, 232, 235, 365, 366, 370, 376, 380, 413, 414, 417, 428, 486, 509, 511, 535, 543, 549, 551, 553, 555, 557, 561, 562, 564, 566, 567, 568, 582, 584], "less_equ": [7, 30, 47, 48, 365, 555], "61": [7, 8, 30, 31, 33, 37, 40, 182, 212, 214, 236, 345, 365, 366, 368, 369, 371, 394, 431, 433, 486], "log10": [7, 30, 365], "logarithm": [7, 30, 199, 212, 213, 214, 215, 216, 365, 370, 419], "602": [7, 213, 365], "699": [7, 213, 365], "log1p": [7, 30, 365, 560], "693": [7, 30, 68, 182, 214, 359, 365, 371, 433], "001": [7, 8, 16, 28, 31, 33, 67, 123, 214, 346, 359, 363, 366, 368, 375, 478, 571, 572], "0953": [7, 30, 212, 214, 365], "log2": [7, 30, 365, 366], "logaddexp": [7, 30, 365], "logical_and": [7, 30, 365, 562, 566, 589], "logical_not": [7, 30, 365, 551], "logical_or": [7, 30, 365, 589], "conform": [7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 113, 123, 126, 137, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 362, 363, 365, 366, 370, 372, 377, 378, 379, 380, 381, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 436, 438, 439, 440, 442, 443, 445, 446, 450, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 554], "api": [7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 113, 123, 126, 135, 137, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 362, 363, 365, 366, 370, 372, 377, 378, 379, 380, 381, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 436, 438, 439, 440, 442, 443, 445, 446, 450, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 533, 534, 542, 544, 546, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 566, 567, 569, 571, 576, 577, 578, 580, 582, 584, 587, 589], "extens": [7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 113, 123, 126, 137, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 362, 363, 365, 370, 372, 377, 378, 379, 380, 381, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 436, 438, 439, 440, 442, 443, 445, 446, 450, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 538, 540, 542, 543, 554, 564, 579, 582, 589], "api_specif": [7, 30, 113, 206, 219, 231, 363, 365, 372, 380, 450, 509, 554], "signatur": [7, 30, 113, 206, 219, 231, 363, 365, 366, 370, 372, 380, 419, 450, 509, 535, 551, 552, 553, 554, 557, 561, 564, 565, 566, 579, 588], "elementwise_funct": [7, 30, 206, 219, 231, 365, 554], "html": [7, 30, 113, 206, 219, 231, 363, 365, 366, 370, 372, 380, 419, 450, 509, 535, 548, 554], "noqa": [7, 13, 30, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 113, 123, 126, 137, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 204, 205, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 327, 362, 363, 365, 366, 367, 370, 372, 377, 378, 379, 380, 381, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 436, 438, 439, 440, 442, 443, 445, 446, 450, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 505, 507, 508, 509, 510, 511, 512, 513, 563], "logical_xor": [7, 30, 365], "maximum": [7, 8, 9, 10, 15, 18, 21, 25, 30, 31, 32, 33, 38, 41, 44, 48, 171, 256, 257, 265, 351, 364, 365, 366, 367, 368, 370, 372, 374, 377, 380, 412, 435, 471, 489, 505, 507, 523, 543, 553, 561, 571, 589], "use_wher": [7, 30, 221, 222, 365], "formula": [7, 30, 221, 222, 365], "clip": [7, 8, 15, 30, 31, 32, 38, 221, 222, 256, 257, 365, 366, 367, 372, 549, 558, 560, 561, 571, 573], "than": [7, 8, 9, 13, 15, 17, 18, 19, 21, 25, 30, 31, 32, 36, 38, 40, 41, 42, 44, 47, 48, 75, 123, 171, 178, 179, 181, 184, 188, 190, 192, 201, 202, 212, 213, 214, 215, 221, 227, 230, 232, 235, 240, 288, 289, 291, 362, 363, 364, 365, 366, 367, 370, 372, 376, 377, 378, 380, 401, 411, 413, 414, 417, 428, 435, 439, 445, 486, 492, 494, 495, 496, 497, 502, 503, 508, 509, 510, 511, 535, 538, 543, 545, 549, 550, 551, 553, 555, 561, 562, 563, 564, 565, 566, 568, 571, 572, 573, 576, 579, 580, 581, 582, 588, 589], "minimum": [7, 8, 9, 15, 18, 21, 30, 31, 32, 38, 41, 44, 177, 274, 275, 302, 303, 311, 312, 365, 366, 367, 372, 377, 380, 435, 490, 505, 507, 523, 579, 585, 589], "exce": [7, 8, 31, 222, 365, 366], "product": [7, 12, 13, 21, 30, 31, 35, 36, 44, 54, 223, 365, 366, 369, 370, 380, 398, 399, 401, 408, 411, 416, 427, 502, 503, 504, 508, 509, 541, 568, 582, 584], "30": [7, 8, 31, 32, 40, 44, 48, 53, 223, 261, 263, 269, 284, 285, 299, 305, 311, 365, 366, 367, 370, 374, 380, 409, 416, 468, 484, 485, 503, 504, 508, 550], "56": [7, 8, 12, 17, 30, 31, 35, 89, 223, 235, 238, 240, 345, 362, 365, 366, 368, 369, 370, 374, 380, 387, 389, 391, 396, 416, 422, 459, 485, 504, 553], "21": [7, 8, 9, 17, 27, 30, 31, 36, 40, 44, 47, 89, 126, 180, 182, 184, 190, 191, 223, 299, 362, 363, 365, 366, 370, 371, 374, 380, 404, 416, 433, 465, 484, 485, 502, 503, 504, 560], "not_equ": [7, 30, 47, 48, 365], "pow": [7, 30, 47, 48, 365, 545], "expon": [7, 8, 9, 31, 32, 227, 312, 365, 366, 367, 370, 413], "25": [7, 9, 13, 14, 17, 21, 24, 30, 31, 32, 35, 36, 39, 40, 44, 47, 48, 69, 88, 180, 190, 196, 198, 223, 227, 229, 231, 234, 235, 236, 240, 284, 285, 299, 311, 362, 365, 366, 367, 370, 371, 374, 375, 380, 386, 400, 404, 409, 426, 428, 432, 460, 478, 484, 485, 486, 503, 504, 506, 511, 549, 560], "rad2deg": [7, 30, 365], "286": [7, 31, 228], "458": [7, 228], "573": [7, 228, 365], "reciproc": [7, 30, 365], "333": [7, 30, 196, 229, 257, 365, 367, 369, 394], "remaind": [7, 8, 15, 25, 30, 31, 38, 203, 365, 372, 444, 545, 561], "modulu": [7, 30, 230, 365, 561], "sign": [7, 8, 13, 19, 21, 30, 31, 36, 75, 177, 180, 184, 190, 230, 362, 365, 366, 370, 378, 380, 419, 494, 495, 496, 497, 502, 503, 508, 510, 535, 542, 568, 573], "x2_i": [7, 30, 180, 184, 186, 188, 189, 190, 191, 196, 197, 202, 204, 205, 210, 211, 216, 217, 219, 220, 223, 225, 227, 230, 237, 365, 545], "94": [7, 10, 17, 30, 33, 40, 166, 231, 232, 349, 364, 366, 368, 486], "256": [7, 231, 232, 369, 387, 389, 391], "0001": [7, 57, 231, 232], "67": [7, 9, 30, 32, 40, 47, 191, 194, 231, 232, 234, 240, 261, 262, 311, 348, 350, 357, 365, 367, 368, 486], "45": [7, 8, 21, 30, 31, 33, 40, 48, 184, 196, 231, 232, 345, 351, 365, 366, 368, 370, 372, 380, 416, 444, 485, 486, 504], "678": [7, 231, 232], "33": [7, 17, 21, 30, 32, 33, 35, 182, 183, 190, 231, 257, 311, 349, 365, 366, 367, 368, 369, 370, 374, 380, 395, 396, 416, 477, 484, 504, 511], "sin": [7, 9, 30, 265, 365, 367, 546, 568], "841": [7, 24, 30, 61, 233, 359, 365], "909": [7, 30, 32, 233, 365], "141": [7, 30, 110, 233, 363, 365], "sinh": [7, 30, 365], "63": [7, 24, 30, 36, 69, 228, 234, 235, 365, 366, 370, 374, 380, 400, 416, 460, 504], "232": [7, 30, 234, 365], "sqrt": [7, 8, 30, 31, 53, 365, 366], "squar": [7, 13, 30, 36, 235, 347, 348, 350, 357, 365, 366, 368, 370, 374, 400, 402, 403, 405, 406, 407, 409, 413, 419, 420, 421, 426, 465], "root": [7, 30, 52, 235, 365, 539, 542, 543, 548, 562, 571], "73": [7, 36, 235, 370, 376, 400, 485, 564], "44": [7, 8, 17, 30, 31, 40, 182, 223, 231, 235, 236, 255, 365, 366, 367, 369, 370, 374, 377, 380, 395, 416, 467, 484, 485, 493, 504], "subtract": [7, 30, 47, 48, 365, 366, 546, 549, 553], "tan": [7, 30, 252, 365, 367, 549, 554, 557, 558, 561, 562, 568], "tanh": [7, 30, 365, 568], "762": [7, 30, 239, 365], "964": [7, 30, 239, 365], "trunc": [7, 30, 365], "025": [7, 240, 365], "trunc_divid": [7, 30, 365], "_arraywithactivationsexperiment": [8, 47], "batch_norm": [8, 31, 366], "varianc": [8, 21, 31, 44, 53, 366, 380, 511], "offset": [8, 13, 31, 36, 366, 370, 404, 425, 522], "scale": [8, 12, 16, 31, 33, 35, 39, 53, 54, 57, 169, 170, 352, 364, 366, 368, 369, 375, 395, 398, 399, 478, 582, 584], "ep": [8, 13, 31, 36, 123, 363, 366, 370, 414, 417], "batch": [8, 9, 13, 25, 31, 32, 36, 56, 169, 170, 265, 268, 269, 327, 364, 366, 367, 369, 370, 373, 375, 396, 410, 428, 456, 457, 458, 478, 532, 549, 558, 571, 580], "spatial": [8, 12, 31, 35, 366, 369, 385, 386, 387, 388, 390, 392, 394, 575], "present": [8, 25, 31, 366, 534, 541, 543, 549, 551, 552, 557, 561, 568, 579, 580, 589], "avoid": [8, 31, 200, 214, 255, 365, 366, 367, 542, 543, 547, 548, 549, 550, 551, 555, 556, 559, 562, 564, 565, 566, 582], "outpu": [8, 31, 366], "clamp": [8, 31, 366, 573], "elementwis": [8, 16, 31, 39, 241, 366, 370, 375, 426, 478, 558, 565, 568], "19722438": [8, 31, 366], "38629448": [8, 31, 366], "38629436": [8, 31, 366], "logsigmoid": [8, 31, 366], "31326175": [8, 24, 366], "126928": [8, 31], "01814993": 8, "00004578": 8, "57888985": 8, "31326169": [8, 31, 366], "69314718": [8, 24, 31, 366], "01104775": 8, "prelu": [8, 31, 366], "f": [8, 15, 31, 38, 366, 372, 374, 442, 462, 466, 467, 468, 476, 477, 532, 536, 537, 543, 544, 549, 550, 556, 568, 571, 578], "unidirect": [8, 366], "smaller": [8, 15, 21, 38, 261, 366, 367, 372, 380, 435, 443, 502, 503, 508, 510, 532, 543, 568], "relu6": [8, 31, 366], "rectifi": [8, 24, 31, 63, 65, 66, 359, 366], "unit": [8, 24, 31, 61, 63, 64, 65, 66, 67, 68, 69, 359, 366, 532, 542, 545, 551, 562, 563, 564, 576, 583, 586], "selu": [8, 31, 366], "11133075": [8, 366], "05070102": [8, 31, 366], "10140204": [8, 366], "15210295": [8, 366], "20280409": [8, 366], "25350523": [8, 366], "30420589": [8, 366], "35490704": [8, 366], "thresholded_relu": [8, 31, 366], "custom": [8, 31, 366, 535, 539, 550, 555, 563, 564, 566, 572, 582, 586, 587, 588], "_arraywithconversionsexperiment": [8, 47], "_arraywithcreationexperiment": [8, 47], "eye_lik": [8, 31, 366], "refer": [8, 15, 21, 22, 31, 33, 38, 44, 45, 54, 84, 200, 214, 345, 346, 362, 365, 366, 368, 370, 372, 380, 381, 403, 427, 442, 509, 511, 512, 513, 532, 540, 541, 542, 543, 545, 546, 550, 551, 557, 558, 559, 560, 562, 563, 564, 576, 577, 582], "elsewher": [8, 31, 84, 362, 366, 377, 493, 542], "_arraywithdata_typeexperiment": [8, 47], "_arraywithdeviceexperiment": [8, 47], "_arraywithelementwiseexperiment": [8, 47], "allclos": [8, 31, 366], "rtol": [8, 13, 31, 36, 366, 370, 414, 417, 516, 518, 563], "atol": [8, 13, 31, 36, 366, 370, 414, 516, 518, 563], "08": [8, 21, 31, 40, 182, 365, 366, 369, 399, 485, 486, 511, 516], "equal_nan": [8, 31, 366], "rel": [8, 10, 13, 15, 20, 27, 31, 33, 36, 38, 43, 47, 87, 346, 349, 351, 352, 353, 366, 368, 370, 372, 379, 404, 414, 417, 425, 439, 443, 498, 500, 516, 518, 543, 548, 550, 563, 566, 582, 584], "toler": [8, 13, 31, 36, 366, 370, 414, 417, 516, 518, 545, 563, 582], "compar": [8, 9, 19, 20, 25, 31, 32, 43, 250, 253, 366, 367, 378, 379, 494, 495, 496, 497, 498, 500, 518, 532, 547, 553, 555, 556, 563, 564, 566, 571, 578, 580, 582, 588, 589], "altern": [8, 31, 366, 532, 541, 542, 548, 561, 562, 571, 585], "given": [8, 9, 14, 15, 17, 25, 31, 32, 33, 37, 38, 40, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 60, 62, 75, 82, 88, 89, 116, 117, 118, 119, 120, 136, 158, 166, 168, 169, 170, 171, 173, 176, 269, 298, 299, 306, 345, 346, 349, 351, 352, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 429, 431, 432, 433, 435, 438, 439, 440, 441, 443, 444, 448, 449, 466, 467, 476, 477, 484, 485, 486, 488, 499, 500, 502, 503, 516, 518, 523, 526, 535, 536, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 572, 575, 579, 584, 585, 588, 589], "1e10": [8, 366], "00001e10": [8, 366], "00001e": [8, 366], "005": [8, 366], "deg": [8, 31, 366], "2j": [8, 31, 366], "3j": [8, 30, 31, 209, 365, 366], "35619449": [8, 366], "78539816": [8, 366], "135": [8, 256, 366, 367], "binar": [8, 31, 366], "outcom": [8, 31, 366], "comparison": [8, 31, 366, 370, 422, 555], "conj": [8, 31, 366], "conjug": [8, 13, 31, 36, 366, 370, 411, 415], "copysign": [8, 31, 366], "unsign": [8, 21, 31, 366, 380, 502, 503, 508, 510, 551, 568], "count_nonzero": [8, 31, 366], "keepdim": [8, 13, 15, 18, 21, 22, 25, 31, 36, 38, 41, 44, 45, 366, 370, 372, 377, 380, 381, 412, 428, 449, 489, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 555, 562, 568], "count": [8, 15, 19, 22, 31, 38, 42, 45, 165, 364, 366, 370, 372, 378, 381, 427, 436, 439, 494, 495, 512, 513, 549, 553, 571], "flatten": [8, 9, 13, 15, 18, 19, 31, 32, 36, 38, 41, 42, 52, 261, 265, 366, 367, 370, 372, 377, 378, 408, 416, 428, 436, 441, 443, 489, 490, 494, 495, 496, 497, 516, 518, 532, 566], "left": [8, 13, 18, 20, 31, 36, 41, 43, 188, 261, 365, 366, 367, 370, 377, 379, 405, 406, 412, 421, 426, 489, 499, 542, 543, 545, 548, 550, 551, 553], "total": [8, 21, 25, 31, 44, 48, 173, 364, 366, 377, 380, 492, 509, 511, 532, 536, 537, 543, 551, 552, 553, 564, 566, 571, 572, 576], "diff": [8, 25, 31, 366, 553, 561], "prepend": [8, 31, 366, 370, 372, 411, 438], "append": [8, 13, 25, 31, 188, 365, 366, 370, 372, 404, 411, 438, 532, 550, 555, 564, 568, 571], "differenc": [8, 31, 366], "taken": [8, 13, 31, 36, 366, 370, 404, 550, 556, 562, 565, 573, 583], "prior": [8, 31, 366, 555, 565], "expand": [8, 9, 15, 31, 32, 265, 366, 367, 372, 438, 548, 549], "direct": [8, 31, 366, 379, 500, 541, 546, 548, 562, 566, 572, 573, 575, 578, 582, 583, 586], "except": [8, 9, 15, 17, 22, 25, 31, 32, 36, 40, 45, 55, 112, 260, 286, 301, 313, 319, 363, 364, 366, 367, 370, 372, 376, 377, 381, 417, 436, 438, 446, 484, 485, 486, 492, 512, 513, 516, 519, 532, 543, 544, 545, 546, 550, 551, 554, 556, 557, 561, 562, 566, 570, 576], "th": [8, 31, 366], "discret": [8, 31, 366, 371, 432], "exp2": [8, 31, 366], "power": [8, 9, 13, 31, 32, 36, 47, 48, 53, 190, 199, 227, 274, 302, 312, 365, 366, 367, 370, 374, 413, 426, 465, 570, 571, 572, 582, 584, 588], "fix": [8, 31, 366, 532, 542, 543, 545, 551, 564, 565], "nearest": [8, 31, 180, 231, 365, 366, 566], "toward": [8, 15, 38, 241, 365, 366, 372, 443, 532, 538, 542, 565, 568, 578, 582], "float_pow": [8, 31, 366], "rais": [8, 9, 15, 17, 19, 22, 25, 31, 32, 38, 40, 42, 45, 55, 57, 112, 199, 227, 254, 274, 286, 302, 312, 313, 319, 358, 363, 364, 365, 366, 367, 368, 370, 372, 376, 377, 378, 380, 381, 411, 413, 427, 438, 442, 446, 484, 485, 486, 492, 497, 505, 507, 512, 513, 516, 532, 535, 543, 545, 547, 555, 556, 561, 562, 568, 570], "common": [8, 25, 31, 136, 363, 366, 534, 541, 542, 548, 549, 551, 552, 553, 556, 558, 559, 562, 565, 566, 576, 579, 582, 589], "125": [8, 13, 36, 190, 365, 366, 370, 426], "fmax": [8, 31, 366], "fmin": [8, 31, 366], "fmod": [8, 31, 365], "divis": [8, 9, 10, 31, 32, 33, 57, 190, 196, 202, 203, 230, 241, 275, 303, 311, 345, 346, 351, 365, 366, 367, 368, 369, 385, 392, 393, 558], "frexp": [8, 31, 366], "next": [8, 31, 53, 55, 57, 123, 363, 366, 536, 538, 541, 542, 543, 547, 553, 554, 559, 562, 565, 569, 570, 571, 582, 584], "represent": [8, 9, 25, 31, 32, 48, 108, 109, 123, 126, 153, 154, 177, 180, 186, 189, 191, 220, 251, 315, 360, 363, 364, 365, 366, 367, 575, 580, 581, 583, 587, 588], "gcd": [8, 31, 366], "gradient": [8, 31, 55, 57, 171, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 364, 366, 373, 456, 457, 458, 518, 523, 544, 565, 571, 572, 575, 576, 582], "edge_ord": [8, 31, 366], "r": [8, 13, 25, 31, 36, 347, 366, 368, 370, 372, 418, 449, 542, 543, 544, 560, 563], "estim": [8, 31, 366], "boundari": [8, 17, 31, 40, 366, 376, 486, 582], "note": [8, 13, 15, 19, 31, 36, 38, 136, 214, 230, 231, 255, 363, 365, 366, 367, 370, 372, 378, 380, 405, 406, 419, 421, 442, 446, 495, 497, 506, 538, 541, 542, 543, 546, 548, 551, 553, 554, 562, 563, 564, 565], "over": [8, 13, 21, 22, 23, 28, 31, 36, 44, 45, 46, 56, 327, 366, 367, 370, 375, 376, 380, 381, 412, 423, 427, 428, 478, 486, 505, 506, 507, 508, 509, 510, 511, 512, 513, 532, 534, 536, 542, 543, 547, 553, 554, 560, 561, 563, 568, 570, 576, 580, 582], "partial": [8, 25, 31, 55, 350, 366, 368, 370, 410, 543, 548, 566], "diment": [8, 366], "40": [8, 9, 31, 32, 40, 44, 48, 190, 194, 235, 261, 263, 269, 299, 311, 327, 347, 365, 366, 367, 368, 370, 374, 380, 409, 416, 468, 485, 504, 508, 550], "80": [8, 31, 366, 370, 374, 380, 416, 470, 504, 535, 555], "72": [8, 17, 31, 33, 199, 200, 349, 365, 366, 368, 370, 380, 416, 485, 504], "33333333": [8, 31, 229, 365, 366], "hypot": [8, 31, 366], "hypotenus": [8, 366], "4031": [8, 366], "8102": [8, 366], "imaginari": [8, 31, 366, 553], "4j": [8, 31, 366], "isclos": [8, 31, 366, 545], "hold": [8, 9, 13, 21, 31, 36, 44, 298, 299, 366, 367, 370, 380, 412, 503, 519, 532, 571, 583], "lcm": [8, 31, 366], "60": [8, 21, 31, 32, 40, 44, 269, 285, 299, 311, 327, 366, 367, 370, 374, 380, 416, 462, 484, 502, 504, 508, 550], "ldexp": [8, 31, 366], "logaddexp2": [8, 31, 366], "169925": [8, 31, 366], "nan_to_num": [8, 31, 366], "posinf": [8, 31, 366], "neginf": [8, 31, 366], "veri": [8, 31, 366, 370, 419, 534, 535, 540, 541, 542, 543, 548, 549, 551, 552, 553, 555, 557, 558, 561, 562, 563, 564, 565, 566, 569, 571, 572, 573, 576, 578, 579, 580, 582, 583, 584, 587, 588, 589], "5e": [8, 10, 31, 351, 366, 368], "nansum": [8, 31, 366], "accumul": [8, 31, 366], "nextaft": [8, 31, 366], "0e": [8, 10, 31, 33, 351, 366, 368], "4013e": [8, 31, 366], "4028e": [8, 31, 366], "hand": [8, 532, 545, 548, 551, 558, 564, 576], "signbit": [8, 31, 366], "sinc": [8, 31, 366, 532, 535, 542, 543, 545, 546, 549, 550, 555, 561, 562, 576, 582, 588], "637": [8, 31, 366], "212": [8, 12, 31, 366, 396], "0909": [8, 31, 366], "trapz": [8, 30, 366], "dx": [8, 30, 366], "apart": [8, 30, 366], "singl": [8, 17, 25, 30, 40, 318, 326, 347, 366, 367, 368, 376, 378, 484, 485, 486, 494, 536, 541, 542, 543, 545, 548, 549, 550, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 571, 572, 573, 576], "trapezoid": [8, 30, 366], "xlogi": [8, 31, 366], "0986": [8, 31, 366], "3863": [8, 31, 366], "0000": [8, 31, 366], "zeta": [8, 31, 366], "q": [8, 12, 13, 31, 35, 36, 366, 369, 370, 374, 399, 405, 406, 418, 467, 542, 543, 544, 563, 576], "0369": [8, 31, 366], "2021": [8, 31, 366, 532], "_arraywithgeneralexperiment": [8, 47], "isin": [8, 31, 367], "test_el": [8, 31, 292, 367], "assume_uniqu": [8, 31, 292, 367], "invert": [8, 31, 187, 292, 365, 367, 370, 413], "uniqu": [8, 19, 31, 42, 292, 366, 367, 373, 374, 378, 456, 457, 458, 461, 465, 494, 495, 496, 497, 532, 534, 545, 549, 558, 562, 563, 566, 576, 585], "speed": [8, 31, 292, 367, 534, 558, 564, 585], "_arraywithgradientsexperiment": [8, 47], "_arraywithimageexperiment": [8, 47], "_arraywithlayersexperiment": [8, 47], "adaptive_avg_pool1d": [8, 31, 366], "1d": [8, 31, 54, 366], "adapt": [8, 31, 33, 57, 352, 366, 368, 535], "averag": [8, 10, 31, 33, 53, 345, 346, 351, 366, 368, 373, 456, 457], "pool": [8, 31, 366], "signal": [8, 31, 366, 581, 582], "sever": [8, 31, 366, 542, 543, 565, 576, 580, 586], "plane": [8, 31, 366], "l_in": [8, 31, 366], "Will": [8, 31, 52, 366, 576], "l_out": [8, 31, 366], "adaptive_avg_pool2d": [8, 31, 366], "2d": [8, 31, 54, 366, 532, 558, 562, 566], "h_in": [8, 31, 366], "w_in": [8, 31, 366], "s_0": [8, 31, 366], "s_1": [8, 31, 366], "avg_pool1d": [8, 31, 366], "kernel": [8, 12, 31, 35, 366, 369, 397, 566, 568, 576, 582, 585, 586], "stride": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 582], "pad": [8, 12, 15, 31, 35, 38, 54, 265, 366, 367, 369, 372, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 437, 450, 532], "data_format": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 532], "nwc": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 392, 393], "batch_siz": [8, 12, 17, 31, 35, 40, 366, 369, 376, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 483, 532, 571], "d_in": [8, 12, 31, 35, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "window": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 538, 543, 587], "slide": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "algorithm": [8, 12, 24, 31, 35, 54, 61, 366, 370, 386, 388, 389, 390, 391, 394, 419, 551, 562, 566, 576, 582, 584, 586], "per": [8, 12, 31, 35, 54, 366, 386, 388, 389, 390, 391, 394, 543, 550, 562, 571], "ncw": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 392, 393], "arang": [8, 13, 21, 31, 36, 88, 294, 327, 362, 366, 367, 370, 380, 412, 428, 504, 532, 551, 589], "reshap": [8, 12, 13, 15, 25, 31, 35, 36, 38, 327, 366, 367, 369, 370, 372, 388, 390, 394, 412, 428, 515, 561, 562, 564, 566, 568, 570, 573], "avg_pool2d": [8, 31, 366], "nhwc": [8, 12, 31, 35, 54, 366, 369, 385, 388, 389, 392, 393, 394], "nchw": [8, 12, 31, 35, 54, 366, 369, 385, 388, 389, 392, 393, 394, 532], "max_pool2d": [8, 31, 366], "46": [8, 17, 31, 35, 40, 89, 214, 232, 362, 365, 366, 374, 396, 460, 484, 485], "avg_pool3d": [8, 31, 366], "ndhwc": [8, 12, 31, 35, 54, 366, 369, 385, 390, 391, 392, 393], "d": [8, 12, 13, 27, 31, 32, 35, 36, 89, 137, 253, 363, 366, 369, 370, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 403, 404, 412, 416, 426, 462, 466, 467, 468, 476, 477, 532, 535, 536, 537, 542, 544, 549, 560, 564, 566, 571, 578], "volum": [8, 12, 31, 35, 366, 369, 390, 391, 538], "filter": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 532], "ncdhw": [8, 12, 31, 35, 54, 366, 369, 385, 390, 391, 392, 393], "43": [8, 40, 48, 190, 365, 366, 376, 377, 485, 486, 493], "dct": [8, 31, 366, 571], "norm": [8, 9, 13, 31, 32, 36, 57, 256, 257, 286, 366, 367, 370, 412, 428, 478, 565], "liter": [8, 13, 31, 36, 366, 370, 379, 412, 428, 499, 556, 566], "lenght": [8, 31, 366], "truncat": [8, 31, 52, 301, 366, 367, 555, 571], "larger": [8, 15, 21, 31, 38, 44, 123, 363, 366, 372, 380, 435, 443, 509, 511, 564, 566, 589], "ortho": [8, 31, 366], "102": [8, 31, 40, 366, 484], "406": [8, 31, 256, 366, 367], "dft": [8, 31, 366], "onesid": [8, 31, 366], "dft_length": [8, 31, 366], "backward": [8, 22, 31, 45, 230, 365, 366, 370, 381, 427, 512, 513, 576], "fourier": [8, 265, 366, 367], "fft": [8, 31, 366, 541, 582], "n_fft": [8, 366], "becaus": [8, 366, 542, 543, 546, 547, 548, 549, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 572, 573, 576, 582, 585, 588], "satisfi": [8, 366, 553], "symmetri": [8, 366], "possibl": [8, 15, 38, 294, 356, 366, 367, 368, 369, 372, 380, 395, 442, 505, 507, 532, 535, 537, 541, 542, 543, 545, 549, 551, 553, 554, 558, 560, 561, 562, 563, 564, 566, 568, 571, 575, 576, 580, 582, 588], "fast": [8, 366, 582], "rfft": [8, 366], "batch_idx": [8, 366], "signal_dim1": [8, 366], "signal_dim2": [8, 366], "signal_dimn": [8, 366], "signal_dim": [8, 366], "embed": [8, 31, 366, 582], "max_norm": [8, 9, 31, 32, 256, 257, 366, 367], "dim": [8, 25, 27, 31, 54, 92, 362, 366, 369, 385, 392, 393, 532, 551, 555, 562, 563, 566], "ifft": [8, 31, 366], "pi": [8, 31, 360, 366], "44509285e": [8, 31, 366], "14423775e": [8, 31, 366], "17j": [8, 31, 366], "00000000e": [8, 31, 32, 265, 366], "00": [8, 9, 31, 32, 36, 200, 265, 365, 366, 367, 370, 407, 564], "11483250e": [8, 31, 366], "16j": [8, 31, 366], "33486982e": [8, 31, 366], "22464680e": [8, 31, 366], "95799250e": [8, 31, 366], "66951701e": [8, 31, 366], "30636606e": [8, 31, 366], "43029718e": [8, 31, 366], "18j": [8, 31, 366], "53080850e": [8, 31, 366], "58689626e": [8, 31, 366], "24474906e": [8, 31, 366], "91858728e": [8, 31, 366], "01435406e": [8, 31, 366], "interpol": [8, 31, 366, 566, 582], "mode": [8, 13, 25, 31, 36, 171, 180, 276, 300, 301, 304, 306, 307, 320, 321, 322, 324, 325, 364, 365, 366, 367, 370, 418, 538, 542, 543, 549, 553, 566, 576, 582, 585], "scale_factor": [8, 31, 366, 566], "recompute_scale_factor": [8, 31, 366, 566], "align_corn": [8, 31, 366, 566], "antialia": [8, 31, 366, 566], "down": [8, 31, 52, 366, 542, 564, 577, 582, 588], "channel": [8, 9, 12, 31, 32, 35, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 261, 265, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "height": [8, 9, 12, 31, 32, 35, 52, 261, 366, 367, 369, 388, 389, 390, 391, 394, 571], "width": [8, 9, 12, 31, 32, 35, 261, 366, 367, 369, 386, 387, 388, 389, 390, 391, 394], "bilinear": [8, 31, 366, 566], "trilinear": [8, 31, 366, 566], "nearest_exact": [8, 31, 366, 566], "tf_area": [8, 31, 366, 566], "bicub": [8, 31, 366, 566], "mitchellcub": [8, 31, 366, 566], "lanczos3": [8, 31, 366, 566], "lanczos5": [8, 31, 366, 566], "gaussian": [8, 31, 61, 359, 366, 566], "overwrit": [8, 25, 31, 171, 364, 366, 543, 561, 562, 568], "corner": [8, 31, 366, 542, 543, 562], "pixel": [8, 31, 366], "align": [8, 25, 31, 366, 542, 543, 562, 568, 570, 577, 588], "thu": [8, 31, 190, 227, 230, 365, 366, 370, 405, 406, 538, 541, 550, 555, 562], "antialias": [8, 31, 366], "downsampl": [8, 31, 366], "resiz": [8, 31, 366, 566], "max_pool1d": [8, 31, 366], "dilat": [8, 12, 31, 35, 54, 366, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "ceil_mod": [8, 31, 366], "max_pool3d": [8, 31, 366], "linear_algebra": [8, 13, 31, 36, 370, 565], "_arraywithlinearalgebraexperiment": [8, 47], "adjoint": [8, 13, 31, 36, 366, 370, 409, 420, 421], "cond": [8, 31, 70, 72, 361, 366, 576], "p": [8, 9, 13, 31, 32, 36, 54, 90, 256, 257, 362, 366, 367, 370, 374, 412, 428, 467, 542, 543, 544], "933034373659268": 8, "diagflat": [8, 31, 366], "padding_valu": [8, 31, 366], "right_left": [8, 31, 366], "num_row": [8, 31, 366], "num_col": [8, 31, 366], "eig": [8, 13, 31, 366, 370, 406, 407], "37228132": [8, 31, 366, 405], "82456484": [8, 366, 405], "41597356": [8, 366, 405], "56576746": [8, 366, 405], "90937671": [8, 366, 405], "eigh_tridiagon": [8, 31, 366], "eigvals_onli": [8, 31, 366], "select": [8, 21, 31, 44, 366, 380, 502, 503, 541, 542, 543, 550, 561, 564, 568, 570, 573, 576, 582, 585, 586], "select_rang": [8, 31, 366], "tol": [8, 31, 366], "eigenvalu": [8, 13, 31, 36, 366, 370, 405, 406, 407], "eigenvector": [8, 31, 366, 370, 405, 406], "string": [8, 12, 25, 31, 35, 52, 60, 62, 108, 109, 121, 128, 149, 153, 154, 155, 156, 158, 166, 172, 173, 176, 259, 359, 363, 364, 366, 367, 369, 370, 385, 386, 387, 388, 390, 392, 394, 407, 518, 547, 548, 550, 551, 552, 555, 556, 562, 568, 571], "v": [8, 12, 20, 27, 31, 35, 43, 52, 54, 55, 56, 57, 58, 89, 366, 369, 379, 398, 399, 499, 518, 532, 538, 539, 542, 543, 544, 548, 568, 571, 572, 573], "interv": [8, 17, 22, 31, 40, 45, 75, 88, 89, 362, 366, 370, 372, 376, 381, 427, 435, 438, 446, 484, 486, 512, 513, 543], "togeth": [8, 25, 31, 58, 366, 532, 535, 546, 549, 556, 562, 565, 566, 572, 573, 576, 580, 582, 583, 588], "cluster": [8, 31, 366, 576, 582], "converg": [8, 31, 366, 536], "li": [8, 31, 366, 534], "_2": [8, 31, 366], "machin": [8, 13, 31, 36, 123, 126, 363, 366, 370, 414, 417, 535, 542, 545, 558, 575, 577, 580, 582, 584, 585, 586, 587, 588], "precis": [8, 13, 31, 36, 123, 235, 363, 365, 366, 370, 419, 428, 550, 551, 562, 566, 586], "eig_val": [8, 31, 366], "decreas": [8, 31, 366], "eig_vector": [8, 31, 366], "38196": [8, 366], "61803": [8, 366], "eigval": [8, 31, 366], "kron": [8, 31, 366, 589], "matrix_exp": [8, 31, 366], "7183": [8, 31, 366], "3891": [8, 31, 366], "multi_dot": [8, 31, 366], "49": [8, 17, 31, 36, 235, 365, 366, 380, 426, 485, 504], "148": [8, 30, 31, 199, 366], "loss": [8, 31, 366, 431, 432, 433, 532, 550, 551, 558, 562, 565, 571, 572, 573, 582, 589], "_arraywithlossesexperiment": [8, 47], "manipul": [8, 31, 366, 534, 562, 565, 566, 568, 573, 575, 582], "_arraywithmanipulationexperiment": [8, 47], "atleast_1d": [8, 31, 366], "ari": [8, 31, 366], "cannot": [8, 543, 545, 547, 551, 562, 568, 573, 588], "ndim": [8, 13, 18, 36, 41, 47, 327, 366, 367, 370, 377, 418, 421, 492, 515, 549, 555], "made": [8, 15, 31, 366, 446, 535, 538, 541, 543, 545, 546, 549, 550, 555, 560, 561, 562, 565, 566, 568, 570, 582], "a1": [8, 32, 84, 253, 362], "a2": 8, "atleast_2d": [8, 31, 366], "atleast_3d": [8, 31, 366], "view": [8, 15, 31, 85, 362, 366, 542, 543, 555, 582], "three": [8, 90, 362, 366, 542, 543, 549, 550, 553, 562, 564, 566, 567, 568, 583, 588], "dsplit": [8, 31, 366], "indices_or_sect": [8, 31, 366], "split": [8, 15, 25, 31, 38, 169, 170, 171, 261, 294, 364, 366, 367, 369, 372, 385, 392, 393, 398, 447, 518, 532, 537, 543, 550, 567, 568, 576, 589], "3rd": [8, 31, 366], "dstack": [8, 31, 366], "nativeshap": [8, 12, 15, 17, 31, 38, 40, 82, 86, 93, 97, 299, 309, 314, 316, 362, 366, 367, 369, 372, 376, 385, 387, 389, 391, 393, 442, 484, 485, 486], "start_dim": [8, 31, 366, 532], "end_dim": [8, 31, 366, 532], "read": [8, 15, 25, 31, 38, 366, 372, 442, 541, 542, 548, 550, 564, 566, 582], "fastest": [8, 15, 31, 38, 366, 372, 442], "back": [8, 15, 31, 38, 53, 55, 57, 300, 320, 366, 367, 372, 442, 535, 542, 543, 546, 551, 555, 559, 560, 567, 576, 580, 584], "slowest": [8, 15, 31, 38, 366, 372, 442], "fortran": [8, 15, 31, 38, 366, 372, 442, 582, 586], "layout": [8, 15, 31, 38, 366, 372, 442, 547, 562, 566], "fliplr": [8, 31, 366], "flip": [8, 15, 31, 38, 187, 365, 366, 372, 570, 571, 573], "revers": [8, 9, 13, 21, 31, 36, 44, 47, 48, 260, 366, 367, 370, 372, 380, 426, 439, 502, 503, 541, 549, 550, 551, 553, 554, 562, 566, 573, 576], "diag": [8, 13, 31, 36, 366, 370, 568], "flipud": [8, 31, 366], "heavisid": [8, 31, 366], "step": [8, 10, 27, 31, 33, 52, 57, 75, 88, 345, 346, 349, 351, 352, 353, 362, 366, 368, 373, 456, 457, 458, 532, 536, 538, 541, 542, 543, 546, 547, 549, 550, 551, 552, 553, 560, 562, 564, 568, 571, 572, 573, 575, 582], "5000": [8, 366, 370, 409], "hsplit": [8, 31, 366], "horizont": [8, 31, 261, 366, 367], "hstack": [8, 31, 366], "vstack": [8, 31, 366], "i0": [8, 31, 366], "modifi": [8, 25, 31, 366, 541, 542, 543, 545, 547, 548, 551, 552, 554, 556, 558, 563, 564, 565, 568], "bessel": [8, 21, 31, 44, 366, 380, 509, 511], "kind": [8, 21, 31, 123, 126, 127, 227, 363, 365, 380, 502, 503, 508, 510, 540, 562, 564, 566, 568, 576], "26606588": [8, 31, 366], "2795853": [8, 31, 366], "88079259": [8, 31, 366], "moveaxi": [8, 31, 366], "destin": [8, 31, 366], "unstack": [8, 15, 25, 38, 372, 549, 568, 571, 589], "reorder": [8, 15, 31, 38, 261, 366, 367, 372, 439], "pad_width": [8, 15, 31, 38, 366, 372, 437, 450], "stat_length": [8, 31, 366], "constant_valu": [8, 31, 366], "end_valu": [8, 31, 366], "reflect_typ": [8, 31, 366], "even": [8, 31, 227, 231, 365, 366, 535, 536, 542, 543, 545, 550, 551, 552, 554, 557, 558, 561, 562, 563, 566, 570, 571, 572, 573, 576, 588], "rot90": [8, 31, 366], "rotat": [8, 31, 366, 575], "take_along_axi": [8, 31, 366], "extract": [8, 31, 366, 562, 565, 578, 582, 583, 588], "One": [8, 9, 15, 17, 31, 32, 38, 40, 262, 366, 367, 372, 376, 442, 484, 546, 549, 551, 553, 558, 563, 564, 568, 570, 571], "drop": [8, 31, 53, 366, 542, 576], "how": [8, 31, 52, 53, 54, 55, 366, 532, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 578, 582], "bound": [8, 31, 366, 555, 564, 568, 588], "arr": [8, 9, 28, 31, 131, 299, 363, 366, 551, 552], "top_k": [8, 31, 366], "largest": [8, 25, 31, 123, 126, 363, 366, 370, 412, 421, 575], "top": [8, 15, 31, 52, 261, 366, 367, 436, 532, 542, 543, 551, 562, 564, 566, 571, 572, 582, 586], "retun": [8, 31, 366], "smallest": [8, 25, 31, 123, 126, 192, 363, 365, 366, 370, 412], "name": [8, 13, 19, 23, 36, 42, 46, 60, 62, 251, 252, 359, 366, 367, 370, 378, 405, 406, 410, 418, 419, 421, 426, 494, 495, 496, 518, 523, 528, 541, 542, 543, 547, 548, 549, 550, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 568, 571, 573, 582], "vsplit": [8, 31, 366], "vertic": [8, 31, 261, 366, 367, 543], "_arraywithnormsexperiment": [8, 47], "instance_norm": [8, 31, 366], "bia": [8, 12, 31, 35, 39, 54, 294, 366, 367, 369, 375, 385, 392, 393, 396, 397, 478, 568, 572], "momentum": [8, 31, 366, 535], "running_mean": [8, 31, 366], "running_stddev": [8, 31, 366], "affin": [8, 31, 56, 366], "track_running_stat": [8, 31, 366], "4d": [8, 366], "statist": [8, 31, 46, 366, 541, 551, 564, 565, 582], "deviat": [8, 16, 17, 21, 31, 39, 40, 44, 53, 56, 366, 375, 376, 380, 478, 485, 509, 536, 545], "OR": [8, 22, 31, 45, 189, 219, 365, 366, 381, 513, 542, 543, 560], "stddev": [8, 31, 366], "ey": [8, 31, 35, 362, 366, 369, 388, 394, 566, 573], "82836342": [8, 366], "58581817": [8, 366], "29290909": [8, 31, 366], "41418171": [8, 31, 366], "14645454": [8, 366], "20709085": [8, 366], "30000001": [8, 31, 261, 366, 367, 378, 495], "52426404": [8, 31, 366], "l2_normal": [8, 31, 366], "l2": [8, 13, 36, 366, 370, 428, 549], "whole": [8, 366, 543, 548], "4472": [8, 366], "8944": [8, 366], "lp_normal": [8, 31, 366], "lp": [8, 366], "_arraywithrandomexperiment": [8, 47], "bernoulli": [8, 31, 366], "seed": [8, 12, 17, 19, 25, 31, 35, 40, 51, 366, 369, 376, 378, 395, 483, 484, 485, 486, 488, 494, 523, 563, 564], "probabl": [8, 12, 17, 31, 35, 40, 53, 54, 366, 369, 376, 395, 483, 532, 536, 548, 564], "event": [8, 31, 366, 564], "entri": [8, 15, 25, 31, 38, 42, 88, 362, 366, 372, 374, 444, 472, 494, 542, 550, 564, 582], "parameter": [8, 17, 31, 40, 366, 376, 483, 485, 486], "distribut": [8, 14, 17, 31, 37, 40, 53, 54, 55, 366, 371, 376, 431, 432, 433, 483, 484, 485, 486, 488, 541, 550, 552, 576, 582, 585], "prob": [8, 12, 31, 35, 40, 54, 366, 369, 376, 395, 483, 532], "odd": [8, 31, 227, 365, 366, 540, 545], "g": [8, 17, 19, 21, 23, 31, 40, 46, 53, 109, 137, 153, 363, 364, 366, 374, 376, 378, 380, 462, 466, 468, 476, 484, 485, 486, 494, 495, 496, 497, 502, 503, 505, 507, 508, 510, 536, 537, 541, 542, 544, 545, 549, 560, 562, 564, 568, 576, 577, 578], "drawn": [8, 17, 31, 40, 53, 366, 376, 483, 484, 485, 486, 564], "dirichlet": [8, 31, 366], "shuffl": [8, 17, 25, 31, 40, 376], "10598304": [8, 366], "21537054": [8, 366], "67864642": [8, 366], "48006698": [8, 366], "07472073": [8, 366], "44521229": [8, 366], "55479872": [8, 366], "05426367": [8, 366], "39093761": [8, 366], "19531053": [8, 366], "51675832": [8, 366], "28793114": [8, 366], "12315625": [8, 366], "29823365": [8, 366], "5786101": [8, 366], "15564976": [8, 366], "50542368": [8, 366], "33892656": [8, 366], "1325352": [8, 366], "44439589": [8, 366], "42306891": [8, 366], "gamma": [8, 16, 39, 366, 375, 478], "poisson": [8, 31, 366], "rate": [8, 10, 31, 33, 54, 57, 346, 349, 351, 352, 353, 366, 368, 373, 456, 457, 458, 550], "paramt": [8, 374, 466, 476], "lam": [8, 31, 366], "_arraywithsearchingexperiment": [8, 47], "unravel_index": [8, 31, 366], "unravel": [8, 31, 366], "_arraywithsetexperiment": [8, 47], "sort": [8, 25, 31, 48, 366, 370, 405, 406, 421, 422, 498, 499, 532, 540, 550, 565], "_arraywithsortingexperiment": [8, 47], "lexsort": [8, 31, 366], "indirectli": [8, 31, 366], "column": [8, 13, 31, 36, 53, 84, 362, 366, 370, 405, 406, 412, 418, 420, 421, 426], "msort": [8, 31, 366], "_arraywithstatisticalexperiment": [8, 47], "bincount": [8, 31, 366], "weight": [8, 10, 12, 31, 33, 35, 53, 54, 55, 57, 345, 346, 349, 351, 352, 353, 366, 368, 369, 396, 397, 399, 532, 549, 558, 568, 572, 573, 581], "minlength": [8, 31, 366], "alreadi": [8, 25, 31, 192, 201, 231, 240, 365, 366, 370, 408, 416, 532, 541, 542, 543, 547, 549, 551, 557, 562, 566, 576, 582, 584, 589], "bin": [8, 31, 538, 542, 543, 545, 549], "corrcoef": [8, 31, 366], "rowvar": [8, 31, 366], "row": [8, 31, 53, 84, 362, 366, 370, 376, 377, 412, 420, 421, 426, 483, 492], "relationship": [8, 31, 53], "median": [8, 31, 366, 562], "nanmean": [8, 31, 366], "anyth": [8, 31, 366, 543, 564, 565, 582, 583], "sub": [8, 13, 15, 25, 26, 30, 31, 32, 36, 38, 48, 52, 222, 366, 370, 372, 373, 404, 444, 456, 457, 458, 541, 543, 544, 549, 555, 562, 563, 564, 570, 571, 572, 578], "6666666666666665": [8, 31, 366], "nanmedian": [8, 31, 366], "overwrite_input": [8, 31, 366], "save": [8, 25, 31, 55, 281, 308, 364, 366, 367, 536, 538, 550, 556, 564, 576, 581], "do": [8, 9, 25, 31, 32, 230, 286, 365, 366, 367, 374, 459, 466, 469, 470, 471, 476, 532, 536, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 570, 571, 572, 573, 576, 577, 583, 588, 589], "content": [8, 25, 31, 366, 541, 548, 561, 568, 571], "treat": [8, 25, 31, 366, 518, 560, 564, 569, 573], "undefin": [8, 31, 366, 556, 560], "fulli": [8, 31, 54, 366, 532, 536, 546, 551, 557, 560, 561, 566, 568, 569, 570, 571, 572, 573, 576, 580, 581, 582, 588, 589], "quantil": [8, 31, 366], "inclus": [8, 31, 75, 362, 366, 376, 484, 537, 547, 561, 566], "higher": [8, 31, 53, 366, 567, 568, 573, 576, 579, 582, 583, 586, 588, 589], "midpoint": [8, 31, 366], "fraction": [8, 31, 366, 369, 395], "surround": [8, 31, 366, 566], "whichev": [8, 31, 366], "_arraywithutilityexperiment": [8, 47], "_arraywithgener": [9, 47], "all_equ": [9, 32, 367], "equality_matrix": [9, 32, 250, 367], "array_equ": [9, 32, 367], "assert_supports_inplac": [9, 32, 367], "ivybackendexcept": [9, 32, 254, 286, 367, 529, 546, 555], "jaxlib": [9, 32, 254, 367, 542, 546, 551, 552, 557, 565, 568, 570], "xla_extens": [9, 32, 254, 367, 546, 551, 552, 557, 565, 568, 570], "devicearrai": [9, 32, 254, 367, 546, 562, 568, 570], "clip_matrix_norm": [9, 32, 367], "downscal": [9, 32, 256, 257, 286, 367], "894": [9, 32, 256, 257, 367, 375, 478], "79": [9, 32, 40, 47, 191, 196, 256, 257, 365, 366, 367, 486], "clip_vector_norm": [9, 32, 367], "default_v": [9, 260, 367], "catch_except": [9, 260, 367], "rev": [9, 260, 367], "with_cal": [9, 260, 367], "catch": [9, 260, 367, 564], "might": [9, 136, 260, 363, 367, 541, 542, 543, 550, 551, 553, 556, 559, 561, 562, 564, 565, 566, 568, 570, 571, 577], "exist": [9, 15, 25, 38, 57, 260, 367, 372, 436, 442, 526, 532, 534, 535, 541, 542, 545, 547, 548, 553, 554, 558, 559, 561, 562, 564, 566, 568, 576, 577, 580, 582, 585, 588], "els": [9, 17, 31, 40, 62, 116, 117, 118, 119, 120, 254, 260, 264, 363, 366, 367, 374, 376, 469, 472, 484, 485, 486, 516, 532, 541, 543, 545, 547, 551, 555, 558, 561, 562, 563, 564, 565, 566, 568, 570, 572, 573, 576, 583], "einops_rearrang": [9, 32, 367], "pattern": [9, 32, 261, 262, 263, 367, 536, 551, 554], "axes_length": [9, 32, 261, 262, 263, 367], "re": [9, 18, 41, 171, 255, 261, 364, 367, 370, 372, 377, 423, 443, 491, 493, 533, 534, 535, 537, 541, 542, 543, 544, 545, 551, 560, 561, 562, 565, 566, 570, 573, 576, 582], "arrang": [9, 261, 367], "rearrang": [9, 32, 261, 263, 367], "einop": [9, 32, 261, 262, 263, 367, 535], "einops_reduc": [9, 32, 367], "reduct": [9, 14, 22, 25, 31, 32, 37, 45, 262, 298, 299, 366, 367, 371, 381, 431, 432, 433, 512, 513, 551, 555, 564, 570], "prod": [9, 21, 32, 44, 262, 367, 380, 551, 553, 568], "einops_repeat": [9, 32, 367], "repeat": [9, 15, 32, 38, 263, 367, 372, 448, 538, 543, 546, 547, 553, 554, 556, 564], "fourier_encod": [9, 32, 367], "max_freq": [9, 32, 265, 367], "num_band": [9, 32, 265, 367], "frequenc": [9, 32, 265, 367, 543], "band": [9, 32, 265, 367], "linearli": [9, 32, 265, 367, 370, 420], "oppos": [9, 32, 265, 367, 551], "geometr": [9, 32, 265, 367, 370, 426], "concaten": [9, 15, 36, 261, 265, 367, 372, 416, 436, 563, 566, 568, 571], "seper": [9, 265, 367, 553, 563, 564], "0000000e": [9, 32, 265, 367], "2246468e": [9, 32, 265, 367], "4492936e": [9, 265, 367], "6739404e": [9, 32, 265, 367], "gather": [9, 32, 269, 273, 367, 589], "batch_dim": [9, 32, 268, 269, 367, 526], "gather_nd": [9, 32, 367], "get_num_dim": [9, 32, 367], "as_arrai": [9, 32, 277, 309, 367], "has_nan": [9, 32, 367], "include_inf": [9, 32, 282, 326, 367], "inplace_decr": [9, 32, 367], "val": [9, 25, 31, 32, 284, 285, 286, 302, 303, 366, 367, 561, 570], "decrement": [9, 32, 284, 367], "inplace_incr": [9, 32, 367], "increment": [9, 32, 285, 367, 543, 565, 582], "inplace_upd": [9, 32, 51, 367, 561], "ensure_in_backend": [9, 32, 286, 367, 561], "keep_input_dtyp": [9, 32, 286, 367], "ensur": [9, 32, 286, 367, 516, 532, 541, 542, 543, 546, 551, 553, 555, 556, 557, 559, 561, 562, 563, 564, 565, 582], "is_arrai": [9, 32, 367, 562], "exclus": [9, 21, 25, 32, 44, 75, 288, 289, 291, 362, 367, 376, 380, 484, 502, 503, 549, 551, 558, 565, 573, 586, 588], "rather": [9, 25, 32, 75, 171, 288, 289, 291, 362, 364, 367, 535, 543, 545, 549, 551, 554, 561, 562, 563, 564, 565, 573, 576, 578, 581, 582], "is_ivy_arrai": [9, 32, 367, 561, 570], "is_ivy_contain": [9, 367], "is_native_arrai": [9, 32, 133, 289, 363, 367, 570], "scatter_flat": [9, 32, 367], "occupi": [9, 123, 126, 298, 299, 363, 367], "scatter_nd": [9, 32, 367, 566, 570], "empti": [9, 25, 32, 75, 256, 299, 358, 362, 366, 367, 368, 370, 374, 380, 381, 428, 473, 510, 512, 513, 541, 542, 546, 548, 551, 552], "stable_divid": [9, 32, 367, 558], "denomin": [9, 16, 32, 39, 56, 275, 303, 311, 367, 375, 478, 558, 576, 579], "min_denomin": [9, 32, 311, 367], "global": [9, 16, 25, 32, 39, 48, 56, 116, 117, 118, 119, 120, 169, 170, 171, 274, 275, 278, 302, 303, 305, 311, 312, 323, 354, 356, 358, 363, 364, 366, 367, 368, 375, 478, 523, 542, 546, 547, 550, 551, 552, 555, 558, 562, 568, 582], "_min_denomin": [9, 32, 311, 367], "stable_pow": [9, 32, 367], "min_bas": [9, 32, 312, 367], "_min_bas": [9, 16, 32, 39, 56, 312, 367, 375, 478], "stabl": [9, 20, 32, 43, 231, 274, 275, 302, 303, 311, 312, 365, 366, 367, 379, 498, 500, 542, 547, 551, 562, 568, 576], "supports_inplace_upd": [9, 32, 367], "to_list": [9, 32, 367], "to_numpi": [9, 32, 367, 532, 563, 571], "address": [9, 317, 367, 536, 541, 543, 545, 546, 568, 578, 580, 582, 588], "to_scalar": [9, 32, 367], "value_is_nan": [9, 32, 367], "92": [9, 40, 326, 353, 368, 370, 402, 485, 486], "_arraywithgradi": [10, 47], "adam_step": [10, 33, 368], "mw": [10, 33, 345, 346, 368, 572], "vw": [10, 33, 345, 346, 368, 572], "beta1": [10, 33, 57, 252, 345, 346, 351, 367, 368, 572], "beta2": [10, 33, 57, 252, 345, 346, 351, 367, 368, 572], "999": [10, 30, 33, 57, 239, 345, 346, 351, 353, 365, 368, 572], "epsilon": [10, 13, 14, 16, 31, 33, 36, 37, 39, 56, 57, 252, 345, 346, 351, 366, 367, 368, 370, 371, 375, 414, 417, 431, 432, 433, 478, 549, 558, 561, 572], "07": [10, 14, 30, 31, 33, 37, 40, 57, 184, 212, 216, 232, 345, 346, 348, 349, 350, 351, 357, 365, 366, 368, 371, 431, 432, 433, 485, 572], "cost": [10, 33, 345, 346, 349, 351, 352, 353, 368, 373, 456, 457, 458, 566, 580], "dc": [10, 33, 345, 346, 349, 351, 352, 353, 368], "dw": [10, 33, 345, 346, 349, 351, 352, 353, 368], "forget": [10, 33, 57, 345, 346, 351, 368, 532, 551], "factor": [10, 12, 13, 31, 33, 35, 36, 53, 54, 57, 169, 170, 171, 345, 346, 351, 352, 364, 368, 369, 370, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 400, 535, 555], "adam": [10, 33, 57, 252, 345, 346, 351, 367, 368, 532, 571, 572, 573, 582], "prevent": [10, 33, 53, 57, 255, 345, 346, 351, 367, 368, 369, 380, 395, 510, 541, 543, 550, 551, 555, 556, 561, 562, 565, 566], "delta": [10, 33, 345, 368], "dcdw": [10, 33, 345, 346, 349, 351, 352, 368], "adam_step_delta": [10, 33, 345, 368], "2020105": [10, 345, 368], "22187898": [10, 345, 368], "24144873": [10, 345, 368], "10000002": [10, 44, 345, 368, 506], "20000005": [10, 345, 368], "00300002": [10, 345, 368], "00800002": [10, 345, 368], "adam_upd": [10, 33, 368, 572], "lr": [10, 33, 57, 252, 346, 349, 351, 352, 353, 367, 368, 571, 572], "mw_tm1": [10, 33, 346, 351, 368], "vw_tm1": [10, 33, 346, 351, 368], "stop_gradi": [10, 33, 57, 171, 252, 346, 349, 351, 352, 353, 364, 367, 368, 373, 456, 457, 458, 572], "learn": [10, 33, 57, 261, 346, 349, 351, 352, 353, 367, 368, 373, 456, 457, 458, 532, 534, 535, 537, 540, 541, 542, 544, 545, 558, 560, 567, 575, 577, 580, 584, 585, 586, 587, 588, 589], "previou": [10, 33, 53, 144, 145, 146, 147, 148, 320, 322, 323, 324, 346, 351, 363, 366, 367, 368, 543, 545, 547, 550, 557, 562, 564, 566, 573, 576, 585], "ws_new": [10, 33, 346, 351, 352, 353, 368], "updated_weight": [10, 33, 346, 368], "92558753": [10, 346], "92558873": [10, 346, 368], "92558718": [10, 346, 368], "00000063e": [10, 33, 346, 368], "00000016e": [10, 33, 346, 368], "00000086e": [10, 33, 346, 368], "gradient_descent_upd": [10, 33, 368, 373, 456, 457, 458], "descent": [10, 33, 57, 349, 368, 572, 582], "new_weight": [10, 33, 349, 351, 368, 571], "95": [10, 17, 24, 33, 40, 61, 345, 349, 353, 359, 366, 368, 376, 485, 486], "97": [10, 30, 33, 40, 182, 349, 365, 368, 485], "96": [10, 30, 31, 32, 40, 193, 238, 261, 262, 349, 365, 366, 367, 368, 370, 380, 416, 486, 504], "lamb_upd": [10, 33, 368], "max_trust_ratio": [10, 33, 57, 351, 368], "decay_lambda": [10, 33, 57, 351, 352, 368], "trust": [10, 33, 57, 351, 368], "ratio": [10, 33, 57, 351, 368], "decai": [10, 33, 57, 351, 352, 368], "lamb": [10, 33, 57, 351, 368, 572], "784": [10, 351, 368], "78": [10, 191, 232, 351, 365, 368, 370, 376, 380, 416, 485, 504], "lars_upd": [10, 33, 368], "lar": [10, 33, 57, 352, 368, 572], "optimizer_upd": [10, 33, 368], "effective_grad": [10, 33, 353, 368], "3e": [10, 33, 353, 368], "preserve_typ": [10, 33, 355, 368], "_arraywithimag": [11, 47], "_arraywithlay": [12, 47], "conv1d": [12, 35, 54, 369], "fw": [12, 35, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 518, 564], "d_out": [12, 35, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393], "wio": [12, 369, 386, 387], "conv1d_transpos": [12, 35, 369], "output_shap": [12, 35, 54, 369, 385, 387, 389, 391, 393], "low": [12, 17, 35, 40, 369, 376, 385, 386, 387, 388, 390, 392, 394, 484, 486, 549, 562, 566, 568, 578, 580, 582, 583, 584, 586, 588], "high": [12, 17, 35, 40, 369, 376, 385, 386, 387, 388, 390, 392, 394, 484, 486, 536, 541, 560, 562, 566, 571, 577, 578, 579, 580, 581, 582, 586, 588, 589], "pair": [12, 35, 184, 365, 366, 369, 370, 385, 386, 387, 388, 390, 392, 394, 399, 401, 550], "give": [12, 35, 52, 53, 136, 363, 369, 372, 385, 386, 387, 388, 390, 392, 394, 442, 532, 536, 538, 542, 543, 544, 547, 548, 550, 553, 554, 557, 564, 582, 586], "conv2d": [12, 35, 54, 369, 389, 532], "fh": [12, 35, 369, 385, 388, 389, 390, 391, 392, 393, 394], "hwio": [12, 369, 388], "conv2d_transpos": [12, 35, 369], "random_norm": [12, 13, 17, 35, 36, 40, 261, 367, 369, 370, 376, 387, 389, 390, 391, 394, 397, 421], "std": [12, 17, 21, 35, 40, 44, 366, 369, 376, 380, 387, 389, 390, 391, 394, 484, 485, 553], "conv3d": [12, 35, 54, 369], "fd": [12, 35, 369, 385, 390, 391, 392, 393], "conv3d_transpos": [12, 35, 369], "depthwise_conv2d": [12, 35, 369], "dropout": [12, 35, 54, 366, 369, 571], "noise_shap": [12, 35, 369, 395], "droput": [12, 395], "turn": [12, 35, 369, 395, 536, 542, 549, 553, 562, 564], "reproduc": [12, 35, 369, 395, 523, 545], "binari": [12, 14, 31, 35, 37, 186, 189, 191, 220, 365, 366, 369, 371, 395, 431], "mask": [12, 35, 273, 367, 369, 395, 398, 399, 566], "42857146": [12, 369, 395], "85714293": [12, 369, 395], "28571415": [12, 35, 369, 395], "71428585": [12, 35, 369, 395], "14285755": [12, 35, 369, 395], "5714283": [12, 369, 395], "4285717": [12, 35, 369, 395], "8571434": [12, 35, 369, 395], "2857151": [12, 369, 395], "dropout1d": [12, 35, 366], "droput1d": 12, "dropout3d": [12, 35, 366], "droput3d": 12, "outer_batch_shap": [12, 35, 369, 396], "inner_batch_shap": [12, 35, 369, 396], "in_featur": [12, 35, 369, 396], "out_featur": [12, 35, 369, 396], "84": [12, 21, 30, 39, 40, 126, 158, 214, 363, 364, 370, 375, 380, 396, 416, 478, 485, 486, 504], "133": [12, 257, 367, 396], "134": [12, 370, 396, 413], "lstm_updat": [12, 35, 369, 568], "init_h": [12, 35, 369, 397, 568], "init_c": [12, 35, 369, 397, 568], "recurrent_kernel": [12, 35, 369, 397, 568], "recurrent_bia": [12, 35, 369, 397, 568], "cell": [12, 35, 54, 369, 397, 550, 568], "batch_shap": [12, 17, 27, 35, 40, 54, 84, 92, 362, 369, 370, 376, 397, 398, 399, 429, 483, 566, 568, 570], "hidden": [12, 35, 54, 369, 397, 548, 555, 568, 572], "recurr": [12, 35, 369, 397, 568, 582, 586], "timestep": [12, 35, 54, 369, 397, 568], "h_i": [12, 35, 397], "c_i": [12, 35, 397], "rc": [12, 35, 397], "multi_head_attent": [12, 35, 369, 561], "num_head": [12, 35, 54, 369, 398], "context": [12, 35, 54, 295, 364, 367, 368, 369, 398, 542, 543, 553], "to_q_fn": [12, 35, 369, 398], "to_kv_fn": [12, 35, 369, 398], "to_out_fn": [12, 35, 369, 398, 561], "to_q_v": [12, 35, 369, 398], "to_kv_v": [12, 35, 369, 398], "to_out_v": [12, 35, 369, 398], "scaled_dot_product_attent": [12, 35, 369], "queri": [12, 25, 35, 54, 158, 170, 273, 364, 367, 369, 398, 399, 549, 551, 570, 582], "num_queri": [12, 35, 369, 398, 399], "feat_dim": [12, 35, 369, 399], "num_kei": [12, 35, 369, 398, 399], "applic": [12, 35, 369, 374, 398, 399, 465, 466, 467, 471, 472, 532, 542, 551, 552, 559, 572, 579, 580, 582, 584, 586, 588], "dot": [12, 31, 35, 54, 366, 369, 370, 398, 399, 427, 532, 550], "attent": [12, 35, 54, 369, 398, 399, 535, 543, 546], "score": [12, 35, 369, 399, 532], "_arraywithlinearalgebra": [13, 47], "choleski": [13, 36, 370, 561], "symmetr": [13, 31, 36, 366, 370, 400, 405, 406, 407, 429, 549], "u": [13, 27, 36, 89, 370, 374, 400, 407, 421, 467, 532, 535, 537, 542, 543, 544, 548, 549, 550, 558, 559, 561, 562, 563, 564, 565, 566, 572, 576], "l": [13, 30, 36, 217, 370, 400, 405, 406, 407, 411, 425, 543, 544], "625": [13, 31, 370, 400], "cross": [13, 14, 31, 36, 37, 366, 370, 371, 431, 432, 433, 532, 550], "vif": [13, 36, 370, 401], "det": [13, 36, 370, 419, 550], "axis1": [13, 15, 36, 38, 370, 372, 404, 425, 447], "axis2": [13, 36, 370, 404, 425], "eigh": [13, 36, 370, 405], "uplo": [13, 36, 370, 406, 407], "eigvalsh": [13, 36, 370], "inner": [13, 27, 36, 92, 362, 370, 373, 405, 406, 411, 456, 457, 458, 541, 561], "inv": [13, 36, 370], "matmul": [13, 36, 327, 367, 370, 421, 547, 564, 565, 568], "transpose_a": [13, 36, 370, 411], "transpose_b": [13, 36, 370, 411], "adjoint_a": [13, 36, 370, 411], "adjoint_b": [13, 36, 370, 411], "detail": [13, 15, 19, 36, 38, 42, 85, 362, 366, 378, 404, 411, 417, 421, 446, 494, 495, 496, 497, 532, 541, 543, 545, 547, 548, 549, 550, 557, 558, 559, 562, 563, 564, 565, 568, 570, 571, 572, 584, 588], "found": [13, 15, 19, 25, 36, 38, 42, 48, 52, 161, 364, 374, 404, 411, 446, 470, 494, 538, 541, 542, 543, 546, 547, 548, 549, 551, 554, 556, 559, 561, 562, 566, 584], "matrix_norm": [13, 36, 370], "ord": [13, 36, 370, 412, 428], "fro": [13, 36, 370, 412], "nuc": [13, 36, 370, 412], "matrix_pow": [13, 36, 370], "matrix_rank": [13, 36, 370], "singular": [13, 36, 370, 412, 414, 417, 421, 422, 551], "stack": [13, 15, 25, 31, 36, 38, 47, 54, 95, 96, 280, 301, 307, 325, 362, 366, 367, 370, 372, 374, 402, 404, 405, 406, 407, 409, 411, 413, 414, 415, 417, 418, 419, 421, 422, 425, 459, 469, 470, 532, 540, 545, 568, 578, 580, 587, 588], "largest_singular_valu": [13, 36, 370, 414, 417], "associ": [13, 36, 180, 365, 370, 414, 417, 429, 518, 543, 551, 558, 559, 562, 563, 564, 576], "full": [13, 35, 36, 123, 205, 211, 272, 280, 301, 307, 321, 325, 362, 363, 365, 367, 369, 370, 387, 389, 390, 391, 414, 418, 420, 421, 518, 523, 532, 535, 536, 543, 551, 554, 555, 557, 562, 564, 566, 568, 576, 580, 582, 588], "defici": [13, 370, 414], "matrix_transpos": [13, 36, 370, 570], "outer": [13, 36, 370, 373, 456, 457, 458, 541], "pinv": [13, 36, 370], "pseudo": [13, 36, 370, 417, 560], "0426": [13, 36, 417], "0964": [13, 36, 417], "0605": [13, 36, 417], "1368": [13, 36, 417], "qr": [13, 36, 370, 563], "decomposit": [13, 36, 370, 400, 410, 418, 421, 541, 589], "orthonorm": [13, 36, 370, 418, 421], "lead": [13, 25, 36, 48, 370, 418, 421, 535, 536, 550, 553, 565, 576], "complet": [13, 25, 36, 370, 418, 535, 541, 542, 543, 545, 546, 549, 550, 553, 555, 562, 563, 564, 566, 570, 571, 580], "namedtupl": [13, 19, 36, 42, 370, 378, 405, 406, 418, 419, 421, 494, 495, 496], "field": [13, 19, 36, 42, 370, 378, 405, 406, 418, 419, 421, 494, 495, 496, 532, 550, 575, 580, 588], "those": [13, 15, 25, 31, 36, 38, 75, 136, 327, 362, 363, 367, 370, 372, 374, 418, 421, 435, 461, 534, 541, 542, 543, 546, 549, 550, 551, 559, 562, 563, 564, 566, 579], "slogdet": [13, 36, 370], "logabsdet": [13, 36, 370, 419], "natur": [13, 36, 199, 212, 214, 231, 365, 370, 419, 535, 546, 548, 553, 555, 563, 575], "6931472": [13, 36, 370, 419], "098611": [13, 370, 419], "solv": [13, 36, 370, 532, 542, 545, 562, 569, 575, 584], "svd": [13, 36, 370, 422], "compute_uv": [13, 36, 370, 421], "full_matric": [13, 36, 370, 421], "svf": [13, 421], "vh": [13, 36, 370, 421], "significantli": [13, 36, 370, 421, 534, 550, 580], "faster": [13, 36, 370, 421, 540, 577, 584, 587], "hermitian": [13, 36, 366, 370, 405, 406, 407, 421], "reconstruct": [13, 19, 42, 370, 378, 421, 494, 496, 563], "close": [13, 200, 214, 231, 365, 370, 372, 421, 438, 541, 542, 543, 554, 562, 566, 582], "reconstructed_x": [13, 370, 421], "svdval": [13, 36, 370], "tensordot": [13, 36, 370, 551], "tensorsolv": [13, 36, 370], "vander": [13, 36, 370], "vandermond": [13, 36, 370, 426], "vecdot": [13, 36, 370], "vector_norm": [13, 36, 370], "singleton": [13, 18, 21, 22, 36, 41, 44, 45, 370, 372, 377, 380, 381, 428, 438, 445, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 568], "accordingli": [13, 18, 19, 21, 22, 36, 41, 44, 45, 90, 200, 214, 362, 365, 370, 377, 378, 380, 381, 428, 490, 494, 495, 496, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 556, 562, 568], "mathemat": [13, 36, 180, 184, 200, 214, 360, 365, 370, 412, 428, 551, 562, 566, 582, 588], "l1": [13, 36, 370, 428, 549, 571], "manhattan": [13, 36, 370, 428], "euclidean": [13, 36, 370, 428], "7416575": [13, 36, 370, 428], "vector_to_skew_symmetric_matrix": [13, 36, 370], "_arraywithloss": [14, 47], "binary_cross_entropi": [14, 37, 371, 550], "pred": [14, 31, 37, 366, 371, 431, 432, 433, 532, 549, 558, 561], "label": [14, 31, 37, 366, 371, 431, 432, 433, 532, 541, 543, 545, 550, 562, 567, 568, 569, 573, 582], "predict": [14, 31, 37, 366, 371, 431, 432, 433, 532], "amount": [14, 31, 37, 173, 364, 366, 371, 431, 432, 433, 542, 550, 552, 563], "smooth": [14, 31, 37, 366, 371, 431, 432, 433, 560], "entropi": [14, 31, 37, 366, 371, 431, 432, 433, 532], "357": [14, 37, 371, 431, 433], "223": [14, 37, 371, 431, 433], "cross_entropi": [14, 37, 371, 433, 532, 549, 558, 561], "3862944": [14, 371, 432], "sparse_cross_entropi": [14, 37, 371], "_arraywithmanipul": [15, 47], "x_min": [15, 38, 372, 435, 573], "x_max": [15, 38, 372, 435, 573], "join": [15, 25, 38, 372, 436, 446, 532, 555], "constant_pad": [15, 38, 372], "before_1": [15, 38, 366, 372, 437, 450], "after_1": [15, 38, 366, 372, 437, 450], "before_n": [15, 38, 366, 372, 437, 450], "after_n": [15, 38, 366, 372, 437, 450], "permute_dim": [15, 38, 372], "repetit": [15, 38, 372, 441, 448, 555, 566], "fit": [15, 38, 372, 441, 562, 568, 578, 579, 582], "flat": [15, 25, 38, 52, 298, 366, 367, 372, 441], "allowzero": [15, 38, 372, 442], "remain": [15, 18, 38, 41, 180, 230, 365, 366, 372, 374, 377, 442, 465, 492, 543, 550, 553, 555, 565, 566, 576], "never": [15, 38, 372, 442, 543, 551, 562, 564, 566], "valueerror": [15, 38, 42, 372, 442, 445, 497, 529, 555], "reus": [15, 38, 372, 442, 555, 564, 587], "buffer": [15, 38, 372, 442, 576], "roll": [15, 38, 372, 549, 557], "shift": [15, 27, 38, 48, 87, 188, 190, 365, 366, 372, 443, 542, 543, 553, 557], "restor": [15, 38, 372, 443], "num_or_size_split": [15, 25, 38, 369, 372, 398, 444, 568], "with_remaind": [15, 25, 38, 372, 444], "mani": [15, 25, 38, 52, 366, 372, 444, 532, 534, 535, 536, 541, 542, 543, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 564, 566, 568, 570, 571, 576, 578, 582, 585, 588, 589], "squeez": [15, 38, 372, 582], "document": [15, 327, 367, 446, 537, 539, 540, 543, 548, 550, 551, 553, 555, 562, 563, 564, 571, 573], "swapax": [15, 38, 372], "axis0": [15, 38, 372, 447], "swap_ax": [15, 447], "tile": [15, 32, 38, 263, 372], "unpack": [15, 38, 372, 449, 556, 563, 564], "zero_pad": [15, 38, 372], "_arraywithnorm": [16, 47], "layer_norm": [16, 39, 375], "normalized_idx": [16, 39, 375, 478], "new_std": [16, 39, 56, 375, 478], "learnabl": [16, 39, 56, 375, 478, 573], "post": [16, 39, 375, 478, 542, 560, 573], "0976": [16, 375, 478], "3452": [16, 375, 478], "2740": [16, 375, 478], "1047": [16, 375, 478], "5886": [16, 375, 478], "2732": [16, 375, 478], "7696": [16, 375, 478], "7024": [16, 375, 478], "2518": [16, 375, 478], "826": [16, 375, 478], "178": [16, 375, 478], "981": [16, 375, 478], "831": [16, 375, 478], "421": [16, 375, 478], "_arraywithrandom": [17, 47], "multinomi": [17, 40, 366, 376], "population_s": [17, 40, 376, 483], "num_sampl": [17, 40, 376, 483], "unnorm": [17, 40, 376, 483, 564], "popul": [17, 21, 25, 40, 44, 366, 376, 380, 483, 509, 511, 551, 552, 564, 568, 588], "draw": [17, 40, 53, 366, 376, 483, 485, 486, 523, 541, 545, 563, 564], "ve": [17, 40, 376, 483, 541, 542, 543, 564, 566, 567, 570, 577], "highest": [17, 40, 376, 484], "half": [17, 40, 75, 362, 376, 484, 486, 566], "int64": [17, 18, 20, 21, 28, 40, 41, 43, 44, 93, 113, 119, 122, 124, 126, 130, 131, 134, 141, 362, 363, 366, 377, 379, 380, 484, 489, 490, 491, 499, 502, 503, 508, 510, 551, 562, 564, 568], "235": [17, 485], "float16": [17, 28, 40, 115, 118, 123, 125, 363, 366, 370, 428, 485, 486, 551, 564], "807": [17, 485], "random_uniform": [17, 40, 376, 552, 564, 568, 572], "86": [17, 40, 345, 368, 485, 486], "53": [17, 30, 173, 200, 348, 350, 357, 364, 368, 375, 478, 486], "_arraywithsearch": [18, 47], "select_last_index": [18, 41, 377, 489, 490], "occurr": [18, 377, 378, 489, 490, 494], "insert": [18, 41, 372, 374, 377, 379, 438, 464, 489, 499, 550], "appropri": [18, 23, 41, 46, 180, 365, 366, 377, 489, 541, 543, 559, 564], "argmin": [18, 41, 377], "output_dtyp": [18, 41, 377, 490], "across": [18, 25, 32, 41, 169, 170, 253, 282, 364, 367, 369, 374, 377, 395, 465, 489, 490, 541, 545, 549, 551, 553, 555, 557, 558, 560, 562, 564, 566, 580, 582, 587], "argwher": [18, 41, 377, 556], "nonzero": [18, 41, 180, 365, 377], "as_tupl": [18, 41, 377, 492], "fewer": [18, 41, 377, 492], "yield": [18, 366, 377, 493, 532, 550, 556], "_arraywithset": [19, 47], "unique_al": [19, 42, 378], "inverse_indic": [19, 42, 378, 494, 496], "vari": [19, 261, 367, 378, 494, 495, 496, 497, 549, 553, 562, 564, 570], "unique_count": [19, 42, 378], "unique_invers": [19, 42, 378], "unique_valu": [19, 42, 378], "admonit": [19, 497], "henc": [19, 372, 378, 438, 494, 495, 496, 497, 542, 549, 550, 564], "dask": [19, 378, 494, 495, 496, 497, 535], "difficult": [19, 378, 494, 495, 496, 497, 543, 545, 551, 564, 576], "know": [19, 378, 494, 495, 496, 497, 536, 539, 543, 548, 563, 564, 565, 583], "omit": [19, 231, 365, 378, 494, 495, 496, 497, 557, 561, 562], "x_i": [19, 21, 30, 31, 53, 177, 178, 179, 181, 182, 183, 187, 192, 193, 194, 199, 200, 201, 206, 207, 208, 209, 212, 213, 214, 215, 218, 231, 232, 233, 234, 235, 236, 238, 239, 240, 365, 366, 378, 380, 494, 495, 496, 497, 505, 506, 507, 509, 510, 511, 554], "x_j": [19, 378, 494, 495, 496, 497], "impli": [19, 378, 494, 495, 496, 497, 564], "behavior": [19, 227, 230, 365, 378, 494, 495, 496, 497, 548, 549, 550, 551, 558, 562, 563, 564, 566, 568, 576, 579], "distinct": [19, 378, 494, 495, 496, 497, 535, 542, 549, 554, 560, 561, 562, 567, 582], "could": [19, 378, 494, 495, 496, 497, 535, 536, 541, 542, 543, 545, 548, 550, 551, 553, 559, 561, 562, 563, 564, 568, 570, 571, 572, 582, 587, 588], "typeerror": [19, 42, 378, 497, 570], "_arraywithsort": [20, 47], "argsort": [20, 43, 379, 499, 562], "descend": [20, 43, 370, 379, 421, 422, 498, 500], "ascend": [20, 43, 366, 379, 498, 499], "stabil": [20, 43, 311, 312, 367, 379, 498, 500, 551, 560, 566], "maintain": [20, 43, 379, 498, 500, 534, 543, 545, 550, 562, 563, 564, 581], "searchsort": [20, 43, 379], "side": [20, 43, 366, 379, 499, 542, 543, 548], "sorter": [20, 43, 379, 499], "ret_dtyp": [20, 43, 379, 499], "_arraywithstatist": [21, 47], "cumprod": [21, 44, 380, 562, 573], "cumul": [21, 44, 380, 502, 503, 575], "uint64": [21, 120, 125, 127, 128, 137, 139, 142, 363, 380, 502, 503, 508, 510, 551, 564, 568], "uint16": [21, 115, 120, 125, 126, 134, 363, 380, 502, 503, 508, 510, 551, 562, 564, 568], "bit": [21, 122, 123, 126, 187, 188, 190, 363, 365, 380, 502, 503, 508, 510, 540, 541, 542, 549, 550, 551, 553, 558, 568, 570, 588], "uint32": [21, 120, 125, 126, 127, 148, 363, 380, 502, 503, 508, 510, 551, 564, 568], "resolv": [21, 372, 380, 438, 502, 503, 508, 510, 543, 548, 551, 568], "120": [21, 44, 48, 370, 416, 502, 532], "cumsum": [21, 44, 380, 551], "einsum": [21, 44, 380], "equat": [21, 31, 44, 366, 370, 380, 420, 504, 582], "operand": [21, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 199, 200, 201, 212, 213, 214, 215, 216, 227, 230, 231, 233, 234, 235, 238, 239, 240, 365, 366, 380, 504, 505, 507, 510, 546, 549, 554, 562], "describ": [21, 31, 366, 380, 504, 508, 510, 539, 541, 543, 550, 564, 568, 573, 582], "contract": [21, 370, 380, 423, 504], "seq": [21, 380, 504], "consist": [21, 25, 55, 370, 380, 405, 406, 504, 534, 545, 546, 550, 551, 555, 561, 568, 583], "ii": [21, 44, 380, 504, 543], "jk": [21, 380, 504], "ik": [21, 380, 504], "66": [21, 32, 33, 191, 261, 262, 349, 365, 367, 368, 370, 380, 416, 504], "104": [21, 370, 380, 416, 504], "126": [21, 61, 228, 359, 365, 370, 380, 413, 504], "510": [21, 380, 504], "special": [21, 36, 47, 48, 53, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 199, 200, 201, 212, 213, 214, 215, 216, 218, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 365, 366, 380, 505, 506, 507, 509, 510, 511, 523, 541, 545, 546, 550, 553, 554, 555, 557, 561, 563, 565, 566, 582, 583, 584], "arithmet": [21, 44, 190, 365, 380, 506, 562], "propag": [21, 190, 365, 380, 505, 506, 507, 509, 510, 511, 560], "04999995": [21, 506], "freedom": [21, 44, 380, 509, 511, 547], "adjust": [21, 44, 380, 509, 511], "constitut": [21, 44, 380, 509, 511, 558, 568, 583], "commonli": [21, 44, 380, 509, 511, 555, 558, 560], "8164966": [21, 380, 509], "var": [21, 44, 46, 70, 71, 72, 73, 361, 373, 380, 456, 457, 526, 542, 553, 568], "unbias": [21, 44, 380, 511], "6666665": [21, 511, 571], "667": [21, 32, 196, 257, 311, 365, 367, 511], "_arraywithutil": [22, 47], "AND": [22, 45, 186, 217, 365, 381, 512], "invalid": [22, 45, 370, 372, 381, 427, 438, 512, 513, 542, 548, 551, 556], "_wrap_funct": [23, 46, 548, 558, 559], "function_nam": [23, 46, 541], "new_funct": [23, 46, 548], "add_ivy_array_instance_method": 23, "cl": [23, 46], "to_ignor": [23, 46, 374, 470, 471], "shown": [23, 25, 46, 209, 280, 365, 366, 367, 541, 543, 545, 548, 550, 551, 553, 555, 556, 557, 562, 563, 564, 565, 568, 570, 576], "toi": [23, 46], "arrayexampl": 23, "hasattr": [23, 46], "_containerwithactiv": [24, 48], "dict_in": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "queue": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 278, 305, 323, 367, 571], "queue_load_s": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "container_combine_method": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "list_join": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "queue_timeout": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_limit": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "key_length_limit": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_ind": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "print_line_spac": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "ivyh": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "default_key_color": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "green": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 531, 542, 543], "keyword_color_dict": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "rebuild_child_contain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "types_to_iteratively_nest": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "alphabetical_kei": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "dynamic_backend": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 55], "containerbas": [24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 549], "static": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 81, 313, 362, 416, 541, 553, 554, 558, 559, 562, 576, 581, 582, 583], "_static_gelu": 24, "key_chain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 121, 123, 126, 129, 130, 131, 132, 134, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "to_appli": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 121, 123, 126, 129, 130, 131, 132, 134, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 374, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "prune_unappli": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 121, 123, 126, 129, 130, 131, 132, 134, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 374, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "map_sequ": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 110, 111, 112, 113, 121, 123, 126, 129, 130, 131, 132, 134, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "exact": [24, 25, 61, 366, 378, 494, 496, 542, 543, 545, 553, 568], "formul": [24, 61], "chain": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 58, 61, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 126, 130, 131, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 373, 374, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 456, 457, 461, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 546, 549, 560, 562, 572, 573, 576, 582], "skip": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 374, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 472, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 548, 559, 564], "prune": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 65, 66, 67, 68, 69, 87, 92, 94, 98, 111, 113, 126, 130, 131, 137, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 253, 254, 256, 257, 261, 262, 263, 265, 268, 269, 277, 282, 284, 285, 286, 288, 289, 291, 298, 299, 311, 312, 313, 315, 317, 318, 326, 349, 355, 374, 386, 387, 388, 389, 395, 396, 399, 400, 401, 407, 409, 411, 412, 414, 416, 418, 419, 425, 431, 432, 433, 435, 439, 442, 443, 444, 445, 446, 449, 450, 472, 473, 474, 475, 483, 484, 485, 486, 488, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 509, 511, 512, 513, 519, 550], "static_gelu": 24, "185": 24, "046": 24, "_static_leaky_relu": 24, "static_leaky_relu": 24, "38999999": [24, 63], "_static_log_softmax": 24, "static_log_softmax": 24, "371": [24, 64], "_static_mish": 24, "static_mish": 24, "30883577": [24, 65, 359], "28903052": [24, 65, 359], "10714479": [24, 65, 359], "_static_relu": 24, "static_relu": 24, "40000001": [24, 47, 48, 63, 66, 359, 378, 495], "_static_sigmoid": 24, "static_sigmoid": 24, "2689414": [24, 67, 68], "7310586": [24, 67, 68], "88079703": [24, 67], "62245935": [24, 67], "4750208": [24, 67], "_static_softmax": 24, "static_softmax": 24, "72844321": [24, 68], "19852395": [24, 68], "07303288": [24, 68], "_static_softplu": 24, "revert": [24, 69, 359], "static_softplu": 24, "53499615": 24, "42036411": 24, "948": [24, 69], "166": [24, 61, 359], "159": [24, 61, 359, 369, 396], "__getitem__": [25, 549], "slice": [25, 32, 268, 269, 273, 366, 367, 374, 468, 582], "dictionari": [25, 42, 48, 60, 62, 170, 347, 359, 364, 368, 497, 518, 546, 550, 551, 562, 571, 576], "multiprocess": [25, 48, 367, 571, 576], "asynchron": [25, 48, 582], "wait": [25, 48, 305, 367, 532, 541, 543, 550, 562], "combin": [25, 48, 266, 267, 367, 370, 401, 411, 543, 546, 549, 551, 553, 555, 558, 564, 566, 573, 582], "arriv": [25, 48, 305, 367, 566], "cont_list_join": [25, 48], "timeout": [25, 48, 278, 305, 323, 367], "limit": [25, 48, 53, 123, 126, 256, 257, 363, 367, 372, 435, 526, 532, 542, 543, 548, 550, 553, 555, 556, 562, 564, 566, 571, 576, 581, 582, 583], "whitespac": [25, 48], "indent": [25, 48, 571], "newlin": [25, 48, 554], "color": [25, 48, 531], "termin": [25, 48, 542, 543, 549, 568, 571], "termcolor": [25, 48], "rebuild": [25, 48, 538], "constructor": [25, 48, 51, 58, 252, 367, 518, 551, 552, 570], "kept": [25, 48, 373, 456, 457, 543, 561, 565], "structur": [25, 28, 48, 52, 123, 126, 258, 367, 374, 472, 532, 543, 546, 549, 558, 563, 564, 565, 571, 572, 581, 582], "alphabet": [25, 48], "__setitem__": [25, 546, 549, 570], "_cont_at_key_chains_input_as_dict": 25, "current_chain": 25, "ignore_key_error": 25, "_cont_at_key_chains_input_as_seq": 25, "_cont_call_static_method_with_flexible_arg": 25, "static_method": 25, "kw": 25, "self_idx": 25, "_cont_concat_unifi": 25, "_cont_get_dev": 25, "_cont_get_shap": 25, "properti": [25, 47, 55, 57, 366, 515, 545, 549, 553, 558, 563, 564, 570, 571, 572, 588], "_cont_ivi": 25, "_cont_mean_unifi": 25, "_1": 25, "_cont_prune_key_chains_input_as_dict": 25, "return_cont": 25, "_cont_prune_key_chains_input_as_seq": 25, "_cont_slice_kei": 25, "key_slic": 25, "_cont_sum_unifi": 25, "_get_queue_item": 25, "cont_all_fals": 25, "assert_is_bool": 25, "assert": [25, 254, 367, 523, 544, 545, 556, 562, 563, 564, 565, 570, 571], "cont_all_key_chain": 25, "include_empti": 25, "cont_all_tru": [25, 549, 571], "cont_as_bool": 25, "cont_assert_contains_sub_contain": 25, "sub_cont": 25, "screen": [25, 542, 571], "cont_assert_contains_sub_structur": 25, "check_shap": [25, 526], "cont_assert_ident": 25, "check_typ": 25, "same_arrai": [25, 571], "arrays_equ": 25, "ident": [25, 84, 161, 273, 362, 364, 367, 370, 374, 413, 472, 534, 536, 549, 558, 559, 562, 563, 565, 566, 570, 571, 576, 577], "cont_assert_identical_structur": 25, "cont_at_key_chain": 25, "ignore_non": 25, "cont_at_kei": 25, "substr": 25, "try": [25, 53, 319, 366, 367, 532, 533, 535, 536, 541, 542, 543, 545, 546, 549, 550, 551, 555, 556, 561, 562, 563, 568, 570, 576], "cont_combin": 25, "prioriti": [25, 366, 543, 561], "most": [25, 27, 92, 362, 370, 405, 406, 532, 535, 540, 541, 542, 546, 549, 550, 551, 552, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 576, 582, 583, 585, 586, 588, 589], "duplic": [25, 374, 461, 547, 554, 556, 559, 560, 563, 572, 588], "configur": [25, 170, 364, 374, 472, 538, 542, 543, 548, 550, 551, 559], "container_rightmost": 25, "cont_common_key_chain": [25, 549], "cont_config": 25, "cont_contains_sub_contain": 25, "cont_contains_sub_structur": 25, "cont_copi": [25, 571], "cont_create_if_abs": 25, "noth": [25, 566, 588], "cont_cutoff_at_depth": 25, "depth_cutoff": 25, "summari": [25, 127, 258, 279, 363, 367, 542, 543, 564], "cont_cutoff_at_height": 25, "height_cutoff": 25, "deep": [25, 261, 367, 532, 534, 537, 539, 540, 541, 543, 545, 548, 549, 551, 560, 563, 567, 570, 571, 580, 582, 585, 586, 588, 589], "intern": [25, 53, 54, 55, 56, 58, 374, 459, 469, 470, 515, 546, 549, 552, 554, 561, 563, 564], "cont_dev": 25, "belong": [25, 541, 545, 572], "cont_dev_str": 25, "cont_diff": [25, 549, 571], "diff_kei": 25, "detect_key_diff": 25, "detect_value_diff": 25, "detect_shape_diff": 25, "share": [25, 143, 363, 532, 535, 547, 549, 553, 558, 560, 562, 563, 564, 566, 568, 580, 581, 588], "among": [25, 536, 550, 564, 566, 582], "container0": 25, "cont_duplicate_array_keychain": 25, "cont_find_sub_contain": 25, "sub_cont_to_find": 25, "exsit": 25, "cont_find_sub_structur": 25, "sub_struc_to_find": 25, "cont_flatten_key_chain": [25, 571], "__": [25, 553, 571], "above_height": [25, 571], "below_depth": [25, 571], "cont_format_key_chain": 25, "format_fn": 25, "cont_from_disk_as_hdf5": [25, 571], "h5_obj_or_filepath": 25, "slice_obj": 25, "load": [25, 532, 564, 576, 581, 588], "disk": [25, 571, 581], "h5py": 25, "file": [25, 55, 281, 308, 367, 541, 542, 543, 545, 546, 547, 548, 549, 550, 554, 555, 556, 558, 562, 563, 564, 565, 568, 571, 578, 581, 582, 583], "hdf5": [25, 55, 571], "filepath": [25, 543, 545], "h5": 25, "cont_from_disk_as_json": [25, 571], "json_filepath": 25, "json": [25, 538, 542, 571], "cont_from_disk_as_pickl": [25, 571], "pickle_filepath": 25, "pickl": [25, 549, 571], "cont_from_flat_list": 25, "flat_list": 25, "hierarchi": [25, 541, 571, 578, 588], "cont_handle_inplac": 25, "prime": 25, "being": [25, 46, 47, 52, 53, 75, 255, 278, 305, 362, 366, 367, 370, 407, 515, 518, 532, 535, 536, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 556, 557, 559, 561, 562, 563, 564, 566, 568, 571, 575, 576, 578, 580, 581, 582, 583, 588, 589], "overwritten": [25, 546, 547], "cont_has_kei": 25, "query_kei": 25, "somewher": [25, 550], "cont_has_key_chain": 25, "cont_ident": [25, 571], "cont_identical_array_shap": 25, "regardless": [25, 536, 537, 551, 570, 573], "cont_identical_config": 25, "cont_identical_structur": 25, "cont_if_exist": 25, "cont_inplace_upd": 25, "cont_ivi": 25, "cont_key_chains_contain": 25, "sub_str": 25, "cont_list_stack": [25, 571], "cont_map": [25, 549, 571], "func": [25, 171, 255, 327, 347, 348, 350, 357, 364, 366, 367, 368, 374, 472, 518, 541, 545, 546, 553, 555, 560, 561], "cont_map_sub_cont": 25, "include_self": 25, "possibi": 25, "cont_max_depth": 25, "cont_multi_map": [25, 549], "map_nest": 25, "assert_ident": 25, "leftmost": [25, 374, 472], "cont_multi_map_in_funct": [25, 549], "cont_num_arrai": 25, "cont_overwrite_at_key_chain": 25, "target_dict": 25, "return_dict": 25, "cont_prune_empti": 25, "keep_non": 25, "cont_prune_key_chain": 25, "key1": [25, 532, 572], "key2": [25, 532], "key3": 25, "cont_prune_key_from_key_chain": 25, "decid": [25, 374, 459, 460, 469, 470, 471, 532, 541, 542, 551, 566], "cont_prune_kei": 25, "cont_prune_keys_from_key_chain": 25, "cont_reduc": 25, "cont_remove_key_length_limit": 25, "cont_remove_print_limit": 25, "cont_reshape_lik": 25, "leading_shap": 25, "cont_restructur": 25, "keep_orig": 25, "old": [25, 542, 547, 561], "cont_restructure_key_chain": 25, "keychain_map": 25, "cont_set_at_key_chain": 25, "cont_set_at_kei": 25, "cont_shap": [25, 369, 390], "attribut": [25, 123, 124, 125, 126, 159, 160, 167, 266, 267, 363, 364, 366, 367, 519, 548, 549, 551, 554, 559, 561, 562, 569, 570, 571, 572], "cont_show": 25, "cont_show_sub_contain": 25, "sub_cont_or_keychain": 25, "cont_size_ordered_arrai": 25, "keychain": [25, 31], "cont_slice_kei": 25, "all_depth": 25, "cont_slice_via_kei": 25, "slice_kei": 25, "cont_sort_by_kei": 25, "cont_structural_diff": 25, "cont_to_dict": 25, "cont_to_disk_as_hdf5": [25, 571], "starting_index": 25, "max_batch_s": 25, "later": [25, 255, 367, 541, 564, 582], "cont_to_disk_as_json": [25, 571], "cont_to_disk_as_pickl": [25, 571], "cont_to_flat_list": 25, "cont_to_iter": [25, 549], "leaf_keys_onli": 25, "cont_to_iterator_kei": 25, "cont_to_iterator_valu": 25, "cont_to_json": 25, "cont_to_nested_list": 25, "cont_to_raw": 25, "cont_trim_kei": 25, "max_length": 25, "trim": 25, "cont_try_kc": 25, "tri": [25, 519], "cont_unifi": 25, "unifi": [25, 171, 364, 532, 533, 535, 544, 545, 546, 551, 555, 560, 562, 566, 568, 576, 578, 579, 580, 582, 586, 589], "concatten": [25, 171, 364], "cont_unstack_cont": 25, "dim_siz": 25, "cont_update_config": 25, "cont_with_default_key_color": 25, "cont_with_entries_as_list": 25, "cont_with_ivy_backend": 25, "ivy_backend": 25, "cont_with_key_length_limit": [25, 571], "cont_with_print_ind": [25, 571], "cont_with_print_limit": [25, 571], "cont_with_print_line_spac": 25, "h5_file_s": 25, "shuffle_h5_fil": 25, "seed_valu": [25, 376, 487], "split_cont": 25, "constitu": [25, 573], "_is_json": 25, "_repr": 25, "_containerwithconvers": [26, 48], "_static_to_ivi": 26, "_static_to_n": 26, "_containerwithcr": [27, 48], "_static_arang": 27, "_static_asarrai": 27, "_static_empty_lik": 27, "_static_ey": 27, "n_row": [27, 31, 84, 362, 366], "n_col": [27, 31, 84, 362, 366], "_static_from_dlpack": 27, "_static_full_lik": 27, "static_full_lik": 27, "2324": [27, 87, 362], "234": [27, 30, 87, 198, 240, 362, 365, 369, 396], "123": [27, 28, 87, 126, 264, 362, 367, 564], "_static_linspac": 27, "_static_logspac": 27, "static_logspac": 27, "15443469": [27, 89], "64158883": [27, 89], "_static_meshgrid": 27, "_static_native_arrai": 27, "_static_one_hot": 27, "static_one_hot": 27, "_static_on": 27, "_static_ones_lik": 27, "_static_tril": 27, "_static_triu": 27, "_static_zero": 27, "_static_zeros_lik": 27, "5443469": [27, 89, 362], "_containerwithdatatyp": [28, 48], "_static_astyp": 28, "718": [28, 30, 110, 219, 363], "618": [28, 30, 110, 219, 363], "static_astyp": 28, "_static_broadcast_arrai": 28, "static_broadcast_arrai": 28, "_static_broadcast_to": 28, "static_broadcast_to": 28, "_static_can_cast": 28, "from_": [28, 113, 363], "static_can_cast": 28, "_static_default_complex_dtyp": 28, "complex_dtyp": [28, 116, 138, 363], "_static_default_float_dtyp": 28, "float_dtyp": [28, 118, 140, 363], "_static_dtyp": 28, "_static_finfo": 28, "inquir": [28, 123, 126], "static_finfo": 28, "55040e": [28, 123, 363], "7976931348623157e": [28, 123, 363], "308": [28, 123, 363, 564], "_static_function_supported_dtyp": 28, "_static_function_unsupported_dtyp": 28, "_static_iinfo": 28, "1800": [28, 126, 363], "1084": 28, "40000": 28, "static_iinfo": 28, "2147483648": [28, 126, 363], "2147483647": [28, 126, 363], "_static_is_bool_dtyp": 28, "dtype_in": [28, 108, 109, 122, 128, 129, 130, 131, 132, 133, 134, 149, 363], "_static_is_complex_dtyp": 28, "is_complex_dtyp": [28, 363], "roughli": [28, 542, 545, 585], "static_is_complex_dtyp": 28, "complex64": [28, 116, 130, 138, 144, 363], "_static_is_float_dtyp": 28, "static_is_float_dtyp": 28, "_static_is_int_dtyp": 28, "_static_is_uint_dtyp": 28, "_static_result_typ": 28, "static_result_typ": 28, "broadcats": [28, 111], "_containerwithdevic": [29, 48], "_static_dev": 29, "static_dev": 29, "_static_to_devic": 29, "static_to_devic": 29, "contaion": [29, 157], "_containerwithelementwis": [30, 48], "_static_ab": 30, "static_ab": 30, "_static_aco": 30, "static_aco": 30, "_static_acosh": 30, "static_acosh": 30, "_static_add": 30, "static_add": [30, 549, 553, 554], "_static_asin": 30, "static_asin": 30, "524": [30, 181, 365], "412": [30, 35, 181, 365], "201": [30, 31, 181, 365], "_static_asinh": 30, "static_asinh": 30, "_static_atan": 30, "static_atan": 30, "_static_atan2": 30, "static_atan2": 30, "915": [30, 184, 365], "29": [30, 32, 33, 40, 184, 261, 262, 347, 351, 365, 367, 368, 484, 485, 486], "983": [30, 184, 365], "978": [30, 67, 184, 359, 365], "696": [30, 40, 184, 365, 485], "993": [30, 184, 365], "_static_atanh": 30, "static_atanh": 30, "203": [30, 39, 185, 375, 478], "_static_bitwise_and": 30, "static_bitwise_and": 30, "_static_bitwise_invert": 30, "static_bitwise_invert": 30, "_static_bitwise_left_shift": 30, "_static_bitwise_or": 30, "static_bitwise_or": 30, "_static_bitwise_right_shift": 30, "static_bitwise_right_shift": 30, "_static_bitwise_xor": 30, "static_bitwise_xor": 30, "_static_ceil": 30, "static_ceil": 30, "_static_co": 30, "static_co": 30, "_static_cosh": 30, "static_cosh": 30, "34": [30, 31, 32, 40, 126, 191, 194, 216, 234, 255, 261, 262, 363, 365, 367, 370, 376, 413, 485, 486], "_static_deg2rad": 30, "static_deg2rad": 30, "0262": [30, 195, 228, 365], "873": [30, 195, 228, 365], "_static_divid": 30, "static_divid": 30, "_static_equ": 30, "static_equ": 30, "_static_erf": 30, "static_erf": 30, "27632612": [30, 198], "934008": [30, 198], "99999928": [30, 198], "91903949": [30, 198], "_static_exp": 30, "static_exp": 30, "59814835": [30, 199], "4131622": [30, 199], "_static_expm1": 30, "thefunct": [30, 198], "areal": 30, "static_expm1": 30, "71828175": 30, "38905621": 30, "59815216": 30, "_static_floor": 30, "static_floor": 30, "_static_floor_divid": 30, "static_floor_divid": 30, "_static_great": 30, "static_great": 30, "_static_greater_equ": 30, "static_greater_equ": 30, "_static_isfinit": 30, "999999999999": [30, 206, 365], "static_isfinit": 30, "_static_isinf": 30, "static_isinf": 30, "_static_isnan": 30, "static_isnan": 30, "_static_isr": 30, "0j": [30, 31, 209, 365, 366], "23j": [30, 31], "9j": [30, 31], "static_isr": 30, "_static_less": 30, "static_less": 30, "_static_less_equ": 30, "static_less_equ": 30, "_static_log": 30, "static_log": 30, "_static_log10": 30, "static_log10": 30, "898": [30, 213, 365], "0414": [30, 213, 365], "_static_log1p": 30, "static_log1p": 30, "_static_log2": 30, "_static_logaddexp": 30, "static_logaddexp": 30, "_static_logical_and": 30, "static_logical_and": 30, "_static_logical_not": 30, "static_logical_not": 30, "_static_logical_or": 30, "static_logical_or": 30, "_static_logical_xor": 30, "static_logical_xor": 30, "_static_maximum": 30, "static_maximum": 30, "_static_minimum": 30, "static_minimum": 30, "_static_multipli": 30, "static_multipli": 30, "_static_neg": 30, "static_neg": 30, "_static_not_equ": 30, "static_not_equ": 30, "_static_posit": 30, "static_posit": 30, "_static_pow": 30, "static_pow": 30, "_static_rad2deg": 30, "static_rad2deg": 30, "5160": 30, "10300": [30, 228, 365], "15500": 30, "20600": 30, "2860": [30, 228], "_static_reciproc": 30, "recirpoc": [30, 229], "static_reciproc": 30, "_static_remaind": 30, "static_remaind": 30, "_static_round": 30, "thevfunct": 30, "300": [30, 32, 231, 269, 299, 365, 366, 367, 370, 409, 564], "527": [30, 231, 365], "static_round": 30, "301": [30, 231, 365], "_static_sign": 30, "static_sign": 30, "_static_sin": 30, "static_sin": 30, "757": [30, 233, 365], "959": [30, 200, 233, 365], "279": [30, 233, 256, 365, 366, 367], "_static_sinh": 30, "static_sinh": 30, "835": [30, 234], "347": [30, 234, 555], "721": [30, 234], "_static_sqrt": 30, "93": [30, 32, 40, 158, 235, 261, 262, 364, 367, 485, 486], "static_sqrt": 30, "_static_squar": 30, "static_squar": 30, "_static_subtract": 30, "static_subtract": 30, "_static_tan": 30, "static_tan": [30, 549, 553], "143": [30, 48, 238, 365, 553], "_static_tanh": 30, "static_tanh": 30, "995": [30, 239, 365], "9999": 30, "_static_trapz": 30, "static_trapz": 30, "_static_trunc": 30, "static_trunc": 30, "_static_trunc_divid": 30, "644": [30, 181, 365, 572], "305": [30, 31, 35, 181, 365, 366, 396], "351": [30, 195, 228, 365], "00613": [30, 195], "0154": [30, 195], "403": [30, 199], "428772": [30, 199], "649": [30, 200], "220": [30, 200], "865": [30, 200], "metho": [30, 205, 215], "7j": [30, 31, 209, 365, 366], "956": [30, 214], "nuner": [30, 223], "65": [30, 33, 40, 190, 223, 284, 345, 365, 366, 367, 368, 370, 380, 416, 485, 486, 504], "413": [30, 228, 555], "_containerwithactivationexperiment": [31, 48], "contan": 31, "19722462": 31, "84729779": 31, "31326163": 31, "46328258": 31, "51301527": 31, "79813886": 31, "22856998": 31, "42028043": 31, "31868932": 31, "static_batch_norm": 31, "static_logit": 31, "static_logsigmoid": 31, "34115386": 31, "64439666": 31, "24115384": 31, "55435526": 31, "07888974": 31, "00741899": 31, "26328245": 31, "00012302": 31, "static_prelu": 31, "static_relu6": 31, "static_selu": 31, "static_thresholded_relu": 31, "_containerwithconversionexperiment": [31, 48], "_containerwithcreationexperiment": [31, 48], "hamming_window": [31, 366], "period": [31, 366, 543, 565], "coeffici": [31, 366, 370, 420], "ham": [31, 366], "8000": [31, 366], "2000": [31, 366], "4180": 31, "8180": 31, "hann_window": [31, 366], "hann": [31, 366], "7500": 31, "3455": 31, "9045": 31, "kaiser_bessel_derived_window": [31, 366], "suitabl": [31, 366, 379, 499, 542, 543, 549, 565, 582], "spectral": [31, 366], "analysi": [31, 366, 582, 583], "design": [31, 366, 532, 534, 535, 544, 548, 550, 551, 561, 562, 563, 566, 568, 570, 576, 578, 580, 582, 585, 586, 587], "kaiser": [31, 366], "70710677": [31, 366], "18493208": [31, 366], "9827513": [31, 366], "kaiser_window": [31, 366], "static_kaiser_window": 31, "2049": 31, "8712": 31, "0367": [31, 366], "7753": 31, "static_eye_lik": 31, "static_hamming_window": 31, "static_hann_window": 31, "window_length": [31, 366], "static_hann": 31, "static_kaiser_bessel_derived_window": 31, "static_tril_indic": 31, "static_triu_indic": 31, "static_vorbis_window": 31, "vorbis_window": [31, 366], "vorbi": [31, 366], "38268343": 31, "92387953": 31, "14943586": [31, 366], "51644717": 31, "85631905": 31, "98877142": 31, "tril_indic": [31, 366], "triu_indic": [31, 366], "_containerwithdata_typeexperiment": [31, 48], "_containerwithdeviceexperiment": [31, 48], "_containerwithelementwiseexperiment": [31, 48], "0003": [31, 370, 409], "0006": 31, "75j": 31, "01317055": 31, "05634501": 31, "115": [31, 195, 228, 365, 366], "3461759": 31, "524111": 31, "335": 31, "345j": 31, "2345j": 31, "mantissa": [31, 366], "frist": [31, 366], "coord": 31, "6055": 31, "1080": 31, "1550": 31, "130": 31, "160": 31, "10240": 31, "08746284": 31, "32192809": 31, "000": 31, "took": 31, "0707": [31, 366], "0579": [31, 366], "static_allclos": 31, "static_angl": 31, "static_binar": 31, "static_conj": 31, "static_copysign": 31, "static_count_nonzero": 31, "static_diff": 31, "static_exp2": 31, "static_fix": 31, "static_float_pow": 31, "static_fmax": 31, "static_fmin": 31, "static_fmod": 31, "static_frexp": 31, "static_gcd": 31, "static_gradi": 31, "static_hypot": 31, "static_imag": 31, "static_isclos": 31, "static_lcm": 31, "static_ldexp": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_nansum": 31, "static_nextaft": 31, "static_r": 31, "static_signbit": 31, "static_sinc": 31, "636": 31, "090": 31, "070": 31, "057": 31, "static_xlogi": 31, "static_zeta": 31, "0244": 31, "_containerwithgeneralexperiment": [31, 48], "static_isin": 31, "_containerwithgradientsexperiment": [31, 48], "_containerwithimageexperiment": [31, 48], "_containerwithlayersexperiment": [31, 48], "673": 31, "0507": 31, "static_adaptive_avg_pool1d": 31, "static_adaptive_avg_pool2d": 31, "static_avg_pool1d": 31, "static_avg_pool2d": 31, "static_avg_pool3d": 31, "static_dct": 31, "132": 31, "182": 31, "242": 31, "253": [31, 234, 365], "515": [31, 376, 485], "467": 31, "static_dft": 31, "static_embed": 31, "static_fft": 31, "static_ifft": 31, "static_interpol": 31, "static_max_pool1d": 31, "static_max_pool2d": 31, "max_pool2dd": 31, "static_max_pool3d": 31, "_containerwithlinearalgebraexperiment": [31, 48], "933034": [31, 366], "eigenvealu": [31, 405], "xx": [31, 405], "37228107": [31, 405], "3722816": [31, 405], "8245648": [31, 405], "41597357": [31, 405], "56576747": [31, 405], "9093767": [31, 405], "56155": [31, 366], "82842": [31, 366], "450": 31, "static_adjoint": 31, "static_cond": 31, "static_diagflat": 31, "static_eig": 31, "static_eigh_tridiagon": 31, "static_eigv": 31, "static_kron": 31, "kroneck": [31, 366], "static_matrix_exp": 31, "static_multi_dot": 31, "regular": [31, 366, 370, 410, 542, 543, 562, 582], "_containerwithlossesexperiment": [31, 48], "binary_cross_entropy_with_logit": [31, 366, 550], "pos_weight": [31, 366], "027": [31, 366], "263": [31, 257, 366, 367], "953": [31, 366], "static_binary_cross_entropy_with_logit": 31, "_containerwithmanipulationexperiment": [31, 48], "atleast": [31, 366], "ary1": [31, 366], "ary2": [31, 366], "3d": [31, 54, 366, 558, 566, 575], "broadcast_shap": [31, 366], "30192195": 31, "static_atleast_1d": 31, "static_atleast_2d": 31, "static_atleast_3d": 31, "static_broadcast_shap": 31, "static_dsplit": 31, "static_dstack": 31, "static_expand": 31, "static_flatten": 31, "static_fliplr": 31, "static_flipud": 31, "static_heavisid": 31, "static_hsplit": 31, "static_hstack": 31, "static_i0": 31, "static_moveaxi": 31, "static_pad": 31, "static_rot90": 31, "static_take_along_axi": 31, "static_top_k": 31, "static_vsplit": 31, "static_vstack": 31, "_containerwithnormsexperiment": [31, 48], "static_instance_norm": 31, "68283635": 31, "25858182": 31, "14645457": 31, "20709086": 31, "59998751": 31, "10000312": 31, "20000625": 31, "19997501": 31, "25000787": 31, "49996877": 31, "35001087": 31, "09995651": 31, "30002821": 31, "79988766": 31, "17999999": 31, "46000001": 31, "45999998": 31, "static_l2_norm": 31, "16903085": 31, "50709254": 31, "84515423": 31, "44183609": 31, "56807494": 31, "69431382": 31, "89442718": 31, "44721359": 31, "static_lp_norm": 31, "12500000": 31, "37500000": 31, "62500000": 31, "27500000": 31, "35000000": 31, "42500000": 31, "0000000": 31, "5000000": 31, "2500000": 31, "_containerwithrandomexperiment": [31, 48], "43643127": 31, "32325703": 31, "24031169": 31, "34251311": 31, "31692529": 31, "3405616": 31, "5319725": 31, "22458365": 31, "24344385": 31, "26588406": 31, "61075421": 31, "12336174": 31, "51142915": 31, "25041268": 31, "23815817": 31, "64042903": 31, "25763214": 31, "10193883": 31, "31624692": 31, "46567987": 31, "21807321": 31, "37677699": 31, "39914594": 31, "22407707": 31, "static_bernoulli": 31, "static_beta": 31, "static_dirichlet": 31, "static_poisson": 31, "_containerwithsearchingexperiment": [31, 48], "static_unravel_index": 31, "_containerwithsetexperiment": [31, 48], "_containerwithsortingexperiment": [31, 48], "static_lexsort": 31, "static_msort": 31, "_containerwithstatisticalexperiment": [31, 48], "static_bincount": 31, "static_corrcoef": 31, "static_median": 31, "static_nanmean": 31, "static_nanmedian": 31, "static_quantil": 31, "_containerwithutilityexperiment": [31, 48], "_containerwithgener": [32, 48], "_static_all_equ": 32, "static_all_equ": 32, "_static_array_equ": 32, "x0": [32, 253, 367, 553], "level": [32, 52, 253, 532, 536, 537, 541, 543, 549, 555, 558, 560, 562, 566, 567, 568, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589], "a0": [32, 253], "static_array_equ": 32, "_static_assert_supports_inplac": 32, "_static_clip_matrix_norm": 32, "static_clip_matrix_norm": 32, "849": [32, 256, 257, 367], "_static_clip_vector_norm": 32, "static_clip_vector_norm": 32, "_static_einops_rearrang": 32, "static_einops_rearrang": 32, "_static_einops_reduc": 32, "static_einops_reduc": 32, "29333329": [32, 262, 367], "53000069": [32, 262, 367], "39666676": [32, 262, 367], "20666695": [32, 262, 367], "_static_einops_repeat": 32, "static_einops_repeat": 32, "_static_fourier_encod": 32, "static_fourier_encod": 32, "classivi": [32, 38, 265, 372, 378, 444, 448, 495], "89858720e": [32, 265], "79717439e": [32, 265], "_static_gath": 32, "static_gath": 32, "_static_gather_nd": 32, "200": [32, 190, 269, 299, 365, 366, 367, 571], "400": [32, 269, 299, 366, 367, 370, 409, 550], "500": [32, 269, 366, 367], "static_gather_nd": 32, "_static_get_num_dim": 32, "static_get_num_dim": 32, "_static_has_nan": 32, "leafwis": 32, "static_has_nan": 32, "_static_inplace_decr": 32, "_static_inplace_incr": 32, "_static_inplace_upd": 32, "_static_is_arrai": 32, "static_is_arrai": 32, "_static_is_ivy_arrai": 32, "static_is_ivy_arrai": 32, "_static_is_native_arrai": 32, "static_is_native_arrai": 32, "_static_scatter_flat": 32, "ref": [32, 36, 210, 223, 225, 230, 237, 365, 372, 446, 554], "_static_scatter_nd": 32, "70": [32, 269, 299, 366, 370, 380, 416, 504, 535], "static_scatter_nd": 32, "_static_stable_divid": 32, "22222222": 32, "11111111": 32, "857": [32, 311, 367], "444": 32, "_static_stable_pow": 32, "_static_supports_inplace_upd": 32, "_static_to_list": 32, "static_to_list": 32, "_static_to_numpi": 32, "static_to_numpi": 32, "_static_to_scalar": 32, "static_to_scalar": 32, "_static_value_is_nan": 32, "452": 32, "static_value_is_nan": 32, "833": [32, 257], "600": [32, 269, 366, 550], "700": [32, 269], "425": [32, 326], "_containerwithgradi": [33, 48], "_static_stop_gradi": 33, "static_stop_gradi": 33, "87": [33, 190, 214, 345, 365, 368], "976": [33, 239, 345, 365, 368], "49e": [33, 345, 368], "74e": [33, 345, 368], "95e": [33, 345, 368], "024": [33, 345, 366, 368], "096": [33, 195, 345, 365, 368], "216": [33, 36, 345, 368, 426], "384": [33, 345, 368], "626": [33, 345, 368], "en": [33, 345, 346, 368, 370, 429, 550], "wikipedia": [33, 345, 346, 368, 370, 429], "wiki": [33, 345, 346, 368, 370, 429], "stochastic_gradient_desc": [33, 345, 346, 368], "01099": [33, 346], "01003": [33, 346, 368], "01015": [33, 346, 368], "99936122": [33, 346, 368], "99936116": [33, 346, 368], "99936128": [33, 346, 368], "99936104": [33, 346, 368], "w_new": [33, 349, 368], "88": [33, 40, 63, 191, 349, 359, 365, 368, 370, 376, 380, 416, 422, 486, 504], "708": [33, 351, 368], "445": [33, 351, 368], "6e": [33, 351, 368], "00036": [33, 351, 368], "00016": [33, 351, 368], "00049": [33, 351, 368], "layerwis": [33, 352, 368], "_containerwithimag": [34, 48], "_containerwithlay": [35, 48], "_static_conv1d": 35, "static_conv1d": 35, "_static_conv1d_transpos": 35, "static_conv1d_transpos": 35, "112": [35, 370, 380, 387, 416, 504], "_static_conv2d": 35, "static_conv2d": 35, "_static_conv2d_transpos": 35, "static_conv2d_transpos": 35, "_static_conv3d": 35, "fdfh": [35, 390], "static_conv3d": 35, "_static_conv3d_transpos": 35, "static_conv3d_transpos": 35, "_static_depthwise_conv2d": 35, "inp": [35, 369, 394], "static_depthwise_conv2d": 35, "_static_dropout": 35, "static_dropout": 35, "_static_dropout1d": 35, "static_dropout1d": 35, "_static_dropout3d": 35, "_static_linear": 35, "278": [35, 369, 395, 396], "105": [35, 369, 370, 371, 395, 396, 416, 431], "static_linear": 35, "352": [35, 369, 396], "195": [35, 396], "_static_lstm_upd": 35, "_static_multi_head_attent": 35, "_static_scaled_dot_product_attent": 35, "static_scaled_dot_product_attent": 35, "_containerwithlinearalgebra": [36, 48], "_static_choleski": 36, "static_choleski": 36, "577": [36, 370, 400], "707": [36, 370, 400], "static_rol": [36, 38, 549, 553], "_static_cross": 36, "static_cross": 36, "_static_det": 36, "_static_diag": 36, "_static_diagon": 36, "static_diagon": 36, "_static_eigh": 36, "_static_eigvalsh": 36, "static_eigvalsh": 36, "51572949": [36, 370, 407], "17091519": [36, 370, 407], "3448143": [36, 370, 407], "88178420e": [36, 370, 407], "35898387e": [36, 370, 407], "46410179e": [36, 370, 407], "_static_inn": 36, "_static_inv": 36, "static_inv": [36, 370, 409], "_static_matmul": 36, "matul": 36, "static_matmul": 36, "_static_matrix_norm": 36, "deimens": 36, "static_matrix_norm": 36, "_static_matrix_pow": 36, "_static_matrix_rank": 36, "static_matrix_rank": 36, "_static_matrix_transpos": 36, "static_matrix_transpos": 36, "_static_out": 36, "n1": [36, 90, 362], "n2": [36, 90, 362], "static_out": [36, 416], "_static_pinv": 36, "static_pinv": 36, "_static_qr": 36, "_static_slogdet": 36, "static_slogdet": 36, "0986123": [36, 370, 419], "_static_solv": 36, "_static_svd": 36, "static_svd": 36, "au": [36, 421], "aS": [36, 421], "avh": [36, 421], "bu": [36, 421, 535], "bvh": [36, 421], "_static_svdv": 36, "_static_tensordot": 36, "_static_tensorsolv": 36, "_static_trac": 36, "static_trac": 36, "_static_vand": 36, "static_vand": 36, "343": [36, 231, 365, 426], "512": [36, 369, 387, 426, 532], "729": [36, 426, 572], "_static_vecdot": 36, "_static_vector_norm": 36, "static_vector_norm": 36, "77359247": [36, 428], "_static_vector_to_skew_symmetric_matrix": 36, "99999988": [36, 417], "_containerwithloss": [37, 48], "_static_binary_cross_entropi": 37, "static_binary_cross_entropi": 37, "511": [37, 371, 431, 433], "_static_cross_entropi": 37, "static_cross_entropi": 37, "20397282": 37, "83258148": 37, "60943794": 37, "_static_sparse_cross_entropi": 37, "static_sparse_cross_entropi": 37, "5108256": [37, 432], "609438": [37, 370, 419, 432], "_containerwithmanipul": [38, 48], "_static_clip": 38, "static_clip": 38, "_static_concat": 38, "_static_constant_pad": 38, "static_constant_pad": 38, "_static_expand_dim": 38, "static_expand_dim": 38, "container_axi": [38, 372, 438], "_static_flip": 38, "static_flip": 38, "_static_permute_dim": 38, "static_permute_dim": 38, "_static_repeat": 38, "static_repeat": 38, "_static_reshap": 38, "static_reshap": 38, "_static_rol": 38, "positivclip": 38, "_static_split": 38, "static_split": 38, "_static_squeez": 38, "static_squeez": 38, "_static_stack": 38, "leavv": 38, "static_stack": 38, "_static_swapax": 38, "_static_til": 38, "static_til": 38, "_static_unstack": 38, "static_unstack": 38, "_static_zero_pad": 38, "repreat": [38, 441], "_containerwithnorm": [39, 48], "342": [39, 375, 478], "0427": [39, 375, 478], "299": [39, 375, 478], "241": [39, 478], "_containerwithrandom": [40, 48], "_static_multinomi": 40, "_static_randint": 40, "static_randint": 40, "_static_random_norm": 40, "static_random_norm": 40, "651": 40, "_static_random_uniform": 40, "static_random_uniform": 40, "481": 40, "0999": 40, "_static_shuffl": 40, "static_shuffl": 40, "431": [40, 485], "83": [40, 235, 365, 366, 369, 396, 485], "274": [40, 485], "91": [40, 191, 365, 369, 370, 376, 380, 396, 416, 485, 504], "_containerwithsearch": [41, 48], "_static_argmax": 41, "static_argmax": 41, "_static_argmin": 41, "static_argmin": 41, "_static_argwher": 41, "static_argwher": 41, "_static_nonzero": 41, "_static_wher": 41, "static_wher": 41, "_containerwithset": [42, 48], "_static_unique_al": 42, "static_unique_al": [42, 494], "_static_unique_count": 42, "static_unique_count": 42, "_static_unique_invers": 42, "static_unique_invers": 42, "_static_unique_valu": 42, "_containerwithsort": [43, 48], "_static_argsort": 43, "static_argsort": 43, "_static_searchsort": 43, "_static_sort": 43, "static_sort": 43, "_containerwithstatist": [44, 48], "_static_cumprod": 44, "static_cumprod": 44, "_static_cumsum": 44, "static_cumsum": 44, "_static_prod": 44, "static_prod": 44, "11000001": [44, 508], "23100001": [44, 508], "30800003": [44, 380, 508], "_static_sum": 44, "_static_var": 44, "static_var": 44, "12666667": [44, 380, 511], "11555555": [44, 380, 511], "60000002": [44, 48, 506], "respectv": [44, 509], "81649649": [44, 509], "94280904": [44, 509], "509902": [44, 380, 509], "2472192": [44, 509], "44948983": [44, 509], "41421354": [44, 509], "contian": [44, 511], "6666667": [44, 511], "_containerwithutil": [45, 48], "_static_al": 45, "static_al": 45, "_static_ani": 45, "static_ani": 45, "add_ivy_container_instance_method": 46, "containerexampl": 46, "__abs__": [47, 48], "__add__": [47, 48, 546, 549, 553, 554, 557, 562, 563, 570], "__eq__": [47, 48], "__ge__": [47, 48], "__gt__": [47, 48, 566], "__le__": [47, 48], "__lt__": [47, 48], "__ne__": [47, 48], "__pow__": [47, 48, 570], "69678056": 47, "59876156": 47, "82660675": 47, "__radd__": [47, 48, 553, 554, 562], "__rrshift__": [47, 48], "__rshift__": [47, 48], "__rsub__": [47, 48], "__sub__": [47, 48, 546, 549, 553, 557, 570], "__truediv__": [47, 48, 546, 549, 553], "__xor__": [47, 48], "hardwar": [47, 515, 535, 542, 566, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588], "resid": [47, 372, 438, 515, 548, 562, 568, 572], "mt": [47, 570], "hopefulli": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 534, 535, 536, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575], "overview": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 548, 550, 564, 567, 575], "submodul": [47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 541, 542, 543, 545, 548, 550, 552, 558, 559, 564, 567, 568, 572, 577], "question": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 534, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "pleas": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 534, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "reach": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 471, 534, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "discord": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 532, 534, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "forum": [47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "eq": 48, "ge": 48, "gt": [48, 563, 568], "le": 48, "lt": 48, "ne": 48, "75979435": 48, "52153397": 48, "13532257": 48, "rshift": 48, "truediv": 48, "66666669": [48, 347, 368], "geglu": 50, "leakyrelu": 50, "logsoftmax": 50, "moduleconvert": [51, 55], "from_haiku_modul": 51, "native_modul": 51, "params_hk": 51, "rng_seed": 51, "constructor_arg": 51, "constructor_kwarg": 51, "instance_arg": 51, "instance_kwarg": 51, "from_keras_modul": 51, "from_torch_modul": 51, "dedic": [51, 557, 570, 572], "to_ivy_modul": [51, 573], "native_module_class": 51, "modulehelp": [52, 55], "check_submod_ret": 52, "user": [52, 54, 55, 60, 62, 359, 366, 532, 534, 535, 538, 542, 543, 544, 546, 547, 549, 550, 551, 555, 559, 560, 561, 562, 564, 566, 567, 568, 576, 580, 582, 588, 589], "expected_submod_ret": [52, 55], "get_mod_kei": 52, "top_mod": 52, "explicit": [52, 542, 549, 551, 560, 561, 562, 563, 568, 576, 582], "mod_depth": 52, "mod_height": 52, "mod_with_top_mod_key_chain": 52, "flatten_key_chain": 52, "end": [52, 75, 184, 362, 365, 366, 532, 542, 543, 547, 550, 561, 565, 566, 567, 575, 576, 580, 585], "iimedi": 52, "parent": [52, 358, 368, 541, 550, 570], "show_mod_in_top_mod": 52, "upper_depth": 52, "lower_depth": 52, "coverag": [52, 551, 564], "prompt": [52, 543], "show_structur": 52, "this_repr": 52, "show_v_in_top_v": 52, "perspect": 52, "top_v": 52, "sub_mod": 52, "show_v": 52, "comopos": 52, "begin": [52, 366, 374, 459, 470, 542, 545, 563], "enumer": [52, 532], "track_submod_call_ord": [52, 55], "track_submod_ret": [52, 55], "v_with_top_v_key_chain": 52, "create_vari": [53, 572], "var_shap": [53, 572], "fan_out": [53, 572], "fan_in": [53, 572], "rectangular": 53, "firstlayersiren": 53, "siren": 53, "distribt": 53, "glorotuniform": [53, 54, 572], "glorot": 53, "known": [53, 545, 550, 551, 562, 564], "xavier": 53, "neuron": 53, "w_1x_1": 53, "w_2x_2": 53, "w_nx_n": 53, "w_i": 53, "vanish": 53, "too": [53, 180, 365, 541, 542, 543, 545, 551, 555, 556, 576], "explod": [53, 533, 534], "big": [53, 537, 576, 582], "pick": 53, "carefulli": [53, 562, 580, 585], "abstract": [53, 57, 364, 534, 549, 551, 562, 564, 566, 572, 576, 580, 582, 584, 585, 589], "kaimingnorm": 53, "fan_mod": [53, 572], "kaim": 53, "he": 53, "distibut": 53, "center": 53, "negative_slop": 53, "fan": 53, "propog": 53, "fan_sum": [53, 572], "much": [53, 366, 535, 541, 542, 543, 546, 549, 551, 561, 562, 563, 565, 568, 570, 571, 580, 582, 588, 589], "proport": 53, "Ones": 53, "w0": 53, "gain": [53, 543, 545, 567, 572, 582], "wlim": 53, "help": [53, 251, 367, 380, 510, 532, 537, 538, 539, 541, 542, 546, 547, 549, 550, 551, 553, 559, 562, 564, 565, 566, 570, 571, 572, 574, 577, 578, 582, 584, 588], "intend": [53, 380, 510, 519, 545, 557, 560, 580, 582, 586, 587], "predefin": 53, "initialz": 53, "fan_avg": 53, "input_channel": [54, 532, 568, 572], "output_channel": [54, 532, 572], "filter_s": 54, "weight_initi": [54, 572], "bias_initi": [54, 572], "construct": [54, 56, 57, 58, 372, 448, 568, 572, 573, 580, 582, 589], "conv1dtranspos": 54, "filter_shap": 54, "conv2dtranspos": 54, "conv3dtranspos": 54, "depthwiseconv2d": 54, "num_channel": 54, "depthwis": [54, 369, 394], "randomli": [54, 366, 369, 395, 523], "bernoul": 54, "lstm": [54, 369, 397, 568, 582], "num_lay": 54, "return_sequ": 54, "return_st": 54, "get_initial_st": 54, "dens": [54, 532], "connect": [54, 535, 542, 572, 573, 580], "receiv": [54, 252, 294, 367, 373, 456, 457, 543, 551, 552, 564, 566], "term": [54, 369, 397, 532, 534, 543, 549, 568, 577, 582], "multiheadattent": 54, "query_dim": [54, 369, 398], "head_dim": [54, 369, 398], "dropout_r": 54, "context_dim": 54, "with_to_q_fn": 54, "with_to_kv_fn": 54, "with_to_out_fn": 54, "build_mod": [54, 55], "on_init": [54, 55], "multi": [54, 369, 370, 398, 401, 532, 553, 567, 576, 578, 580, 582, 586], "head": [54, 369, 398, 532, 540, 542, 562], "measur": [54, 369, 398], "compile_on_next_step": [55, 57, 252, 367, 572], "store_var": 55, "fallback_to_non_compil": [55, 57], "with_partial_v": 55, "with_grad": [55, 354, 356, 368], "submod_depth": 55, "submods_to_track": 55, "varibl": 55, "temporarili": [55, 545, 565], "id": [55, 156, 364, 532, 538, 540, 542, 546, 548, 549, 556, 560], "fall": [55, 57, 541, 543, 551, 567], "from_cal": 55, "denot": [55, 184, 354, 358, 365, 368], "trigger": [55, 541], "successfulli": [55, 542, 546, 556], "built_": 55, "compile_kwarg": 55, "_unified_ivy_graph": 55, "_call": 55, "save_weight": 55, "weights_path": 55, "show_graph": 55, "randomness_factor": 55, "save_to_disk": 55, "with_edge_label": 55, "with_arg_label": 55, "with_output_label": 55, "output_connected_onli": 55, "highlight_subgraph": 55, "fname": [55, 571], "return_graph": 55, "layernorm": 56, "normalized_shap": 56, "elementwise_affin": 56, "mini": [56, 375, 478], "trail": 56, "set_stat": [57, 572], "init_on_first_step": 57, "grad": [57, 345, 368, 532, 560, 571, 572, 573], "ignore_miss": 57, "overridden": [57, 546], "privat": [57, 562, 564], "_step": [57, 572], "miss": [57, 541, 542, 546, 549, 550, 553, 556, 564, 566], "sgd": [57, 582], "stochast": [57, 582], "sub_modul": 58, "custom_object": [60, 62, 359], "identifi": [60, 62, 359, 545, 550, 564, 566], "xxxxxxxxxxxxxx": [60, 62, 359], "custom_fn": [60, 62, 359], "lambda": [60, 62, 260, 347, 348, 350, 357, 359, 367, 368, 369, 374, 398, 466, 467, 541, 555, 558, 559, 560, 563, 566, 568, 571], "24000001": [63, 359], "703": [64, 359], "683": [64, 359], "408": [64, 359], "313": [64, 359], "437": [64, 359], "40337825": [65, 359], "56114835": [65, 359], "20788449": [65, 359], "214": [67, 359], "891": [67, 359], "846": [67, 359], "985": [67, 359], "0768": [68, 195, 359, 365], "231": [68, 359], "body_fn": [70, 71, 72, 73, 361], "orelse_fn": [70, 72, 361], "chosen": [75, 184, 362, 365, 377, 493, 541, 550, 562], "ml_framework": [75, 362], "distanc": [75, 362], "adjac": [75, 362], "nestedsequ": [76, 77, 362], "typevar": [76, 77, 362], "supportsbufferprotocol": [76, 77, 362], "static_copy_arrai": [81, 362], "intdtyp": [84, 94, 98, 119, 130, 134, 141, 147, 362, 363], "suppos": [84, 261, 362, 367, 564], "numrow": [84, 362], "numcolumn": [84, 362], "interchang": [85, 362, 372, 447], "33333337": [88, 347, 362, 368], "66666663": [88, 362], "gpu": [88, 156, 158, 159, 162, 164, 166, 168, 169, 170, 173, 175, 176, 362, 364, 532, 543, 552, 570, 580, 582, 585, 586, 587], "41588834": [89, 362], "7827941": [89, 362], "6227766": [89, 362], "23413252": [89, 362], "n3": [90, 362], "similarli": [90, 362, 366, 547, 551, 562, 566, 570, 588], "xv": [90, 362], "yv": [90, 362], "x_nativ": [91, 362, 561], "y_nativ": [91, 362], "z_nativ": [91, 362], "locat": [92, 362, 376, 379, 483, 499, 541, 543, 547, 548, 552, 562, 563, 564, 565, 580], "d_type": [93, 362], "__new__": [93, 362], "y1": [94, 98, 362, 366], "y2": [94, 98, 362], "y3": [94, 98, 362], "incompat": [112, 363], "data_type_funct": [113, 363], "uint8": [113, 120, 124, 134, 137, 142, 148, 363, 551, 564], "helper": [114, 363, 516, 517, 518, 519, 521, 522, 532, 541, 548, 551, 555, 571, 577], "closest": [115, 192, 201, 202, 231, 240, 363, 365, 564, 566], "xtype": [115, 363], "ytype": [115, 363], "native_uint16": [115, 363], "complexdtyp": [116, 130, 138, 363], "set_default_complex_dtyp": [116, 144, 363], "complex128": [116, 130, 138, 144, 363], "4294": [116, 118, 363], "967346": [116, 118, 363], "floatdtyp": [118, 140, 363], "set_default_float_dtyp": [118, 127, 138, 146, 363, 551], "int_dtyp": [119, 141, 363], "set_default_int_dtyp": [119, 127, 147, 363, 551], "4294967346": [119, 120, 363], "uint_dtyp": [120, 142, 363], "uint": [120, 134, 142, 148, 363, 551, 563], "uintdtyp": [120, 134, 142, 148, 363], "set_default_uint_dtyp": [120, 127, 148, 363], "native_bool": [122, 363], "followng": [123, 363], "ieee": [123, 180, 200, 214, 230, 235, 360, 363, 365, 535], "754": [123, 180, 200, 214, 230, 235, 360, 363, 365, 535], "smallest_norm": [123, 363], "bfloat16": [124, 363, 551, 562, 564, 565], "unsupport": [125, 160, 266, 267, 363, 364, 367, 516, 519, 542, 556, 562], "encapsul": [126, 363, 550], "314": [126, 363, 366], "9223372036854775808": [126, 363], "9223372036854775807": [126, 363], "65535": [126, 363], "4294967295": [126, 363], "un": [128, 363, 568], "native_uint8": [128, 363], "type1": [135, 363], "type2": [135, 363], "array_api_promot": [135, 136, 363], "unexpect": [136, 363, 551], "default_complex_dtyp": [138, 363], "default_dtype_stack": [139, 145, 363], "unset_default_dtyp": [139, 363], "native_uint64": [139, 363], "default_float_dtyp": [140, 363, 551], "default_int_dtyp": [141, 147, 363, 551], "default_uint_dtyp": [142, 148, 363], "ret1": [143, 363], "ret2": [143, 363], "reset": [144, 145, 146, 147, 148, 175, 320, 321, 322, 323, 324, 325, 363, 364, 367], "default_complex_dtype_stack": [144, 363], "set_default_dtyp": [145, 363, 551, 558], "default_float_dtype_stack": [146, 363], "native_float16": [149, 363], "unmodifi": [154, 364, 547, 551], "tpu": [154, 169, 174, 364, 552, 582, 585], "clear": [155, 364, 532, 534, 535, 536, 541, 543, 547, 551, 552, 553, 562, 566, 568, 570, 582], "cach": [155, 255, 364, 367, 558, 564], "aliv": [161, 165, 167, 270, 296, 297, 364, 367, 552], "139740789224448": [161, 364], "core": [163, 364, 532, 534, 541, 542, 552, 564, 573, 580, 581, 582, 583, 587, 589], "physic": [163, 364], "default_devic": [165, 168, 169, 175, 364, 552, 555], "process_specif": [166, 176, 364], "percentag": [166, 364], "ram": [166, 173, 176, 364], "alon": [166, 176, 364, 532, 538, 564], "036902561555": [166, 364], "7024003467681645": [166, 364], "as_native_dev": [166, 364], "7095597456708771": [166, 364], "attr_onli": [167, 364], "chunk": [169, 170, 171, 364], "codebas": [169, 170, 364, 536, 537, 544, 551, 561, 562, 564, 565, 567], "split_factor": [169, 364, 555], "max_chunk_s": [171, 364], "chunk_siz": [171, 364], "input_ax": [171, 364], "output_ax": [171, 364], "usag": [171, 364, 535, 551, 564, 568, 576, 585], "fed": [171, 364, 572], "fist": [171, 364], "gb": [173, 176, 364, 542], "66700032": [173, 364], "589934592": [173, 364], "set_default_devic": [175, 364, 552], "219563008": [176, 364], "902400346": [176, 364], "525205504": [176, 364], "magnitud": [177, 180, 365, 370, 421, 422], "particular": [177, 218, 365, 542, 543, 545, 547, 550, 551, 553, 559, 561, 562, 564, 565, 566, 578, 582, 588], "princip": [178, 181, 183, 365, 366], "domain": [178, 179, 181, 182, 183, 184, 193, 194, 199, 200, 212, 213, 215, 233, 234, 235, 238, 239, 365, 366, 554, 580, 582], "codomain": [178, 179, 181, 182, 183, 184, 193, 194, 199, 200, 212, 213, 215, 233, 234, 235, 238, 239, 365, 366, 554], "\u03c0": [178, 181, 183, 184, 360, 365], "x1_i": [180, 184, 186, 188, 189, 190, 191, 196, 197, 202, 204, 205, 210, 211, 216, 217, 219, 220, 223, 225, 227, 230, 237, 365, 545], "neither": [180, 358, 365, 368, 550, 562, 566], "nor": [180, 358, 365, 368, 550, 562, 586], "2019": [180, 200, 214, 365, 582, 585], "overflow": [180, 365, 370, 380, 419, 510, 540, 551], "commut": [180, 365], "809": [182, 365], "199": [182, 365], "569": [182, 365], "733": [182, 365], "notat": [184, 365, 380, 504, 550], "quadrant": [184, 365], "rai": [184, 365, 535], "3\u03c0": [184, 365], "bitwis": [186, 189, 191, 220, 365], "170": [190, 365], "243": [190, 365], "225": [190, 365], "xor": [191, 220, 365], "77": [191, 365, 370, 380, 416, 504], "654": [193, 365, 550], "368": [194, 365], "670": [194, 365], "202": [194, 365, 545], "548": [194, 365], "1490": [194, 365], "0192": [195, 365], "0384": [195, 365], "0576": [195, 365], "698": [196, 365], "truth": [197, 204, 205, 210, 211, 225, 365, 516, 518, 562, 564], "purpos": [200, 214, 365, 366, 370, 419, 543, 546, 549, 550, 553, 555, 557, 558, 559, 562, 564, 566, 567, 570, 577, 581, 583, 586, 587, 588], "accur": [200, 214, 365, 370, 419], "fdlibm": [200, 214, 365], "compliant": [200, 214, 218, 219, 365, 380, 505, 506, 507, 509], "potenti": [200, 214, 365, 532, 541, 542, 543, 550, 551, 562, 567, 585], "632": [200, 365], "20e": [200, 365], "72e": [200, 365], "greatest": [201, 202, 365, 366], "742": [214, 365], "NOT": [218, 365, 541], "unspecifi": [227, 230, 365, 370, 372, 405, 406, 446, 561], "versu": [227, 365], "52095687": [227, 365], "92457771": [227, 365], "49372482": [227, 365], "22738838": [227, 365], "156": [227, 365], "5877228": [227, 365], "189": [228, 365], "252": [228, 365], "315": [228, 365], "378": [228, 365], "1150": [228, 365], "2890": [228, 365], "172": [228, 365], "229": [228, 365], "487": [228, 365, 369, 396], "344": [228, 365], "semant": [230, 365, 534, 568, 573, 583], "That": [230, 365, 542, 543, 546, 564, 570, 571, 572, 583], "primarili": [230, 365, 543, 549, 582], "reason": [230, 365, 535, 541, 543, 545, 546, 549, 550, 551, 553, 558, 561, 562, 565, 566, 568, 570, 588], "decim": [231, 365], "deliber": [231, 365, 566], "imprecis": [231, 365], "5654": [231, 365], "034": [231, 365], "433": [231, 348, 350, 357, 365, 368], "932": [233, 365], "746": [233, 365], "443": [233, 365], "657": [233, 257, 365, 367], "indistinguish": [235, 365], "infinit": [235, 365], "32455532": [235, 365], "89897949": [235, 365], "169": [235, 365], "546": [238, 365, 369, 396], "916": [238, 365, 371, 431], "996": [238, 365], "462": [239, 365], "604": [239, 365], "984": [239, 365], "997": [239, 365], "0375": [240, 365], "032": [240, 365], "idx": [251, 367, 532, 552, 570], "inspect": [251, 367], "retriev": [251, 367, 543, 562], "decor": [255, 367, 523, 545, 546, 549, 551, 552, 558, 559, 561, 562, 563], "recalcul": [255, 367], "my_sum": [255, 367], "val1": [255, 367], "val2": [255, 367], "cached_sum": [255, 367], "line_eq": [255, 367], "slp": [255, 367], "itc": [255, 367], "cached_line_eq": [255, 367], "0353": [256, 367], "424": [256, 367], "58": [256, 367], "176": [256, 367], "339": [256, 367], "271": [256, 367], "168": [256, 367], "391": [256, 367], "417": [257, 367], "583": [257, 367], "0667": [257, 367], "267": [257, 367], "131": [257, 367], "394": [257, 367, 376, 488], "526": [257, 367], "788": [257, 367], "expos": [258, 367, 532, 534, 550, 568, 572], "public": [258, 367, 550, 560, 570, 585], "default_str": [260, 367], "46999979": [261, 367], "66000009": [261, 367], "93000001": [261, 367], "29000092": [261, 367], "33999991": [261, 367], "6400001": [261, 367], "96000004": [261, 367], "36000013": [261, 367], "51999998": [261, 367], "67000008": [261, 367], "960": [261, 367], "1280": [261, 367, 532], "3600": [261, 367], "bottom": [261, 367, 542, 550, 588], "h1": [261, 367], "w1": [261, 367], "40499985": [262, 367], "61000061": [262, 367], "1500001": [262, 367], "array_mod": [271, 367], "set_array_mod": [271, 320, 367], "exception_trace_mod": [272, 367], "set_exception_trace_mod": [272, 321, 367, 555], "get_exception_trace_mod": [276, 301, 321, 367], "set_nestable_mod": [276, 322, 367], "set_queue_timeout": [278, 323, 367], "max_depth": [279, 367, 374, 471], "seen_set": [279, 367], "local_set": [279, 367], "set_show_func_wrapper_trace_mod": [280, 325, 367, 555], "path": [281, 367, 518, 523, 542, 548, 561, 562, 563, 582], "directori": [281, 308, 364, 367, 538, 539, 541, 542, 543, 550, 562, 564], "temporari": [281, 308, 367, 541, 551], "thrown": [286, 367, 546, 552, 555, 576], "ivyexcept": [286, 313, 358, 367, 368, 529, 555, 562], "allow_dupl": [294, 367], "best": [294, 367, 532, 537, 540, 541, 542, 543, 544, 550, 551, 556, 564, 565, 585, 586], "o": [294, 367, 532, 542, 544, 550, 568], "fork": [295, 367, 537, 545, 550], "forkserv": [295, 367], "spawn": [295, 367], "garbag": [297, 367], "collector": [297, 367], "get_all_arrays_in_memori": [297, 367], "consol": [297, 367, 543, 564, 570], "get_array_mod": [300, 320, 367], "rtype": [300, 301, 304, 306, 307, 367], "exept": [301, 367], "get_min_bas": [302, 367], "get_min_denomin": [303, 367], "get_nestable_mod": [304, 322, 367], "get_queue_timeout": [305, 323, 367], "shape_array_mod": [306, 324, 367], "get_show_func_wrapper_trace_mod": [307, 325, 367], "tmp_dr": [308, 367], "get_tmp_dir": [308, 367], "tmp": [308, 367], "my_tmp": [308, 367], "set_shape_array_mod": [310, 324, 367], "49999999999975": [311, 367], "5015015015010504": [311, 367], "000444502911705e": [311, 367], "9999999999995j": [311, 367], "isn": [313, 367, 543, 559, 571, 576, 584], "possibli": [315, 367, 562, 564, 576], "100000023841858": [315, 367], "200000047683716": [315, 367], "299999952316284": [315, 367], "400000095367432": [315, 367], "599999904632568": [315, 367], "dictionai": [319, 367], "__name__": [319, 367, 532, 555], "hemant": [319, 367], "unset_shape_array_mod": [320, 323, 367], "previous": [321, 367, 542, 547, 558, 560, 564, 568], "451": [326, 367], "in_ax": [327, 367], "out_ax": [327, 367], "thereof": [327, 367], "fun": [327, 367, 374, 470, 550], "summaris": [327, 367], "0125": [345, 368], "171": [345, 368], "90000075": [346, 368], "90000164": [346, 368], "9000032": [346, 368], "50000012e": [346, 368], "92558754": [346, 368], "92558694": [346, 368], "92558682": [346, 368], "92558861": [346, 368], "60000025e": [346, 368], "01024": [346, 368], "retain_grad": [347, 368], "xs_grad_idx": [347, 368, 518, 532, 560], "ret_grad_idx": [347, 368, 518, 532, 560], "func_ret": [347, 368, 560], "retain": [347, 366, 368, 560, 577], "33333334": [347, 368, 370, 428], "666666": [347, 368], "333332": [347, 368], "66666675": [347, 368], "grad_fn": [348, 357, 368, 571], "933": [348, 350, 357, 368], "jacobian": [350, 368, 576, 582], "jac_fn": [350, 368], "639": [351, 368], "361": [351, 368], "compon": [354, 356, 358, 368, 532, 535, 568, 578, 583, 585], "with_grads_stack": [354, 356, 358, 368], "delet": [356, 368, 543, 550], "set_with_grad": [356, 358, 368], "value_grad": [357, 368], "423332": [357, 368], "enter": [358, 364, 368, 542, 543, 546, 551, 552, 557, 559], "deseri": 359, "718281828459045": 360, "euler": [360, 575], "Not": [360, 366, 547, 563, 571, 572, 576], "newaxi": 360, "141592653589793": 360, "ifels": 361, "whileloop": 361, "if_els": 361, "while_loop": 361, "protocol": 362, "_t_co": 362, "asarray_handle_nest": 362, "asarray_infer_devic": 362, "asarray_to_native_arrays_and_back": 362, "defaultcomplexdtyp": 363, "defaultdtyp": 363, "defaultfloatdtyp": 363, "defaultintdtyp": 363, "defaultuintdtyp": 363, "as_ivy_dtyp": [363, 562], "as_native_dtyp": 363, "check_float": 363, "closest_valid_dtyp": 363, "default_dtyp": [363, 551, 558], "dtype_bit": 363, "function_supported_dtyp": [363, 551], "function_unsupported_dtyp": [363, 551], "infer_default_dtyp": 363, "invalid_dtyp": [363, 551], "is_native_dtyp": 363, "promote_typ": [363, 551], "promote_types_of_input": [363, 551, 561], "type_promote_arrai": [363, 551], "unset_default_complex_dtyp": 363, "unset_default_float_dtyp": 363, "unset_default_int_dtyp": 363, "unset_default_uint_dtyp": 363, "valid_dtyp": 363, "defaultdevic": 364, "__enter__": 364, "runtim": [364, 544, 558, 564, 566, 582], "_dev": 364, "__exit__": 364, "exc_typ": 364, "exc_val": 364, "exc_tb": 364, "exit": 364, "baseexcept": [364, 519], "traceback": [364, 564], "initialis": [364, 545, 562, 564], "profil": 364, "save_dir": 364, "as_ivy_dev": [364, 570], "clear_cached_mem_on_dev": 364, "dev_util": [364, 552], "function_supported_devic": 364, "function_unsupported_devic": 364, "get_all_ivy_arrays_on_dev": [364, 552], "gpu_is_avail": [364, 532], "num_cpu_cor": [364, 552], "num_gpu": [364, 552, 564], "num_ivy_arrays_on_dev": 364, "percent_used_mem_on_dev": 364, "print_all_ivy_arrays_on_dev": 364, "set_split_factor": [364, 555], "split_func_cal": 364, "total_mem_on_dev": [364, 552], "tpu_is_avail": 364, "unset_default_devic": 364, "used_mem_on_dev": 364, "nativesparsearrai": 366, "sparsearrai": 366, "coo_indic": 366, "crow_indic": 366, "col_indic": 366, "ccol_indic": 366, "row_indic": 366, "dense_shap": 366, "to_dense_arrai": 366, "typic": [366, 379, 499, 545, 558, 581, 589], "yj": 366, "whilst": [366, 573, 577, 582], "ary3": 366, "avg": 366, "dimensio": 366, "distrubut": 366, "paramter": 366, "463": 366, "022": 366, "059": 366, "601": 366, "015": 366, "868": 366, "908": 366, "672": 366, "002": 366, "029": 366, "144": 366, "822": 366, "bind_custom_gradient_funct": [366, 560], "custom_grad_func": 366, "bind": [366, 541, 549, 560, 581, 582], "upstream": [366, 542, 543, 545, 560], "arrrai": 366, "355j": 366, "55j": 366, "current_backend": [366, 555, 558, 565, 568], "global_backend": 366, "py": [366, 532, 541, 542, 543, 545, 547, 550, 551, 552, 554, 555, 556, 557, 558, 562, 563, 564, 565, 568, 570, 572, 573], "tranform": 366, "22e": 366, "24e": 366, "91e": 366, "10e": 366, "16e": 366, "81e": 366, "280": 366, "container_n": 366, "container_typ": [366, 367], "container_norm": 366, "superdiagon": [366, 370, 403], "subdiagon": [366, 370, 403], "seen": [366, 534, 535, 550, 553, 555, 562, 564, 568, 570, 571, 588], "multivari": 366, "bayesian": 366, "ed": 366, "rest": [366, 542, 548, 550, 573, 584], "5d": 366, "third": [366, 370, 378, 421, 494, 548, 561, 576, 581, 582, 588], "eigenvali": 366, "necessarili": [366, 546, 549], "72281323e": 366, "37228132e": 366, "88578059e": 366, "10000000e": 366, "76822128": 366, "70710678": 366, "6401844": 366, "tridiagon": 366, "18749806": 366, "81250191": 366, "350609": 366, "56713122": 366, "06563006": 366, "74146169": 366, "74215561": 366, "0636413": 366, "56742489": 366, "35291126": 366, "emb": 366, "everywher": 366, "t1": 366, "frac": 366, "02733949e": 366, "00j": 366, "49660576e": 366, "68178638e": 366, "01j": 366, "98912367e": 366, "21802426e": 366, "04549134e": 366, "82842712e": 366, "86902654e": 366, "25501143e": 366, "32978028e": 366, "52068201e": 366, "71158374e": 366, "position": 366, "inexact": 366, "decompos": [366, 562], "0800": 366, "3979": 366, "9121": 366, "5400": 366, "handle_array_funct": 366, "array_funct": 366, "handle_array_like_without_promot": 366, "handle_except": [366, 529], "handle_nest": [366, 549, 558, 559, 568], "handle_out_argu": [366, 551, 552, 557, 559, 561, 568], "handle_view": 366, "_base": [366, 374, 459, 469, 470], "view_ref": 366, "han": 366, "taper": 366, "horizot": 366, "triangl": 366, "15318303e": 366, "15148591e": 366, "19j": 366, "25000000e": 366, "35378602e": 366, "02j": 366, "65404249e": 366, "17611649e": 366, "24320230e": 366, "79344813e": 366, "22374531e": 366, "45929364e": 366, "14208718e": 366, "07177031e": 366, "infer_devic": [366, 551, 552, 557, 559], "infer_dtyp": [366, 551, 552, 557, 559], "inputs_to_native_arrai": [366, 546, 559], "integer_arrays_to_float": 366, "interp": [366, 566], "xp": [366, 545], "fp": 366, "bicubic_tensorflowbicub": 366, "is_ivy_sparse_arrai": 366, "is_native_sparse_arrai": 366, "999999e": 366, "00713103": 366, "99997455": 366, "kaiser_derived_window": 366, "00726415": 366, "9999736": 366, "2773e": 366, "0172e": 366, "9294e": 366, "4149": 366, "9138": 366, "5529": 366, "indirect": 366, "primari": [366, 544, 547, 551, 559, 561, 562, 564, 566, 576, 577], "secondari": 366, "20141329": 366, "40318608": 366, "48683619": 366, "46328247": 366, "59813893": 366, "43748799": 366, "3333": 366, "6666": 366, "behaviour": [366, 540, 541, 543, 544, 545, 546, 549, 551, 554, 555, 557, 561, 562, 564, 565, 570], "native_sparse_arrai": 366, "native_sparse_array_to_indices_values_and_shap": 366, "ndenumer": 366, "multidimension": [366, 582], "ndindex": 366, "outputs_to_ivy_arrai": [366, 546, 551, 552, 557, 559], "shortcut": [366, 542], "linear_ramp": 366, "reflect": [366, 538, 543, 546, 564], "suppli": [366, 546], "ramp": 366, "mirror": [366, 541, 582], "padding_func": 366, "iaxis_pad_width": 366, "iaxi": 366, "style": [366, 377, 492, 543, 582], "unalt": 366, "extend": [366, 543, 547, 548, 554, 555, 557, 562, 565, 576, 579, 582, 588], "parametr": [366, 545, 564, 582], "6705687": 366, "52016652": 366, "40560818": 366, "45630932": 366, "217234": 366, "to_native_arrays_and_back": [366, 557, 559, 568], "col": 366, "downward": 366, "upward": 366, "2xn": 366, "subarrai": 366, "complementari": [366, 580, 588], "38268346": 366, "38268352": 366, "8563191": 366, "14943568": 366, "hurwitz": 366, "arraymod": 367, "manag": [367, 368, 532, 536, 537, 561, 576, 584, 586], "arg_info": 367, "arg_nam": 367, "cache_fn": [367, 558], "current_backend_str": [367, 555, 568, 570], "function_supported_devices_and_dtyp": 367, "function_unsupported_devices_and_dtyp": 367, "get_item": 367, "get_referrers_recurs": 367, "inplace_arrays_support": 367, "inplace_variables_support": 367, "isscalar": 367, "match_kwarg": 367, "num_arrays_in_memori": 367, "print_all_arrays_in_memori": 367, "set_min_bas": 367, "set_min_denomin": 367, "set_tmp_dir": 367, "to_ivy_shap": 367, "to_native_shap": 367, "try_else_non": 367, "unset_array_mod": 367, "unset_exception_trace_mod": 367, "unset_nestable_mod": 367, "unset_queue_timeout": 367, "unset_show_func_wrapper_trace_mod": 367, "vmap": [367, 576, 582], "gradienttrack": 368, "execute_with_gradi": [368, 532, 571, 572, 573, 576], "jac": 368, "unset_with_grad": 368, "value_and_grad": [368, 560], "conv": [369, 566], "channel_last": [369, 385, 392, 393], "feature_group_count": [369, 385, 392, 393], "x_dilat": [369, 385, 392], "channel_first": [369, 385, 392, 393], "group": [369, 374, 385, 392, 393, 461, 545, 549, 558, 562, 563, 578, 581, 587], "258": [369, 387, 389, 391], "dhwio": [369, 390], "conv_general_dil": [369, 562], "conv_general_transpos": 369, "hwi": [369, 394], "overfit": [369, 395], "1428566": [369, 395], "19999981": [369, 395], "39999962": [369, 395], "4000001": [369, 395], "49000001": [369, 395], "55599999": [369, 395], "21000004": [369, 395], "incom": [369, 396], "666": [369, 370, 396, 412], "4269": [369, 396], "911": [369, 396], "157": [369, 396], "753": [369, 396], "101": [369, 370, 374, 396, 409, 465], "545": [369, 376, 396, 486], "547": [369, 396], "124": [369, 396, 555], "852": [369, 396], "963": [369, 396], "108": [369, 380, 396, 504], "196": [369, 396], "306": [369, 396], "long": [369, 397, 542, 543, 550, 551, 553, 555, 568, 582], "short": [369, 397, 543, 551, 562, 565, 568, 572], "unrol": [369, 397, 568, 571], "cont_feat_dim": [369, 398], "numhead": [369, 398], "out_feat_dim": [369, 398], "5678761": [369, 398], "65441847": [369, 398], "18969631": [369, 398], "40131447": [369, 398], "19991851": [369, 398], "40000153": [369, 398], "68589532": [369, 398], "40129396": [369, 398], "40000817": [369, 398], "31219625": [369, 398], "25698996": [369, 398], "31022024": [369, 398], "16286421": [369, 398], "30296469": [369, 398], "16460133": [369, 398], "59497029": [369, 398], "40046397": [369, 398], "14009905": [369, 398], "81691194": [369, 398], "10732293": [369, 398], "40012637": [369, 398], "73519301": [369, 398], "40021262": [369, 398], "7615059": [369, 398], "40326414": [369, 398], "30141067": [369, 398], "19610119": [369, 398], "32028484": [369, 398], "1708746": [369, 398], "34100914": [369, 398], "14920235": [369, 398], "40000009": [369, 398], "73333335": [369, 398], "axisa": [370, 401], "axisb": [370, 401], "axisc": [370, 401], "293": [370, 402], "46997": [370, 402], "eigendecomposit": [370, 405, 406], "qlq\u1d40": [370, 405, 406], "orthogon": [370, 405, 406], "behav": [370, 405, 541, 545, 555, 561, 562, 563, 570, 583], "futur": [370, 406, 407, 532, 534, 536, 542, 543, 548, 550, 551, 564, 565, 566, 570, 576, 588], "45033181e": [370, 407], "02829754e": [370, 407], "54220343e": [370, 407], "12647155e": [370, 407], "38447177e": [370, 407], "56155300e": [370, 407], "26794919": [370, 407], "7320509": [370, 407], "array_lik": [370, 408, 416], "0012": [370, 409], "00342": [370, 409], "000565": [370, 409], "0104": [370, 409], "000981": [370, 409], "00282": [370, 409], "000766": [370, 409], "0322": [370, 409], "00237": [370, 409], "000151": [370, 409], "00101": [370, 409], "00019": [370, 409], "0214": [370, 409], "00171": [370, 409], "0107": [370, 409], "0167": [370, 409], "0472": [370, 409], "0536": [370, 409], "0177": [370, 409], "000429": [370, 409], "00762": [370, 409], "lu_factor": 370, "pivot": [370, 410], "lu": [370, 410], "convent": [370, 380, 411, 504, 534, 547, 557, 565, 575, 588], "frobeniu": [370, 412], "nuclear": [370, 412], "induc": [370, 412], "47722558": [370, 412], "776": [370, 412], "6000004": [370, 412], "118": [370, 413, 555], "moor": [370, 417], "penros": [370, 417], "underflow": [370, 419, 551], "logsabsdet": [370, 419], "although": [370, 419, 546, 549, 562, 566, 580, 582], "again": [370, 419, 535, 536, 543, 546, 547, 548, 549, 553, 555, 561, 562, 564, 565, 566, 571, 573, 576, 587, 588], "subject": [370, 419], "linalg": [370, 419, 541, 561, 563], "solut": [370, 420, 532, 543, 549, 551, 563, 564, 566, 580, 584], "ordin": [370, 420, 575], "usvh": [370, 421], "et": [370, 421], "cetera": [370, 421], "ss": [370, 422], "615": [370, 422], "866": [370, 422], "864": [370, 422], "0x": [370, 426], "Such": [370, 426, 543, 558, 564], "progress": [370, 426, 542, 543, 573], "alexandr": [370, 426], "theophil": [370, 426], "9000001": [370, 428], "64158917": [370, 428], "skew": [370, 429], "symmetric_matrix": [370, 429], "cross_product": [370, 429], "35667497": [371, 432], "793291": [371, 433], "512926": [371, 433], "outsid": [372, 435, 446, 552, 556, 558, 570, 587], "indexerror": [372, 438, 529, 555], "beyond": [372, 443, 554, 562, 588], "introduc": [372, 378, 443, 494, 534, 549, 551, 563, 564, 566, 571], "squeezabl": [372, 445], "famili": [372, 446], "intxx": [372, 446], "floatxx": [372, 446], "rep": [372, 448], "manipulation_funct": [372, 450], "fomaml_step": 373, "inner_cost_fn": [373, 456, 457], "outer_cost_fn": [373, 456, 457], "inner_grad_step": [373, 456, 457, 458], "inner_learning_r": [373, 456, 457, 458], "inner_optimization_step": [373, 456, 457, 458], "inner_batch_fn": [373, 456, 457], "outer_batch_fn": [373, 456, 457], "average_across_step": [373, 456, 457], "inner_v": [373, 456, 457], "keep_inner_v": [373, 456, 457], "outer_v": [373, 456, 457], "keep_outer_v": [373, 456, 457], "return_inner_v": [373, 456, 457, 458], "num_task": [373, 456, 457, 458], "maml": [373, 456, 457], "task": [373, 456, 457, 458, 532, 537, 543, 562, 563, 575, 582, 588, 589], "0x7f121cb704c0": [373, 456, 457, 458], "maml_step": 373, "vanilla": [373, 457, 572, 582], "recev": [373, 457], "reptile_step": 373, "cost_fn": [373, 458], "reptil": [373, 458], "receivng": [373, 458], "all_nested_indic": 374, "include_nest": [374, 459], "_index": [374, 459, 470], "extra_nest_typ": [374, 459, 460, 469, 470, 471], "themselv": [374, 459, 549, 551, 552, 554, 558, 562, 572, 579, 588], "far": [374, 459, 470, 552, 553, 569, 587, 588], "manual": [374, 459, 469, 470, 541, 542, 543, 562, 564, 572], "go": [374, 459, 460, 469, 470, 471, 532, 537, 538, 541, 542, 543, 544, 547, 548, 550, 551, 553, 562, 563, 564, 565, 567, 571, 576, 578, 582, 583, 587, 589], "deeper": [374, 459, 460, 469, 470, 471, 534, 543, 544, 564, 567], "copy_nest": 374, "to_mut": [374, 460, 471], "deepli": [374, 460, 576, 582], "mutabl": [374, 460, 466, 467, 471, 476, 477], "copied_nest": [374, 460], "1337": [374, 460], "duplicate_array_index_chain": 374, "index_nest": [374, 558], "insert_into_nest_at_index": 374, "insert_into_nest_at_indic": 374, "onto": [374, 465, 471, 533, 534, 582], "special_squar": [374, 465], "6666666666666667": [374, 465], "special_pow": [374, 465], "linear_model": [374, 465], "map_nest_at_index": 374, "shallow": [374, 466, 467, 471, 476, 477], "_result": [374, 466, 476], "placehold": [374, 466, 471, 476, 543, 546, 548, 556, 557, 577], "hh": [374, 466], "map_nest_at_indic": 374, "ub": [374, 467], "tb": [374, 467], "multi_index_nest": 374, "repeatedli": [374, 468, 550, 564], "nested_ani": 374, "check_nest": [374, 469, 470], "via": [374, 469, 470, 543, 545, 549, 551, 552, 561, 565, 566, 568, 570, 571, 575, 582], "conditon": [374, 469, 470], "nested_argwher": 374, "stop_after_n_found": [374, 470], "nested_indic": [374, 470], "nested_map": [374, 558], "_depth": [374, 471], "_tuple_check_fn": [374, 471], "_list_check_fn": [374, 471], "_dict_check_fn": [374, 471], "wherebi": [374, 471, 541, 579], "nested_multi_map": 374, "index_chain": [374, 472], "nest0": [374, 472], "ivy_arrai": [374, 472, 546, 562], "unappli": [374, 472], "prune_empti": 374, "prune_nest_at_index": 374, "prune_nest_at_indic": 374, "set_nest_at_index": 374, "set_nest_at_indic": 374, "111": [374, 477], "xyz": [374, 477], "pqr": [374, 477], "217": [375, 478], "uniformli": [376, 484, 486], "22346112": [376, 485], "0922": [376, 485], "49671414": [376, 485], "1382643": [376, 485], "64768857": [376, 485], "5230298": [376, 485], "23415337": [376, 485], "23413695": [376, 485], "9213753": [376, 485], "12818667": [376, 485], "799": [376, 485], "469": [376, 485], "287": [376, 485], "0366": [376, 485], "26431865": [376, 486], "475": [376, 486], "878": [376, 486], "861": [376, 486], "929": [376, 486], "789": [376, 486], "519": [376, 486], "0435": [376, 486], "381": [376, 486], "4608004": [376, 486], "8458502": [376, 486], "67270088": [376, 486], "31128597": [376, 486], "major": [377, 492, 535, 551, 552, 563, 564, 576, 579, 582], "guarante": [378, 494, 496, 536, 546, 576], "aggreg": [378, 494, 550], "fourth": [378, 494], "1141": [378, 494], "8101": [378, 494], "9298": [378, 494], "8460": [378, 494], "2119": [378, 494], "3519": [378, 494], "6252": [378, 494], "4033": [378, 494], "7443": [378, 494], "2577": [378, 494], "3707": [378, 494], "0545": [378, 494], "3238": [378, 494], "5944": [378, 494], "0775": [378, 494], "4327": [378, 494], "62519997": [378, 494], "40329999": [378, 494], "59439999": [378, 494], "74430001": [378, 494], "81010002": [378, 494], "84600002": [378, 494], "92979997": [378, 494], "29999995": [378, 495], "einstein": [380, 504], "summat": [380, 504], "117": [380, 504], "sentinel": [380, 505, 507], "90000004": [380, 506], "statistical_funct": [380, 509], "07472222": [380, 511], "00666667": [380, 511], "08966666": [380, 511], "simplicit": [381, 512, 513], "meta": [456, 457, 458, 546, 565, 582], "nested_arrai": [515, 548], "nestedarrai": 515, "classmethod": 515, "from_row_length": 515, "row_length": 515, "from_row_split": 515, "row_split": 515, "unbind": 515, "ivy_test": [516, 517, 518, 519, 521, 522, 523, 541, 542, 543, 545, 548, 550, 563], "test_ivi": [516, 517, 518, 519, 521, 522, 523, 541, 542, 543, 548, 550, 563, 564], "assert_all_clos": [516, 563], "ret_np": [516, 518, 563], "ret_from_gt_np": [516, 563], "ground_truth_backend": [516, 518, 519, 523, 563], "ground": [516, 518, 534, 562, 564], "mark": [516, 541, 543, 545, 564, 568], "fail": [516, 541, 542, 543, 545, 550, 551, 553, 556, 562, 563], "assert_same_type_and_shap": 516, "this_key_chain": 516, "check_unsupported_devic": 516, "input_devic": 516, "all_as_kwargs_np": [516, 518], "presenc": [516, 549, 561], "check_unsupported_device_and_dtyp": 516, "input_dtyp": [516, 518, 522, 563, 564], "check_unsupported_dtyp": 516, "test_unsupported_funct": 516, "value_test": 516, "ret_np_flat": 516, "ret_np_from_gt_flat": 516, "ret_from_np_gt_flat": 516, "available_framework": 517, "ground_truth": 517, "function_test": 518, "args_to_contain": 518, "array_arg": [518, 558], "args_to_frontend": 518, "frontend_array_fn": 518, "arrays_to_frontend": 518, "as_list": 518, "compiled_if_requir": 518, "test_compil": [518, 522, 523], "convtru": 518, "nativeclass": 518, "counter": [518, 572], "create_args_kwarg": 518, "args_np": 518, "arg_np_val": 518, "args_idx": 518, "kwargs_np": 518, "kwarg_np_val": 518, "kwargs_idx": 518, "test_flag": [518, 563, 564], "on_devic": [518, 522, 563], "empty_func": 518, "flatten_and_to_np": 518, "flatten_frontend": 518, "flatten_frontend_to_np": 518, "flatten_fw_and_to_np": 518, "framework_compar": 518, "get_frontend_ret": 518, "as_ivy_arrai": 518, "get_ret_and_flattened_np_arrai": 518, "gradient_incompatible_funct": 518, "gradient_test": [518, 564], "rtol_": 518, "atol_": [518, 563], "gradient_unsupported_dtyp": 518, "kwargs_to_args_n_kwarg": 518, "num_positional_arg": [518, 522, 523, 563, 564], "port": [518, 536], "make_json_pick": 518, "test_frontend_funct": [518, 563], "fn_tree": [518, 519, 523, 562, 563, 564], "test_valu": [518, 563, 564], "all_alias": [518, 563], "alias": [518, 523, 541, 562, 563], "namespac": [518, 541, 551, 559, 562, 563, 565, 568, 573], "test_frontend_method": [518, 563], "init_input_dtyp": [518, 563], "method_input_dtyp": [518, 563], "init_flag": [518, 563, 564], "method_flag": [518, 522, 563, 564], "init_all_as_kwargs_np": [518, 563], "method_all_as_kwargs_np": [518, 563], "frontend_method_data": [518, 563], "consum": [518, 549, 550, 557, 563, 564], "init_as_variable_flag": [518, 523], "dictat": [518, 546, 553, 557, 561], "init_num_positional_arg": [518, 523], "init_native_array_flag": 518, "with_v": 518, "ret_gt": 518, "test_funct": [518, 542, 543, 550, 563, 564], "fn_name": [518, 519, 523, 547, 563, 564], "return_flat_np_arrai": 518, "functiontestflag": [518, 522], "with_out": [518, 522, 559, 563, 564], "instance_method": [518, 522, 559, 564], "as_vari": [518, 522, 559, 563, 564], "as_variable_flag": [518, 523, 563], "native_array_flag": [518, 523, 563], "container_flag": [518, 522, 523], "test_method": 518, "class_nam": 518, "method_nam": [518, 521, 523, 563], "init_with_v": 518, "method_with_v": 518, "test_gradi": [518, 522, 523, 559], "method_as_variable_flag": [518, 523], "method_num_positional_arg": [518, 523], "method_native_array_flag": 518, "method_container_flag": [518, 523], "tthe": 518, "var_fn": 518, "holder": 519, "interruptedtest": 519, "test_interrup": 519, "testdata": 519, "supported_device_dtyp": 519, "is_method": 519, "remove_all_current_framework": 519, "setup_api_test": 519, "test_data": 519, "setup_frontend_test": 519, "teardown_api_test": 519, "teardown_frontend_test": 519, "frontendmethoddata": 521, "ivy_init_modul": 521, "framework_init_modul": 521, "init_nam": 521, "test_parameter_flag": 522, "frontendfunctiontestflag": 522, "generate_frontend_arrai": [522, 523], "testflag": 522, "apply_flag": 522, "args_to_iter": 522, "frontendmethodtestflag": 522, "initmethodtestflag": 522, "methodtestflag": 522, "as_cont": 522, "build_flag": 522, "frontend_function_flag": 522, "searchstrategi": [522, 523, 564], "frontend_method_flag": 522, "function_flag": 522, "init_method_flag": 522, "testing_help": 523, "handle_frontend_method": [523, 563, 564], "class_tre": [523, 563], "init_tre": [523, 563], "init_native_arrai": 523, "min_siz": [523, 564], "max_siz": [523, 564], "_as_varaible_strategi": 523, "method_native_arrai": 523, "_given_kwarg": 523, "wrapper": [523, 546, 548, 549, 551, 555, 559, 561, 562, 566, 570, 577, 578, 582], "strategi": [523, 541, 559, 563], "handle_frontend_test": [523, 563, 564], "number_positional_arg": [523, 563], "test_with_out": [523, 563], "test_inplac": 523, "handle_method": [523, 564], "method_tre": [523, 563, 564], "_gradient_strategi": 523, "_compile_strategi": 523, "handle_test": [523, 564], "test_instance_method": 523, "hypothesi": [523, 541, 543, 545, 550, 559], "num_positional_args_method": 523, "check_al": 526, "messag": [526, 529, 531, 535, 542, 543, 550, 553, 555, 556, 562, 568, 570], "check_all_or_any_fn": 526, "check_ani": 526, "check_dimens": 526, "check_elem_in_list": [526, 562], "elem": 526, "check_equ": [526, 562], "check_exist": 526, "check_fals": 526, "check_fill_value_and_dtype_are_compat": 526, "check_gather_input_valid": 526, "check_gather_nd_input_valid": 526, "check_great": 526, "allow_equ": [526, 555], "check_inplace_sizes_valid": 526, "check_isinst": 526, "allowed_typ": 526, "check_kernel_padding_s": 526, "kernel_s": 526, "padding_s": 526, "check_less": [526, 555], "check_one_way_broadcast": 526, "check_same_dtyp": 526, "check_shapes_broadcast": 526, "check_tru": 526, "dynamic_import": 528, "import_modul": [528, 568], "packag": [528, 532, 538, 542, 550, 555, 556, 562, 576, 582, 584], "ivyerror": [529, 532, 555], "attributeerror": [529, 555, 570], "ivynotimplementedexcept": 529, "notimplementederror": [529, 556], "add_array_spec": 530, "fn_array_spec": 530, "cprint": [531, 568], "readm": [532, 548, 576], "websit": [532, 535, 545], "faq": [532, 548], "ai": [532, 580, 584], "fingertip": 532, "prefer": [532, 542, 549, 555, 559, 562, 566, 582], "straight": [532, 562, 564, 570], "awai": [532, 580, 582], "dive": [532, 537, 539, 540, 541, 543, 545, 549, 551, 563, 567, 570, 571, 576, 588], "grow": [532, 565, 582], "guid": [532, 537, 541, 542, 543, 556, 562, 588], "own": [532, 535, 536, 542, 545, 550, 551, 554, 555, 562, 565, 568, 576, 577, 578, 581, 582, 587, 588], "wanto": 532, "variou": [532, 543, 545, 551, 554, 555, 557, 559, 560, 562, 563, 564, 575, 577, 578, 580, 581, 582, 585, 588], "applii": 532, "perk": [532, 546, 549], "essenti": [532, 534, 535, 541, 549, 552, 553, 558, 562, 565, 588], "mainli": [532, 543, 544, 560, 564, 569, 571, 577, 582], "handler": [532, 556, 567, 569, 573, 577], "what": [532, 535, 536, 538, 543, 544, 548, 549, 550, 553, 554, 557, 559, 560, 562, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 578, 583, 584, 587], "behind": [532, 543, 544, 557, 564, 567, 569], "scene": [532, 533, 534, 544, 567, 569, 582], "facilit": [532, 559], "agnost": [532, 542, 546, 557, 568, 570, 573, 576, 588, 589], "mse_loss": 532, "jax_ms": 532, "tf_mse": 532, "np_mse": 532, "torch_ms": 532, "mymodel": [532, 571], "linear0": [532, 571, 572], "linear1": [532, 571, 572], "_forward": [532, 554, 568, 571, 572], "put": [532, 541, 548, 564, 576, 588], "togheth": 532, "someth": [532, 543, 565, 571, 572, 576, 588], "easili": [532, 535, 542, 546, 550, 562, 566, 571, 572, 573, 576, 582, 588, 589], "favorit": 532, "x_in": [532, 571, 572, 573], "loss_fn": [532, 571, 572, 573], "finish": [532, 537, 541, 542, 544], "usabl": [532, 557, 565], "cover": [532, 541, 545, 546, 548, 553, 554, 558, 559, 564, 566, 567], "topic": [532, 559, 570, 582], "mechan": [532, 550, 574, 576], "vision": [532, 538, 574, 578, 588], "robot": [532, 574], "reinforc": [532, 575], "gym": 532, "builder": [532, 539, 574, 576, 577], "trainer": [532, 536, 574, 576, 589], "loader": [532, 571, 576], "break": [532, 547, 551, 556, 557, 565, 576], "highli": [532, 566, 582], "flexibl": [532, 549, 557, 560, 565, 566, 582], "everyon": [532, 536, 537, 543, 576], "plan": [532, 575], "interoper": [532, 535, 579, 580, 582, 585], "environ": [532, 537, 538, 543, 575, 582, 584], "easiest": [532, 539, 542], "command": [532, 539, 542, 545, 548, 550, 559], "python3": [532, 538, 542, 543, 555], "pre": [532, 538, 541, 564, 573, 576, 582], "pull": [532, 536, 537, 538, 541, 542, 545, 553, 565, 566, 576], "unifyai": [532, 538, 539, 542, 543, 548], "everyth": [532, 536, 541, 543, 544, 550, 553, 562, 563, 564, 565, 569, 576], "sweat_smil": 532, "git": [532, 538, 539, 540, 542, 543, 545, 548, 550, 564], "clone": [532, 538, 539, 543], "github": [532, 534, 538, 539, 540, 541, 543, 545, 550, 551, 553, 554, 564], "com": [532, 538, 539, 542, 545, 548, 550, 551], "cd": [532, 538, 539, 542, 543], "page": [532, 542, 543, 548, 550, 569, 570, 573, 574], "instruct": [532, 541, 542, 545, 555, 563, 564, 580, 583, 586, 588], "video": [532, 537, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 580], "tutori": [532, 543, 562], "quit": [532, 543, 546, 553, 554, 558, 559, 564, 566, 582, 588], "lot": [532, 535, 536, 550, 551, 559, 564, 576, 581], "jax_fn": 532, "jax_x": 532, "torch_x": 532, "torch_fn": 532, "focus": [532, 565, 575, 580, 581, 582, 588, 589], "architectur": [532, 542, 573, 576, 580, 581, 582, 585, 586, 587], "orient": [532, 575], "contributor": [532, 537, 542, 543, 562, 567, 582], "explain": [532, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 571, 572, 573, 578, 585, 588], "nuanc": 532, "background": [532, 542, 548, 582, 584], "contextualis": 532, "problem": [532, 535, 543, 545, 546, 548, 562, 570, 578, 584, 588], "explos": [532, 533, 535], "why": [532, 533, 535, 543, 548, 561, 570], "adher": [532, 534, 535, 545, 551, 554, 557, 566, 568, 573, 578, 579, 588], "lastli": [532, 546], "paint": [532, 534, 568], "pictur": [532, 534, 541, 568], "role": [532, 543, 562, 569, 583, 585, 589], "plai": [532, 546, 562, 564, 573, 582, 585], "wide": [532, 543, 564, 580, 582], "demo": [532, 538, 575], "showcas": [532, 553, 575], "shorter": [532, 570], "ensp": 532, "eff_encod": 532, "efficientnet_v2": 532, "efficientnetv2b0": 532, "include_top": 532, "imagenet": 532, "input_shap": 532, "torch_eff_encod": 532, "customiz": [532, 548], "script": [532, 538, 542, 543, 550, 553, 568, 576, 582], "deepmind_perceiver_io": 532, "perceiver_backbon": 532, "dummy_input": 532, "backbon": [532, 568, 571], "perceiverioclassifi": 532, "max_pool": 532, "maxpool2d": 532, "1024": 532, "sm_framework": 532, "segmentation_model": 532, "sm": 532, "torch_sm": 532, "metric": [532, 576], "iou_scor": 532, "rax": 532, "torch_rax": 532, "poly1_softmax_loss": 532, "madmom": 532, "madmon": 532, "torch_madmom": 532, "freq": 532, "audio": 532, "hz2midi": 532, "todo": [532, 541, 551, 562, 564], "output_dens": 532, "maxpooling1d": 532, "pool_siz": 532, "tf_kornia": 532, "sharp": 532, "tf_rax": 532, "tf_madmom": 532, "hk_eff_encod": 532, "dummy_x": 532, "jax_sm": 532, "jax_madmom": 532, "np_kornia": 532, "np_sm": 532, "np_rax": 532, "Or": [532, 539, 571], "yourself": [532, 541, 543, 562, 564, 566, 575], "anyon": [532, 535, 537, 543, 550, 576, 588], "classif": [532, 582], "ivynet": 532, "h_w": 532, "extractor": 532, "image_height": 532, "image_width": 532, "favourit": [532, 542], "pure": [532, 554, 557, 562, 566, 570, 573, 576, 582, 588, 589], "generate_batch": 532, "dataset_s": 532, "y_train": 532, "num_correct": 532, "y_pred": 532, "model_nam": 532, "hyperparam": 532, "num_epoch": 532, "epoch": 532, "epoch_loss": 532, "running_loss": 532, "training_accuraci": 532, "train_loss": 532, "train_correct": 532, "train_loop": 532, "tqdm": 532, "xbatch": 532, "ybatch": 532, "ybatch_encod": 532, "loss_prob": 532, "batch_loss": 532, "set_descript": 532, "set_postfix": 532, "accuracy_percentag": 532, "naverag": 532, "6f": 532, "plot": [532, 582], "_train_summari": 532, "csv": 532, "writer": 532, "writerow": 532, "prepar": [532, 550], "folder": [532, 538, 542, 543, 545, 548, 550, 558, 562, 564, 565], "believ": [532, 535, 543], "bug": [532, 543, 548, 562, 564, 565], "feedback": [532, 550], "welcom": [532, 537, 542, 543], "appreci": 532, "info": [532, 554], "amaz": 532, "acceler": [532, 562, 580, 584, 585, 586, 587], "journei": [532, 537], "achiev": [532, 550, 551, 556, 559, 564, 566, 571, 573, 577], "ambiti": 532, "goal": [532, 535, 541, 582, 588], "season": 532, "server": [532, 542, 543, 548, 582], "perfect": [532, 575], "ask": [532, 536, 541, 542, 553, 568, 570, 576], "idea": [532, 536, 538, 562, 565, 569, 575, 581], "fellow": 532, "team": [532, 537, 541, 542, 543, 562, 584], "twitter": 532, "sneak": 532, "peek": 532, "certainli": [532, 535, 588], "great": [532, 535, 536, 543, 564, 568, 570, 588], "stai": [532, 550], "credit": 532, "accompani": 532, "paper": [532, 536], "continu": [532, 535, 536, 540, 541, 542, 544, 545, 556, 564, 576, 582], "articl": 532, "lenton2021ivi": 532, "titl": [532, 541, 543, 548, 562], "templat": [532, 548, 554, 564], "inter": [532, 563], "author": [532, 541, 543, 580, 584], "lenton": 532, "daniel": 532, "pardo": 532, "fabio": 532, "falck": 532, "fabian": 532, "jame": 532, "stephen": 532, "clark": 532, "ronald": 532, "journal": 532, "arxiv": 532, "preprint": 532, "2102": 532, "02886": 532, "year": [532, 534, 536, 545, 576, 582], "huge": [533, 535, 550, 571, 582, 588], "collabor": [533, 534, 535], "consortium": [533, 535], "grown": 534, "consider": [534, 553, 557, 566, 579, 580], "recent": [534, 535, 542, 543, 564], "especi": [534, 542, 566, 582], "rapidli": 534, "repo": [534, 538, 540, 543, 545, 548, 550, 551, 562, 563, 564, 565], "wonder": [534, 536, 570], "thing": [534, 535, 536, 540, 541, 542, 543, 547, 556, 562, 564, 566, 570, 571, 582], "evolv": [534, 582], "shareabl": 534, "hinder": [534, 557], "outdat": 534, "matter": [534, 553], "month": [534, 542], "rigor": [534, 564], "newest": 534, "softwar": [534, 535, 542, 543, 580, 585, 586, 587], "rapid": [534, 535, 542, 582], "prototyp": [534, 582], "vital": [534, 573], "signific": [534, 535, 576, 582], "bottleneck": 534, "quickli": [534, 536, 542, 543, 550, 571, 572, 582, 589], "obsolet": [534, 536], "constantli": [534, 565, 566], "invent": 534, "wheel": 534, "simultan": [534, 536], "modern": [534, 535, 560, 587], "scalabl": [534, 568, 587, 588], "univers": [534, 562], "languag": [534, 536, 562, 566, 568, 577, 580, 583, 585, 586, 587, 588], "front": [534, 562, 567, 568, 571, 580, 582], "runner": 534, "littl": [534, 570, 584], "principl": [534, 580, 582, 585], "almost": [534, 540, 549, 563, 569, 571], "syntax": [534, 535, 551, 556, 582], "unsurprisingli": [534, 553], "fundament": [534, 550, 562, 566, 568, 582], "2006": 534, "cut": [534, 588], "cloth": 534, "central": [535, 541, 566, 588], "forgiven": 535, "eyebrow": 535, "somehow": 535, "strong": [535, 576, 582], "industri": [535, 582, 584], "wors": 535, "funni": 535, "comic": 535, "strip": 535, "easi": [535, 542, 543, 546, 549, 558, 560, 563, 564, 566, 580, 582, 588, 589], "unlik": [535, 545, 549, 550, 553, 561, 587, 589], "charger": 535, "charact": [535, 556, 562], "instant": 535, "mandat": [535, 551, 561, 564, 565], "adopt": [535, 543, 546, 557, 566, 581, 582, 587], "despit": [535, 549, 551, 552, 563, 566, 568, 579, 582], "bring": [535, 545, 564, 568, 569, 577], "benefit": [535, 536, 542, 546, 549, 558, 561, 566, 570, 571, 576, 580, 584, 587], "unrel": [535, 543], "contrari": 535, "bumpi": 535, "road": 535, "allud": [535, 571], "technologi": [535, 580, 584], "success": 535, "thank": [535, 571], "bio": [535, 542], "pcie": 535, "interfac": [535, 570, 573, 576, 577, 578, 579, 580, 581, 582, 586, 589], "motherboard": 535, "raid": 535, "storag": [535, 571], "virtual": [535, 538, 543, 562, 585, 586], "bluetooth": 535, "wireless": 535, "exchang": [535, 540, 578, 580], "btx": 535, "sata": 535, "host": [535, 539, 550, 576, 587], "tcp": 535, "ip": 535, "commun": [535, 537, 541, 542, 543, 576, 581, 582, 584], "smtp": 535, "send": [535, 587], "gmail": [535, 550], "outlook": 535, "pop": [535, 542], "email": [535, 550], "live": [535, 536, 551, 578, 580], "did": [535, 541, 548, 573, 588], "aris": [535, 551, 576], "substanti": [535, 543, 546, 551, 564, 582], "innov": 535, "growth": [535, 585], "necess": 535, "parti": [535, 548, 576, 581, 582, 588], "engag": [535, 537, 543], "regard": [535, 540, 549, 562, 563, 566], "2015": [535, 582], "alongsid": 535, "frame": [535, 575, 582], "matur": [535, 576, 582], "preced": [535, 572], "aros": 535, "effort": [535, 537, 576, 578, 582, 588], "stage": [535, 537, 543, 544, 548, 556, 564, 582], "mission": [535, 584], "At": [535, 541, 542, 545, 562, 564, 565, 582], "ourselv": [535, 588], "quansight": [535, 588], "compani": [535, 578], "organ": [535, 546, 549, 558, 562, 565, 577], "panda": 535, "scipi": [535, 584, 589], "conda": [535, 542, 584], "apach": [535, 584, 588], "mxnet": [535, 589], "onnx": [535, 580, 588], "scikit": 535, "jupyt": [535, 584], "aw": 535, "cupi": [535, 582, 589], "net": [535, 536, 568, 573], "sympi": 535, "modin": 535, "spyder": 535, "member": [535, 541, 543, 562], "googl": [535, 550], "octoml": [535, 588], "further": [535, 536, 543, 545, 546, 550, 553, 555, 557, 562, 564, 567, 568, 571, 572, 587, 588], "sponsor": 535, "lg": 535, "electron": 535, "shaw": 535, "intel": [535, 580, 587], "promis": 535, "pursuit": 535, "unif": [535, 537, 570, 578, 588], "clearli": [535, 541, 543, 553, 563, 564, 586], "thought": [535, 542, 543, 557, 580], "care": [535, 543, 562, 566, 573], "gone": [535, 567], "excit": [535, 537, 544], "complianc": 535, "hope": [535, 576, 588], "suit": [535, 542, 544, 545, 550, 564, 571, 575, 577, 582, 588], "motiv": [535, 570], "convinc": 535, "celebr": 535, "encourag": [535, 575, 576], "foundat": [535, 585], "perfectli": 536, "happi": [536, 542, 576], "abund": 536, "better": [536, 538, 544, 562, 563, 565, 566, 567, 570, 571, 572, 585], "streamlin": [536, 585], "workflow": [536, 541, 543, 547, 551, 560, 562, 571, 574, 577, 581, 588, 589], "week": [536, 543], "sai": [536, 542, 559, 570], "deepmind": 536, "releas": [536, 541, 542, 543, 551, 562, 565, 566, 576, 582, 588], "awesom": 536, "love": 536, "perceiverio": 536, "slew": 536, "rush": 536, "inevit": [536, 583], "often": [536, 540, 545, 555, 556, 557, 558, 562, 564, 576, 583, 586, 589], "erron": 536, "poor": 536, "repositori": [536, 538, 539, 542, 543, 544, 545, 556], "confus": [536, 548, 551, 555, 561, 566, 577], "hour": [536, 550], "spent": 536, "spin": 536, "discuss": [536, 543, 548, 551, 552, 561, 562, 564, 566, 569, 570, 571, 576, 578, 583], "sake": 536, "few": [536, 540, 541, 543, 549, 551, 552, 557, 558, 560, 561, 564, 566, 568, 569, 570, 571, 572, 574, 582, 584], "automat": [536, 541, 542, 543, 544, 548, 549, 550, 551, 556, 558, 564, 566, 567, 569, 572, 573, 577, 582, 585, 589], "wouldn": 536, "nice": [536, 564, 582], "frantic": 536, "lucid": 536, "honk": 536, "understand": [536, 538, 540, 541, 542, 543, 544, 545, 548, 553, 554, 557, 563, 566, 567, 578, 588], "hasn": 536, "spend": [536, 582], "torchvis": 536, "sonnet": 536, "statu": [536, 541, 550], "quo": 536, "dopamin": 536, "ignit": 536, "catalyst": 536, "lightn": 536, "fastai": 536, "flax": [536, 573, 576, 582], "trax": [536, 573], "objax": [536, 573], "offer": [536, 562, 572, 582, 588, 589], "strongli": [537, 542, 588, 589], "skill": [537, 584], "veteran": 537, "beginn": [537, 582], "aspect": [537, 560, 571, 582], "board": [537, 548], "basic": [537, 541, 553, 564], "local": [537, 538, 542, 545, 548, 558, 563, 564], "resourc": [537, 541, 550], "slightli": [538, 549, 562, 568, 572], "setup": [538, 542, 543, 548, 550], "mech": [538, 539], "grasp": [538, 562], "tree": [538, 551], "dir": [538, 571], "mutual": [538, 549, 558], "venv": [538, 555], "ivy_dev": [538, 542, 543], "bat": [538, 542, 543], "mac": [538, 542, 543], "linux": [538, 542, 543, 585, 587], "instal": [538, 539, 542, 543, 547, 548, 556, 575], "edit": [538, 541, 542, 543], "pip": [538, 542, 575], "immedi": [538, 542, 566], "ivy_robot": [538, 575], "docker": [538, 540], "desktop": [538, 542], "my": [538, 550, 565], "mount": [538, 539, 543], "rm": [538, 539, 543], "pwd": [538, 539], "pycharm": 538, "vscode": [538, 542], "devcontain": [538, 542], "remot": [538, 542, 545], "codespac": 538, "good": [538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 568, 569, 572], "commit": [538, 541, 545, 553, 564], "make_doc": 539, "sh": [539, 542, 543, 545, 550], "ssh": [539, 550], "Then": [539, 541, 542, 543, 548, 550, 559, 565, 576], "make_docs_without_dock": [539, 548], "sphinx": [539, 548], "resours": 540, "climb": 540, "steep": 540, "curv": 540, "realpython": 540, "pyn": 540, "platform": [540, 542, 580, 584, 586], "pilot": 540, "stuck": [540, 541], "spell": 540, "though": [540, 541, 543, 551, 554, 558, 561, 562, 566, 571, 576], "sound": [540, 550, 567], "peopl": [540, 542, 543, 544, 582, 584], "action": [540, 550, 553, 564], "frequent": [541, 543, 582], "outlin": [541, 542, 543, 544, 549, 551, 554, 558, 561, 562, 564], "broad": [541, 584], "individu": [541, 543, 545, 551, 558, 561, 562, 582, 585, 588, 589], "explan": [541, 543, 549, 554, 557, 562, 570], "focu": [541, 560, 580, 581, 584, 589], "pypi": [541, 542, 576], "familiar": [541, 542], "sure": [541, 542, 543, 545, 550, 562, 563, 564, 566], "aforement": 541, "categori": [541, 545, 546, 549, 551, 562, 565, 567], "arraywithelementwis": [541, 546, 570], "containerwithmanipul": 541, "thorough": [541, 554, 557, 564], "comment": [541, 542, 543, 545, 548, 551, 556, 562], "add_reformatting_checklist_": 541, "category_nam": [541, 551, 552, 554, 557, 558], "pr": [541, 543, 545, 562, 563, 564], "autom": [541, 550, 564, 577, 584], "bot": 541, "markdown": [541, 548], "text": [541, 543, 548, 553, 554], "patient": [541, 542], "symbol": [541, 542, 582, 583], "emoji": 541, "legend": 541, "review": [541, 543, 550, 553, 562, 565], "checkbox": [541, 542], "proce": [541, 542], "elabor": 541, "struggl": 541, "assigne": 541, "status": 541, "refrain": 541, "subsect": [541, 543, 545, 550], "verifi": [541, 551, 552, 562, 564, 565], "func_nam": [541, 553, 554, 558, 562], "suggest": [541, 542, 543, 548, 551, 560, 562, 564, 565], "assess": [541, 566], "merg": [541, 543, 545, 550, 562, 582], "composition": [541, 561], "pend": 541, "helpfulli": [541, 566, 580], "problemat": [541, 542], "unimpl": 541, "issue_link": 541, "alias_nam": 541, "push": [541, 543, 545, 556, 563, 564, 588], "liner": 541, "meanwhil": [541, 550], "reselect": 541, "placement": 541, "categoris": [541, 545, 562], "faithfulli": 541, "creation_routin": [541, 563], "indexing_routin": 541, "ma": 541, "manipulation_routin": 541, "mathematical_funct": [541, 562], "sorting_searching_count": 541, "ufunc": [541, 562], "matrix_and_vector_product": 541, "matrix_eigenvalu": 541, "norms_and_other_numb": 541, "solving_equations_and_inverting_matric": 541, "seem": [541, 542, 566, 572, 573, 576, 582], "gleam": 541, "uncom": 541, "test_numpy_inn": 541, "test_frontend": [541, 550, 563], "unsur": [541, 564], "explor": [541, 542, 543, 551, 566, 569, 573, 575, 582, 585], "confirm": 541, "backend_nam": [541, 547, 551, 552, 554, 557, 558, 559], "relevant_submodul": 541, "sometim": [541, 542, 543, 545, 551, 558, 562, 564, 565, 566], "recreat": [541, 545], "defer": [541, 546, 549, 551, 552, 558, 559, 561, 562, 564, 588], "clearer": [541, 555, 563, 571], "button": [542, 543], "your_usernam": 542, "gh": 542, "your_fold": 542, "sync": [542, 545], "cours": [542, 543, 545, 546, 553, 562, 565, 566, 571, 576, 587, 588], "whatev": [542, 549, 576], "elig": 542, "student": 542, "licenc": 542, "remind": 542, "licens": [542, 585], "expir": 542, "profession": 542, "trial": 542, "jetbrain": 542, "bui": [542, 588], "paid": 542, "pace": 542, "person": [542, 543], "experi": [542, 555, 564, 569, 571, 576], "abil": [542, 566, 569, 576, 582], "perhap": [542, 570, 571, 572, 576, 588], "click": [542, 543, 550, 554, 569], "icon": [542, 543], "panel": 542, "builtin": [542, 570, 572], "cmd": 542, "virtualenv": 542, "tick": [542, 543, 550], "test_array_api": [542, 543, 545, 564], "txt": [542, 545, 548, 565], "visual": [542, 548, 562, 576, 582, 584, 587], "mitig": [542, 588], "conflict": [542, 543, 550, 562, 571], "wsl": 542, "powershel": 542, "admin": 542, "visit": [542, 543, 550], "menu": 542, "On": [542, 551, 562, 564, 566, 569, 573], "tag": [542, 543], "introspect": 542, "usr": 542, "debug": [542, 543, 549, 550, 560, 564, 566, 571, 582], "dialog": 542, "caus": [542, 543, 545, 547, 548, 549, 550, 551, 553, 561, 563, 564, 576], "earlier": [542, 543], "virtualis": 542, "dropdown": 542, "dockerfil": 542, "navig": [542, 543, 544], "tab": [542, 550, 571], "m1": 542, "optional_m1_1": 542, "optional_m1_2": 542, "sudo": 542, "apt": 542, "ca": 542, "certif": 542, "curl": 542, "gnupg": 542, "lsb": 542, "mkdir": [542, 550], "keyr": 542, "fssl": 542, "gpg": 542, "dearmor": 542, "echo": [542, 550], "deb": 542, "arch": 542, "dpkg": 542, "lsb_releas": 542, "tee": 542, "null": 542, "ce": 542, "cli": 542, "containerd": 542, "io": [542, 550], "plugin": 542, "systemctl": 542, "permiss": [542, 550], "press": [542, 543, 571], "ok": 542, "successful": 542, "4a": 542, "socket": 542, "chmod": [542, 550], "rwx": 542, "sock": 542, "pid": 542, "coupl": [542, 546, 570, 572, 582], "test_ab": [542, 564], "editor": 542, "pytest": [542, 543, 545, 550, 564], "keyboard": 542, "displai": [542, 548, 549, 555, 564, 571], "screenshot": 542, "ctrl": [542, 543], "test_elementwis": 542, "bar": [542, 548], "shell": [542, 543], "run_tests_cli": [542, 545], "run_ivy_core_test": 542, "run_ivy_nn_test": 542, "run_ivy_stateful_test": 542, "run_test": [542, 550], "test_depend": 542, "test_ivy_cor": 542, "test_ivy_nn": 542, "test_ivy_st": 542, "test_": [542, 563], "test_cor": [542, 543, 563], "wish": [542, 562], "ivy_cor": 542, "ivy_nn": 542, "ivy_st": 542, "simplest": [542, 553, 564, 566], "header": [542, 543], "advanc": [542, 581], "arrow": 542, "test_stat": 542, "test_submodule_nam": 542, "test_function_nam": 542, "debugg": 542, "studio": 542, "afterward": [542, 571], "restart": 542, "overlap": [542, 550, 565, 566, 583], "test_file_path": 542, "test_fn_nam": 542, "engin": [542, 582, 584, 585], "comma": 542, "postcreatecommand": 542, "bash": [542, 543, 545], "post_create_command": 542, "poststartcommand": 542, "safe": [542, 562], "containerworkspacefold": 542, "reopen": 542, "test_fle_path": 542, "slash": 542, "headach": 542, "arm": [542, 543], "vm": [542, 550], "azur": 542, "cloud": [542, 550, 575, 584], "longer": [542, 551, 559, 561, 564, 582], "worri": 542, "usual": [542, 545, 562, 564, 566], "theme": [542, 548], "slow": 542, "ipad": 542, "browser": [542, 548], "cool": [542, 565], "quota": 542, "requisit": 542, "pane": [542, 543, 550], "readi": 542, "master": [542, 543, 545, 550, 565, 582], "box": 542, "upto": [542, 543], "minut": [542, 550], "subsequ": [542, 546, 550, 551, 553, 557, 558, 561, 564, 566, 572, 583], "launch": 542, "approach": [542, 543, 546, 549, 551, 558, 559, 562, 564, 566, 570, 571, 576, 579, 586, 588], "colour": 542, "chanc": 542, "troubleshoot": 542, "ever": 542, "flask": 542, "toolbar": [542, 543], "_array_modul": [542, 545], "array_api_test": [542, 543, 545], "refresh": 542, "conftest": 542, "nutshel": [542, 557], "hook": 542, "lint": 542, "attempt": [542, 556, 576], "properli": [542, 544, 555, 562, 564], "quick": [543, 544, 563, 572], "tendenc": 543, "land": 543, "world": [543, 584], "come": [543, 546, 550, 562, 565, 566, 572, 574, 577, 582], "fly": [543, 582], "hard": [543, 570, 582], "respons": [543, 550, 551], "internship": 543, "serv": [543, 546, 549, 557, 558, 562, 564, 566, 567, 577, 580], "suspect": 543, "act": [543, 553, 576, 589], "iii": 543, "reformat": [543, 556], "issue_numb": 543, "No": [543, 550, 582], "clean": [543, 565, 566, 568, 569, 571], "respond": 543, "dai": 543, "freed": 543, "basi": [543, 545, 571], "situat": [543, 550, 573], "upon": [543, 553, 561, 564, 566, 576, 581, 582], "unabl": [543, 566], "obvious": [543, 550], "qualiti": 543, "hypothet": 543, "frustrat": 543, "busi": 543, "fine": [543, 551, 553, 562, 570, 573, 588], "inact": 543, "me": 543, "unfairli": 543, "investig": 543, "incomplet": 543, "assign": [543, 547, 551, 556, 561, 570], "wherea": [543, 546, 549, 551, 552, 553, 557, 558, 564, 565, 573, 579], "invit": 543, "roadmap": [543, 550], "ideal": [543, 550, 561, 566, 571], "easier": [543, 545, 546, 551, 562, 563, 565, 577, 582, 584], "forth": 543, "rare": [543, 552, 576, 587], "scenario": [543, 560], "someon": [543, 576], "unfortun": [543, 548], "practic": [543, 550, 562, 585], "separ": [543, 546, 549, 550, 564, 568, 570, 571, 583, 587], "date": [543, 565], "complic": [543, 563, 568], "merge_with_upstream": 543, "name_of_your_branch": 543, "abort": 543, "tediou": [543, 553, 566], "stash": 543, "reinstat": 543, "fetch": [543, 545, 550], "uncommit": 543, "unstag": 543, "untrack": 543, "comprehens": [543, 545], "atlassian": 543, "wrote": 543, "blame": 543, "revis": 543, "eg": 543, "past": [543, 545, 563, 564, 582], "grep": 543, "commit_id": 543, "handi": 543, "histori": 543, "toggl": 543, "highlight": [543, 550, 553, 562], "whenev": [543, 550, 551, 555, 559, 561, 564, 571], "think": [543, 550, 553, 583], "approv": 543, "hash": [543, 571], "cancel": 543, "speedup": 543, "unavail": 543, "tickbox": 543, "span": [543, 566, 580, 588], "intent": [543, 561], "discourag": 543, "philosophi": 543, "valuabl": 543, "infrequ": 543, "earli": [543, 582], "wast": [543, 550], "spot": [543, 553, 558], "mistak": [543, 556], "propos": [543, 562, 566, 582], "mountain": 543, "advoc": [543, 576], "actual": [543, 544, 550, 558, 561, 562, 563, 564, 566, 567, 572, 576, 583, 588], "aim": [543, 545, 562, 564, 567, 580, 582, 585], "session": [543, 582], "beauti": 543, "concern": [543, 544, 549, 553, 561, 566, 567, 588], "undo": 543, "stress": 543, "nifti": 543, "reassur": 543, "isol": [543, 583, 588], "fact": [543, 545, 550, 562, 564, 568, 571], "local_path_to_ivi": 543, "subfold": [543, 563, 564, 565], "dep": 543, "fresh": 543, "arsen": 543, "declar": 543, "exec": 543, "rf": 543, "cp": 543, "ivy_contain": 543, "test_imag": 543, "test_random_crop": 543, "test_creation_funct": 543, "test_arang": 543, "cursor": 543, "alt": 543, "blog": 543, "breakpoint": 543, "gutter": 543, "caret": 543, "f8": 543, "f9": 543, "Into": 543, "f7": 543, "smart": 543, "interest": 543, "fragment": [543, 578, 580, 584], "pychram": 543, "dummi": 543, "wherein": [543, 559, 564], "failur": [543, 550, 563, 564], "who": [544, 555, 567, 576, 582, 584], "weed": [544, 567], "tour": 544, "superset": [544, 562, 576], "goe": [544, 566], "borrow": 544, "conjunct": 545, "establish": [545, 584], "2020": [545, 582], "popular": [545, 582], "sens": [545, 553, 562, 570], "unconnect": 545, "decis": [545, 549, 551, 562, 566, 568, 570, 582], "checkout": [545, 564], "everytim": [545, 551], "thoroughli": 545, "ci": [545, 551, 556, 563, 564, 576], "test_linalg": [545, 563], "test_set_funct": 545, "test_signatur": 545, "excess": [545, 547, 553], "array_modul": 545, "vv": 545, "test_manipulation_funct": 545, "test_concat": [545, 564], "nb": 545, "liber": 545, "bodi": [545, 564], "fortun": 545, "falsifi": [545, 564], "______________________": 545, "test_remaind": 545, "_______________________": 545, "test_operators_and_elementwise_funct": 545, "1264": 545, "st": [545, 563, 564], "1277": 545, "binary_param_assert_against_refimpl": 545, "ctx": 545, "mod": 545, "620": 545, "binary_assert_against_refimpl": 545, "324": 545, "scalar_o": 545, "assertionerror": [545, 555, 563, 564], "17304064": 545, "binaryparamcontext": 545, "reproduce_failur": [545, 564], "axic42baaowcnp": 545, "rumwmabaear0": 545, "make_binary_param": 545, "dh": 545, "numeric_dtyp": 545, "left_strat": 545, "left_sym": 545, "right_strat": 545, "right_sym": 545, "right_is_scalar": 545, "binary_param_assert_dtyp": 545, "binary_param_assert_shap": 545, "led": [545, 584], "unexpectedli": 545, "discrep": [545, 563], "varieti": [545, 550, 551, 552, 564, 578, 580, 584, 585, 588, 589], "test_asarray_arrai": 545, "test_floor_divid": 545, "health": 545, "test_iop": 545, "__imod__": 545, "isequ": 545, "test_matrix_norm": 545, "alter": 545, "tweak": 545, "array_api_methods_to_test": 545, "test_trac": 545, "latter": [545, 547, 551, 554, 562], "scheme": [545, 572, 582], "test_special_cas": 545, "__ipow__": 545, "is_integ": 545, "revisit": [545, 557], "_data": [546, 562, 570], "organiz": [546, 549, 562], "inherit": [546, 549, 555, 570, 576, 577], "bear": [546, 549, 551, 562], "underpin": [546, 549, 568], "programmat": [546, 549, 583], "backup": [546, 548, 549], "accident": [546, 549, 562], "readabl": [546, 549, 555, 557, 564, 565, 570, 571], "absent": [546, 549], "auto": [546, 548, 549, 571], "__mul__": [546, 549, 553, 557, 566, 570], "throw": [546, 551, 555, 570, 582], "imposs": 546, "firstli": [546, 551, 553, 554, 555, 558, 559, 561, 566, 571, 578, 588], "anywai": [546, 559, 562], "secondli": [546, 551], "permit": [546, 557, 562, 564, 566], "standalon": [546, 564, 577, 578, 583, 588, 589], "__ivy_array_function__": 546, "inspir": [546, 575], "__torch_function__": 546, "myarrai": 546, "handled_funct": 546, "notimpl": [546, 556], "four": [546, 551, 553, 557, 558, 564, 566, 571], "enough": [546, 550, 564, 570, 571, 572], "ivy_funct": 546, "my_ab": 546, "my_arrai": 546, "Of": [546, 562, 571, 587, 588], "subset": [546, 550, 554, 557, 560, 562, 564, 568, 582], "implicit_backend": [547, 568], "__dict__": [547, 568], "ivy_original_dict": [547, 568], "get_backend": [547, 558], "opt": [547, 551, 561, 564, 565, 566], "previous_backend": 547, "fallback": 547, "unset_backend": 547, "backend_handl": [547, 568], "requires_grad": 547, "memory_format": 547, "preserve_format": 547, "weren": 547, "vast": [547, 551, 582], "minor": [547, 566, 576], "fn_name_v_1p12_and_abov": 547, "fn_name_v_1p01_to_1p1": 547, "heavili": [548, 559, 562, 576], "characterist": 548, "conf": 548, "cleanup": 548, "disabl": 548, "procedur": [548, 550, 553], "segment": [548, 553], "toctre": 548, "maxdepth": 548, "related_work": 548, "deep_div": 548, "glossari": 548, "autosummari": 548, "top_level_toc": 548, "restructuredtext": 548, "render": [548, 554], "inlin": 548, "discov": [548, 551], "ivy_toctree_caption_map": 548, "stub": 548, "inturn": 548, "forc": [548, 550], "demonstr": [548, 551, 553, 555, 570], "underlin": 548, "remove_before_her": 548, "top_level_modul": 548, "fullnam": 548, "endfor": 548, "\u2139": 548, "foo": 548, "candid": 548, "postprocess": 548, "linker": 548, "discussion_channel_map": 548, "1000043690254946374": 548, "1028298816526499912": 548, "1000043749088436315": 548, "1028298847950225519": 548, "seri": [548, 562, 564, 582, 584], "discussion_paragraph": 548, "discord_link": 548, "channel_link": 548, "forum_link": 548, "gg": 548, "zvqdvbznqj": 548, "799879767196958751": 548, "channel_id": 548, "forum_id": 548, "paragraph": 548, "autoskippablemethod": 548, "skippable_method_attribut": 548, "__qualname__": 548, "five": [549, 571], "recap": [549, 553, 572], "arbitrarili": [549, 559, 571], "multi_map": 549, "containerwithelementwis": 549, "__repr__": 549, "__contains__": 549, "__getstate__": 549, "__setstate__": 549, "unpickl": 549, "num_dim": [549, 573], "__len__": 549, "enforc": [549, 570], "extern": [549, 557, 562, 564, 565], "c1": 549, "lefthand": 549, "righthand": 549, "addition": [549, 561, 562, 588], "counterpart": [549, 559], "absenc": [549, 557, 582], "implicitli": [549, 560, 564, 568], "log_pr": [549, 558, 561], "intuit": [549, 564, 571, 572, 578], "chronolog": 549, "concurr": [549, 550, 558, 582], "had": [549, 550, 561, 568, 582, 583], "But": [549, 550, 554, 559, 561, 566, 573], "implic": 549, "whatsoev": [549, 558, 577, 588], "implicit": [549, 554, 562, 564, 568, 582], "eager": [549, 576, 582], "children": 549, "shallowest": 549, "deepest": 549, "regularli": 550, "rollback": 550, "incorpor": [550, 571, 582], "fold": 550, "techniqu": 550, "triplet": 550, "test_torch": [550, 563], "test_tensor": [550, 563], "test_torch_instance_arctan_": 550, "7284": 550, "daili": 550, "shoot": 550, "impact": [550, 564, 572, 584], "_reduce_loss": 550, "test_nn": 550, "test_loss": 550, "test_binary_cross_entropy_with_logit": 550, "test_cross_entropi": 550, "test_binary_cross_entropi": 550, "test_sparse_cross_entropi": 550, "test_loss_funct": 550, "test_torch_binary_cross_entropi": 550, "test_torch_cross_entropi": 550, "torch_binary_cross_entropi": 550, "torch_cross_entropi": 550, "underneath": [550, 580], "magic": 550, "readthedoc": 550, "affect": [550, 562], "pedagog": 550, "f1": 550, "fm": 550, "yeah": 550, "cyclic": 550, "intellig": [550, 564, 566, 584], "tests_fil": 550, "file_nam": [550, 564, 565], "del": 550, "intersect": [550, 564, 575], "tests_lin": 550, "elif": [550, 555, 561, 562, 563], "correspondingli": 550, "tests_to_run": 550, "determine_tests_lin": 550, "mongodb": 550, "databas": [550, 564], "secret": 550, "db": 550, "ssh_deploy_kei": 550, "suffic": [550, 559, 564], "massiv": 550, "constraint": [550, 551, 560], "mb": 550, "yml": 550, "felicit": 550, "clone_map": 550, "home": 550, "deploy_kei": 550, "user_email": 550, "rashul": 550, "chutani": 550, "user_nam": 550, "target_branch": 550, "github_serv": 550, "deploy_key_fil": 550, "ssh_known_hosts_fil": 550, "known_host": 550, "keyscan": 550, "export": [550, 581, 588], "git_ssh_command": 550, "userknownhostsfil": 550, "methodologi": 550, "master1": 550, "restructur": 550, "index_map": 550, "test_map": 550, "routin": [550, 562, 566, 576, 582], "incorrect": 550, "snowbal": 550, "irrelev": [550, 551, 553], "recalibr": 550, "workflow_dispatch": 550, "schedul": [550, 576, 582, 589], "cron": 550, "saturdai": 550, "night": 550, "pm": 550, "gut": 550, "lesser": [550, 555], "lol": 550, "cater": 550, "master2": 550, "master32": 550, "synchron": 550, "runner2": 550, "corrupt": 550, "discard": 550, "decoupl": [550, 572], "150": 550, "cycl": [550, 564], "rashulchutani": 550, "yellow": 550, "queu": 550, "redirect": 550, "book": 550, "ran": 550, "badg": 550, "clickabl": 550, "all_dtyp": 551, "all_numeric_dtyp": 551, "all_int_dtyp": 551, "all_float_dtyp": 551, "replic": [551, 553, 560, 562, 566], "thirdli": 551, "native_float32": 551, "importantli": [551, 570, 573, 575], "conveni": [551, 552, 557, 563, 569, 571, 572, 577, 588], "arguabl": [551, 552, 562], "tabl": [551, 562, 582], "jaxarrai": [551, 552, 557, 561, 565, 568], "_handle_0_dim_output": [551, 561], "experiment": [551, 562, 565, 568, 582], "subtli": [551, 561], "promote_types_frontend_nam": 551, "promote_types_of_frontend_name_input": 551, "frontend_nam": 551, "accuraci": 551, "upcast": 551, "instabl": 551, "nearli": [551, 557, 559, 582], "downcast": 551, "footprint": 551, "concret": 551, "compound": 551, "settabl": [551, 552], "deleg": [551, 589], "shape_to_tupl": 551, "with_supported_dtyp": 551, "with_unsupported_dtyp": 551, "unment": 551, "backend_vers": 551, "_cast_for_unary_op": 551, "target_typ": 551, "unsupported_dtyp": 551, "former": [551, 554, 562], "lack": [551, 561, 582, 589], "patch": [551, 582], "subtl": [551, 565, 588], "offici": [551, 568], "inconsist": [551, 555, 560], "84530": 551, "unwarr": 551, "risk": [551, 588], "needlessli": 551, "bloat": 551, "undergo": [551, 576], "supported_dtyp": [551, 562], "unsupported_devic": 551, "supported_devic": 551, "slight": [551, 564, 572], "downsid": 551, "inflat": 551, "dual": 552, "categor": [552, 558, 562], "eight": [553, 567], "static_func_nam": 553, "op_nam": 553, "__r": 553, "combinatori": 553, "variat": [553, 562, 564], "unus": [553, 556, 561], "okai": [553, 566, 568], "meant": 553, "spec": [553, 554], "my_func": [553, 565], "some_flag": 553, "another_flag": 553, "jointli": 553, "5574077": 553, "1850398": 553, "5463025": 553, "8422884": 553, "91601413": 553, "9647598": 553, "3738229": 553, "1597457": 553, "0963247": 553, "9955841": 553, "3278579": 553, "pars": [553, 576], "asid": [553, 575], "14254655": 553, "1578213": 553, "380515": 553, "trivial": 553, "exlud": 553, "failing_fn_nam": 553, "onlin": [553, 554], "minutest": 553, "suffici": [553, 562, 564], "fault": [553, 582], "contrast": [554, 557, 562, 588], "instanti": 554, "array_api": 554, "preview": 554, "needless": [554, 563], "renam": [554, 562], "judgment": 554, "operator_nam": 554, "succinct": 554, "contstructor": 554, "docst": 554, "_default": 555, "_delimit": 555, "comfort": 555, "encount": [555, 564], "julia": [555, 585, 588], "new_fn": [555, 562], "new_arg": 555, "new_kwarg": 555, "186": 555, "lib": 555, "site": [555, 583], "_src": 555, "219": 555, "_reduce_al": 555, "_ensure_optional_ax": 555, "213": [555, 564], "_reduct": 555, "lax": [555, 562, 563, 566, 573, 576], "preproc": 555, "_cast_to_bool": 555, "pos_dim": 555, "_reduction_dim": 555, "113": 555, "canon_axi": 555, "_canonicalize_axis_allow_nam": 555, "genexpr": 555, "106": 555, "maybe_named_axi": 555, "_canonicalize_axi": 555, "stdin": 555, "295": 555, "262": 555, "ivy_arg": 555, "ivy_kwarg": 555, "354": 555, "truth_value_test": 555, "121": 555, "switch": [555, 558, 559, 589], "visibl": 555, "unwieldi": 555, "awar": 555, "recov": [555, 562], "squash": 555, "hid": 555, "cleaner": [555, 571], "caught": 555, "functool": [555, 562, 570], "_print_traceback_histori": 555, "error_stack": 555, "axiserror": 555, "got": 555, "polici": [555, 564, 575], "moreov": 555, "met": 555, "flake8": 556, "annot": [556, 557], "star": 556, "byte": [556, 587, 588], "unsuccess": 556, "exceed": 556, "black": 556, "disobei": 556, "inde": [556, 557, 566, 576, 580], "adress": 557, "sole": [557, 565, 581, 582, 583], "strictli": [557, 561], "rational": 557, "__div__": [557, 566], "dicat": 557, "pep": 557, "484": 557, "brittl": 557, "freeli": 557, "technic": [557, 561, 576, 582, 584], "original_typ": 557, "cumbersom": 557, "venn": 558, "diagram": [558, 588], "light": [558, 562, 576, 577, 583, 588], "maximis": 558, "handle_mixed_funct": [558, 559, 566], "condition": 558, "reap": 558, "deal": [558, 560, 562, 576], "modif": [558, 582], "briefli": [558, 564, 571], "get_all_arrays_on_dev": 558, "inputs_to_ivy_arrai": 559, "integer_array_to_float": 559, "handle_cmd_line_arg": 559, "crucial": 560, "inter_func": 560, "custom_grad_fn": 560, "args1": 560, "detach": 560, "disambigu": 560, "eas": [560, 582], "captur": [560, 564, 573, 583], "program": [561, 579, 580, 582, 585, 586, 589], "ration": [561, 566], "speak": 561, "val_n": 561, "_is_vari": 561, "predominantli": [561, 565, 575], "support_native_out": [561, 568], "math": [561, 562, 563, 573, 580], "_wrap_fn": 561, "dim0": 561, "dim1": 561, "res_floor": 561, "mul": [561, 570], "extent": [561, 562], "maxim": [561, 568, 579, 580, 584, 585, 586], "capabl": [561, 564, 566], "input_arrai": 561, "tf_frontend": 562, "wrong": [562, 566], "torch_frontend": [562, 563], "numpy_frontend": 562, "jax_frontend": 562, "to_ivy_arrays_and_back": [562, 563], "fidel": 562, "algebra": [562, 580, 581, 582, 585, 589], "xla": [562, 576, 577, 582], "dynamic": 562, "mimic": 562, "arithmetic_oper": 562, "handle_numpy_out": 562, "handle_numpy_dtyp": 562, "handle_numpy_cast": 562, "from_zero_dim_arrays_to_scalar": 562, "_add": 562, "same_kind": 562, "subok": [562, 563, 566], "promote_types_of_numpy_input": 562, "underscor": 562, "unhandl": 562, "trigonometric_funct": 562, "_tan": 562, "check_tensorflow_cast": 562, "raw_op": [562, 563], "tackl": 562, "map_raw_ops_alia": 562, "unnecessari": [562, 566], "output_typ": 562, "kwargs_to_upd": 562, "implemnt": 562, "pointwise_op": 562, "preferred_element_typ": 562, "finer": 562, "margin": 562, "meet": 562, "criteria": 562, "reduce_logsumexp": 562, "input_tensor": 562, "logsumexp": 562, "trick": 562, "max_input_tensor": 562, "omiss": 562, "sensibl": 562, "deem": 562, "reserv": 562, "resum": 562, "ahead": [562, 582], "heavi": [562, 563, 566, 583], "logicaland": 562, "np_frontend": 562, "_ivy_arrai": 562, "radd": 562, "_init_data": 562, "isinst": [562, 564, 565, 572, 573], "_process_str_data": 562, "_dtype": [562, 563, 570], "_shape": [562, 570], "govern": 562, "promote_types_of_": 562, "_input": 562, "promote_types_of_torch_input": [562, 563], "saniti": 562, "func_wrapp": 562, "handle_numpy_casting_speci": 562, "equiv": 562, "unsaf": 562, "array_type_test": 562, "_isfinit": 562, "organis": 562, "watch": 562, "youtub": 562, "jump": 563, "knowledg": 563, "lift": [563, 583], "get_dtyp": [563, 564], "dtype_and_valu": [563, 564], "get_shap": [563, 564], "np_frontend_help": 563, "test_jax": 563, "test_jax_lax_oper": 563, "dtype_and_x": [563, 564], "available_dtyp": [563, 564], "test_jax_lax_tan": 563, "test_numpi": 563, "test_mathematical_funct": 563, "test_np_trigonometric_funct": 563, "dtypes_values_cast": 563, "dtypes_values_casting_dtyp": 563, "arr_func": 563, "get_dtypes_kind": 563, "get_num_positional_args_ufunc": 563, "test_numpy_tan": 563, "handle_where_and_array_bool": 563, "test_tensorflow": 563, "test_math": 563, "test_tensorflow_tan": 563, "test_pointwise_op": 563, "test_torch_tan": 563, "_fill_valu": 563, "min_valu": [563, 564], "max_valu": [563, 564], "allow_non": [563, 564], "min_num_dim": [563, 564], "max_num_dim": [563, 564], "min_dim_s": [563, 564], "max_dim_s": 563, "test_jax_lax_ful": 563, "test_from_shape_or_valu": 563, "_input_fill_and_dtyp": 563, "dtype_and_input": 563, "dtype_to_cast": 563, "input_fill_dtyp": 563, "test_numpy_ful": 563, "test_tf_funct": 563, "test_tensorflow_fil": 563, "test_creation_op": 563, "test_torch_ful": 563, "add_nois": 563, "all_clos": 563, "_get_dtype_and_matrix": 563, "test_torch_qr": 563, "frontend_ret": 563, "frontend_q": 563, "frontend_r": 563, "walkthrough": 563, "comparison_op": 563, "test_comparison_op": 563, "num_arrai": [563, 564], "allow_inf": [563, 564], "shared_dtyp": 563, "test_torch_great": 563, "test_ndarrai": 563, "test_numpy_instance_add__": 563, "test_tensorflow_instance_add": 563, "eagertensor": 563, "1e04": 563, "allow_infin": 563, "test_torch_instance_add": 563, "_arrays_idx_n_dtyp": 563, "test_manipul": [563, 564], "surprisingli": 563, "closest_relevant_group": 563, "strive": [563, 564, 566, 576, 584], "exhaust": [564, 579, 588], "fixtur": 564, "eleg": [564, 582], "unexplor": 564, "upload": 564, "artifact": 564, "bespok": 564, "_array_or_typ": 564, "test_default_int_dtyp": 564, "clariti": [564, 566, 582], "print_hypothesis_exampl": 564, "custom_strategi": 564, "sampled_from": 564, "randomis": 564, "simplist": 564, "intricaci": 564, "glanc": 564, "stratigi": 564, "one_of": 564, "datum": 564, "pipe": 564, "overload": 564, "shorthand": 564, "scaler": 564, "array_or_scal": 564, "len_of_arrai": 564, "test_add": 564, "keywoard": 564, "test_gpu_is_avail": 564, "requri": 564, "summara": 564, "pretest": 564, "slighlti": 564, "pytet": 564, "thankfulli": 564, "mostli": 564, "seamlessli": 564, "criterion": 564, "array_valu": 564, "valid_ax": 564, "craft": 564, "hoc": 564, "44758124e": 564, "11228": 564, "456": 564, "268": 564, "wherev": 564, "dtype_values_axi": 564, "9622": 564, "28136": 564, "6375": 564, "12720": 564, "21354": 564, "900e": 564, "955e": 564, "exclude_min": 564, "large_abs_safety_factor": 564, "safety_factor_scal": 564, "57384": 564, "25687": 564, "248": 564, "array_dtyp": 564, "array_bool": 564, "na": 564, "test_devic": 564, "array_shap": 564, "common_shap": 564, "test_lay": 564, "size_bound": 564, "reshape_shap": 564, "stand": 564, "some_sequ": 564, "allow_nan": 564, "allow_subnorm": 564, "get_bound": 564, "arrays_valu": 564, "36418": 564, "21716926": 564, "none_or_list_of_float": 564, "get_prob": 564, "get_mean_std": 564, "103515625e": 564, "099609375": 564, "probabilist": 564, "get_axi": 564, "number_positional_argu": 564, "unreproduc": 564, "report": 564, "ivy_np": 564, "valid_float_dtyp": 564, "test_demo": 564, "failing_test": 564, "shrink": 564, "prescrib": 564, "scratch": 564, "therebi": 564, "test_gelu": 564, "test_fil": 564, "brief": 564, "phase": [564, 576, 582], "notabl": [564, 582], "verbos": [564, 568], "newer": 564, "max_exampl": 564, "deadlin": 564, "weird": 564, "systemat": 564, "safeguard": 564, "inabl": 564, "test_result_typ": 564, "9090909090909091": 564, "judgement": 565, "some_namespac": 565, "some_backend": 565, "another_backend": 565, "refactor": 565, "ongo": 565, "op": [565, 568, 576], "cooler": 565, "something_cool": 565, "_assert_fill_value_and_dtype_are_compat": 565, "_to_devic": 565, "older": 565, "unbound": 565, "battl": 565, "answer": [566, 570, 576], "contradict": 566, "entail": 566, "sacrif": 566, "dimems": 566, "jacfwd": 566, "jacrev": 566, "banner": 566, "ravel": 566, "pointwis": 566, "fuse": 566, "tensorrt": 566, "expens": 566, "incredibli": [566, 571, 576, 585], "six": 566, "price": 566, "pai": 566, "intrus": 566, "x_beta": 566, "equip": 566, "priorit": 566, "simplif": 566, "allevi": 566, "ineffici": [566, 576, 582], "hybrid": 566, "workaround": 566, "bicubic_tensorflow": 566, "fulfil": 567, "fledg": [568, 569], "syntact": [568, 573], "power_seq": 568, "unset": 568, "backend_stack": 568, "_determine_backend_from_arg": 568, "importlib": 568, "_backend_dict": 568, "illustr": [568, 575], "x_shape": 568, "x_flat": 568, "wi": 568, "wi_x": 568, "wii_x": 568, "wif_x": 568, "wig_x": 568, "wio_x": 568, "wh": 568, "ht": 568, "ct": 568, "hts_list": 568, "wii_xt": 568, "wif_xt": 568, "wig_xt": 568, "wio_xt": 568, "zip": 568, "htm1": 568, "ctm1": 568, "wh_htm1": 568, "whi_htm1": 568, "whf_htm1": 568, "whg_htm1": 568, "who_htm1": 568, "ft": 568, "ot": 568, "reliabl": 568, "sacrific": 568, "hear": 568, "virtu": [568, 579], "pure_ivi": 568, "compile_graph": [568, 573], "pure_torch": 568, "_layer": 568, "unclean": 568, "wx": 568, "temp": 568, "ivy_func": 568, "emphas": 568, "torchscript": [568, 577, 589], "example_input": 568, "primit": [569, 576, 580, 582], "upcom": 569, "hierarch": [569, 571, 572, 582], "arraywithactiv": 570, "arraywithcr": 570, "arraywithdatatyp": 570, "arraywithdevic": 570, "arraywithgener": 570, "arraywithgradi": 570, "arraywithimag": 570, "arraywithlay": 570, "arraywithlinearalgebra": 570, "arraywithloss": 570, "arraywithmanipul": 570, "arraywithnorm": 570, "arraywithrandom": 570, "arraywithsearch": 570, "arraywithset": 570, "arraywithsort": 570, "arraywithstatist": 570, "arraywithutil": 570, "_init": 570, "_size": 570, "_devic": 570, "_dev_str": 570, "_pre_repr": 570, "_post_repr": 570, "framework_str": 570, "noinspect": 570, "pypep8nam": 570, "immut": 570, "claim": 570, "truli": 570, "_native_wrapp": 570, "genuin": 570, "some_method": 570, "rewritten": 570, "strang": 570, "compartment": 570, "newshap": 570, "new_shap": 570, "tidi": 570, "crystal": 570, "ton": 571, "ado": [571, 572], "soup": 571, "walk": [571, 572], "cnt": 571, "combo": 571, "3333335": 571, "delimit": 571, "autocomplet": 571, "midwai": 571, "agent": 571, "total_spe": 571, "total_height": 571, "total_width": 571, "ag": 571, "tot": 571, "total_": 571, "total_h": 571, "cnt0": 571, "cnt1": 571, "diff_0": 571, "diff_1": 571, "config0": 571, "config1": 571, "decod": 571, "l0": 571, "decoder__l0": 571, "decoder__l1": 571, "encoder__l0": 571, "encoder__l1": 571, "l0__b": 571, "l0__w": 571, "l1__b": 571, "l1__w": 571, "printabl": 571, "obviou": [571, 582], "foresight": 571, "untidili": 571, "update_ag": 571, "normalize_img": 571, "img_max": 571, "reduce_max": 571, "img_min": 571, "reduce_min": 571, "img_rang": 571, "agent_posit": 571, "agent_veloc": 571, "agent_cam_front_rgb": 571, "agent_cam_front_depth": 571, "agent_cam_rear_rgb": 571, "agent_cam_rear_depth": 571, "agent_cam_lidar": 571, "camera": 571, "front_rgb": 571, "front_depth": 571, "rear_rgb": 571, "rear_depth": 571, "lidar": 571, "rgb": 571, "rear": 571, "veloc": 571, "cam": 571, "cam_max": 571, "cam_min": 571, "cam_rang": 571, "perman": 571, "thread": [571, 582], "pretti": [571, 588], "straightforward": 571, "dataload": [571, 574], "_cnt": 571, "img_": 571, "png": 571, "_dataset_s": 571, "_batch_siz": 571, "_count": [571, 572], "__next__": 571, "filenam": 571, "img_fnam": 571, "loaded_img": 571, "cv2": 571, "imread": 571, "from_numpi": 571, "batch_slic": 571, "reduce_mean": [571, 572, 573], "0145": 571, "addbackward0": 571, "_create_vari": 572, "_input_channel": 572, "_output_channel": 572, "_w_shape": 572, "_b_shape": 572, "_with_bia": 572, "396": 572, "764": 572, "872": 572, "211": 572, "439": 572, "nightmar": 572, "overcom": 572, "v0": 572, "v1": 572, "key0": 572, "linear3": 572, "v2": 572, "_w_init": 572, "_b_init": 572, "misnom": 572, "saw": 572, "_beta1": 572, "_beta2": 572, "_epsilon": 572, "_mw": 572, "_vw": 572, "_first_pass": 572, "_should_compil": 572, "new_v": 572, "_lr": 572, "_inplac": 572, "_stop_gradi": 572, "clip_by_valu": 573, "sparse_funct": 573, "new_axi": 573, "_linear": 573, "jax_graph": 573, "to_backend": 573, "thinli": 573, "to_haiku_modul": 573, "loss_fn_t": 573, "without_apply_rng": 573, "update_rul": 573, "tree_multimap": 573, "differenti": [575, 582], "pose": 575, "quaternion": 575, "ivy_mech": 575, "target_facing_rotation_matrix": 575, "polar_to_cartesian_coord": 575, "warp": 575, "optic": 575, "voxel": 575, "ivy_vis": 575, "coords_to_voxel_grid": 575, "render_pixel_coord": 575, "radianc": 575, "nerf": 575, "trajectori": 575, "motion": 575, "mobil": [575, 582], "sample_spline_path": 575, "rigidmobil": 575, "sample_bodi": 575, "drone": 575, "sample_link": 575, "openai": 575, "swimmer": 575, "reward": 575, "supervis": 575, "door": [575, 576], "cartpol": 575, "mountain_car": 575, "pendulum": 575, "reacher": 575, "learnt": 575, "ture": 575, "ntm": 575, "egospher": 575, "esm": 575, "ivy_memori": 575, "egocentr": 575, "room": 575, "doubt": 576, "grate": 576, "probe": 576, "remark": 576, "surpris": 576, "lock": 576, "gold": 576, "dex": 576, "ye": 576, "scan": 576, "tricki": [576, 577], "predictor": 576, "tight": 576, "driver": 576, "dispatch": [576, 582, 585], "ast": 576, "checkpoint": 576, "autodiff": 576, "shine": 576, "merci": 576, "autograd": 576, "compet": [576, 582], "paradigm": [576, 582], "parallelis": 576, "spmd": 576, "mixtur": 576, "expert": 576, "sophist": 576, "depart": 576, "hundr": 576, "thousand": 576, "broadli": [576, 588], "supplementari": 576, "reusabl": [576, 580, 582], "fanci": [576, 582], "fusion": [576, 586], "lose": 576, "pmap": 576, "eventu": 576, "supplement": 576, "backdoor": 576, "callback": 576, "record": [576, 583], "somewhat": [576, 582], "outsourc": 576, "nail": 577, "funtion": 577, "asset": 577, "scientist": 577, "correl": 577, "analyz": 577, "conceptu": [578, 583], "broken": [578, 582], "tracer": 578, "infrastructur": [578, 584, 585], "vendor": [578, 584], "complimentari": [578, 588], "acycl": [578, 583], "insert_numb": 579, "insert_t": 579, "scaffold": [580, 588], "heart": 580, "toolchain": [580, 585], "intermedi": [580, 581, 582, 583, 588], "ir": [580, 583, 588], "assembli": [580, 587, 588], "idl": 580, "middl": 580, "emit": 580, "gnu": [580, 585], "gcc": [580, 587], "broader": 580, "heterogen": 580, "aid": 580, "coprocessor": 580, "programm": [580, 587], "gate": 580, "onednn": 580, "sit": [580, 583, 588], "tandem": 580, "possess": 580, "khrono": [581, 587], "appl": 581, "interact": [581, 582, 587], "coremltool": 581, "albeit": 581, "promin": 582, "abbrevi": 582, "laboratori": 582, "proprietari": [582, 586, 587], "mathwork": 582, "commerci": 582, "1984": 582, "toolbox": 582, "mupad": 582, "simulink": 582, "graphic": [582, 586, 587], "simul": 582, "million": [582, 585], "worldwid": 582, "scienc": [582, 584], "econom": 582, "2001": 582, "scientif": 582, "od": 582, "solver": 582, "cython": 582, "friendli": 582, "2002": 582, "lua": 582, "luajit": 582, "idiap": 582, "epfl": 582, "2005": 582, "numarrai": 582, "cpython": 582, "partli": 582, "2007": 582, "regress": [582, 589], "forest": 582, "boost": 582, "dbscan": 582, "inbuilt": 582, "esqu": 582, "aesara": 582, "2008": 582, "datafram": 582, "critic": [582, 588], "2012": 582, "Its": 582, "polymorph": 582, "parallel": [582, 586, 587], "mpi": 582, "openmp": 582, "glue": 582, "jaot": 582, "nasa": 582, "cern": 582, "climat": 582, "allianc": 582, "influenti": 582, "2014": 582, "analyt": [582, 584, 588], "scala": 582, "ship": 582, "forgiv": 582, "decemb": 582, "announc": 582, "transit": 582, "mainten": 582, "v7": 582, "meaning": 582, "2016": 582, "imper": 582, "amazon": 582, "traction": 582, "cognit": [582, 589], "toolkit": [582, 583, 589], "grade": 582, "realiz": 582, "dnn": 582, "cnn": 582, "rnn": 582, "backpropag": 582, "succumb": 582, "came": 582, "monitor": 582, "practition": [582, 586, 587, 588], "hobbyist": 582, "tremend": 582, "ecosystem": 582, "gear": 582, "batteri": 582, "zygot": 582, "jl": 582, "workload": 582, "daggerflux": 582, "frontier": 582, "hessian": 582, "2018": 582, "lightweight": [582, 589], "shortcom": 582, "barrier": 582, "inexperienc": 582, "underdevelop": 582, "fanat": 582, "ounc": 582, "infanc": 582, "emerg": 582, "nich": 582, "introduct": 582, "lite": 582, "enterpris": 582, "reinvent": [582, 584], "inertia": 582, "haven": 582, "creator": [582, 584], "paszk": 582, "hi": 582, "safeti": 582, "bulk": 582, "haskel": 582, "dataflow": 583, "distil": 583, "essenc": [583, 588], "enclos": 583, "scope": [583, 587], "trace_modul": 583, "scriptfunct": 583, "scriptmodul": 583, "fake": 583, "proxi": 583, "graphmodul": 583, "travi": 584, "oliph": 584, "leader": 584, "cornerston": 584, "numba": 584, "numfocu": 584, "pydata": 584, "confer": 584, "consult": 584, "servic": 584, "expertis": 584, "devop": 584, "mlop": 584, "dashboard": 584, "startup": 584, "mlir": [584, 585, 588], "Their": 584, "held": 584, "privileg": 584, "presum": 584, "llvm": [584, 587], "founder": 584, "tvm": [584, 588], "sustain": 584, "empow": 584, "har": 584, "burden": 584, "benchmark": 584, "convention": 585, "precompil": 585, "executor": 585, "exploit": 585, "fsf": 585, "gpl": 585, "biggest": [585, 588], "nvidia": [586, 587], "conduct": 586, "throughput": 586, "autotun": 586, "consumpt": 586, "gpgpu": 586, "talk": 587, "classic": 587, "sycl": 587, "dpc": 587, "processor": 587, "maco": 587, "x86": 587, "oneapi": 587, "ia": 587, "aka": 587, "xeon": 587, "gen9": 587, "xe": 587, "card": 587, "arria": 587, "gx": 587, "fpga": 587, "tune": [587, 588], "lofti": 588, "ambit": 588, "realm": 588, "bedrock": 588, "flux": 588, "bite": 588, "chew": 588, "eagerpi": 588, "tensorli": 588, "thinc": 588, "neuropod": 588, "exhibit": 588, "emploi": 588, "fx": 588, "retrain": 588, "wider": 588, "closer": 588, "greatli": 588, "challeng": 588, "modular": 588, "anywher": 588, "theano": 589, "plaidml": 589, "partial_svd": 589, "tucker_mode_dot": 589, "excel": 589, "subsystem": 589}, "objects": {"ivy.Array": [[177, 0, 1, "", "abs"], [178, 0, 1, "", "acos"], [179, 0, 1, "", "acosh"], [345, 0, 1, "", "adam_step"], [346, 0, 1, "", "adam_update"], [180, 0, 1, "", "add"], [512, 0, 1, "", "all"], [250, 0, 1, "", "all_equal"], [513, 0, 1, "", "any"], [489, 0, 1, "", "argmax"], [490, 0, 1, "", "argmin"], [498, 0, 1, "", "argsort"], [491, 0, 1, "", "argwhere"], [253, 0, 1, "", "array_equal"], [77, 0, 1, "", "asarray"], [181, 0, 1, "", "asin"], [182, 0, 1, "", "asinh"], [254, 0, 1, "", "assert_supports_inplace"], [110, 0, 1, "", "astype"], [183, 0, 1, "", "atan"], [184, 0, 1, "", "atan2"], [185, 0, 1, "", "atanh"], [431, 0, 1, "", "binary_cross_entropy"], [186, 0, 1, "", "bitwise_and"], [187, 0, 1, "", "bitwise_invert"], [188, 0, 1, "", "bitwise_left_shift"], [189, 0, 1, "", "bitwise_or"], [190, 0, 1, "", "bitwise_right_shift"], [191, 0, 1, "", "bitwise_xor"], [111, 0, 1, "", "broadcast_arrays"], [112, 0, 1, "", "broadcast_to"], [113, 0, 1, "", "can_cast"], [192, 0, 1, "", "ceil"], [400, 0, 1, "", "cholesky"], [435, 0, 1, "", "clip"], [256, 0, 1, "", "clip_matrix_norm"], [257, 0, 1, "", "clip_vector_norm"], [436, 0, 1, "", "concat"], [437, 0, 1, "", "constant_pad"], [386, 0, 1, "", "conv1d"], [387, 0, 1, "", "conv1d_transpose"], [388, 0, 1, "", "conv2d"], [389, 0, 1, "", "conv2d_transpose"], [390, 0, 1, "", "conv3d"], [391, 0, 1, "", "conv3d_transpose"], [81, 0, 1, "", "copy_array"], [193, 0, 1, "", "cos"], [194, 0, 1, "", "cosh"], [401, 0, 1, "", "cross"], [432, 0, 1, "", "cross_entropy"], [502, 0, 1, "", "cumprod"], [503, 0, 1, "", "cumsum"], [260, 0, 1, "", "default"], [195, 0, 1, "", "deg2rad"], [394, 0, 1, "", "depthwise_conv2d"], [402, 0, 1, "", "det"], [157, 0, 1, "", "dev"], [403, 0, 1, "", "diag"], [404, 0, 1, "", "diagonal"], [196, 0, 1, "", "divide"], [395, 0, 1, "", "dropout"], [121, 0, 1, "", "dtype"], [405, 0, 1, "", "eig"], [406, 0, 1, "", "eigh"], [407, 0, 1, "", "eigvalsh"], [261, 0, 1, "", "einops_rearrange"], [262, 0, 1, "", "einops_reduce"], [263, 0, 1, "", "einops_repeat"], [504, 0, 1, "", "einsum"], [83, 0, 1, "", "empty_like"], [197, 0, 1, "", "equal"], [198, 0, 1, "", "erf"], [264, 0, 1, "", "exists"], [199, 0, 1, "", "exp"], [438, 0, 1, "", "expand_dims"], [200, 0, 1, "", "expm1"], [123, 0, 1, "", "finfo"], [439, 0, 1, "", "flip"], [201, 0, 1, "", "floor"], [202, 0, 1, "", "floor_divide"], [203, 0, 1, "", "fmod"], [265, 0, 1, "", "fourier_encode"], [85, 0, 1, "", "from_dlpack"], [87, 0, 1, "", "full_like"], [268, 0, 1, "", "gather"], [269, 0, 1, "", "gather_nd"], [61, 0, 1, "", "gelu"], [277, 0, 1, "", "get_num_dims"], [349, 0, 1, "", "gradient_descent_update"], [204, 0, 1, "", "greater"], [205, 0, 1, "", "greater_equal"], [282, 0, 1, "", "has_nans"], [126, 0, 1, "", "iinfo"], [408, 0, 1, "", "inner"], [284, 0, 1, "", "inplace_decrement"], [285, 0, 1, "", "inplace_increment"], [286, 0, 1, "", "inplace_update"], [409, 0, 1, "", "inv"], [288, 0, 1, "", "is_array"], [129, 0, 1, "", "is_bool_dtype"], [131, 0, 1, "", "is_float_dtype"], [132, 0, 1, "", "is_int_dtype"], [289, 0, 1, "", "is_ivy_array"], [290, 0, 1, "", "is_ivy_container"], [291, 0, 1, "", "is_native_array"], [134, 0, 1, "", "is_uint_dtype"], [206, 0, 1, "", "isfinite"], [292, 0, 1, "", "isin"], [207, 0, 1, "", "isinf"], [208, 0, 1, "", "isnan"], [209, 0, 1, "", "isreal"], [351, 0, 1, "", "lamb_update"], [352, 0, 1, "", "lars_update"], [478, 0, 1, "", "layer_norm"], [63, 0, 1, "", "leaky_relu"], [210, 0, 1, "", "less"], [211, 0, 1, "", "less_equal"], [396, 0, 1, "", "linear"], [88, 0, 1, "", "linspace"], [212, 0, 1, "", "log"], [213, 0, 1, "", "log10"], [214, 0, 1, "", "log1p"], [215, 0, 1, "", "log2"], [64, 0, 1, "", "log_softmax"], [216, 0, 1, "", "logaddexp"], [217, 0, 1, "", "logical_and"], [218, 0, 1, "", "logical_not"], [219, 0, 1, "", "logical_or"], [220, 0, 1, "", "logical_xor"], [89, 0, 1, "", "logspace"], [397, 0, 1, "", "lstm_update"], [411, 0, 1, "", "matmul"], [412, 0, 1, "", "matrix_norm"], [413, 0, 1, "", "matrix_power"], [414, 0, 1, "", "matrix_rank"], [415, 0, 1, "", "matrix_transpose"], [505, 0, 1, "", "max"], [221, 0, 1, "", "maximum"], [506, 0, 1, "", "mean"], [90, 0, 1, "", "meshgrid"], [507, 0, 1, "", "min"], [222, 0, 1, "", "minimum"], [65, 0, 1, "", "mish"], [398, 0, 1, "", "multi_head_attention"], [483, 0, 1, "", "multinomial"], [223, 0, 1, "", "multiply"], [91, 0, 1, "", "native_array"], [224, 0, 1, "", "negative"], [492, 0, 1, "", "nonzero"], [225, 0, 1, "", "not_equal"], [92, 0, 1, "", "one_hot"], [94, 0, 1, "", "ones_like"], [353, 0, 1, "", "optimizer_update"], [416, 0, 1, "", "outer"], [440, 0, 1, "", "permute_dims"], [417, 0, 1, "", "pinv"], [226, 0, 1, "", "positive"], [227, 0, 1, "", "pow"], [508, 0, 1, "", "prod"], [418, 0, 1, "", "qr"], [228, 0, 1, "", "rad2deg"], [484, 0, 1, "", "randint"], [485, 0, 1, "", "random_normal"], [486, 0, 1, "", "random_uniform"], [229, 0, 1, "", "reciprocal"], [66, 0, 1, "", "relu"], [230, 0, 1, "", "remainder"], [441, 0, 1, "", "repeat"], [442, 0, 1, "", "reshape"], [137, 0, 1, "", "result_type"], [443, 0, 1, "", "roll"], [231, 0, 1, "", "round"], [399, 0, 1, "", "scaled_dot_product_attention"], [298, 0, 1, "", "scatter_flat"], [299, 0, 1, "", "scatter_nd"], [499, 0, 1, "", "searchsorted"], [309, 0, 1, "", "shape"], [488, 0, 1, "", "shuffle"], [67, 0, 1, "", "sigmoid"], [232, 0, 1, "", "sign"], [233, 0, 1, "", "sin"], [234, 0, 1, "", "sinh"], [419, 0, 1, "", "slogdet"], [68, 0, 1, "", "softmax"], [69, 0, 1, "", "softplus"], [420, 0, 1, "", "solve"], [500, 0, 1, "", "sort"], [433, 0, 1, "", "sparse_cross_entropy"], [444, 0, 1, "", "split"], [235, 0, 1, "", "sqrt"], [236, 0, 1, "", "square"], [445, 0, 1, "", "squeeze"], [311, 0, 1, "", "stable_divide"], [312, 0, 1, "", "stable_pow"], [446, 0, 1, "", "stack"], [509, 0, 1, "", "std"], [355, 0, 1, "", "stop_gradient"], [237, 0, 1, "", "subtract"], [510, 0, 1, "", "sum"], [313, 0, 1, "", "supports_inplace_updates"], [421, 0, 1, "", "svd"], [422, 0, 1, "", "svdvals"], [447, 0, 1, "", "swapaxes"], [238, 0, 1, "", "tan"], [239, 0, 1, "", "tanh"], [423, 0, 1, "", "tensordot"], [424, 0, 1, "", "tensorsolve"], [448, 0, 1, "", "tile"], [172, 0, 1, "", "to_device"], [315, 0, 1, "", "to_list"], [317, 0, 1, "", "to_numpy"], [318, 0, 1, "", "to_scalar"], [425, 0, 1, "", "trace"], [95, 0, 1, "", "tril"], [96, 0, 1, "", "triu"], [240, 0, 1, "", "trunc"], [241, 0, 1, "", "trunc_divide"], [494, 0, 1, "", "unique_all"], [495, 0, 1, "", "unique_counts"], [496, 0, 1, "", "unique_inverse"], [497, 0, 1, "", "unique_values"], [449, 0, 1, "", "unstack"], [326, 0, 1, "", "value_is_nan"], [426, 0, 1, "", "vander"], [511, 0, 1, "", "var"], [427, 0, 1, "", "vecdot"], [428, 0, 1, "", "vector_norm"], [429, 0, 1, "", "vector_to_skew_symmetric_matrix"], [493, 0, 1, "", "where"], [450, 0, 1, "", "zero_pad"], [98, 0, 1, "", "zeros_like"]], "ivy.Container": [[177, 0, 1, "", "abs"], [178, 0, 1, "", "acos"], [179, 0, 1, "", "acosh"], [345, 0, 1, "", "adam_step"], [346, 0, 1, "", "adam_update"], [180, 0, 1, "", "add"], [512, 0, 1, "", "all"], [250, 0, 1, "", "all_equal"], [513, 0, 1, "", "any"], [489, 0, 1, "", "argmax"], [490, 0, 1, "", "argmin"], [498, 0, 1, "", "argsort"], [491, 0, 1, "", "argwhere"], [253, 0, 1, "", "array_equal"], [181, 0, 1, "", "asin"], [182, 0, 1, "", "asinh"], [254, 0, 1, "", "assert_supports_inplace"], [110, 0, 1, "", "astype"], [183, 0, 1, "", "atan"], [184, 0, 1, "", "atan2"], [185, 0, 1, "", "atanh"], [431, 0, 1, "", "binary_cross_entropy"], [186, 0, 1, "", "bitwise_and"], [187, 0, 1, "", "bitwise_invert"], [188, 0, 1, "", "bitwise_left_shift"], [189, 0, 1, "", "bitwise_or"], [190, 0, 1, "", "bitwise_right_shift"], [191, 0, 1, "", "bitwise_xor"], [111, 0, 1, "", "broadcast_arrays"], [112, 0, 1, "", "broadcast_to"], [113, 0, 1, "", "can_cast"], [192, 0, 1, "", "ceil"], [400, 0, 1, "", "cholesky"], [435, 0, 1, "", "clip"], [256, 0, 1, "", "clip_matrix_norm"], [257, 0, 1, "", "clip_vector_norm"], [436, 0, 1, "", "concat"], [437, 0, 1, "", "constant_pad"], [386, 0, 1, "", "conv1d"], [387, 0, 1, "", "conv1d_transpose"], [388, 0, 1, "", "conv2d"], [389, 0, 1, "", "conv2d_transpose"], [390, 0, 1, "", "conv3d"], [391, 0, 1, "", "conv3d_transpose"], [193, 0, 1, "", "cos"], [194, 0, 1, "", "cosh"], [401, 0, 1, "", "cross"], [432, 0, 1, "", "cross_entropy"], [502, 0, 1, "", "cumprod"], [503, 0, 1, "", "cumsum"], [195, 0, 1, "", "deg2rad"], [394, 0, 1, "", "depthwise_conv2d"], [402, 0, 1, "", "det"], [157, 0, 1, "", "dev"], [403, 0, 1, "", "diag"], [404, 0, 1, "", "diagonal"], [196, 0, 1, "", "divide"], [395, 0, 1, "", "dropout"], [121, 0, 1, "", "dtype"], [405, 0, 1, "", "eig"], [406, 0, 1, "", "eigh"], [407, 0, 1, "", "eigvalsh"], [261, 0, 1, "", "einops_rearrange"], [262, 0, 1, "", "einops_reduce"], [263, 0, 1, "", "einops_repeat"], [504, 0, 1, "", "einsum"], [83, 0, 1, "", "empty_like"], [197, 0, 1, "", "equal"], [198, 0, 1, "", "erf"], [199, 0, 1, "", "exp"], [438, 0, 1, "", "expand_dims"], [200, 0, 1, "", "expm1"], [123, 0, 1, "", "finfo"], [439, 0, 1, "", "flip"], [201, 0, 1, "", "floor"], [202, 0, 1, "", "floor_divide"], [203, 0, 1, "", "fmod"], [265, 0, 1, "", "fourier_encode"], [85, 0, 1, "", "from_dlpack"], [87, 0, 1, "", "full_like"], [268, 0, 1, "", "gather"], [269, 0, 1, "", "gather_nd"], [61, 0, 1, "", "gelu"], [62, 0, 1, "", "get"], [277, 0, 1, "", "get_num_dims"], [349, 0, 1, "", "gradient_descent_update"], [204, 0, 1, "", "greater"], [205, 0, 1, "", "greater_equal"], [282, 0, 1, "", "has_nans"], [126, 0, 1, "", "iinfo"], [408, 0, 1, "", "inner"], [284, 0, 1, "", "inplace_decrement"], [285, 0, 1, "", "inplace_increment"], [286, 0, 1, "", "inplace_update"], [409, 0, 1, "", "inv"], [288, 0, 1, "", "is_array"], [129, 0, 1, "", "is_bool_dtype"], [130, 0, 1, "", "is_complex_dtype"], [131, 0, 1, "", "is_float_dtype"], [132, 0, 1, "", "is_int_dtype"], [289, 0, 1, "", "is_ivy_array"], [291, 0, 1, "", "is_native_array"], [134, 0, 1, "", "is_uint_dtype"], [206, 0, 1, "", "isfinite"], [292, 0, 1, "", "isin"], [207, 0, 1, "", "isinf"], [208, 0, 1, "", "isnan"], [209, 0, 1, "", "isreal"], [351, 0, 1, "", "lamb_update"], [352, 0, 1, "", "lars_update"], [478, 0, 1, "", "layer_norm"], [63, 0, 1, "", "leaky_relu"], [210, 0, 1, "", "less"], [211, 0, 1, "", "less_equal"], [396, 0, 1, "", "linear"], [88, 0, 1, "", "linspace"], [212, 0, 1, "", "log"], [213, 0, 1, "", "log10"], [214, 0, 1, "", "log1p"], [215, 0, 1, "", "log2"], [64, 0, 1, "", "log_softmax"], [216, 0, 1, "", "logaddexp"], [217, 0, 1, "", "logical_and"], [218, 0, 1, "", "logical_not"], [219, 0, 1, "", "logical_or"], [220, 0, 1, "", "logical_xor"], [89, 0, 1, "", "logspace"], [397, 0, 1, "", "lstm_update"], [411, 0, 1, "", "matmul"], [412, 0, 1, "", "matrix_norm"], [413, 0, 1, "", "matrix_power"], [414, 0, 1, "", "matrix_rank"], [415, 0, 1, "", "matrix_transpose"], [505, 0, 1, "", "max"], [221, 0, 1, "", "maximum"], [506, 0, 1, "", "mean"], [90, 0, 1, "", "meshgrid"], [507, 0, 1, "", "min"], [222, 0, 1, "", "minimum"], [65, 0, 1, "", "mish"], [398, 0, 1, "", "multi_head_attention"], [483, 0, 1, "", "multinomial"], [223, 0, 1, "", "multiply"], [91, 0, 1, "", "native_array"], [224, 0, 1, "", "negative"], [492, 0, 1, "", "nonzero"], [225, 0, 1, "", "not_equal"], [92, 0, 1, "", "one_hot"], [94, 0, 1, "", "ones_like"], [353, 0, 1, "", "optimizer_update"], [416, 0, 1, "", "outer"], [440, 0, 1, "", "permute_dims"], [417, 0, 1, "", "pinv"], [226, 0, 1, "", "positive"], [227, 0, 1, "", "pow"], [508, 0, 1, "", "prod"], [418, 0, 1, "", "qr"], [228, 0, 1, "", "rad2deg"], [484, 0, 1, "", "randint"], [485, 0, 1, "", "random_normal"], [486, 0, 1, "", "random_uniform"], [229, 0, 1, "", "reciprocal"], [66, 0, 1, "", "relu"], [230, 0, 1, "", "remainder"], [441, 0, 1, "", "repeat"], [442, 0, 1, "", "reshape"], [137, 0, 1, "", "result_type"], [443, 0, 1, "", "roll"], [231, 0, 1, "", "round"], [399, 0, 1, "", "scaled_dot_product_attention"], [298, 0, 1, "", "scatter_flat"], [299, 0, 1, "", "scatter_nd"], [499, 0, 1, "", "searchsorted"], [488, 0, 1, "", "shuffle"], [67, 0, 1, "", "sigmoid"], [232, 0, 1, "", "sign"], [233, 0, 1, "", "sin"], [234, 0, 1, "", "sinh"], [419, 0, 1, "", "slogdet"], [68, 0, 1, "", "softmax"], [69, 0, 1, "", "softplus"], [420, 0, 1, "", "solve"], [500, 0, 1, "", "sort"], [433, 0, 1, "", "sparse_cross_entropy"], [444, 0, 1, "", "split"], [235, 0, 1, "", "sqrt"], [236, 0, 1, "", "square"], [445, 0, 1, "", "squeeze"], [311, 0, 1, "", "stable_divide"], [312, 0, 1, "", "stable_pow"], [446, 0, 1, "", "stack"], [509, 0, 1, "", "std"], [355, 0, 1, "", "stop_gradient"], [237, 0, 1, "", "subtract"], [510, 0, 1, "", "sum"], [313, 0, 1, "", "supports_inplace_updates"], [421, 0, 1, "", "svd"], [422, 0, 1, "", "svdvals"], [447, 0, 1, "", "swapaxes"], [238, 0, 1, "", "tan"], [239, 0, 1, "", "tanh"], [423, 0, 1, "", "tensordot"], [424, 0, 1, "", "tensorsolve"], [448, 0, 1, "", "tile"], [172, 0, 1, "", "to_device"], [315, 0, 1, "", "to_list"], [317, 0, 1, "", "to_numpy"], [318, 0, 1, "", "to_scalar"], [425, 0, 1, "", "trace"], [95, 0, 1, "", "tril"], [96, 0, 1, "", "triu"], [240, 0, 1, "", "trunc"], [241, 0, 1, "", "trunc_divide"], [494, 0, 1, "", "unique_all"], [495, 0, 1, "", "unique_counts"], [496, 0, 1, "", "unique_inverse"], [497, 0, 1, "", "unique_values"], [449, 0, 1, "", "unstack"], [326, 0, 1, "", "value_is_nan"], [426, 0, 1, "", "vander"], [511, 0, 1, "", "var"], [427, 0, 1, "", "vecdot"], [428, 0, 1, "", "vector_norm"], [429, 0, 1, "", "vector_to_skew_symmetric_matrix"], [493, 0, 1, "", "where"], [450, 0, 1, "", "zero_pad"], [98, 0, 1, "", "zeros_like"]], "ivy": [[70, 1, 1, "", "IfElse"], [71, 1, 1, "", "WhileLoop"], [177, 1, 1, "", "abs"], [178, 1, 1, "", "acos"], [179, 1, 1, "", "acosh"], [345, 1, 1, "", "adam_step"], [346, 1, 1, "", "adam_update"], [180, 1, 1, "", "add"], [512, 1, 1, "", "all"], [250, 1, 1, "", "all_equal"], [459, 1, 1, "", "all_nested_indices"], [513, 1, 1, "", "any"], [75, 1, 1, "", "arange"], [251, 1, 1, "", "arg_info"], [252, 1, 1, "", "arg_names"], [489, 1, 1, "", "argmax"], [490, 1, 1, "", "argmin"], [498, 1, 1, "", "argsort"], [491, 1, 1, "", "argwhere"], [76, 1, 1, "", "array"], [253, 1, 1, "", "array_equal"], [153, 1, 1, "", "as_ivy_dev"], [108, 1, 1, "", "as_ivy_dtype"], [154, 1, 1, "", "as_native_dev"], [109, 1, 1, "", "as_native_dtype"], [77, 1, 1, "", "asarray"], [78, 1, 1, "", "asarray_handle_nestable"], [79, 1, 1, "", "asarray_infer_device"], [80, 1, 1, "", "asarray_to_native_arrays_and_back"], [181, 1, 1, "", "asin"], [182, 1, 1, "", "asinh"], [254, 1, 1, "", "assert_supports_inplace"], [110, 1, 1, "", "astype"], [183, 1, 1, "", "atan"], [184, 1, 1, "", "atan2"], [185, 1, 1, "", "atanh"], [431, 1, 1, "", "binary_cross_entropy"], [186, 1, 1, "", "bitwise_and"], [187, 1, 1, "", "bitwise_invert"], [188, 1, 1, "", "bitwise_left_shift"], [189, 1, 1, "", "bitwise_or"], [190, 1, 1, "", "bitwise_right_shift"], [191, 1, 1, "", "bitwise_xor"], [111, 1, 1, "", "broadcast_arrays"], [112, 1, 1, "", "broadcast_to"], [255, 1, 1, "", "cache_fn"], [113, 1, 1, "", "can_cast"], [192, 1, 1, "", "ceil"], [114, 1, 1, "", "check_float"], [400, 1, 1, "", "cholesky"], [155, 1, 1, "", "clear_cached_mem_on_dev"], [435, 1, 1, "", "clip"], [256, 1, 1, "", "clip_matrix_norm"], [257, 1, 1, "", "clip_vector_norm"], [115, 1, 1, "", "closest_valid_dtype"], [0, 1, 1, "", "compile"], [436, 1, 1, "", "concat"], [437, 1, 1, "", "constant_pad"], [258, 1, 1, "", "container_types"], [385, 1, 1, "", "conv"], [386, 1, 1, "", "conv1d"], [387, 1, 1, "", "conv1d_transpose"], [388, 1, 1, "", "conv2d"], [389, 1, 1, "", "conv2d_transpose"], [390, 1, 1, "", "conv3d"], [391, 1, 1, "", "conv3d_transpose"], [392, 1, 1, "", "conv_general_dilated"], [393, 1, 1, "", "conv_general_transpose"], [81, 1, 1, "", "copy_array"], [460, 1, 1, "", "copy_nest"], [193, 1, 1, "", "cos"], [194, 1, 1, "", "cosh"], [401, 1, 1, "", "cross"], [432, 1, 1, "", "cross_entropy"], [502, 1, 1, "", "cumprod"], [503, 1, 1, "", "cumsum"], [259, 1, 1, "", "current_backend_str"], [260, 1, 1, "", "default"], [116, 1, 1, "", "default_complex_dtype"], [156, 1, 1, "", "default_device"], [117, 1, 1, "", "default_dtype"], [118, 1, 1, "", "default_float_dtype"], [119, 1, 1, "", "default_int_dtype"], [120, 1, 1, "", "default_uint_dtype"], [195, 1, 1, "", "deg2rad"], [394, 1, 1, "", "depthwise_conv2d"], [60, 1, 1, "", "deserialize"], [402, 1, 1, "", "det"], [157, 1, 1, "", "dev"], [158, 1, 1, "", "dev_util"], [403, 1, 1, "", "diag"], [404, 1, 1, "", "diagonal"], [196, 1, 1, "", "divide"], [395, 1, 1, "", "dropout"], [121, 1, 1, "", "dtype"], [122, 1, 1, "", "dtype_bits"], [461, 1, 1, "", "duplicate_array_index_chains"], [405, 1, 1, "", "eig"], [406, 1, 1, "", "eigh"], [407, 1, 1, "", "eigvalsh"], [261, 1, 1, "", "einops_rearrange"], [262, 1, 1, "", "einops_reduce"], [263, 1, 1, "", "einops_repeat"], [504, 1, 1, "", "einsum"], [82, 1, 1, "", "empty"], [83, 1, 1, "", "empty_like"], [197, 1, 1, "", "equal"], [198, 1, 1, "", "erf"], [347, 1, 1, "", "execute_with_gradients"], [264, 1, 1, "", "exists"], [199, 1, 1, "", "exp"], [438, 1, 1, "", "expand_dims"], [200, 1, 1, "", "expm1"], [84, 1, 1, "", "eye"], [123, 1, 1, "", "finfo"], [439, 1, 1, "", "flip"], [201, 1, 1, "", "floor"], [202, 1, 1, "", "floor_divide"], [203, 1, 1, "", "fmod"], [456, 1, 1, "", "fomaml_step"], [265, 1, 1, "", "fourier_encode"], [85, 1, 1, "", "from_dlpack"], [86, 1, 1, "", "full"], [87, 1, 1, "", "full_like"], [159, 1, 1, "", "function_supported_devices"], [266, 1, 1, "", "function_supported_devices_and_dtypes"], [124, 1, 1, "", "function_supported_dtypes"], [160, 1, 1, "", "function_unsupported_devices"], [267, 1, 1, "", "function_unsupported_devices_and_dtypes"], [125, 1, 1, "", "function_unsupported_dtypes"], [268, 1, 1, "", "gather"], [269, 1, 1, "", "gather_nd"], [61, 1, 1, "", "gelu"], [62, 1, 1, "", "get"], [270, 1, 1, "", "get_all_arrays_in_memory"], [161, 1, 1, "", "get_all_ivy_arrays_on_dev"], [271, 1, 1, "", "get_array_mode"], [272, 1, 1, "", "get_exception_trace_mode"], [273, 1, 1, "", "get_item"], [274, 1, 1, "", "get_min_base"], [275, 1, 1, "", "get_min_denominator"], [276, 1, 1, "", "get_nestable_mode"], [277, 1, 1, "", "get_num_dims"], [278, 1, 1, "", "get_queue_timeout"], [279, 1, 1, "", "get_referrers_recursive"], [280, 1, 1, "", "get_show_func_wrapper_trace_mode"], [281, 1, 1, "", "get_tmp_dir"], [162, 1, 1, "", "gpu_is_available"], [348, 1, 1, "", "grad"], [349, 1, 1, "", "gradient_descent_update"], [204, 1, 1, "", "greater"], [205, 1, 1, "", "greater_equal"], [282, 1, 1, "", "has_nans"], [72, 1, 1, "", "if_else"], [126, 1, 1, "", "iinfo"], [462, 1, 1, "", "index_nest"], [127, 1, 1, "", "infer_default_dtype"], [408, 1, 1, "", "inner"], [283, 1, 1, "", "inplace_arrays_supported"], [284, 1, 1, "", "inplace_decrement"], [285, 1, 1, "", "inplace_increment"], [286, 1, 1, "", "inplace_update"], [287, 1, 1, "", "inplace_variables_supported"], [463, 1, 1, "", "insert_into_nest_at_index"], [464, 1, 1, "", "insert_into_nest_at_indices"], [409, 1, 1, "", "inv"], [128, 1, 1, "", "invalid_dtype"], [288, 1, 1, "", "is_array"], [129, 1, 1, "", "is_bool_dtype"], [130, 1, 1, "", "is_complex_dtype"], [131, 1, 1, "", "is_float_dtype"], [132, 1, 1, "", "is_int_dtype"], [289, 1, 1, "", "is_ivy_array"], [290, 1, 1, "", "is_ivy_container"], [291, 1, 1, "", "is_native_array"], [133, 1, 1, "", "is_native_dtype"], [134, 1, 1, "", "is_uint_dtype"], [206, 1, 1, "", "isfinite"], [292, 1, 1, "", "isin"], [207, 1, 1, "", "isinf"], [208, 1, 1, "", "isnan"], [209, 1, 1, "", "isreal"], [293, 1, 1, "", "isscalar"], [350, 1, 1, "", "jac"], [351, 1, 1, "", "lamb_update"], [352, 1, 1, "", "lars_update"], [478, 1, 1, "", "layer_norm"], [63, 1, 1, "", "leaky_relu"], [210, 1, 1, "", "less"], [211, 1, 1, "", "less_equal"], [396, 1, 1, "", "linear"], [88, 1, 1, "", "linspace"], [212, 1, 1, "", "log"], [213, 1, 1, "", "log10"], [214, 1, 1, "", "log1p"], [215, 1, 1, "", "log2"], [64, 1, 1, "", "log_softmax"], [216, 1, 1, "", "logaddexp"], [217, 1, 1, "", "logical_and"], [218, 1, 1, "", "logical_not"], [219, 1, 1, "", "logical_or"], [220, 1, 1, "", "logical_xor"], [89, 1, 1, "", "logspace"], [397, 1, 1, "", "lstm_update"], [410, 1, 1, "", "lu_factor"], [457, 1, 1, "", "maml_step"], [465, 1, 1, "", "map"], [466, 1, 1, "", "map_nest_at_index"], [467, 1, 1, "", "map_nest_at_indices"], [294, 1, 1, "", "match_kwargs"], [411, 1, 1, "", "matmul"], [412, 1, 1, "", "matrix_norm"], [413, 1, 1, "", "matrix_power"], [414, 1, 1, "", "matrix_rank"], [415, 1, 1, "", "matrix_transpose"], [505, 1, 1, "", "max"], [221, 1, 1, "", "maximum"], [506, 1, 1, "", "mean"], [90, 1, 1, "", "meshgrid"], [507, 1, 1, "", "min"], [222, 1, 1, "", "minimum"], [65, 1, 1, "", "mish"], [398, 1, 1, "", "multi_head_attention"], [468, 1, 1, "", "multi_index_nest"], [483, 1, 1, "", "multinomial"], [223, 1, 1, "", "multiply"], [295, 1, 1, "", "multiprocessing"], [91, 1, 1, "", "native_array"], [224, 1, 1, "", "negative"], [469, 1, 1, "", "nested_any"], [470, 1, 1, "", "nested_argwhere"], [471, 1, 1, "", "nested_map"], [472, 1, 1, "", "nested_multi_map"], [492, 1, 1, "", "nonzero"], [225, 1, 1, "", "not_equal"], [296, 1, 1, "", "num_arrays_in_memory"], [163, 1, 1, "", "num_cpu_cores"], [164, 1, 1, "", "num_gpus"], [165, 1, 1, "", "num_ivy_arrays_on_dev"], [92, 1, 1, "", "one_hot"], [93, 1, 1, "", "ones"], [94, 1, 1, "", "ones_like"], [353, 1, 1, "", "optimizer_update"], [416, 1, 1, "", "outer"], [166, 1, 1, "", "percent_used_mem_on_dev"], [440, 1, 1, "", "permute_dims"], [417, 1, 1, "", "pinv"], [226, 1, 1, "", "positive"], [227, 1, 1, "", "pow"], [297, 1, 1, "", "print_all_arrays_in_memory"], [167, 1, 1, "", "print_all_ivy_arrays_on_dev"], [508, 1, 1, "", "prod"], [135, 1, 1, "", "promote_types"], [136, 1, 1, "", "promote_types_of_inputs"], [473, 1, 1, "", "prune_empty"], [474, 1, 1, "", "prune_nest_at_index"], [475, 1, 1, "", "prune_nest_at_indices"], [418, 1, 1, "", "qr"], [228, 1, 1, "", "rad2deg"], [484, 1, 1, "", "randint"], [485, 1, 1, "", "random_normal"], [486, 1, 1, "", "random_uniform"], [229, 1, 1, "", "reciprocal"], [66, 1, 1, "", "relu"], [230, 1, 1, "", "remainder"], [441, 1, 1, "", "repeat"], [458, 1, 1, "", "reptile_step"], [442, 1, 1, "", "reshape"], [137, 1, 1, "", "result_type"], [443, 1, 1, "", "roll"], [231, 1, 1, "", "round"], [399, 1, 1, "", "scaled_dot_product_attention"], [298, 1, 1, "", "scatter_flat"], [299, 1, 1, "", "scatter_nd"], [499, 1, 1, "", "searchsorted"], [487, 1, 1, "", "seed"], [300, 1, 1, "", "set_array_mode"], [138, 1, 1, "", "set_default_complex_dtype"], [168, 1, 1, "", "set_default_device"], [139, 1, 1, "", "set_default_dtype"], [140, 1, 1, "", "set_default_float_dtype"], [141, 1, 1, "", "set_default_int_dtype"], [142, 1, 1, "", "set_default_uint_dtype"], [301, 1, 1, "", "set_exception_trace_mode"], [302, 1, 1, "", "set_min_base"], [303, 1, 1, "", "set_min_denominator"], [476, 1, 1, "", "set_nest_at_index"], [477, 1, 1, "", "set_nest_at_indices"], [304, 1, 1, "", "set_nestable_mode"], [305, 1, 1, "", "set_queue_timeout"], [306, 1, 1, "", "set_shape_array_mode"], [307, 1, 1, "", "set_show_func_wrapper_trace_mode"], [169, 1, 1, "", "set_split_factor"], [308, 1, 1, "", "set_tmp_dir"], [354, 1, 1, "", "set_with_grads"], [309, 1, 1, "", "shape"], [310, 1, 1, "", "shape_array_mode"], [488, 1, 1, "", "shuffle"], [67, 1, 1, "", "sigmoid"], [232, 1, 1, "", "sign"], [233, 1, 1, "", "sin"], [234, 1, 1, "", "sinh"], [419, 1, 1, "", "slogdet"], [68, 1, 1, "", "softmax"], [69, 1, 1, "", "softplus"], [420, 1, 1, "", "solve"], [500, 1, 1, "", "sort"], [433, 1, 1, "", "sparse_cross_entropy"], [444, 1, 1, "", "split"], [170, 1, 1, "", "split_factor"], [171, 1, 1, "", "split_func_call"], [235, 1, 1, "", "sqrt"], [236, 1, 1, "", "square"], [445, 1, 1, "", "squeeze"], [311, 1, 1, "", "stable_divide"], [312, 1, 1, "", "stable_pow"], [446, 1, 1, "", "stack"], [509, 1, 1, "", "std"], [355, 1, 1, "", "stop_gradient"], [237, 1, 1, "", "subtract"], [510, 1, 1, "", "sum"], [313, 1, 1, "", "supports_inplace_updates"], [421, 1, 1, "", "svd"], [422, 1, 1, "", "svdvals"], [447, 1, 1, "", "swapaxes"], [238, 1, 1, "", "tan"], [239, 1, 1, "", "tanh"], [423, 1, 1, "", "tensordot"], [424, 1, 1, "", "tensorsolve"], [448, 1, 1, "", "tile"], [172, 1, 1, "", "to_device"], [314, 1, 1, "", "to_ivy_shape"], [315, 1, 1, "", "to_list"], [316, 1, 1, "", "to_native_shape"], [317, 1, 1, "", "to_numpy"], [318, 1, 1, "", "to_scalar"], [173, 1, 1, "", "total_mem_on_dev"], [174, 1, 1, "", "tpu_is_available"], [425, 1, 1, "", "trace"], [1, 1, 1, "", "transpile"], [95, 1, 1, "", "tril"], [96, 1, 1, "", "triu"], [240, 1, 1, "", "trunc"], [241, 1, 1, "", "trunc_divide"], [319, 1, 1, "", "try_else_none"], [143, 1, 1, "", "type_promote_arrays"], [1, 1, 1, "", "unify"], [494, 1, 1, "", "unique_all"], [495, 1, 1, "", "unique_counts"], [496, 1, 1, "", "unique_inverse"], [497, 1, 1, "", "unique_values"], [320, 1, 1, "", "unset_array_mode"], [144, 1, 1, "", "unset_default_complex_dtype"], [175, 1, 1, "", "unset_default_device"], [145, 1, 1, "", "unset_default_dtype"], [146, 1, 1, "", "unset_default_float_dtype"], [147, 1, 1, "", "unset_default_int_dtype"], [148, 1, 1, "", "unset_default_uint_dtype"], [321, 1, 1, "", "unset_exception_trace_mode"], [322, 1, 1, "", "unset_nestable_mode"], [323, 1, 1, "", "unset_queue_timeout"], [324, 1, 1, "", "unset_shape_array_mode"], [325, 1, 1, "", "unset_show_func_wrapper_trace_mode"], [356, 1, 1, "", "unset_with_grads"], [449, 1, 1, "", "unstack"], [176, 1, 1, "", "used_mem_on_dev"], [149, 1, 1, "", "valid_dtype"], [357, 1, 1, "", "value_and_grad"], [326, 1, 1, "", "value_is_nan"], [426, 1, 1, "", "vander"], [511, 1, 1, "", "var"], [427, 1, 1, "", "vecdot"], [428, 1, 1, "", "vector_norm"], [429, 1, 1, "", "vector_to_skew_symmetric_matrix"], [327, 1, 1, "", "vmap"], [493, 1, 1, "", "where"], [73, 1, 1, "", "while_loop"], [358, 1, 1, "", "with_grads"], [450, 1, 1, "", "zero_pad"], [97, 1, 1, "", "zeros"], [98, 1, 1, "", "zeros_like"]], "ivy.data_classes.array": [[2, 2, 0, "-", "activations"], [47, 2, 0, "-", "array"], [3, 2, 0, "-", "conversions"], [4, 2, 0, "-", "creation"], [5, 2, 0, "-", "data_type"], [6, 2, 0, "-", "device"], [7, 2, 0, "-", "elementwise"], [8, 2, 0, "-", "experimental"], [9, 2, 0, "-", "general"], [10, 2, 0, "-", "gradients"], [11, 2, 0, "-", "image"], [12, 2, 0, "-", "layers"], [13, 2, 0, "-", "linear_algebra"], [14, 2, 0, "-", "losses"], [15, 2, 0, "-", "manipulation"], [16, 2, 0, "-", "norms"], [17, 2, 0, "-", "random"], [18, 2, 0, "-", "searching"], [19, 2, 0, "-", "set"], [20, 2, 0, "-", "sorting"], [21, 2, 0, "-", "statistical"], [22, 2, 0, "-", "utility"], [23, 2, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[2, 3, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[2, 4, 1, "", "_abc_impl"], [2, 0, 1, "", "gelu"], [2, 0, 1, "", "leaky_relu"], [2, 0, 1, "", "log_softmax"], [2, 0, 1, "", "mish"], [2, 0, 1, "", "relu"], [2, 0, 1, "", "sigmoid"], [2, 0, 1, "", "softmax"], [2, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[47, 3, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[47, 5, 1, "", "T"], [47, 0, 1, "", "__abs__"], [47, 0, 1, "", "__add__"], [47, 0, 1, "", "__eq__"], [47, 0, 1, "", "__ge__"], [47, 0, 1, "", "__gt__"], [47, 0, 1, "", "__init__"], [47, 0, 1, "", "__le__"], [47, 0, 1, "", "__lt__"], [47, 0, 1, "", "__ne__"], [47, 0, 1, "", "__pow__"], [47, 0, 1, "", "__radd__"], [47, 0, 1, "", "__rrshift__"], [47, 0, 1, "", "__rshift__"], [47, 0, 1, "", "__rsub__"], [47, 0, 1, "", "__sub__"], [47, 0, 1, "", "__truediv__"], [47, 0, 1, "", "__xor__"], [47, 5, 1, "", "data"], [47, 5, 1, "", "device"], [47, 5, 1, "", "dtype"], [47, 5, 1, "", "dynamic_backend"], [47, 5, 1, "", "mT"], [47, 5, 1, "", "ndim"], [47, 5, 1, "", "shape"], [47, 5, 1, "", "size"]], "ivy.data_classes.array.conversions": [[3, 1, 1, "", "_to_ivy"], [3, 1, 1, "", "_to_native"], [3, 1, 1, "", "args_to_ivy"], [3, 1, 1, "", "args_to_native"], [3, 1, 1, "", "to_ivy"], [3, 1, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[4, 3, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[4, 4, 1, "", "_abc_impl"], [4, 0, 1, "", "asarray"], [4, 0, 1, "", "copy_array"], [4, 0, 1, "", "empty_like"], [4, 0, 1, "", "from_dlpack"], [4, 0, 1, "", "full_like"], [4, 0, 1, "", "linspace"], [4, 0, 1, "", "logspace"], [4, 0, 1, "", "meshgrid"], [4, 0, 1, "", "native_array"], [4, 0, 1, "", "one_hot"], [4, 0, 1, "", "ones_like"], [4, 0, 1, "", "tril"], [4, 0, 1, "", "triu"], [4, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[5, 3, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "astype"], [5, 0, 1, "", "broadcast_arrays"], [5, 0, 1, "", "broadcast_to"], [5, 0, 1, "", "can_cast"], [5, 0, 1, "", "dtype"], [5, 0, 1, "", "finfo"], [5, 0, 1, "", "iinfo"], [5, 0, 1, "", "is_bool_dtype"], [5, 0, 1, "", "is_float_dtype"], [5, 0, 1, "", "is_int_dtype"], [5, 0, 1, "", "is_uint_dtype"], [5, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[6, 3, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "dev"], [6, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[7, 3, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "abs"], [7, 0, 1, "", "acos"], [7, 0, 1, "", "acosh"], [7, 0, 1, "", "add"], [7, 0, 1, "", "asin"], [7, 0, 1, "", "asinh"], [7, 0, 1, "", "atan"], [7, 0, 1, "", "atan2"], [7, 0, 1, "", "atanh"], [7, 0, 1, "", "bitwise_and"], [7, 0, 1, "", "bitwise_invert"], [7, 0, 1, "", "bitwise_left_shift"], [7, 0, 1, "", "bitwise_or"], [7, 0, 1, "", "bitwise_right_shift"], [7, 0, 1, "", "bitwise_xor"], [7, 0, 1, "", "ceil"], [7, 0, 1, "", "cos"], [7, 0, 1, "", "cosh"], [7, 0, 1, "", "deg2rad"], [7, 0, 1, "", "divide"], [7, 0, 1, "", "equal"], [7, 0, 1, "", "erf"], [7, 0, 1, "", "exp"], [7, 0, 1, "", "expm1"], [7, 0, 1, "", "floor"], [7, 0, 1, "", "floor_divide"], [7, 0, 1, "", "greater"], [7, 0, 1, "", "greater_equal"], [7, 0, 1, "", "isfinite"], [7, 0, 1, "", "isinf"], [7, 0, 1, "", "isnan"], [7, 0, 1, "", "isreal"], [7, 0, 1, "", "less"], [7, 0, 1, "", "less_equal"], [7, 0, 1, "", "log"], [7, 0, 1, "", "log10"], [7, 0, 1, "", "log1p"], [7, 0, 1, "", "log2"], [7, 0, 1, "", "logaddexp"], [7, 0, 1, "", "logical_and"], [7, 0, 1, "", "logical_not"], [7, 0, 1, "", "logical_or"], [7, 0, 1, "", "logical_xor"], [7, 0, 1, "", "maximum"], [7, 0, 1, "", "minimum"], [7, 0, 1, "", "multiply"], [7, 0, 1, "", "negative"], [7, 0, 1, "", "not_equal"], [7, 0, 1, "", "positive"], [7, 0, 1, "", "pow"], [7, 0, 1, "", "rad2deg"], [7, 0, 1, "", "reciprocal"], [7, 0, 1, "", "remainder"], [7, 0, 1, "", "round"], [7, 0, 1, "", "sign"], [7, 0, 1, "", "sin"], [7, 0, 1, "", "sinh"], [7, 0, 1, "", "sqrt"], [7, 0, 1, "", "square"], [7, 0, 1, "", "subtract"], [7, 0, 1, "", "tan"], [7, 0, 1, "", "tanh"], [7, 0, 1, "", "trunc"], [7, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[8, 2, 0, "-", "activations"], [8, 2, 0, "-", "conversions"], [8, 2, 0, "-", "creation"], [8, 2, 0, "-", "data_type"], [8, 2, 0, "-", "device"], [8, 2, 0, "-", "elementwise"], [8, 2, 0, "-", "general"], [8, 2, 0, "-", "gradients"], [8, 2, 0, "-", "image"], [8, 2, 0, "-", "layers"], [8, 2, 0, "-", "linear_algebra"], [8, 2, 0, "-", "losses"], [8, 2, 0, "-", "manipulation"], [8, 2, 0, "-", "norms"], [8, 2, 0, "-", "random"], [8, 2, 0, "-", "searching"], [8, 2, 0, "-", "set"], [8, 2, 0, "-", "sorting"], [8, 2, 0, "-", "statistical"], [8, 2, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[8, 3, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "batch_norm"], [8, 0, 1, "", "logit"], [8, 0, 1, "", "logsigmoid"], [8, 0, 1, "", "prelu"], [8, 0, 1, "", "relu6"], [8, 0, 1, "", "selu"], [8, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[8, 3, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[8, 3, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "eye_like"]], "ivy.data_classes.array.experimental.data_type": [[8, 3, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[8, 3, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[8, 3, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "allclose"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "binarizer"], [8, 0, 1, "", "conj"], [8, 0, 1, "", "copysign"], [8, 0, 1, "", "count_nonzero"], [8, 0, 1, "", "diff"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "fix"], [8, 0, 1, "", "float_power"], [8, 0, 1, "", "fmax"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "fmod"], [8, 0, 1, "", "frexp"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "gradient"], [8, 0, 1, "", "hypot"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isclose"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "ldexp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "nansum"], [8, 0, 1, "", "nextafter"], [8, 0, 1, "", "real"], [8, 0, 1, "", "signbit"], [8, 0, 1, "", "sinc"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "xlogy"], [8, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[8, 3, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "isin"]], "ivy.data_classes.array.experimental.gradients": [[8, 3, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[8, 3, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[8, 3, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adaptive_avg_pool1d"], [8, 0, 1, "", "adaptive_avg_pool2d"], [8, 0, 1, "", "avg_pool1d"], [8, 0, 1, "", "avg_pool2d"], [8, 0, 1, "", "avg_pool3d"], [8, 0, 1, "", "dct"], [8, 0, 1, "", "dft"], [8, 0, 1, "", "embedding"], [8, 0, 1, "", "fft"], [8, 0, 1, "", "ifft"], [8, 0, 1, "", "interpolate"], [8, 0, 1, "", "max_pool1d"], [8, 0, 1, "", "max_pool2d"], [8, 0, 1, "", "max_pool3d"]], "ivy.data_classes.array.experimental.linear_algebra": [[8, 3, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "adjoint"], [8, 0, 1, "", "cond"], [8, 0, 1, "", "diagflat"], [8, 0, 1, "", "eig"], [8, 0, 1, "", "eigh_tridiagonal"], [8, 0, 1, "", "eigvals"], [8, 0, 1, "", "kron"], [8, 0, 1, "", "matrix_exp"], [8, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[8, 3, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[8, 3, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "atleast_1d"], [8, 0, 1, "", "atleast_2d"], [8, 0, 1, "", "atleast_3d"], [8, 0, 1, "", "dsplit"], [8, 0, 1, "", "dstack"], [8, 0, 1, "", "expand"], [8, 0, 1, "", "flatten"], [8, 0, 1, "", "fliplr"], [8, 0, 1, "", "flipud"], [8, 0, 1, "", "heaviside"], [8, 0, 1, "", "hsplit"], [8, 0, 1, "", "hstack"], [8, 0, 1, "", "i0"], [8, 0, 1, "", "moveaxis"], [8, 0, 1, "", "pad"], [8, 0, 1, "", "rot90"], [8, 0, 1, "", "take_along_axis"], [8, 0, 1, "", "top_k"], [8, 0, 1, "", "vsplit"], [8, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[8, 3, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "instance_norm"], [8, 0, 1, "", "l2_normalize"], [8, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[8, 3, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "bernoulli"], [8, 0, 1, "", "beta"], [8, 0, 1, "", "dirichlet"], [8, 0, 1, "", "gamma"], [8, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[8, 3, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[8, 3, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[8, 3, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "lexsort"], [8, 0, 1, "", "msort"]], "ivy.data_classes.array.experimental.statistical": [[8, 3, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "bincount"], [8, 0, 1, "", "corrcoef"], [8, 0, 1, "", "median"], [8, 0, 1, "", "nanmean"], [8, 0, 1, "", "nanmedian"], [8, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[8, 3, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[8, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[9, 3, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "all_equal"], [9, 0, 1, "", "array_equal"], [9, 0, 1, "", "assert_supports_inplace"], [9, 0, 1, "", "clip_matrix_norm"], [9, 0, 1, "", "clip_vector_norm"], [9, 0, 1, "", "default"], [9, 0, 1, "", "einops_rearrange"], [9, 0, 1, "", "einops_reduce"], [9, 0, 1, "", "einops_repeat"], [9, 0, 1, "", "exists"], [9, 0, 1, "", "fourier_encode"], [9, 0, 1, "", "gather"], [9, 0, 1, "", "gather_nd"], [9, 0, 1, "", "get_num_dims"], [9, 0, 1, "", "has_nans"], [9, 0, 1, "", "inplace_decrement"], [9, 0, 1, "", "inplace_increment"], [9, 0, 1, "", "inplace_update"], [9, 0, 1, "", "is_array"], [9, 0, 1, "", "is_ivy_array"], [9, 0, 1, "", "is_ivy_container"], [9, 0, 1, "", "is_native_array"], [9, 0, 1, "", "scatter_flat"], [9, 0, 1, "", "scatter_nd"], [9, 0, 1, "", "stable_divide"], [9, 0, 1, "", "stable_pow"], [9, 0, 1, "", "supports_inplace_updates"], [9, 0, 1, "", "to_list"], [9, 0, 1, "", "to_numpy"], [9, 0, 1, "", "to_scalar"], [9, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[10, 3, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "adam_step"], [10, 0, 1, "", "adam_update"], [10, 0, 1, "", "gradient_descent_update"], [10, 0, 1, "", "lamb_update"], [10, 0, 1, "", "lars_update"], [10, 0, 1, "", "optimizer_update"], [10, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[11, 3, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[11, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[12, 3, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[12, 4, 1, "", "_abc_impl"], [12, 0, 1, "", "conv1d"], [12, 0, 1, "", "conv1d_transpose"], [12, 0, 1, "", "conv2d"], [12, 0, 1, "", "conv2d_transpose"], [12, 0, 1, "", "conv3d"], [12, 0, 1, "", "conv3d_transpose"], [12, 0, 1, "", "depthwise_conv2d"], [12, 0, 1, "", "dropout"], [12, 0, 1, "", "dropout1d"], [12, 0, 1, "", "dropout3d"], [12, 0, 1, "", "linear"], [12, 0, 1, "", "lstm_update"], [12, 0, 1, "", "multi_head_attention"], [12, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[13, 3, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "cholesky"], [13, 0, 1, "", "cross"], [13, 0, 1, "", "det"], [13, 0, 1, "", "diag"], [13, 0, 1, "", "diagonal"], [13, 0, 1, "", "eig"], [13, 0, 1, "", "eigh"], [13, 0, 1, "", "eigvalsh"], [13, 0, 1, "", "inner"], [13, 0, 1, "", "inv"], [13, 0, 1, "", "matmul"], [13, 0, 1, "", "matrix_norm"], [13, 0, 1, "", "matrix_power"], [13, 0, 1, "", "matrix_rank"], [13, 0, 1, "", "matrix_transpose"], [13, 0, 1, "", "outer"], [13, 0, 1, "", "pinv"], [13, 0, 1, "", "qr"], [13, 0, 1, "", "slogdet"], [13, 0, 1, "", "solve"], [13, 0, 1, "", "svd"], [13, 0, 1, "", "svdvals"], [13, 0, 1, "", "tensordot"], [13, 0, 1, "", "tensorsolve"], [13, 0, 1, "", "trace"], [13, 0, 1, "", "vander"], [13, 0, 1, "", "vecdot"], [13, 0, 1, "", "vector_norm"], [13, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[14, 3, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "binary_cross_entropy"], [14, 0, 1, "", "cross_entropy"], [14, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[15, 3, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "clip"], [15, 0, 1, "", "concat"], [15, 0, 1, "", "constant_pad"], [15, 0, 1, "", "expand_dims"], [15, 0, 1, "", "flip"], [15, 0, 1, "", "permute_dims"], [15, 0, 1, "", "repeat"], [15, 0, 1, "", "reshape"], [15, 0, 1, "", "roll"], [15, 0, 1, "", "split"], [15, 0, 1, "", "squeeze"], [15, 0, 1, "", "stack"], [15, 0, 1, "", "swapaxes"], [15, 0, 1, "", "tile"], [15, 0, 1, "", "unstack"], [15, 0, 1, "", "view"], [15, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[16, 3, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[17, 3, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "multinomial"], [17, 0, 1, "", "randint"], [17, 0, 1, "", "random_normal"], [17, 0, 1, "", "random_uniform"], [17, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[18, 3, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "argmax"], [18, 0, 1, "", "argmin"], [18, 0, 1, "", "argwhere"], [18, 0, 1, "", "nonzero"], [18, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[19, 3, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "unique_all"], [19, 0, 1, "", "unique_counts"], [19, 0, 1, "", "unique_inverse"], [19, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[20, 3, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "argsort"], [20, 0, 1, "", "searchsorted"], [20, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[21, 3, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "cumprod"], [21, 0, 1, "", "cumsum"], [21, 0, 1, "", "einsum"], [21, 0, 1, "", "max"], [21, 0, 1, "", "mean"], [21, 0, 1, "", "min"], [21, 0, 1, "", "prod"], [21, 0, 1, "", "std"], [21, 0, 1, "", "sum"], [21, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[22, 3, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "all"], [22, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[23, 1, 1, "", "_wrap_function"], [23, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[24, 2, 0, "-", "activations"], [25, 2, 0, "-", "base"], [48, 2, 0, "-", "container"], [26, 2, 0, "-", "conversions"], [27, 2, 0, "-", "creation"], [28, 2, 0, "-", "data_type"], [29, 2, 0, "-", "device"], [30, 2, 0, "-", "elementwise"], [31, 2, 0, "-", "experimental"], [32, 2, 0, "-", "general"], [33, 2, 0, "-", "gradients"], [34, 2, 0, "-", "image"], [35, 2, 0, "-", "layers"], [36, 2, 0, "-", "linear_algebra"], [37, 2, 0, "-", "losses"], [38, 2, 0, "-", "manipulation"], [39, 2, 0, "-", "norms"], [40, 2, 0, "-", "random"], [41, 2, 0, "-", "searching"], [42, 2, 0, "-", "set"], [43, 2, 0, "-", "sorting"], [44, 2, 0, "-", "statistical"], [45, 2, 0, "-", "utility"], [46, 2, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[24, 3, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[24, 4, 1, "", "_abc_impl"], [24, 0, 1, "", "_static_gelu"], [24, 0, 1, "", "_static_leaky_relu"], [24, 0, 1, "", "_static_log_softmax"], [24, 0, 1, "", "_static_mish"], [24, 0, 1, "", "_static_relu"], [24, 0, 1, "", "_static_sigmoid"], [24, 0, 1, "", "_static_softmax"], [24, 0, 1, "", "_static_softplus"], [24, 0, 1, "", "gelu"], [24, 0, 1, "", "leaky_relu"], [24, 0, 1, "", "log_softmax"], [24, 0, 1, "", "mish"], [24, 0, 1, "", "relu"], [24, 0, 1, "", "sigmoid"], [24, 0, 1, "", "softmax"], [24, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[25, 3, 1, "", "ContainerBase"], [25, 1, 1, "", "_is_jsonable"], [25, 1, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[25, 0, 1, "", "__getitem__"], [25, 0, 1, "", "__init__"], [25, 0, 1, "", "__setitem__"], [25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [25, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [25, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [25, 0, 1, "", "_cont_concat_unify"], [25, 0, 1, "", "_cont_get_dev"], [25, 0, 1, "", "_cont_get_shape"], [25, 0, 1, "", "_cont_get_shapes"], [25, 5, 1, "", "_cont_ivy"], [25, 0, 1, "", "_cont_mean_unify"], [25, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [25, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [25, 0, 1, "", "_cont_slice_keys"], [25, 0, 1, "", "_cont_sum_unify"], [25, 0, 1, "", "_get_queue_item"], [25, 0, 1, "", "cont_all_false"], [25, 0, 1, "", "cont_all_key_chains"], [25, 0, 1, "", "cont_all_true"], [25, 0, 1, "", "cont_as_bools"], [25, 0, 1, "", "cont_assert_contains_sub_container"], [25, 0, 1, "", "cont_assert_contains_sub_structure"], [25, 0, 1, "", "cont_assert_identical"], [25, 0, 1, "", "cont_assert_identical_structure"], [25, 0, 1, "", "cont_at_key_chain"], [25, 0, 1, "", "cont_at_key_chains"], [25, 0, 1, "", "cont_at_keys"], [25, 0, 1, "", "cont_combine"], [25, 0, 1, "", "cont_common_key_chains"], [25, 5, 1, "", "cont_config"], [25, 0, 1, "", "cont_contains_sub_container"], [25, 0, 1, "", "cont_contains_sub_structure"], [25, 0, 1, "", "cont_copy"], [25, 0, 1, "", "cont_create_if_absent"], [25, 0, 1, "", "cont_cutoff_at_depth"], [25, 0, 1, "", "cont_cutoff_at_height"], [25, 0, 1, "", "cont_deep_copy"], [25, 5, 1, "", "cont_dev"], [25, 5, 1, "", "cont_dev_str"], [25, 0, 1, "", "cont_diff"], [25, 0, 1, "", "cont_duplicate_array_keychains"], [25, 0, 1, "", "cont_find_sub_container"], [25, 0, 1, "", "cont_find_sub_structure"], [25, 0, 1, "", "cont_flatten_key_chain"], [25, 0, 1, "", "cont_flatten_key_chains"], [25, 0, 1, "", "cont_format_key_chains"], [25, 0, 1, "", "cont_from_disk_as_hdf5"], [25, 0, 1, "", "cont_from_disk_as_json"], [25, 0, 1, "", "cont_from_disk_as_pickled"], [25, 0, 1, "", "cont_from_flat_list"], [25, 0, 1, "", "cont_handle_inplace"], [25, 0, 1, "", "cont_has_key"], [25, 0, 1, "", "cont_has_key_chain"], [25, 0, 1, "", "cont_identical"], [25, 0, 1, "", "cont_identical_array_shapes"], [25, 0, 1, "", "cont_identical_configs"], [25, 0, 1, "", "cont_identical_structure"], [25, 0, 1, "", "cont_if_exists"], [25, 0, 1, "", "cont_inplace_update"], [25, 5, 1, "", "cont_ivy"], [25, 0, 1, "", "cont_key_chains_containing"], [25, 0, 1, "", "cont_list_join"], [25, 0, 1, "", "cont_list_stack"], [25, 0, 1, "", "cont_map"], [25, 0, 1, "", "cont_map_sub_conts"], [25, 5, 1, "", "cont_max_depth"], [25, 0, 1, "", "cont_multi_map"], [25, 0, 1, "", "cont_multi_map_in_function"], [25, 0, 1, "", "cont_num_arrays"], [25, 0, 1, "", "cont_overwrite_at_key_chain"], [25, 0, 1, "", "cont_overwrite_at_key_chains"], [25, 0, 1, "", "cont_prune_empty"], [25, 0, 1, "", "cont_prune_key_chain"], [25, 0, 1, "", "cont_prune_key_chains"], [25, 0, 1, "", "cont_prune_key_from_key_chains"], [25, 0, 1, "", "cont_prune_keys"], [25, 0, 1, "", "cont_prune_keys_from_key_chains"], [25, 0, 1, "", "cont_reduce"], [25, 0, 1, "", "cont_remove_key_length_limit"], [25, 0, 1, "", "cont_remove_print_limit"], [25, 0, 1, "", "cont_reshape_like"], [25, 0, 1, "", "cont_restructure"], [25, 0, 1, "", "cont_restructure_key_chains"], [25, 0, 1, "", "cont_set_at_key_chain"], [25, 0, 1, "", "cont_set_at_key_chains"], [25, 0, 1, "", "cont_set_at_keys"], [25, 5, 1, "", "cont_shape"], [25, 5, 1, "", "cont_shapes"], [25, 0, 1, "", "cont_show"], [25, 0, 1, "", "cont_show_sub_container"], [25, 0, 1, "", "cont_size_ordered_arrays"], [25, 0, 1, "", "cont_slice_keys"], [25, 0, 1, "", "cont_slice_via_key"], [25, 0, 1, "", "cont_sort_by_key"], [25, 0, 1, "", "cont_structural_diff"], [25, 0, 1, "", "cont_to_dict"], [25, 0, 1, "", "cont_to_disk_as_hdf5"], [25, 0, 1, "", "cont_to_disk_as_json"], [25, 0, 1, "", "cont_to_disk_as_pickled"], [25, 0, 1, "", "cont_to_flat_list"], [25, 0, 1, "", "cont_to_iterator"], [25, 0, 1, "", "cont_to_iterator_keys"], [25, 0, 1, "", "cont_to_iterator_values"], [25, 0, 1, "", "cont_to_jsonable"], [25, 0, 1, "", "cont_to_nested_list"], [25, 0, 1, "", "cont_to_raw"], [25, 0, 1, "", "cont_trim_key"], [25, 0, 1, "", "cont_try_kc"], [25, 0, 1, "", "cont_unify"], [25, 0, 1, "", "cont_unstack_conts"], [25, 0, 1, "", "cont_update_config"], [25, 0, 1, "", "cont_with_default_key_color"], [25, 0, 1, "", "cont_with_entries_as_lists"], [25, 0, 1, "", "cont_with_ivy_backend"], [25, 0, 1, "", "cont_with_key_length_limit"], [25, 0, 1, "", "cont_with_print_indent"], [25, 0, 1, "", "cont_with_print_limit"], [25, 0, 1, "", "cont_with_print_line_spacing"], [25, 5, 1, "", "dynamic_backend"], [25, 0, 1, "", "h5_file_size"], [25, 0, 1, "", "shuffle_h5_file"], [25, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[48, 3, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[48, 0, 1, "", "__abs__"], [48, 0, 1, "", "__add__"], [48, 0, 1, "", "__eq__"], [48, 0, 1, "", "__ge__"], [48, 0, 1, "", "__gt__"], [48, 0, 1, "", "__init__"], [48, 0, 1, "", "__le__"], [48, 0, 1, "", "__lt__"], [48, 0, 1, "", "__ne__"], [48, 0, 1, "", "__pow__"], [48, 0, 1, "", "__radd__"], [48, 0, 1, "", "__rrshift__"], [48, 0, 1, "", "__rshift__"], [48, 0, 1, "", "__rsub__"], [48, 0, 1, "", "__sub__"], [48, 0, 1, "", "__truediv__"], [48, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[26, 3, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_static_to_ivy"], [26, 0, 1, "", "_static_to_native"], [26, 0, 1, "", "to_ivy"], [26, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[27, 3, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_arange"], [27, 0, 1, "", "_static_asarray"], [27, 0, 1, "", "_static_empty_like"], [27, 0, 1, "", "_static_eye"], [27, 0, 1, "", "_static_from_dlpack"], [27, 0, 1, "", "_static_full_like"], [27, 0, 1, "", "_static_linspace"], [27, 0, 1, "", "_static_logspace"], [27, 0, 1, "", "_static_meshgrid"], [27, 0, 1, "", "_static_native_array"], [27, 0, 1, "", "_static_one_hot"], [27, 0, 1, "", "_static_ones"], [27, 0, 1, "", "_static_ones_like"], [27, 0, 1, "", "_static_tril"], [27, 0, 1, "", "_static_triu"], [27, 0, 1, "", "_static_zeros"], [27, 0, 1, "", "_static_zeros_like"], [27, 0, 1, "", "empty_like"], [27, 0, 1, "", "from_dlpack"], [27, 0, 1, "", "full_like"], [27, 0, 1, "", "linspace"], [27, 0, 1, "", "logspace"], [27, 0, 1, "", "meshgrid"], [27, 0, 1, "", "native_array"], [27, 0, 1, "", "one_hot"], [27, 0, 1, "", "ones_like"], [27, 0, 1, "", "tril"], [27, 0, 1, "", "triu"], [27, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[28, 3, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_astype"], [28, 0, 1, "", "_static_broadcast_arrays"], [28, 0, 1, "", "_static_broadcast_to"], [28, 0, 1, "", "_static_can_cast"], [28, 0, 1, "", "_static_default_complex_dtype"], [28, 0, 1, "", "_static_default_float_dtype"], [28, 0, 1, "", "_static_dtype"], [28, 0, 1, "", "_static_finfo"], [28, 0, 1, "", "_static_function_supported_dtypes"], [28, 0, 1, "", "_static_function_unsupported_dtypes"], [28, 0, 1, "", "_static_iinfo"], [28, 0, 1, "", "_static_is_bool_dtype"], [28, 0, 1, "", "_static_is_complex_dtype"], [28, 0, 1, "", "_static_is_float_dtype"], [28, 0, 1, "", "_static_is_int_dtype"], [28, 0, 1, "", "_static_is_uint_dtype"], [28, 0, 1, "", "_static_result_type"], [28, 0, 1, "", "astype"], [28, 0, 1, "", "broadcast_arrays"], [28, 0, 1, "", "broadcast_to"], [28, 0, 1, "", "can_cast"], [28, 0, 1, "", "dtype"], [28, 0, 1, "", "finfo"], [28, 0, 1, "", "iinfo"], [28, 0, 1, "", "is_bool_dtype"], [28, 0, 1, "", "is_complex_dtype"], [28, 0, 1, "", "is_float_dtype"], [28, 0, 1, "", "is_int_dtype"], [28, 0, 1, "", "is_uint_dtype"], [28, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[29, 3, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_dev"], [29, 0, 1, "", "_static_to_device"], [29, 0, 1, "", "dev"], [29, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[30, 3, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_abs"], [30, 0, 1, "", "_static_acos"], [30, 0, 1, "", "_static_acosh"], [30, 0, 1, "", "_static_add"], [30, 0, 1, "", "_static_asin"], [30, 0, 1, "", "_static_asinh"], [30, 0, 1, "", "_static_atan"], [30, 0, 1, "", "_static_atan2"], [30, 0, 1, "", "_static_atanh"], [30, 0, 1, "", "_static_bitwise_and"], [30, 0, 1, "", "_static_bitwise_invert"], [30, 0, 1, "", "_static_bitwise_left_shift"], [30, 0, 1, "", "_static_bitwise_or"], [30, 0, 1, "", "_static_bitwise_right_shift"], [30, 0, 1, "", "_static_bitwise_xor"], [30, 0, 1, "", "_static_ceil"], [30, 0, 1, "", "_static_cos"], [30, 0, 1, "", "_static_cosh"], [30, 0, 1, "", "_static_deg2rad"], [30, 0, 1, "", "_static_divide"], [30, 0, 1, "", "_static_equal"], [30, 0, 1, "", "_static_erf"], [30, 0, 1, "", "_static_exp"], [30, 0, 1, "", "_static_expm1"], [30, 0, 1, "", "_static_floor"], [30, 0, 1, "", "_static_floor_divide"], [30, 0, 1, "", "_static_greater"], [30, 0, 1, "", "_static_greater_equal"], [30, 0, 1, "", "_static_isfinite"], [30, 0, 1, "", "_static_isinf"], [30, 0, 1, "", "_static_isnan"], [30, 0, 1, "", "_static_isreal"], [30, 0, 1, "", "_static_less"], [30, 0, 1, "", "_static_less_equal"], [30, 0, 1, "", "_static_log"], [30, 0, 1, "", "_static_log10"], [30, 0, 1, "", "_static_log1p"], [30, 0, 1, "", "_static_log2"], [30, 0, 1, "", "_static_logaddexp"], [30, 0, 1, "", "_static_logical_and"], [30, 0, 1, "", "_static_logical_not"], [30, 0, 1, "", "_static_logical_or"], [30, 0, 1, "", "_static_logical_xor"], [30, 0, 1, "", "_static_maximum"], [30, 0, 1, "", "_static_minimum"], [30, 0, 1, "", "_static_multiply"], [30, 0, 1, "", "_static_negative"], [30, 0, 1, "", "_static_not_equal"], [30, 0, 1, "", "_static_positive"], [30, 0, 1, "", "_static_pow"], [30, 0, 1, "", "_static_rad2deg"], [30, 0, 1, "", "_static_reciprocal"], [30, 0, 1, "", "_static_remainder"], [30, 0, 1, "", "_static_round"], [30, 0, 1, "", "_static_sign"], [30, 0, 1, "", "_static_sin"], [30, 0, 1, "", "_static_sinh"], [30, 0, 1, "", "_static_sqrt"], [30, 0, 1, "", "_static_square"], [30, 0, 1, "", "_static_subtract"], [30, 0, 1, "", "_static_tan"], [30, 0, 1, "", "_static_tanh"], [30, 0, 1, "", "_static_trapz"], [30, 0, 1, "", "_static_trunc"], [30, 0, 1, "", "_static_trunc_divide"], [30, 0, 1, "", "abs"], [30, 0, 1, "", "acos"], [30, 0, 1, "", "acosh"], [30, 0, 1, "", "add"], [30, 0, 1, "", "asin"], [30, 0, 1, "", "asinh"], [30, 0, 1, "", "atan"], [30, 0, 1, "", "atan2"], [30, 0, 1, "", "atanh"], [30, 0, 1, "", "bitwise_and"], [30, 0, 1, "", "bitwise_invert"], [30, 0, 1, "", "bitwise_left_shift"], [30, 0, 1, "", "bitwise_or"], [30, 0, 1, "", "bitwise_right_shift"], [30, 0, 1, "", "bitwise_xor"], [30, 0, 1, "", "ceil"], [30, 0, 1, "", "cos"], [30, 0, 1, "", "cosh"], [30, 0, 1, "", "deg2rad"], [30, 0, 1, "", "divide"], [30, 0, 1, "", "equal"], [30, 0, 1, "", "erf"], [30, 0, 1, "", "exp"], [30, 0, 1, "", "expm1"], [30, 0, 1, "", "floor"], [30, 0, 1, "", "floor_divide"], [30, 0, 1, "", "greater"], [30, 0, 1, "", "greater_equal"], [30, 0, 1, "", "isfinite"], [30, 0, 1, "", "isinf"], [30, 0, 1, "", "isnan"], [30, 0, 1, "", "isreal"], [30, 0, 1, "", "less"], [30, 0, 1, "", "less_equal"], [30, 0, 1, "", "log"], [30, 0, 1, "", "log10"], [30, 0, 1, "", "log1p"], [30, 0, 1, "", "log2"], [30, 0, 1, "", "logaddexp"], [30, 0, 1, "", "logical_and"], [30, 0, 1, "", "logical_not"], [30, 0, 1, "", "logical_or"], [30, 0, 1, "", "logical_xor"], [30, 0, 1, "", "maximum"], [30, 0, 1, "", "minimum"], [30, 0, 1, "", "multiply"], [30, 0, 1, "", "negative"], [30, 0, 1, "", "not_equal"], [30, 0, 1, "", "positive"], [30, 0, 1, "", "pow"], [30, 0, 1, "", "rad2deg"], [30, 0, 1, "", "reciprocal"], [30, 0, 1, "", "remainder"], [30, 0, 1, "", "round"], [30, 0, 1, "", "sign"], [30, 0, 1, "", "sin"], [30, 0, 1, "", "sinh"], [30, 0, 1, "", "sqrt"], [30, 0, 1, "", "square"], [30, 0, 1, "", "subtract"], [30, 0, 1, "", "tan"], [30, 0, 1, "", "tanh"], [30, 0, 1, "", "trapz"], [30, 0, 1, "", "trunc"], [30, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[31, 2, 0, "-", "activations"], [31, 2, 0, "-", "conversions"], [31, 2, 0, "-", "creation"], [31, 2, 0, "-", "data_type"], [31, 2, 0, "-", "device"], [31, 2, 0, "-", "elementwise"], [31, 2, 0, "-", "general"], [31, 2, 0, "-", "gradients"], [31, 2, 0, "-", "image"], [31, 2, 0, "-", "layers"], [31, 2, 0, "-", "linear_algebra"], [31, 2, 0, "-", "losses"], [31, 2, 0, "-", "manipulation"], [31, 2, 0, "-", "norms"], [31, 2, 0, "-", "random"], [31, 2, 0, "-", "searching"], [31, 2, 0, "-", "set"], [31, 2, 0, "-", "sorting"], [31, 2, 0, "-", "statistical"], [31, 2, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[31, 3, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "batch_norm"], [31, 0, 1, "", "logit"], [31, 0, 1, "", "logsigmoid"], [31, 0, 1, "", "prelu"], [31, 0, 1, "", "relu6"], [31, 0, 1, "", "selu"], [31, 0, 1, "", "static_batch_norm"], [31, 0, 1, "", "static_logit"], [31, 0, 1, "", "static_logsigmoid"], [31, 0, 1, "", "static_prelu"], [31, 0, 1, "", "static_relu6"], [31, 0, 1, "", "static_selu"], [31, 0, 1, "", "static_thresholded_relu"], [31, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[31, 3, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[31, 3, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "eye_like"], [31, 0, 1, "", "hamming_window"], [31, 0, 1, "", "hann_window"], [31, 0, 1, "", "kaiser_bessel_derived_window"], [31, 0, 1, "", "kaiser_window"], [31, 0, 1, "", "static_eye_like"], [31, 0, 1, "", "static_hamming_window"], [31, 0, 1, "", "static_hann_window"], [31, 0, 1, "", "static_kaiser_bessel_derived_window"], [31, 0, 1, "", "static_kaiser_window"], [31, 0, 1, "", "static_tril_indices"], [31, 0, 1, "", "static_triu_indices"], [31, 0, 1, "", "static_vorbis_window"], [31, 0, 1, "", "tril_indices"], [31, 0, 1, "", "triu_indices"], [31, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[31, 3, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[31, 3, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[31, 3, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "allclose"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "binarizer"], [31, 0, 1, "", "conj"], [31, 0, 1, "", "copysign"], [31, 0, 1, "", "count_nonzero"], [31, 0, 1, "", "diff"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "fix"], [31, 0, 1, "", "float_power"], [31, 0, 1, "", "fmax"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "fmod"], [31, 0, 1, "", "frexp"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "gradient"], [31, 0, 1, "", "hypot"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isclose"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "ldexp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "nansum"], [31, 0, 1, "", "nextafter"], [31, 0, 1, "", "real"], [31, 0, 1, "", "signbit"], [31, 0, 1, "", "sinc"], [31, 0, 1, "", "static_allclose"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_binarizer"], [31, 0, 1, "", "static_conj"], [31, 0, 1, "", "static_copysign"], [31, 0, 1, "", "static_count_nonzero"], [31, 0, 1, "", "static_diff"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fix"], [31, 0, 1, "", "static_float_power"], [31, 0, 1, "", "static_fmax"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_fmod"], [31, 0, 1, "", "static_frexp"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_gradient"], [31, 0, 1, "", "static_hypot"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_isclose"], [31, 0, 1, "", "static_lcm"], [31, 0, 1, "", "static_ldexp"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_nansum"], [31, 0, 1, "", "static_nextafter"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "static_signbit"], [31, 0, 1, "", "static_sinc"], [31, 0, 1, "", "static_xlogy"], [31, 0, 1, "", "static_zeta"], [31, 0, 1, "", "xlogy"], [31, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[31, 3, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "isin"], [31, 0, 1, "", "static_isin"]], "ivy.data_classes.container.experimental.gradients": [[31, 3, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[31, 3, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[31, 3, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "adaptive_avg_pool1d"], [31, 0, 1, "", "adaptive_avg_pool2d"], [31, 0, 1, "", "avg_pool1d"], [31, 0, 1, "", "avg_pool2d"], [31, 0, 1, "", "avg_pool3d"], [31, 0, 1, "", "dct"], [31, 0, 1, "", "dft"], [31, 0, 1, "", "embedding"], [31, 0, 1, "", "fft"], [31, 0, 1, "", "ifft"], [31, 0, 1, "", "interpolate"], [31, 0, 1, "", "max_pool1d"], [31, 0, 1, "", "max_pool2d"], [31, 0, 1, "", "max_pool3d"], [31, 0, 1, "", "static_adaptive_avg_pool1d"], [31, 0, 1, "", "static_adaptive_avg_pool2d"], [31, 0, 1, "", "static_avg_pool1d"], [31, 0, 1, "", "static_avg_pool2d"], [31, 0, 1, "", "static_avg_pool3d"], [31, 0, 1, "", "static_dct"], [31, 0, 1, "", "static_dft"], [31, 0, 1, "", "static_embedding"], [31, 0, 1, "", "static_fft"], [31, 0, 1, "", "static_ifft"], [31, 0, 1, "", "static_interpolate"], [31, 0, 1, "", "static_max_pool1d"], [31, 0, 1, "", "static_max_pool2d"], [31, 0, 1, "", "static_max_pool3d"]], "ivy.data_classes.container.experimental.linear_algebra": [[31, 3, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "adjoint"], [31, 0, 1, "", "cond"], [31, 0, 1, "", "diagflat"], [31, 0, 1, "", "eig"], [31, 0, 1, "", "eigh_tridiagonal"], [31, 0, 1, "", "eigvals"], [31, 0, 1, "", "kron"], [31, 0, 1, "", "matrix_exp"], [31, 0, 1, "", "multi_dot"], [31, 0, 1, "", "static_adjoint"], [31, 0, 1, "", "static_cond"], [31, 0, 1, "", "static_diagflat"], [31, 0, 1, "", "static_eig"], [31, 0, 1, "", "static_eigh_tridiagonal"], [31, 0, 1, "", "static_eigvals"], [31, 0, 1, "", "static_kron"], [31, 0, 1, "", "static_matrix_exp"], [31, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.losses": [[31, 3, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "binary_cross_entropy_with_logits"], [31, 0, 1, "", "static_binary_cross_entropy_with_logits"]], "ivy.data_classes.container.experimental.manipulation": [[31, 3, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "atleast_1d"], [31, 0, 1, "", "atleast_2d"], [31, 0, 1, "", "atleast_3d"], [31, 0, 1, "", "broadcast_shapes"], [31, 0, 1, "", "dsplit"], [31, 0, 1, "", "dstack"], [31, 0, 1, "", "expand"], [31, 0, 1, "", "flatten"], [31, 0, 1, "", "fliplr"], [31, 0, 1, "", "flipud"], [31, 0, 1, "", "heaviside"], [31, 0, 1, "", "hsplit"], [31, 0, 1, "", "hstack"], [31, 0, 1, "", "i0"], [31, 0, 1, "", "moveaxis"], [31, 0, 1, "", "pad"], [31, 0, 1, "", "rot90"], [31, 0, 1, "", "static_atleast_1d"], [31, 0, 1, "", "static_atleast_2d"], [31, 0, 1, "", "static_atleast_3d"], [31, 0, 1, "", "static_broadcast_shapes"], [31, 0, 1, "", "static_dsplit"], [31, 0, 1, "", "static_dstack"], [31, 0, 1, "", "static_expand"], [31, 0, 1, "", "static_flatten"], [31, 0, 1, "", "static_fliplr"], [31, 0, 1, "", "static_flipud"], [31, 0, 1, "", "static_heaviside"], [31, 0, 1, "", "static_hsplit"], [31, 0, 1, "", "static_hstack"], [31, 0, 1, "", "static_i0"], [31, 0, 1, "", "static_moveaxis"], [31, 0, 1, "", "static_pad"], [31, 0, 1, "", "static_rot90"], [31, 0, 1, "", "static_take_along_axis"], [31, 0, 1, "", "static_top_k"], [31, 0, 1, "", "static_vsplit"], [31, 0, 1, "", "static_vstack"], [31, 0, 1, "", "take_along_axis"], [31, 0, 1, "", "top_k"], [31, 0, 1, "", "vsplit"], [31, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[31, 3, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "instance_norm"], [31, 0, 1, "", "l2_normalize"], [31, 0, 1, "", "lp_normalize"], [31, 0, 1, "", "static_instance_norm"], [31, 0, 1, "", "static_l2_normalize"], [31, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[31, 3, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "bernoulli"], [31, 0, 1, "", "beta"], [31, 0, 1, "", "dirichlet"], [31, 0, 1, "", "poisson"], [31, 0, 1, "", "static_bernoulli"], [31, 0, 1, "", "static_beta"], [31, 0, 1, "", "static_dirichlet"], [31, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[31, 3, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "static_unravel_index"], [31, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[31, 3, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[31, 3, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "lexsort"], [31, 0, 1, "", "msort"], [31, 0, 1, "", "static_lexsort"], [31, 0, 1, "", "static_msort"]], "ivy.data_classes.container.experimental.statistical": [[31, 3, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "bincount"], [31, 0, 1, "", "corrcoef"], [31, 0, 1, "", "median"], [31, 0, 1, "", "nanmean"], [31, 0, 1, "", "nanmedian"], [31, 0, 1, "", "quantile"], [31, 0, 1, "", "static_bincount"], [31, 0, 1, "", "static_corrcoef"], [31, 0, 1, "", "static_median"], [31, 0, 1, "", "static_nanmean"], [31, 0, 1, "", "static_nanmedian"], [31, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[31, 3, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[31, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[32, 3, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_all_equal"], [32, 0, 1, "", "_static_array_equal"], [32, 0, 1, "", "_static_assert_supports_inplace"], [32, 0, 1, "", "_static_clip_matrix_norm"], [32, 0, 1, "", "_static_clip_vector_norm"], [32, 0, 1, "", "_static_einops_rearrange"], [32, 0, 1, "", "_static_einops_reduce"], [32, 0, 1, "", "_static_einops_repeat"], [32, 0, 1, "", "_static_fourier_encode"], [32, 0, 1, "", "_static_gather"], [32, 0, 1, "", "_static_gather_nd"], [32, 0, 1, "", "_static_get_num_dims"], [32, 0, 1, "", "_static_has_nans"], [32, 0, 1, "", "_static_inplace_decrement"], [32, 0, 1, "", "_static_inplace_increment"], [32, 0, 1, "", "_static_inplace_update"], [32, 0, 1, "", "_static_is_array"], [32, 0, 1, "", "_static_is_ivy_array"], [32, 0, 1, "", "_static_is_native_array"], [32, 0, 1, "", "_static_scatter_flat"], [32, 0, 1, "", "_static_scatter_nd"], [32, 0, 1, "", "_static_stable_divide"], [32, 0, 1, "", "_static_stable_pow"], [32, 0, 1, "", "_static_supports_inplace_updates"], [32, 0, 1, "", "_static_to_list"], [32, 0, 1, "", "_static_to_numpy"], [32, 0, 1, "", "_static_to_scalar"], [32, 0, 1, "", "_static_value_is_nan"], [32, 0, 1, "", "all_equal"], [32, 0, 1, "", "array_equal"], [32, 0, 1, "", "assert_supports_inplace"], [32, 0, 1, "", "clip_matrix_norm"], [32, 0, 1, "", "clip_vector_norm"], [32, 0, 1, "", "einops_rearrange"], [32, 0, 1, "", "einops_reduce"], [32, 0, 1, "", "einops_repeat"], [32, 0, 1, "", "fourier_encode"], [32, 0, 1, "", "gather"], [32, 0, 1, "", "gather_nd"], [32, 0, 1, "", "get_num_dims"], [32, 0, 1, "", "has_nans"], [32, 0, 1, "", "inplace_decrement"], [32, 0, 1, "", "inplace_increment"], [32, 0, 1, "", "inplace_update"], [32, 0, 1, "", "is_array"], [32, 0, 1, "", "is_ivy_array"], [32, 0, 1, "", "is_native_array"], [32, 0, 1, "", "scatter_flat"], [32, 0, 1, "", "scatter_nd"], [32, 0, 1, "", "stable_divide"], [32, 0, 1, "", "stable_pow"], [32, 0, 1, "", "supports_inplace_updates"], [32, 0, 1, "", "to_list"], [32, 0, 1, "", "to_numpy"], [32, 0, 1, "", "to_scalar"], [32, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[33, 3, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_stop_gradient"], [33, 0, 1, "", "adam_step"], [33, 0, 1, "", "adam_update"], [33, 0, 1, "", "gradient_descent_update"], [33, 0, 1, "", "lamb_update"], [33, 0, 1, "", "lars_update"], [33, 0, 1, "", "optimizer_update"], [33, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[34, 3, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[34, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[35, 3, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[35, 4, 1, "", "_abc_impl"], [35, 0, 1, "", "_static_conv1d"], [35, 0, 1, "", "_static_conv1d_transpose"], [35, 0, 1, "", "_static_conv2d"], [35, 0, 1, "", "_static_conv2d_transpose"], [35, 0, 1, "", "_static_conv3d"], [35, 0, 1, "", "_static_conv3d_transpose"], [35, 0, 1, "", "_static_depthwise_conv2d"], [35, 0, 1, "", "_static_dropout"], [35, 0, 1, "", "_static_dropout1d"], [35, 0, 1, "", "_static_dropout3d"], [35, 0, 1, "", "_static_linear"], [35, 0, 1, "", "_static_lstm_update"], [35, 0, 1, "", "_static_multi_head_attention"], [35, 0, 1, "", "_static_scaled_dot_product_attention"], [35, 0, 1, "", "conv1d"], [35, 0, 1, "", "conv1d_transpose"], [35, 0, 1, "", "conv2d"], [35, 0, 1, "", "conv2d_transpose"], [35, 0, 1, "", "conv3d"], [35, 0, 1, "", "conv3d_transpose"], [35, 0, 1, "", "depthwise_conv2d"], [35, 0, 1, "", "dropout"], [35, 0, 1, "", "dropout1d"], [35, 0, 1, "", "dropout3d"], [35, 0, 1, "", "linear"], [35, 0, 1, "", "lstm_update"], [35, 0, 1, "", "multi_head_attention"], [35, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[36, 3, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_cholesky"], [36, 0, 1, "", "_static_cross"], [36, 0, 1, "", "_static_det"], [36, 0, 1, "", "_static_diag"], [36, 0, 1, "", "_static_diagonal"], [36, 0, 1, "", "_static_eigh"], [36, 0, 1, "", "_static_eigvalsh"], [36, 0, 1, "", "_static_inner"], [36, 0, 1, "", "_static_inv"], [36, 0, 1, "", "_static_matmul"], [36, 0, 1, "", "_static_matrix_norm"], [36, 0, 1, "", "_static_matrix_power"], [36, 0, 1, "", "_static_matrix_rank"], [36, 0, 1, "", "_static_matrix_transpose"], [36, 0, 1, "", "_static_outer"], [36, 0, 1, "", "_static_pinv"], [36, 0, 1, "", "_static_qr"], [36, 0, 1, "", "_static_slogdet"], [36, 0, 1, "", "_static_solve"], [36, 0, 1, "", "_static_svd"], [36, 0, 1, "", "_static_svdvals"], [36, 0, 1, "", "_static_tensordot"], [36, 0, 1, "", "_static_tensorsolve"], [36, 0, 1, "", "_static_trace"], [36, 0, 1, "", "_static_vander"], [36, 0, 1, "", "_static_vecdot"], [36, 0, 1, "", "_static_vector_norm"], [36, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [36, 0, 1, "", "cholesky"], [36, 0, 1, "", "cross"], [36, 0, 1, "", "det"], [36, 0, 1, "", "diag"], [36, 0, 1, "", "diagonal"], [36, 0, 1, "", "eigh"], [36, 0, 1, "", "eigvalsh"], [36, 0, 1, "", "inner"], [36, 0, 1, "", "inv"], [36, 0, 1, "", "matmul"], [36, 0, 1, "", "matrix_norm"], [36, 0, 1, "", "matrix_power"], [36, 0, 1, "", "matrix_rank"], [36, 0, 1, "", "matrix_transpose"], [36, 0, 1, "", "outer"], [36, 0, 1, "", "pinv"], [36, 0, 1, "", "qr"], [36, 0, 1, "", "slogdet"], [36, 0, 1, "", "solve"], [36, 0, 1, "", "svd"], [36, 0, 1, "", "svdvals"], [36, 0, 1, "", "tensordot"], [36, 0, 1, "", "tensorsolve"], [36, 0, 1, "", "trace"], [36, 0, 1, "", "vander"], [36, 0, 1, "", "vecdot"], [36, 0, 1, "", "vector_norm"], [36, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[37, 3, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_binary_cross_entropy"], [37, 0, 1, "", "_static_cross_entropy"], [37, 0, 1, "", "_static_sparse_cross_entropy"], [37, 0, 1, "", "binary_cross_entropy"], [37, 0, 1, "", "cross_entropy"], [37, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[38, 3, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_clip"], [38, 0, 1, "", "_static_concat"], [38, 0, 1, "", "_static_constant_pad"], [38, 0, 1, "", "_static_expand_dims"], [38, 0, 1, "", "_static_flip"], [38, 0, 1, "", "_static_permute_dims"], [38, 0, 1, "", "_static_repeat"], [38, 0, 1, "", "_static_reshape"], [38, 0, 1, "", "_static_roll"], [38, 0, 1, "", "_static_split"], [38, 0, 1, "", "_static_squeeze"], [38, 0, 1, "", "_static_stack"], [38, 0, 1, "", "_static_swapaxes"], [38, 0, 1, "", "_static_tile"], [38, 0, 1, "", "_static_unstack"], [38, 0, 1, "", "_static_zero_pad"], [38, 0, 1, "", "clip"], [38, 0, 1, "", "concat"], [38, 0, 1, "", "constant_pad"], [38, 0, 1, "", "expand_dims"], [38, 0, 1, "", "flip"], [38, 0, 1, "", "permute_dims"], [38, 0, 1, "", "repeat"], [38, 0, 1, "", "reshape"], [38, 0, 1, "", "roll"], [38, 0, 1, "", "split"], [38, 0, 1, "", "squeeze"], [38, 0, 1, "", "stack"], [38, 0, 1, "", "swapaxes"], [38, 0, 1, "", "tile"], [38, 0, 1, "", "unstack"], [38, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[39, 3, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[40, 3, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "_static_multinomial"], [40, 0, 1, "", "_static_randint"], [40, 0, 1, "", "_static_random_normal"], [40, 0, 1, "", "_static_random_uniform"], [40, 0, 1, "", "_static_shuffle"], [40, 0, 1, "", "multinomial"], [40, 0, 1, "", "randint"], [40, 0, 1, "", "random_normal"], [40, 0, 1, "", "random_uniform"], [40, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[41, 3, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_argmax"], [41, 0, 1, "", "_static_argmin"], [41, 0, 1, "", "_static_argwhere"], [41, 0, 1, "", "_static_nonzero"], [41, 0, 1, "", "_static_where"], [41, 0, 1, "", "argmax"], [41, 0, 1, "", "argmin"], [41, 0, 1, "", "argwhere"], [41, 0, 1, "", "nonzero"], [41, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[42, 3, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_unique_all"], [42, 0, 1, "", "_static_unique_counts"], [42, 0, 1, "", "_static_unique_inverse"], [42, 0, 1, "", "_static_unique_values"], [42, 0, 1, "", "unique_all"], [42, 0, 1, "", "unique_counts"], [42, 0, 1, "", "unique_inverse"], [42, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[43, 3, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_argsort"], [43, 0, 1, "", "_static_searchsorted"], [43, 0, 1, "", "_static_sort"], [43, 0, 1, "", "argsort"], [43, 0, 1, "", "searchsorted"], [43, 0, 1, "", "sort"]], "ivy.data_classes.container.statistical": [[44, 3, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_cumprod"], [44, 0, 1, "", "_static_cumsum"], [44, 0, 1, "", "_static_prod"], [44, 0, 1, "", "_static_sum"], [44, 0, 1, "", "_static_var"], [44, 0, 1, "", "cumprod"], [44, 0, 1, "", "cumsum"], [44, 0, 1, "", "einsum"], [44, 0, 1, "", "max"], [44, 0, 1, "", "mean"], [44, 0, 1, "", "min"], [44, 0, 1, "", "prod"], [44, 0, 1, "", "std"], [44, 0, 1, "", "sum"], [44, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[45, 3, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_all"], [45, 0, 1, "", "_static_any"], [45, 0, 1, "", "all"], [45, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[46, 1, 1, "", "_wrap_function"], [46, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.functional.ivy": [[359, 2, 0, "-", "activations"], [360, 2, 0, "-", "constants"], [361, 2, 0, "-", "control_flow_ops"], [362, 2, 0, "-", "creation"], [363, 2, 0, "-", "data_type"], [364, 2, 0, "-", "device"], [365, 2, 0, "-", "elementwise"], [366, 2, 0, "-", "experimental"], [367, 2, 0, "-", "general"], [368, 2, 0, "-", "gradients"], [369, 2, 0, "-", "layers"], [370, 2, 0, "-", "linear_algebra"], [371, 2, 0, "-", "losses"], [372, 2, 0, "-", "manipulation"], [373, 2, 0, "-", "meta"], [374, 2, 0, "-", "nest"], [375, 2, 0, "-", "norms"], [376, 2, 0, "-", "random"], [377, 2, 0, "-", "searching"], [378, 2, 0, "-", "set"], [379, 2, 0, "-", "sorting"], [380, 2, 0, "-", "statistical"], [381, 2, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[359, 1, 1, "", "deserialize"], [359, 1, 1, "", "gelu"], [359, 1, 1, "", "get"], [359, 1, 1, "", "leaky_relu"], [359, 1, 1, "", "log_softmax"], [359, 1, 1, "", "mish"], [359, 1, 1, "", "relu"], [359, 1, 1, "", "sigmoid"], [359, 1, 1, "", "softmax"], [359, 1, 1, "", "softplus"]], "ivy.functional.ivy.constants": [[360, 6, 1, "", "e"], [360, 6, 1, "", "inf"], [360, 6, 1, "", "nan"], [360, 6, 1, "", "newaxis"], [360, 6, 1, "", "pi"]], "ivy.functional.ivy.control_flow_ops": [[361, 1, 1, "", "IfElse"], [361, 1, 1, "", "WhileLoop"], [361, 1, 1, "", "if_else"], [361, 1, 1, "", "while_loop"]], "ivy.functional.ivy.creation": [[362, 3, 1, "", "NestedSequence"], [362, 1, 1, "", "arange"], [362, 1, 1, "", "array"], [362, 1, 1, "", "asarray"], [362, 1, 1, "", "asarray_handle_nestable"], [362, 1, 1, "", "asarray_infer_device"], [362, 1, 1, "", "asarray_to_native_arrays_and_back"], [362, 1, 1, "", "copy_array"], [362, 1, 1, "", "empty"], [362, 1, 1, "", "empty_like"], [362, 1, 1, "", "eye"], [362, 1, 1, "", "from_dlpack"], [362, 1, 1, "", "full"], [362, 1, 1, "", "full_like"], [362, 1, 1, "", "linspace"], [362, 1, 1, "", "logspace"], [362, 1, 1, "", "meshgrid"], [362, 1, 1, "", "native_array"], [362, 1, 1, "", "one_hot"], [362, 1, 1, "", "ones"], [362, 1, 1, "", "ones_like"], [362, 1, 1, "", "tril"], [362, 1, 1, "", "triu"], [362, 1, 1, "", "zeros"], [362, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.creation.NestedSequence": [[362, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type": [[363, 3, 1, "", "DefaultComplexDtype"], [363, 3, 1, "", "DefaultDtype"], [363, 3, 1, "", "DefaultFloatDtype"], [363, 3, 1, "", "DefaultIntDtype"], [363, 3, 1, "", "DefaultUintDtype"], [363, 1, 1, "", "as_ivy_dtype"], [363, 1, 1, "", "as_native_dtype"], [363, 1, 1, "", "astype"], [363, 1, 1, "", "broadcast_arrays"], [363, 1, 1, "", "broadcast_to"], [363, 1, 1, "", "can_cast"], [363, 1, 1, "", "check_float"], [363, 1, 1, "", "closest_valid_dtype"], [363, 1, 1, "", "default_complex_dtype"], [363, 1, 1, "", "default_dtype"], [363, 1, 1, "", "default_float_dtype"], [363, 1, 1, "", "default_int_dtype"], [363, 1, 1, "", "default_uint_dtype"], [363, 1, 1, "", "dtype"], [363, 1, 1, "", "dtype_bits"], [363, 1, 1, "", "finfo"], [363, 1, 1, "", "function_supported_dtypes"], [363, 1, 1, "", "function_unsupported_dtypes"], [363, 1, 1, "", "iinfo"], [363, 1, 1, "", "infer_default_dtype"], [363, 1, 1, "", "invalid_dtype"], [363, 1, 1, "", "is_bool_dtype"], [363, 1, 1, "", "is_complex_dtype"], [363, 1, 1, "", "is_float_dtype"], [363, 1, 1, "", "is_int_dtype"], [363, 1, 1, "", "is_native_dtype"], [363, 1, 1, "", "is_uint_dtype"], [363, 1, 1, "", "promote_types"], [363, 1, 1, "", "promote_types_of_inputs"], [363, 1, 1, "", "result_type"], [363, 1, 1, "", "set_default_complex_dtype"], [363, 1, 1, "", "set_default_dtype"], [363, 1, 1, "", "set_default_float_dtype"], [363, 1, 1, "", "set_default_int_dtype"], [363, 1, 1, "", "set_default_uint_dtype"], [363, 1, 1, "", "type_promote_arrays"], [363, 1, 1, "", "unset_default_complex_dtype"], [363, 1, 1, "", "unset_default_dtype"], [363, 1, 1, "", "unset_default_float_dtype"], [363, 1, 1, "", "unset_default_int_dtype"], [363, 1, 1, "", "unset_default_uint_dtype"], [363, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultComplexDtype": [[363, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultDtype": [[363, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[363, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[363, 0, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultUintDtype": [[363, 0, 1, "", "__init__"]], "ivy.functional.ivy.device": [[364, 3, 1, "", "DefaultDevice"], [364, 3, 1, "", "Profiler"], [364, 1, 1, "", "as_ivy_dev"], [364, 1, 1, "", "as_native_dev"], [364, 1, 1, "", "clear_cached_mem_on_dev"], [364, 1, 1, "", "default_device"], [364, 1, 1, "", "dev"], [364, 1, 1, "", "dev_util"], [364, 1, 1, "", "function_supported_devices"], [364, 1, 1, "", "function_unsupported_devices"], [364, 1, 1, "", "get_all_ivy_arrays_on_dev"], [364, 1, 1, "", "gpu_is_available"], [364, 1, 1, "", "num_cpu_cores"], [364, 1, 1, "", "num_gpus"], [364, 1, 1, "", "num_ivy_arrays_on_dev"], [364, 1, 1, "", "percent_used_mem_on_dev"], [364, 1, 1, "", "print_all_ivy_arrays_on_dev"], [364, 1, 1, "", "set_default_device"], [364, 1, 1, "", "set_split_factor"], [364, 1, 1, "", "split_factor"], [364, 1, 1, "", "split_func_call"], [364, 1, 1, "", "to_device"], [364, 1, 1, "", "total_mem_on_dev"], [364, 1, 1, "", "tpu_is_available"], [364, 1, 1, "", "unset_default_device"], [364, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[364, 0, 1, "", "__enter__"], [364, 0, 1, "", "__exit__"], [364, 0, 1, "", "__init__"]], "ivy.functional.ivy.device.Profiler": [[364, 0, 1, "", "__init__"], [364, 0, 1, "", "start"], [364, 0, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[365, 1, 1, "", "abs"], [365, 1, 1, "", "acos"], [365, 1, 1, "", "acosh"], [365, 1, 1, "", "add"], [365, 1, 1, "", "asin"], [365, 1, 1, "", "asinh"], [365, 1, 1, "", "atan"], [365, 1, 1, "", "atan2"], [365, 1, 1, "", "atanh"], [365, 1, 1, "", "bitwise_and"], [365, 1, 1, "", "bitwise_invert"], [365, 1, 1, "", "bitwise_left_shift"], [365, 1, 1, "", "bitwise_or"], [365, 1, 1, "", "bitwise_right_shift"], [365, 1, 1, "", "bitwise_xor"], [365, 1, 1, "", "ceil"], [365, 1, 1, "", "cos"], [365, 1, 1, "", "cosh"], [365, 1, 1, "", "deg2rad"], [365, 1, 1, "", "divide"], [365, 1, 1, "", "equal"], [365, 1, 1, "", "erf"], [365, 1, 1, "", "exp"], [365, 1, 1, "", "expm1"], [365, 1, 1, "", "floor"], [365, 1, 1, "", "floor_divide"], [365, 1, 1, "", "fmod"], [365, 1, 1, "", "greater"], [365, 1, 1, "", "greater_equal"], [365, 1, 1, "", "isfinite"], [365, 1, 1, "", "isinf"], [365, 1, 1, "", "isnan"], [365, 1, 1, "", "isreal"], [365, 1, 1, "", "less"], [365, 1, 1, "", "less_equal"], [365, 1, 1, "", "log"], [365, 1, 1, "", "log10"], [365, 1, 1, "", "log1p"], [365, 1, 1, "", "log2"], [365, 1, 1, "", "logaddexp"], [365, 1, 1, "", "logical_and"], [365, 1, 1, "", "logical_not"], [365, 1, 1, "", "logical_or"], [365, 1, 1, "", "logical_xor"], [365, 1, 1, "", "maximum"], [365, 1, 1, "", "minimum"], [365, 1, 1, "", "multiply"], [365, 1, 1, "", "negative"], [365, 1, 1, "", "not_equal"], [365, 1, 1, "", "positive"], [365, 1, 1, "", "pow"], [365, 1, 1, "", "rad2deg"], [365, 1, 1, "", "reciprocal"], [365, 1, 1, "", "remainder"], [365, 1, 1, "", "round"], [365, 1, 1, "", "sign"], [365, 1, 1, "", "sin"], [365, 1, 1, "", "sinh"], [365, 1, 1, "", "sqrt"], [365, 1, 1, "", "square"], [365, 1, 1, "", "subtract"], [365, 1, 1, "", "tan"], [365, 1, 1, "", "tanh"], [365, 1, 1, "", "trunc"], [365, 1, 1, "", "trunc_divide"]], "ivy.functional.ivy.experimental": [[366, 3, 1, "", "NativeSparseArray"], [366, 3, 1, "", "SparseArray"], [366, 1, 1, "", "adaptive_avg_pool1d"], [366, 1, 1, "", "adaptive_avg_pool2d"], [366, 1, 1, "", "adjoint"], [366, 1, 1, "", "allclose"], [366, 1, 1, "", "angle"], [366, 1, 1, "", "atleast_1d"], [366, 1, 1, "", "atleast_2d"], [366, 1, 1, "", "atleast_3d"], [366, 1, 1, "", "avg_pool1d"], [366, 1, 1, "", "avg_pool2d"], [366, 1, 1, "", "avg_pool3d"], [366, 1, 1, "", "batch_norm"], [366, 1, 1, "", "bernoulli"], [366, 1, 1, "", "beta"], [366, 1, 1, "", "binarizer"], [366, 1, 1, "", "binary_cross_entropy_with_logits"], [366, 1, 1, "", "bincount"], [366, 1, 1, "", "bind_custom_gradient_function"], [366, 1, 1, "", "broadcast_shapes"], [366, 1, 1, "", "cond"], [366, 1, 1, "", "conj"], [366, 1, 1, "", "copysign"], [366, 1, 1, "", "corrcoef"], [366, 1, 1, "", "count_nonzero"], [366, 1, 1, "", "current_backend"], [366, 1, 1, "", "dct"], [366, 1, 1, "", "dft"], [366, 1, 1, "", "diagflat"], [366, 1, 1, "", "diff"], [366, 1, 1, "", "dirichlet"], [366, 1, 1, "", "dropout1d"], [366, 1, 1, "", "dropout3d"], [366, 1, 1, "", "dsplit"], [366, 1, 1, "", "dstack"], [366, 1, 1, "", "eig"], [366, 1, 1, "", "eigh_tridiagonal"], [366, 1, 1, "", "eigvals"], [366, 1, 1, "", "embedding"], [366, 1, 1, "", "exp2"], [366, 1, 1, "", "expand"], [366, 1, 1, "", "eye_like"], [366, 1, 1, "", "fft"], [366, 1, 1, "", "fix"], [366, 1, 1, "", "flatten"], [366, 1, 1, "", "fliplr"], [366, 1, 1, "", "flipud"], [366, 1, 1, "", "float_power"], [366, 1, 1, "", "fmax"], [366, 1, 1, "", "fmin"], [366, 1, 1, "", "frexp"], [366, 1, 1, "", "gamma"], [366, 1, 1, "", "gcd"], [366, 1, 1, "", "gradient"], [366, 1, 1, "", "hamming_window"], [366, 1, 1, "", "handle_array_function"], [366, 1, 1, "", "handle_array_like_without_promotion"], [366, 1, 1, "", "handle_exceptions"], [366, 1, 1, "", "handle_nestable"], [366, 1, 1, "", "handle_out_argument"], [366, 1, 1, "", "handle_view"], [366, 1, 1, "", "hann_window"], [366, 1, 1, "", "heaviside"], [366, 1, 1, "", "hsplit"], [366, 1, 1, "", "hstack"], [366, 1, 1, "", "hypot"], [366, 1, 1, "", "i0"], [366, 1, 1, "", "ifft"], [366, 1, 1, "", "imag"], [366, 1, 1, "", "infer_device"], [366, 1, 1, "", "infer_dtype"], [366, 1, 1, "", "inputs_to_native_arrays"], [366, 1, 1, "", "instance_norm"], [366, 1, 1, "", "integer_arrays_to_float"], [366, 1, 1, "", "interp"], [366, 1, 1, "", "interpolate"], [366, 1, 1, "", "is_ivy_sparse_array"], [366, 1, 1, "", "is_native_sparse_array"], [366, 1, 1, "", "isclose"], [366, 1, 1, "", "kaiser_bessel_derived_window"], [366, 1, 1, "", "kaiser_window"], [366, 1, 1, "", "kron"], [366, 1, 1, "", "l2_normalize"], [366, 1, 1, "", "lcm"], [366, 1, 1, "", "ldexp"], [366, 1, 1, "", "lexsort"], [366, 1, 1, "", "logaddexp2"], [366, 1, 1, "", "logit"], [366, 1, 1, "", "logsigmoid"], [366, 1, 1, "", "lp_normalize"], [366, 1, 1, "", "matrix_exp"], [366, 1, 1, "", "max_pool1d"], [366, 1, 1, "", "max_pool2d"], [366, 1, 1, "", "max_pool3d"], [366, 1, 1, "", "median"], [366, 1, 1, "", "moveaxis"], [366, 1, 1, "", "msort"], [366, 1, 1, "", "multi_dot"], [366, 1, 1, "", "nan_to_num"], [366, 1, 1, "", "nanmean"], [366, 1, 1, "", "nanmedian"], [366, 1, 1, "", "nansum"], [366, 1, 1, "", "native_sparse_array"], [366, 1, 1, "", "native_sparse_array_to_indices_values_and_shape"], [366, 1, 1, "", "ndenumerate"], [366, 1, 1, "", "ndindex"], [366, 1, 1, "", "nextafter"], [366, 1, 1, "", "outputs_to_ivy_arrays"], [366, 1, 1, "", "pad"], [366, 1, 1, "", "poisson"], [366, 1, 1, "", "prelu"], [366, 1, 1, "", "quantile"], [366, 1, 1, "", "real"], [366, 1, 1, "", "relu6"], [366, 1, 1, "", "rot90"], [366, 1, 1, "", "selu"], [366, 1, 1, "", "signbit"], [366, 1, 1, "", "sinc"], [366, 1, 1, "", "take_along_axis"], [366, 1, 1, "", "thresholded_relu"], [366, 1, 1, "", "to_native_arrays_and_back"], [366, 1, 1, "", "top_k"], [366, 1, 1, "", "trapz"], [366, 1, 1, "", "tril_indices"], [366, 1, 1, "", "triu_indices"], [366, 1, 1, "", "unravel_index"], [366, 1, 1, "", "vorbis_window"], [366, 1, 1, "", "vsplit"], [366, 1, 1, "", "vstack"], [366, 1, 1, "", "xlogy"], [366, 1, 1, "", "zeta"]], "ivy.functional.ivy.experimental.SparseArray": [[366, 0, 1, "", "__init__"], [366, 5, 1, "", "ccol_indices"], [366, 5, 1, "", "col_indices"], [366, 5, 1, "", "coo_indices"], [366, 5, 1, "", "crow_indices"], [366, 5, 1, "", "data"], [366, 5, 1, "", "dense_shape"], [366, 5, 1, "", "row_indices"], [366, 0, 1, "", "to_dense_array"], [366, 5, 1, "", "values"]], "ivy.functional.ivy.general": [[367, 3, 1, "", "ArrayMode"], [367, 1, 1, "", "all_equal"], [367, 1, 1, "", "arg_info"], [367, 1, 1, "", "arg_names"], [367, 1, 1, "", "array_equal"], [367, 1, 1, "", "assert_supports_inplace"], [367, 1, 1, "", "cache_fn"], [367, 1, 1, "", "clip_matrix_norm"], [367, 1, 1, "", "clip_vector_norm"], [367, 1, 1, "", "container_types"], [367, 1, 1, "", "current_backend_str"], [367, 1, 1, "", "default"], [367, 1, 1, "", "einops_rearrange"], [367, 1, 1, "", "einops_reduce"], [367, 1, 1, "", "einops_repeat"], [367, 1, 1, "", "exists"], [367, 1, 1, "", "fourier_encode"], [367, 1, 1, "", "function_supported_devices_and_dtypes"], [367, 1, 1, "", "function_unsupported_devices_and_dtypes"], [367, 1, 1, "", "gather"], [367, 1, 1, "", "gather_nd"], [367, 1, 1, "", "get_all_arrays_in_memory"], [367, 1, 1, "", "get_array_mode"], [367, 1, 1, "", "get_exception_trace_mode"], [367, 1, 1, "", "get_item"], [367, 1, 1, "", "get_min_base"], [367, 1, 1, "", "get_min_denominator"], [367, 1, 1, "", "get_nestable_mode"], [367, 1, 1, "", "get_num_dims"], [367, 1, 1, "", "get_queue_timeout"], [367, 1, 1, "", "get_referrers_recursive"], [367, 1, 1, "", "get_show_func_wrapper_trace_mode"], [367, 1, 1, "", "get_tmp_dir"], [367, 1, 1, "", "has_nans"], [367, 1, 1, "", "inplace_arrays_supported"], [367, 1, 1, "", "inplace_decrement"], [367, 1, 1, "", "inplace_increment"], [367, 1, 1, "", "inplace_update"], [367, 1, 1, "", "inplace_variables_supported"], [367, 1, 1, "", "is_array"], [367, 1, 1, "", "is_ivy_array"], [367, 1, 1, "", "is_ivy_container"], [367, 1, 1, "", "is_native_array"], [367, 1, 1, "", "isin"], [367, 1, 1, "", "isscalar"], [367, 1, 1, "", "match_kwargs"], [367, 1, 1, "", "multiprocessing"], [367, 1, 1, "", "num_arrays_in_memory"], [367, 1, 1, "", "print_all_arrays_in_memory"], [367, 1, 1, "", "scatter_flat"], [367, 1, 1, "", "scatter_nd"], [367, 1, 1, "", "set_array_mode"], [367, 1, 1, "", "set_exception_trace_mode"], [367, 1, 1, "", "set_min_base"], [367, 1, 1, "", "set_min_denominator"], [367, 1, 1, "", "set_nestable_mode"], [367, 1, 1, "", "set_queue_timeout"], [367, 1, 1, "", "set_shape_array_mode"], [367, 1, 1, "", "set_show_func_wrapper_trace_mode"], [367, 1, 1, "", "set_tmp_dir"], [367, 1, 1, "", "shape"], [367, 1, 1, "", "shape_array_mode"], [367, 1, 1, "", "stable_divide"], [367, 1, 1, "", "stable_pow"], [367, 1, 1, "", "supports_inplace_updates"], [367, 1, 1, "", "to_ivy_shape"], [367, 1, 1, "", "to_list"], [367, 1, 1, "", "to_native_shape"], [367, 1, 1, "", "to_numpy"], [367, 1, 1, "", "to_scalar"], [367, 1, 1, "", "try_else_none"], [367, 1, 1, "", "unset_array_mode"], [367, 1, 1, "", "unset_exception_trace_mode"], [367, 1, 1, "", "unset_nestable_mode"], [367, 1, 1, "", "unset_queue_timeout"], [367, 1, 1, "", "unset_shape_array_mode"], [367, 1, 1, "", "unset_show_func_wrapper_trace_mode"], [367, 1, 1, "", "value_is_nan"], [367, 1, 1, "", "vmap"]], "ivy.functional.ivy.general.ArrayMode": [[367, 0, 1, "", "__init__"]], "ivy.functional.ivy.gradients": [[368, 3, 1, "", "GradientTracking"], [368, 1, 1, "", "adam_step"], [368, 1, 1, "", "adam_update"], [368, 1, 1, "", "execute_with_gradients"], [368, 1, 1, "", "grad"], [368, 1, 1, "", "gradient_descent_update"], [368, 1, 1, "", "jac"], [368, 1, 1, "", "lamb_update"], [368, 1, 1, "", "lars_update"], [368, 1, 1, "", "optimizer_update"], [368, 1, 1, "", "set_with_grads"], [368, 1, 1, "", "stop_gradient"], [368, 1, 1, "", "unset_with_grads"], [368, 1, 1, "", "value_and_grad"], [368, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[368, 0, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[369, 1, 1, "", "conv"], [369, 1, 1, "", "conv1d"], [369, 1, 1, "", "conv1d_transpose"], [369, 1, 1, "", "conv2d"], [369, 1, 1, "", "conv2d_transpose"], [369, 1, 1, "", "conv3d"], [369, 1, 1, "", "conv3d_transpose"], [369, 1, 1, "", "conv_general_dilated"], [369, 1, 1, "", "conv_general_transpose"], [369, 1, 1, "", "depthwise_conv2d"], [369, 1, 1, "", "dropout"], [369, 1, 1, "", "linear"], [369, 1, 1, "", "lstm_update"], [369, 1, 1, "", "multi_head_attention"], [369, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[370, 1, 1, "", "cholesky"], [370, 1, 1, "", "cross"], [370, 1, 1, "", "det"], [370, 1, 1, "", "diag"], [370, 1, 1, "", "diagonal"], [370, 1, 1, "", "eig"], [370, 1, 1, "", "eigh"], [370, 1, 1, "", "eigvalsh"], [370, 1, 1, "", "inner"], [370, 1, 1, "", "inv"], [370, 1, 1, "", "lu_factor"], [370, 1, 1, "", "matmul"], [370, 1, 1, "", "matrix_norm"], [370, 1, 1, "", "matrix_power"], [370, 1, 1, "", "matrix_rank"], [370, 1, 1, "", "matrix_transpose"], [370, 1, 1, "", "outer"], [370, 1, 1, "", "pinv"], [370, 1, 1, "", "qr"], [370, 1, 1, "", "slogdet"], [370, 1, 1, "", "solve"], [370, 1, 1, "", "svd"], [370, 1, 1, "", "svdvals"], [370, 1, 1, "", "tensordot"], [370, 1, 1, "", "tensorsolve"], [370, 1, 1, "", "trace"], [370, 1, 1, "", "vander"], [370, 1, 1, "", "vecdot"], [370, 1, 1, "", "vector_norm"], [370, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[371, 1, 1, "", "binary_cross_entropy"], [371, 1, 1, "", "cross_entropy"], [371, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[372, 1, 1, "", "clip"], [372, 1, 1, "", "concat"], [372, 1, 1, "", "constant_pad"], [372, 1, 1, "", "expand_dims"], [372, 1, 1, "", "flip"], [372, 1, 1, "", "permute_dims"], [372, 1, 1, "", "repeat"], [372, 1, 1, "", "reshape"], [372, 1, 1, "", "roll"], [372, 1, 1, "", "split"], [372, 1, 1, "", "squeeze"], [372, 1, 1, "", "stack"], [372, 1, 1, "", "swapaxes"], [372, 1, 1, "", "tile"], [372, 1, 1, "", "unstack"], [372, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[373, 1, 1, "", "fomaml_step"], [373, 1, 1, "", "maml_step"], [373, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[374, 1, 1, "", "all_nested_indices"], [374, 1, 1, "", "copy_nest"], [374, 1, 1, "", "duplicate_array_index_chains"], [374, 1, 1, "", "index_nest"], [374, 1, 1, "", "insert_into_nest_at_index"], [374, 1, 1, "", "insert_into_nest_at_indices"], [374, 1, 1, "", "map"], [374, 1, 1, "", "map_nest_at_index"], [374, 1, 1, "", "map_nest_at_indices"], [374, 1, 1, "", "multi_index_nest"], [374, 1, 1, "", "nested_any"], [374, 1, 1, "", "nested_argwhere"], [374, 1, 1, "", "nested_map"], [374, 1, 1, "", "nested_multi_map"], [374, 1, 1, "", "prune_empty"], [374, 1, 1, "", "prune_nest_at_index"], [374, 1, 1, "", "prune_nest_at_indices"], [374, 1, 1, "", "set_nest_at_index"], [374, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[375, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[376, 1, 1, "", "multinomial"], [376, 1, 1, "", "randint"], [376, 1, 1, "", "random_normal"], [376, 1, 1, "", "random_uniform"], [376, 1, 1, "", "seed"], [376, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[377, 1, 1, "", "argmax"], [377, 1, 1, "", "argmin"], [377, 1, 1, "", "argwhere"], [377, 1, 1, "", "nonzero"], [377, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[378, 1, 1, "", "unique_all"], [378, 1, 1, "", "unique_counts"], [378, 1, 1, "", "unique_inverse"], [378, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[379, 1, 1, "", "argsort"], [379, 1, 1, "", "searchsorted"], [379, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[380, 1, 1, "", "cumprod"], [380, 1, 1, "", "cumsum"], [380, 1, 1, "", "einsum"], [380, 1, 1, "", "max"], [380, 1, 1, "", "mean"], [380, 1, 1, "", "min"], [380, 1, 1, "", "prod"], [380, 1, 1, "", "std"], [380, 1, 1, "", "sum"], [380, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[381, 1, 1, "", "all"], [381, 1, 1, "", "any"]], "ivy.nested_array": [[515, 2, 0, "-", "nested_array"]], "ivy.nested_array.nested_array": [[515, 3, 1, "", "NestedArray"]], "ivy.nested_array.nested_array.NestedArray": [[515, 0, 1, "", "__init__"], [515, 5, 1, "", "data"], [515, 5, 1, "", "device"], [515, 5, 1, "", "dtype"], [515, 0, 1, "", "from_row_lengths"], [515, 0, 1, "", "from_row_split"], [515, 5, 1, "", "ndim"], [515, 0, 1, "", "nested_array"], [515, 0, 1, "", "reshape"], [515, 5, 1, "", "shape"], [515, 0, 1, "", "unbind"]], "ivy.stateful": [[50, 2, 0, "-", "activations"], [51, 2, 0, "-", "converters"], [52, 2, 0, "-", "helpers"], [53, 2, 0, "-", "initializers"], [54, 2, 0, "-", "layers"], [55, 2, 0, "-", "module"], [56, 2, 0, "-", "norms"], [57, 2, 0, "-", "optimizers"], [58, 2, 0, "-", "sequential"]], "ivy.stateful.activations": [[50, 3, 1, "", "GEGLU"], [50, 3, 1, "", "GELU"], [50, 3, 1, "", "LeakyReLU"], [50, 3, 1, "", "LogSoftmax"], [50, 3, 1, "", "Mish"], [50, 3, 1, "", "ReLU"], [50, 3, 1, "", "Softmax"], [50, 3, 1, "", "Softplus"]], "ivy.stateful.activations.GEGLU": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[50, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[50, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[51, 3, 1, "", "ModuleConverters"], [51, 1, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[51, 0, 1, "", "from_haiku_module"], [51, 0, 1, "", "from_keras_module"], [51, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[52, 3, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[52, 0, 1, "", "check_submod_rets"], [52, 0, 1, "", "get_mod_key"], [52, 0, 1, "", "mod_depth"], [52, 0, 1, "", "mod_height"], [52, 0, 1, "", "mod_with_top_mod_key_chain"], [52, 0, 1, "", "show_mod_in_top_mod"], [52, 0, 1, "", "show_structure"], [52, 0, 1, "", "show_v_in_top_v"], [52, 0, 1, "", "sub_mods"], [52, 0, 1, "", "track_submod_call_order"], [52, 0, 1, "", "track_submod_rets"], [52, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[53, 3, 1, "", "Constant"], [53, 3, 1, "", "FirstLayerSiren"], [53, 3, 1, "", "GlorotUniform"], [53, 3, 1, "", "Initializer"], [53, 3, 1, "", "KaimingNormal"], [53, 3, 1, "", "Ones"], [53, 3, 1, "", "Siren"], [53, 3, 1, "", "Uniform"], [53, 3, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[53, 0, 1, "", "__init__"], [53, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[53, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[53, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[53, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[53, 0, 1, "", "__init__"], [53, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[53, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[53, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[53, 0, 1, "", "__init__"], [53, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[53, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[54, 3, 1, "", "Conv1D"], [54, 3, 1, "", "Conv1DTranspose"], [54, 3, 1, "", "Conv2D"], [54, 3, 1, "", "Conv2DTranspose"], [54, 3, 1, "", "Conv3D"], [54, 3, 1, "", "Conv3DTranspose"], [54, 3, 1, "", "DepthwiseConv2D"], [54, 3, 1, "", "Dropout"], [54, 3, 1, "", "LSTM"], [54, 3, 1, "", "Linear"], [54, 3, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[54, 0, 1, "", "__init__"], [54, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[54, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[54, 0, 1, "", "__init__"]], "ivy.stateful.module": [[55, 3, 1, "", "Module"]], "ivy.stateful.module.Module": [[55, 0, 1, "", "__call__"], [55, 0, 1, "", "__init__"], [55, 0, 1, "", "build"], [55, 5, 1, "", "build_mode"], [55, 5, 1, "", "built_"], [55, 0, 1, "", "compile"], [55, 0, 1, "", "save_weights"], [55, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[56, 3, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[56, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[57, 3, 1, "", "Adam"], [57, 3, 1, "", "LAMB"], [57, 3, 1, "", "LARS"], [57, 3, 1, "", "Optimizer"], [57, 3, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[57, 0, 1, "", "__init__"], [57, 0, 1, "", "set_state"], [57, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[57, 0, 1, "", "__init__"], [57, 0, 1, "", "set_state"], [57, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[57, 0, 1, "", "__init__"], [57, 0, 1, "", "set_state"], [57, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[57, 0, 1, "", "__init__"], [57, 0, 1, "", "set_state"], [57, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[57, 0, 1, "", "__init__"], [57, 0, 1, "", "set_state"], [57, 5, 1, "", "state"]], "ivy.stateful.sequential": [[58, 3, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[58, 0, 1, "", "__init__"]], "ivy.utils": [[526, 2, 0, "-", "assertions"], [527, 2, 0, "-", "backend"], [528, 2, 0, "-", "dynamic_import"], [529, 2, 0, "-", "exceptions"], [530, 2, 0, "-", "inspection"], [531, 2, 0, "-", "verbosity"]], "ivy.utils.assertions": [[526, 1, 1, "", "check_all"], [526, 1, 1, "", "check_all_or_any_fn"], [526, 1, 1, "", "check_any"], [526, 1, 1, "", "check_dimensions"], [526, 1, 1, "", "check_elem_in_list"], [526, 1, 1, "", "check_equal"], [526, 1, 1, "", "check_exists"], [526, 1, 1, "", "check_false"], [526, 1, 1, "", "check_fill_value_and_dtype_are_compatible"], [526, 1, 1, "", "check_gather_input_valid"], [526, 1, 1, "", "check_gather_nd_input_valid"], [526, 1, 1, "", "check_greater"], [526, 1, 1, "", "check_inplace_sizes_valid"], [526, 1, 1, "", "check_isinstance"], [526, 1, 1, "", "check_kernel_padding_size"], [526, 1, 1, "", "check_less"], [526, 1, 1, "", "check_one_way_broadcastable"], [526, 1, 1, "", "check_same_dtype"], [526, 1, 1, "", "check_shape"], [526, 1, 1, "", "check_shapes_broadcastable"], [526, 1, 1, "", "check_true"]], "ivy.utils.dynamic_import": [[528, 1, 1, "", "import_module"]], "ivy.utils.exceptions": [[529, 7, 1, "", "IvyBackendException"], [529, 7, 1, "", "IvyError"], [529, 7, 1, "", "IvyException"], [529, 7, 1, "", "IvyNotImplementedException"], [529, 1, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.IvyBackendException": [[529, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[529, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[529, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[529, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[530, 1, 1, "", "add_array_specs"], [530, 1, 1, "", "fn_array_spec"]], "ivy.utils.verbosity": [[531, 1, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[516, 2, 0, "-", "assertions"], [517, 2, 0, "-", "available_frameworks"], [518, 2, 0, "-", "function_testing"], [519, 2, 0, "-", "globals"], [520, 2, 0, "-", "hypothesis_helpers"], [521, 2, 0, "-", "structs"], [522, 2, 0, "-", "test_parameter_flags"], [523, 2, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[516, 1, 1, "", "assert_all_close"], [516, 1, 1, "", "assert_same_type_and_shape"], [516, 1, 1, "", "check_unsupported_device"], [516, 1, 1, "", "check_unsupported_device_and_dtype"], [516, 1, 1, "", "check_unsupported_dtype"], [516, 1, 1, "", "test_unsupported_function"], [516, 1, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[517, 1, 1, "", "available_frameworks"], [517, 1, 1, "", "ground_truth"]], "ivy_tests.test_ivy.helpers.function_testing": [[518, 1, 1, "", "args_to_container"], [518, 1, 1, "", "args_to_frontend"], [518, 1, 1, "", "arrays_to_frontend"], [518, 1, 1, "", "as_lists"], [518, 1, 1, "", "compiled_if_required"], [518, 1, 1, "", "convtrue"], [518, 1, 1, "", "create_args_kwargs"], [518, 1, 1, "", "empty_func"], [518, 1, 1, "", "flatten"], [518, 1, 1, "", "flatten_and_to_np"], [518, 1, 1, "", "flatten_frontend"], [518, 1, 1, "", "flatten_frontend_to_np"], [518, 1, 1, "", "flatten_fw_and_to_np"], [518, 1, 1, "", "framework_comparator"], [518, 1, 1, "", "get_frontend_ret"], [518, 1, 1, "", "get_ret_and_flattened_np_array"], [518, 1, 1, "", "gradient_incompatible_function"], [518, 1, 1, "", "gradient_test"], [518, 1, 1, "", "gradient_unsupported_dtypes"], [518, 1, 1, "", "kwargs_to_args_n_kwargs"], [518, 1, 1, "", "make_json_pickable"], [518, 1, 1, "", "test_frontend_function"], [518, 1, 1, "", "test_frontend_method"], [518, 1, 1, "", "test_function"], [518, 1, 1, "", "test_method"], [518, 1, 1, "", "var_fn"]], "ivy_tests.test_ivy.helpers.globals": [[519, 7, 1, "", "InterruptedTest"], [519, 3, 1, "", "TestData"], [519, 1, 1, "", "remove_all_current_framework"], [519, 1, 1, "", "setup_api_test"], [519, 1, 1, "", "setup_frontend_test"], [519, 1, 1, "", "teardown_api_test"], [519, 1, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[519, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[519, 0, 1, "", "__init__"], [519, 4, 1, "", "fn_name"], [519, 4, 1, "", "fn_tree"], [519, 4, 1, "", "is_method"], [519, 4, 1, "", "supported_device_dtypes"], [519, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.structs": [[521, 3, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[521, 0, 1, "", "__init__"], [521, 4, 1, "", "framework_init_module"], [521, 4, 1, "", "init_name"], [521, 4, 1, "", "ivy_init_module"], [521, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[522, 3, 1, "", "FrontendFunctionTestFlags"], [522, 3, 1, "", "FrontendMethodTestFlags"], [522, 3, 1, "", "FunctionTestFlags"], [522, 3, 1, "", "InitMethodTestFlags"], [522, 3, 1, "", "MethodTestFlags"], [522, 3, 1, "", "TestFlags"], [522, 1, 1, "", "as_cont"], [522, 1, 1, "", "build_flag"], [522, 1, 1, "", "frontend_function_flags"], [522, 1, 1, "", "frontend_method_flags"], [522, 1, 1, "", "function_flags"], [522, 1, 1, "", "init_method_flags"], [522, 1, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[522, 0, 1, "", "__init__"], [522, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[522, 0, 1, "", "__init__"], [522, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[522, 0, 1, "", "__init__"], [522, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[522, 0, 1, "", "__init__"], [522, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[522, 0, 1, "", "__init__"], [522, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[522, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[523, 1, 1, "", "handle_frontend_method"], [523, 1, 1, "", "handle_frontend_test"], [523, 1, 1, "", "handle_method"], [523, 1, 1, "", "handle_test"], [523, 1, 1, "", "num_positional_args"], [523, 1, 1, "", "num_positional_args_method"], [523, 1, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:function", "2": "py:module", "3": "py:class", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "function", "Python function"], "2": ["py", "module", "Python module"], "3": ["py", "class", "Python class"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 568, 573, 583, 588], "compil": [0, 568, 573, 580, 585, 587, 588], "api": [0, 1, 535, 541, 543, 545, 549, 550, 560, 565, 568, 570, 572, 573, 579, 586, 588], "us": [0, 1, 532, 539, 542, 545, 560, 563, 571], "eager": 0, "v": [0, 535, 576], "lazi": 0, "arrai": [0, 47, 76, 515, 535, 545, 546, 550, 557, 570, 579], "cach": 0, "gener": [0, 9, 32, 367, 560, 564, 566], "state": [0, 49, 572, 576], "sharp": [0, 1], "bit": [0, 1], "exampl": [0, 1, 532, 538, 553, 557, 560, 563, 566], "transpil": [1, 532, 573], "function": [1, 518, 541, 549, 551, 552, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 573, 576], "librari": [1, 538, 575], "modul": [1, 55, 551, 552, 572], "ivi": [1, 59, 532, 538, 541, 543, 546, 548, 550, 553, 555, 560, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 575, 588], "unifi": [1, 536, 570, 584, 588], "activ": [2, 24, 50, 359], "convers": [3, 26], "creation": [4, 27, 362], "data": [5, 28, 363, 378, 494, 495, 496, 497, 551, 562, 564, 571, 576], "type": [5, 28, 363, 551, 558, 562, 576], "devic": [6, 29, 364, 552, 557, 562], "elementwis": [7, 30, 365], "experiment": [8, 31, 366, 541, 543], "gradient": [10, 33, 368, 560], "imag": [11, 34, 539, 548], "layer": [12, 35, 54, 369], "linear": [13, 36, 370, 396], "algebra": [13, 36, 370], "loss": [14, 37, 371], "manipul": [15, 38, 372], "norm": [16, 39, 56, 375], "random": [17, 40, 376], "search": [18, 41, 377], "set": [19, 42, 378, 532, 542, 547], "sort": [20, 43, 379, 500], "statist": [21, 44, 380], "util": [22, 45, 381, 525], "wrap": [23, 46, 559], "base": 25, "contain": [48, 543, 549, 571], "convert": [51, 573], "helper": [52, 520, 523, 524, 563, 564, 565], "initi": [53, 572], "optim": [57, 572], "sequenti": 58, "deseri": 60, "gelu": 61, "get": [62, 543], "leaky_relu": 63, "log_softmax": 64, "mish": 65, "relu": 66, "sigmoid": 67, "softmax": 68, "softplu": 69, "ifels": 70, "whileloop": 71, "if_els": 72, "while_loop": 73, "_ivy_to_n": 74, "arang": 75, "asarrai": 77, "asarray_handle_nest": 78, "asarray_infer_devic": 79, "asarray_to_native_arrays_and_back": 80, "copy_arrai": 81, "empti": 82, "empty_lik": 83, "ey": 84, "from_dlpack": 85, "note": [85, 362], "full": [86, 563], "full_lik": 87, "linspac": 88, "logspac": 89, "meshgrid": 90, "native_arrai": 91, "one_hot": 92, "ones": 93, "ones_lik": 94, "tril": 95, "triu": 96, "zero": 97, "zeros_lik": 98, "_check_complex128": 99, "_check_float64": 100, "_get_dtyp": 101, "_get_function_list": 102, "_get_functions_from_str": 103, "_handle_nestable_dtype_info": 104, "_is_valid_dtypes_attribut": 105, "_lstrip_lin": 106, "_nested_get": 107, "as_ivy_dtyp": 108, "as_native_dtyp": 109, "astyp": 110, "broadcast_arrai": 111, "broadcast_to": 112, "can_cast": 113, "check_float": 114, "closest_valid_dtyp": 115, "default_complex_dtyp": 116, "default_dtyp": 117, "default_float_dtyp": 118, "default_int_dtyp": 119, "default_uint_dtyp": 120, "dtype": [121, 557], "dtype_bit": 122, "finfo": 123, "function_supported_dtyp": 124, "function_unsupported_dtyp": 125, "iinfo": 126, "infer_default_dtyp": 127, "invalid_dtyp": 128, "is_bool_dtyp": 129, "is_complex_dtyp": 130, "is_float_dtyp": 131, "is_int_dtyp": 132, "is_native_dtyp": 133, "is_uint_dtyp": 134, "promote_typ": 135, "promote_types_of_input": 136, "result_typ": 137, "set_default_complex_dtyp": 138, "set_default_dtyp": 139, "set_default_float_dtyp": 140, "set_default_int_dtyp": 141, "set_default_uint_dtyp": 142, "type_promote_arrai": 143, "unset_default_complex_dtyp": 144, "unset_default_dtyp": 145, "unset_default_float_dtyp": 146, "unset_default_int_dtyp": 147, "unset_default_uint_dtyp": 148, "valid_dtyp": 149, "_get_devic": 150, "_get_nvml_gpu_handl": 151, "_is_valid_devices_attribut": 152, "as_ivy_dev": 153, "as_native_dev": 154, "clear_cached_mem_on_dev": 155, "default_devic": 156, "dev": 157, "dev_util": 158, "function_supported_devic": 159, "function_unsupported_devic": 160, "get_all_ivy_arrays_on_dev": 161, "gpu_is_avail": 162, "num_cpu_cor": 163, "num_gpu": 164, "num_ivy_arrays_on_dev": 165, "percent_used_mem_on_dev": 166, "print_all_ivy_arrays_on_dev": 167, "set_default_devic": 168, "set_split_factor": 169, "split_factor": 170, "split_func_cal": 171, "to_devic": 172, "total_mem_on_dev": 173, "tpu_is_avail": 174, "unset_default_devic": 175, "used_mem_on_dev": 176, "ab": 177, "aco": 178, "acosh": 179, "add": [180, 553, 563, 588], "asin": 181, "asinh": 182, "atan": 183, "atan2": 184, "atanh": 185, "bitwise_and": 186, "bitwise_invert": 187, "bitwise_left_shift": 188, "bitwise_or": 189, "bitwise_right_shift": 190, "bitwise_xor": 191, "ceil": 192, "co": 193, "cosh": 194, "deg2rad": 195, "divid": 196, "equal": 197, "erf": 198, "exp": 199, "expm1": 200, "floor": 201, "floor_divid": 202, "fmod": 203, "greater": 204, "greater_equ": 205, "isfinit": 206, "isinf": 207, "isnan": 208, "isreal": 209, "less": 210, "less_equ": 211, "log": [212, 542], "log10": 213, "log1p": 214, "log2": 215, "logaddexp": 216, "logical_and": 217, "logical_not": 218, "logical_or": 219, "logical_xor": 220, "maximum": 221, "minimum": 222, "multipli": 223, "neg": 224, "not_equ": 225, "posit": [226, 557], "pow": 227, "rad2deg": 228, "reciproc": 229, "remaind": 230, "round": 231, "sign": 232, "sin": 233, "sinh": 234, "sqrt": 235, "squar": 236, "subtract": 237, "tan": [238, 553, 563], "tanh": 239, "trunc": 240, "trunc_divid": 241, "_all_dnd_combin": 242, "_dnd_dict_differ": 243, "_dnd_dict_intersect": 244, "_dnd_dict_union": 245, "_get_devices_and_dtyp": 246, "_is_valid_device_and_dtypes_attribut": 247, "_parse_ellipsi": 248, "_valid_attrib_combin": 249, "all_equ": 250, "arg_info": 251, "arg_nam": 252, "array_equ": 253, "assert_supports_inplac": 254, "cache_fn": 255, "clip_matrix_norm": 256, "clip_vector_norm": 257, "container_typ": 258, "current_backend_str": 259, "default": 260, "einops_rearrang": 261, "einops_reduc": 262, "einops_repeat": 263, "exist": [264, 539], "fourier_encod": 265, "function_supported_devices_and_dtyp": 266, "function_unsupported_devices_and_dtyp": 267, "gather": 268, "gather_nd": 269, "get_all_arrays_in_memori": 270, "get_array_mod": 271, "get_exception_trace_mod": 272, "get_item": 273, "get_min_bas": 274, "get_min_denomin": 275, "get_nestable_mod": 276, "get_num_dim": 277, "get_queue_timeout": 278, "get_referrers_recurs": 279, "get_show_func_wrapper_trace_mod": 280, "get_tmp_dir": 281, "has_nan": 282, "inplace_arrays_support": 283, "inplace_decr": 284, "inplace_incr": 285, "inplace_upd": 286, "inplace_variables_support": 287, "is_arrai": 288, "is_ivy_arrai": 289, "is_ivy_contain": 290, "is_native_arrai": 291, "isin": 292, "isscalar": 293, "match_kwarg": 294, "multiprocess": 295, "num_arrays_in_memori": 296, "print_all_arrays_in_memori": 297, "scatter_flat": 298, "scatter_nd": 299, "set_array_mod": 300, "paramet": [300, 301, 304, 306, 307, 367, 522], "set_exception_trace_mod": 301, "set_min_bas": 302, "set_min_denomin": 303, "set_nestable_mod": 304, "set_queue_timeout": 305, "set_shape_array_mod": 306, "set_show_func_wrapper_trace_mod": 307, "set_tmp_dir": 308, "shape": [309, 378, 494, 495, 496, 497, 576], "shape_array_mod": 310, "stable_divid": 311, "stable_pow": 312, "supports_inplace_upd": 313, "to_ivy_shap": 314, "to_list": 315, "to_native_shap": 316, "to_numpi": 317, "to_scalar": 318, "try_else_non": 319, "unset_array_mod": 320, "unset_exception_trace_mod": 321, "unset_nestable_mod": 322, "unset_queue_timeout": 323, "unset_shape_array_mod": 324, "unset_show_func_wrapper_trace_mod": 325, "value_is_nan": 326, "vmap": 327, "_arrays_to_float_vari": 328, "_check_if_empti": 329, "_get_duplicate_index_chain": 330, "_get_native_variables_and_indic": 331, "_get_native_i": 332, "_get_required_float_vari": 333, "_get_required_native_vari": 334, "_get_y_and_ret_idx": 335, "_idxs_to_str": 336, "_is_vari": 337, "_non_finite_to_zero": 338, "_process_func_ret_and_grad": 339, "_set_dupl": 340, "_stop_grad_and_index": 341, "_to_ivi": 342, "_variabl": 343, "_variable_data": 344, "adam_step": 345, "adam_upd": 346, "execute_with_gradi": [347, 560], "grad": 348, "gradient_descent_upd": 349, "jac": 350, "lamb_upd": 351, "lars_upd": 352, "optimizer_upd": 353, "set_with_grad": 354, "stop_gradi": 355, "unset_with_grad": 356, "value_and_grad": 357, "with_grad": 358, "constant": 360, "control": [361, 576], "flow": [361, 576], "op": 361, "meta": 373, "nest": [374, 515], "depend": [378, 494, 495, 496, 497], "output": [378, 494, 495, 496, 497], "_deconv_length": 382, "_get_x_data_format": 383, "_handle_pad": 384, "conv": 385, "conv1d": 386, "conv1d_transpos": 387, "conv2d": 388, "conv2d_transpos": 389, "conv3d": 390, "conv3d_transpos": 391, "conv_general_dil": 392, "conv_general_transpos": 393, "depthwise_conv2d": 394, "dropout": 395, "lstm_updat": 397, "multi_head_attent": 398, "scaled_dot_product_attent": 399, "choleski": 400, "cross": 401, "det": 402, "diag": 403, "diagon": 404, "eig": 405, "eigh": 406, "eigvalsh": 407, "inner": 408, "inv": 409, "lu_factor": 410, "matmul": 411, "matrix_norm": 412, "matrix_pow": 413, "matrix_rank": 414, "matrix_transpos": 415, "outer": 416, "pinv": 417, "qr": 418, "slogdet": 419, "solv": 420, "svd": 421, "svdval": 422, "tensordot": 423, "tensorsolv": 424, "trace": [425, 555], "vander": 426, "vecdot": 427, "vector_norm": 428, "vector_to_skew_symmetric_matrix": 429, "_reduce_loss": 430, "binary_cross_entropi": 431, "cross_entropi": 432, "sparse_cross_entropi": 433, "_calculate_out_shap": 434, "clip": 435, "concat": 436, "constant_pad": 437, "expand_dim": 438, "flip": 439, "permute_dim": 440, "repeat": 441, "reshap": 442, "roll": [443, 553], "split": 444, "squeez": 445, "stack": [446, 555], "swapax": 447, "tile": 448, "unstack": 449, "zero_pad": 450, "_compute_cost_and_update_grad": 451, "_train_task": [452, 453], "_train_tasks_batch": 454, "_train_tasks_with_for_loop": 455, "fomaml_step": 456, "maml_step": 457, "reptile_step": 458, "all_nested_indic": 459, "copy_nest": 460, "duplicate_array_index_chain": 461, "index_nest": 462, "insert_into_nest_at_index": 463, "insert_into_nest_at_indic": 464, "map": [465, 550], "map_nest_at_index": 466, "map_nest_at_indic": 467, "multi_index_nest": 468, "nested_ani": 469, "nested_argwher": 470, "nested_map": 471, "nested_multi_map": 472, "prune_empti": 473, "prune_nest_at_index": 474, "prune_nest_at_indic": 475, "set_nest_at_index": 476, "set_nest_at_indic": 477, "layer_norm": 478, "_check_bounds_and_get_shap": 479, "_check_shapes_broadcast": 480, "_check_valid_scal": 481, "_randint_check_dtype_and_bound": 482, "multinomi": 483, "randint": 484, "random_norm": 485, "random_uniform": 486, "seed": 487, "shuffl": 488, "argmax": 489, "argmin": 490, "argwher": 491, "nonzero": 492, "where": [493, 541], "unique_al": 494, "unique_count": 495, "unique_invers": 496, "unique_valu": 497, "argsort": 498, "searchsort": 499, "_get_promoted_type_of_operand": 501, "cumprod": 502, "cumsum": 503, "einsum": 504, "max": 505, "mean": 506, "min": 507, "prod": 508, "std": 509, "sum": 510, "var": 511, "all": 512, "ani": 513, "nested_arrai": 514, "assert": [516, 526, 555], "avail": 517, "framework": [517, 532, 560, 569, 582, 585, 588, 589], "test": [518, 522, 523, 542, 543, 545, 550, 563, 564], "global": 519, "hypothesi": [520, 542, 563, 564], "struct": 521, "flag": 522, "backend": [527, 547, 551, 560, 565, 568, 576], "dynam": [528, 576], "import": 528, "except": [529, 555], "inspect": 530, "verbos": 531, "content": 532, "when": [532, 566], "should": 532, "i": [532, 548, 566], "up": [532, 542], "instal": 532, "pip": 532, "docker": [532, 539, 542, 543, 548], "from": 532, "sourc": 532, "document": 532, "contribut": [532, 537], "commun": 532, "citat": 532, "background": 533, "ml": [534, 584, 588], "explos": 534, "standard": [535, 566, 579, 588], "skeptic": 535, "complimentari": 535, "competit": 535, "do": [535, 564], "work": [535, 578], "The": [535, 543, 548, 560, 562, 570, 576], "why": [536, 564], "No": [536, 542], "more": [536, 542, 566], "re": [536, 564], "implement": [536, 550, 560], "infinit": 536, "shelf": 536, "life": 536, "appli": [538, 575], "introduct": [538, 562, 563], "robot": [538, 575], "build": [539, 548, 568], "doc": [539, 548], "conveni": [539, 548, 558], "script": [539, 548], "hub": 539, "local": [539, 543], "without": [539, 563], "help": [540, 543], "resourc": 540, "open": 541, "task": 541, "format": [541, 556, 581, 588], "checklist": 541, "frontend": [541, 547, 562, 563, 573], "place": 541, "fork": [542, 543], "clone": [542, 550], "repo": 542, "pycharm": [542, 543], "virtual": 542, "environ": 542, "miniconda": 542, "venv": 542, "interpret": 542, "window": 542, "maco": 542, "ubuntu": 542, "detail": 542, "free": 542, "github": 542, "codespac": 542, "pre": [542, 556], "commit": [542, 543, 550, 556], "basic": [543, 562], "todo": 543, "list": 543, "issu": 543, "manag": 543, "your": [543, 564], "who": 543, "To": 543, "ask": 543, "With": 543, "command": 543, "line": 543, "browser": 543, "pull": [543, 550], "request": [543, 550], "small": 543, "often": 543, "interact": 543, "run": [543, 545, 548, 564], "most": 543, "out": [543, 557, 561], "id": [543, 545], "deep": 544, "dive": 544, "termin": 545, "regener": 545, "failur": 545, "skip": 545, "nativ": [546, 566], "handl": [546, 555, 576], "integr": [546, 550, 564], "custom": [546, 548, 560, 571, 576], "class": [546, 555, 562, 570], "version": [547, 565, 576], "support": [547, 551, 562, 576], "pipelin": [548, 550, 564, 576], "how": [548, 564], "builder": 548, "being": 548, "option": 548, "": 548, "structur": [548, 560, 576], "index": 548, "rst": 548, "partial_conf": 548, "py": 548, "prebuild": 548, "sh": 548, "extens": [548, 574], "custom_autosummari": 548, "hide": 548, "tabl": 548, "includ": 548, "fix": 548, "directori": 548, "substitut": 548, "caption": 548, "custom_build": 548, "discussion_link": 548, "skippable_funct": 548, "instanc": [549, 562, 563, 570], "method": [549, 562, 563, 570, 571], "static": 549, "special": [549, 562], "nestabl": [549, 557, 558], "continu": 550, "push": 550, "pr": 550, "trigger": 550, "A": [550, 566], "top": 550, "down": 550, "view": 550, "store": 550, "retriev": 550, "repositori": 550, "nitti": 550, "gritti": 550, "storag": 550, "space": 550, "unifyai": 550, "determin": 550, "coverag": 550, "workflow": 550, "multipl": 550, "runner": 550, "race": 550, "condit": 550, "period": 550, "manual": 550, "dispatch": 550, "ci": 550, "dashboard": 550, "promot": [551, 562], "argument": [551, 552, 557, 561, 562], "other": [551, 552], "unsupport": 551, "bug": 551, "superset": [551, 566], "docstr": [553, 554], "configur": [555, 571], "mode": 555, "func_wrapp": 555, "prune": 555, "handle_except": 555, "decor": [555, 564], "lint": 556, "check": [556, 576], "hook": 556, "keyword": 557, "input": 557, "number": 557, "oper": [557, 570, 576], "integ": 557, "sequenc": 557, "primari": 558, "composit": [558, 562], "mix": 558, "standalon": 558, "overview": 560, "usag": [560, 566], "signatur": 560, "an": 560, "design": [560, 565, 567], "our": 560, "polici": [560, 562], "specif": [560, 586, 587, 588], "consider": 560, "inplac": 561, "updat": 561, "copi": 561, "unus": 562, "miss": 562, "temporari": 562, "rule": 562, "numpi": [562, 582], "cast": 562, "duplic": [562, 566], "valu": 563, "alia": 563, "write": 564, "own": 564, "strategi": 564, "we": 564, "need": 564, "effect": 564, "bonu": 564, "extend": [564, 566], "featur": 564, "self": 564, "consist": 564, "explicit": 564, "test_array_funct": 564, "fail": 564, "navig": 565, "code": 565, "categor": 565, "submodul": 565, "pin": 565, "behaviour": 566, "what": [566, 588], "non": 566, "too": 566, "much": 566, "balanc": 566, "effici": 566, "maxim": 566, "block": 568, "handler": 568, "monkei": 570, "patch": 570, "construct": 571, "represent": 571, "recurs": 571, "built": 571, "ins": 571, "access": 571, "save": 571, "load": 571, "comparison": 571, "case": 571, "compartment": 571, "network": [571, 573], "weight": 571, "role": 573, "model": [573, 576], "mechan": 575, "vision": 575, "gym": 575, "memori": 575, "faq": 576, "maintain": 576, "size": 576, "gpu": 576, "deploy": 576, "auto": 576, "differenti": 576, "replica": 576, "parallel": 576, "altern": 576, "glossari": 577, "relat": 578, "infrastructur": [580, 588], "llvm": 580, "mlir": 580, "oneapi": 580, "exchang": [581, 588], "onnx": 581, "nnef": 581, "coreml": 581, "matlab": 582, "scipi": 582, "torch": [582, 583], "scikit": 582, "learn": 582, "theano": 582, "panda": 582, "julia": 582, "apach": [582, 585], "spark": 582, "mllib": 582, "caff": 582, "chainer": 582, "tensorflow": 582, "1": 582, "mxnet": 582, "cntk": 582, "pytorch": 582, "flux": 582, "jax": 582, "2": 582, "dex": 582, "languag": 582, "tracer": [583, 588], "tf": 583, "jaxpr": 583, "jit": 583, "fx": 583, "compani": [584, 588], "quansight": 584, "modular": 584, "octoml": 584, "multi": [585, 588], "vendor": [585, 586, 587, 588], "tvm": 585, "xla": 585, "gcc": 585, "tensorrt": 586, "cuda": 586, "icc": 587, "icx": 587, "nvcc": 587, "doe": 588, "wrapper": [588, 589], "eagerpi": 589, "kera": 589, "thinc": 589, "tensorli": 589, "neuropod": 589}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [1, "sharp-bits"]], "Examples": [[0, "examples"], [1, "examples"], [532, "examples"], [557, "examples"]], "Transpiler": [[1, "transpiler"]], "Transpiler API": [[1, "transpiler-api"]], "Using the transpiler": [[1, "using-the-transpiler"]], "Transpiling functions": [[1, "transpiling-functions"]], "Transpiling Libraries": [[1, "transpiling-libraries"]], "Transpiling Modules": [[1, "transpiling-modules"]], "Ivy.unify": [[1, "ivy-unify"]], "Activations": [[2, "module-ivy.data_classes.array.activations"], [24, "module-ivy.data_classes.container.activations"], [50, "module-ivy.stateful.activations"], [359, "activations"]], "Conversions": [[3, "module-ivy.data_classes.array.conversions"], [26, "module-ivy.data_classes.container.conversions"]], "Creation": [[4, "module-ivy.data_classes.array.creation"], [27, "module-ivy.data_classes.container.creation"], [362, "creation"]], "Data type": [[5, "module-ivy.data_classes.array.data_type"], [28, "module-ivy.data_classes.container.data_type"], [363, "data-type"]], "Device": [[6, "module-ivy.data_classes.array.device"], [29, "module-ivy.data_classes.container.device"], [364, "device"]], "Elementwise": [[7, "module-ivy.data_classes.array.elementwise"], [30, "module-ivy.data_classes.container.elementwise"], [365, "elementwise"]], "Experimental": [[8, "module-ivy.data_classes.array.experimental"], [31, "module-ivy.data_classes.container.experimental"], [366, "experimental"]], "General": [[9, "module-ivy.data_classes.array.general"], [32, "module-ivy.data_classes.container.general"], [367, "general"]], "Gradients": [[10, "module-ivy.data_classes.array.gradients"], [33, "module-ivy.data_classes.container.gradients"], [368, "gradients"], [560, "gradients"]], "Image": [[11, "module-ivy.data_classes.array.image"], [34, "module-ivy.data_classes.container.image"]], "Layers": [[12, "module-ivy.data_classes.array.layers"], [35, "module-ivy.data_classes.container.layers"], [54, "module-ivy.stateful.layers"], [369, "layers"]], "Linear algebra": [[13, "module-ivy.data_classes.array.linear_algebra"], [36, "module-ivy.data_classes.container.linear_algebra"], [370, "linear-algebra"]], "Losses": [[14, "module-ivy.data_classes.array.losses"], [37, "module-ivy.data_classes.container.losses"], [371, "losses"]], "Manipulation": [[15, "module-ivy.data_classes.array.manipulation"], [38, "module-ivy.data_classes.container.manipulation"], [372, "manipulation"]], "Norms": [[16, "module-ivy.data_classes.array.norms"], [39, "module-ivy.data_classes.container.norms"], [56, "module-ivy.stateful.norms"], [375, "norms"]], "Random": [[17, "module-ivy.data_classes.array.random"], [40, "module-ivy.data_classes.container.random"], [376, "random"]], "Searching": [[18, "module-ivy.data_classes.array.searching"], [41, "module-ivy.data_classes.container.searching"], [377, "searching"]], "Set": [[19, "module-ivy.data_classes.array.set"], [42, "module-ivy.data_classes.container.set"], [378, "set"]], "Sorting": [[20, "module-ivy.data_classes.array.sorting"], [43, "module-ivy.data_classes.container.sorting"], [379, "sorting"]], "Statistical": [[21, "module-ivy.data_classes.array.statistical"], [44, "module-ivy.data_classes.container.statistical"], [380, "statistical"]], "Utility": [[22, "module-ivy.data_classes.array.utility"], [45, "module-ivy.data_classes.container.utility"], [381, "utility"]], "Wrapping": [[23, "module-ivy.data_classes.array.wrapping"], [46, "module-ivy.data_classes.container.wrapping"]], "Base": [[25, "module-ivy.data_classes.container.base"]], "Array": [[47, "array"]], "Container": [[48, "container"]], "stateful": [[49, "stateful"]], "Converters": [[51, "module-ivy.stateful.converters"]], "Helpers": [[52, "module-ivy.stateful.helpers"]], "Initializers": [[53, "module-ivy.stateful.initializers"], [572, "initializers"]], "Module": [[55, "module-ivy.stateful.module"]], "Optimizers": [[57, "module-ivy.stateful.optimizers"], [572, "optimizers"]], "Sequential": [[58, "module-ivy.stateful.sequential"]], "ivy": [[59, "ivy"]], "deserialize": [[60, "deserialize"]], "gelu": [[61, "gelu"]], "get": [[62, "get"]], "leaky_relu": [[63, "leaky-relu"]], "log_softmax": [[64, "log-softmax"]], "mish": [[65, "mish"]], "relu": [[66, "relu"]], "sigmoid": [[67, "sigmoid"]], "softmax": [[68, "softmax"]], "softplus": [[69, "softplus"]], "IfElse": [[70, "ifelse"]], "WhileLoop": [[71, "whileloop"]], "if_else": [[72, "if-else"]], "while_loop": [[73, "while-loop"]], "_ivy_to_native": [[74, "ivy-to-native"]], "arange": [[75, "arange"]], "array": [[76, "array"]], "asarray": [[77, "asarray"]], "asarray_handle_nestable": [[78, "asarray-handle-nestable"]], "asarray_infer_device": [[79, "asarray-infer-device"]], "asarray_to_native_arrays_and_back": [[80, "asarray-to-native-arrays-and-back"]], "copy_array": [[81, "copy-array"]], "empty": [[82, "empty"]], "empty_like": [[83, "empty-like"]], "eye": [[84, "eye"]], "from_dlpack": [[85, "from-dlpack"]], "Note": [[85, null], [362, null]], "full": [[86, "full"]], "full_like": [[87, "full-like"]], "linspace": [[88, "linspace"]], "logspace": [[89, "logspace"]], "meshgrid": [[90, "meshgrid"]], "native_array": [[91, "native-array"]], "one_hot": [[92, "one-hot"]], "ones": [[93, "ones"]], "ones_like": [[94, "ones-like"]], "tril": [[95, "tril"]], "triu": [[96, "triu"]], "zeros": [[97, "zeros"]], "zeros_like": [[98, "zeros-like"]], "_check_complex128": [[99, "check-complex128"]], "_check_float64": [[100, "check-float64"]], "_get_dtypes": [[101, "get-dtypes"]], "_get_function_list": [[102, "get-function-list"]], "_get_functions_from_string": [[103, "get-functions-from-string"]], "_handle_nestable_dtype_info": [[104, "handle-nestable-dtype-info"]], "_is_valid_dtypes_attributes": [[105, "is-valid-dtypes-attributes"]], "_lstrip_lines": [[106, "lstrip-lines"]], "_nested_get": [[107, "nested-get"]], "as_ivy_dtype": [[108, "as-ivy-dtype"]], "as_native_dtype": [[109, "as-native-dtype"]], "astype": [[110, "astype"]], "broadcast_arrays": [[111, "broadcast-arrays"]], "broadcast_to": [[112, "broadcast-to"]], "can_cast": [[113, "can-cast"]], "check_float": [[114, "check-float"]], "closest_valid_dtype": [[115, "closest-valid-dtype"]], "default_complex_dtype": [[116, "default-complex-dtype"]], "default_dtype": [[117, "default-dtype"]], "default_float_dtype": [[118, "default-float-dtype"]], "default_int_dtype": [[119, "default-int-dtype"]], "default_uint_dtype": [[120, "default-uint-dtype"]], "dtype": [[121, "dtype"]], "dtype_bits": [[122, "dtype-bits"]], "finfo": [[123, "finfo"]], "function_supported_dtypes": [[124, "function-supported-dtypes"]], "function_unsupported_dtypes": [[125, "function-unsupported-dtypes"]], "iinfo": [[126, "iinfo"]], "infer_default_dtype": [[127, "infer-default-dtype"]], "invalid_dtype": [[128, "invalid-dtype"]], "is_bool_dtype": [[129, "is-bool-dtype"]], "is_complex_dtype": [[130, "is-complex-dtype"]], "is_float_dtype": [[131, "is-float-dtype"]], "is_int_dtype": [[132, "is-int-dtype"]], "is_native_dtype": [[133, "is-native-dtype"]], "is_uint_dtype": [[134, "is-uint-dtype"]], "promote_types": [[135, "promote-types"]], "promote_types_of_inputs": [[136, "promote-types-of-inputs"]], "result_type": [[137, "result-type"]], "set_default_complex_dtype": [[138, "set-default-complex-dtype"]], "set_default_dtype": [[139, "set-default-dtype"]], "set_default_float_dtype": [[140, "set-default-float-dtype"]], "set_default_int_dtype": [[141, "set-default-int-dtype"]], "set_default_uint_dtype": [[142, "set-default-uint-dtype"]], "type_promote_arrays": [[143, "type-promote-arrays"]], "unset_default_complex_dtype": [[144, "unset-default-complex-dtype"]], "unset_default_dtype": [[145, "unset-default-dtype"]], "unset_default_float_dtype": [[146, "unset-default-float-dtype"]], "unset_default_int_dtype": [[147, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[148, "unset-default-uint-dtype"]], "valid_dtype": [[149, "valid-dtype"]], "_get_devices": [[150, "get-devices"]], "_get_nvml_gpu_handle": [[151, "get-nvml-gpu-handle"]], "_is_valid_devices_attributes": [[152, "is-valid-devices-attributes"]], "as_ivy_dev": [[153, "as-ivy-dev"]], "as_native_dev": [[154, "as-native-dev"]], "clear_cached_mem_on_dev": [[155, "clear-cached-mem-on-dev"]], "default_device": [[156, "default-device"]], "dev": [[157, "dev"]], "dev_util": [[158, "dev-util"]], "function_supported_devices": [[159, "function-supported-devices"]], "function_unsupported_devices": [[160, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[161, "get-all-ivy-arrays-on-dev"]], "gpu_is_available": [[162, "gpu-is-available"]], "num_cpu_cores": [[163, "num-cpu-cores"]], "num_gpus": [[164, "num-gpus"]], "num_ivy_arrays_on_dev": [[165, "num-ivy-arrays-on-dev"]], "percent_used_mem_on_dev": [[166, "percent-used-mem-on-dev"]], "print_all_ivy_arrays_on_dev": [[167, "print-all-ivy-arrays-on-dev"]], "set_default_device": [[168, "set-default-device"]], "set_split_factor": [[169, "set-split-factor"]], "split_factor": [[170, "split-factor"]], "split_func_call": [[171, "split-func-call"]], "to_device": [[172, "to-device"]], "total_mem_on_dev": [[173, "total-mem-on-dev"]], "tpu_is_available": [[174, "tpu-is-available"]], "unset_default_device": [[175, "unset-default-device"]], "used_mem_on_dev": [[176, "used-mem-on-dev"]], "abs": [[177, "abs"]], "acos": [[178, "acos"]], "acosh": [[179, "acosh"]], "add": [[180, "add"]], "asin": [[181, "asin"]], "asinh": [[182, "asinh"]], "atan": [[183, "atan"]], "atan2": [[184, "atan2"]], "atanh": [[185, "atanh"]], "bitwise_and": [[186, "bitwise-and"]], "bitwise_invert": [[187, "bitwise-invert"]], "bitwise_left_shift": [[188, "bitwise-left-shift"]], "bitwise_or": [[189, "bitwise-or"]], "bitwise_right_shift": [[190, "bitwise-right-shift"]], "bitwise_xor": [[191, "bitwise-xor"]], "ceil": [[192, "ceil"]], "cos": [[193, "cos"]], "cosh": [[194, "cosh"]], "deg2rad": [[195, "deg2rad"]], "divide": [[196, "divide"]], "equal": [[197, "equal"]], "erf": [[198, "erf"]], "exp": [[199, "exp"]], "expm1": [[200, "expm1"]], "floor": [[201, "floor"]], "floor_divide": [[202, "floor-divide"]], "fmod": [[203, "fmod"]], "greater": [[204, "greater"]], "greater_equal": [[205, "greater-equal"]], "isfinite": [[206, "isfinite"]], "isinf": [[207, "isinf"]], "isnan": [[208, "isnan"]], "isreal": [[209, "isreal"]], "less": [[210, "less"]], "less_equal": [[211, "less-equal"]], "log": [[212, "log"]], "log10": [[213, "log10"]], "log1p": [[214, "log1p"]], "log2": [[215, "log2"]], "logaddexp": [[216, "logaddexp"]], "logical_and": [[217, "logical-and"]], "logical_not": [[218, "logical-not"]], "logical_or": [[219, "logical-or"]], "logical_xor": [[220, "logical-xor"]], "maximum": [[221, "maximum"]], "minimum": [[222, "minimum"]], "multiply": [[223, "multiply"]], "negative": [[224, "negative"]], "not_equal": [[225, "not-equal"]], "positive": [[226, "positive"]], "pow": [[227, "pow"]], "rad2deg": [[228, "rad2deg"]], "reciprocal": [[229, "reciprocal"]], "remainder": [[230, "remainder"]], "round": [[231, "round"]], "sign": [[232, "sign"]], "sin": [[233, "sin"]], "sinh": [[234, "sinh"]], "sqrt": [[235, "sqrt"]], "square": [[236, "square"]], "subtract": [[237, "subtract"]], "tan": [[238, "tan"]], "tanh": [[239, "tanh"]], "trunc": [[240, "trunc"]], "trunc_divide": [[241, "trunc-divide"]], "_all_dnd_combinations": [[242, "all-dnd-combinations"]], "_dnd_dict_difference": [[243, "dnd-dict-difference"]], "_dnd_dict_intersection": [[244, "dnd-dict-intersection"]], "_dnd_dict_union": [[245, "dnd-dict-union"]], "_get_devices_and_dtypes": [[246, "get-devices-and-dtypes"]], "_is_valid_device_and_dtypes_attributes": [[247, "is-valid-device-and-dtypes-attributes"]], "_parse_ellipsis": [[248, "parse-ellipsis"]], "_valid_attrib_combinations": [[249, "valid-attrib-combinations"]], "all_equal": [[250, "all-equal"]], "arg_info": [[251, "arg-info"]], "arg_names": [[252, "arg-names"]], "array_equal": [[253, "array-equal"]], "assert_supports_inplace": [[254, "assert-supports-inplace"]], "cache_fn": [[255, "cache-fn"]], "clip_matrix_norm": [[256, "clip-matrix-norm"]], "clip_vector_norm": [[257, "clip-vector-norm"]], "container_types": [[258, "container-types"]], "current_backend_str": [[259, "current-backend-str"]], "default": [[260, "default"]], "einops_rearrange": [[261, "einops-rearrange"]], "einops_reduce": [[262, "einops-reduce"]], "einops_repeat": [[263, "einops-repeat"]], "exists": [[264, "exists"]], "fourier_encode": [[265, "fourier-encode"]], "function_supported_devices_and_dtypes": [[266, "function-supported-devices-and-dtypes"]], "function_unsupported_devices_and_dtypes": [[267, "function-unsupported-devices-and-dtypes"]], "gather": [[268, "gather"]], "gather_nd": [[269, "gather-nd"]], "get_all_arrays_in_memory": [[270, "get-all-arrays-in-memory"]], "get_array_mode": [[271, "get-array-mode"]], "get_exception_trace_mode": [[272, "get-exception-trace-mode"]], "get_item": [[273, "get-item"]], "get_min_base": [[274, "get-min-base"]], "get_min_denominator": [[275, "get-min-denominator"]], "get_nestable_mode": [[276, "get-nestable-mode"]], "get_num_dims": [[277, "get-num-dims"]], "get_queue_timeout": [[278, "get-queue-timeout"]], "get_referrers_recursive": [[279, "get-referrers-recursive"]], "get_show_func_wrapper_trace_mode": [[280, "get-show-func-wrapper-trace-mode"]], "get_tmp_dir": [[281, "get-tmp-dir"]], "has_nans": [[282, "has-nans"]], "inplace_arrays_supported": [[283, "inplace-arrays-supported"]], "inplace_decrement": [[284, "inplace-decrement"]], "inplace_increment": [[285, "inplace-increment"]], "inplace_update": [[286, "inplace-update"]], "inplace_variables_supported": [[287, "inplace-variables-supported"]], "is_array": [[288, "is-array"]], "is_ivy_array": [[289, "is-ivy-array"]], "is_ivy_container": [[290, "is-ivy-container"]], "is_native_array": [[291, "is-native-array"]], "isin": [[292, "isin"]], "isscalar": [[293, "isscalar"]], "match_kwargs": [[294, "match-kwargs"]], "multiprocessing": [[295, "multiprocessing"]], "num_arrays_in_memory": [[296, "num-arrays-in-memory"]], "print_all_arrays_in_memory": [[297, "print-all-arrays-in-memory"]], "scatter_flat": [[298, "scatter-flat"]], "scatter_nd": [[299, "scatter-nd"]], "set_array_mode": [[300, "set-array-mode"]], "Parameter": [[300, "parameter"], [301, "parameter"], [304, "parameter"], [306, "parameter"], [307, "parameter"], [367, "parameter"], [367, "id1"], [367, "id2"], [367, "id3"], [367, "id4"]], "set_exception_trace_mode": [[301, "set-exception-trace-mode"]], "set_min_base": [[302, "set-min-base"]], "set_min_denominator": [[303, "set-min-denominator"]], "set_nestable_mode": [[304, "set-nestable-mode"]], "set_queue_timeout": [[305, "set-queue-timeout"]], "set_shape_array_mode": [[306, "set-shape-array-mode"]], "set_show_func_wrapper_trace_mode": [[307, "set-show-func-wrapper-trace-mode"]], "set_tmp_dir": [[308, "set-tmp-dir"]], "shape": [[309, "shape"]], "shape_array_mode": [[310, "shape-array-mode"]], "stable_divide": [[311, "stable-divide"]], "stable_pow": [[312, "stable-pow"]], "supports_inplace_updates": [[313, "supports-inplace-updates"]], "to_ivy_shape": [[314, "to-ivy-shape"]], "to_list": [[315, "to-list"]], "to_native_shape": [[316, "to-native-shape"]], "to_numpy": [[317, "to-numpy"]], "to_scalar": [[318, "to-scalar"]], "try_else_none": [[319, "try-else-none"]], "unset_array_mode": [[320, "unset-array-mode"]], "unset_exception_trace_mode": [[321, "unset-exception-trace-mode"]], "unset_nestable_mode": [[322, "unset-nestable-mode"]], "unset_queue_timeout": [[323, "unset-queue-timeout"]], "unset_shape_array_mode": [[324, "unset-shape-array-mode"]], "unset_show_func_wrapper_trace_mode": [[325, "unset-show-func-wrapper-trace-mode"]], "value_is_nan": [[326, "value-is-nan"]], "vmap": [[327, "vmap"]], "_arrays_to_float_variables": [[328, "arrays-to-float-variables"]], "_check_if_empty": [[329, "check-if-empty"]], "_get_duplicate_index_chains": [[330, "get-duplicate-index-chains"]], "_get_native_variables_and_indices": [[331, "get-native-variables-and-indices"]], "_get_native_y": [[332, "get-native-y"]], "_get_required_float_variables": [[333, "get-required-float-variables"]], "_get_required_native_variables": [[334, "get-required-native-variables"]], "_get_y_and_ret_idxs": [[335, "get-y-and-ret-idxs"]], "_idxs_to_str": [[336, "idxs-to-str"]], "_is_variable": [[337, "is-variable"]], "_non_finite_to_zero": [[338, "non-finite-to-zero"]], "_process_func_ret_and_grads": [[339, "process-func-ret-and-grads"]], "_set_duplicates": [[340, "set-duplicates"]], "_stop_grad_and_index": [[341, "stop-grad-and-index"]], "_to_ivy": [[342, "to-ivy"]], "_variable": [[343, "variable"]], "_variable_data": [[344, "variable-data"]], "adam_step": [[345, "adam-step"]], "adam_update": [[346, "adam-update"]], "execute_with_gradients": [[347, "execute-with-gradients"]], "grad": [[348, "grad"]], "gradient_descent_update": [[349, "gradient-descent-update"]], "jac": [[350, "jac"]], "lamb_update": [[351, "lamb-update"]], "lars_update": [[352, "lars-update"]], "optimizer_update": [[353, "optimizer-update"]], "set_with_grads": [[354, "set-with-grads"]], "stop_gradient": [[355, "stop-gradient"]], "unset_with_grads": [[356, "unset-with-grads"]], "value_and_grad": [[357, "value-and-grad"]], "with_grads": [[358, "with-grads"]], "Constants": [[360, "constants"]], "Control flow ops": [[361, "control-flow-ops"]], "Meta": [[373, "meta"]], "Nest": [[374, "nest"]], "Data-dependent output shape": [[378, null], [378, null], [378, null], [378, null], [494, null], [495, null], [496, null], [497, null]], "_deconv_length": [[382, "deconv-length"]], "_get_x_data_format": [[383, "get-x-data-format"]], "_handle_padding": [[384, "handle-padding"]], "conv": [[385, "conv"]], "conv1d": [[386, "conv1d"]], "conv1d_transpose": [[387, "conv1d-transpose"]], "conv2d": [[388, "conv2d"]], "conv2d_transpose": [[389, "conv2d-transpose"]], "conv3d": [[390, "conv3d"]], "conv3d_transpose": [[391, "conv3d-transpose"]], "conv_general_dilated": [[392, "conv-general-dilated"]], "conv_general_transpose": [[393, "conv-general-transpose"]], "depthwise_conv2d": [[394, "depthwise-conv2d"]], "dropout": [[395, "dropout"]], "linear": [[396, "linear"]], "lstm_update": [[397, "lstm-update"]], "multi_head_attention": [[398, "multi-head-attention"]], "scaled_dot_product_attention": [[399, "scaled-dot-product-attention"]], "cholesky": [[400, "cholesky"]], "cross": [[401, "cross"]], "det": [[402, "det"]], "diag": [[403, "diag"]], "diagonal": [[404, "diagonal"]], "eig": [[405, "eig"]], "eigh": [[406, "eigh"]], "eigvalsh": [[407, "eigvalsh"]], "inner": [[408, "inner"]], "inv": [[409, "inv"]], "lu_factor": [[410, "lu-factor"]], "matmul": [[411, "matmul"]], "matrix_norm": [[412, "matrix-norm"]], "matrix_power": [[413, "matrix-power"]], "matrix_rank": [[414, "matrix-rank"]], "matrix_transpose": [[415, "matrix-transpose"]], "outer": [[416, "outer"]], "pinv": [[417, "pinv"]], "qr": [[418, "qr"]], "slogdet": [[419, "slogdet"]], "solve": [[420, "solve"]], "svd": [[421, "svd"]], "svdvals": [[422, "svdvals"]], "tensordot": [[423, "tensordot"]], "tensorsolve": [[424, "tensorsolve"]], "trace": [[425, "trace"]], "vander": [[426, "vander"]], "vecdot": [[427, "vecdot"]], "vector_norm": [[428, "vector-norm"]], "vector_to_skew_symmetric_matrix": [[429, "vector-to-skew-symmetric-matrix"]], "_reduce_loss": [[430, "reduce-loss"]], "binary_cross_entropy": [[431, "binary-cross-entropy"]], "cross_entropy": [[432, "cross-entropy"]], "sparse_cross_entropy": [[433, "sparse-cross-entropy"]], "_calculate_out_shape": [[434, "calculate-out-shape"]], "clip": [[435, "clip"]], "concat": [[436, "concat"]], "constant_pad": [[437, "constant-pad"]], "expand_dims": [[438, "expand-dims"]], "flip": [[439, "flip"]], "permute_dims": [[440, "permute-dims"]], "repeat": [[441, "repeat"]], "reshape": [[442, "reshape"]], "roll": [[443, "roll"]], "split": [[444, "split"]], "squeeze": [[445, "squeeze"]], "stack": [[446, "stack"]], "swapaxes": [[447, "swapaxes"]], "tile": [[448, "tile"]], "unstack": [[449, "unstack"]], "zero_pad": [[450, "zero-pad"]], "_compute_cost_and_update_grads": [[451, "compute-cost-and-update-grads"]], "_train_task": [[452, "train-task"]], "_train_tasks": [[453, "train-tasks"]], "_train_tasks_batched": [[454, "train-tasks-batched"]], "_train_tasks_with_for_loop": [[455, "train-tasks-with-for-loop"]], "fomaml_step": [[456, "fomaml-step"]], "maml_step": [[457, "maml-step"]], "reptile_step": [[458, "reptile-step"]], "all_nested_indices": [[459, "all-nested-indices"]], "copy_nest": [[460, "copy-nest"]], "duplicate_array_index_chains": [[461, "duplicate-array-index-chains"]], "index_nest": [[462, "index-nest"]], "insert_into_nest_at_index": [[463, "insert-into-nest-at-index"]], "insert_into_nest_at_indices": [[464, "insert-into-nest-at-indices"]], "map": [[465, "map"]], "map_nest_at_index": [[466, "map-nest-at-index"]], "map_nest_at_indices": [[467, "map-nest-at-indices"]], "multi_index_nest": [[468, "multi-index-nest"]], "nested_any": [[469, "nested-any"]], "nested_argwhere": [[470, "nested-argwhere"]], "nested_map": [[471, "nested-map"]], "nested_multi_map": [[472, "nested-multi-map"]], "prune_empty": [[473, "prune-empty"]], "prune_nest_at_index": [[474, "prune-nest-at-index"]], "prune_nest_at_indices": [[475, "prune-nest-at-indices"]], "set_nest_at_index": [[476, "set-nest-at-index"]], "set_nest_at_indices": [[477, "set-nest-at-indices"]], "layer_norm": [[478, "layer-norm"]], "_check_bounds_and_get_shape": [[479, "check-bounds-and-get-shape"]], "_check_shapes_broadcastable": [[480, "check-shapes-broadcastable"]], "_check_valid_scale": [[481, "check-valid-scale"]], "_randint_check_dtype_and_bound": [[482, "randint-check-dtype-and-bound"]], "multinomial": [[483, "multinomial"]], "randint": [[484, "randint"]], "random_normal": [[485, "random-normal"]], "random_uniform": [[486, "random-uniform"]], "seed": [[487, "seed"]], "shuffle": [[488, "shuffle"]], "argmax": [[489, "argmax"]], "argmin": [[490, "argmin"]], "argwhere": [[491, "argwhere"]], "nonzero": [[492, "nonzero"]], "where": [[493, "where"]], "unique_all": [[494, "unique-all"]], "unique_counts": [[495, "unique-counts"]], "unique_inverse": [[496, "unique-inverse"]], "unique_values": [[497, "unique-values"]], "argsort": [[498, "argsort"]], "searchsorted": [[499, "searchsorted"]], "sort": [[500, "sort"]], "_get_promoted_type_of_operands": [[501, "get-promoted-type-of-operands"]], "cumprod": [[502, "cumprod"]], "cumsum": [[503, "cumsum"]], "einsum": [[504, "einsum"]], "max": [[505, "max"]], "mean": [[506, "mean"]], "min": [[507, "min"]], "prod": [[508, "prod"]], "std": [[509, "std"]], "sum": [[510, "sum"]], "var": [[511, "var"]], "all": [[512, "all"]], "any": [[513, "any"]], "nested_array": [[514, "nested-array"]], "Nested array": [[515, "module-ivy.nested_array.nested_array"]], "Assertions": [[516, "module-ivy_tests.test_ivy.helpers.assertions"], [526, "module-ivy.utils.assertions"]], "Available frameworks": [[517, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Function testing": [[518, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[519, "module-ivy_tests.test_ivy.helpers.globals"]], "Hypothesis helpers": [[520, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "Structs": [[521, "module-ivy_tests.test_ivy.helpers.structs"]], "Test parameter flags": [[522, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Testing helpers": [[523, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "helpers": [[524, "helpers"]], "utils": [[525, "utils"]], "Backend": [[527, "module-ivy.utils.backend"]], "Dynamic import": [[528, "module-ivy.utils.dynamic_import"]], "Exceptions": [[529, "module-ivy.utils.exceptions"]], "Inspection": [[530, "module-ivy.utils.inspection"]], "Verbosity": [[531, "module-ivy.utils.verbosity"]], "Contents": [[532, "contents"]], "Ivy as a transpiler": [[532, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[532, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[532, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[532, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[532, "setting-up-ivy"]], "Installing using pip": [[532, "installing-using-pip"]], "Docker": [[532, "docker"]], "Installing from source": [[532, "installing-from-source"]], "Using Ivy": [[532, "using-ivy"]], "Documentation": [[532, "documentation"]], "Contributing": [[532, "contributing"], [537, "contributing"]], "Community": [[532, "community"]], "Citation": [[532, "citation"]], "Background": [[533, "background"]], "ML Explosion": [[534, "ml-explosion"]], "Standardization": [[535, "standardization"]], "Skepticism": [[535, "skepticism"]], "Complimentary vs Competitive": [[535, "complimentary-vs-competitive"]], "Do Standards Work?": [[535, "do-standards-work"]], "The Array API Standard": [[535, "the-array-api-standard"]], "Why Unify?": [[536, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[536, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[536, "infinite-shelf-life"]], "Applied Libraries": [[538, "applied-libraries"], [575, "applied-libraries"]], "Introduction": [[538, "introduction"], [562, "introduction"], [563, "introduction"]], "Example - Ivy Robot": [[538, "example-ivy-robot"]], "Building the Docs": [[539, "building-the-docs"]], "Building the Docs using Docker": [[539, "building-the-docs-using-docker"]], "Using convenience script": [[539, "using-convenience-script"]], "Using existing image on Docker Hub": [[539, "using-existing-image-on-docker-hub"]], "Building the image locally": [[539, "building-the-image-locally"]], "Building the Docs without Docker": [[539, "building-the-docs-without-docker"]], "Helpful Resources": [[540, "helpful-resources"]], "Open Tasks": [[541, "open-tasks"]], "Function Formatting": [[541, "function-formatting"]], "Formatting checklist": [[541, "formatting-checklist"]], "Frontend APIs": [[541, "frontend-apis"]], "Where to place a frontend function": [[541, "where-to-place-a-frontend-function"]], "Ivy Experimental API": [[541, "ivy-experimental-api"], [543, "ivy-experimental-api"]], "Setting Up": [[542, "setting-up"]], "Forking and cloning the repo": [[542, "forking-and-cloning-the-repo"]], "PyCharm": [[542, "pycharm"]], "Virtual environments - No Docker": [[542, "virtual-environments-no-docker"]], "Using miniconda": [[542, "using-miniconda"]], "Using venv": [[542, "using-venv"]], "Docker Interpreter with PyCharm": [[542, "docker-interpreter-with-pycharm"]], "Windows": [[542, "windows"], [542, "id6"]], "MacOS": [[542, "macos"]], "Ubuntu": [[542, "ubuntu"], [542, "id8"]], "Setting Up Testing": [[542, "setting-up-testing"]], "More Detailed Hypothesis Logs": [[542, "more-detailed-hypothesis-logs"]], "Setting up for Free": [[542, "setting-up-for-free"]], "GitHub Codespaces": [[542, "github-codespaces"]], "Pre-Commit": [[542, "pre-commit"]], "The Basics": [[543, "the-basics"]], "Getting Help": [[543, "getting-help"]], "ToDo List Issues": [[543, "todo-list-issues"]], "Managing Your Fork": [[543, "managing-your-fork"]], "Who To Ask": [[543, "who-to-ask"]], "With Command Line:": [[543, "with-command-line"]], "With Browser:": [[543, "with-browser"]], "Pull Requests": [[543, "pull-requests"]], "Small Commits Often": [[543, "small-commits-often"]], "Interactive Ivy Docker Container": [[543, "interactive-ivy-docker-container"]], "Running Tests Locally": [[543, "running-tests-locally"]], "With Docker": [[543, "with-docker"]], "Getting the most out of IDE": [[543, "getting-the-most-out-of-ide"]], "with PyCharm": [[543, "with-pycharm"]], "Deep Dive": [[544, "deep-dive"]], "Array API Tests": [[545, "array-api-tests"], [550, "array-api-tests"]], "Running the Tests": [[545, "running-the-tests"]], "Using Terminal": [[545, "using-terminal"]], "Using the IDE": [[545, "using-the-ide"]], "Regenerating Test Failures": [[545, "regenerating-test-failures"]], "Test Skipping": [[545, "test-skipping"]], "Arrays": [[546, "arrays"]], "Native Array": [[546, "native-array"]], "Ivy Array": [[546, "ivy-array"], [570, "ivy-array"]], "Array Handling": [[546, "array-handling"]], "Integrating custom classes with Ivy": [[546, "integrating-custom-classes-with-ivy"]], "Backend Setting": [[547, "backend-setting"]], "Backend and Frontend Version Support": [[547, "backend-and-frontend-version-support"]], "Building the Docs Pipeline": [[548, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[548, "how-the-doc-builder-is-being-run"]], "The convenience script": [[548, "the-convenience-script"]], "Options": [[548, "options"]], "The Docker image": [[548, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[548, "how-ivy-s-docs-is-structured"]], "index.rst": [[548, "index-rst"]], "partial_conf.py": [[548, "partial-conf-py"]], "prebuild.sh": [[548, "prebuild-sh"]], "Custom Extensions": [[548, "custom-extensions"]], "custom_autosummary": [[548, "custom-autosummary"]], ":hide-table:": [[548, "hide-table"]], ":include:": [[548, "include"]], ":fix-directory:": [[548, "fix-directory"]], ":substitute-caption:": [[548, "substitute-caption"]], "custom_builder": [[548, "custom-builder"]], "discussion_linker": [[548, "discussion-linker"]], "skippable_function": [[548, "skippable-function"]], "Containers": [[549, "containers"]], "Container Instance Methods": [[549, "container-instance-methods"]], "Container Static Methods": [[549, "container-static-methods"]], "API Static Methods": [[549, "api-static-methods"]], "API Instance Methods": [[549, "api-instance-methods"]], "API Special Methods": [[549, "api-special-methods"]], "Nestable Functions": [[549, "nestable-functions"], [557, "nestable-functions"], [558, "nestable-functions"]], "Continuous Integration": [[550, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[550, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[550, "ivy-tests"], [564, "ivy-tests"]], "Implementation": [[550, "implementation"]], "A Top-Down View": [[550, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[550, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[550, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[550, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[550, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[550, "determine-test-coverage-workflow"]], "Multiple Runners": [[550, "multiple-runners"]], "Race Condition": [[550, "race-condition"]], "Periodic Testing": [[550, "periodic-testing"]], "Manually Dispatched Workflows": [[550, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[550, "ci-pipeline"]], "Push": [[550, "push"]], "Pull Request": [[550, "pull-request"]], "Dashboard": [[550, "dashboard"]], "Data Types": [[551, "data-types"]], "Data Type Module": [[551, "data-type-module"]], "Data Type Promotion": [[551, "data-type-promotion"]], "Arguments in other Functions": [[551, "arguments-in-other-functions"], [552, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[551, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[551, "backend-data-type-bugs"]], "Superset Data Type Support": [[551, "superset-data-type-support"]], "Devices": [[552, "devices"]], "Device Module": [[552, "device-module"]], "Docstring Examples": [[553, "docstring-examples"]], "ivy.tan": [[553, "ivy-tan"]], "ivy.roll": [[553, "ivy-roll"]], "ivy.add": [[553, "ivy-add"]], "Docstrings": [[554, "docstrings"]], "Exception Handling": [[555, "exception-handling"]], "Ivy Exception Class": [[555, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[555, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[555, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[555, "handle-exceptions-decorator"]], "Assertion Function": [[555, "assertion-function"]], "Formatting": [[556, "formatting"]], "Lint Checks": [[556, "lint-checks"]], "Pre-Commit Hook": [[556, "pre-commit-hook"]], "Function Arguments": [[557, "function-arguments"]], "Positional and Keyword Arguments": [[557, "positional-and-keyword-arguments"]], "Input Arrays": [[557, "input-arrays"]], "out Argument": [[557, "out-argument"]], "dtype and device arguments": [[557, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[557, "numbers-in-operator-functions"]], "Integer Sequences": [[557, "integer-sequences"]], "Function Types": [[558, "function-types"]], "Primary Functions": [[558, "primary-functions"]], "Compositional Functions": [[558, "compositional-functions"]], "Mixed Functions": [[558, "mixed-functions"]], "Standalone Functions": [[558, "standalone-functions"]], "Convenience Functions": [[558, "convenience-functions"]], "Function Wrapping": [[559, "function-wrapping"]], "Overview": [[560, "overview"]], "Example Usage of the Gradient API": [[560, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[560, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[560, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[560, "custom-gradient-functions"]], "Design of the Gradient API": [[560, "design-of-the-gradient-api"]], "Our policy on gradients": [[560, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[560, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[560, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[560, "framework-specific-considerations"]], "Inplace Updates": [[561, "inplace-updates"]], "out argument": [[561, "out-argument"]], "copy argument": [[561, "copy-argument"]], "Ivy Frontends": [[562, "ivy-frontends"]], "The Frontend Basics": [[562, "the-frontend-basics"]], "Unused Arguments": [[562, "unused-arguments"]], "Compositions": [[562, "compositions"]], "Missing Ivy Functions": [[562, "missing-ivy-functions"]], "Temporary Compositions": [[562, "temporary-compositions"]], "Supported Data Types and Devices": [[562, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[562, "id6"]], "Frontend Data Type Promotion Rules": [[562, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[562, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[562, "frontends-duplicate-policy"]], "Ivy Frontend Tests": [[563, "ivy-frontend-tests"]], "Frontend Test Examples": [[563, "frontend-test-examples"]], "ivy.tan()": [[563, "ivy-tan"]], "ivy.full()": [[563, "ivy-full"]], "Testing Without Using Tests Values": [[563, "testing-without-using-tests-values"]], "Alias functions": [[563, "alias-functions"]], "Frontend Instance Method Tests": [[563, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[563, "frontend-instance-method-test-examples"]], "ivy.add()": [[563, "ivy-add"]], "Hypothesis Helpers": [[563, "hypothesis-helpers"]], "Testing Pipeline": [[564, "testing-pipeline"]], "Hypothesis": [[564, "id2"]], "Data Generation": [[564, "id3"]], "Writing your own strategy": [[564, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[564, "writing-hypothesis-test"]], "Ivy Test Decorators": [[564, "ivy-test-decorators"]], "Writing Ivy Tests": [[564, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[564, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[564, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[564, "how-to-write-hypothesis-tests-effectively"]], "Bonus: Hypothesis\u2019 Extended Features": [[564, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[564, "self-consistent-and-explicit-testing"]], "test_array_function": [[564, "id6"]], "Running Ivy Tests": [[564, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[564, "re-running-failed-ivy-tests"]], "Navigating the Code": [[565, "navigating-the-code"]], "Categorization": [[565, "categorization"]], "Submodule Design": [[565, "submodule-design"]], "Ivy API": [[565, "ivy-api"]], "Backend API": [[565, "backend-api"]], "Submodule Helper Functions": [[565, "submodule-helper-functions"]], "Version Pinning": [[565, "version-pinning"]], "Superset Behaviour": [[566, "superset-behaviour"]], "Extending the Standard": [[566, "extending-the-standard"]], "What is the Superset?": [[566, "what-is-the-superset"]], "A Non-Duplicate Superset": [[566, "a-non-duplicate-superset"]], "What is not the Superset?": [[566, "what-is-not-the-superset"]], "When the Superset is Too Much": [[566, "when-the-superset-is-too-much"]], "Balancing Generalization with Efficiency": [[566, "balancing-generalization-with-efficiency"]], "More Examples": [[566, "more-examples"]], "Maximizing Usage of Native Functionality": [[566, "maximizing-usage-of-native-functionality"]], "Design": [[567, "design"]], "Building Blocks": [[568, "building-blocks"]], "Backend Functional APIs \u2705": [[568, "backend-functional-apis"]], "Ivy Functional API \u2705": [[568, "ivy-functional-api"]], "Backend Handler \u2705": [[568, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[568, "graph-compiler"]], "Ivy as a Framework": [[569, "ivy-as-a-framework"]], "The Array Class": [[570, "the-array-class"]], "Unifying Operators": [[570, "unifying-operators"]], "API Monkey Patching": [[570, "api-monkey-patching"]], "Instance Methods": [[570, "instance-methods"]], "Ivy Container": [[571, "ivy-container"]], "Construction": [[571, "construction"]], "Representation": [[571, "representation"]], "Recursive Methods": [[571, "recursive-methods"]], "Built-ins": [[571, "built-ins"]], "Access": [[571, "access"]], "Saving and Loading": [[571, "saving-and-loading"]], "Comparisons": [[571, "comparisons"]], "Customized Representations": [[571, "customized-representations"]], "Use Cases": [[571, "use-cases"]], "Compartmentalization": [[571, "compartmentalization"]], "Configuration": [[571, "configuration"]], "Data loading": [[571, "data-loading"]], "Network weights": [[571, "network-weights"]], "Ivy Stateful API": [[572, "ivy-stateful-api"]], "Modules": [[572, "modules"]], "Ivy as a Transpiler": [[573, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[573, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[573, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[573, "converting-network-models"]], "Extensions": [[574, "extensions"]], "Ivy Mechanics": [[575, "ivy-mechanics"]], "Ivy Vision": [[575, "ivy-vision"]], "Ivy Robot": [[575, "ivy-robot"]], "Ivy Gym": [[575, "ivy-gym"]], "Ivy Memory": [[575, "ivy-memory"]], "FAQ": [[576, "faq"]], "Maintaining Backend Versions": [[576, "maintaining-backend-versions"]], "Dynamic Sizes": [[576, "dynamic-sizes"]], "Type and Shape Checking": [[576, "type-and-shape-checking"]], "GPU handling": [[576, "gpu-handling"]], "Model Deployment": [[576, "model-deployment"]], "Dynamic Control Flow": [[576, "dynamic-control-flow"]], "Auto-Differentiation": [[576, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[576, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[576, "support-for-functions"]], "Alternative Data Structures": [[576, "alternative-data-structures"]], "Custom Operations": [[576, "custom-operations"]], "The Pipeline": [[576, "the-pipeline"]], "State": [[576, "state"]], "Glossary": [[577, "glossary"]], "Related Work": [[578, "related-work"]], "API Standards": [[579, "api-standards"], [588, "api-standards"]], "Array API Standard": [[579, "id1"]], "Compiler Infrastructure": [[580, "compiler-infrastructure"], [588, "compiler-infrastructure"]], "LLVM": [[580, "id1"]], "MLIR": [[580, "id2"]], "OneAPI": [[580, "id3"]], "Exchange Formats": [[581, "exchange-formats"], [588, "exchange-formats"]], "ONNX onnx": [[581, "onnx-onnx"]], "NNEF nnef": [[581, "nnef-nnef"]], "CoreML coreml": [[581, "coreml-coreml"]], "Frameworks": [[582, "frameworks"], [588, "frameworks"]], "MATLAB matlab": [[582, "matlab-matlab"]], "SciPy scipy": [[582, "scipy-scipy"]], "Torch torch": [[582, "torch-torch"]], "NumPy numpy": [[582, "numpy-numpy"]], "SciKit Learn scikit-learn": [[582, "scikit-learn-scikit-learn"]], "Theano theano": [[582, "theano-theano"]], "Pandas pandas": [[582, "pandas-pandas"]], "Julia julia": [[582, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[582, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[582, "caffe-caffe"]], "Chainer chainer": [[582, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[582, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[582, "mxnet-mxnet"]], "CNTK cntk": [[582, "cntk-cntk"]], "PyTorch pytorch": [[582, "pytorch-pytorch"]], "Flux flux": [[582, "flux-flux"]], "JAX jax": [[582, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[582, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[582, "dex-language-dex-language"]], "Graph Tracers": [[583, "graph-tracers"], [588, "graph-tracers"]], "tf.Graph": [[583, "tf-graph"]], "Jaxpr": [[583, "jaxpr"]], "torch.jit": [[583, "torch-jit"]], "torch.fx": [[583, "torch-fx"]], "ML-Unifying Companies": [[584, "ml-unifying-companies"], [588, "ml-unifying-companies"]], "Quansight": [[584, "id1"]], "Modular": [[584, "id2"]], "OctoML": [[584, "id3"]], "Multi-Vendor Compiler Frameworks": [[585, "multi-vendor-compiler-frameworks"], [588, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[585, "apache-tvm"]], "XLA": [[585, "xla"]], "GCC": [[585, "gcc"]], "Vendor-Specific APIs": [[586, "vendor-specific-apis"], [588, "vendor-specific-apis"]], "TensorRT tensorrt": [[586, "tensorrt-tensorrt"]], "CUDA cuda": [[586, "cuda-cuda"]], "Vendor-Specific Compilers": [[587, "vendor-specific-compilers"], [588, "vendor-specific-compilers"]], "ICC": [[587, "id1"]], "ICX": [[587, "icx"]], "NVCC": [[587, "nvcc"]], "What does Ivy Add?": [[588, "what-does-ivy-add"]], "Wrapper Frameworks": [[588, "wrapper-frameworks"], [589, "wrapper-frameworks"]], "EagerPy eagerpy": [[589, "eagerpy-eagerpy"]], "Keras keras": [[589, "keras-keras"]], "Thinc thinc": [[589, "thinc-thinc"]], "TensorLy tensorly": [[589, "tensorly-tensorly"]], "NeuroPod": [[589, "id1"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [1, "ivy.transpile"], [1, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[1, "ivy.transpile"]], "ivy.unify()": [[1, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "ivy.data_classes.array.activations": [[2, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[2, "module-ivy.data_classes.array.activations"], [3, "module-ivy.data_classes.array.conversions"], [4, "module-ivy.data_classes.array.creation"], [5, "module-ivy.data_classes.array.data_type"], [6, "module-ivy.data_classes.array.device"], [7, "module-ivy.data_classes.array.elementwise"], [8, "module-ivy.data_classes.array.experimental"], [8, "module-ivy.data_classes.array.experimental.activations"], [8, "module-ivy.data_classes.array.experimental.conversions"], [8, "module-ivy.data_classes.array.experimental.creation"], [8, "module-ivy.data_classes.array.experimental.data_type"], [8, "module-ivy.data_classes.array.experimental.device"], [8, "module-ivy.data_classes.array.experimental.elementwise"], [8, "module-ivy.data_classes.array.experimental.general"], [8, "module-ivy.data_classes.array.experimental.gradients"], [8, "module-ivy.data_classes.array.experimental.image"], [8, "module-ivy.data_classes.array.experimental.layers"], [8, "module-ivy.data_classes.array.experimental.linear_algebra"], [8, "module-ivy.data_classes.array.experimental.losses"], [8, "module-ivy.data_classes.array.experimental.manipulation"], [8, "module-ivy.data_classes.array.experimental.norms"], [8, "module-ivy.data_classes.array.experimental.random"], [8, "module-ivy.data_classes.array.experimental.searching"], [8, "module-ivy.data_classes.array.experimental.set"], [8, "module-ivy.data_classes.array.experimental.sorting"], [8, "module-ivy.data_classes.array.experimental.statistical"], [8, "module-ivy.data_classes.array.experimental.utility"], [9, "module-ivy.data_classes.array.general"], [10, "module-ivy.data_classes.array.gradients"], [11, "module-ivy.data_classes.array.image"], [12, "module-ivy.data_classes.array.layers"], [13, "module-ivy.data_classes.array.linear_algebra"], [14, "module-ivy.data_classes.array.losses"], [15, "module-ivy.data_classes.array.manipulation"], [16, "module-ivy.data_classes.array.norms"], [17, "module-ivy.data_classes.array.random"], [18, "module-ivy.data_classes.array.searching"], [19, "module-ivy.data_classes.array.set"], [20, "module-ivy.data_classes.array.sorting"], [21, "module-ivy.data_classes.array.statistical"], [22, "module-ivy.data_classes.array.utility"], [23, "module-ivy.data_classes.array.wrapping"], [24, "module-ivy.data_classes.container.activations"], [25, "module-ivy.data_classes.container.base"], [26, "module-ivy.data_classes.container.conversions"], [27, "module-ivy.data_classes.container.creation"], [28, "module-ivy.data_classes.container.data_type"], [29, "module-ivy.data_classes.container.device"], [30, "module-ivy.data_classes.container.elementwise"], [31, "module-ivy.data_classes.container.experimental"], [31, "module-ivy.data_classes.container.experimental.activations"], [31, "module-ivy.data_classes.container.experimental.conversions"], [31, "module-ivy.data_classes.container.experimental.creation"], [31, "module-ivy.data_classes.container.experimental.data_type"], [31, "module-ivy.data_classes.container.experimental.device"], [31, "module-ivy.data_classes.container.experimental.elementwise"], [31, "module-ivy.data_classes.container.experimental.general"], [31, "module-ivy.data_classes.container.experimental.gradients"], [31, "module-ivy.data_classes.container.experimental.image"], [31, "module-ivy.data_classes.container.experimental.layers"], [31, "module-ivy.data_classes.container.experimental.linear_algebra"], [31, "module-ivy.data_classes.container.experimental.losses"], [31, "module-ivy.data_classes.container.experimental.manipulation"], [31, "module-ivy.data_classes.container.experimental.norms"], [31, "module-ivy.data_classes.container.experimental.random"], [31, "module-ivy.data_classes.container.experimental.searching"], [31, "module-ivy.data_classes.container.experimental.set"], [31, "module-ivy.data_classes.container.experimental.sorting"], [31, "module-ivy.data_classes.container.experimental.statistical"], [31, "module-ivy.data_classes.container.experimental.utility"], [32, "module-ivy.data_classes.container.general"], [33, "module-ivy.data_classes.container.gradients"], [34, "module-ivy.data_classes.container.image"], [35, "module-ivy.data_classes.container.layers"], [36, "module-ivy.data_classes.container.linear_algebra"], [37, "module-ivy.data_classes.container.losses"], [38, "module-ivy.data_classes.container.manipulation"], [39, "module-ivy.data_classes.container.norms"], [40, "module-ivy.data_classes.container.random"], [41, "module-ivy.data_classes.container.searching"], [42, "module-ivy.data_classes.container.set"], [43, "module-ivy.data_classes.container.sorting"], [44, "module-ivy.data_classes.container.statistical"], [45, "module-ivy.data_classes.container.utility"], [46, "module-ivy.data_classes.container.wrapping"], [47, "module-ivy.data_classes.array.array"], [48, "module-ivy.data_classes.container.container"], [50, "module-ivy.stateful.activations"], [51, "module-ivy.stateful.converters"], [52, "module-ivy.stateful.helpers"], [53, "module-ivy.stateful.initializers"], [54, "module-ivy.stateful.layers"], [55, "module-ivy.stateful.module"], [56, "module-ivy.stateful.norms"], [57, "module-ivy.stateful.optimizers"], [58, "module-ivy.stateful.sequential"], [359, "module-ivy.functional.ivy.activations"], [360, "module-ivy.functional.ivy.constants"], [361, "module-ivy.functional.ivy.control_flow_ops"], [362, "module-ivy.functional.ivy.creation"], [363, "module-ivy.functional.ivy.data_type"], [364, "module-ivy.functional.ivy.device"], [365, "module-ivy.functional.ivy.elementwise"], [366, "module-ivy.functional.ivy.experimental"], [367, "module-ivy.functional.ivy.general"], [368, "module-ivy.functional.ivy.gradients"], [369, "module-ivy.functional.ivy.layers"], [370, "module-ivy.functional.ivy.linear_algebra"], [371, "module-ivy.functional.ivy.losses"], [372, "module-ivy.functional.ivy.manipulation"], [373, "module-ivy.functional.ivy.meta"], [374, "module-ivy.functional.ivy.nest"], [375, "module-ivy.functional.ivy.norms"], [376, "module-ivy.functional.ivy.random"], [377, "module-ivy.functional.ivy.searching"], [378, "module-ivy.functional.ivy.set"], [379, "module-ivy.functional.ivy.sorting"], [380, "module-ivy.functional.ivy.statistical"], [381, "module-ivy.functional.ivy.utility"], [515, "module-ivy.nested_array.nested_array"], [516, "module-ivy_tests.test_ivy.helpers.assertions"], [517, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [518, "module-ivy_tests.test_ivy.helpers.function_testing"], [519, "module-ivy_tests.test_ivy.helpers.globals"], [520, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [521, "module-ivy_tests.test_ivy.helpers.structs"], [522, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [523, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [526, "module-ivy.utils.assertions"], [527, "module-ivy.utils.backend"], [528, "module-ivy.utils.dynamic_import"], [529, "module-ivy.utils.exceptions"], [530, "module-ivy.utils.inspection"], [531, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[2, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[3, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[3, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[4, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[4, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[5, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[5, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[6, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[6, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[6, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[6, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[6, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[7, "module-ivy.data_classes.array.elementwise"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[7, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[8, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[8, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[8, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[8, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[8, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[8, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[8, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[8, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[8, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[8, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[8, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[8, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[8, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[8, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.angle"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[8, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gcd() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "isin() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[8, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.isin"]], "ivy.data_classes.array.experimental": [[8, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[8, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[8, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[8, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[8, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[8, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[8, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[8, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[8, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[8, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[8, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[8, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[8, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[8, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[8, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[8, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[8, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[8, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[8, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[8, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[8, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[8, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[8, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[8, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[8, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[8, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[8, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[8, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trapz() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.trapz"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[8, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[8, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[8, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "ivy.data_classes.array.general": [[9, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[9, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[10, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[10, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[11, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[11, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[11, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[12, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[12, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[13, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[13, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[14, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[14, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[15, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[15, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[16, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[16, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[17, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[17, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[17, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[17, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[18, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[18, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[19, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[19, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[19, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[19, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[20, "module-ivy.data_classes.array.sorting"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[20, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[21, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[21, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[22, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[22, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[23, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[23, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[23, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "ivy.data_classes.container.activations": [[24, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[24, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[25, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[25, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[25, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[25, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[25, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[25, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[26, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[26, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[27, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[27, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[28, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[28, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[29, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[29, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[29, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[30, "module-ivy.data_classes.container.elementwise"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[30, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[31, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[31, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[31, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[31, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[31, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[31, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[31, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[31, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[31, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[31, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[31, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[31, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[31, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[31, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.angle"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.binary_cross_entropy_with_logits"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.exp2"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmin"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gcd"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.imag"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "isin() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.isin"]], "ivy.data_classes.container.experimental": [[31, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[31, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[31, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[31, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[31, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[31, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[31, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[31, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[31, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[31, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[31, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[31, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[31, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[31, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[31, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[31, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[31, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[31, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[31, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[31, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[31, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lcm"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.logaddexp2"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.msort"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nan_to_num"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.real"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_angle() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_angle"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_binary_cross_entropy_with_logits() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[31, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.static_binary_cross_entropy_with_logits"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_exp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_exp2"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_fft"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmin"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gcd() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gcd"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_imag() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_imag"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_isin() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[31, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.static_isin"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_lcm() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lcm"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logaddexp2() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_logaddexp2"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[31, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[31, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_msort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[31, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_msort"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[31, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nan_to_num() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nan_to_num"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[31, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[31, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_real() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_real"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_triu_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[31, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "triu_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.triu_indices"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[31, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[31, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[31, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[31, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "ivy.data_classes.container.general": [[32, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[32, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[33, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[33, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[34, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[34, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[34, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[35, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[35, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[36, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[36, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[37, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[37, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[38, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[38, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[39, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[39, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[40, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[40, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[40, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[41, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[41, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[42, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[42, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[42, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[42, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[42, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[43, "module-ivy.data_classes.container.sorting"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[43, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[44, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[44, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[45, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[45, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[46, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[46, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[46, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[47, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[47, "ivy.data_classes.array.array.Array.__xor__"]], "data (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.dynamic_backend"]], "ivy.data_classes.array.array": [[47, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.ndim"]], "shape (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[47, "ivy.data_classes.array.array.Array.size"]], "container (class in ivy.data_classes.container.container)": [[48, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[48, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[48, "module-ivy.data_classes.container.container"]], "geglu (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.GELU"]], "leakyrelu (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.LeakyReLU"]], "logsoftmax (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.LogSoftmax"]], "mish (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.Mish"]], "relu (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.ReLU"]], "softmax (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[50, "ivy.stateful.activations.Softplus"]], "__init__() (ivy.stateful.activations.geglu method)": [[50, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[50, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[50, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[50, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[50, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[50, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[50, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[50, "ivy.stateful.activations.Softplus.__init__"]], "ivy.stateful.activations": [[50, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[51, "ivy.stateful.converters.ModuleConverters"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[51, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[51, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[51, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[51, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[51, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[52, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[52, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[52, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.Ones"]], "siren (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[53, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[53, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[53, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[53, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[53, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[53, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[53, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[53, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[53, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[53, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[53, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[53, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[53, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[53, "module-ivy.stateful.initializers"]], "conv1d (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Conv3DTranspose"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Dropout"]], "lstm (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.Linear"]], "multiheadattention (class in ivy.stateful.layers)": [[54, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.conv1d method)": [[54, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[54, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[54, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[54, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[54, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[54, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[54, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[54, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[54, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[54, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[54, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[54, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[54, "module-ivy.stateful.layers"]], "module (class in ivy.stateful.module)": [[55, "ivy.stateful.module.Module"]], "__call__() (ivy.stateful.module.module method)": [[55, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[55, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[55, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[55, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[55, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[55, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[55, "module-ivy.stateful.module"]], "save_weights() (ivy.stateful.module.module method)": [[55, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[55, "ivy.stateful.module.Module.show_graph"]], "layernorm (class in ivy.stateful.norms)": [[56, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.layernorm method)": [[56, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[56, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[57, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[57, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[57, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[57, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[57, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[57, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[57, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[57, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[57, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[57, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[57, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[57, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[57, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[57, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[57, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[57, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[57, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[57, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[57, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[57, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[57, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[58, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[58, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[58, "module-ivy.stateful.sequential"]], "deserialize() (in module ivy)": [[60, "ivy.deserialize"]], "gelu() (in module ivy)": [[61, "ivy.gelu"]], "gelu() (ivy.array method)": [[61, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[61, "ivy.Container.gelu"]], "get() (in module ivy)": [[62, "ivy.get"]], "get() (ivy.container method)": [[62, "ivy.Container.get"]], "leaky_relu() (in module ivy)": [[63, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[63, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[63, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[64, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[64, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[64, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[65, "ivy.mish"]], "mish() (ivy.array method)": [[65, "ivy.Array.mish"]], "mish() (ivy.container method)": [[65, "ivy.Container.mish"]], "relu() (in module ivy)": [[66, "ivy.relu"]], "relu() (ivy.array method)": [[66, "ivy.Array.relu"]], "relu() (ivy.container method)": [[66, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[67, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[67, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[67, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[68, "ivy.softmax"]], "softmax() (ivy.array method)": [[68, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[68, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[69, "ivy.softplus"]], "softplus() (ivy.array method)": [[69, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[69, "ivy.Container.softplus"]], "ifelse() (in module ivy)": [[70, "ivy.IfElse"]], "whileloop() (in module ivy)": [[71, "ivy.WhileLoop"]], "if_else() (in module ivy)": [[72, "ivy.if_else"]], "while_loop() (in module ivy)": [[73, "ivy.while_loop"]], "arange() (in module ivy)": [[75, "ivy.arange"]], "array() (in module ivy)": [[76, "ivy.array"]], "asarray() (in module ivy)": [[77, "ivy.asarray"]], "asarray() (ivy.array method)": [[77, "ivy.Array.asarray"]], "asarray_handle_nestable() (in module ivy)": [[78, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[79, "ivy.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[80, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[81, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[81, "ivy.Array.copy_array"]], "empty() (in module ivy)": [[82, "ivy.empty"]], "empty_like() (in module ivy)": [[83, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[83, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[83, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[84, "ivy.eye"]], "from_dlpack() (in module ivy)": [[85, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[85, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[85, "ivy.Container.from_dlpack"]], "full() (in module ivy)": [[86, "ivy.full"]], "full_like() (in module ivy)": [[87, "ivy.full_like"]], "full_like() (ivy.array method)": [[87, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[87, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[88, "ivy.linspace"]], "linspace() (ivy.array method)": [[88, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[88, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[89, "ivy.logspace"]], "logspace() (ivy.array method)": [[89, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[89, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[90, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[90, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[90, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[91, "ivy.native_array"]], "native_array() (ivy.array method)": [[91, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[91, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[92, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[92, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[92, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[93, "ivy.ones"]], "ones_like() (in module ivy)": [[94, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[94, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[94, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[95, "ivy.tril"]], "tril() (ivy.array method)": [[95, "ivy.Array.tril"]], "tril() (ivy.container method)": [[95, "ivy.Container.tril"]], "triu() (in module ivy)": [[96, "ivy.triu"]], "triu() (ivy.array method)": [[96, "ivy.Array.triu"]], "triu() (ivy.container method)": [[96, "ivy.Container.triu"]], "zeros() (in module ivy)": [[97, "ivy.zeros"]], "zeros_like() (in module ivy)": [[98, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[98, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[98, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[108, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[109, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[110, "ivy.astype"]], "astype() (ivy.array method)": [[110, "ivy.Array.astype"]], "astype() (ivy.container method)": [[110, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[111, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[111, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[111, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[112, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[112, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[112, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[113, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[113, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[113, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[114, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[115, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[116, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[117, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[118, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[119, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[120, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[121, "ivy.dtype"]], "dtype() (ivy.array method)": [[121, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[121, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[122, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[123, "ivy.finfo"]], "finfo() (ivy.array method)": [[123, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[123, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[124, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[125, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[126, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[126, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[126, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[127, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[128, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[129, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[129, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[129, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[130, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[130, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[131, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[131, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[131, "ivy.Container.is_float_dtype"]], "is_int_dtype() (in module ivy)": [[132, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[132, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[132, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[133, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[134, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[134, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[134, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[135, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[136, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[137, "ivy.result_type"]], "result_type() (ivy.array method)": [[137, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[137, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[138, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[139, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[140, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[141, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[142, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[143, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[144, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[145, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[146, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[147, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[148, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[149, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[153, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[154, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[155, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[156, "ivy.default_device"]], "dev() (in module ivy)": [[157, "ivy.dev"]], "dev() (ivy.array method)": [[157, "ivy.Array.dev"]], "dev() (ivy.container method)": [[157, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[158, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[159, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[160, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[161, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[162, "ivy.gpu_is_available"]], "num_cpu_cores() (in module ivy)": [[163, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[164, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[165, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[166, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[167, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[168, "ivy.set_default_device"]], "set_split_factor() (in module ivy)": [[169, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[170, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[171, "ivy.split_func_call"]], "to_device() (in module ivy)": [[172, "ivy.to_device"]], "to_device() (ivy.array method)": [[172, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[172, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[173, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[174, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[175, "ivy.unset_default_device"]], "used_mem_on_dev() (in module ivy)": [[176, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[177, "ivy.abs"]], "abs() (ivy.array method)": [[177, "ivy.Array.abs"]], "abs() (ivy.container method)": [[177, "ivy.Container.abs"]], "acos() (in module ivy)": [[178, "ivy.acos"]], "acos() (ivy.array method)": [[178, "ivy.Array.acos"]], "acos() (ivy.container method)": [[178, "ivy.Container.acos"]], "acosh() (in module ivy)": [[179, "ivy.acosh"]], "acosh() (ivy.array method)": [[179, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[179, "ivy.Container.acosh"]], "add() (in module ivy)": [[180, "ivy.add"]], "add() (ivy.array method)": [[180, "ivy.Array.add"]], "add() (ivy.container method)": [[180, "ivy.Container.add"]], "asin() (in module ivy)": [[181, "ivy.asin"]], "asin() (ivy.array method)": [[181, "ivy.Array.asin"]], "asin() (ivy.container method)": [[181, "ivy.Container.asin"]], "asinh() (in module ivy)": [[182, "ivy.asinh"]], "asinh() (ivy.array method)": [[182, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[182, "ivy.Container.asinh"]], "atan() (in module ivy)": [[183, "ivy.atan"]], "atan() (ivy.array method)": [[183, "ivy.Array.atan"]], "atan() (ivy.container method)": [[183, "ivy.Container.atan"]], "atan2() (in module ivy)": [[184, "ivy.atan2"]], "atan2() (ivy.array method)": [[184, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[184, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[185, "ivy.atanh"]], "atanh() (ivy.array method)": [[185, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[185, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[186, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[186, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[186, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[187, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[187, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[187, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[188, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[188, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[188, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[189, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[189, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[189, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[190, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[190, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[190, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[191, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[191, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[191, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[192, "ivy.ceil"]], "ceil() (ivy.array method)": [[192, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[192, "ivy.Container.ceil"]], "cos() (in module ivy)": [[193, "ivy.cos"]], "cos() (ivy.array method)": [[193, "ivy.Array.cos"]], "cos() (ivy.container method)": [[193, "ivy.Container.cos"]], "cosh() (in module ivy)": [[194, "ivy.cosh"]], "cosh() (ivy.array method)": [[194, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[194, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[195, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[195, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[195, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[196, "ivy.divide"]], "divide() (ivy.array method)": [[196, "ivy.Array.divide"]], "divide() (ivy.container method)": [[196, "ivy.Container.divide"]], "equal() (in module ivy)": [[197, "ivy.equal"]], "equal() (ivy.array method)": [[197, "ivy.Array.equal"]], "equal() (ivy.container method)": [[197, "ivy.Container.equal"]], "erf() (in module ivy)": [[198, "ivy.erf"]], "erf() (ivy.array method)": [[198, "ivy.Array.erf"]], "erf() (ivy.container method)": [[198, "ivy.Container.erf"]], "exp() (in module ivy)": [[199, "ivy.exp"]], "exp() (ivy.array method)": [[199, "ivy.Array.exp"]], "exp() (ivy.container method)": [[199, "ivy.Container.exp"]], "expm1() (in module ivy)": [[200, "ivy.expm1"]], "expm1() (ivy.array method)": [[200, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[200, "ivy.Container.expm1"]], "floor() (in module ivy)": [[201, "ivy.floor"]], "floor() (ivy.array method)": [[201, "ivy.Array.floor"]], "floor() (ivy.container method)": [[201, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[202, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[202, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[202, "ivy.Container.floor_divide"]], "fmod() (in module ivy)": [[203, "ivy.fmod"]], "fmod() (ivy.array method)": [[203, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[203, "ivy.Container.fmod"]], "greater() (in module ivy)": [[204, "ivy.greater"]], "greater() (ivy.array method)": [[204, "ivy.Array.greater"]], "greater() (ivy.container method)": [[204, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[205, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[205, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[205, "ivy.Container.greater_equal"]], "isfinite() (in module ivy)": [[206, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[206, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[206, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[207, "ivy.isinf"]], "isinf() (ivy.array method)": [[207, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[207, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[208, "ivy.isnan"]], "isnan() (ivy.array method)": [[208, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[208, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[209, "ivy.isreal"]], "isreal() (ivy.array method)": [[209, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[209, "ivy.Container.isreal"]], "less() (in module ivy)": [[210, "ivy.less"]], "less() (ivy.array method)": [[210, "ivy.Array.less"]], "less() (ivy.container method)": [[210, "ivy.Container.less"]], "less_equal() (in module ivy)": [[211, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[211, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[211, "ivy.Container.less_equal"]], "log() (in module ivy)": [[212, "ivy.log"]], "log() (ivy.array method)": [[212, "ivy.Array.log"]], "log() (ivy.container method)": [[212, "ivy.Container.log"]], "log10() (in module ivy)": [[213, "ivy.log10"]], "log10() (ivy.array method)": [[213, "ivy.Array.log10"]], "log10() (ivy.container method)": [[213, "ivy.Container.log10"]], "log1p() (in module ivy)": [[214, "ivy.log1p"]], "log1p() (ivy.array method)": [[214, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[214, "ivy.Container.log1p"]], "log2() (in module ivy)": [[215, "ivy.log2"]], "log2() (ivy.array method)": [[215, "ivy.Array.log2"]], "log2() (ivy.container method)": [[215, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[216, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[216, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[216, "ivy.Container.logaddexp"]], "logical_and() (in module ivy)": [[217, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[217, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[217, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[218, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[218, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[218, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[219, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[219, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[219, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[220, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[220, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[220, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[221, "ivy.maximum"]], "maximum() (ivy.array method)": [[221, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[221, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[222, "ivy.minimum"]], "minimum() (ivy.array method)": [[222, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[222, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[223, "ivy.multiply"]], "multiply() (ivy.array method)": [[223, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[223, "ivy.Container.multiply"]], "negative() (in module ivy)": [[224, "ivy.negative"]], "negative() (ivy.array method)": [[224, "ivy.Array.negative"]], "negative() (ivy.container method)": [[224, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[225, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[225, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[225, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[226, "ivy.positive"]], "positive() (ivy.array method)": [[226, "ivy.Array.positive"]], "positive() (ivy.container method)": [[226, "ivy.Container.positive"]], "pow() (in module ivy)": [[227, "ivy.pow"]], "pow() (ivy.array method)": [[227, "ivy.Array.pow"]], "pow() (ivy.container method)": [[227, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[228, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[228, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[228, "ivy.Container.rad2deg"]], "reciprocal() (in module ivy)": [[229, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[229, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[229, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[230, "ivy.remainder"]], "remainder() (ivy.array method)": [[230, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[230, "ivy.Container.remainder"]], "round() (in module ivy)": [[231, "ivy.round"]], "round() (ivy.array method)": [[231, "ivy.Array.round"]], "round() (ivy.container method)": [[231, "ivy.Container.round"]], "sign() (in module ivy)": [[232, "ivy.sign"]], "sign() (ivy.array method)": [[232, "ivy.Array.sign"]], "sign() (ivy.container method)": [[232, "ivy.Container.sign"]], "sin() (in module ivy)": [[233, "ivy.sin"]], "sin() (ivy.array method)": [[233, "ivy.Array.sin"]], "sin() (ivy.container method)": [[233, "ivy.Container.sin"]], "sinh() (in module ivy)": [[234, "ivy.sinh"]], "sinh() (ivy.array method)": [[234, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[234, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[235, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[235, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[235, "ivy.Container.sqrt"]], "square() (in module ivy)": [[236, "ivy.square"]], "square() (ivy.array method)": [[236, "ivy.Array.square"]], "square() (ivy.container method)": [[236, "ivy.Container.square"]], "subtract() (in module ivy)": [[237, "ivy.subtract"]], "subtract() (ivy.array method)": [[237, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[237, "ivy.Container.subtract"]], "tan() (in module ivy)": [[238, "ivy.tan"]], "tan() (ivy.array method)": [[238, "ivy.Array.tan"]], "tan() (ivy.container method)": [[238, "ivy.Container.tan"]], "tanh() (in module ivy)": [[239, "ivy.tanh"]], "tanh() (ivy.array method)": [[239, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[239, "ivy.Container.tanh"]], "trunc() (in module ivy)": [[240, "ivy.trunc"]], "trunc() (ivy.array method)": [[240, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[240, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[241, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[241, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[241, "ivy.Container.trunc_divide"]], "all_equal() (in module ivy)": [[250, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[250, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[250, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[251, "ivy.arg_info"]], "arg_names() (in module ivy)": [[252, "ivy.arg_names"]], "array_equal() (in module ivy)": [[253, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[253, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[253, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[254, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[254, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[254, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[255, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[256, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[256, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[256, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[257, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[257, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[257, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[258, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[259, "ivy.current_backend_str"]], "default() (in module ivy)": [[260, "ivy.default"]], "default() (ivy.array method)": [[260, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[261, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[261, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[261, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[262, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[262, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[262, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[263, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[263, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[263, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[264, "ivy.exists"]], "exists() (ivy.array method)": [[264, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[265, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[265, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[265, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[266, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[267, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[268, "ivy.gather"]], "gather() (ivy.array method)": [[268, "ivy.Array.gather"]], "gather() (ivy.container method)": [[268, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[269, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[269, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[269, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[270, "ivy.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy)": [[271, "ivy.get_array_mode"]], "get_exception_trace_mode() (in module ivy)": [[272, "ivy.get_exception_trace_mode"]], "get_item() (in module ivy)": [[273, "ivy.get_item"]], "get_min_base() (in module ivy)": [[274, "ivy.get_min_base"]], "get_min_denominator() (in module ivy)": [[275, "ivy.get_min_denominator"]], "get_nestable_mode() (in module ivy)": [[276, "ivy.get_nestable_mode"]], "get_num_dims() (in module ivy)": [[277, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[277, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[277, "ivy.Container.get_num_dims"]], "get_queue_timeout() (in module ivy)": [[278, "ivy.get_queue_timeout"]], "get_referrers_recursive() (in module ivy)": [[279, "ivy.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy)": [[280, "ivy.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy)": [[281, "ivy.get_tmp_dir"]], "has_nans() (in module ivy)": [[282, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[282, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[282, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[283, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[284, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[284, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[284, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[285, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[285, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[285, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[286, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[286, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[286, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[287, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[288, "ivy.is_array"]], "is_array() (ivy.array method)": [[288, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[288, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[289, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[289, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[289, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[290, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[290, "ivy.Array.is_ivy_container"]], "is_native_array() (in module ivy)": [[291, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[291, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[291, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[292, "ivy.isin"]], "isin() (ivy.array method)": [[292, "ivy.Array.isin"]], "isin() (ivy.container method)": [[292, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[293, "ivy.isscalar"]], "match_kwargs() (in module ivy)": [[294, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[295, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[296, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[297, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[298, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[298, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[298, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[299, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[299, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[299, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[300, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[301, "ivy.set_exception_trace_mode"]], "set_min_base() (in module ivy)": [[302, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[303, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[304, "ivy.set_nestable_mode"]], "set_queue_timeout() (in module ivy)": [[305, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[306, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[307, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[308, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[309, "ivy.shape"]], "shape() (ivy.array method)": [[309, "ivy.Array.shape"]], "shape_array_mode() (in module ivy)": [[310, "ivy.shape_array_mode"]], "stable_divide() (in module ivy)": [[311, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[311, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[311, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[312, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[312, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[312, "ivy.Container.stable_pow"]], "supports_inplace_updates() (in module ivy)": [[313, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[313, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[313, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[314, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[315, "ivy.to_list"]], "to_list() (ivy.array method)": [[315, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[315, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[316, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[317, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[317, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[317, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[318, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[318, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[318, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[319, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[320, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[321, "ivy.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy)": [[322, "ivy.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy)": [[323, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[324, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[325, "ivy.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy)": [[326, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[326, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[326, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[327, "ivy.vmap"]], "adam_step() (in module ivy)": [[345, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[345, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[345, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[346, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[346, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[346, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[347, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[348, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[349, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[349, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[349, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[350, "ivy.jac"]], "lamb_update() (in module ivy)": [[351, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[351, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[351, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[352, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[352, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[352, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[353, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[353, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[353, "ivy.Container.optimizer_update"]], "set_with_grads() (in module ivy)": [[354, "ivy.set_with_grads"]], "stop_gradient() (in module ivy)": [[355, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[355, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[355, "ivy.Container.stop_gradient"]], "unset_with_grads() (in module ivy)": [[356, "ivy.unset_with_grads"]], "value_and_grad() (in module ivy)": [[357, "ivy.value_and_grad"]], "with_grads() (in module ivy)": [[358, "ivy.with_grads"]], "deserialize() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.deserialize"]], "gelu() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.gelu"]], "get() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.get"]], "ivy.functional.ivy.activations": [[359, "module-ivy.functional.ivy.activations"]], "leaky_relu() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.leaky_relu"]], "log_softmax() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.log_softmax"]], "mish() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.mish"]], "relu() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.relu"]], "sigmoid() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.sigmoid"]], "softmax() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.softmax"]], "softplus() (in module ivy.functional.ivy.activations)": [[359, "ivy.functional.ivy.activations.softplus"]], "e (in module ivy.functional.ivy.constants)": [[360, "ivy.functional.ivy.constants.e"]], "inf (in module ivy.functional.ivy.constants)": [[360, "ivy.functional.ivy.constants.inf"]], "ivy.functional.ivy.constants": [[360, "module-ivy.functional.ivy.constants"]], "nan (in module ivy.functional.ivy.constants)": [[360, "ivy.functional.ivy.constants.nan"]], "newaxis (in module ivy.functional.ivy.constants)": [[360, "ivy.functional.ivy.constants.newaxis"]], "pi (in module ivy.functional.ivy.constants)": [[360, "ivy.functional.ivy.constants.pi"]], "ifelse() (in module ivy.functional.ivy.control_flow_ops)": [[361, "ivy.functional.ivy.control_flow_ops.IfElse"]], "whileloop() (in module ivy.functional.ivy.control_flow_ops)": [[361, "ivy.functional.ivy.control_flow_ops.WhileLoop"]], "if_else() (in module ivy.functional.ivy.control_flow_ops)": [[361, "ivy.functional.ivy.control_flow_ops.if_else"]], "ivy.functional.ivy.control_flow_ops": [[361, "module-ivy.functional.ivy.control_flow_ops"]], "while_loop() (in module ivy.functional.ivy.control_flow_ops)": [[361, "ivy.functional.ivy.control_flow_ops.while_loop"]], "nestedsequence (class in ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.NestedSequence"]], "__init__() (ivy.functional.ivy.creation.nestedsequence method)": [[362, "ivy.functional.ivy.creation.NestedSequence.__init__"]], "arange() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.arange"]], "array() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.array"]], "asarray() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.asarray"]], "asarray_handle_nestable() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.asarray_infer_device"]], "asarray_to_native_arrays_and_back() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.copy_array"]], "empty() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.empty"]], "empty_like() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.empty_like"]], "eye() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.eye"]], "from_dlpack() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.from_dlpack"]], "full() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.full"]], "full_like() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.full_like"]], "ivy.functional.ivy.creation": [[362, "module-ivy.functional.ivy.creation"]], "linspace() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.linspace"]], "logspace() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.logspace"]], "meshgrid() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.meshgrid"]], "native_array() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.native_array"]], "one_hot() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.one_hot"]], "ones() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.ones"]], "ones_like() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.ones_like"]], "tril() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.tril"]], "triu() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.triu"]], "zeros() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.zeros"]], "zeros_like() (in module ivy.functional.ivy.creation)": [[362, "ivy.functional.ivy.creation.zeros_like"]], "defaultcomplexdtype (class in ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.DefaultComplexDtype"]], "defaultdtype (class in ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.DefaultDtype"]], "defaultfloatdtype (class in ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.DefaultFloatDtype"]], "defaultintdtype (class in ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.DefaultIntDtype"]], "defaultuintdtype (class in ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.DefaultUintDtype"]], "__init__() (ivy.functional.ivy.data_type.defaultcomplexdtype method)": [[363, "ivy.functional.ivy.data_type.DefaultComplexDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultdtype method)": [[363, "ivy.functional.ivy.data_type.DefaultDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultfloatdtype method)": [[363, "ivy.functional.ivy.data_type.DefaultFloatDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultintdtype method)": [[363, "ivy.functional.ivy.data_type.DefaultIntDtype.__init__"]], "__init__() (ivy.functional.ivy.data_type.defaultuintdtype method)": [[363, "ivy.functional.ivy.data_type.DefaultUintDtype.__init__"]], "as_ivy_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.as_ivy_dtype"]], "as_native_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.as_native_dtype"]], "astype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.astype"]], "broadcast_arrays() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.broadcast_arrays"]], "broadcast_to() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.broadcast_to"]], "can_cast() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.can_cast"]], "check_float() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.check_float"]], "closest_valid_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.closest_valid_dtype"]], "default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.default_complex_dtype"]], "default_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.default_dtype"]], "default_float_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.default_float_dtype"]], "default_int_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.default_int_dtype"]], "default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.default_uint_dtype"]], "dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.dtype"]], "dtype_bits() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.dtype_bits"]], "finfo() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.finfo"]], "function_supported_dtypes() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.function_unsupported_dtypes"]], "iinfo() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.iinfo"]], "infer_default_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.infer_default_dtype"]], "invalid_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.invalid_dtype"]], "is_bool_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.is_bool_dtype"]], "is_complex_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.is_complex_dtype"]], "is_float_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.is_float_dtype"]], "is_int_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.is_int_dtype"]], "is_native_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.is_native_dtype"]], "is_uint_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.is_uint_dtype"]], "ivy.functional.ivy.data_type": [[363, "module-ivy.functional.ivy.data_type"]], "promote_types() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.promote_types"]], "promote_types_of_inputs() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.promote_types_of_inputs"]], "result_type() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.result_type"]], "set_default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.set_default_complex_dtype"]], "set_default_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.set_default_dtype"]], "set_default_float_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.unset_default_uint_dtype"]], "valid_dtype() (in module ivy.functional.ivy.data_type)": [[363, "ivy.functional.ivy.data_type.valid_dtype"]], "defaultdevice (class in ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.DefaultDevice"]], "profiler (class in ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.Profiler"]], "__enter__() (ivy.functional.ivy.device.defaultdevice method)": [[364, "ivy.functional.ivy.device.DefaultDevice.__enter__"]], "__exit__() (ivy.functional.ivy.device.defaultdevice method)": [[364, "ivy.functional.ivy.device.DefaultDevice.__exit__"]], "__init__() (ivy.functional.ivy.device.defaultdevice method)": [[364, "ivy.functional.ivy.device.DefaultDevice.__init__"]], "__init__() (ivy.functional.ivy.device.profiler method)": [[364, "ivy.functional.ivy.device.Profiler.__init__"]], "as_ivy_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.as_ivy_dev"]], "as_native_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.clear_cached_mem_on_dev"]], "default_device() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.default_device"]], "dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.dev"]], "dev_util() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.dev_util"]], "function_supported_devices() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.function_supported_devices"]], "function_unsupported_devices() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.gpu_is_available"]], "ivy.functional.ivy.device": [[364, "module-ivy.functional.ivy.device"]], "num_cpu_cores() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.num_cpu_cores"]], "num_gpus() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.set_default_device"]], "set_split_factor() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.set_split_factor"]], "split_factor() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.split_factor"]], "split_func_call() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.split_func_call"]], "start() (ivy.functional.ivy.device.profiler method)": [[364, "ivy.functional.ivy.device.Profiler.start"]], "stop() (ivy.functional.ivy.device.profiler method)": [[364, "ivy.functional.ivy.device.Profiler.stop"]], "to_device() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.to_device"]], "total_mem_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.total_mem_on_dev"]], "tpu_is_available() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.tpu_is_available"]], "unset_default_device() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.unset_default_device"]], "used_mem_on_dev() (in module ivy.functional.ivy.device)": [[364, "ivy.functional.ivy.device.used_mem_on_dev"]], "abs() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.abs"]], "acos() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.acos"]], "acosh() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.acosh"]], "add() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.add"]], "asin() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.asin"]], "asinh() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.asinh"]], "atan() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.atan"]], "atan2() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.atan2"]], "atanh() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.atanh"]], "bitwise_and() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.bitwise_and"]], "bitwise_invert() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.bitwise_invert"]], "bitwise_left_shift() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.bitwise_left_shift"]], "bitwise_or() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.bitwise_or"]], "bitwise_right_shift() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.bitwise_right_shift"]], "bitwise_xor() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.bitwise_xor"]], "ceil() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.ceil"]], "cos() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.cos"]], "cosh() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.cosh"]], "deg2rad() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.deg2rad"]], "divide() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.divide"]], "equal() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.equal"]], "erf() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.erf"]], "exp() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.exp"]], "expm1() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.expm1"]], "floor() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.floor"]], "floor_divide() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.floor_divide"]], "fmod() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.fmod"]], "greater() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.greater"]], "greater_equal() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.greater_equal"]], "isfinite() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.isfinite"]], "isinf() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.isinf"]], "isnan() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.isnan"]], "isreal() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.isreal"]], "ivy.functional.ivy.elementwise": [[365, "module-ivy.functional.ivy.elementwise"]], "less() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.less"]], "less_equal() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.less_equal"]], "log() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.log"]], "log10() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.log10"]], "log1p() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.log1p"]], "log2() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.log2"]], "logaddexp() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.logaddexp"]], "logical_and() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.logical_and"]], "logical_not() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.logical_not"]], "logical_or() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.logical_or"]], "logical_xor() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.logical_xor"]], "maximum() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.maximum"]], "minimum() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.minimum"]], "multiply() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.multiply"]], "negative() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.negative"]], "not_equal() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.not_equal"]], "positive() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.positive"]], "pow() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.pow"]], "rad2deg() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.rad2deg"]], "reciprocal() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.reciprocal"]], "remainder() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.remainder"]], "round() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.round"]], "sign() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.sign"]], "sin() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.sin"]], "sinh() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.sinh"]], "sqrt() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.sqrt"]], "square() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.square"]], "subtract() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.subtract"]], "tan() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.tan"]], "tanh() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.tanh"]], "trunc() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.trunc"]], "trunc_divide() (in module ivy.functional.ivy.elementwise)": [[365, "ivy.functional.ivy.elementwise.trunc_divide"]], "nativesparsearray (class in ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.NativeSparseArray"]], "sparsearray (class in ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.SparseArray"]], "__init__() (ivy.functional.ivy.experimental.sparsearray method)": [[366, "ivy.functional.ivy.experimental.SparseArray.__init__"]], "adaptive_avg_pool1d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.adaptive_avg_pool2d"]], "adjoint() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.adjoint"]], "allclose() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.allclose"]], "angle() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.angle"]], "atleast_1d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.atleast_1d"]], "atleast_2d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.atleast_2d"]], "atleast_3d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.atleast_3d"]], "avg_pool1d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.avg_pool1d"]], "avg_pool2d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.avg_pool2d"]], "avg_pool3d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.avg_pool3d"]], "batch_norm() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.batch_norm"]], "bernoulli() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.bernoulli"]], "beta() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.beta"]], "binarizer() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.binarizer"]], "binary_cross_entropy_with_logits() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.binary_cross_entropy_with_logits"]], "bincount() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.bincount"]], "bind_custom_gradient_function() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.bind_custom_gradient_function"]], "broadcast_shapes() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.broadcast_shapes"]], "ccol_indices (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.ccol_indices"]], "col_indices (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.col_indices"]], "cond() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.cond"]], "conj() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.conj"]], "coo_indices (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.coo_indices"]], "copysign() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.copysign"]], "corrcoef() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.corrcoef"]], "count_nonzero() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.count_nonzero"]], "crow_indices (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.crow_indices"]], "current_backend() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.current_backend"]], "data (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.data"]], "dct() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dct"]], "dense_shape (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.dense_shape"]], "dft() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dft"]], "diagflat() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.diagflat"]], "diff() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.diff"]], "dirichlet() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dirichlet"]], "dropout1d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dropout1d"]], "dropout3d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dropout3d"]], "dsplit() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dsplit"]], "dstack() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.dstack"]], "eig() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.eig"]], "eigh_tridiagonal() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.eigh_tridiagonal"]], "eigvals() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.eigvals"]], "embedding() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.embedding"]], "exp2() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.exp2"]], "expand() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.expand"]], "eye_like() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.eye_like"]], "fft() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.fft"]], "fix() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.fix"]], "flatten() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.flatten"]], "fliplr() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.fliplr"]], "flipud() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.flipud"]], "float_power() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.float_power"]], "fmax() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.fmax"]], "fmin() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.fmin"]], "frexp() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.frexp"]], "gamma() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.gamma"]], "gcd() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.gcd"]], "gradient() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.gradient"]], "hamming_window() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.hamming_window"]], "handle_array_function() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.handle_array_function"]], "handle_array_like_without_promotion() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.handle_array_like_without_promotion"]], "handle_exceptions() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.handle_exceptions"]], "handle_nestable() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.handle_nestable"]], "handle_out_argument() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.handle_out_argument"]], "handle_view() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.handle_view"]], "hann_window() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.hann_window"]], "heaviside() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.heaviside"]], "hsplit() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.hsplit"]], "hstack() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.hstack"]], "hypot() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.hypot"]], "i0() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.i0"]], "ifft() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.ifft"]], "imag() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.imag"]], "infer_device() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.infer_device"]], "infer_dtype() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.infer_dtype"]], "inputs_to_native_arrays() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.inputs_to_native_arrays"]], "instance_norm() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.instance_norm"]], "integer_arrays_to_float() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.integer_arrays_to_float"]], "interp() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.interp"]], "interpolate() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.interpolate"]], "is_ivy_sparse_array() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.is_native_sparse_array"]], "isclose() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.isclose"]], "ivy.functional.ivy.experimental": [[366, "module-ivy.functional.ivy.experimental"]], "kaiser_bessel_derived_window() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.kaiser_window"]], "kron() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.kron"]], "l2_normalize() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.l2_normalize"]], "lcm() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.lcm"]], "ldexp() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.ldexp"]], "lexsort() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.lexsort"]], "logaddexp2() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.logaddexp2"]], "logit() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.logit"]], "logsigmoid() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.logsigmoid"]], "lp_normalize() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.lp_normalize"]], "matrix_exp() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.matrix_exp"]], "max_pool1d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.max_pool1d"]], "max_pool2d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.max_pool2d"]], "max_pool3d() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.max_pool3d"]], "median() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.median"]], "moveaxis() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.moveaxis"]], "msort() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.msort"]], "multi_dot() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.multi_dot"]], "nan_to_num() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.nan_to_num"]], "nanmean() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.nanmean"]], "nanmedian() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.nanmedian"]], "nansum() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.nansum"]], "native_sparse_array() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.native_sparse_array_to_indices_values_and_shape"]], "ndenumerate() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.ndenumerate"]], "ndindex() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.ndindex"]], "nextafter() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.nextafter"]], "outputs_to_ivy_arrays() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.outputs_to_ivy_arrays"]], "pad() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.pad"]], "poisson() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.poisson"]], "prelu() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.prelu"]], "quantile() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.quantile"]], "real() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.real"]], "relu6() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.relu6"]], "rot90() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.rot90"]], "row_indices (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.row_indices"]], "selu() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.selu"]], "signbit() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.signbit"]], "sinc() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.sinc"]], "take_along_axis() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.take_along_axis"]], "thresholded_relu() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.thresholded_relu"]], "to_dense_array() (ivy.functional.ivy.experimental.sparsearray method)": [[366, "ivy.functional.ivy.experimental.SparseArray.to_dense_array"]], "to_native_arrays_and_back() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.to_native_arrays_and_back"]], "top_k() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.top_k"]], "trapz() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.trapz"]], "tril_indices() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.tril_indices"]], "triu_indices() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.triu_indices"]], "unravel_index() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.unravel_index"]], "values (ivy.functional.ivy.experimental.sparsearray property)": [[366, "ivy.functional.ivy.experimental.SparseArray.values"]], "vorbis_window() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.vorbis_window"]], "vsplit() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.vsplit"]], "vstack() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.vstack"]], "xlogy() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.xlogy"]], "zeta() (in module ivy.functional.ivy.experimental)": [[366, "ivy.functional.ivy.experimental.zeta"]], "arraymode (class in ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.ArrayMode"]], "__init__() (ivy.functional.ivy.general.arraymode method)": [[367, "ivy.functional.ivy.general.ArrayMode.__init__"]], "all_equal() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.all_equal"]], "arg_info() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.arg_info"]], "arg_names() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.arg_names"]], "array_equal() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.array_equal"]], "assert_supports_inplace() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.assert_supports_inplace"]], "cache_fn() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.cache_fn"]], "clip_matrix_norm() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.clip_matrix_norm"]], "clip_vector_norm() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.clip_vector_norm"]], "container_types() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.container_types"]], "current_backend_str() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.current_backend_str"]], "default() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.default"]], "einops_rearrange() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.einops_rearrange"]], "einops_reduce() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.einops_reduce"]], "einops_repeat() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.einops_repeat"]], "exists() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.exists"]], "fourier_encode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.gather"]], "gather_nd() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.gather_nd"]], "get_all_arrays_in_memory() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_all_arrays_in_memory"]], "get_array_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_array_mode"]], "get_exception_trace_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_exception_trace_mode"]], "get_item() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_item"]], "get_min_base() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_min_base"]], "get_min_denominator() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_min_denominator"]], "get_nestable_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_nestable_mode"]], "get_num_dims() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_num_dims"]], "get_queue_timeout() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_queue_timeout"]], "get_referrers_recursive() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_referrers_recursive"]], "get_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_show_func_wrapper_trace_mode"]], "get_tmp_dir() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.get_tmp_dir"]], "has_nans() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.has_nans"]], "inplace_arrays_supported() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.inplace_arrays_supported"]], "inplace_decrement() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.inplace_decrement"]], "inplace_increment() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.inplace_increment"]], "inplace_update() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.inplace_update"]], "inplace_variables_supported() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.inplace_variables_supported"]], "is_array() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.is_array"]], "is_ivy_array() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.is_ivy_array"]], "is_ivy_container() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.is_ivy_container"]], "is_native_array() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.is_native_array"]], "isin() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.isin"]], "isscalar() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.isscalar"]], "ivy.functional.ivy.general": [[367, "module-ivy.functional.ivy.general"]], "match_kwargs() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.match_kwargs"]], "multiprocessing() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.multiprocessing"]], "num_arrays_in_memory() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.scatter_flat"]], "scatter_nd() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.scatter_nd"]], "set_array_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_array_mode"]], "set_exception_trace_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_exception_trace_mode"]], "set_min_base() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_min_base"]], "set_min_denominator() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_min_denominator"]], "set_nestable_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_nestable_mode"]], "set_queue_timeout() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_queue_timeout"]], "set_shape_array_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.set_tmp_dir"]], "shape() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.shape"]], "shape_array_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.shape_array_mode"]], "stable_divide() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.stable_divide"]], "stable_pow() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.stable_pow"]], "supports_inplace_updates() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.supports_inplace_updates"]], "to_ivy_shape() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.to_ivy_shape"]], "to_list() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.to_list"]], "to_native_shape() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.to_native_shape"]], "to_numpy() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.to_numpy"]], "to_scalar() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.to_scalar"]], "try_else_none() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.try_else_none"]], "unset_array_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.unset_exception_trace_mode"]], "unset_nestable_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.unset_nestable_mode"]], "unset_queue_timeout() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode"]], "value_is_nan() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.value_is_nan"]], "vmap() (in module ivy.functional.ivy.general)": [[367, "ivy.functional.ivy.general.vmap"]], "gradienttracking (class in ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.GradientTracking"]], "__init__() (ivy.functional.ivy.gradients.gradienttracking method)": [[368, "ivy.functional.ivy.gradients.GradientTracking.__init__"]], "adam_step() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.adam_step"]], "adam_update() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.adam_update"]], "execute_with_gradients() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.execute_with_gradients"]], "grad() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.grad"]], "gradient_descent_update() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.gradient_descent_update"]], "ivy.functional.ivy.gradients": [[368, "module-ivy.functional.ivy.gradients"]], "jac() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.jac"]], "lamb_update() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.lamb_update"]], "lars_update() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.lars_update"]], "optimizer_update() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.optimizer_update"]], "set_with_grads() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.set_with_grads"]], "stop_gradient() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.stop_gradient"]], "unset_with_grads() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.unset_with_grads"]], "value_and_grad() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.value_and_grad"]], "with_grads() (in module ivy.functional.ivy.gradients)": [[368, "ivy.functional.ivy.gradients.with_grads"]], "conv() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv"]], "conv1d() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv1d"]], "conv1d_transpose() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv1d_transpose"]], "conv2d() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv2d"]], "conv2d_transpose() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv2d_transpose"]], "conv3d() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv3d"]], "conv3d_transpose() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv3d_transpose"]], "conv_general_dilated() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv_general_dilated"]], "conv_general_transpose() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.conv_general_transpose"]], "depthwise_conv2d() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.depthwise_conv2d"]], "dropout() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.dropout"]], "ivy.functional.ivy.layers": [[369, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.linear"]], "lstm_update() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.lstm_update"]], "multi_head_attention() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy.functional.ivy.layers)": [[369, "ivy.functional.ivy.layers.scaled_dot_product_attention"]], "cholesky() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.cholesky"]], "cross() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.cross"]], "det() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.det"]], "diag() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.diag"]], "diagonal() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.diagonal"]], "eig() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.eig"]], "eigh() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.eigh"]], "eigvalsh() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.eigvalsh"]], "inner() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.inner"]], "inv() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.inv"]], "ivy.functional.ivy.linear_algebra": [[370, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.lu_factor"]], "matmul() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.matmul"]], "matrix_norm() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.matrix_norm"]], "matrix_power() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.matrix_power"]], "matrix_rank() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.matrix_rank"]], "matrix_transpose() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.matrix_transpose"]], "outer() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.outer"]], "pinv() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.pinv"]], "qr() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.qr"]], "slogdet() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.slogdet"]], "solve() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.solve"]], "svd() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.svd"]], "svdvals() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.svdvals"]], "tensordot() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.tensordot"]], "tensorsolve() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.tensorsolve"]], "trace() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.trace"]], "vander() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.vander"]], "vecdot() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.vecdot"]], "vector_norm() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy.functional.ivy.linear_algebra)": [[370, "ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy.functional.ivy.losses)": [[371, "ivy.functional.ivy.losses.binary_cross_entropy"]], "cross_entropy() (in module ivy.functional.ivy.losses)": [[371, "ivy.functional.ivy.losses.cross_entropy"]], "ivy.functional.ivy.losses": [[371, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy.functional.ivy.losses)": [[371, "ivy.functional.ivy.losses.sparse_cross_entropy"]], "clip() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.clip"]], "concat() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.concat"]], "constant_pad() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.constant_pad"]], "expand_dims() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.expand_dims"]], "flip() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.flip"]], "ivy.functional.ivy.manipulation": [[372, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.permute_dims"]], "repeat() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.repeat"]], "reshape() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.reshape"]], "roll() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.roll"]], "split() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.split"]], "squeeze() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.squeeze"]], "stack() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.stack"]], "swapaxes() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.swapaxes"]], "tile() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.tile"]], "unstack() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.unstack"]], "zero_pad() (in module ivy.functional.ivy.manipulation)": [[372, "ivy.functional.ivy.manipulation.zero_pad"]], "fomaml_step() (in module ivy.functional.ivy.meta)": [[373, "ivy.functional.ivy.meta.fomaml_step"]], "ivy.functional.ivy.meta": [[373, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy.functional.ivy.meta)": [[373, "ivy.functional.ivy.meta.maml_step"]], "reptile_step() (in module ivy.functional.ivy.meta)": [[373, "ivy.functional.ivy.meta.reptile_step"]], "all_nested_indices() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.all_nested_indices"]], "copy_nest() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.copy_nest"]], "duplicate_array_index_chains() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.duplicate_array_index_chains"]], "index_nest() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.index_nest"]], "insert_into_nest_at_index() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[374, "module-ivy.functional.ivy.nest"]], "map() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.map"]], "map_nest_at_index() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.map_nest_at_index"]], "map_nest_at_indices() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.map_nest_at_indices"]], "multi_index_nest() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.multi_index_nest"]], "nested_any() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.nested_any"]], "nested_argwhere() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.nested_argwhere"]], "nested_map() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.nested_map"]], "nested_multi_map() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.nested_multi_map"]], "prune_empty() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.prune_empty"]], "prune_nest_at_index() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.set_nest_at_index"]], "set_nest_at_indices() (in module ivy.functional.ivy.nest)": [[374, "ivy.functional.ivy.nest.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[375, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy.functional.ivy.norms)": [[375, "ivy.functional.ivy.norms.layer_norm"]], "ivy.functional.ivy.random": [[376, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy.functional.ivy.random)": [[376, "ivy.functional.ivy.random.multinomial"]], "randint() (in module ivy.functional.ivy.random)": [[376, "ivy.functional.ivy.random.randint"]], "random_normal() (in module ivy.functional.ivy.random)": [[376, "ivy.functional.ivy.random.random_normal"]], "random_uniform() (in module ivy.functional.ivy.random)": [[376, "ivy.functional.ivy.random.random_uniform"]], "seed() (in module ivy.functional.ivy.random)": [[376, "ivy.functional.ivy.random.seed"]], "shuffle() (in module ivy.functional.ivy.random)": [[376, "ivy.functional.ivy.random.shuffle"]], "argmax() (in module ivy.functional.ivy.searching)": [[377, "ivy.functional.ivy.searching.argmax"]], "argmin() (in module ivy.functional.ivy.searching)": [[377, "ivy.functional.ivy.searching.argmin"]], "argwhere() (in module ivy.functional.ivy.searching)": [[377, "ivy.functional.ivy.searching.argwhere"]], "ivy.functional.ivy.searching": [[377, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy.functional.ivy.searching)": [[377, "ivy.functional.ivy.searching.nonzero"]], "where() (in module ivy.functional.ivy.searching)": [[377, "ivy.functional.ivy.searching.where"]], "ivy.functional.ivy.set": [[378, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy.functional.ivy.set)": [[378, "ivy.functional.ivy.set.unique_all"]], "unique_counts() (in module ivy.functional.ivy.set)": [[378, "ivy.functional.ivy.set.unique_counts"]], "unique_inverse() (in module ivy.functional.ivy.set)": [[378, "ivy.functional.ivy.set.unique_inverse"]], "unique_values() (in module ivy.functional.ivy.set)": [[378, "ivy.functional.ivy.set.unique_values"]], "argsort() (in module ivy.functional.ivy.sorting)": [[379, "ivy.functional.ivy.sorting.argsort"]], "ivy.functional.ivy.sorting": [[379, "module-ivy.functional.ivy.sorting"]], "searchsorted() (in module ivy.functional.ivy.sorting)": [[379, "ivy.functional.ivy.sorting.searchsorted"]], "sort() (in module ivy.functional.ivy.sorting)": [[379, "ivy.functional.ivy.sorting.sort"]], "cumprod() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.cumprod"]], "cumsum() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.cumsum"]], "einsum() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.einsum"]], "ivy.functional.ivy.statistical": [[380, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.max"]], "mean() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.mean"]], "min() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.min"]], "prod() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.prod"]], "std() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.std"]], "sum() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.sum"]], "var() (in module ivy.functional.ivy.statistical)": [[380, "ivy.functional.ivy.statistical.var"]], "all() (in module ivy.functional.ivy.utility)": [[381, "ivy.functional.ivy.utility.all"]], "any() (in module ivy.functional.ivy.utility)": [[381, "ivy.functional.ivy.utility.any"]], "ivy.functional.ivy.utility": [[381, "module-ivy.functional.ivy.utility"]], "conv() (in module ivy)": [[385, "ivy.conv"]], "conv1d() (in module ivy)": [[386, "ivy.conv1d"]], "conv1d() (ivy.array method)": [[386, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[386, "ivy.Container.conv1d"]], "conv1d_transpose() (in module ivy)": [[387, "ivy.conv1d_transpose"]], "conv1d_transpose() (ivy.array method)": [[387, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[387, "ivy.Container.conv1d_transpose"]], "conv2d() (in module ivy)": [[388, "ivy.conv2d"]], "conv2d() (ivy.array method)": [[388, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[388, "ivy.Container.conv2d"]], "conv2d_transpose() (in module ivy)": [[389, "ivy.conv2d_transpose"]], "conv2d_transpose() (ivy.array method)": [[389, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[389, "ivy.Container.conv2d_transpose"]], "conv3d() (in module ivy)": [[390, "ivy.conv3d"]], "conv3d() (ivy.array method)": [[390, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[390, "ivy.Container.conv3d"]], "conv3d_transpose() (in module ivy)": [[391, "ivy.conv3d_transpose"]], "conv3d_transpose() (ivy.array method)": [[391, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[391, "ivy.Container.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[392, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[393, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[394, "ivy.depthwise_conv2d"]], "depthwise_conv2d() (ivy.array method)": [[394, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[394, "ivy.Container.depthwise_conv2d"]], "dropout() (in module ivy)": [[395, "ivy.dropout"]], "dropout() (ivy.array method)": [[395, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[395, "ivy.Container.dropout"]], "linear() (in module ivy)": [[396, "ivy.linear"]], "linear() (ivy.array method)": [[396, "ivy.Array.linear"]], "linear() (ivy.container method)": [[396, "ivy.Container.linear"]], "lstm_update() (in module ivy)": [[397, "ivy.lstm_update"]], "lstm_update() (ivy.array method)": [[397, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[397, "ivy.Container.lstm_update"]], "multi_head_attention() (in module ivy)": [[398, "ivy.multi_head_attention"]], "multi_head_attention() (ivy.array method)": [[398, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[398, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[399, "ivy.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[399, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[399, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[400, "ivy.cholesky"]], "cholesky() (ivy.array method)": [[400, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[400, "ivy.Container.cholesky"]], "cross() (in module ivy)": [[401, "ivy.cross"]], "cross() (ivy.array method)": [[401, "ivy.Array.cross"]], "cross() (ivy.container method)": [[401, "ivy.Container.cross"]], "det() (in module ivy)": [[402, "ivy.det"]], "det() (ivy.array method)": [[402, "ivy.Array.det"]], "det() (ivy.container method)": [[402, "ivy.Container.det"]], "diag() (in module ivy)": [[403, "ivy.diag"]], "diag() (ivy.array method)": [[403, "ivy.Array.diag"]], "diag() (ivy.container method)": [[403, "ivy.Container.diag"]], "diagonal() (in module ivy)": [[404, "ivy.diagonal"]], "diagonal() (ivy.array method)": [[404, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[404, "ivy.Container.diagonal"]], "eig() (in module ivy)": [[405, "ivy.eig"]], "eig() (ivy.array method)": [[405, "ivy.Array.eig"]], "eig() (ivy.container method)": [[405, "ivy.Container.eig"]], "eigh() (in module ivy)": [[406, "ivy.eigh"]], "eigh() (ivy.array method)": [[406, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[406, "ivy.Container.eigh"]], "eigvalsh() (in module ivy)": [[407, "ivy.eigvalsh"]], "eigvalsh() (ivy.array method)": [[407, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[407, "ivy.Container.eigvalsh"]], "inner() (in module ivy)": [[408, "ivy.inner"]], "inner() (ivy.array method)": [[408, "ivy.Array.inner"]], "inner() (ivy.container method)": [[408, "ivy.Container.inner"]], "inv() (in module ivy)": [[409, "ivy.inv"]], "inv() (ivy.array method)": [[409, "ivy.Array.inv"]], "inv() (ivy.container method)": [[409, "ivy.Container.inv"]], "lu_factor() (in module ivy)": [[410, "ivy.lu_factor"]], "matmul() (in module ivy)": [[411, "ivy.matmul"]], "matmul() (ivy.array method)": [[411, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[411, "ivy.Container.matmul"]], "matrix_norm() (in module ivy)": [[412, "ivy.matrix_norm"]], "matrix_norm() (ivy.array method)": [[412, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[412, "ivy.Container.matrix_norm"]], "matrix_power() (in module ivy)": [[413, "ivy.matrix_power"]], "matrix_power() (ivy.array method)": [[413, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[413, "ivy.Container.matrix_power"]], "matrix_rank() (in module ivy)": [[414, "ivy.matrix_rank"]], "matrix_rank() (ivy.array method)": [[414, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[414, "ivy.Container.matrix_rank"]], "matrix_transpose() (in module ivy)": [[415, "ivy.matrix_transpose"]], "matrix_transpose() (ivy.array method)": [[415, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[415, "ivy.Container.matrix_transpose"]], "outer() (in module ivy)": [[416, "ivy.outer"]], "outer() (ivy.array method)": [[416, "ivy.Array.outer"]], "outer() (ivy.container method)": [[416, "ivy.Container.outer"]], "pinv() (in module ivy)": [[417, "ivy.pinv"]], "pinv() (ivy.array method)": [[417, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[417, "ivy.Container.pinv"]], "qr() (in module ivy)": [[418, "ivy.qr"]], "qr() (ivy.array method)": [[418, "ivy.Array.qr"]], "qr() (ivy.container method)": [[418, "ivy.Container.qr"]], "slogdet() (in module ivy)": [[419, "ivy.slogdet"]], "slogdet() (ivy.array method)": [[419, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[419, "ivy.Container.slogdet"]], "solve() (in module ivy)": [[420, "ivy.solve"]], "solve() (ivy.array method)": [[420, "ivy.Array.solve"]], "solve() (ivy.container method)": [[420, "ivy.Container.solve"]], "svd() (in module ivy)": [[421, "ivy.svd"]], "svd() (ivy.array method)": [[421, "ivy.Array.svd"]], "svd() (ivy.container method)": [[421, "ivy.Container.svd"]], "svdvals() (in module ivy)": [[422, "ivy.svdvals"]], "svdvals() (ivy.array method)": [[422, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[422, "ivy.Container.svdvals"]], "tensordot() (in module ivy)": [[423, "ivy.tensordot"]], "tensordot() (ivy.array method)": [[423, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[423, "ivy.Container.tensordot"]], "tensorsolve() (in module ivy)": [[424, "ivy.tensorsolve"]], "tensorsolve() (ivy.array method)": [[424, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[424, "ivy.Container.tensorsolve"]], "trace() (in module ivy)": [[425, "ivy.trace"]], "trace() (ivy.array method)": [[425, "ivy.Array.trace"]], "trace() (ivy.container method)": [[425, "ivy.Container.trace"]], "vander() (in module ivy)": [[426, "ivy.vander"]], "vander() (ivy.array method)": [[426, "ivy.Array.vander"]], "vander() (ivy.container method)": [[426, "ivy.Container.vander"]], "vecdot() (in module ivy)": [[427, "ivy.vecdot"]], "vecdot() (ivy.array method)": [[427, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[427, "ivy.Container.vecdot"]], "vector_norm() (in module ivy)": [[428, "ivy.vector_norm"]], "vector_norm() (ivy.array method)": [[428, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[428, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[429, "ivy.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[429, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[429, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[431, "ivy.binary_cross_entropy"]], "binary_cross_entropy() (ivy.array method)": [[431, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[431, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[432, "ivy.cross_entropy"]], "cross_entropy() (ivy.array method)": [[432, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[432, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (in module ivy)": [[433, "ivy.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[433, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[433, "ivy.Container.sparse_cross_entropy"]], "clip() (in module ivy)": [[435, "ivy.clip"]], "clip() (ivy.array method)": [[435, "ivy.Array.clip"]], "clip() (ivy.container method)": [[435, "ivy.Container.clip"]], "concat() (in module ivy)": [[436, "ivy.concat"]], "concat() (ivy.array method)": [[436, "ivy.Array.concat"]], "concat() (ivy.container method)": [[436, "ivy.Container.concat"]], "constant_pad() (in module ivy)": [[437, "ivy.constant_pad"]], "constant_pad() (ivy.array method)": [[437, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[437, "ivy.Container.constant_pad"]], "expand_dims() (in module ivy)": [[438, "ivy.expand_dims"]], "expand_dims() (ivy.array method)": [[438, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[438, "ivy.Container.expand_dims"]], "flip() (in module ivy)": [[439, "ivy.flip"]], "flip() (ivy.array method)": [[439, "ivy.Array.flip"]], "flip() (ivy.container method)": [[439, "ivy.Container.flip"]], "permute_dims() (in module ivy)": [[440, "ivy.permute_dims"]], "permute_dims() (ivy.array method)": [[440, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[440, "ivy.Container.permute_dims"]], "repeat() (in module ivy)": [[441, "ivy.repeat"]], "repeat() (ivy.array method)": [[441, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[441, "ivy.Container.repeat"]], "reshape() (in module ivy)": [[442, "ivy.reshape"]], "reshape() (ivy.array method)": [[442, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[442, "ivy.Container.reshape"]], "roll() (in module ivy)": [[443, "ivy.roll"]], "roll() (ivy.array method)": [[443, "ivy.Array.roll"]], "roll() (ivy.container method)": [[443, "ivy.Container.roll"]], "split() (in module ivy)": [[444, "ivy.split"]], "split() (ivy.array method)": [[444, "ivy.Array.split"]], "split() (ivy.container method)": [[444, "ivy.Container.split"]], "squeeze() (in module ivy)": [[445, "ivy.squeeze"]], "squeeze() (ivy.array method)": [[445, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[445, "ivy.Container.squeeze"]], "stack() (in module ivy)": [[446, "ivy.stack"]], "stack() (ivy.array method)": [[446, "ivy.Array.stack"]], "stack() (ivy.container method)": [[446, "ivy.Container.stack"]], "swapaxes() (in module ivy)": [[447, "ivy.swapaxes"]], "swapaxes() (ivy.array method)": [[447, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[447, "ivy.Container.swapaxes"]], "tile() (in module ivy)": [[448, "ivy.tile"]], "tile() (ivy.array method)": [[448, "ivy.Array.tile"]], "tile() (ivy.container method)": [[448, "ivy.Container.tile"]], "unstack() (in module ivy)": [[449, "ivy.unstack"]], "unstack() (ivy.array method)": [[449, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[449, "ivy.Container.unstack"]], "zero_pad() (in module ivy)": [[450, "ivy.zero_pad"]], "zero_pad() (ivy.array method)": [[450, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[450, "ivy.Container.zero_pad"]], "fomaml_step() (in module ivy)": [[456, "ivy.fomaml_step"]], "maml_step() (in module ivy)": [[457, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[458, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[459, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[460, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[461, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[462, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[463, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[464, "ivy.insert_into_nest_at_indices"]], "map() (in module ivy)": [[465, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[466, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[467, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[468, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[469, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[470, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[471, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[472, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[473, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[474, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[475, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[476, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[477, "ivy.set_nest_at_indices"]], "layer_norm() (in module ivy)": [[478, "ivy.layer_norm"]], "layer_norm() (ivy.array method)": [[478, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[478, "ivy.Container.layer_norm"]], "multinomial() (in module ivy)": [[483, "ivy.multinomial"]], "multinomial() (ivy.array method)": [[483, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[483, "ivy.Container.multinomial"]], "randint() (in module ivy)": [[484, "ivy.randint"]], "randint() (ivy.array method)": [[484, "ivy.Array.randint"]], "randint() (ivy.container method)": [[484, "ivy.Container.randint"]], "random_normal() (in module ivy)": [[485, "ivy.random_normal"]], "random_normal() (ivy.array method)": [[485, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[485, "ivy.Container.random_normal"]], "random_uniform() (in module ivy)": [[486, "ivy.random_uniform"]], "random_uniform() (ivy.array method)": [[486, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[486, "ivy.Container.random_uniform"]], "seed() (in module ivy)": [[487, "ivy.seed"]], "shuffle() (in module ivy)": [[488, "ivy.shuffle"]], "shuffle() (ivy.array method)": [[488, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[488, "ivy.Container.shuffle"]], "argmax() (in module ivy)": [[489, "ivy.argmax"]], "argmax() (ivy.array method)": [[489, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[489, "ivy.Container.argmax"]], "argmin() (in module ivy)": [[490, "ivy.argmin"]], "argmin() (ivy.array method)": [[490, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[490, "ivy.Container.argmin"]], "argwhere() (in module ivy)": [[491, "ivy.argwhere"]], "argwhere() (ivy.array method)": [[491, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[491, "ivy.Container.argwhere"]], "nonzero() (in module ivy)": [[492, "ivy.nonzero"]], "nonzero() (ivy.array method)": [[492, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[492, "ivy.Container.nonzero"]], "where() (in module ivy)": [[493, "ivy.where"]], "where() (ivy.array method)": [[493, "ivy.Array.where"]], "where() (ivy.container method)": [[493, "ivy.Container.where"]], "unique_all() (in module ivy)": [[494, "ivy.unique_all"]], "unique_all() (ivy.array method)": [[494, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[494, "ivy.Container.unique_all"]], "unique_counts() (in module ivy)": [[495, "ivy.unique_counts"]], "unique_counts() (ivy.array method)": [[495, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[495, "ivy.Container.unique_counts"]], "unique_inverse() (in module ivy)": [[496, "ivy.unique_inverse"]], "unique_inverse() (ivy.array method)": [[496, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[496, "ivy.Container.unique_inverse"]], "unique_values() (in module ivy)": [[497, "ivy.unique_values"]], "unique_values() (ivy.array method)": [[497, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[497, "ivy.Container.unique_values"]], "argsort() (in module ivy)": [[498, "ivy.argsort"]], "argsort() (ivy.array method)": [[498, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[498, "ivy.Container.argsort"]], "searchsorted() (in module ivy)": [[499, "ivy.searchsorted"]], "searchsorted() (ivy.array method)": [[499, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[499, "ivy.Container.searchsorted"]], "sort() (in module ivy)": [[500, "ivy.sort"]], "sort() (ivy.array method)": [[500, "ivy.Array.sort"]], "sort() (ivy.container method)": [[500, "ivy.Container.sort"]], "cumprod() (in module ivy)": [[502, "ivy.cumprod"]], "cumprod() (ivy.array method)": [[502, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[502, "ivy.Container.cumprod"]], "cumsum() (in module ivy)": [[503, "ivy.cumsum"]], "cumsum() (ivy.array method)": [[503, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[503, "ivy.Container.cumsum"]], "einsum() (in module ivy)": [[504, "ivy.einsum"]], "einsum() (ivy.array method)": [[504, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[504, "ivy.Container.einsum"]], "max() (in module ivy)": [[505, "ivy.max"]], "max() (ivy.array method)": [[505, "ivy.Array.max"]], "max() (ivy.container method)": [[505, "ivy.Container.max"]], "mean() (in module ivy)": [[506, "ivy.mean"]], "mean() (ivy.array method)": [[506, "ivy.Array.mean"]], "mean() (ivy.container method)": [[506, "ivy.Container.mean"]], "min() (in module ivy)": [[507, "ivy.min"]], "min() (ivy.array method)": [[507, "ivy.Array.min"]], "min() (ivy.container method)": [[507, "ivy.Container.min"]], "prod() (in module ivy)": [[508, "ivy.prod"]], "prod() (ivy.array method)": [[508, "ivy.Array.prod"]], "prod() (ivy.container method)": [[508, "ivy.Container.prod"]], "std() (in module ivy)": [[509, "ivy.std"]], "std() (ivy.array method)": [[509, "ivy.Array.std"]], "std() (ivy.container method)": [[509, "ivy.Container.std"]], "sum() (in module ivy)": [[510, "ivy.sum"]], "sum() (ivy.array method)": [[510, "ivy.Array.sum"]], "sum() (ivy.container method)": [[510, "ivy.Container.sum"]], "var() (in module ivy)": [[511, "ivy.var"]], "var() (ivy.array method)": [[511, "ivy.Array.var"]], "var() (ivy.container method)": [[511, "ivy.Container.var"]], "all() (in module ivy)": [[512, "ivy.all"]], "all() (ivy.array method)": [[512, "ivy.Array.all"]], "all() (ivy.container method)": [[512, "ivy.Container.all"]], "any() (in module ivy)": [[513, "ivy.any"]], "any() (ivy.array method)": [[513, "ivy.Array.any"]], "any() (ivy.container method)": [[513, "ivy.Container.any"]], "nestedarray (class in ivy.nested_array.nested_array)": [[515, "ivy.nested_array.nested_array.NestedArray"]], "__init__() (ivy.nested_array.nested_array.nestedarray method)": [[515, "ivy.nested_array.nested_array.NestedArray.__init__"]], "data (ivy.nested_array.nested_array.nestedarray property)": [[515, "ivy.nested_array.nested_array.NestedArray.data"]], "device (ivy.nested_array.nested_array.nestedarray property)": [[515, "ivy.nested_array.nested_array.NestedArray.device"]], "dtype (ivy.nested_array.nested_array.nestedarray property)": [[515, "ivy.nested_array.nested_array.NestedArray.dtype"]], "from_row_lengths() (ivy.nested_array.nested_array.nestedarray class method)": [[515, "ivy.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_split() (ivy.nested_array.nested_array.nestedarray class method)": [[515, "ivy.nested_array.nested_array.NestedArray.from_row_split"]], "ivy.nested_array.nested_array": [[515, "module-ivy.nested_array.nested_array"]], "ndim (ivy.nested_array.nested_array.nestedarray property)": [[515, "ivy.nested_array.nested_array.NestedArray.ndim"]], "nested_array() (ivy.nested_array.nested_array.nestedarray class method)": [[515, "ivy.nested_array.nested_array.NestedArray.nested_array"]], "reshape() (ivy.nested_array.nested_array.nestedarray method)": [[515, "ivy.nested_array.nested_array.NestedArray.reshape"]], "shape (ivy.nested_array.nested_array.nestedarray property)": [[515, "ivy.nested_array.nested_array.NestedArray.shape"]], "unbind() (ivy.nested_array.nested_array.nestedarray method)": [[515, "ivy.nested_array.nested_array.NestedArray.unbind"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[516, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[516, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "available_frameworks() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[517, "ivy_tests.test_ivy.helpers.available_frameworks.available_frameworks"]], "ground_truth() (in module ivy_tests.test_ivy.helpers.available_frameworks)": [[517, "ivy_tests.test_ivy.helpers.available_frameworks.ground_truth"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[517, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "empty_func() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.empty_func"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "flatten_fw_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.flatten_fw_and_to_np"]], "framework_comparator() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.framework_comparator"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[518, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "make_json_pickable() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.make_json_pickable"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "var_fn() (in module ivy_tests.test_ivy.helpers.function_testing)": [[518, "ivy_tests.test_ivy.helpers.function_testing.var_fn"]], "interruptedtest": [[519, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[519, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[519, "module-ivy_tests.test_ivy.helpers.globals"]], "remove_all_current_framework() (in module ivy_tests.test_ivy.helpers.globals)": [[519, "ivy_tests.test_ivy.helpers.globals.remove_all_current_framework"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[519, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[519, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[519, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[519, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[519, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[520, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[521, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[521, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[521, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[521, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[521, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[521, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[521, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "as_cont() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.as_cont"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[522, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[522, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[523, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[523, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "check_all() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_any"]], "check_dimensions() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[526, "ivy.utils.assertions.check_true"]], "ivy.utils.assertions": [[526, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[527, "module-ivy.utils.backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[528, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[528, "module-ivy.utils.dynamic_import"]], "ivybackendexception": [[529, "ivy.utils.exceptions.IvyBackendException"]], "ivyerror": [[529, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[529, "ivy.utils.exceptions.IvyException"]], "ivynotimplementedexception": [[529, "ivy.utils.exceptions.IvyNotImplementedException"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[529, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[529, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[529, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[529, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[529, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[529, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[530, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[530, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[530, "module-ivy.utils.inspection"]], "cprint() (in module ivy.utils.verbosity)": [[531, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[531, "module-ivy.utils.verbosity"]], "applied libraries": [[577, "term-Applied-Libraries"]], "automatic code conversions": [[577, "term-Automatic-Code-Conversions"]], "backend handler": [[577, "term-Backend-Handler"]], "compositional functions": [[577, "term-Compositional-Functions"]], "convenience functions": [[577, "term-Convenience-Functions"]], "framework": [[577, "term-Framework"]], "framework handler": [[577, "term-Framework-Handler"]], "graph compiler": [[577, "term-Graph-Compiler"]], "ivy array": [[577, "term-Ivy-Array"]], "ivy backends": [[577, "term-Ivy-Backends"]], "ivy builder": [[577, "term-Ivy-Builder"]], "ivy compiler": [[577, "term-Ivy-Compiler"]], "ivy container": [[577, "term-Ivy-Container"]], "ivy frontends": [[577, "term-Ivy-Frontends"]], "ivy functional api": [[577, "term-Ivy-Functional-API"]], "ivy graph compiler": [[577, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[577, "term-Ivy-Transpiler"]], "mixed functions": [[577, "term-Mixed-Functions"]], "native array": [[577, "term-Native-Array"]], "nestable functions": [[577, "term-Nestable-Functions"]], "pipeline": [[577, "term-Pipeline"]], "primary functions": [[577, "term-Primary-Functions"]], "standalone functions": [[577, "term-Standalone-Functions"]], "submodule helper functions": [[577, "term-Submodule-Helper-Functions"]]}})