Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 699, 714, 737], "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 126, 127, 128, 131, 132, 134, 135, 137, 138, 139, 140, 146, 147, 148, 149, 150, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 360, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 396, 399, 400, 405, 406, 408, 409, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 481, 483, 486, 487, 490, 492, 493, 496, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 683, 684, 685, 686, 687, 688, 693, 696, 702, 703, 704, 706, 707, 708, 709, 710, 712, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 738, 739, 740, 743, 744, 745, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762], "transpil": [0, 1, 712, 726, 733, 739, 740, 741, 749, 750, 755, 761, 762], "ar": [0, 1, 2, 4, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 49, 51, 52, 76, 91, 93, 96, 101, 155, 160, 162, 167, 191, 193, 194, 197, 201, 222, 223, 227, 232, 233, 237, 239, 244, 245, 246, 269, 271, 272, 274, 275, 277, 278, 279, 281, 282, 287, 292, 295, 299, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 324, 325, 331, 332, 333, 334, 337, 342, 344, 352, 357, 358, 360, 368, 369, 370, 372, 373, 376, 380, 381, 382, 390, 391, 392, 394, 400, 403, 405, 407, 414, 416, 420, 421, 422, 423, 424, 434, 439, 440, 441, 442, 444, 447, 448, 449, 464, 469, 473, 484, 485, 494, 504, 516, 526, 538, 540, 541, 543, 544, 545, 546, 548, 550, 552, 553, 554, 568, 569, 571, 572, 574, 578, 579, 580, 584, 585, 587, 590, 594, 595, 599, 600, 601, 606, 607, 610, 614, 616, 626, 631, 636, 637, 638, 646, 647, 648, 651, 652, 653, 654, 656, 658, 682, 683, 686, 689, 690, 696, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762], "publicli": [0, 2], "avail": [0, 2, 10, 33, 150, 156, 158, 159, 170, 312, 405, 456, 540, 543, 702, 704, 713, 714, 720, 721, 722, 723, 725, 726, 733, 735, 738, 748, 749, 760, 761], "yet": [0, 2, 302, 304, 305, 313, 314, 318, 712, 713, 748], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 306, 319, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 545, 550, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 590, 591, 592, 594, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 702, 704, 705, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 748, 755, 756, 757, 759], "certain": [0, 1, 2, 26, 76, 92, 93, 538, 713, 714, 716, 722, 729, 735, 738, 748, 759], "part": [0, 2, 5, 8, 9, 31, 32, 37, 51, 61, 64, 67, 99, 100, 101, 207, 211, 234, 269, 270, 291, 303, 306, 310, 312, 321, 358, 400, 442, 535, 538, 541, 546, 579, 580, 685, 686, 702, 708, 712, 714, 716, 719, 722, 727, 729, 732, 733, 735, 736, 738, 740, 741, 745, 747, 748, 753, 755, 760, 761, 762], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 119, 122, 125, 126, 127, 129, 133, 134, 148, 151, 161, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 490, 496, 501, 502, 503, 504, 506, 508, 509, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 627, 629, 631, 632, 637, 638, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762], "doc": [0, 2, 32, 101, 269, 303, 436, 538, 702, 707, 711, 712, 715, 724, 725, 727, 728, 735, 740, 743, 744], "won": [0, 2, 705, 706, 713, 714, 720, 722, 745, 749], "t": [0, 1, 2, 9, 13, 24, 32, 36, 47, 49, 51, 285, 300, 306, 308, 310, 358, 472, 490, 504, 526, 543, 544, 545, 550, 569, 570, 633, 684, 702, 705, 706, 708, 709, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 727, 729, 730, 731, 732, 735, 736, 738, 740, 742, 743, 744, 745, 748, 749, 753, 755, 757], "work": [0, 1, 2, 9, 32, 49, 321, 442, 550, 632, 633, 637, 642, 643, 702, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 732, 733, 734, 735, 736, 739, 740, 742, 744, 745, 749, 753, 755, 757, 759, 762], "expect": [0, 2, 9, 14, 15, 32, 38, 133, 201, 245, 309, 331, 352, 446, 539, 541, 543, 547, 589, 603, 682, 683, 684, 686, 702, 706, 713, 714, 716, 722, 723, 726, 727, 730, 732, 734, 735, 738, 748, 749], "now": [0, 2, 684, 685, 686, 702, 706, 713, 716, 717, 718, 719, 720, 721, 722, 723, 728, 730, 733, 734, 735, 736, 738, 742, 743, 745, 747, 748, 755], "when": [0, 1, 2, 4, 5, 6, 8, 9, 14, 15, 18, 19, 22, 26, 28, 29, 31, 32, 37, 38, 41, 42, 45, 52, 96, 106, 177, 194, 199, 201, 217, 227, 232, 245, 246, 250, 301, 309, 310, 312, 315, 316, 321, 331, 344, 358, 360, 369, 372, 405, 414, 416, 421, 441, 442, 472, 488, 496, 502, 538, 539, 541, 543, 545, 546, 547, 548, 550, 552, 553, 556, 558, 571, 587, 592, 603, 604, 605, 613, 625, 626, 635, 636, 637, 646, 647, 648, 651, 652, 654, 655, 667, 669, 671, 673, 682, 683, 684, 685, 686, 687, 693, 704, 705, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 745, 748, 753, 755, 758, 759, 760, 761], "we": [0, 1, 2, 9, 14, 15, 16, 24, 32, 37, 38, 47, 49, 67, 300, 308, 312, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 409, 412, 455, 465, 504, 526, 527, 529, 534, 535, 543, 544, 546, 547, 548, 587, 603, 609, 610, 611, 613, 615, 616, 618, 620, 682, 686, 693, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 755, 756, 760, 761], "call": [0, 2, 9, 24, 29, 32, 47, 49, 52, 72, 126, 127, 167, 310, 321, 367, 441, 490, 496, 510, 526, 527, 529, 537, 540, 543, 544, 546, 550, 592, 625, 631, 635, 636, 682, 684, 685, 686, 688, 693, 702, 705, 712, 714, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 742, 743, 744, 745, 748, 755, 756, 759], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 119, 122, 125, 129, 133, 134, 164, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 276, 279, 281, 286, 290, 295, 301, 303, 306, 309, 310, 311, 312, 315, 316, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 358, 359, 375, 379, 380, 381, 382, 385, 386, 388, 395, 399, 400, 405, 406, 411, 412, 414, 415, 416, 420, 421, 423, 426, 427, 432, 433, 434, 435, 436, 437, 438, 441, 443, 448, 450, 451, 459, 462, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 481, 487, 490, 491, 500, 504, 508, 509, 510, 523, 526, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 631, 644, 646, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 702, 705, 706, 708, 710, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 747, 748, 750, 751, 753, 754, 755, 756, 758, 759, 761, 762], "ivi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 713, 715, 716, 718, 720, 722, 723, 725, 727, 728, 729, 730, 732, 738, 739, 746, 748, 749, 750, 751, 762], "function": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 119, 120, 121, 122, 125, 126, 127, 129, 133, 134, 151, 153, 154, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 318, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 348, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 482, 485, 486, 487, 490, 491, 494, 496, 498, 501, 502, 503, 504, 506, 508, 509, 510, 516, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 633, 635, 636, 637, 638, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 683, 686, 693, 698, 702, 704, 710, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 732, 739, 741, 742, 743, 744, 746, 747, 750, 752, 753, 754, 755, 756, 761, 762], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 146, 148, 150, 151, 153, 154, 156, 158, 161, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 342, 344, 345, 346, 347, 348, 351, 352, 355, 356, 357, 358, 360, 361, 363, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 482, 483, 486, 487, 488, 490, 496, 500, 501, 502, 504, 506, 508, 509, 510, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 696, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762], "alwai": [0, 5, 6, 9, 10, 16, 28, 29, 32, 39, 59, 78, 106, 177, 227, 282, 306, 310, 312, 370, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 465, 472, 535, 539, 541, 543, 548, 609, 610, 611, 613, 615, 616, 618, 620, 702, 712, 713, 714, 717, 718, 720, 722, 725, 727, 728, 729, 732, 733, 734, 735, 736, 738, 740, 748], "small": [0, 2, 8, 9, 14, 17, 31, 32, 37, 40, 194, 201, 227, 228, 274, 287, 306, 310, 315, 364, 414, 415, 416, 541, 546, 551, 587, 590, 592, 644, 683, 687, 702, 713, 721, 724, 729, 734, 738, 740, 744, 748, 756], "perform": [0, 2, 5, 9, 13, 14, 22, 23, 28, 32, 33, 36, 37, 45, 46, 62, 66, 92, 93, 164, 172, 194, 227, 248, 279, 299, 306, 307, 309, 310, 312, 319, 321, 331, 332, 333, 334, 336, 337, 341, 342, 350, 369, 379, 427, 435, 436, 455, 456, 457, 470, 471, 472, 488, 498, 535, 538, 540, 541, 543, 545, 546, 549, 550, 556, 557, 568, 570, 594, 596, 601, 622, 623, 624, 632, 633, 664, 665, 674, 675, 684, 706, 716, 717, 718, 720, 722, 723, 724, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 743, 748, 752, 755, 756, 757, 758, 759, 760, 762], "hit": [0, 735, 740], "due": [0, 2, 227, 237, 541, 705, 708, 713, 716, 721, 726, 732, 733, 755], "ad": [0, 9, 16, 32, 39, 47, 194, 227, 274, 287, 306, 315, 414, 415, 416, 501, 502, 541, 543, 546, 548, 579, 580, 609, 684, 689, 702, 705, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 744, 748, 754, 755], "python": [0, 9, 18, 32, 41, 76, 161, 173, 201, 236, 316, 420, 421, 422, 423, 424, 523, 538, 540, 541, 543, 552, 645, 646, 647, 648, 650, 693, 696, 703, 704, 705, 711, 713, 714, 716, 719, 720, 721, 726, 733, 735, 740, 742, 743, 748, 750, 752, 755, 756, 757, 761, 762], "wrap": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 312, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 498, 501, 502, 503, 504, 506, 508, 509, 520, 522, 524, 525, 528, 530, 531, 532, 533, 543, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 590, 591, 592, 594, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 702, 715, 716, 717, 718, 720, 721, 722, 723, 725, 726, 728, 729, 732, 733, 735, 740, 742, 745, 748, 750, 751, 755, 756, 761, 762], "overhead": [0, 748, 758], "becom": [0, 9, 32, 49, 282, 306, 312, 382, 548, 606, 693, 704, 706, 714, 720, 724, 726, 732, 748], "increasingli": [0, 724], "notic": [0, 712, 717, 721, 727, 735, 738], "larg": [0, 8, 9, 31, 32, 177, 194, 201, 227, 228, 321, 434, 541, 546, 592, 713, 714, 721, 743, 755], "model": [0, 2, 9, 194, 227, 311, 373, 541, 702, 743, 744, 750, 753, 754, 755, 756, 757, 758, 759, 761, 762], "multipl": [0, 8, 9, 14, 17, 22, 23, 26, 31, 32, 33, 34, 37, 39, 40, 45, 46, 89, 188, 212, 219, 225, 226, 227, 229, 309, 310, 312, 319, 330, 337, 340, 342, 367, 386, 395, 412, 427, 444, 482, 524, 525, 528, 530, 532, 533, 538, 541, 543, 544, 545, 546, 548, 551, 553, 556, 557, 560, 561, 562, 563, 573, 582, 584, 585, 606, 609, 614, 615, 644, 651, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 702, 706, 712, 714, 717, 718, 720, 724, 726, 727, 729, 732, 733, 734, 735, 738, 740, 748, 753, 754, 755, 762], "improv": [0, 706, 714, 722, 728, 729, 738, 740, 750, 753, 755, 757, 758], "remov": [0, 2, 14, 26, 37, 546, 548, 549, 550, 577, 584, 598, 616, 622, 623, 639, 699, 702, 712, 718, 719, 721, 722, 725, 729, 735, 738, 745, 755], "extra": [0, 2, 26, 52, 72, 523, 537, 543, 717, 722, 724, 730, 732, 733, 734, 738, 740, 752, 757], "around": [0, 26, 52, 312, 400, 405, 714, 716, 717, 719, 723, 728, 729, 733, 736, 742, 748, 750, 753, 755, 762], "each": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 20, 22, 26, 29, 31, 32, 33, 34, 36, 37, 39, 42, 43, 45, 49, 51, 52, 60, 61, 63, 64, 65, 67, 72, 94, 107, 119, 122, 167, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 254, 256, 257, 262, 268, 271, 272, 276, 282, 286, 290, 295, 298, 301, 303, 306, 309, 310, 312, 316, 319, 321, 327, 328, 329, 332, 333, 334, 337, 345, 346, 347, 348, 351, 352, 357, 358, 361, 368, 369, 371, 372, 380, 381, 382, 385, 386, 391, 392, 394, 395, 397, 399, 400, 403, 411, 412, 420, 427, 432, 433, 434, 435, 436, 437, 444, 447, 455, 462, 463, 479, 503, 523, 525, 526, 528, 530, 531, 532, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 550, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 573, 574, 575, 578, 579, 580, 584, 586, 587, 588, 590, 592, 593, 594, 599, 608, 612, 614, 615, 617, 619, 621, 631, 638, 645, 654, 656, 657, 659, 665, 666, 673, 684, 687, 688, 689, 704, 705, 706, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 745, 747, 748, 751, 752, 756, 758, 761], "take": [0, 2, 9, 14, 16, 22, 32, 39, 49, 72, 73, 75, 96, 189, 234, 241, 252, 301, 309, 312, 328, 336, 341, 346, 384, 390, 408, 435, 436, 537, 538, 541, 545, 546, 548, 549, 571, 584, 588, 613, 624, 664, 683, 684, 696, 702, 706, 707, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 738, 740, 742, 744, 745, 748, 749, 752, 753, 761], "ani": [0, 1, 2, 4, 5, 7, 8, 9, 10, 14, 23, 24, 28, 30, 31, 32, 33, 46, 47, 49, 51, 52, 72, 73, 75, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 110, 125, 129, 133, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 255, 259, 269, 270, 276, 279, 301, 303, 306, 309, 310, 312, 315, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 352, 358, 361, 389, 400, 414, 415, 416, 434, 437, 440, 441, 444, 454, 455, 456, 457, 458, 462, 466, 468, 470, 474, 476, 477, 495, 502, 509, 510, 517, 523, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 628, 631, 632, 634, 635, 642, 644, 648, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 680, 681, 683, 684, 686, 687, 688, 689, 693, 696, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 753, 754, 755, 756, 758, 761, 762], "framework": [0, 2, 4, 10, 124, 146, 156, 159, 170, 453, 469, 473, 504, 507, 539, 540, 543, 550, 627, 681, 688, 693, 704, 705, 706, 710, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 726, 728, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 756, 759], "specif": [0, 2, 7, 9, 10, 30, 32, 33, 134, 165, 168, 201, 222, 223, 232, 316, 424, 455, 456, 457, 483, 539, 540, 541, 543, 546, 548, 549, 552, 555, 556, 579, 580, 596, 617, 622, 623, 624, 645, 662, 667, 668, 669, 671, 685, 686, 693, 698, 702, 704, 710, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 726, 727, 728, 729, 732, 733, 734, 735, 736, 738, 740, 741, 742, 744, 745, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 762], "backend": [0, 2, 4, 5, 9, 10, 14, 26, 32, 33, 37, 51, 84, 120, 121, 124, 146, 153, 154, 156, 159, 170, 310, 356, 358, 441, 448, 460, 461, 469, 472, 473, 483, 490, 504, 507, 538, 539, 540, 543, 546, 594, 681, 686, 688, 692, 693, 704, 710, 711, 713, 714, 715, 716, 717, 721, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 741, 742, 745, 750, 755, 758, 761, 762], "composit": [0, 120, 121, 153, 154, 246, 310, 362, 460, 461, 539, 540, 541, 543, 712, 715, 717, 718, 720, 722, 723, 730, 732, 733, 734, 735, 738, 740, 744, 745, 748, 750, 756], "both": [0, 2, 5, 8, 9, 10, 13, 14, 28, 31, 32, 33, 36, 37, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 109, 125, 129, 132, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 277, 279, 282, 287, 303, 306, 309, 310, 312, 316, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 394, 400, 420, 434, 437, 462, 466, 468, 470, 479, 509, 533, 534, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 702, 712, 714, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 732, 733, 735, 738, 740, 742, 743, 744, 745, 747, 748, 755, 758, 760, 761, 762], "produc": [0, 9, 10, 13, 32, 36, 252, 255, 258, 261, 301, 303, 545, 572, 712, 722, 727, 732, 734, 735, 736, 756, 758], "simplifi": [0, 696, 705, 726, 733, 740, 741, 744, 751, 753, 754, 755, 758, 761, 762], "execut": [0, 73, 75, 510, 537, 540, 543, 713, 714, 719, 720, 721, 722, 723, 724, 726, 729, 730, 732, 735, 738, 740, 742, 745, 748, 750, 751, 755, 756, 757, 758, 759, 761], "comput": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 20, 22, 25, 26, 31, 32, 33, 34, 36, 37, 38, 45, 49, 62, 66, 167, 177, 184, 187, 189, 194, 195, 196, 201, 202, 203, 205, 206, 212, 213, 214, 221, 222, 223, 224, 226, 227, 230, 235, 236, 250, 260, 263, 264, 271, 272, 276, 280, 283, 285, 286, 290, 292, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 319, 321, 327, 328, 329, 330, 331, 336, 337, 340, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 365, 367, 369, 371, 372, 373, 374, 375, 376, 377, 394, 397, 409, 414, 416, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 450, 451, 495, 517, 524, 526, 527, 529, 533, 534, 540, 541, 543, 544, 545, 546, 547, 548, 550, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 573, 574, 578, 579, 580, 583, 584, 585, 587, 589, 591, 593, 594, 596, 598, 600, 601, 603, 604, 605, 609, 631, 656, 657, 658, 659, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 684, 687, 702, 705, 706, 713, 720, 721, 722, 729, 731, 733, 735, 737, 738, 740, 743, 748, 750, 751, 753, 755, 756, 758, 759, 761], "compos": [0, 9, 32, 309, 323, 324, 325, 682, 713, 720, 733, 735, 748, 755, 762], "from": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 49, 52, 76, 78, 86, 88, 89, 90, 91, 94, 95, 98, 101, 103, 109, 127, 133, 134, 150, 155, 160, 166, 167, 193, 201, 202, 229, 233, 234, 241, 245, 258, 259, 269, 271, 272, 277, 280, 282, 283, 285, 286, 298, 303, 306, 309, 310, 312, 316, 321, 332, 333, 334, 348, 352, 364, 370, 373, 384, 386, 395, 400, 406, 408, 411, 412, 420, 421, 422, 423, 424, 435, 436, 454, 462, 463, 465, 485, 496, 506, 523, 525, 526, 530, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 559, 567, 568, 574, 577, 594, 598, 599, 600, 607, 610, 613, 616, 622, 623, 624, 626, 637, 638, 639, 645, 646, 647, 648, 652, 655, 656, 658, 664, 665, 670, 671, 672, 673, 674, 675, 681, 682, 683, 684, 686, 688, 693, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762], "onli": [0, 2, 5, 8, 9, 14, 16, 18, 26, 28, 31, 32, 37, 39, 41, 49, 51, 67, 93, 132, 133, 162, 222, 223, 228, 234, 258, 280, 285, 303, 306, 309, 310, 312, 316, 321, 331, 344, 358, 361, 371, 372, 380, 381, 382, 390, 420, 421, 437, 449, 535, 538, 539, 540, 541, 543, 545, 546, 548, 550, 552, 553, 555, 556, 571, 584, 591, 594, 610, 613, 625, 626, 632, 633, 635, 636, 637, 642, 643, 646, 647, 648, 651, 652, 662, 668, 671, 684, 686, 688, 696, 702, 704, 707, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 748, 754, 755, 756, 761, 762], "which": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 117, 119, 122, 124, 127, 134, 146, 151, 155, 160, 162, 165, 166, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 321, 331, 332, 333, 334, 336, 337, 341, 342, 351, 352, 355, 358, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 385, 405, 406, 407, 408, 409, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 434, 435, 436, 437, 439, 440, 441, 442, 444, 445, 447, 448, 450, 451, 454, 455, 456, 457, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 478, 479, 484, 485, 486, 487, 501, 502, 504, 506, 508, 509, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 591, 592, 593, 594, 598, 600, 601, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 617, 620, 621, 630, 631, 632, 633, 638, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 760, 761, 762], "result": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 133, 134, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 373, 374, 375, 376, 377, 379, 385, 388, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 450, 451, 455, 456, 457, 462, 463, 472, 479, 486, 487, 524, 525, 526, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 625, 628, 631, 632, 634, 638, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 690, 700, 702, 710, 712, 714, 716, 717, 719, 720, 721, 722, 724, 725, 728, 729, 731, 732, 733, 734, 735, 736, 740, 743, 748, 756, 758], "code": [0, 2, 7, 8, 26, 30, 31, 52, 168, 214, 321, 441, 448, 456, 457, 472, 486, 490, 504, 540, 543, 545, 546, 548, 567, 586, 587, 588, 617, 700, 702, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762], "all": [0, 2, 4, 5, 9, 10, 13, 14, 16, 18, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 39, 41, 46, 47, 49, 76, 89, 96, 99, 100, 101, 155, 162, 194, 198, 226, 227, 269, 270, 279, 296, 303, 306, 309, 310, 312, 321, 342, 351, 352, 358, 361, 369, 372, 400, 411, 440, 444, 447, 464, 484, 485, 501, 508, 509, 523, 526, 538, 540, 541, 543, 544, 545, 546, 548, 549, 550, 552, 553, 557, 568, 570, 571, 574, 587, 592, 593, 596, 601, 610, 614, 616, 622, 623, 624, 625, 626, 627, 636, 637, 638, 639, 645, 648, 653, 682, 683, 684, 690, 693, 698, 702, 704, 705, 706, 707, 708, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 761, 762], "don": [0, 24, 47, 702, 706, 712, 713, 714, 721, 722, 723, 727, 731, 735, 738, 744, 748], "contribut": [0, 9, 32, 321, 437, 708, 711, 712, 713, 714, 719, 727, 733, 740, 749, 759], "output": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 108, 133, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 306, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 358, 361, 362, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 384, 385, 388, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 449, 450, 451, 455, 456, 457, 459, 463, 472, 479, 486, 487, 488, 511, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 625, 638, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 696, 702, 709, 713, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 745, 748, 750, 756], "print": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121, 124, 126, 127, 129, 134, 146, 147, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 265, 266, 269, 274, 276, 289, 290, 295, 299, 301, 303, 306, 309, 310, 311, 312, 315, 321, 327, 328, 329, 330, 332, 333, 335, 337, 340, 342, 345, 346, 347, 348, 350, 352, 356, 358, 367, 373, 374, 375, 376, 377, 383, 384, 385, 396, 400, 405, 406, 408, 409, 413, 417, 418, 419, 434, 435, 436, 437, 442, 444, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 482, 485, 486, 487, 491, 492, 493, 496, 499, 500, 501, 502, 504, 506, 508, 509, 510, 514, 515, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 594, 595, 596, 598, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 682, 693, 696, 700, 702, 713, 714, 720, 724, 734, 735, 737, 740, 742, 743, 744], "statement": [0, 2, 721, 732, 735, 738, 748], "logger": 0, "etc": [0, 5, 9, 18, 20, 24, 28, 32, 41, 47, 84, 92, 93, 96, 309, 316, 337, 342, 352, 420, 421, 423, 424, 538, 552, 554, 645, 646, 647, 648, 656, 657, 658, 659, 683, 684, 685, 686, 687, 688, 689, 706, 712, 713, 714, 716, 717, 718, 719, 720, 722, 724, 726, 728, 733, 734, 735, 736, 740, 742, 743, 748, 750, 753, 755, 761], "ha": [0, 1, 5, 9, 14, 16, 20, 22, 26, 29, 32, 33, 37, 39, 43, 45, 49, 94, 150, 174, 194, 197, 199, 201, 211, 227, 229, 232, 234, 237, 239, 240, 244, 271, 272, 303, 309, 311, 312, 321, 344, 375, 384, 407, 408, 411, 433, 435, 436, 438, 468, 538, 540, 541, 545, 546, 548, 553, 554, 556, 571, 584, 585, 593, 594, 596, 598, 601, 609, 616, 654, 657, 658, 659, 664, 665, 668, 670, 671, 672, 673, 682, 693, 704, 705, 706, 712, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 744, 745, 747, 748, 751, 754, 755, 757, 758, 761], "": [0, 1, 2, 5, 9, 10, 11, 14, 22, 32, 34, 37, 45, 72, 94, 99, 100, 120, 121, 150, 153, 154, 166, 201, 236, 270, 274, 276, 285, 287, 293, 297, 299, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 324, 325, 331, 337, 342, 352, 356, 364, 371, 375, 391, 392, 400, 414, 415, 416, 424, 434, 442, 460, 461, 481, 503, 504, 525, 527, 528, 529, 530, 532, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 550, 556, 560, 562, 564, 566, 576, 587, 594, 595, 601, 637, 671, 673, 682, 683, 684, 685, 686, 687, 688, 689, 693, 702, 705, 706, 707, 708, 710, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 754, 755, 756, 758, 759, 760, 761], "likewis": [0, 2, 702, 714, 720, 722, 725, 728, 729, 733, 738, 743, 761], "redund": [0, 702, 722, 726, 733], "oper": [0, 5, 6, 8, 9, 10, 13, 26, 28, 29, 31, 32, 33, 36, 52, 67, 92, 93, 134, 164, 172, 177, 179, 188, 191, 194, 201, 216, 218, 227, 228, 232, 236, 239, 244, 252, 271, 272, 300, 301, 303, 308, 309, 312, 323, 324, 325, 327, 328, 329, 335, 336, 337, 341, 345, 346, 347, 348, 350, 351, 352, 407, 448, 455, 456, 457, 504, 535, 538, 539, 540, 541, 543, 545, 546, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 596, 598, 670, 672, 684, 702, 704, 712, 713, 715, 716, 717, 720, 722, 723, 724, 725, 726, 729, 732, 733, 735, 738, 740, 743, 744, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762], "origin": [0, 2, 9, 14, 16, 22, 26, 32, 37, 39, 45, 49, 51, 52, 182, 207, 234, 310, 312, 321, 369, 393, 399, 401, 404, 435, 436, 440, 441, 442, 541, 546, 548, 556, 585, 613, 614, 665, 693, 702, 706, 712, 713, 714, 718, 719, 721, 722, 730, 732, 733, 734, 740, 755, 756], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 122, 125, 126, 127, 129, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 309, 310, 312, 319, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 538, 539, 541, 543, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 635, 636, 637, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 693, 702, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 743, 744, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 758, 760, 761, 762], "increas": [0, 9, 14, 16, 32, 37, 39, 312, 321, 400, 437, 546, 548, 550, 599, 608, 621, 637, 704, 722, 726, 733, 736, 738, 755], "its": [0, 4, 6, 9, 16, 26, 29, 32, 33, 39, 61, 64, 67, 73, 107, 112, 113, 114, 115, 116, 167, 194, 227, 246, 252, 301, 309, 312, 321, 348, 411, 437, 459, 507, 535, 537, 539, 540, 541, 543, 546, 548, 550, 584, 609, 613, 614, 618, 631, 682, 702, 712, 713, 717, 720, 721, 722, 723, 725, 726, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 745, 748, 750, 754, 755, 761], "overal": [0, 545, 568, 720, 722, 723, 725, 745, 751, 753, 754, 755], "obj": [0, 2, 77, 78, 538], "none": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 124, 125, 126, 127, 129, 131, 134, 144, 146, 149, 150, 162, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 478, 483, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 695, 702, 710, 716, 717, 718, 720, 721, 722, 723, 724, 726, 728, 729, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745], "arg_stateful_idx": [0, 685, 686], "kwarg_stateful_idx": [0, 685, 686], "include_gener": 0, "true": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 75, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 134, 146, 150, 151, 153, 154, 158, 161, 162, 163, 164, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 387, 388, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 486, 487, 488, 491, 494, 495, 497, 498, 500, 501, 502, 504, 506, 508, 509, 511, 516, 517, 519, 520, 522, 525, 526, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 633, 635, 636, 637, 638, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 682, 684, 685, 686, 687, 688, 690, 693, 696, 700, 702, 710, 713, 718, 720, 721, 722, 723, 724, 726, 728, 729, 730, 732, 733, 734, 735, 737, 738, 740, 743, 744, 745], "array_cach": 0, "return_backend_compiled_fn": 0, "fals": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 150, 151, 156, 158, 161, 162, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 350, 351, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 482, 486, 487, 488, 491, 494, 495, 497, 498, 500, 501, 502, 504, 506, 508, 509, 511, 516, 517, 519, 520, 522, 525, 526, 528, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 631, 635, 636, 637, 638, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 684, 685, 686, 688, 690, 693, 696, 697, 700, 702, 710, 713, 716, 718, 721, 722, 723, 724, 726, 732, 733, 734, 735, 737, 738, 740, 743, 744, 745], "static_argnum": [0, 740], "static_argnam": [0, 740], "arg": [0, 2, 4, 26, 48, 55, 72, 157, 167, 510, 537, 538, 540, 543, 680, 681, 684, 686, 690, 693, 696, 700, 702, 717, 722, 723, 726, 731, 732, 733, 738, 740, 744], "kwarg": [0, 2, 4, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 55, 157, 312, 400, 482, 510, 538, 540, 543, 680, 681, 684, 686, 693, 700, 702, 717, 722, 723, 726, 729, 732, 733, 738, 740, 744], "callabl": [0, 2, 9, 10, 24, 32, 33, 36, 47, 72, 73, 75, 79, 80, 81, 82, 83, 120, 121, 153, 154, 167, 299, 307, 309, 312, 351, 379, 400, 445, 449, 454, 456, 460, 461, 482, 510, 523, 527, 529, 534, 537, 538, 539, 540, 543, 544, 549, 550, 622, 623, 624, 631, 632, 633, 635, 636, 637, 638, 688, 697, 720, 726, 731, 733, 740], "set": [0, 2, 4, 9, 10, 13, 14, 19, 21, 22, 26, 32, 33, 36, 37, 42, 44, 45, 64, 67, 75, 99, 101, 135, 136, 137, 138, 139, 150, 163, 164, 165, 166, 167, 182, 269, 278, 292, 294, 299, 303, 306, 307, 309, 310, 312, 321, 331, 355, 359, 360, 376, 390, 400, 403, 409, 434, 439, 440, 441, 442, 444, 448, 455, 472, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 504, 512, 535, 537, 538, 539, 540, 541, 543, 545, 546, 550, 552, 553, 555, 556, 568, 572, 574, 585, 587, 590, 593, 594, 625, 632, 635, 636, 637, 642, 643, 649, 651, 652, 656, 658, 659, 660, 663, 671, 673, 682, 683, 684, 686, 688, 693, 699, 704, 707, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 732, 733, 734, 735, 736, 738, 740, 742, 743, 749, 753, 754, 755, 756, 757, 759, 762], "them": [0, 2, 449, 485, 543, 684, 702, 703, 704, 705, 706, 709, 712, 714, 716, 717, 718, 719, 720, 721, 722, 726, 727, 730, 732, 733, 734, 735, 737, 740, 742, 743, 744, 748, 750, 752, 753, 755, 757, 761], "If": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 134, 150, 166, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 269, 270, 271, 274, 275, 276, 278, 279, 280, 282, 286, 287, 292, 293, 295, 297, 298, 299, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 342, 344, 345, 346, 347, 352, 356, 358, 360, 361, 366, 368, 370, 371, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 395, 399, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 478, 479, 486, 487, 491, 501, 502, 504, 506, 508, 509, 522, 523, 526, 528, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 568, 569, 571, 572, 573, 574, 576, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 637, 638, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 682, 683, 684, 686, 687, 693, 702, 704, 707, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 742, 743, 745, 748, 749], "specifi": [0, 2, 3, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 45, 46, 49, 59, 61, 64, 67, 76, 85, 90, 92, 97, 99, 100, 102, 106, 108, 155, 160, 162, 166, 167, 168, 236, 245, 270, 274, 287, 292, 303, 306, 309, 310, 311, 312, 316, 321, 327, 328, 329, 331, 337, 342, 352, 358, 366, 368, 371, 375, 376, 378, 390, 393, 402, 403, 405, 406, 421, 432, 434, 435, 436, 439, 440, 442, 445, 462, 463, 465, 468, 481, 491, 523, 535, 538, 539, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 571, 572, 574, 576, 577, 579, 580, 585, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 614, 616, 617, 620, 621, 629, 630, 632, 633, 640, 641, 642, 643, 646, 647, 648, 650, 651, 652, 654, 657, 658, 659, 660, 664, 665, 666, 670, 672, 674, 675, 680, 682, 684, 685, 686, 713, 715, 719, 722, 723, 728, 729, 730, 732, 733, 734, 735, 740, 743, 744, 761], "eagerli": [0, 2, 702], "otherwis": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 76, 78, 84, 89, 91, 92, 93, 96, 98, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 125, 129, 133, 134, 150, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 253, 254, 256, 257, 259, 267, 268, 274, 275, 276, 278, 279, 280, 286, 287, 293, 295, 297, 298, 299, 301, 303, 306, 309, 310, 315, 327, 328, 329, 332, 333, 334, 370, 371, 373, 374, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 399, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 433, 434, 435, 436, 437, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 479, 486, 487, 501, 502, 504, 506, 508, 509, 510, 522, 526, 528, 533, 537, 538, 539, 540, 541, 543, 544, 545, 546, 549, 550, 553, 554, 555, 556, 557, 559, 560, 561, 562, 568, 569, 571, 572, 573, 574, 575, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 594, 598, 600, 601, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 638, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 686, 687, 693, 702, 714, 717, 720, 722, 723, 724, 729, 730, 732, 735, 740], "happen": [0, 2, 246, 541, 702, 706, 713, 714, 723, 732, 735, 743], "lazili": [0, 2, 702], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 486, 487, 490, 491, 492, 493, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 696, 698, 702, 712, 717, 725, 726, 728, 733, 734, 735, 736, 740, 742, 743, 747, 756], "creat": [0, 1, 2, 5, 8, 9, 18, 26, 28, 31, 32, 37, 41, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 228, 258, 259, 267, 268, 269, 303, 309, 310, 312, 316, 327, 328, 329, 350, 360, 369, 372, 378, 400, 405, 420, 421, 422, 423, 424, 490, 506, 523, 534, 538, 541, 543, 544, 552, 589, 645, 646, 647, 648, 650, 681, 683, 684, 685, 686, 687, 688, 689, 705, 707, 708, 713, 714, 717, 718, 719, 721, 722, 723, 726, 729, 730, 732, 733, 734, 735, 738, 740, 741, 744, 746, 747, 750, 755, 756, 761], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 122, 124, 134, 146, 150, 162, 165, 166, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 453, 455, 456, 457, 459, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 478, 483, 486, 487, 491, 501, 502, 504, 506, 508, 509, 510, 522, 524, 525, 526, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 635, 636, 637, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 683, 686, 688, 689, 696, 700, 712, 713, 714, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 738, 740, 745, 748, 755, 761], "list": [0, 4, 5, 6, 8, 9, 10, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 89, 91, 94, 95, 96, 98, 103, 107, 109, 122, 126, 127, 134, 150, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 274, 275, 276, 278, 279, 280, 281, 282, 285, 286, 287, 293, 294, 295, 297, 298, 299, 306, 309, 310, 312, 319, 327, 328, 329, 331, 332, 333, 334, 345, 346, 347, 348, 358, 360, 363, 368, 369, 372, 373, 374, 376, 377, 380, 381, 382, 383, 385, 386, 395, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 426, 434, 435, 436, 437, 444, 446, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 464, 466, 468, 470, 471, 472, 474, 475, 478, 482, 486, 487, 501, 502, 504, 506, 507, 508, 509, 510, 522, 523, 528, 533, 538, 539, 540, 541, 543, 545, 546, 548, 550, 551, 554, 555, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 596, 598, 603, 604, 605, 606, 607, 610, 613, 614, 615, 616, 617, 620, 621, 625, 626, 627, 628, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 668, 670, 671, 673, 674, 675, 681, 682, 684, 690, 696, 711, 712, 713, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 732, 733, 734, 735, 736, 740, 743, 744, 745, 748, 755, 756, 761], "instanc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 119, 122, 125, 126, 127, 129, 134, 151, 163, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 309, 310, 311, 312, 315, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 345, 346, 347, 348, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 497, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 708, 712, 713, 714, 716, 717, 718, 722, 724, 725, 726, 728, 729, 730, 731, 732, 735, 743, 744, 745, 750, 756], "consid": [0, 9, 14, 20, 32, 37, 67, 101, 222, 223, 269, 274, 277, 287, 303, 306, 310, 321, 358, 360, 369, 434, 535, 538, 541, 546, 554, 576, 587, 656, 657, 658, 659, 683, 704, 705, 717, 718, 721, 722, 729, 731, 736, 738, 741, 742, 743, 752, 756, 760, 762], "dure": [0, 7, 11, 22, 26, 30, 34, 45, 168, 309, 332, 333, 334, 490, 510, 524, 525, 530, 540, 543, 544, 545, 546, 549, 556, 568, 584, 622, 623, 624, 671, 673, 682, 685, 686, 687, 688, 713, 720, 722, 723, 726, 729, 730, 732, 733, 734, 735, 738, 748, 755, 756, 761], "posit": [0, 4, 8, 9, 10, 14, 15, 16, 31, 32, 33, 37, 38, 39, 49, 87, 89, 101, 119, 174, 175, 176, 180, 183, 194, 201, 208, 209, 215, 217, 227, 228, 235, 236, 240, 241, 245, 259, 269, 274, 277, 287, 303, 306, 310, 312, 355, 370, 376, 399, 449, 459, 523, 536, 538, 539, 541, 543, 546, 547, 548, 552, 553, 557, 573, 576, 598, 603, 609, 614, 649, 654, 674, 675, 681, 702, 712, 714, 716, 720, 733, 735, 736, 743, 747, 757], "argument": [0, 2, 4, 5, 8, 9, 10, 14, 26, 27, 31, 32, 33, 49, 52, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 345, 346, 347, 348, 358, 400, 434, 437, 441, 445, 446, 448, 449, 454, 456, 457, 462, 466, 468, 470, 472, 482, 486, 487, 504, 509, 510, 523, 533, 538, 539, 541, 543, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 631, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 684, 685, 686, 693, 696, 698, 702, 704, 712, 715, 716, 717, 718, 719, 720, 724, 725, 727, 729, 734, 735, 736, 738, 740, 742, 743, 750, 755], "keyword": [0, 2, 4, 5, 9, 26, 32, 52, 94, 228, 312, 321, 400, 434, 446, 449, 482, 510, 538, 541, 543, 550, 556, 631, 672, 685, 686, 696, 712, 717, 720, 722, 723, 730, 732, 733, 734, 735, 736, 738, 743], "str": [0, 2, 4, 5, 9, 10, 13, 14, 15, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 94, 96, 98, 103, 104, 107, 109, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 129, 131, 134, 135, 136, 137, 138, 139, 146, 147, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 309, 310, 311, 312, 315, 321, 327, 328, 329, 331, 332, 333, 334, 336, 337, 341, 342, 345, 346, 347, 348, 350, 351, 352, 354, 358, 369, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 385, 390, 406, 408, 409, 414, 415, 416, 417, 418, 419, 421, 423, 434, 435, 436, 437, 442, 444, 445, 447, 448, 450, 451, 453, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 483, 486, 487, 489, 490, 499, 501, 502, 504, 506, 508, 509, 522, 526, 533, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 631, 632, 642, 645, 646, 647, 648, 650, 653, 656, 657, 658, 660, 664, 665, 666, 668, 670, 671, 673, 674, 675, 684, 686, 687, 696, 722, 723, 726, 729, 732, 733, 736, 740, 745], "current": [0, 9, 10, 26, 32, 52, 72, 120, 121, 124, 141, 142, 143, 144, 145, 146, 152, 153, 154, 155, 160, 162, 310, 312, 356, 357, 400, 460, 461, 464, 469, 473, 484, 485, 504, 537, 539, 540, 543, 546, 550, 578, 625, 635, 636, 682, 686, 693, 699, 702, 706, 709, 712, 713, 714, 716, 718, 720, 721, 722, 723, 726, 727, 729, 732, 733, 734, 735, 738, 740, 745, 747, 748, 755, 761, 762], "bool": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 78, 84, 89, 90, 91, 92, 93, 94, 96, 98, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 142, 146, 150, 151, 153, 154, 156, 158, 161, 162, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 270, 274, 275, 276, 278, 280, 286, 287, 292, 293, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 321, 327, 328, 329, 331, 332, 333, 334, 344, 345, 346, 347, 350, 358, 360, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 388, 389, 390, 391, 392, 395, 399, 403, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 491, 500, 501, 502, 504, 506, 508, 509, 522, 525, 526, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 568, 569, 571, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 594, 598, 599, 601, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 684, 687, 688, 696, 700, 722, 724, 726, 732, 733, 735, 736, 738, 740, 745], "includ": [0, 2, 5, 8, 9, 10, 14, 19, 22, 23, 26, 28, 31, 32, 33, 37, 42, 45, 46, 76, 77, 78, 92, 93, 95, 101, 174, 198, 202, 203, 204, 207, 209, 212, 220, 228, 241, 246, 260, 263, 264, 269, 271, 273, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 297, 298, 303, 309, 312, 321, 327, 328, 329, 354, 357, 359, 391, 392, 394, 397, 399, 401, 404, 422, 424, 425, 433, 437, 439, 440, 442, 468, 522, 538, 541, 543, 546, 550, 552, 553, 556, 557, 578, 599, 601, 625, 648, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 687, 698, 702, 705, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 732, 733, 734, 735, 736, 738, 740, 747, 748, 752, 753, 755, 757, 760, 761, 762], "creation": [0, 9, 26, 32, 52, 719, 722, 723, 728, 730, 733, 734, 735, 736, 740, 755, 757, 761], "constant": [0, 9, 16, 17, 32, 39, 40, 49, 311, 312, 375, 400, 548, 550, 551, 608, 631, 644, 683, 685, 686, 687, 702, 729, 734, 736, 744, 745, 748], "appear": [0, 312, 391, 392, 523, 543, 713, 714, 716, 733, 738], "whether": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 77, 78, 89, 91, 96, 98, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 146, 150, 151, 153, 154, 156, 158, 161, 162, 164, 167, 168, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 270, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 303, 306, 309, 310, 311, 312, 321, 327, 328, 329, 331, 332, 333, 334, 350, 364, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 388, 390, 391, 392, 395, 399, 406, 408, 409, 412, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 486, 487, 488, 489, 491, 494, 495, 497, 498, 500, 501, 502, 504, 506, 508, 509, 516, 517, 520, 522, 525, 526, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 556, 557, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 631, 632, 633, 635, 636, 637, 638, 642, 643, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 680, 681, 684, 685, 686, 687, 688, 696, 702, 707, 712, 713, 717, 720, 722, 724, 728, 732, 733, 735, 737, 738], "appli": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 306, 307, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 344, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 535, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 589, 590, 591, 592, 594, 598, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 631, 634, 637, 638, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 680, 684, 687, 702, 707, 709, 712, 713, 714, 717, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 738, 742, 743, 744, 745, 746, 748, 750, 756], "nativ": [0, 2, 4, 5, 7, 10, 27, 30, 33, 51, 55, 95, 104, 105, 111, 112, 113, 114, 115, 116, 130, 133, 148, 149, 150, 151, 161, 169, 173, 472, 474, 478, 485, 490, 507, 538, 539, 540, 543, 681, 693, 702, 710, 712, 718, 722, 723, 726, 729, 730, 732, 733, 734, 735, 740, 742, 743, 750, 753, 762], "e": [0, 5, 9, 14, 18, 20, 21, 22, 24, 31, 32, 37, 41, 44, 45, 47, 49, 51, 84, 93, 94, 97, 98, 101, 105, 134, 147, 174, 175, 176, 180, 182, 183, 186, 188, 190, 194, 195, 197, 200, 201, 207, 208, 215, 216, 217, 218, 225, 226, 227, 228, 230, 232, 234, 236, 237, 240, 241, 245, 251, 269, 303, 309, 310, 316, 321, 322, 327, 328, 331, 345, 346, 347, 348, 361, 367, 420, 421, 422, 423, 424, 435, 436, 443, 536, 538, 539, 540, 541, 545, 546, 548, 550, 552, 554, 555, 556, 571, 574, 579, 580, 584, 585, 587, 590, 593, 594, 595, 598, 601, 609, 617, 628, 632, 633, 634, 637, 642, 643, 646, 647, 648, 656, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 684, 696, 702, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 718, 720, 722, 726, 731, 733, 735, 740, 743, 748, 749, 750, 751], "tf": [0, 2, 702, 717, 718, 722, 723, 728, 732, 733, 735, 736, 738, 740, 745, 748, 750, 755], "after": [0, 2, 9, 10, 11, 13, 17, 26, 32, 33, 34, 36, 40, 140, 241, 293, 306, 309, 310, 312, 331, 332, 333, 334, 351, 367, 389, 400, 472, 525, 528, 530, 531, 532, 539, 541, 543, 544, 545, 550, 551, 558, 559, 560, 561, 563, 565, 567, 568, 636, 644, 688, 693, 702, 708, 712, 713, 714, 716, 718, 719, 721, 722, 724, 726, 728, 731, 734, 735, 739, 749, 755], "union": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 478, 479, 481, 482, 486, 487, 491, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 635, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 688, 689, 717, 720, 722, 723, 724, 726, 728, 729, 732, 736, 738, 740, 745], "int": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 55, 62, 66, 67, 77, 78, 87, 89, 90, 91, 92, 93, 96, 99, 100, 101, 108, 115, 118, 119, 122, 129, 144, 158, 159, 160, 167, 168, 177, 184, 185, 186, 187, 188, 189, 201, 204, 228, 237, 243, 246, 250, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 278, 279, 281, 285, 292, 294, 296, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 358, 360, 361, 363, 366, 368, 369, 371, 372, 375, 378, 379, 383, 385, 386, 389, 390, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 439, 440, 441, 442, 445, 455, 456, 457, 459, 462, 463, 466, 481, 484, 486, 501, 502, 503, 507, 523, 524, 525, 526, 527, 530, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 576, 577, 585, 586, 596, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 631, 632, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 696, 720, 722, 723, 724, 726, 728, 729, 732, 734, 735, 736, 738, 740, 745], "iter": [0, 4, 9, 10, 16, 24, 26, 32, 33, 39, 47, 52, 72, 73, 75, 167, 265, 266, 303, 310, 312, 360, 369, 372, 400, 444, 482, 537, 540, 543, 548, 550, 608, 612, 619, 621, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 640, 641, 643, 696, 706, 716, 718, 720, 740, 743], "For": [0, 1, 5, 9, 14, 20, 32, 37, 76, 94, 174, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 229, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 271, 272, 276, 295, 303, 306, 310, 312, 366, 368, 382, 400, 403, 538, 541, 546, 548, 554, 556, 592, 594, 598, 606, 617, 656, 657, 658, 659, 667, 669, 670, 672, 681, 704, 705, 706, 708, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 742, 743, 744, 745, 747, 748, 752, 753, 756, 761, 762], "jax": [0, 2, 3, 8, 9, 10, 20, 25, 31, 33, 59, 61, 64, 67, 245, 285, 306, 321, 442, 472, 504, 523, 535, 541, 543, 554, 656, 657, 658, 659, 680, 693, 702, 705, 706, 710, 711, 712, 713, 714, 716, 718, 722, 723, 726, 728, 731, 732, 733, 734, 735, 736, 738, 740, 742, 745, 748, 756, 758, 761, 762], "jit": [0, 740, 748, 755], "tupl": [0, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 77, 78, 89, 91, 95, 96, 98, 101, 103, 107, 108, 109, 120, 121, 122, 126, 127, 133, 134, 140, 150, 153, 154, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 262, 266, 269, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 291, 292, 293, 294, 295, 297, 298, 299, 300, 303, 306, 308, 309, 310, 312, 315, 316, 317, 319, 321, 327, 328, 329, 331, 332, 333, 334, 336, 341, 342, 345, 346, 347, 348, 350, 351, 352, 357, 358, 360, 364, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 383, 385, 395, 400, 406, 408, 409, 411, 414, 416, 417, 418, 419, 421, 422, 424, 425, 426, 434, 435, 436, 437, 439, 440, 441, 444, 447, 448, 450, 451, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 491, 501, 502, 503, 504, 506, 507, 508, 509, 522, 523, 524, 525, 526, 528, 530, 533, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 587, 589, 590, 591, 592, 594, 596, 597, 598, 601, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 645, 646, 647, 648, 650, 653, 654, 656, 657, 658, 659, 660, 661, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 686, 696, 717, 722, 728, 729, 732, 734, 735, 740, 743, 744, 748], "dict": [0, 2, 4, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 120, 121, 122, 126, 127, 134, 150, 153, 154, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 312, 331, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 400, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 445, 447, 448, 450, 451, 455, 456, 457, 459, 460, 461, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 482, 486, 487, 501, 502, 504, 506, 508, 509, 522, 533, 539, 540, 543, 550, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 625, 626, 628, 631, 632, 633, 634, 636, 637, 638, 642, 643, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 681, 684, 686, 693, 717, 720, 743, 744, 750], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 683, 684, 686, 688, 693, 696, 697, 698, 699, 702, 713, 714, 717, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 748, 756], "type": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 686, 690, 693, 696, 697, 700, 702, 708, 712, 713, 714, 715, 716, 717, 720, 723, 724, 725, 726, 728, 730, 732, 734, 735, 736, 738, 740, 742, 743, 755, 756, 759], "lazygraph": [0, 2], "modul": [0, 24, 26, 47, 52, 302, 304, 305, 313, 314, 318, 483, 543, 557, 676, 680, 681, 682, 684, 685, 687, 689, 692, 693, 702, 706, 709, 713, 717, 718, 719, 726, 729, 732, 733, 735, 740, 741, 743, 745, 747, 748, 755, 756, 758], "moduletyp": [0, 2, 24, 47], "A": [0, 1, 2, 5, 6, 9, 10, 16, 18, 22, 23, 26, 29, 31, 32, 33, 36, 37, 39, 41, 43, 46, 49, 52, 72, 73, 75, 87, 95, 101, 107, 148, 167, 229, 231, 235, 259, 269, 271, 272, 274, 284, 287, 291, 292, 303, 306, 309, 310, 312, 315, 316, 321, 337, 351, 358, 367, 376, 385, 388, 406, 409, 414, 415, 416, 417, 420, 421, 422, 423, 424, 432, 441, 442, 447, 449, 470, 471, 501, 502, 503, 506, 534, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 550, 552, 556, 557, 568, 577, 579, 582, 583, 588, 589, 593, 594, 606, 609, 611, 615, 617, 625, 628, 630, 632, 633, 634, 635, 636, 640, 641, 642, 643, 645, 646, 647, 648, 650, 656, 666, 674, 675, 682, 683, 700, 702, 703, 704, 705, 706, 711, 712, 713, 715, 720, 722, 723, 726, 728, 729, 733, 734, 735, 740, 743, 748, 750, 755, 756], "non": [0, 2, 6, 8, 9, 14, 18, 19, 22, 23, 29, 31, 32, 37, 41, 42, 45, 46, 89, 106, 124, 133, 202, 222, 223, 228, 278, 283, 296, 306, 310, 312, 321, 358, 360, 364, 381, 382, 437, 440, 538, 539, 541, 546, 550, 552, 553, 556, 557, 574, 575, 585, 587, 594, 596, 600, 601, 638, 647, 651, 652, 653, 654, 667, 668, 669, 670, 671, 673, 674, 675, 683, 685, 686, 688, 717, 720, 722, 724, 740, 755], "initi": [0, 2, 9, 13, 26, 32, 36, 52, 310, 360, 369, 372, 545, 570, 681, 682, 684, 685, 686, 688, 689, 702, 705, 714, 718, 722, 723, 734, 735, 740, 755, 761, 762], "object": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 55, 56, 84, 88, 89, 110, 119, 122, 130, 133, 168, 226, 421, 526, 538, 539, 540, 544, 550, 552, 628, 629, 630, 632, 633, 634, 640, 641, 642, 643, 650, 681, 684, 685, 686, 693, 696, 702, 717, 718, 720, 721, 729, 730, 733, 734, 735, 738, 742, 745, 755, 761], "forward": [0, 9, 32, 309, 331, 336, 337, 341, 342, 352, 681, 683, 685, 686, 688, 702, 713, 718, 725, 731, 735, 736, 738, 745, 747, 748, 755, 756], "pass": [0, 2, 8, 9, 24, 26, 31, 32, 47, 52, 72, 73, 75, 111, 133, 148, 167, 182, 228, 312, 315, 316, 321, 390, 414, 416, 420, 440, 441, 472, 537, 539, 540, 541, 543, 549, 622, 623, 681, 685, 686, 688, 689, 693, 696, 700, 702, 710, 712, 714, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 748, 753], "same": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 45, 49, 50, 51, 65, 76, 86, 91, 93, 94, 96, 98, 99, 100, 101, 103, 106, 107, 108, 119, 122, 167, 174, 175, 176, 177, 179, 181, 185, 187, 190, 194, 200, 201, 207, 227, 229, 231, 234, 236, 237, 238, 247, 251, 259, 268, 269, 270, 271, 272, 276, 282, 298, 301, 303, 306, 309, 310, 312, 315, 317, 319, 321, 327, 328, 329, 345, 346, 347, 348, 350, 351, 352, 357, 360, 361, 369, 370, 371, 372, 384, 385, 400, 408, 414, 416, 425, 427, 432, 433, 434, 435, 436, 437, 438, 442, 479, 533, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 598, 600, 607, 610, 611, 613, 614, 616, 617, 622, 623, 638, 648, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 684, 696, 702, 704, 706, 708, 713, 714, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745, 748, 752, 754, 761, 762], "copi": [0, 2, 5, 6, 7, 8, 9, 10, 16, 26, 28, 29, 30, 31, 32, 33, 39, 49, 50, 77, 78, 84, 88, 106, 168, 228, 312, 378, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 465, 491, 501, 508, 509, 538, 539, 540, 541, 543, 548, 550, 555, 609, 610, 611, 613, 615, 616, 618, 620, 626, 661, 663, 713, 714, 716, 718, 721, 722, 725, 733, 734, 740, 747, 748], "everi": [0, 2, 5, 9, 10, 32, 33, 90, 91, 251, 285, 301, 306, 309, 312, 345, 346, 347, 411, 444, 538, 543, 708, 712, 714, 716, 718, 719, 721, 722, 724, 727, 728, 729, 730, 732, 733, 734, 735, 740, 742, 744, 755], "method": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 310, 311, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 538, 539, 541, 543, 544, 546, 547, 550, 553, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 594, 595, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 636, 637, 638, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 682, 683, 684, 685, 686, 712, 714, 716, 717, 718, 721, 722, 723, 724, 725, 728, 735, 736, 740, 741, 744, 745, 748, 756, 762], "To": [0, 1, 2, 201, 311, 375, 496, 541, 543, 683, 708, 712, 713, 716, 717, 718, 719, 722, 724, 726, 727, 729, 730, 733, 734, 735, 736, 743, 744, 745], "you": [0, 1, 2, 9, 10, 32, 33, 49, 51, 52, 312, 321, 388, 441, 462, 463, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 571, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 755], "need": [0, 1, 2, 9, 10, 16, 32, 33, 39, 309, 310, 321, 331, 336, 337, 341, 357, 441, 450, 451, 472, 543, 545, 546, 548, 550, 571, 578, 606, 609, 636, 702, 706, 708, 709, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743, 747, 748, 751, 755, 756, 757, 761], "correspond": [0, 2, 6, 8, 9, 10, 13, 16, 19, 20, 22, 26, 29, 31, 32, 36, 39, 45, 49, 52, 107, 119, 122, 182, 232, 246, 271, 281, 282, 303, 306, 309, 310, 312, 315, 321, 331, 337, 348, 352, 354, 357, 358, 359, 391, 392, 405, 414, 415, 416, 435, 436, 501, 523, 539, 541, 543, 545, 546, 548, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 574, 578, 579, 585, 592, 593, 613, 614, 645, 651, 652, 656, 657, 658, 659, 664, 665, 670, 671, 672, 673, 696, 702, 712, 714, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 731, 733, 735, 738, 740, 755], "input": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 148, 150, 151, 164, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 465, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 486, 487, 488, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 683, 684, 686, 687, 696, 716, 717, 718, 720, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 748, 756, 759], "let": [0, 2, 10, 22, 33, 174, 175, 176, 177, 180, 183, 192, 195, 197, 199, 208, 209, 210, 215, 217, 230, 238, 240, 241, 245, 462, 463, 541, 543, 546, 556, 598, 668, 670, 671, 672, 673, 702, 706, 708, 712, 717, 719, 720, 722, 723, 724, 725, 726, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 762], "start": [0, 1, 2, 5, 9, 26, 28, 32, 36, 76, 89, 92, 93, 289, 299, 306, 307, 309, 312, 351, 390, 393, 401, 403, 410, 538, 682, 696, 702, 707, 708, 712, 713, 714, 715, 721, 722, 724, 725, 727, 728, 733, 735, 738, 739, 740, 742, 743, 744, 747, 748, 755, 761], "simpl": [0, 2, 9, 32, 321, 434, 684, 702, 704, 712, 713, 714, 717, 719, 720, 722, 723, 724, 725, 729, 732, 733, 735, 736, 738, 742, 744, 745, 748, 750, 754, 755, 756, 757], "import": [0, 1, 2, 9, 20, 24, 28, 32, 47, 148, 149, 153, 163, 165, 321, 434, 540, 549, 554, 624, 659, 693, 702, 705, 708, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 727, 730, 731, 732, 733, 734, 735, 736, 740, 742, 743, 745, 748, 751, 753, 755, 758, 759, 761], "set_backend": [0, 2, 8, 10, 24, 31, 33, 121, 130, 148, 149, 163, 165, 178, 448, 472, 539, 540, 543, 549, 624, 693, 702, 716, 718, 722, 723, 729, 730, 731, 740, 742, 745], "torch": [0, 2, 5, 10, 14, 24, 33, 37, 84, 121, 148, 149, 163, 165, 237, 448, 472, 504, 538, 539, 540, 541, 543, 546, 549, 594, 624, 681, 693, 702, 710, 713, 714, 716, 717, 718, 719, 721, 722, 723, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 745, 748, 750, 761], "def": [0, 2, 8, 31, 72, 178, 449, 537, 543, 549, 550, 624, 631, 696, 702, 712, 713, 716, 717, 720, 722, 723, 724, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 744, 745], "fn": [0, 9, 26, 29, 32, 55, 79, 80, 81, 82, 83, 120, 121, 153, 154, 157, 312, 379, 445, 460, 461, 510, 538, 539, 540, 543, 550, 631, 632, 633, 635, 636, 637, 690, 693, 697, 698, 700, 723, 726, 732, 733, 740], "x": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 76, 77, 78, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 129, 134, 150, 151, 155, 160, 161, 162, 166, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 269, 270, 273, 275, 276, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 385, 387, 388, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 491, 492, 493, 496, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 522, 523, 525, 526, 527, 529, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 628, 631, 632, 633, 634, 635, 636, 637, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 687, 690, 693, 696, 700, 702, 712, 717, 718, 720, 722, 723, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 744, 745], "y": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 103, 106, 107, 108, 117, 119, 122, 134, 147, 151, 155, 160, 161, 162, 166, 168, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 259, 274, 280, 286, 287, 288, 289, 290, 295, 297, 299, 301, 303, 306, 309, 310, 311, 312, 315, 321, 328, 330, 332, 333, 337, 340, 342, 346, 354, 358, 362, 367, 373, 374, 375, 376, 377, 385, 387, 396, 400, 408, 409, 413, 417, 418, 419, 427, 433, 434, 435, 436, 437, 440, 442, 444, 447, 450, 451, 454, 455, 457, 458, 459, 462, 463, 464, 468, 470, 471, 472, 474, 475, 478, 479, 484, 491, 492, 493, 496, 499, 500, 501, 502, 504, 506, 508, 509, 510, 514, 515, 518, 521, 522, 523, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 560, 562, 564, 567, 568, 569, 573, 574, 575, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 594, 595, 596, 598, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 628, 631, 632, 634, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 700, 702, 718, 720, 723, 724, 731, 733, 734, 735, 736, 738, 740, 742], "z": [0, 5, 8, 9, 10, 14, 15, 18, 20, 22, 28, 31, 32, 33, 37, 38, 39, 41, 45, 51, 52, 92, 93, 95, 96, 155, 177, 178, 182, 184, 187, 189, 194, 205, 206, 209, 210, 211, 213, 214, 219, 221, 223, 224, 225, 226, 234, 243, 250, 251, 276, 301, 306, 311, 321, 373, 374, 375, 376, 377, 383, 385, 396, 433, 434, 437, 442, 447, 459, 462, 463, 470, 471, 487, 500, 501, 502, 510, 523, 538, 540, 541, 543, 546, 547, 548, 550, 552, 553, 554, 556, 574, 584, 589, 590, 594, 601, 603, 604, 605, 606, 628, 632, 634, 642, 646, 647, 648, 651, 656, 666, 667, 669, 670, 671, 683, 702, 718, 720, 723, 724, 740, 742], "k": [0, 5, 9, 13, 14, 18, 28, 31, 32, 36, 37, 41, 49, 72, 87, 99, 100, 101, 221, 259, 269, 270, 303, 310, 312, 316, 319, 321, 355, 366, 406, 409, 420, 421, 422, 423, 424, 427, 437, 447, 537, 538, 543, 545, 546, 550, 552, 553, 572, 576, 584, 585, 591, 593, 594, 595, 598, 633, 646, 647, 648, 654, 702, 715, 716, 733, 734, 740, 751, 755], "j": [0, 5, 8, 9, 14, 22, 28, 31, 32, 37, 49, 75, 96, 175, 176, 177, 178, 180, 183, 192, 194, 197, 199, 207, 215, 217, 221, 227, 238, 240, 241, 244, 245, 276, 306, 309, 310, 321, 336, 337, 341, 352, 353, 357, 359, 366, 442, 447, 537, 538, 541, 543, 546, 556, 578, 598, 666, 714, 715, 719, 751], "concat": [0, 10, 16, 26, 39, 167, 459, 540, 543, 548, 621, 734, 738, 740], "sum_j": 0, "sum": [0, 2, 8, 9, 10, 13, 14, 15, 22, 26, 31, 32, 33, 36, 37, 38, 45, 49, 51, 52, 167, 177, 219, 243, 272, 292, 303, 306, 310, 311, 321, 351, 356, 373, 374, 375, 376, 377, 440, 441, 456, 486, 487, 540, 541, 543, 545, 546, 547, 556, 568, 572, 585, 594, 598, 601, 603, 604, 605, 665, 666, 683, 685, 696, 702, 720, 722, 729, 731, 732, 733, 740], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 106, 107, 108, 109, 113, 117, 118, 119, 122, 127, 129, 134, 150, 151, 155, 159, 160, 162, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 482, 484, 486, 487, 491, 500, 501, 502, 503, 504, 506, 508, 509, 510, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 682, 683, 684, 685, 686, 687, 688, 689, 693, 696, 702, 705, 706, 710, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 745, 748], "2": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 106, 107, 108, 109, 113, 117, 119, 127, 129, 134, 150, 151, 152, 155, 158, 160, 162, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 269, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 365, 367, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 482, 484, 486, 487, 491, 500, 501, 502, 503, 504, 506, 510, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 683, 684, 693, 696, 702, 710, 713, 714, 716, 718, 719, 720, 721, 722, 724, 726, 728, 729, 731, 732, 733, 734, 735, 739, 740, 742, 743, 744, 745, 748, 761, 762], "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 87, 89, 91, 92, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 113, 117, 119, 127, 129, 134, 148, 150, 151, 162, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 332, 335, 336, 337, 340, 341, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 367, 372, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 482, 486, 487, 500, 501, 502, 506, 509, 510, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 696, 702, 712, 713, 716, 717, 718, 720, 721, 722, 724, 726, 729, 731, 734, 735, 740, 742, 743, 744, 745, 762], "4": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 66, 67, 75, 76, 77, 78, 84, 87, 89, 91, 92, 93, 94, 95, 96, 98, 101, 103, 107, 108, 109, 117, 119, 122, 127, 129, 134, 151, 152, 160, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 261, 265, 266, 269, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 295, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 364, 373, 374, 376, 378, 380, 381, 382, 384, 385, 386, 387, 390, 391, 392, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 427, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 450, 451, 454, 455, 456, 457, 459, 462, 463, 465, 468, 470, 471, 472, 479, 486, 487, 501, 502, 503, 504, 506, 510, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 598, 599, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 688, 696, 702, 706, 710, 712, 713, 718, 719, 720, 721, 722, 724, 731, 734, 735, 738, 740, 742, 743, 744, 745, 755, 761, 762], "compiled_fn": 0, "In": [0, 2, 7, 9, 10, 16, 30, 33, 39, 49, 161, 168, 169, 173, 177, 194, 195, 201, 209, 210, 227, 230, 236, 238, 309, 312, 315, 332, 333, 334, 380, 381, 382, 386, 388, 390, 391, 392, 393, 395, 399, 406, 412, 414, 416, 445, 465, 472, 490, 540, 541, 543, 546, 548, 552, 592, 609, 610, 611, 613, 615, 616, 618, 620, 648, 702, 704, 706, 708, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 747, 748, 751, 753, 755, 756, 758, 761], "case": [0, 2, 4, 5, 9, 10, 16, 22, 26, 28, 32, 33, 39, 49, 52, 78, 94, 120, 121, 148, 153, 154, 161, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 283, 285, 295, 306, 309, 312, 315, 316, 322, 332, 333, 334, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 414, 416, 422, 443, 465, 472, 486, 487, 488, 538, 539, 540, 541, 543, 546, 548, 550, 556, 592, 598, 609, 610, 611, 613, 615, 616, 618, 620, 628, 634, 667, 668, 669, 670, 671, 672, 673, 685, 686, 688, 702, 705, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745, 748, 754, 758], "would": [0, 1, 5, 7, 9, 28, 30, 32, 39, 62, 66, 78, 168, 309, 312, 336, 341, 380, 381, 386, 388, 390, 391, 392, 399, 403, 412, 535, 540, 609, 610, 611, 613, 615, 616, 618, 620, 702, 705, 707, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 724, 725, 728, 730, 732, 733, 734, 735, 736, 738, 739, 740, 742, 744, 745, 748, 755, 761], "can": [0, 1, 2, 5, 6, 9, 10, 14, 16, 18, 20, 28, 29, 32, 33, 37, 39, 41, 43, 49, 61, 64, 77, 78, 93, 95, 109, 148, 165, 166, 167, 252, 255, 301, 309, 310, 315, 316, 319, 321, 331, 344, 361, 366, 368, 371, 385, 414, 421, 422, 427, 434, 479, 490, 523, 526, 535, 538, 539, 540, 543, 544, 545, 546, 548, 552, 571, 577, 584, 594, 598, 613, 617, 646, 647, 648, 656, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 752, 753, 754, 755, 756, 758, 759, 761, 762], "observ": [0, 9, 32, 321, 433, 434, 714, 726, 740, 757], "As": [0, 2, 20, 24, 47, 554, 656, 657, 658, 659, 702, 704, 712, 713, 714, 717, 719, 720, 721, 722, 723, 726, 727, 728, 729, 732, 733, 734, 735, 738, 742, 743, 744, 748, 755, 760], "variabl": [0, 1, 9, 10, 11, 17, 26, 32, 33, 34, 40, 72, 73, 75, 310, 316, 321, 370, 422, 433, 434, 448, 472, 473, 474, 475, 478, 504, 525, 526, 528, 530, 531, 532, 537, 543, 544, 546, 549, 551, 593, 622, 623, 624, 644, 681, 682, 683, 684, 685, 686, 687, 688, 689, 714, 718, 722, 725, 728, 731, 732, 735, 736, 740, 743, 744, 745, 748, 756], "calcul": [0, 8, 9, 10, 15, 22, 26, 31, 32, 33, 37, 38, 45, 52, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 192, 194, 197, 198, 199, 215, 216, 217, 218, 219, 220, 225, 226, 227, 232, 239, 240, 241, 243, 244, 245, 285, 295, 306, 309, 310, 312, 315, 321, 327, 328, 329, 358, 400, 414, 416, 441, 479, 541, 543, 546, 547, 556, 580, 589, 592, 603, 604, 605, 667, 668, 669, 670, 671, 672, 673, 683, 684, 687, 705, 712, 725, 740], "valu": [0, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 67, 72, 73, 75, 76, 87, 90, 91, 92, 93, 96, 101, 106, 123, 127, 133, 166, 167, 174, 175, 176, 177, 179, 181, 182, 183, 190, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 252, 257, 259, 265, 269, 271, 272, 274, 275, 276, 278, 279, 280, 281, 284, 285, 287, 288, 290, 293, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 320, 321, 331, 344, 351, 355, 358, 360, 364, 369, 370, 371, 372, 373, 374, 376, 384, 389, 394, 400, 405, 407, 408, 409, 411, 414, 416, 420, 421, 423, 424, 430, 432, 435, 436, 437, 440, 441, 442, 448, 450, 451, 452, 454, 459, 462, 463, 465, 467, 470, 471, 472, 479, 486, 487, 491, 492, 493, 496, 504, 509, 514, 515, 518, 521, 522, 523, 524, 525, 526, 530, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 576, 579, 580, 585, 586, 587, 590, 591, 592, 593, 594, 595, 598, 601, 606, 607, 608, 612, 613, 621, 622, 623, 627, 629, 630, 631, 632, 633, 638, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 682, 683, 684, 685, 686, 687, 688, 710, 713, 714, 716, 719, 720, 722, 723, 724, 725, 726, 728, 729, 732, 733, 735, 737, 738, 740, 742, 748, 755, 756], "wa": [0, 2, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 274, 275, 276, 278, 280, 286, 287, 293, 294, 295, 297, 298, 299, 303, 306, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 510, 522, 528, 533, 541, 543, 550, 556, 557, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 693, 702, 705, 710, 714, 716, 721, 724, 729, 731, 733, 740, 742, 754, 755, 757], "like": [0, 2, 5, 8, 9, 16, 28, 31, 32, 36, 39, 44, 93, 110, 133, 178, 198, 204, 207, 220, 238, 279, 282, 294, 306, 309, 310, 312, 319, 321, 351, 352, 357, 381, 382, 390, 426, 427, 442, 538, 539, 541, 546, 548, 552, 555, 578, 613, 648, 661, 702, 705, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 747, 748, 755, 760], "were": [0, 26, 29, 122, 126, 127, 201, 541, 714, 722, 726, 727, 731, 732, 734, 735, 736, 738, 740, 755, 756, 761], "exclud": [0, 22, 32, 45, 76, 101, 269, 303, 435, 436, 538, 552, 648, 664, 693, 724, 740], "process": [0, 161, 173, 540, 705, 706, 707, 713, 714, 719, 720, 721, 727, 729, 731, 733, 734, 735, 738, 740, 745, 753, 754, 755, 758, 759, 761, 762], "tensor": [0, 2, 5, 8, 9, 10, 13, 15, 16, 18, 26, 28, 31, 32, 33, 36, 37, 38, 39, 41, 48, 84, 92, 93, 96, 101, 117, 133, 225, 226, 252, 255, 267, 268, 269, 275, 296, 301, 303, 306, 309, 310, 311, 312, 321, 322, 327, 328, 331, 335, 344, 345, 346, 347, 360, 361, 364, 366, 368, 369, 372, 376, 390, 393, 398, 401, 402, 403, 404, 407, 410, 440, 443, 486, 487, 538, 539, 541, 543, 545, 546, 547, 548, 552, 568, 570, 571, 583, 596, 603, 613, 615, 645, 684, 693, 702, 704, 717, 718, 722, 723, 728, 729, 732, 733, 734, 735, 736, 738, 740, 742, 743, 745, 748, 750, 752, 753, 756, 758, 759, 762], "shape": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 162, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 270, 275, 276, 277, 279, 282, 284, 286, 288, 289, 290, 291, 295, 296, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 388, 393, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 450, 451, 455, 456, 457, 459, 462, 463, 466, 472, 479, 486, 487, 497, 505, 507, 519, 523, 524, 525, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 625, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 660, 661, 663, 664, 665, 666, 668, 670, 671, 673, 674, 675, 683, 684, 687, 696, 702, 714, 720, 722, 723, 724, 725, 726, 728, 732, 733, 734, 735, 736, 737, 740, 742, 743, 744, 745], "indic": [0, 5, 9, 10, 13, 14, 16, 17, 19, 20, 21, 26, 28, 29, 32, 33, 36, 37, 39, 40, 42, 43, 44, 49, 77, 78, 96, 99, 101, 122, 126, 127, 238, 269, 270, 285, 303, 306, 309, 310, 312, 317, 319, 327, 328, 329, 331, 335, 336, 337, 341, 342, 345, 346, 347, 348, 352, 358, 372, 380, 381, 382, 384, 386, 388, 390, 391, 392, 395, 399, 405, 406, 408, 409, 411, 412, 425, 426, 427, 447, 462, 463, 465, 486, 487, 491, 523, 526, 527, 538, 541, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 567, 571, 587, 601, 609, 610, 611, 613, 614, 615, 616, 618, 620, 625, 628, 630, 632, 633, 634, 636, 640, 641, 642, 643, 644, 645, 651, 652, 653, 654, 656, 658, 660, 662, 663, 682, 684, 685, 686, 690, 696, 698, 721, 728, 731, 733, 745], "trace": [0, 2, 10, 14, 26, 33, 37, 474, 475, 478, 489, 498, 512, 520, 543, 546, 702, 716, 722, 737, 740, 748, 750, 756, 761], "doesn": [0, 472, 490, 543, 684, 713, 718, 720, 721, 722, 723, 724, 727, 729, 731, 735, 738, 740, 748, 753], "impos": 0, "addit": [0, 7, 9, 10, 17, 30, 32, 33, 40, 73, 75, 168, 177, 237, 321, 433, 438, 455, 456, 457, 523, 537, 540, 541, 543, 549, 551, 624, 644, 684, 712, 713, 714, 718, 722, 724, 725, 727, 729, 731, 732, 733, 735, 736, 738, 742, 743, 745, 755, 756, 757, 761], "restrict": [0, 720, 721, 733, 740, 752], "datatyp": [0, 5, 26, 28, 78, 91, 95, 111, 132, 136, 538, 539, 736], "out": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 117, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 367, 368, 373, 374, 375, 376, 377, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 450, 451, 455, 456, 457, 459, 462, 463, 472, 482, 486, 487, 524, 525, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 625, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 755, 762], "differ": [0, 1, 2, 8, 9, 10, 14, 22, 26, 32, 33, 45, 51, 52, 61, 64, 119, 177, 194, 201, 202, 227, 243, 274, 279, 282, 283, 287, 306, 309, 310, 312, 321, 342, 352, 369, 372, 391, 392, 406, 435, 436, 442, 462, 463, 535, 539, 541, 543, 545, 546, 548, 556, 568, 569, 581, 592, 607, 617, 664, 665, 670, 672, 673, 686, 702, 704, 705, 706, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 748, 752, 753, 754, 755, 758, 761, 762], "b": [0, 3, 8, 9, 10, 13, 14, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 77, 78, 84, 89, 90, 91, 93, 96, 98, 103, 106, 107, 108, 109, 117, 127, 129, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 301, 303, 306, 309, 310, 311, 312, 316, 319, 321, 327, 328, 329, 330, 332, 333, 336, 340, 341, 342, 345, 346, 347, 351, 356, 358, 362, 367, 372, 373, 374, 376, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 406, 408, 409, 412, 413, 418, 419, 421, 422, 424, 425, 427, 434, 435, 436, 437, 439, 441, 442, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 479, 486, 487, 501, 502, 504, 508, 509, 522, 524, 525, 526, 528, 530, 532, 533, 535, 538, 539, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 628, 631, 632, 633, 634, 636, 637, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 696, 702, 703, 706, 707, 710, 714, 715, 716, 718, 720, 721, 724, 729, 731, 734, 739, 740, 741, 743, 744, 745, 746, 751], "new": [0, 1, 9, 10, 11, 16, 17, 26, 28, 32, 33, 34, 37, 39, 40, 85, 88, 90, 91, 96, 97, 98, 102, 103, 140, 183, 229, 231, 235, 274, 277, 287, 292, 306, 312, 321, 378, 385, 399, 405, 441, 455, 456, 457, 459, 462, 463, 465, 486, 487, 490, 492, 499, 501, 502, 508, 525, 528, 530, 531, 532, 538, 539, 541, 543, 544, 548, 550, 551, 581, 589, 609, 613, 617, 630, 642, 643, 644, 681, 684, 687, 688, 693, 702, 704, 705, 706, 707, 712, 713, 714, 715, 717, 718, 720, 721, 722, 724, 725, 727, 730, 732, 733, 734, 735, 736, 738, 739, 742, 745, 747, 750, 753, 757, 761, 762], "run": [0, 2, 9, 11, 32, 34, 315, 414, 416, 524, 525, 530, 544, 549, 622, 623, 624, 684, 685, 686, 687, 696, 702, 708, 709, 712, 713, 715, 717, 718, 721, 723, 724, 726, 727, 728, 730, 733, 734, 740, 741, 742, 743, 744, 745, 747, 748, 749, 753, 755, 756, 757, 758, 760, 761, 762], "under": [0, 2, 311, 375, 696, 702, 712, 713, 715, 716, 723, 724, 725, 727, 733, 734, 735, 738, 739, 740, 743, 745, 748, 755, 758, 762], "hood": [0, 2, 702, 715, 723, 724, 727, 733, 735, 738, 739, 740, 743, 745, 762], "track": [0, 550, 637, 682, 685, 686, 713, 714, 716, 731, 732, 755], "befor": [0, 2, 9, 13, 14, 16, 20, 22, 26, 32, 36, 37, 164, 167, 172, 309, 312, 321, 336, 341, 351, 391, 392, 393, 400, 435, 436, 540, 545, 546, 548, 549, 550, 554, 556, 558, 559, 560, 561, 563, 565, 567, 571, 572, 584, 601, 607, 622, 623, 637, 656, 657, 658, 659, 664, 665, 670, 672, 682, 693, 696, 712, 713, 714, 716, 717, 719, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 740, 743, 748, 755], "instead": [0, 2, 8, 9, 14, 31, 32, 37, 148, 236, 262, 303, 309, 321, 345, 346, 347, 434, 437, 540, 541, 546, 587, 712, 713, 714, 716, 719, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 748, 753, 755, 761, 762], "allow": [0, 2, 9, 32, 92, 232, 321, 437, 441, 482, 538, 541, 543, 555, 662, 682, 685, 686, 700, 702, 705, 708, 712, 714, 717, 718, 721, 722, 726, 727, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 748, 750, 753, 755, 759, 760], "dynam": [0, 548, 613, 693, 715, 721, 722, 723, 732, 733, 737, 740, 755, 759], "done": [0, 2, 546, 580, 711, 712, 713, 714, 716, 719, 721, 723, 724, 727, 732, 733, 735, 743, 755], "first": [0, 1, 2, 5, 8, 9, 14, 16, 18, 19, 20, 22, 28, 31, 32, 33, 37, 39, 41, 43, 45, 49, 51, 52, 72, 73, 92, 93, 101, 132, 140, 150, 177, 182, 184, 186, 187, 188, 189, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 227, 230, 232, 243, 244, 252, 258, 259, 269, 271, 272, 274, 283, 285, 286, 287, 293, 297, 298, 301, 303, 306, 309, 310, 311, 312, 319, 321, 331, 356, 357, 358, 362, 376, 386, 390, 397, 400, 402, 403, 406, 411, 421, 423, 427, 435, 436, 437, 442, 447, 537, 538, 539, 540, 541, 543, 545, 546, 548, 549, 550, 553, 554, 555, 556, 571, 574, 577, 578, 579, 581, 584, 589, 591, 592, 594, 596, 600, 613, 614, 617, 618, 622, 623, 624, 625, 626, 635, 636, 638, 650, 651, 652, 656, 657, 658, 661, 662, 664, 665, 683, 684, 685, 686, 688, 693, 702, 704, 705, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 723, 724, 727, 728, 729, 730, 732, 733, 735, 738, 740, 742, 743, 745, 753, 755, 756, 760], "invok": [0, 2, 9, 309, 331, 702, 727], "onc": [0, 1, 14, 18, 37, 41, 167, 310, 357, 540, 546, 552, 578, 579, 580, 594, 645, 706, 712, 713, 714, 720, 721, 722, 723, 724, 727, 732, 733, 735, 738, 740, 743, 748], "been": [0, 1, 9, 10, 18, 32, 33, 41, 150, 237, 312, 407, 455, 456, 457, 540, 541, 543, 552, 645, 696, 712, 714, 716, 718, 720, 721, 722, 723, 725, 726, 728, 729, 732, 735, 740, 742, 747, 748, 750, 755, 762], "directli": [0, 1, 2, 310, 361, 550, 637, 702, 706, 714, 716, 717, 720, 721, 722, 723, 725, 727, 729, 730, 732, 733, 734, 736, 737, 740, 742, 744, 745, 747, 748, 759, 760, 761], "here": [0, 2, 32, 237, 377, 541, 702, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 747, 748, 755, 756], "eager_graph": [0, 2, 702], "doe": [0, 8, 9, 10, 16, 26, 31, 32, 39, 49, 101, 189, 228, 230, 238, 269, 303, 310, 311, 321, 322, 357, 375, 440, 441, 443, 472, 538, 541, 543, 546, 548, 578, 615, 705, 710, 712, 714, 715, 718, 721, 722, 724, 725, 727, 728, 729, 732, 733, 734, 735, 738, 740, 742, 743, 748, 750, 751, 755, 756, 762], "lazy_graph": [0, 2, 702], "up": [0, 9, 10, 32, 33, 309, 312, 331, 344, 392, 479, 543, 545, 568, 682, 704, 705, 706, 707, 708, 710, 712, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 756, 761, 762], "enabl": [0, 9, 14, 26, 37, 52, 309, 311, 331, 375, 490, 543, 546, 587, 702, 705, 713, 714, 717, 720, 722, 729, 730, 731, 732, 733, 735, 736, 739, 741, 743, 745, 748, 750, 753, 754, 755, 756, 757, 758, 761, 762], "delai": [0, 714], "until": [0, 705, 714, 732, 740, 748, 762], "have": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 119, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 270, 275, 276, 284, 286, 288, 289, 290, 291, 295, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 352, 353, 354, 355, 357, 358, 361, 362, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377, 381, 382, 385, 386, 388, 393, 401, 402, 403, 404, 406, 409, 410, 417, 418, 419, 420, 421, 423, 424, 425, 427, 434, 435, 436, 437, 441, 443, 450, 451, 455, 456, 457, 462, 463, 472, 486, 487, 490, 524, 525, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 625, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 686, 687, 688, 689, 696, 702, 703, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 761, 762], "necessari": [0, 2, 5, 9, 28, 32, 39, 78, 194, 227, 312, 380, 381, 382, 386, 388, 390, 391, 392, 399, 412, 495, 517, 541, 543, 609, 610, 611, 613, 615, 616, 618, 620, 702, 713, 717, 718, 720, 724, 732, 733, 735, 737, 738], "particularli": [0, 714, 743, 748, 753], "librari": [0, 7, 20, 30, 168, 199, 201, 217, 222, 223, 245, 540, 541, 546, 554, 556, 579, 580, 656, 657, 658, 659, 667, 668, 669, 671, 702, 704, 705, 706, 707, 709, 712, 713, 716, 745, 746, 748, 750, 751, 752, 753, 755, 759, 762], "where": [0, 5, 8, 9, 10, 14, 16, 18, 19, 22, 23, 26, 28, 31, 32, 33, 37, 39, 41, 42, 45, 46, 49, 90, 91, 94, 96, 101, 182, 192, 194, 197, 199, 201, 202, 211, 216, 217, 218, 225, 226, 227, 232, 234, 238, 240, 244, 250, 252, 269, 271, 272, 283, 287, 294, 301, 303, 306, 309, 310, 311, 312, 315, 316, 321, 323, 324, 325, 331, 336, 337, 341, 357, 358, 360, 361, 363, 369, 372, 373, 380, 381, 382, 394, 400, 414, 415, 416, 420, 421, 423, 424, 434, 442, 472, 486, 523, 538, 541, 543, 545, 546, 548, 550, 552, 553, 556, 557, 571, 574, 578, 579, 583, 585, 587, 589, 590, 591, 594, 595, 598, 600, 606, 608, 609, 611, 617, 621, 629, 636, 645, 646, 647, 648, 653, 654, 671, 673, 674, 675, 683, 687, 702, 704, 705, 706, 707, 710, 713, 714, 716, 717, 718, 719, 720, 722, 723, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 743, 744, 745, 748, 749, 753, 762], "feasibl": [0, 705, 712, 721], "provid": [0, 2, 5, 9, 10, 14, 16, 19, 22, 23, 26, 28, 32, 33, 37, 39, 42, 45, 46, 72, 94, 96, 112, 113, 114, 115, 116, 124, 134, 146, 150, 246, 310, 312, 315, 321, 356, 369, 372, 386, 395, 412, 414, 416, 442, 454, 486, 487, 537, 538, 539, 540, 541, 543, 545, 546, 548, 550, 553, 556, 557, 571, 586, 589, 600, 609, 610, 617, 629, 651, 671, 673, 674, 675, 684, 688, 693, 702, 704, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 742, 744, 747, 748, 753, 754, 755, 756, 757, 758, 759, 762], "valid": [0, 9, 13, 23, 32, 36, 46, 49, 111, 309, 310, 327, 328, 329, 345, 346, 347, 348, 350, 351, 367, 372, 475, 539, 543, 545, 548, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 609, 617, 674, 675, 684, 696, 713, 718, 722, 724, 727, 731, 734, 735, 756], "look": [0, 702, 704, 708, 712, 713, 714, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 740, 742, 744, 745, 749, 751, 755], "find": [0, 1, 14, 20, 26, 37, 546, 550, 554, 587, 627, 656, 657, 658, 659, 696, 702, 704, 707, 711, 712, 713, 714, 716, 719, 721, 731, 735, 738, 740, 743, 750], "abl": [0, 26, 49, 713, 714, 716, 722, 729, 732, 733, 736, 740, 745, 758, 761], "through": [0, 9, 32, 182, 321, 440, 441, 541, 550, 628, 634, 686, 696, 702, 707, 710, 711, 712, 714, 715, 718, 719, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 743, 744, 745, 747, 753, 755, 756, 757], "flag": [0, 2, 26, 150, 321, 434, 540, 545, 571, 687, 714, 722, 723, 732, 733, 734, 735], "reduc": [0, 9, 10, 14, 19, 22, 23, 26, 32, 33, 37, 42, 45, 46, 167, 292, 306, 307, 321, 439, 440, 441, 442, 456, 540, 543, 546, 553, 556, 557, 591, 651, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 696, 721, 726, 733, 738, 740, 742, 753, 757, 758, 759], "time": [0, 1, 2, 9, 11, 14, 20, 32, 34, 43, 49, 89, 279, 306, 309, 310, 312, 321, 337, 342, 368, 372, 400, 406, 434, 525, 530, 538, 544, 545, 546, 548, 549, 553, 554, 568, 570, 584, 619, 622, 623, 624, 651, 652, 656, 657, 684, 685, 686, 704, 705, 706, 712, 713, 714, 718, 720, 721, 722, 724, 728, 729, 730, 732, 733, 735, 736, 740, 743, 745, 748, 753, 755, 756, 759, 760, 761], "comp_func": 0, "default": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 126, 127, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 150, 151, 153, 154, 158, 161, 162, 163, 165, 166, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 496, 500, 501, 502, 504, 506, 508, 509, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 633, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 712, 713, 714, 718, 719, 722, 723, 724, 725, 726, 728, 729, 733, 735, 738, 740, 744, 750, 755], "follow": [0, 9, 10, 11, 13, 14, 20, 26, 32, 33, 34, 36, 37, 89, 122, 167, 177, 194, 201, 227, 229, 236, 237, 309, 312, 315, 331, 344, 388, 400, 405, 414, 416, 470, 471, 472, 501, 502, 525, 528, 530, 531, 532, 538, 539, 540, 541, 543, 544, 545, 546, 550, 554, 571, 572, 585, 591, 601, 631, 637, 656, 657, 658, 659, 684, 688, 702, 704, 705, 709, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 752, 755, 758], "show": [0, 489, 498, 520, 543, 682, 702, 712, 713, 714, 719, 721, 724, 727, 732, 733, 735, 737, 747, 748, 755], "simpler": [0, 712, 714, 727, 756, 762], "obtain": [0, 309, 348, 545, 571, 733], "howev": [0, 14, 37, 201, 244, 245, 315, 414, 416, 490, 541, 543, 546, 592, 594, 693, 705, 712, 713, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 738, 740, 742, 743, 744, 745, 748, 754, 755, 761], "desir": [0, 6, 7, 9, 19, 26, 29, 30, 32, 42, 49, 106, 108, 109, 168, 296, 306, 312, 321, 398, 440, 442, 539, 540, 546, 553, 596, 653, 683, 684, 704, 714, 718, 721, 722, 723, 733, 740, 755], "below": [0, 2, 5, 9, 14, 37, 45, 99, 100, 101, 201, 211, 234, 269, 270, 276, 303, 306, 538, 541, 546, 577, 598, 673, 702, 707, 712, 713, 715, 716, 720, 721, 722, 723, 724, 726, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 751, 753, 758, 760], "ultim": 0, "trade": 0, "off": [0, 13, 14, 36, 37, 332, 333, 334, 545, 546, 568, 577, 598, 683, 684, 706, 713, 739, 761], "between": [0, 2, 8, 9, 10, 13, 14, 15, 16, 20, 26, 31, 32, 36, 38, 39, 52, 76, 119, 182, 195, 230, 232, 246, 274, 287, 289, 306, 309, 310, 311, 312, 321, 332, 333, 334, 345, 346, 347, 356, 373, 374, 375, 376, 377, 400, 442, 538, 539, 541, 545, 547, 548, 550, 552, 554, 568, 589, 603, 604, 605, 609, 617, 631, 646, 657, 658, 659, 688, 704, 717, 718, 724, 728, 729, 730, 732, 733, 734, 735, 738, 739, 741, 742, 743, 745, 747, 751, 752, 754, 755, 756, 761], "memori": [0, 5, 9, 16, 28, 32, 39, 78, 94, 149, 161, 167, 169, 173, 312, 321, 380, 381, 386, 388, 390, 391, 392, 399, 412, 441, 485, 490, 513, 538, 540, 543, 545, 548, 570, 609, 610, 611, 613, 615, 616, 618, 620, 702, 721, 722, 723, 732, 733, 738, 740, 746, 748, 755, 757, 758, 759], "store": [0, 6, 9, 10, 14, 16, 26, 29, 32, 33, 37, 39, 108, 309, 310, 352, 356, 459, 543, 546, 548, 598, 615, 684, 685, 686, 709, 714, 717, 718, 720, 725, 730, 732, 733, 734, 740, 742, 743, 744, 750], "thei": [0, 9, 14, 18, 20, 26, 37, 41, 43, 132, 246, 282, 306, 539, 541, 546, 549, 552, 554, 599, 622, 623, 645, 656, 689, 702, 711, 712, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 740, 742, 743, 744, 745, 748, 752, 755, 757, 758, 761, 762], "By": [0, 9, 15, 16, 22, 23, 32, 38, 39, 45, 46, 241, 273, 285, 292, 303, 306, 309, 311, 319, 321, 331, 375, 427, 434, 437, 490, 541, 543, 546, 547, 548, 556, 557, 574, 600, 603, 612, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 713, 718, 722, 724, 726, 729, 731, 732, 733, 740, 744, 745], "choos": [0, 7, 19, 20, 30, 168, 194, 201, 222, 223, 227, 312, 540, 541, 553, 554, 556, 655, 656, 657, 658, 659, 667, 668, 669, 671, 712, 713, 714, 730, 735, 741, 745], "node": [0, 2, 26, 33, 52, 448, 504, 550, 635, 636, 683, 692, 705, 719, 720, 733, 756], "bake": 0, "randint": [0, 13, 18, 20, 36, 41, 552, 554, 567, 570, 656, 722], "0": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 84, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 117, 119, 122, 123, 127, 129, 134, 147, 150, 152, 155, 160, 161, 162, 163, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 327, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 368, 369, 372, 373, 374, 375, 376, 377, 379, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 447, 449, 450, 451, 454, 455, 456, 458, 459, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 482, 484, 486, 487, 491, 496, 500, 501, 502, 504, 506, 508, 509, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 584, 585, 586, 587, 588, 590, 592, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 702, 710, 713, 714, 716, 718, 720, 721, 722, 723, 724, 725, 726, 731, 732, 733, 734, 735, 736, 740, 742, 743, 744, 745, 748], "100": [0, 5, 8, 9, 28, 31, 32, 33, 36, 50, 93, 101, 188, 228, 241, 269, 287, 296, 303, 306, 309, 310, 332, 333, 369, 372, 463, 471, 487, 538, 541, 543, 546, 550, 582, 631, 702, 705, 706, 721, 722, 735, 743, 744, 745, 748], "size": [0, 9, 10, 13, 14, 16, 18, 19, 26, 32, 33, 36, 37, 39, 41, 42, 49, 51, 52, 89, 92, 165, 166, 167, 258, 261, 271, 272, 273, 278, 292, 299, 303, 306, 307, 309, 310, 312, 315, 316, 319, 321, 323, 324, 325, 326, 327, 328, 344, 345, 346, 348, 349, 358, 369, 372, 386, 398, 409, 415, 416, 422, 427, 439, 440, 441, 442, 481, 486, 538, 540, 543, 545, 546, 548, 552, 553, 557, 572, 574, 577, 581, 585, 589, 591, 594, 600, 609, 614, 615, 616, 645, 651, 654, 674, 675, 684, 702, 732, 734, 735, 738, 743], "rand": [0, 696, 702], "And": [0, 29, 702, 716, 719, 727, 729, 735], "final": [0, 2, 5, 10, 32, 33, 49, 75, 92, 93, 309, 352, 459, 537, 538, 543, 545, 571, 712, 714, 716, 717, 718, 719, 721, 722, 724, 725, 729, 731, 732, 733, 738, 739, 743, 751, 761], "__setattr__": [0, 720], "__getattr__": [0, 720], "arbitrari": [0, 2, 5, 6, 9, 26, 29, 94, 107, 134, 380, 381, 382, 526, 538, 539, 544, 728, 729, 731, 732, 733, 735, 744, 748, 756, 761], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 89, 98, 103, 119, 122, 135, 137, 138, 197, 234, 276, 296, 306, 320, 321, 328, 329, 357, 440, 441, 446, 455, 459, 472, 482, 504, 538, 539, 540, 541, 543, 545, 547, 550, 551, 570, 572, 578, 589, 594, 603, 619, 625, 626, 637, 644, 659, 666, 670, 671, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 696, 700, 702, 712, 718, 719, 720, 722, 723, 724, 725, 728, 730, 731, 734, 735, 738, 740, 741, 743, 744, 745, 746, 747, 748, 750, 753, 755, 756, 762], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 117, 119, 120, 121, 122, 125, 126, 127, 129, 131, 134, 151, 153, 154, 155, 160, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 308, 309, 310, 311, 312, 315, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 491, 494, 496, 501, 502, 503, 504, 506, 508, 509, 516, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 632, 633, 634, 637, 638, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 682, 684, 685, 686, 688, 689, 693, 696, 702, 704, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 721, 722, 724, 725, 728, 729, 730, 731, 732, 734, 735, 737, 738, 739, 740, 741, 744, 748, 749, 750, 755, 756, 761], "cont_deep_copi": [0, 26, 743], "some": [0, 2, 26, 34, 199, 201, 217, 309, 332, 333, 334, 524, 525, 528, 530, 531, 532, 540, 541, 544, 550, 636, 684, 702, 705, 706, 710, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 747, 748, 749, 750, 751, 752, 754, 755, 756, 761, 762], "still": [0, 2, 14, 26, 37, 546, 594, 705, 712, 714, 717, 718, 722, 725, 726, 727, 729, 732, 733, 735, 738, 744, 748, 752, 755, 761], "develop": [0, 2, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 719, 721, 736, 747, 748, 750, 753, 754, 755, 756, 757, 760, 761, 762], "account": [0, 9, 16, 32, 39, 241, 312, 390, 541, 548, 613, 683, 696, 713, 721, 725, 733, 736], "point": [0, 6, 8, 9, 14, 18, 20, 22, 29, 31, 32, 37, 41, 45, 76, 77, 78, 85, 87, 90, 97, 98, 102, 106, 119, 123, 127, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 207, 208, 209, 210, 215, 216, 217, 218, 219, 227, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 258, 259, 261, 289, 290, 293, 295, 303, 306, 309, 310, 311, 316, 321, 332, 333, 334, 357, 371, 373, 420, 421, 422, 423, 424, 434, 435, 436, 442, 536, 538, 539, 541, 546, 552, 553, 554, 555, 556, 573, 575, 578, 579, 580, 582, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 598, 601, 647, 648, 654, 656, 657, 658, 659, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 693, 706, 710, 712, 713, 714, 716, 717, 718, 719, 721, 724, 725, 728, 732, 733, 735, 736, 738, 740, 742, 743, 747, 761], "wip": [0, 727], "ll": [0, 1, 2, 702, 706, 707, 710, 712, 713, 714, 719, 724, 727, 731, 732, 743], "soon": [0, 712, 714, 721, 722, 746, 748], "control": [0, 9, 32, 101, 249, 269, 301, 303, 309, 312, 332, 333, 334, 384, 408, 490, 538, 543, 546, 576, 682, 720, 722, 723, 731, 732, 733, 734, 738, 742, 743, 747, 750, 755, 761], "flow": [0, 720, 747, 755, 756], "built": [0, 76, 538, 684, 685, 686, 702, 713, 714, 719, 720, 735, 741, 749, 750, 754, 755, 759], "moment": [0, 2, 11, 34, 524, 525, 530, 544, 688, 712, 718, 748], "condit": [0, 19, 32, 42, 73, 310, 354, 537, 550, 553, 635, 636, 655, 716, 722, 724, 726, 729, 730, 732, 735, 747], "branch": [0, 182, 194, 197, 199, 227, 239, 240, 241, 244, 541, 713, 714, 716, 721, 727, 748, 755], "loop": [0, 24, 47, 72, 75, 537, 549, 622, 623, 624, 702, 718, 748], "regist": [0, 714], "correctli": [0, 2, 9, 14, 19, 32, 37, 42, 278, 306, 321, 440, 441, 442, 546, 553, 585, 651, 712, 713, 714, 717, 720, 722, 724, 726, 727, 728, 734, 735, 738, 744, 748], "while": [0, 1, 9, 13, 26, 32, 36, 49, 52, 75, 96, 133, 201, 202, 222, 223, 283, 306, 309, 310, 312, 352, 367, 402, 403, 433, 537, 538, 539, 541, 545, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 656, 668, 671, 704, 705, 710, 712, 713, 714, 717, 718, 719, 721, 722, 723, 724, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 742, 744, 745, 748, 755, 761, 762], "your": [0, 1, 2, 702, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 719, 721, 725, 727, 731, 733, 736, 738, 743, 744, 748, 749, 755], "depend": [0, 5, 6, 9, 10, 14, 20, 21, 29, 32, 37, 44, 45, 73, 84, 106, 174, 175, 176, 179, 180, 181, 182, 191, 192, 194, 197, 199, 215, 216, 217, 218, 227, 229, 232, 239, 240, 244, 245, 295, 306, 310, 357, 370, 504, 537, 538, 539, 541, 543, 546, 553, 555, 578, 579, 591, 592, 593, 594, 655, 660, 663, 673, 702, 705, 708, 709, 710, 712, 713, 714, 719, 722, 723, 725, 730, 732, 733, 734, 735, 738, 740, 748, 749, 753, 755, 756], "chang": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 312, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 535, 541, 548, 550, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 590, 591, 592, 594, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 626, 637, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 702, 706, 708, 712, 713, 714, 716, 718, 719, 720, 721, 722, 724, 725, 727, 733, 734, 735, 736, 737, 738, 740, 744, 748, 749, 758, 761], "number": [0, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 49, 51, 52, 55, 76, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 107, 112, 113, 114, 115, 116, 118, 119, 122, 125, 126, 127, 129, 131, 134, 158, 159, 160, 174, 175, 176, 177, 178, 180, 182, 183, 190, 192, 194, 195, 197, 199, 200, 201, 207, 208, 209, 211, 215, 217, 225, 226, 227, 228, 229, 230, 232, 234, 236, 237, 238, 240, 241, 245, 247, 255, 267, 268, 269, 271, 272, 274, 276, 277, 278, 279, 287, 292, 296, 301, 303, 306, 309, 310, 312, 315, 321, 342, 352, 354, 357, 360, 361, 369, 371, 372, 380, 381, 382, 400, 401, 402, 403, 404, 406, 409, 411, 414, 415, 416, 432, 434, 435, 436, 437, 459, 466, 484, 501, 502, 509, 522, 523, 536, 538, 539, 540, 541, 543, 545, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 565, 566, 568, 571, 574, 578, 579, 580, 587, 592, 594, 598, 599, 600, 603, 606, 608, 609, 611, 612, 614, 615, 617, 619, 621, 622, 623, 624, 645, 649, 654, 656, 657, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 682, 683, 684, 687, 702, 703, 704, 713, 714, 720, 721, 722, 723, 724, 730, 731, 732, 735, 736, 737, 738, 740, 743], "underli": [0, 9, 16, 32, 39, 184, 187, 189, 224, 312, 390, 541, 546, 548, 592, 613, 720, 732, 738, 755], "piec": [0, 714, 717, 729, 730, 740, 751, 753], "insid": [0, 14, 37, 52, 312, 409, 546, 587, 713, 714, 717, 720, 722, 723, 729, 730, 735, 736, 761], "said": [0, 706, 736], "other": [0, 2, 6, 8, 9, 10, 16, 22, 26, 29, 31, 32, 33, 39, 45, 49, 51, 52, 76, 96, 107, 133, 194, 199, 201, 217, 226, 227, 275, 279, 306, 312, 385, 393, 405, 444, 445, 538, 539, 541, 543, 552, 556, 607, 617, 648, 671, 673, 702, 705, 708, 712, 713, 714, 716, 717, 720, 721, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 761, 762], "numpi": [0, 2, 8, 9, 10, 22, 31, 32, 33, 101, 130, 148, 178, 238, 269, 303, 321, 434, 441, 448, 472, 501, 504, 508, 538, 539, 540, 541, 543, 556, 666, 693, 696, 702, 704, 705, 711, 712, 713, 714, 716, 717, 718, 721, 722, 723, 726, 728, 732, 734, 735, 736, 738, 740, 742, 745, 749, 750, 757, 762], "len": [0, 5, 9, 14, 32, 37, 94, 262, 303, 309, 310, 321, 342, 352, 361, 369, 372, 442, 538, 546, 599, 702, 720, 721, 726, 732, 733, 735, 742, 745], "incorrectli": [0, 725], "There": [0, 49, 302, 304, 305, 313, 314, 318, 702, 704, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 726, 727, 729, 731, 733, 734, 737, 740, 743, 748, 756, 757, 761, 762], "succe": [0, 713], "hide": [0, 726], "shouldn": [0, 736], "realli": [0, 713, 720, 748, 760, 761], "check": [0, 4, 6, 10, 14, 26, 29, 33, 37, 67, 110, 111, 120, 121, 124, 126, 127, 128, 131, 146, 153, 154, 161, 173, 448, 458, 460, 461, 468, 474, 475, 476, 477, 478, 494, 504, 516, 522, 535, 539, 540, 543, 546, 550, 579, 580, 587, 625, 626, 635, 636, 637, 682, 696, 702, 709, 711, 712, 713, 714, 716, 720, 721, 723, 724, 726, 730, 732, 733, 734, 735, 736, 737, 739, 740, 742, 743, 744, 749], "recommend": [0, 222, 223, 236, 541, 556, 668, 671, 713, 718, 719, 727, 730, 731], "nois": [0, 2, 702], "anoth": [0, 2, 88, 107, 109, 538, 539, 702, 705, 712, 713, 714, 718, 720, 722, 723, 726, 727, 729, 732, 733, 735, 740, 742, 745, 750, 755, 761], "right": [0, 9, 14, 26, 32, 37, 52, 70, 71, 186, 188, 241, 286, 306, 309, 310, 312, 343, 364, 370, 371, 391, 455, 537, 541, 543, 546, 555, 594, 599, 662, 707, 712, 713, 714, 715, 716, 724, 738, 743], "feel": [0, 1, 51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 702, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739], "free": [0, 1, 51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 702, 708, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 747, 756, 758], "open": [0, 1, 2, 10, 18, 41, 76, 538, 552, 646, 648, 702, 704, 705, 706, 707, 713, 714, 719, 722, 725, 733, 734, 738, 747, 753, 754, 755, 757, 758], "issu": [0, 683, 706, 707, 710, 711, 713, 716, 718, 721, 722, 723, 724, 726, 733, 735, 736, 738, 740, 744, 748], "minim": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 590, 591, 592, 594, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 725, 732, 734, 738, 740, 753, 761], "resnet50": 0, "hug": 0, "face": [0, 707, 713, 716, 727, 731, 738, 740, 755, 761], "classifi": [0, 2, 702], "breed": 0, "cat": [0, 2, 734, 738, 740, 745], "transform": [0, 2, 9, 13, 32, 36, 309, 310, 330, 331, 336, 337, 340, 341, 342, 352, 364, 545, 569, 684, 702, 730, 735, 745, 747, 750, 753, 755, 756, 757], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 26, 702, 743, 746], "load_dataset": [0, 2], "download": [0, 2, 713, 735], "imag": [0, 2, 8, 9, 13, 31, 32, 36, 51, 174, 175, 176, 177, 180, 183, 192, 195, 197, 199, 208, 209, 210, 215, 217, 230, 237, 238, 240, 241, 245, 309, 327, 328, 344, 345, 346, 348, 455, 541, 543, 545, 558, 559, 560, 561, 562, 565, 566, 567, 684, 702, 708, 713, 738, 740, 741, 743, 745, 747, 749, 755], "huggingfac": [0, 2], "test": [0, 2, 8, 10, 23, 31, 33, 46, 75, 125, 129, 208, 209, 210, 211, 234, 309, 332, 333, 334, 479, 537, 539, 541, 543, 557, 674, 675, 702, 706, 710, 711, 712, 715, 719, 722, 724, 726, 727, 730, 733, 736, 748, 749, 755], "image_processor": [0, 2], "from_pretrain": [0, 2], "microsoft": [0, 2, 705, 755, 760, 762], "resnet": [0, 2], "50": [0, 2, 9, 22, 31, 32, 33, 193, 233, 293, 306, 309, 310, 337, 356, 362, 457, 463, 470, 471, 487, 501, 541, 543, 546, 550, 553, 556, 582, 589, 626, 628, 654, 666, 731, 742], "preprocess": 0, "return_tensor": [0, 2], "pt": 0, "normal": [0, 9, 17, 18, 32, 40, 41, 49, 295, 306, 309, 315, 321, 330, 331, 336, 337, 340, 341, 342, 352, 414, 415, 416, 417, 418, 419, 434, 437, 548, 551, 552, 607, 617, 644, 645, 647, 683, 684, 687, 702, 712, 732, 733, 738, 743, 753], "feed": [0, 167, 540, 755, 756], "itself": [0, 8, 49, 228, 445, 510, 541, 543, 550, 637, 704, 710, 713, 714, 716, 719, 720, 721, 722, 723, 726, 727, 732, 733, 744, 747, 748, 754, 755, 756, 761], "without": [0, 20, 26, 496, 510, 543, 548, 550, 554, 613, 626, 656, 657, 658, 659, 696, 714, 717, 718, 720, 721, 722, 723, 724, 726, 728, 729, 733, 735, 736, 738, 742, 743, 744, 747, 748, 752, 755, 756, 757, 761], "pytorch": [0, 2, 237, 541, 688, 702, 705, 706, 711, 712, 717, 722, 723, 726, 728, 729, 732, 733, 734, 738, 740, 745, 748, 750, 756, 758, 759, 761, 762], "no_grad": 0, "logit": [0, 9, 15, 32, 38, 301, 316, 420, 423, 547, 603, 605, 680, 702], "With": [0, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 106, 107, 108, 109, 111, 117, 118, 119, 122, 129, 134, 135, 136, 137, 138, 148, 151, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 258, 259, 261, 276, 278, 284, 287, 288, 289, 291, 292, 295, 301, 303, 306, 309, 310, 311, 312, 321, 330, 332, 333, 340, 354, 355, 356, 358, 359, 367, 376, 390, 391, 392, 394, 397, 399, 400, 406, 409, 411, 425, 434, 435, 436, 437, 439, 440, 441, 442, 444, 448, 449, 450, 451, 454, 455, 456, 457, 458, 462, 463, 466, 468, 470, 471, 472, 486, 487, 501, 502, 504, 506, 508, 509, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 572, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 586, 587, 588, 592, 594, 595, 596, 598, 599, 603, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 705, 706, 713, 724, 733, 735, 738, 740, 755, 758], "compiled_graph": 0, "our": [0, 24, 47, 51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 707, 709, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 724, 726, 727, 730, 733, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 748, 760, 761], "predicted_label": 0, "argmax": [0, 19, 42, 553, 702, 733], "item": [0, 4, 10, 24, 26, 28, 31, 32, 33, 89, 113, 150, 204, 220, 228, 279, 281, 294, 452, 462, 463, 467, 501, 502, 538, 539, 540, 543, 550, 557, 630, 631, 632, 633, 637, 642, 643, 677, 685, 686, 702, 712, 720, 722, 740, 742, 743, 745], "config": [0, 26, 550, 638, 702, 708, 713, 716, 719, 721, 727, 734, 743, 756], "id2label": 0, "us": [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 41, 42, 47, 49, 52, 59, 93, 96, 106, 118, 120, 121, 132, 133, 153, 154, 156, 161, 165, 166, 167, 168, 170, 173, 179, 187, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 237, 241, 246, 258, 260, 261, 263, 264, 268, 285, 288, 289, 292, 303, 306, 309, 310, 312, 315, 316, 317, 319, 321, 327, 328, 329, 331, 332, 333, 334, 335, 337, 342, 344, 345, 346, 347, 350, 352, 356, 358, 360, 364, 366, 368, 369, 370, 371, 372, 390, 394, 398, 400, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 442, 460, 461, 470, 471, 482, 490, 492, 493, 495, 501, 502, 514, 515, 517, 524, 525, 530, 531, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 556, 569, 571, 572, 577, 579, 587, 595, 601, 603, 612, 613, 614, 618, 622, 623, 624, 625, 627, 628, 634, 635, 636, 638, 645, 646, 647, 648, 650, 651, 652, 653, 656, 658, 666, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 696, 700, 706, 707, 708, 711, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762], "compil": [1, 2, 245, 541, 685, 686, 688, 702, 720, 733, 736, 738, 739, 741, 748, 749, 750, 751, 754, 755, 756, 759, 762], "grant": [1, 702], "pilot": [1, 702, 711], "access": [1, 2, 26, 702, 712, 713, 714, 721, 722, 727, 732, 733, 755, 757, 759], "user": [1, 228, 245, 312, 400, 490, 541, 543, 682, 684, 685, 686, 696, 702, 704, 705, 708, 713, 714, 715, 717, 718, 720, 721, 722, 723, 726, 730, 731, 732, 733, 735, 737, 738, 739, 740, 748, 749, 753, 755, 761, 762], "join": [1, 16, 26, 32, 39, 385, 548, 607, 617, 702], "waitlist": [1, 702], "want": [1, 2, 9, 24, 32, 47, 194, 227, 312, 388, 541, 682, 686, 702, 705, 707, 709, 712, 713, 714, 719, 721, 723, 726, 727, 729, 730, 731, 732, 735, 738, 743, 744, 745, 748, 749], "get": [1, 2, 7, 14, 26, 30, 37, 51, 117, 118, 119, 122, 150, 151, 152, 155, 161, 166, 169, 173, 446, 464, 485, 503, 539, 540, 543, 546, 550, 601, 627, 682, 683, 684, 696, 702, 706, 707, 711, 712, 713, 715, 716, 721, 722, 723, 729, 730, 731, 732, 733, 734, 735, 740, 741, 742, 743, 744, 750, 755, 761], "one": [1, 2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 42, 43, 44, 45, 49, 76, 84, 94, 96, 97, 98, 107, 109, 167, 188, 194, 201, 202, 219, 225, 226, 227, 246, 252, 258, 261, 262, 274, 278, 283, 284, 287, 288, 289, 291, 292, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 330, 332, 336, 337, 340, 341, 344, 353, 354, 361, 368, 376, 380, 381, 382, 390, 391, 392, 397, 399, 404, 407, 414, 415, 416, 420, 425, 435, 436, 439, 440, 441, 442, 444, 482, 486, 487, 489, 506, 508, 509, 522, 524, 525, 528, 530, 532, 533, 538, 539, 540, 541, 543, 544, 545, 546, 548, 551, 553, 554, 556, 559, 560, 561, 562, 563, 564, 567, 581, 584, 585, 589, 591, 600, 601, 609, 610, 611, 614, 616, 620, 644, 651, 654, 656, 657, 658, 659, 664, 666, 687, 690, 693, 699, 702, 705, 706, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 742, 743, 745, 748, 750, 755, 756, 758, 761], "directori": [1, 499, 521, 540, 543, 708, 709, 712, 713, 714, 719, 721, 733, 735], "keep": [1, 2, 9, 16, 26, 32, 39, 49, 296, 310, 372, 548, 620, 711, 712, 713, 714, 716, 718, 719, 720, 721, 726, 732, 733, 735, 736, 738, 743, 745, 749], "locat": [1, 96, 321, 435, 538, 550, 552, 555, 629, 645, 662, 712, 714, 718, 719, 723, 733, 734, 735, 736, 753], "ivy_root": 1, "environ": [1, 702, 707, 708, 714, 747, 749, 755, 757], "path": [1, 692, 713, 719, 732, 733, 734, 755], "either": [1, 2, 8, 9, 10, 13, 22, 26, 31, 32, 33, 36, 37, 61, 64, 67, 73, 88, 89, 174, 175, 176, 177, 182, 192, 194, 195, 197, 199, 201, 208, 209, 215, 216, 217, 218, 219, 227, 236, 238, 239, 241, 244, 245, 275, 295, 306, 309, 321, 330, 340, 350, 351, 435, 436, 454, 474, 482, 483, 491, 510, 535, 537, 538, 541, 543, 545, 546, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 584, 589, 592, 596, 622, 623, 624, 664, 665, 670, 672, 682, 684, 685, 686, 693, 712, 713, 714, 718, 720, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 738, 740, 743, 748, 755], "manual": [1, 550, 625, 635, 636, 712, 713, 714, 722, 727, 735, 744], "automat": [1, 706, 712, 713, 714, 715, 718, 719, 721, 722, 727, 729, 732, 735, 738, 739, 741, 744, 745, 750, 755, 758, 762], "past": [1, 714, 716, 734, 735, 755], "content": [1, 9, 26, 32, 321, 441, 712, 714, 719, 723, 732, 740, 743], "pem": 1, "file": [1, 10, 26, 499, 521, 543, 686, 712, 713, 714, 716, 717, 718, 719, 720, 721, 723, 725, 726, 727, 729, 733, 734, 735, 736, 740, 743, 751, 754, 755, 756], "refer": [1, 9, 16, 22, 23, 32, 34, 39, 45, 46, 87, 101, 199, 217, 259, 269, 294, 303, 306, 309, 310, 312, 337, 342, 352, 355, 372, 390, 524, 525, 538, 541, 544, 546, 548, 556, 557, 574, 576, 600, 613, 671, 673, 674, 675, 684, 702, 711, 712, 713, 714, 716, 717, 719, 721, 722, 728, 729, 730, 731, 732, 733, 734, 735, 748, 750, 755], "equival": [1, 2, 14, 37, 49, 76, 188, 201, 222, 223, 236, 237, 312, 411, 538, 541, 546, 587, 590, 593, 601, 693, 732, 733, 738, 743, 745], "echo": [1, 713, 721], "n": [1, 2, 5, 8, 9, 13, 14, 16, 18, 19, 22, 23, 31, 32, 36, 37, 39, 41, 42, 45, 46, 49, 51, 94, 99, 100, 101, 174, 244, 246, 269, 270, 279, 303, 306, 309, 310, 312, 315, 316, 319, 321, 323, 324, 325, 330, 331, 336, 337, 340, 341, 342, 350, 351, 352, 358, 359, 366, 368, 372, 382, 386, 389, 393, 395, 406, 412, 414, 415, 416, 420, 421, 422, 423, 424, 427, 434, 442, 538, 541, 545, 546, 548, 550, 552, 553, 556, 557, 558, 559, 560, 561, 563, 565, 567, 574, 577, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 598, 599, 600, 601, 608, 609, 611, 617, 621, 633, 646, 647, 648, 654, 668, 670, 671, 672, 673, 674, 675, 684, 687, 696, 702, 715, 719, 721, 735], "api_kei": 1, "bug": [1, 201, 541, 702, 712, 714, 719, 727, 733, 735], "pleas": [1, 51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747], "rais": [1, 5, 9, 10, 18, 20, 23, 26, 28, 32, 33, 39, 41, 43, 46, 78, 108, 197, 232, 282, 306, 309, 312, 316, 321, 342, 352, 380, 381, 386, 388, 390, 391, 392, 399, 405, 412, 421, 440, 441, 448, 472, 490, 492, 502, 504, 510, 514, 539, 541, 543, 546, 548, 552, 553, 554, 556, 557, 584, 586, 600, 609, 610, 611, 613, 615, 616, 617, 618, 620, 646, 647, 648, 654, 659, 667, 669, 674, 675, 685, 686, 688, 702, 705, 714, 716, 718, 722, 723, 726, 732, 733, 736, 737, 740, 742], "github": [1, 702, 704, 708, 709, 711, 714, 716, 721, 722, 724, 725, 727, 735, 749], "add": [1, 8, 9, 17, 24, 26, 31, 32, 40, 47, 51, 52, 299, 307, 309, 351, 482, 510, 541, 543, 546, 551, 556, 598, 644, 672, 684, 687, 702, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 732, 733, 735, 736, 738, 740, 742, 748, 751, 753, 755], "label": [1, 9, 15, 32, 38, 311, 373, 375, 376, 377, 547, 603, 604, 605, 702, 712, 716, 733, 739, 740, 741, 745, 755], "accordingli": [1, 14, 19, 20, 22, 23, 37, 42, 45, 46, 94, 194, 199, 201, 217, 227, 241, 538, 541, 546, 553, 554, 556, 557, 601, 652, 656, 657, 658, 659, 667, 668, 669, 670, 671, 672, 673, 674, 675, 733, 740], "member": [1, 705, 712, 714, 733], "team": [1, 702, 707, 712, 713, 714, 733, 757], "back": [1, 9, 16, 32, 39, 312, 390, 488, 511, 543, 545, 548, 571, 613, 683, 685, 686, 688, 705, 713, 717, 722, 723, 726, 730, 731, 737, 739, 748, 753, 757], "asap": 1, "haven": [1, 755], "found": [1, 14, 16, 20, 26, 32, 37, 39, 43, 52, 155, 321, 385, 435, 540, 550, 577, 584, 617, 636, 656, 682, 708, 712, 713, 714, 717, 718, 719, 720, 722, 723, 725, 727, 730, 732, 733, 757], "ask": [1, 702, 706, 712, 713, 724, 740, 742, 748], "suggest": [1, 712, 713, 714, 719, 722, 727, 731, 733, 735, 736, 737], "someth": [1, 702, 714, 718, 727, 736, 743, 744, 748, 761], "help": [1, 445, 490, 543, 556, 672, 683, 702, 707, 708, 709, 712, 713, 717, 718, 719, 720, 721, 722, 724, 727, 729, 730, 732, 733, 735, 736, 742, 743, 744, 746, 750, 751, 755, 757, 761], "post": [1, 17, 40, 551, 644, 713, 731, 745], "forum": [1, 719], "discord": [1, 51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747], "server": [1, 702, 713, 714, 719, 755], "convert": [2, 4, 5, 8, 26, 27, 28, 31, 49, 77, 78, 95, 104, 105, 147, 148, 149, 150, 161, 169, 173, 193, 233, 312, 317, 380, 381, 382, 425, 488, 505, 507, 508, 509, 511, 538, 539, 540, 541, 543, 546, 550, 602, 626, 637, 638, 693, 696, 702, 706, 712, 717, 718, 730, 731, 733, 735, 737, 740, 748, 750, 753, 754, 761], "written": [2, 10, 702, 704, 713, 716, 717, 725, 727, 728, 732, 733, 736, 740, 742, 745, 748, 753, 755, 759, 761, 762], "choic": [2, 9, 22, 32, 45, 310, 312, 370, 384, 556, 671, 673, 702, 706, 713, 721, 732, 733, 743, 755, 762], "preserv": [2, 9, 10, 11, 26, 32, 33, 34, 52, 309, 310, 312, 321, 344, 369, 380, 381, 382, 391, 392, 441, 472, 533, 543, 544, 548, 610, 735, 745, 748], "logic": [2, 23, 46, 158, 194, 195, 221, 222, 223, 227, 230, 540, 541, 557, 674, 675, 712, 717, 721, 722, 723, 726, 729, 730, 731, 732, 733, 735, 738, 742], "target": [2, 9, 32, 149, 311, 374, 375, 376, 377, 540, 684, 686, 692, 702, 710, 713, 715, 718, 727, 734, 739, 743, 744, 745, 751, 753, 754, 755, 758, 760, 761], "optim": [2, 11, 34, 258, 303, 311, 375, 446, 532, 543, 544, 549, 622, 623, 624, 683, 702, 706, 722, 732, 738, 741, 743, 745, 747, 753, 754, 755, 756, 757, 758, 759, 762], "tool": [2, 702, 703, 706, 713, 714, 724, 727, 741, 745, 747, 748, 753, 754, 755, 756, 758, 761, 762], "make": [2, 693, 702, 705, 706, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 745, 749, 753, 755, 756, 757, 758, 761, 762], "ml": [2, 702, 703, 705, 706, 707, 711, 733, 739, 740, 741, 743, 744, 745, 747, 751, 752, 753, 754, 755, 758, 760, 762], "relat": [2, 201, 541, 702, 708, 711, 712, 713, 714, 726, 733, 735, 736, 737, 738, 747, 758], "project": [2, 545, 571, 684, 702, 704, 705, 706, 709, 712, 713, 714, 717, 718, 719, 735, 744, 747, 748, 751, 753, 755, 758, 762], "independ": [2, 9, 18, 32, 41, 177, 194, 227, 237, 316, 420, 541, 546, 552, 574, 593, 645, 702, 716, 722, 724, 730, 740, 745, 753], "research": [2, 702, 704, 747, 755, 762], "deploi": [2, 702, 721, 750, 753, 754, 755, 757, 761], "system": [2, 546, 593, 702, 713, 714, 718, 721, 722, 748, 753, 755, 758, 760, 762], "build": [2, 20, 26, 52, 554, 656, 657, 658, 659, 684, 685, 686, 702, 705, 707, 708, 713, 715, 721, 722, 729, 731, 739, 741, 744, 745, 748, 750, 753, 755, 757, 760, 761, 762], "block": [2, 310, 362, 702, 714, 720, 722, 726, 729, 735, 739, 741, 745, 748, 750, 760, 762], "neural": [2, 545, 680, 684, 702, 747, 751, 753, 754, 755, 759, 761, 762], "network": [2, 545, 569, 680, 682, 683, 684, 685, 686, 702, 705, 720, 729, 740, 744, 747, 751, 753, 754, 755, 759, 761, 762], "layer": [2, 9, 17, 32, 40, 551, 570, 571, 644, 681, 682, 683, 685, 686, 687, 688, 689, 702, 704, 725, 733, 736, 738, 740, 741, 744, 753, 755, 759, 762], "activ": [2, 9, 10, 13, 24, 32, 36, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 249, 253, 254, 256, 257, 504, 545, 571, 572, 683, 684, 702, 708, 713, 714, 722, 727, 736, 737, 744, 755, 758], "train": [2, 9, 11, 13, 32, 34, 36, 309, 315, 332, 333, 334, 414, 416, 524, 525, 530, 544, 545, 568, 571, 572, 683, 684, 685, 686, 687, 702, 706, 720, 723, 729, 743, 744, 745, 746, 747, 748, 750, 753, 754, 759, 761, 762], "pipelin": [2, 702, 704, 709, 715, 716, 717, 734, 736, 745, 750, 755, 756, 761], "publish": [2, 702, 706, 748], "ex": [2, 721], "haiku": [2, 681, 702, 706, 745, 755], "latest": [2, 8, 31, 109, 197, 207, 208, 223, 321, 434, 539, 541, 546, 548, 556, 592, 621, 671, 684, 702, 712, 713, 714, 716, 718, 721, 725, 736, 748, 749, 760], "integr": [2, 6, 8, 9, 29, 31, 32, 106, 246, 291, 306, 321, 437, 539, 541, 702, 711, 713, 715, 730, 753, 755, 757, 758, 759], "kornia": [2, 702], "advantag": [2, 702, 713, 714, 732, 733, 749, 755], "featur": [2, 9, 32, 309, 323, 324, 325, 332, 333, 334, 683, 684, 702, 712, 713, 714, 717, 718, 721, 728, 736, 738, 743, 748, 755, 756, 757, 761], "tensorflow": [2, 8, 9, 10, 31, 32, 101, 148, 178, 269, 303, 310, 358, 504, 538, 540, 543, 693, 702, 705, 706, 710, 711, 712, 713, 714, 716, 718, 721, 722, 723, 728, 732, 733, 734, 735, 736, 738, 740, 745, 748, 750, 753, 756, 758, 759, 761, 762], "deploy": [2, 713, 754, 757, 758, 761, 762], "definit": [2, 8, 14, 31, 37, 246, 541, 546, 573, 702, 714, 717, 722, 729, 742], "job": [2, 702, 719, 721], "graph": [2, 20, 554, 656, 657, 658, 659, 685, 686, 702, 706, 720, 729, 733, 738, 741, 748, 750, 751, 755, 758], "leverag": [2, 702, 713, 732, 753, 755], "frontend": [2, 489, 543, 702, 711, 714, 715, 721, 722, 726, 731, 735, 738, 739, 741, 750, 755], "link": [2, 702, 708, 712, 713, 714, 719, 721, 722, 727, 733, 751, 753], "swap": [2, 16, 39, 548, 618, 693], "replac": [2, 8, 10, 16, 18, 26, 31, 33, 39, 41, 87, 228, 259, 303, 486, 487, 491, 538, 541, 543, 548, 552, 606, 645, 705, 714, 719, 720, 722, 723, 730, 733, 735, 742, 745, 748, 762], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 712, 713, 714, 716, 717, 719, 720, 721, 733, 754, 755, 756, 757, 758], "debug_mod": 2, "params_v": [2, 702], "must": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 261, 270, 271, 272, 275, 276, 277, 279, 282, 284, 286, 288, 289, 290, 291, 295, 298, 301, 303, 306, 309, 310, 311, 312, 315, 316, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 350, 352, 353, 354, 355, 357, 361, 362, 365, 366, 367, 368, 371, 373, 374, 375, 376, 377, 380, 381, 382, 385, 386, 388, 390, 391, 392, 393, 395, 399, 401, 402, 403, 404, 406, 408, 409, 410, 412, 417, 418, 419, 420, 421, 423, 424, 427, 434, 435, 436, 437, 442, 450, 451, 455, 456, 457, 462, 463, 465, 472, 486, 487, 523, 524, 525, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 688, 690, 704, 706, 708, 711, 712, 713, 714, 716, 717, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 735, 736, 737, 738, 740, 744, 745, 756, 762], "unless": [2, 5, 9, 14, 28, 32, 96, 227, 274, 287, 292, 306, 538, 541, 546, 587, 718, 723, 732, 748], "explicitli": [2, 546, 579, 580, 596, 684, 685, 686, 716, 717, 718, 720, 722, 725, 726, 729, 730, 731, 732, 734, 735, 740, 748, 755], "nn": [2, 94, 538, 702, 729, 734, 738, 745, 756], "kera": [2, 681, 702, 706, 761], "hk": [2, 702, 745], "trainabl": [2, 681, 685, 686, 689, 702, 725, 741, 743, 744], "transpile_kwarg": 2, "It": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 270, 275, 276, 284, 286, 288, 289, 290, 291, 295, 301, 303, 306, 309, 310, 311, 312, 315, 316, 321, 322, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 353, 354, 355, 361, 362, 365, 366, 367, 368, 373, 374, 375, 376, 377, 385, 388, 393, 401, 402, 403, 404, 406, 410, 414, 417, 418, 419, 420, 421, 423, 424, 434, 435, 436, 437, 443, 450, 451, 455, 456, 457, 462, 463, 472, 486, 487, 488, 524, 525, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 593, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 624, 625, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 659, 660, 663, 664, 665, 668, 670, 671, 673, 674, 675, 683, 684, 702, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 730, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 753, 755, 756, 758, 759, 760, 761, 762], "alia": [2, 536, 712, 733], "similar": [2, 236, 541, 545, 571, 684, 704, 710, 712, 713, 720, 721, 722, 723, 726, 727, 729, 730, 731, 733, 734, 735, 736, 743, 748, 751, 752, 753, 754, 761], "instantli": [2, 702], "proper": [2, 702, 712, 733], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 140, 150, 151, 155, 160, 162, 164, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 490, 491, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 637, 638, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 689, 693, 696, 698, 702, 710, 712, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 748, 750, 753, 754, 755, 757, 761, 762], "snippet": [2, 735], "test_fn": [2, 75, 537, 702], "x1": [2, 6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 44, 51, 52, 56, 107, 117, 133, 140, 160, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 236, 243, 248, 259, 274, 277, 282, 283, 284, 286, 288, 293, 297, 303, 306, 312, 321, 394, 434, 444, 447, 539, 540, 541, 543, 546, 553, 555, 574, 581, 584, 589, 593, 596, 597, 600, 655, 662, 690, 702, 716, 722, 724, 726, 728, 732, 733], "effici": [2, 14, 37, 310, 311, 364, 375, 546, 587, 702, 713, 714, 720, 729, 730, 732, 735, 740, 743, 748, 755, 757, 758], "ret": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 365, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 491, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 686, 688, 693, 698, 702, 722, 723, 725, 726, 731, 732, 733, 734, 736, 740, 745], "entir": [2, 9, 22, 23, 26, 32, 33, 45, 46, 167, 197, 199, 239, 240, 309, 312, 321, 332, 333, 334, 400, 437, 468, 540, 541, 556, 557, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 705, 706, 712, 713, 714, 716, 717, 720, 722, 724, 726, 732, 733, 734, 735, 738, 740, 743, 744, 745, 748, 755, 761, 762], "just": [2, 9, 14, 22, 37, 49, 101, 269, 303, 310, 368, 538, 546, 556, 587, 666, 684, 702, 705, 706, 713, 714, 716, 718, 721, 722, 723, 724, 725, 729, 730, 732, 733, 734, 735, 740, 742, 743, 748, 755, 756, 761], "line": [2, 244, 541, 702, 706, 713, 716, 717, 718, 721, 723, 724, 726, 733, 735, 738, 741, 742, 743, 744, 746, 758], "request": [2, 9, 158, 316, 424, 540, 702, 706, 707, 712, 724, 727, 736, 738], "jnp": [2, 702, 722, 723, 726, 728, 732, 736, 740, 745], "pil": [2, 702], "jax_kornia": [2, 702], "url": [2, 702], "http": [2, 8, 31, 34, 101, 109, 197, 207, 208, 223, 269, 303, 321, 434, 524, 525, 538, 539, 541, 544, 546, 548, 556, 592, 621, 671, 702, 708, 709, 713, 714, 716, 719, 721, 722, 725, 749], "cocodataset": [2, 702], "org": [2, 8, 31, 34, 101, 109, 197, 207, 208, 223, 269, 303, 321, 434, 524, 525, 538, 539, 541, 544, 546, 548, 556, 592, 621, 671, 702, 725], "train2017": [2, 702], "000000000034": [2, 702], "jpg": [2, 702], "raw_img": [2, 702], "stream": [2, 7, 30, 168, 540, 702, 759], "raw": [2, 26, 702, 725, 756], "format": [2, 7, 10, 22, 25, 26, 27, 30, 67, 117, 151, 309, 320, 350, 430, 455, 535, 539, 540, 543, 545, 556, 557, 558, 559, 561, 562, 563, 565, 566, 666, 676, 677, 702, 714, 715, 721, 722, 723, 724, 725, 726, 733, 736, 740, 742, 743, 751, 753, 755, 756], "img": [2, 702, 743], "transpos": [2, 9, 13, 14, 26, 32, 36, 37, 51, 310, 353, 366, 368, 433, 545, 546, 558, 560, 562, 564, 565, 566, 584, 588, 590, 596, 684, 702, 732, 742, 745], "expand_dim": [2, 16, 39, 545, 548, 567, 702, 733, 740, 743], "255": [2, 13, 32, 36, 188, 541, 567, 702], "version": [2, 3, 9, 32, 49, 59, 245, 278, 280, 306, 321, 439, 442, 523, 541, 543, 546, 579, 580, 693, 702, 704, 705, 706, 713, 714, 719, 721, 722, 725, 732, 734, 740, 761, 762], "enhanc": [2, 702], "5": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 76, 77, 78, 89, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 107, 108, 109, 113, 117, 119, 127, 129, 134, 151, 160, 165, 168, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 273, 276, 278, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 317, 319, 321, 327, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 345, 346, 347, 348, 350, 351, 352, 356, 357, 359, 360, 369, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 390, 391, 394, 395, 396, 399, 400, 405, 406, 407, 408, 409, 412, 413, 418, 419, 422, 424, 425, 427, 432, 434, 435, 436, 437, 438, 439, 441, 442, 448, 449, 450, 451, 454, 455, 456, 457, 459, 462, 463, 465, 468, 470, 471, 472, 486, 487, 491, 501, 502, 503, 504, 506, 510, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 588, 589, 590, 592, 594, 595, 596, 598, 599, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 696, 702, 712, 713, 714, 716, 718, 720, 721, 722, 724, 726, 728, 731, 734, 735, 742, 743, 744], "last": [2, 5, 9, 13, 14, 15, 16, 19, 21, 22, 23, 26, 28, 32, 36, 37, 38, 39, 44, 45, 46, 51, 92, 93, 96, 150, 259, 279, 303, 306, 309, 311, 312, 319, 321, 337, 342, 352, 375, 390, 400, 402, 427, 435, 436, 538, 540, 545, 546, 547, 548, 553, 555, 556, 557, 570, 571, 574, 577, 589, 598, 600, 604, 605, 607, 610, 613, 614, 615, 617, 651, 652, 660, 662, 663, 664, 665, 674, 675, 684, 693, 702, 706, 714, 716, 718, 719, 722, 724, 732, 734, 735, 738, 740, 748, 755], "least": [2, 8, 9, 14, 31, 32, 194, 212, 227, 309, 312, 321, 336, 341, 380, 381, 382, 389, 391, 434, 541, 546, 553, 584, 654, 702, 714, 717, 721, 722, 723, 724, 729, 732, 735], "support": [2, 7, 9, 10, 14, 30, 32, 33, 37, 101, 120, 124, 146, 153, 168, 177, 194, 201, 222, 223, 227, 237, 252, 269, 285, 301, 303, 306, 309, 310, 344, 357, 448, 460, 469, 472, 473, 490, 504, 538, 539, 540, 541, 543, 545, 546, 569, 578, 579, 580, 583, 585, 594, 601, 688, 693, 696, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 723, 724, 725, 728, 729, 731, 732, 734, 735, 736, 738, 739, 740, 742, 743, 745, 749, 750, 752, 754, 755, 758, 760, 761, 762], "timm": [2, 702], "pretrain": [2, 702], "mlp_encod": [2, 702], "create_model": [2, 702], "mixer_b16_224": [2, 702], "num_class": [2, 702, 745], "randn": [2, 702], "224": [2, 702], "encod": [2, 10, 15, 33, 38, 459, 543, 547, 603, 702, 705, 743], "__init__": [2, 26, 48, 49, 50, 51, 52, 54, 55, 680, 683, 684, 685, 686, 687, 688, 689, 692, 693, 696, 697, 700, 702, 712, 717, 718, 722, 726, 733, 736, 740, 742, 743, 744, 745], "self": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 545, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 688, 696, 702, 714, 717, 720, 726, 733, 734, 740, 742, 743, 744, 745], "1000": [2, 5, 28, 93, 538, 702, 743], "super": [2, 9, 32, 310, 358, 702, 726, 740, 743, 744, 745], "fc": [2, 702, 744], "linear": [2, 9, 10, 13, 25, 32, 33, 36, 59, 61, 63, 64, 67, 253, 254, 256, 257, 289, 301, 306, 309, 312, 321, 344, 400, 442, 459, 482, 535, 543, 545, 550, 571, 593, 632, 683, 684, 702, 720, 725, 729, 730, 732, 733, 735, 738, 740, 743, 744, 745, 753, 754, 755, 758], "output_s": [2, 9, 32, 309, 323, 324, 325, 684, 702], "with_bia": [2, 684, 702, 744], "__call__": [2, 684, 685, 686, 702], "_forward_classifi": [2, 702], "standard": [2, 8, 14, 17, 18, 22, 31, 40, 41, 45, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 310, 321, 371, 434, 523, 538, 539, 541, 543, 546, 548, 551, 552, 553, 554, 555, 556, 557, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 607, 609, 610, 611, 613, 614, 616, 617, 621, 644, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 687, 696, 702, 703, 715, 716, 717, 720, 722, 725, 728, 732, 735, 736, 748, 751, 753, 754, 757, 758, 760], "rng_kei": [2, 702], "random": [2, 9, 13, 26, 32, 36, 267, 268, 303, 310, 360, 369, 372, 420, 421, 422, 423, 424, 545, 568, 645, 646, 647, 648, 649, 650, 683, 696, 702, 712, 723, 734, 735, 736, 745, 747, 755], "prngkei": [2, 702, 745], "42": [2, 3, 18, 25, 34, 41, 67, 188, 309, 330, 340, 524, 528, 535, 541, 544, 546, 551, 552, 556, 585, 589, 644, 645, 646, 647, 648, 649, 664, 666, 702, 740, 745], "uniform": [2, 9, 18, 32, 41, 321, 437, 552, 645, 646, 648, 683, 702, 744, 762], "kei": [2, 4, 9, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 319, 332, 333, 334, 373, 374, 376, 377, 385, 406, 409, 414, 416, 417, 418, 419, 421, 427, 434, 435, 436, 437, 444, 445, 447, 448, 450, 451, 452, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 543, 545, 549, 550, 559, 560, 561, 562, 568, 569, 571, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 622, 623, 628, 634, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 681, 682, 684, 688, 702, 719, 720, 721, 729, 732, 733, 734, 735, 743, 749, 755, 758, 762], "dtype": [2, 5, 6, 9, 10, 13, 14, 18, 19, 22, 28, 29, 31, 32, 33, 36, 37, 41, 42, 45, 51, 54, 55, 56, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 162, 228, 258, 259, 260, 261, 262, 263, 264, 267, 268, 273, 276, 278, 292, 303, 306, 309, 316, 321, 330, 340, 352, 420, 421, 422, 423, 424, 434, 435, 436, 437, 440, 442, 459, 460, 461, 463, 472, 481, 508, 538, 539, 540, 543, 545, 546, 549, 550, 552, 553, 555, 556, 557, 561, 568, 585, 601, 624, 625, 646, 647, 648, 651, 652, 653, 662, 663, 664, 665, 670, 672, 674, 675, 683, 684, 686, 687, 689, 690, 702, 710, 716, 718, 722, 723, 724, 726, 729, 730, 732, 733, 734, 735, 736, 740, 742], "float32": [2, 5, 6, 10, 13, 28, 29, 33, 36, 45, 93, 96, 98, 103, 104, 105, 109, 113, 114, 117, 118, 119, 120, 123, 126, 127, 129, 134, 137, 143, 207, 234, 273, 282, 303, 306, 309, 321, 330, 340, 352, 437, 472, 508, 538, 539, 541, 543, 545, 546, 549, 561, 563, 564, 567, 592, 594, 595, 601, 624, 702, 722, 724, 734, 735, 736], "forward_classifi": [2, 702], "param": [2, 26, 33, 52, 445, 462, 463, 543, 690, 702, 745], "init": [2, 9, 32, 310, 360, 369, 372, 683, 702, 716, 745], "rng": [2, 702, 745], "mention": [2, 705, 712, 713, 714, 717, 718, 724, 728, 729, 732, 733, 735, 738, 755], "abov": [2, 5, 8, 9, 14, 18, 25, 31, 32, 37, 41, 67, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 259, 269, 270, 276, 279, 301, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 342, 345, 346, 347, 348, 352, 357, 358, 400, 434, 437, 462, 466, 468, 470, 472, 509, 533, 535, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 646, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 702, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 738, 740, 742, 743, 744, 745, 755, 760], "exactli": [2, 244, 541, 704, 706, 720, 721, 722, 723, 724, 726, 735, 738], "wai": [2, 49, 702, 704, 705, 709, 711, 713, 716, 717, 718, 719, 721, 722, 723, 732, 733, 734, 735, 738, 742, 743, 744, 745, 748, 749, 757, 761, 762], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 735], "rough": 2, "edg": [2, 9, 16, 32, 39, 309, 312, 321, 344, 400, 437, 548, 606, 608, 621, 716, 735, 755, 757, 761], "These": [2, 9, 32, 310, 312, 321, 357, 399, 434, 545, 546, 571, 578, 579, 702, 704, 705, 706, 708, 711, 712, 713, 714, 716, 720, 722, 724, 725, 728, 729, 732, 733, 735, 740, 741, 743, 744, 745, 748, 750, 755, 759, 761, 762], "subclass": [2, 730, 733, 738], "within": [2, 4, 9, 32, 76, 274, 287, 306, 309, 345, 346, 347, 380, 381, 382, 538, 552, 648, 686, 702, 712, 714, 717, 721, 722, 733, 734, 735, 744, 748, 751, 752, 756], "sequenti": [2, 702, 719, 720, 744], "more": [2, 3, 8, 9, 14, 16, 20, 25, 31, 32, 37, 39, 43, 59, 61, 64, 67, 76, 107, 199, 201, 217, 232, 245, 299, 307, 310, 311, 312, 353, 354, 364, 367, 375, 380, 381, 382, 385, 406, 490, 535, 538, 539, 541, 543, 546, 548, 554, 577, 583, 584, 587, 590, 592, 594, 601, 610, 617, 656, 657, 658, 659, 680, 702, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 753, 754, 755, 756, 757, 758, 761, 762], "complex": [2, 3, 8, 9, 14, 25, 29, 31, 32, 37, 59, 61, 64, 67, 97, 98, 112, 126, 135, 141, 174, 175, 176, 177, 178, 179, 180, 183, 191, 192, 194, 195, 197, 199, 207, 208, 209, 210, 211, 215, 216, 217, 218, 227, 229, 232, 234, 237, 238, 239, 240, 241, 244, 245, 276, 306, 309, 310, 331, 342, 352, 353, 357, 358, 359, 366, 368, 501, 502, 535, 538, 539, 541, 543, 546, 553, 556, 578, 579, 580, 585, 592, 594, 596, 598, 601, 654, 670, 672, 680, 708, 712, 719, 722, 724, 730, 733, 735, 736, 738, 743, 744, 745, 748, 750, 751, 753, 755, 757, 761, 762], "should": [2, 3, 5, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 31, 32, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 49, 51, 52, 62, 66, 75, 94, 96, 99, 100, 108, 133, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 259, 270, 284, 288, 289, 290, 291, 295, 300, 301, 303, 306, 308, 309, 310, 311, 312, 316, 321, 332, 333, 334, 336, 341, 360, 369, 372, 376, 399, 400, 420, 421, 434, 435, 436, 449, 472, 523, 525, 528, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 565, 566, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 596, 598, 600, 601, 613, 629, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 670, 672, 673, 680, 681, 682, 683, 684, 686, 687, 688, 689, 696, 703, 705, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 751, 752, 755, 757, 762], "util": [2, 9, 32, 152, 310, 370, 540, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 708, 713, 719, 723, 726, 729, 732, 735, 736, 740, 753, 761, 762], "requir": [2, 8, 9, 26, 31, 32, 228, 241, 245, 310, 312, 357, 358, 400, 541, 546, 548, 578, 579, 580, 617, 681, 708, 709, 712, 713, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 733, 734, 735, 736, 738, 740, 742, 748, 755, 761], "state": [2, 13, 36, 141, 142, 143, 144, 145, 227, 511, 513, 516, 518, 519, 539, 541, 543, 545, 570, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 702, 705, 710, 713, 719, 722, 723, 725, 726, 727, 728, 733, 735, 739, 740, 741, 743, 747, 761, 762], "mean": [2, 9, 10, 13, 15, 16, 18, 22, 24, 26, 28, 32, 33, 36, 38, 39, 41, 45, 47, 49, 89, 167, 278, 306, 309, 310, 311, 312, 315, 316, 321, 337, 342, 355, 364, 373, 374, 375, 376, 377, 385, 390, 400, 414, 416, 421, 440, 441, 456, 526, 527, 529, 534, 538, 540, 543, 544, 545, 546, 547, 548, 549, 550, 552, 556, 560, 562, 563, 564, 567, 568, 576, 603, 613, 622, 623, 624, 631, 646, 647, 683, 684, 687, 702, 713, 714, 715, 716, 718, 720, 722, 723, 724, 729, 731, 732, 733, 735, 736, 738, 740, 742, 743, 744, 745, 747, 748, 750, 752, 755], "transformed_with_st": 2, "map": [2, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 306, 309, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 523, 528, 533, 543, 550, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 632, 633, 637, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 717, 720, 722, 728, 729, 733, 735, 736, 743, 747, 748, 750, 756], "convolut": [2, 9, 13, 32, 36, 309, 329, 347, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684, 753, 755], "c": [2, 5, 9, 10, 11, 13, 16, 22, 28, 29, 31, 32, 33, 34, 36, 37, 39, 43, 45, 49, 65, 77, 78, 93, 96, 119, 122, 177, 188, 194, 195, 215, 216, 227, 230, 238, 245, 309, 310, 312, 315, 321, 323, 324, 325, 336, 341, 353, 354, 356, 357, 359, 367, 380, 381, 382, 390, 414, 415, 416, 436, 447, 455, 456, 457, 466, 470, 471, 509, 524, 525, 528, 530, 531, 532, 535, 538, 539, 541, 543, 544, 545, 546, 548, 550, 553, 554, 556, 559, 560, 561, 562, 563, 564, 578, 580, 582, 613, 617, 625, 628, 632, 633, 634, 636, 637, 642, 643, 654, 659, 665, 666, 671, 673, 687, 696, 703, 705, 706, 707, 713, 715, 718, 719, 720, 724, 729, 731, 739, 740, 741, 743, 748, 750, 751, 755, 759, 760, 762], "h": [2, 9, 10, 13, 32, 33, 36, 309, 328, 329, 346, 347, 455, 457, 543, 545, 550, 558, 561, 562, 563, 564, 565, 566, 567, 628, 632, 634, 637, 642, 715, 719, 720, 721, 751], "w": [2, 9, 10, 11, 13, 26, 31, 32, 33, 34, 36, 49, 221, 285, 300, 306, 308, 309, 310, 327, 328, 329, 331, 345, 346, 347, 348, 359, 372, 433, 455, 457, 501, 524, 525, 526, 528, 530, 531, 532, 543, 544, 545, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 631, 702, 715, 731, 740, 743, 744], "bigger": 2, "permut": [2, 16, 39, 51, 319, 426, 548, 611, 618], "infer": [2, 5, 9, 10, 13, 16, 28, 32, 33, 36, 39, 76, 78, 86, 90, 91, 95, 98, 103, 112, 113, 114, 115, 116, 258, 259, 316, 422, 466, 500, 538, 539, 543, 545, 548, 568, 613, 693, 715, 718, 722, 723, 735, 740, 745, 753, 754, 757, 759], "correct": [2, 22, 45, 140, 310, 370, 539, 548, 556, 606, 671, 673, 702, 712, 714, 715, 720, 721, 722, 723, 726, 728, 729, 732, 734, 735], "mind": [2, 712, 717, 718, 720, 735, 749], "well": [2, 33, 311, 375, 468, 543, 546, 593, 702, 709, 712, 714, 719, 721, 722, 726, 732, 733, 734, 735, 744, 745, 747, 754, 755, 756, 760], "hf": 2, "tf_model": 2, "tf_input": 2, "data_class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 328, 329, 455, 459, 594, 619], "_arraywithactiv": [3, 51], "base": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 56, 93, 101, 133, 197, 198, 215, 216, 217, 218, 232, 269, 275, 278, 282, 289, 303, 306, 309, 310, 319, 351, 370, 426, 492, 502, 514, 538, 539, 541, 543, 546, 548, 554, 556, 585, 609, 656, 657, 658, 659, 666, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 697, 700, 702, 713, 714, 716, 720, 721, 722, 726, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 747, 755, 760, 762], "abc": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 55, 458, 543, 550, 643, 682, 683, 688, 696, 742], "_abc_impl": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "_abc": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "_abc_data": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "gelu": [3, 25, 535, 680, 702], "approxim": [3, 8, 9, 14, 25, 31, 32, 37, 49, 59, 175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 201, 215, 216, 217, 218, 232, 239, 240, 244, 245, 246, 285, 295, 306, 311, 375, 535, 541, 546, 587, 590, 680, 725, 733], "complex_mod": [3, 8, 25, 31, 59, 61, 64, 67, 245, 535, 541, 680, 730], "variant": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 590, 591, 592, 594, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 717, 724, 725, 738], "simpli": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 524, 525, 528, 530, 531, 532, 533, 541, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 590, 591, 592, 594, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 702, 712, 713, 714, 717, 718, 719, 721, 722, 723, 724, 725, 728, 729, 732, 733, 734, 735, 738, 740, 744, 745, 748, 750, 756, 761], "docstr": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 321, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 342, 345, 346, 347, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 486, 487, 501, 502, 503, 504, 506, 508, 509, 522, 523, 524, 525, 528, 530, 531, 532, 533, 538, 539, 541, 543, 546, 548, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 711, 712, 715, 719, 727, 728, 729, 730, 733, 736], "liter": [3, 8, 9, 14, 25, 31, 32, 37, 59, 61, 64, 67, 245, 309, 310, 312, 330, 340, 344, 360, 364, 369, 372, 400, 535, 541, 546, 555, 585, 601, 662, 680, 738], "split": [3, 8, 9, 16, 25, 26, 31, 32, 39, 59, 61, 64, 67, 165, 166, 167, 245, 284, 291, 312, 386, 395, 412, 455, 482, 535, 540, 541, 543, 545, 548, 558, 565, 566, 618, 680, 684, 702, 707, 714, 721, 739, 740, 748, 762], "magnitud": [3, 8, 25, 31, 59, 61, 64, 67, 174, 177, 194, 201, 227, 245, 535, 541, 546, 594, 595, 680], "how": [3, 8, 9, 25, 31, 32, 59, 61, 64, 67, 194, 227, 245, 312, 384, 405, 408, 535, 541, 680, 682, 683, 684, 685, 686, 702, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 745, 747, 748, 751, 755], "handl": [3, 7, 8, 9, 25, 26, 30, 31, 32, 52, 59, 61, 64, 67, 147, 148, 149, 150, 151, 155, 160, 161, 169, 173, 179, 191, 216, 232, 238, 239, 244, 245, 312, 384, 405, 408, 535, 540, 541, 546, 556, 598, 670, 672, 680, 688, 707, 715, 720, 721, 722, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 744, 752, 762], "data": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 59, 61, 64, 67, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 146, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 258, 259, 260, 261, 262, 263, 264, 270, 271, 272, 273, 275, 290, 295, 301, 303, 306, 309, 310, 312, 316, 320, 321, 332, 333, 334, 350, 355, 357, 371, 384, 405, 408, 420, 421, 422, 423, 424, 430, 434, 435, 436, 440, 442, 459, 472, 474, 475, 478, 504, 535, 538, 540, 541, 543, 545, 546, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 607, 610, 611, 613, 614, 616, 617, 621, 629, 646, 647, 648, 650, 651, 652, 654, 655, 660, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 686, 690, 702, 703, 705, 713, 715, 716, 717, 718, 719, 720, 723, 725, 728, 729, 730, 732, 734, 736, 738, 740, 742, 750, 755, 756, 757, 759, 760, 761], "see": [3, 6, 8, 14, 19, 20, 22, 23, 25, 31, 32, 37, 42, 45, 46, 49, 51, 52, 59, 61, 64, 67, 76, 88, 92, 101, 108, 127, 134, 177, 182, 184, 186, 187, 188, 189, 194, 195, 199, 201, 205, 206, 213, 214, 217, 219, 221, 223, 224, 227, 230, 232, 236, 243, 245, 248, 269, 303, 310, 354, 535, 538, 539, 541, 546, 553, 554, 556, 557, 574, 587, 590, 593, 600, 601, 652, 656, 657, 658, 659, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 702, 704, 707, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 727, 728, 729, 733, 734, 735, 738, 740, 742, 743, 747, 748, 751], "func_wrapp": [3, 8, 25, 31, 59, 61, 64, 67, 245, 535, 541, 680, 723, 733, 737], "handle_complex_input": [3, 8, 25, 31, 59, 61, 64, 67, 245, 535, 541, 680, 730], "detail": [3, 8, 14, 16, 20, 25, 31, 32, 37, 39, 43, 59, 61, 64, 67, 88, 245, 310, 354, 385, 535, 538, 541, 554, 577, 584, 590, 594, 617, 656, 657, 658, 659, 680, 702, 712, 714, 716, 718, 719, 720, 721, 727, 728, 729, 730, 733, 734, 735, 736, 737, 740, 742, 743, 744, 757, 761], "write": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 270, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 288, 289, 290, 291, 294, 295, 296, 301, 303, 306, 309, 310, 311, 312, 315, 316, 317, 319, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 361, 362, 365, 366, 367, 368, 373, 374, 375, 376, 377, 385, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 450, 451, 455, 456, 457, 462, 463, 472, 486, 487, 524, 525, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 625, 644, 645, 646, 647, 648, 650, 652, 653, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 702, 706, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 726, 729, 732, 734, 736, 740, 742, 745, 755, 762], "broadcast": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 270, 275, 276, 277, 278, 282, 284, 286, 288, 289, 290, 291, 295, 301, 303, 306, 309, 310, 311, 312, 315, 316, 321, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 345, 346, 347, 350, 353, 354, 355, 361, 362, 365, 366, 368, 373, 374, 375, 376, 377, 383, 385, 388, 393, 401, 402, 403, 404, 406, 409, 410, 414, 417, 418, 419, 420, 421, 423, 424, 434, 435, 436, 437, 440, 441, 442, 450, 451, 455, 456, 457, 462, 463, 472, 486, 487, 524, 525, 528, 530, 531, 532, 533, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 593, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 625, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 659, 660, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 696, 720, 722, 724, 725, 726, 735, 736, 740], "element": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 84, 90, 91, 99, 100, 101, 117, 119, 122, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 269, 270, 271, 272, 274, 275, 276, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 303, 306, 309, 310, 312, 321, 322, 332, 333, 334, 337, 342, 345, 346, 347, 351, 352, 356, 357, 358, 380, 381, 382, 390, 391, 392, 394, 397, 407, 409, 411, 432, 433, 435, 436, 437, 438, 439, 440, 443, 447, 450, 451, 462, 463, 479, 481, 501, 502, 504, 508, 509, 535, 538, 541, 543, 545, 546, 548, 550, 552, 553, 554, 555, 556, 557, 568, 574, 576, 578, 579, 584, 589, 591, 592, 594, 598, 606, 609, 610, 611, 612, 613, 614, 615, 616, 625, 628, 634, 645, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 725, 734, 735, 738, 740, 759], "wise": [3, 8, 9, 14, 25, 31, 32, 37, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 235, 236, 243, 248, 249, 251, 253, 254, 256, 257, 274, 275, 280, 281, 282, 283, 286, 287, 288, 289, 293, 294, 297, 298, 301, 306, 309, 310, 312, 332, 333, 334, 356, 361, 387, 394, 396, 397, 413, 535, 541, 548, 574, 606, 688, 738], "exampl": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 327, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 365, 367, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 478, 479, 481, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 693, 696, 700, 706, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 729, 730, 732, 733, 735, 736, 740, 742, 743, 744, 745, 747, 748, 752, 753, 756, 758, 761, 762], "6": [3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 21, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 61, 66, 72, 77, 78, 90, 91, 94, 95, 98, 103, 107, 108, 109, 117, 119, 173, 174, 176, 177, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 276, 278, 285, 286, 288, 289, 290, 292, 299, 301, 303, 306, 307, 309, 310, 311, 312, 317, 319, 321, 330, 332, 335, 336, 340, 341, 345, 348, 351, 352, 356, 359, 362, 374, 376, 377, 378, 380, 381, 382, 386, 390, 391, 395, 396, 399, 400, 405, 406, 408, 412, 413, 422, 424, 425, 427, 432, 434, 435, 436, 437, 439, 441, 442, 448, 450, 451, 454, 455, 456, 462, 463, 470, 471, 472, 487, 501, 502, 503, 504, 506, 510, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 574, 575, 576, 577, 579, 580, 581, 584, 585, 586, 589, 592, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 625, 626, 636, 637, 643, 644, 645, 646, 647, 648, 650, 651, 652, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 702, 710, 713, 716, 718, 720, 721, 724, 731, 735, 738, 740, 742, 743, 744], "138": [3, 59, 535], "165": [3, 59, 535, 545, 569], "hardswish": [3, 25, 535, 680], "leaky_relu": [3, 25, 535], "alpha": [3, 8, 9, 25, 31, 32, 56, 61, 177, 243, 249, 260, 301, 303, 310, 316, 358, 421, 422, 423, 535, 541, 680, 728, 733, 734], "float": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 45, 49, 51, 61, 67, 76, 77, 78, 85, 87, 89, 90, 91, 92, 93, 97, 98, 102, 106, 110, 114, 119, 123, 127, 133, 134, 137, 143, 152, 161, 165, 166, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 258, 259, 260, 261, 263, 264, 274, 275, 281, 282, 287, 289, 290, 293, 294, 295, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 321, 332, 333, 334, 351, 354, 357, 358, 369, 371, 372, 373, 376, 389, 407, 414, 415, 416, 419, 420, 421, 422, 423, 424, 434, 435, 436, 437, 442, 449, 450, 451, 459, 468, 492, 493, 496, 501, 502, 522, 524, 525, 528, 530, 531, 532, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 568, 571, 572, 573, 575, 578, 579, 580, 582, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 598, 601, 603, 604, 605, 622, 623, 624, 631, 644, 647, 648, 654, 656, 657, 658, 659, 664, 665, 667, 668, 669, 670, 671, 672, 673, 680, 683, 684, 687, 688, 716, 720, 722, 725, 726, 728, 729, 731, 732, 734, 735, 736, 738, 740, 742, 744], "slope": [3, 9, 25, 32, 61, 249, 252, 301, 535, 680], "neg": [3, 8, 9, 14, 16, 18, 23, 25, 31, 32, 37, 39, 41, 46, 49, 61, 64, 67, 76, 87, 89, 101, 194, 201, 208, 209, 227, 228, 232, 236, 241, 259, 269, 271, 303, 310, 316, 355, 360, 364, 424, 535, 538, 541, 546, 548, 552, 557, 574, 576, 594, 598, 600, 601, 607, 609, 610, 614, 647, 674, 675, 680, 720, 732], "section": [3, 9, 20, 32, 61, 309, 312, 342, 352, 386, 395, 412, 554, 656, 657, 658, 659, 702, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 743, 744, 751, 758, 761], "leaki": [3, 25, 61, 535, 680], "relu": [3, 9, 24, 25, 32, 61, 252, 253, 257, 301, 535, 680, 702, 734, 743, 744], "39": [3, 8, 9, 14, 18, 25, 31, 32, 34, 37, 41, 61, 180, 215, 217, 219, 249, 301, 309, 321, 328, 330, 347, 350, 435, 524, 535, 541, 544, 546, 556, 581, 589, 647, 666], "85": [3, 9, 18, 25, 31, 32, 34, 36, 41, 52, 61, 179, 188, 189, 233, 249, 255, 301, 321, 435, 501, 528, 535, 541, 543, 544, 545, 552, 569, 646, 647, 648], "17": [3, 9, 14, 25, 31, 32, 33, 34, 36, 37, 41, 52, 61, 62, 93, 177, 194, 219, 227, 258, 299, 303, 309, 312, 327, 328, 336, 337, 340, 341, 345, 346, 348, 351, 390, 456, 471, 524, 526, 535, 538, 541, 543, 544, 545, 546, 550, 552, 559, 568, 569, 577, 581, 633, 646, 647, 648, 650, 720], "log_softmax": [3, 25, 535], "axi": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 62, 66, 92, 93, 96, 167, 241, 246, 278, 279, 285, 292, 306, 309, 311, 312, 315, 319, 321, 330, 331, 337, 340, 342, 352, 375, 379, 385, 386, 387, 390, 391, 392, 395, 400, 405, 406, 408, 409, 411, 412, 417, 418, 419, 427, 432, 435, 436, 437, 439, 440, 441, 442, 455, 462, 523, 535, 538, 540, 541, 543, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 567, 574, 577, 585, 600, 601, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 650, 651, 652, 656, 660, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 684, 685, 690, 720, 722, 724, 726, 728, 729, 732, 733, 735, 738, 740, 742, 745, 747], "ax": [3, 9, 14, 16, 19, 22, 23, 25, 32, 37, 39, 42, 45, 46, 51, 55, 62, 66, 167, 278, 279, 292, 299, 306, 307, 309, 312, 315, 321, 337, 342, 352, 399, 400, 406, 417, 439, 440, 441, 442, 455, 523, 540, 543, 546, 548, 553, 556, 557, 574, 585, 593, 596, 597, 601, 608, 610, 611, 614, 616, 618, 621, 651, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 722, 724, 735, 736, 740, 742], "along": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 44, 45, 46, 49, 62, 66, 72, 92, 93, 167, 241, 244, 246, 271, 272, 278, 279, 292, 299, 303, 306, 307, 309, 310, 311, 312, 315, 321, 330, 336, 337, 340, 341, 342, 352, 369, 375, 385, 386, 387, 391, 392, 400, 405, 409, 417, 418, 419, 435, 436, 437, 439, 440, 441, 442, 455, 462, 537, 538, 540, 541, 543, 546, 547, 548, 549, 552, 553, 555, 556, 557, 574, 589, 598, 600, 601, 603, 604, 605, 607, 610, 611, 612, 614, 615, 617, 619, 620, 622, 623, 624, 650, 651, 652, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 702, 712, 715, 724, 732, 736, 738, 740, 755], "98": [3, 9, 11, 18, 25, 31, 34, 41, 62, 189, 192, 240, 296, 306, 528, 535, 541, 544, 546, 550, 553, 556, 589, 626, 637, 646, 648, 655, 666], "37": [3, 8, 9, 25, 31, 32, 36, 51, 62, 180, 188, 237, 240, 244, 317, 351, 425, 541, 545, 546, 550, 552, 569, 586, 633, 647, 721], "35": [3, 13, 14, 25, 31, 32, 36, 37, 41, 62, 182, 241, 309, 330, 340, 541, 545, 546, 553, 556, 569, 574, 581, 647, 655, 666], "0719": [3, 25, 62], "62": [3, 25, 31, 41, 62, 212, 240, 541, 551, 552, 644, 646, 648], "221": [3, 62], "7": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 61, 62, 63, 64, 76, 77, 78, 92, 95, 96, 113, 119, 122, 152, 174, 177, 180, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 211, 212, 213, 214, 215, 216, 217, 219, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 237, 238, 239, 241, 244, 245, 247, 248, 249, 251, 253, 254, 256, 257, 258, 259, 261, 264, 274, 276, 278, 279, 285, 286, 287, 289, 291, 292, 299, 301, 303, 306, 307, 309, 310, 311, 312, 317, 321, 327, 328, 329, 330, 335, 336, 340, 341, 345, 348, 350, 351, 352, 356, 365, 373, 374, 375, 376, 377, 380, 381, 382, 386, 390, 395, 396, 399, 400, 405, 406, 408, 412, 413, 422, 424, 425, 432, 435, 436, 438, 439, 442, 448, 450, 451, 455, 456, 459, 470, 471, 472, 479, 486, 487, 501, 504, 524, 525, 527, 528, 529, 530, 532, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 559, 560, 562, 564, 567, 568, 569, 572, 574, 575, 576, 577, 580, 581, 584, 586, 589, 592, 594, 595, 596, 598, 599, 603, 604, 605, 606, 609, 610, 615, 617, 618, 620, 625, 626, 633, 637, 644, 645, 646, 647, 648, 650, 655, 656, 658, 660, 661, 663, 664, 665, 666, 668, 670, 672, 673, 713, 714, 718, 720, 721, 724, 729, 732, 735], "82": [3, 8, 34, 41, 62, 180, 321, 435, 524, 544, 647, 648, 710], "mish": [3, 25, 535, 680], "30340147": [3, 63, 535], "86509842": [3, 25, 63, 535], "sigmoid": [3, 9, 25, 32, 251, 301, 316, 420, 535, 680, 740, 743, 744], "269": [3, 65], "731": [3, 65], "881": [3, 8, 31, 65, 180, 193, 233, 541], "softmax": [3, 13, 24, 25, 36, 535, 545, 571, 572, 680, 702], "422": [3, 66, 535], "155": [3, 36, 66, 535, 545, 569], "softplu": [3, 25, 535, 680, 738], "beta": [3, 9, 17, 25, 32, 40, 67, 260, 263, 264, 303, 310, 311, 316, 358, 376, 422, 423, 535, 551, 644, 680, 738], "threshold": [3, 8, 9, 25, 31, 32, 67, 225, 226, 257, 275, 301, 306, 311, 312, 373, 376, 407, 535, 541, 680, 738], "3461": [3, 25, 67, 535], "6491": [3, 25, 67, 535], "535": [3, 25, 67, 535, 726], "22": [3, 8, 9, 10, 18, 22, 25, 32, 33, 36, 41, 62, 67, 189, 197, 309, 310, 312, 317, 321, 327, 328, 330, 345, 346, 347, 348, 351, 356, 384, 425, 435, 456, 487, 522, 535, 541, 545, 546, 550, 553, 556, 568, 569, 577, 582, 589, 633, 643, 646, 647, 648, 655, 665, 666, 713, 720, 726], "09": [3, 8, 34, 41, 67, 232, 242, 524, 535, 541, 544, 647], "31": [3, 8, 9, 31, 32, 33, 36, 41, 62, 67, 93, 188, 219, 227, 309, 312, 321, 329, 330, 384, 435, 450, 535, 538, 541, 543, 647, 648, 743], "55": [3, 32, 41, 67, 188, 247, 321, 435, 470, 541, 543, 546, 552, 556, 582, 589, 647, 648, 666, 716], "13": [3, 8, 9, 13, 14, 18, 22, 31, 32, 33, 34, 36, 39, 41, 45, 51, 67, 122, 152, 177, 189, 192, 201, 212, 232, 241, 285, 292, 299, 306, 309, 312, 329, 330, 340, 345, 351, 384, 386, 390, 395, 412, 424, 435, 436, 450, 451, 455, 456, 471, 493, 501, 524, 535, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 553, 554, 556, 559, 560, 568, 569, 577, 581, 589, 595, 620, 624, 637, 646, 647, 648, 655, 656, 664, 665, 666, 720, 724, 733], "collect": [4, 26, 27, 535, 540, 543, 544, 545, 547, 550, 551, 552, 638, 680, 684, 685, 687, 688, 713, 721, 726, 730, 731, 734, 735, 747, 753, 755, 758], "accept": [4, 5, 8, 9, 14, 27, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 280, 300, 303, 306, 308, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 441, 448, 456, 457, 462, 466, 468, 470, 472, 486, 504, 509, 533, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 702, 712, 713, 714, 717, 720, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 742, 750, 753], "_to_ivi": 4, "_to_n": 4, "inplac": [4, 10, 26, 33, 49, 446, 448, 469, 472, 473, 490, 491, 543, 550, 632, 633, 637, 642, 643, 681, 688, 715, 717, 724, 728, 730, 733, 738, 742, 744], "to_ignor": [4, 24, 47, 550, 636, 637], "args_to_ivi": 4, "include_deriv": [4, 27, 550, 626, 637], "form": [4, 5, 9, 14, 26, 28, 37, 48, 49, 77, 78, 95, 99, 100, 258, 261, 270, 276, 303, 306, 310, 312, 357, 364, 387, 396, 400, 413, 445, 505, 507, 538, 543, 545, 546, 550, 573, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 598, 626, 637, 683, 705, 707, 712, 729, 735, 738, 744, 745, 755, 756, 761], "nest": [4, 26, 27, 52, 55, 197, 477, 506, 523, 526, 541, 543, 544, 549, 622, 623, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 682, 685, 686, 688, 717, 719, 720, 729, 731, 736, 743, 744, 748, 750, 755], "unchang": [4, 8, 309, 312, 352, 390, 545, 568], "recurs": [4, 26, 27, 120, 121, 153, 154, 460, 461, 539, 540, 543, 550, 625, 626, 629, 635, 636, 637, 713, 716, 719, 720, 729, 732, 744, 748], "deriv": [4, 5, 9, 11, 27, 28, 32, 34, 86, 91, 98, 103, 259, 263, 280, 303, 306, 524, 525, 528, 529, 530, 531, 532, 538, 544, 549, 550, 624, 626, 637, 686, 688, 689, 722, 723, 742, 744], "word": [4, 76, 312, 393, 538, 552, 648, 681, 684, 720, 732, 733, 750], "args_to_n": [4, 732], "cont_inplac": 4, "updat": [4, 10, 11, 26, 33, 34, 49, 472, 486, 487, 490, 491, 513, 524, 525, 528, 530, 531, 532, 543, 544, 545, 549, 550, 568, 570, 622, 623, 624, 632, 633, 637, 642, 643, 681, 687, 688, 693, 702, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 724, 728, 730, 731, 733, 734, 735, 738, 740, 742, 743, 745, 748], "place": [4, 5, 8, 9, 10, 14, 16, 26, 28, 30, 31, 32, 33, 39, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 258, 259, 262, 269, 270, 274, 276, 279, 280, 284, 286, 287, 288, 289, 291, 292, 293, 297, 298, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 390, 400, 405, 421, 434, 437, 441, 448, 456, 457, 462, 466, 468, 470, 471, 472, 486, 490, 504, 509, 513, 533, 538, 539, 540, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 686, 688, 702, 708, 711, 714, 715, 716, 719, 720, 721, 723, 724, 725, 728, 729, 733, 734, 735, 736, 738, 745, 750, 757], "ignor": [4, 5, 9, 26, 32, 94, 309, 310, 312, 332, 333, 334, 358, 402, 403, 407, 538, 545, 546, 550, 571, 583, 636, 637, 688, 719, 721, 724, 735, 748, 761], "decid": [4, 26, 550, 625, 626, 635, 636, 637, 702, 712, 713, 722, 738], "go": [4, 9, 36, 309, 351, 550, 625, 626, 635, 636, 637, 702, 707, 708, 710, 712, 713, 714, 715, 718, 719, 721, 722, 724, 727, 733, 734, 735, 736, 739, 743, 748, 751, 755, 756, 760, 762], "deeper": [4, 550, 625, 626, 635, 636, 637, 704, 714, 715, 735, 739], "to_ivi": [4, 27, 550, 638, 732], "leaf": [4, 26, 45, 52, 550, 635, 636, 638, 665, 720, 729, 743], "nativearrai": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 77, 78, 84, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 125, 126, 127, 129, 131, 133, 134, 140, 150, 151, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 315, 316, 317, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 475, 478, 479, 481, 486, 487, 488, 491, 500, 501, 502, 503, 504, 506, 508, 509, 511, 522, 524, 525, 526, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 632, 633, 634, 637, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 689, 717, 720, 724, 726, 728, 729, 730, 732, 733, 736, 737, 740, 742, 750], "manner": [4, 27, 550, 637, 704, 713, 723, 725, 729, 733, 736, 743, 747, 748, 751, 753, 761, 762], "travers": [4, 27, 550, 629, 637, 720, 722, 726, 740], "lowest": [4, 9, 18, 27, 32, 41, 321, 437, 550, 552, 637, 646, 729, 748, 750, 752, 756, 760], "leav": [4, 9, 27, 29, 31, 32, 33, 36, 37, 39, 45, 52, 119, 122, 194, 250, 251, 312, 385, 390, 402, 403, 404, 417, 418, 419, 435, 436, 441, 459, 506, 548, 550, 564, 572, 577, 594, 608, 612, 617, 619, 620, 625, 626, 635, 636, 637, 638, 664, 665, 696, 702, 712, 720, 721, 722, 724, 725, 728, 729, 732, 733, 735, 743, 744], "search": [4, 9, 27, 32, 651, 652, 704, 711, 713, 720, 724, 735, 736], "to_n": [4, 27, 740], "mayb": [4, 702, 713, 721, 740, 742], "_arraywithcr": [5, 51], "asarrai": [5, 9, 10, 21, 28, 32, 33, 44, 77, 319, 426, 427, 455, 466, 470, 471, 501, 502, 538, 543, 545, 554, 555, 559, 657, 661, 726, 730, 733, 734], "devic": [5, 9, 18, 26, 28, 32, 41, 51, 54, 55, 56, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 173, 258, 259, 269, 270, 303, 316, 388, 420, 421, 423, 424, 446, 460, 461, 538, 543, 552, 645, 646, 647, 648, 681, 683, 684, 685, 686, 687, 688, 689, 690, 693, 702, 705, 714, 715, 718, 722, 726, 729, 730, 734, 735, 736, 738, 740, 745, 748, 749, 750, 754, 755, 757, 758, 759, 760], "ndarrai": [5, 9, 10, 28, 32, 77, 78, 95, 309, 310, 312, 321, 352, 369, 405, 440, 441, 508, 538, 543, 693, 696, 712, 717, 722, 723, 726, 728, 732, 733, 734, 736, 738, 740, 742, 745, 750], "boolean": [5, 6, 8, 9, 10, 16, 19, 22, 26, 28, 29, 31, 32, 33, 39, 42, 45, 51, 52, 73, 75, 77, 78, 84, 90, 106, 122, 124, 126, 127, 130, 146, 156, 164, 170, 184, 185, 186, 187, 188, 189, 221, 222, 223, 224, 287, 306, 310, 312, 360, 369, 372, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 444, 447, 465, 468, 469, 473, 474, 475, 476, 477, 478, 479, 488, 491, 494, 495, 497, 498, 522, 537, 538, 539, 540, 541, 543, 548, 549, 550, 553, 556, 609, 610, 611, 613, 615, 616, 618, 620, 622, 623, 635, 653, 654, 655, 667, 669, 687, 720, 722, 729, 733, 735, 738], "never": [5, 9, 16, 28, 32, 39, 78, 312, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 465, 543, 548, 609, 610, 611, 613, 615, 616, 618, 620, 714, 722, 732, 733, 735], "valueerror": [5, 16, 28, 32, 39, 43, 78, 309, 312, 342, 352, 380, 381, 386, 388, 390, 391, 392, 399, 405, 412, 548, 609, 610, 611, 613, 615, 616, 618, 620, 659, 697, 726], "reus": [5, 28, 32, 39, 78, 380, 381, 386, 388, 390, 391, 392, 399, 412, 609, 610, 611, 613, 615, 616, 618, 620, 726, 735, 760], "exist": [5, 9, 10, 26, 28, 32, 39, 78, 312, 380, 381, 385, 386, 388, 390, 391, 392, 399, 412, 454, 490, 543, 548, 607, 609, 610, 611, 613, 615, 616, 618, 620, 688, 690, 702, 704, 705, 712, 713, 716, 718, 723, 724, 725, 729, 730, 732, 733, 735, 738, 740, 748, 750, 753, 755, 758, 761], "buffer": [5, 28, 32, 39, 78, 89, 380, 381, 386, 388, 390, 391, 392, 399, 412, 538, 609, 610, 611, 613, 615, 616, 618, 620, 686, 732, 748], "possibl": [5, 9, 28, 32, 39, 49, 78, 201, 244, 258, 303, 309, 311, 312, 331, 373, 380, 381, 382, 386, 388, 390, 391, 392, 399, 412, 482, 541, 543, 545, 556, 568, 609, 610, 611, 613, 615, 616, 618, 620, 667, 669, 699, 702, 705, 707, 712, 713, 714, 716, 719, 720, 722, 724, 725, 727, 729, 731, 732, 733, 734, 735, 738, 740, 743, 747, 748, 753, 755, 761], "nativedtyp": [5, 6, 9, 13, 14, 18, 19, 22, 28, 32, 37, 41, 42, 45, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 128, 130, 132, 136, 146, 258, 259, 260, 261, 262, 263, 264, 273, 278, 292, 303, 306, 316, 321, 420, 421, 422, 423, 424, 434, 435, 436, 437, 440, 538, 539, 545, 546, 552, 553, 555, 556, 568, 601, 646, 647, 648, 651, 652, 662, 664, 665, 670, 672, 683, 722, 723, 728, 736, 740], "nativedevic": [5, 7, 9, 18, 28, 30, 32, 41, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 148, 149, 150, 151, 152, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 258, 259, 269, 303, 316, 420, 421, 423, 424, 538, 540, 552, 645, 646, 647, 648, 683, 688, 689, 722, 723, 726, 728, 736], "interpret": [5, 9, 28, 32, 77, 78, 89, 95, 321, 434, 538, 721, 756], "9": [5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 25, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 51, 52, 59, 76, 77, 78, 95, 112, 113, 114, 115, 116, 119, 122, 175, 177, 179, 180, 183, 184, 185, 188, 194, 195, 201, 208, 214, 215, 216, 222, 223, 225, 226, 227, 230, 232, 233, 237, 238, 241, 242, 243, 248, 250, 253, 254, 280, 281, 285, 291, 292, 299, 301, 306, 307, 309, 311, 312, 319, 321, 327, 328, 329, 330, 335, 336, 340, 341, 345, 346, 348, 350, 351, 362, 373, 374, 376, 380, 381, 382, 386, 390, 395, 405, 406, 407, 409, 412, 422, 424, 427, 436, 451, 455, 456, 457, 459, 462, 470, 471, 474, 475, 478, 486, 487, 501, 503, 524, 525, 526, 530, 535, 538, 539, 541, 543, 544, 545, 546, 548, 550, 552, 553, 554, 555, 556, 559, 560, 561, 564, 567, 568, 569, 574, 575, 577, 580, 581, 584, 585, 586, 589, 592, 594, 595, 596, 598, 599, 606, 610, 614, 615, 617, 618, 620, 625, 626, 631, 633, 636, 637, 645, 646, 647, 648, 650, 655, 656, 658, 660, 661, 663, 665, 666, 668, 670, 672, 673, 688, 720, 724, 731, 735, 743, 744, 751], "39999998": [5, 77, 78, 538, 554, 657], "5999999": [5, 36, 77, 78, 538, 545, 568, 572], "0999999": [5, 22, 77, 78, 289, 306, 538, 668], "10000038": [5, 77, 78, 538], "np": [5, 8, 9, 31, 32, 33, 77, 78, 84, 95, 130, 207, 211, 309, 310, 336, 341, 353, 501, 538, 539, 541, 543, 550, 631, 693, 696, 702, 712, 717, 722, 723, 726, 728, 732, 733, 734, 735, 736, 738, 740, 742, 743, 745, 750], "order": [5, 9, 10, 13, 14, 16, 20, 21, 26, 32, 36, 37, 39, 43, 44, 49, 51, 52, 77, 78, 94, 101, 182, 201, 244, 269, 285, 303, 306, 310, 312, 315, 319, 354, 357, 358, 359, 363, 367, 369, 372, 390, 391, 392, 397, 398, 409, 414, 415, 416, 427, 538, 541, 545, 546, 548, 549, 553, 554, 555, 559, 560, 561, 562, 563, 564, 567, 578, 579, 585, 594, 595, 599, 601, 610, 613, 622, 623, 654, 656, 657, 658, 659, 660, 662, 663, 682, 686, 687, 689, 702, 704, 712, 713, 714, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 743, 745, 748, 751, 754, 755, 756, 758, 761], "90786433e": [5, 77, 78, 538], "310": [5, 77, 78, 538], "copy_arrai": [5, 28, 538], "to_ivy_arrai": [5, 28, 84, 538], "empty_lik": [5, 9, 28, 32, 310, 356, 538], "deafult": [5, 19, 42, 86, 538, 651], "uniniti": [5, 85, 86, 538, 727], "from_dlpack": [5, 28, 538], "full_lik": [5, 28, 538, 736], "fill_valu": [5, 9, 19, 28, 32, 42, 90, 91, 206, 214, 316, 424, 538, 541, 553, 654, 690, 722, 734, 736], "scalar": [5, 8, 9, 10, 14, 25, 28, 31, 32, 33, 37, 49, 61, 91, 96, 177, 198, 243, 255, 276, 277, 279, 282, 285, 287, 289, 294, 301, 306, 310, 312, 358, 380, 381, 382, 394, 509, 522, 538, 541, 543, 546, 601, 722, 731, 733, 748, 755], "fill": [5, 8, 9, 18, 19, 26, 28, 31, 32, 41, 42, 85, 90, 91, 93, 96, 97, 98, 102, 103, 228, 259, 303, 310, 312, 316, 360, 364, 369, 372, 389, 408, 421, 423, 424, 538, 541, 552, 553, 646, 654, 683, 712, 734], "equal": [5, 6, 8, 9, 10, 14, 15, 16, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 38, 39, 41, 44, 51, 52, 87, 89, 90, 91, 97, 98, 106, 186, 188, 192, 197, 199, 208, 209, 230, 232, 237, 240, 241, 245, 271, 272, 274, 287, 303, 306, 309, 312, 315, 321, 331, 386, 395, 412, 417, 418, 419, 437, 444, 447, 523, 538, 539, 541, 543, 546, 547, 548, 552, 553, 554, 555, 556, 577, 586, 587, 590, 592, 598, 603, 606, 608, 613, 615, 621, 648, 654, 656, 657, 658, 659, 660, 663, 668, 670, 671, 672, 673, 683, 684, 719, 720, 722, 724, 726, 734, 735], "000123": [5, 91, 538], "ones": [5, 9, 11, 13, 18, 26, 28, 32, 36, 41, 87, 91, 96, 98, 103, 153, 154, 190, 259, 303, 524, 538, 540, 541, 544, 545, 563, 564, 646, 647, 648, 702, 712, 717, 721, 724, 728, 729, 735, 742, 743, 755], "linspac": [5, 28, 76, 538, 702, 728, 738, 740, 762], "stop": [5, 9, 11, 28, 32, 34, 76, 92, 93, 167, 310, 369, 372, 488, 525, 528, 530, 531, 532, 533, 538, 540, 543, 544, 549, 550, 622, 623, 624, 636, 688, 728, 731, 738, 740, 748, 755], "num": [5, 28, 92, 93, 538, 714, 728, 740], "endpoint": [5, 28, 92, 93, 538, 683, 728], "logspac": [5, 28, 538, 740], "10": [5, 8, 9, 10, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 76, 91, 92, 93, 176, 184, 185, 188, 192, 199, 204, 206, 212, 214, 216, 227, 233, 240, 241, 246, 251, 274, 277, 282, 284, 285, 287, 288, 289, 291, 292, 296, 299, 306, 309, 312, 321, 327, 328, 329, 330, 340, 345, 346, 348, 350, 351, 352, 382, 384, 386, 390, 395, 406, 412, 432, 435, 436, 439, 441, 442, 455, 456, 457, 459, 462, 463, 465, 470, 471, 479, 487, 491, 496, 501, 503, 515, 518, 530, 538, 541, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 559, 560, 562, 568, 575, 577, 581, 582, 584, 585, 586, 589, 594, 595, 596, 610, 615, 616, 617, 618, 620, 631, 633, 636, 637, 644, 645, 646, 647, 648, 654, 656, 662, 664, 665, 666, 667, 669, 670, 672, 673, 688, 702, 705, 713, 716, 720, 721, 722, 724, 731, 734, 735, 740, 742, 743, 760], "rang": [5, 9, 22, 28, 32, 76, 92, 93, 241, 310, 312, 321, 358, 366, 393, 401, 403, 410, 435, 436, 437, 455, 523, 538, 541, 543, 554, 556, 656, 664, 665, 670, 672, 683, 702, 722, 726, 729, 735, 740, 743, 744, 745, 755, 761], "log": [5, 8, 9, 14, 28, 31, 32, 37, 67, 93, 217, 219, 232, 250, 251, 290, 297, 301, 306, 311, 316, 375, 420, 535, 538, 541, 592, 680, 714, 720, 721, 724, 729, 732, 733, 734, 735, 737, 738, 740, 743], "space": [5, 8, 9, 10, 28, 31, 32, 33, 76, 92, 93, 246, 285, 306, 455, 459, 538, 541, 543, 705, 738], "sequenc": [5, 9, 13, 14, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 87, 89, 91, 93, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 259, 262, 267, 268, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 301, 303, 307, 309, 310, 312, 316, 321, 322, 324, 325, 332, 333, 334, 336, 337, 341, 342, 344, 351, 352, 360, 361, 363, 367, 368, 369, 372, 373, 374, 376, 377, 378, 380, 381, 382, 385, 386, 387, 393, 395, 396, 398, 399, 401, 404, 406, 408, 409, 412, 413, 414, 416, 417, 418, 419, 421, 422, 434, 435, 436, 437, 442, 443, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 482, 486, 487, 501, 502, 504, 506, 508, 509, 522, 523, 526, 527, 528, 533, 538, 541, 543, 544, 545, 546, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 571, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 601, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 617, 620, 621, 625, 632, 642, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 687, 689, 714, 721, 722, 723, 724, 726, 735, 736, 738, 740, 745, 747, 758], "gener": [5, 8, 9, 13, 18, 24, 28, 31, 32, 36, 41, 47, 76, 92, 93, 101, 109, 194, 197, 207, 208, 223, 227, 236, 258, 261, 265, 266, 267, 268, 269, 303, 310, 316, 321, 370, 422, 434, 538, 539, 541, 545, 546, 548, 552, 556, 568, 592, 596, 599, 621, 645, 646, 648, 649, 671, 688, 696, 712, 713, 714, 715, 716, 717, 719, 722, 723, 724, 725, 726, 728, 729, 732, 733, 734, 736, 739, 740, 742, 744, 745, 747, 748, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761], "relev": [5, 28, 93, 538, 688, 702, 705, 712, 713, 714, 717, 720, 721, 722, 724, 730, 731, 734, 735, 743, 749, 753, 760, 761], "sampl": [5, 8, 9, 18, 22, 28, 31, 32, 41, 45, 92, 93, 246, 309, 312, 316, 332, 333, 334, 344, 403, 420, 421, 422, 423, 424, 538, 541, 552, 556, 645, 646, 647, 648, 671, 673, 684, 734, 735], "on_valu": [5, 28, 93, 96, 538], "off_valu": [5, 28, 93, 96, 538], "cuda": [5, 9, 18, 28, 32, 41, 92, 93, 96, 147, 148, 149, 163, 165, 316, 420, 421, 423, 424, 538, 540, 552, 645, 646, 647, 648, 683, 684, 685, 686, 687, 688, 689, 702, 740, 748, 750, 760], "cpu": [5, 7, 9, 18, 28, 30, 32, 41, 76, 87, 90, 92, 93, 96, 97, 98, 103, 147, 148, 150, 151, 152, 153, 158, 161, 163, 165, 168, 169, 171, 173, 316, 420, 421, 423, 424, 538, 540, 546, 552, 583, 645, 646, 647, 648, 683, 684, 685, 686, 687, 688, 689, 702, 710, 713, 714, 719, 722, 723, 733, 735, 748, 753, 755, 758, 760], "evenli": [5, 8, 9, 13, 16, 26, 28, 31, 36, 39, 76, 92, 93, 246, 309, 351, 538, 541, 545, 548, 558, 559, 560, 561, 563, 565, 567, 615], "descript": [5, 8, 9, 14, 31, 32, 37, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 462, 466, 468, 470, 509, 533, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 712, 714, 725, 731, 732], "hint": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 462, 466, 468, 470, 509, 533, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 712, 717, 725, 728, 729, 732, 733, 736], "assum": [5, 8, 9, 10, 13, 14, 15, 31, 32, 33, 36, 37, 38, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 259, 270, 276, 279, 295, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 368, 400, 434, 437, 462, 466, 468, 470, 479, 509, 533, 538, 539, 541, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 696, 702, 713, 716, 718, 721, 722, 725, 734, 735, 738, 742, 743, 748], "simplic": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 462, 466, 468, 470, 509, 533, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 725, 738, 744, 747], "nestabl": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 400, 434, 437, 441, 448, 456, 457, 462, 466, 468, 470, 472, 486, 504, 509, 533, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 712, 715, 724, 725, 732, 735, 750], "therefor": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 133, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 269, 270, 276, 279, 303, 306, 309, 310, 312, 321, 327, 328, 329, 330, 332, 333, 334, 340, 345, 346, 347, 348, 358, 393, 400, 401, 403, 410, 434, 437, 441, 448, 456, 457, 462, 466, 468, 470, 472, 486, 504, 509, 533, 538, 539, 541, 543, 544, 545, 546, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 702, 704, 708, 712, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 742, 744, 748, 752, 755, 761], "01": [5, 9, 10, 11, 32, 33, 34, 37, 41, 93, 219, 237, 238, 258, 264, 287, 303, 309, 330, 340, 341, 459, 501, 502, 524, 525, 530, 538, 541, 543, 544, 546, 549, 552, 580, 624, 647, 648, 718, 745], "02": [5, 10, 11, 17, 18, 31, 34, 41, 93, 179, 180, 219, 309, 330, 340, 341, 501, 502, 524, 525, 530, 538, 541, 543, 544, 547, 551, 552, 603, 644, 647, 648, 734], "03": [5, 8, 10, 11, 31, 34, 41, 93, 192, 217, 501, 502, 525, 530, 538, 541, 543, 544, 546, 547, 582, 603, 647], "04": [5, 11, 25, 29, 34, 61, 62, 93, 119, 199, 492, 524, 525, 530, 535, 538, 539, 541, 543, 544, 713, 735], "05": [5, 8, 9, 11, 17, 31, 32, 34, 40, 93, 219, 264, 274, 287, 303, 306, 315, 414, 415, 416, 470, 492, 514, 524, 525, 530, 538, 541, 543, 544, 546, 551, 585, 644, 683, 687, 734, 735], "464": [5, 8, 41, 93, 181, 182, 541], "15888336": [5, 93], "2154": [5, 93], "43469003": [5, 93], "10000": [5, 28, 93, 538], "meshgrid": [5, 28, 538], "spars": [5, 9, 15, 28, 32, 38, 94, 262, 303, 310, 360, 369, 372, 538, 547, 605], "index": [5, 9, 10, 16, 19, 20, 21, 26, 28, 32, 33, 39, 42, 43, 44, 87, 94, 163, 259, 265, 266, 271, 272, 303, 309, 310, 312, 317, 319, 321, 331, 337, 361, 363, 368, 384, 390, 393, 401, 403, 405, 408, 410, 425, 426, 435, 442, 445, 463, 465, 486, 487, 491, 536, 538, 540, 543, 548, 550, 553, 554, 555, 613, 617, 627, 628, 629, 632, 633, 634, 640, 642, 651, 652, 654, 656, 657, 658, 660, 662, 684, 698, 720, 721, 726, 729, 730, 731, 732, 734, 735, 742, 755], "xy": [5, 28, 94, 538], "dimension": [5, 8, 9, 14, 16, 19, 22, 23, 26, 28, 31, 32, 37, 39, 45, 46, 51, 76, 87, 89, 94, 101, 246, 269, 303, 309, 310, 312, 321, 336, 337, 341, 342, 352, 355, 380, 381, 382, 389, 390, 432, 442, 538, 541, 546, 548, 553, 556, 557, 574, 575, 581, 584, 587, 589, 590, 600, 601, 615, 651, 652, 654, 667, 668, 669, 670, 671, 672, 673, 674, 675, 729, 731, 735, 738, 740, 752, 755, 762], "repres": [5, 8, 9, 13, 14, 31, 32, 36, 37, 75, 94, 96, 118, 176, 177, 180, 183, 192, 194, 201, 227, 240, 244, 245, 262, 271, 272, 285, 303, 306, 309, 310, 312, 315, 316, 319, 351, 362, 400, 414, 415, 416, 420, 426, 433, 537, 538, 539, 541, 545, 546, 568, 569, 581, 589, 592, 593, 683, 687, 717, 738, 742, 752, 753, 756], "grid": [5, 94, 262, 303, 538, 724, 735, 747], "coordin": [5, 8, 19, 31, 32, 42, 94, 101, 182, 244, 265, 266, 269, 285, 303, 317, 425, 538, 541, 553, 654], "numer": [5, 6, 8, 9, 10, 14, 18, 19, 22, 29, 31, 32, 33, 37, 41, 42, 44, 51, 52, 94, 106, 174, 177, 190, 194, 199, 200, 201, 208, 209, 210, 213, 222, 223, 227, 229, 230, 231, 232, 236, 237, 238, 242, 243, 247, 248, 316, 321, 421, 434, 492, 493, 501, 502, 514, 515, 538, 539, 541, 543, 546, 552, 553, 556, 574, 581, 584, 589, 592, 594, 596, 598, 600, 646, 647, 648, 650, 651, 652, 654, 655, 660, 667, 670, 672, 683, 710, 722, 731, 733, 734, 735, 736, 737, 738, 740, 744, 752, 755, 761], "conserv": [5, 94, 538], "cartesian": [5, 94, 538], "matrix": [5, 9, 10, 13, 14, 32, 33, 36, 37, 49, 51, 94, 99, 100, 101, 269, 270, 303, 310, 312, 321, 354, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 398, 434, 444, 450, 538, 543, 545, 546, 569, 573, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 683, 684, 712, 722, 733, 753, 755], "ij": [5, 22, 94, 538, 556, 666], "zero": [5, 6, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 28, 29, 31, 32, 34, 36, 37, 41, 42, 45, 46, 61, 63, 64, 65, 67, 84, 85, 87, 89, 94, 96, 97, 98, 99, 100, 103, 106, 107, 175, 176, 177, 179, 180, 181, 182, 183, 186, 188, 189, 191, 192, 193, 194, 199, 200, 201, 208, 209, 210, 211, 217, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 244, 245, 247, 248, 249, 253, 254, 257, 259, 270, 277, 278, 279, 281, 289, 292, 294, 295, 296, 297, 301, 303, 306, 309, 310, 312, 319, 321, 330, 331, 332, 333, 334, 336, 337, 340, 341, 342, 351, 352, 356, 358, 367, 394, 399, 400, 426, 435, 436, 451, 455, 462, 482, 524, 525, 530, 531, 532, 533, 535, 538, 539, 541, 543, 544, 545, 546, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 572, 573, 575, 580, 582, 583, 584, 585, 586, 587, 588, 590, 592, 600, 601, 608, 609, 610, 611, 613, 614, 621, 644, 646, 647, 648, 651, 652, 653, 654, 656, 657, 658, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 688, 706, 717, 720, 722, 723, 724, 728, 730, 731, 734, 740, 743, 744, 754], "vector": [5, 9, 10, 13, 14, 32, 33, 36, 37, 49, 94, 309, 310, 312, 316, 321, 331, 357, 360, 366, 368, 371, 400, 402, 404, 422, 434, 451, 455, 472, 523, 538, 543, 545, 546, 569, 571, 574, 578, 579, 581, 584, 589, 594, 595, 599, 600, 601, 602, 684, 747, 755], "respect": [5, 8, 9, 11, 14, 31, 32, 34, 37, 49, 94, 174, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 236, 240, 243, 244, 250, 285, 300, 301, 306, 308, 310, 312, 315, 371, 379, 414, 416, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 538, 541, 544, 545, 546, 549, 558, 565, 566, 574, 591, 594, 622, 623, 624, 683, 711, 712, 713, 714, 717, 718, 720, 721, 722, 723, 724, 728, 729, 731, 732, 733, 735, 736, 737, 751, 761], "effect": [5, 9, 11, 22, 32, 34, 45, 94, 309, 311, 344, 375, 524, 532, 538, 544, 545, 556, 571, 671, 673, 705, 712, 717, 720, 721, 725, 728, 732, 734, 738, 748], "rank": [5, 9, 14, 16, 23, 32, 37, 39, 46, 49, 50, 55, 94, 267, 268, 303, 310, 312, 321, 360, 361, 369, 372, 400, 442, 538, 546, 548, 553, 557, 574, 576, 585, 587, 591, 593, 598, 600, 601, 608, 609, 617, 620, 621, 654, 674, 675], "length": [5, 9, 15, 16, 26, 32, 38, 39, 49, 52, 76, 89, 94, 255, 260, 263, 264, 273, 279, 301, 303, 306, 309, 310, 312, 316, 319, 331, 336, 337, 340, 341, 342, 352, 361, 368, 400, 408, 422, 427, 523, 538, 543, 545, 546, 547, 548, 554, 571, 594, 595, 603, 613, 656, 682, 684, 735, 743], "ni": [5, 94, 538], "xi": [5, 94, 538], "native_arrai": [5, 6, 8, 28, 30, 31, 32, 33, 44, 59, 62, 91, 94, 96, 98, 103, 106, 107, 108, 109, 117, 122, 129, 151, 160, 168, 184, 188, 189, 193, 194, 195, 197, 201, 205, 213, 214, 222, 227, 230, 233, 236, 241, 299, 311, 312, 376, 400, 406, 409, 444, 474, 475, 478, 508, 535, 538, 539, 540, 541, 543, 545, 546, 547, 548, 552, 553, 556, 557, 559, 560, 567, 572, 575, 580, 586, 587, 595, 596, 598, 601, 603, 605, 606, 613, 645, 654, 663, 669, 672, 674, 693, 710, 734, 735], "one_hot": [5, 28, 538, 702, 745], "depth": [5, 9, 13, 28, 32, 36, 96, 309, 312, 344, 387, 455, 467, 538, 543, 545, 550, 563, 564, 637, 682, 686, 714, 721, 743, 744, 745, 747, 749], "scatter": [5, 10, 28, 33, 96, 486, 487, 538, 543, 719, 732, 738, 762], "defin": [5, 9, 10, 14, 28, 32, 33, 37, 65, 96, 99, 100, 101, 177, 194, 201, 227, 228, 236, 238, 241, 250, 260, 263, 264, 269, 270, 271, 272, 276, 301, 303, 306, 309, 310, 312, 321, 344, 356, 400, 406, 437, 470, 471, 491, 535, 538, 541, 543, 546, 556, 574, 579, 580, 593, 667, 668, 669, 671, 702, 712, 713, 717, 718, 721, 722, 725, 728, 731, 733, 734, 735, 736, 742, 744, 748, 750, 752, 753, 754, 755, 756, 759, 761, 762], "hot": [5, 28, 96, 538, 702], "dimens": [5, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 52, 55, 62, 66, 96, 99, 100, 262, 268, 270, 271, 272, 278, 279, 285, 292, 299, 303, 306, 307, 309, 310, 311, 312, 315, 316, 319, 321, 323, 324, 325, 327, 328, 329, 331, 336, 337, 341, 345, 346, 347, 348, 351, 353, 354, 357, 370, 375, 380, 381, 382, 390, 401, 402, 403, 404, 406, 414, 415, 416, 422, 424, 427, 437, 439, 440, 441, 442, 455, 456, 457, 459, 466, 500, 503, 523, 535, 538, 543, 545, 546, 547, 548, 549, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 600, 601, 604, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 622, 623, 624, 650, 651, 652, 654, 656, 657, 658, 659, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 687, 724, 726, 731, 733, 734, 735, 738, 740, 743], "overrid": [5, 9, 28, 32, 96, 321, 434, 538, 717, 719], "ones_lik": [5, 28, 538, 718, 745], "tril": [5, 28, 538], "m": [5, 9, 14, 18, 31, 32, 37, 41, 51, 94, 99, 100, 101, 221, 269, 270, 303, 309, 310, 311, 312, 316, 331, 357, 360, 361, 363, 373, 382, 391, 392, 406, 420, 421, 422, 423, 424, 538, 546, 550, 552, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 633, 646, 647, 648, 702, 708, 713, 714, 715, 721, 740], "whose": [5, 8, 9, 10, 14, 16, 20, 22, 28, 31, 32, 33, 37, 39, 43, 45, 51, 91, 99, 100, 176, 180, 183, 191, 192, 193, 232, 233, 239, 240, 244, 245, 246, 270, 284, 288, 289, 291, 295, 303, 310, 312, 357, 399, 411, 449, 504, 538, 541, 543, 546, 548, 554, 556, 573, 575, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 601, 610, 614, 656, 657, 658, 665, 666, 725, 735], "innermost": [5, 9, 14, 37, 99, 100, 270, 303, 310, 357, 538, 546, 573, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 598], "two": [5, 9, 14, 20, 32, 33, 37, 51, 52, 73, 76, 87, 94, 99, 100, 101, 132, 140, 188, 202, 203, 237, 269, 270, 274, 283, 284, 286, 287, 289, 291, 298, 303, 306, 309, 310, 311, 312, 321, 337, 355, 356, 357, 367, 376, 381, 400, 406, 409, 434, 442, 447, 537, 538, 539, 541, 543, 546, 548, 554, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 600, 618, 656, 657, 658, 659, 684, 706, 712, 713, 716, 717, 722, 723, 724, 725, 729, 733, 734, 735, 738, 739, 743, 745, 752, 760], "mxn": [5, 9, 14, 37, 99, 100, 270, 303, 538, 546, 577, 585, 587, 588, 590, 591, 595, 598], "matric": [5, 9, 14, 32, 37, 49, 51, 94, 99, 100, 270, 303, 310, 312, 357, 360, 361, 363, 367, 368, 371, 389, 538, 545, 546, 569, 573, 575, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 598, 599, 710, 747, 755], "diagon": [5, 9, 14, 32, 37, 87, 99, 100, 101, 259, 269, 270, 303, 310, 312, 355, 358, 364, 389, 538, 546, 576, 598], "main": [5, 9, 14, 32, 37, 87, 99, 100, 101, 259, 269, 270, 303, 310, 312, 355, 389, 538, 546, 576, 577, 598, 712, 713, 714, 716, 719, 720, 730, 732, 753, 755, 756, 761], "lower": [5, 8, 9, 14, 18, 31, 32, 37, 41, 87, 99, 225, 259, 269, 270, 303, 321, 437, 438, 442, 538, 541, 546, 552, 573, 579, 580, 587, 648, 682, 683, 702, 714, 722, 724, 733, 735, 740, 748, 750, 751, 752, 753, 755, 756, 761, 762], "triangular": [5, 9, 14, 37, 99, 100, 101, 269, 270, 303, 538, 546, 573, 579, 580, 587, 591], "alloc": [5, 6, 9, 29, 99, 100, 106, 270, 303, 538, 539, 712, 714, 748], "triu": [5, 28, 538], "upper": [5, 9, 14, 18, 32, 37, 41, 87, 100, 101, 259, 270, 303, 321, 437, 538, 546, 552, 573, 579, 580, 591, 648, 682, 732, 735], "zeros_lik": [5, 28, 106, 223, 524, 525, 528, 530, 532, 538, 539, 541, 544, 548, 606, 733, 738], "data_typ": [6, 9, 29, 32, 136, 539, 719, 722, 735, 736], "_arraywithdatatyp": [6, 51], "astyp": [6, 13, 29, 36, 539, 545, 561, 563, 564, 567, 702, 722, 732, 733, 738], "irrespect": [6, 14, 29, 37, 106, 539, 546, 594, 720, 732, 742, 762], "promot": [6, 8, 9, 14, 29, 31, 32, 37, 44, 51, 52, 106, 109, 132, 133, 134, 140, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 199, 201, 215, 216, 217, 218, 219, 224, 227, 232, 236, 239, 240, 241, 242, 243, 244, 245, 248, 282, 290, 295, 306, 321, 434, 495, 517, 539, 541, 543, 546, 548, 556, 573, 574, 581, 582, 584, 585, 586, 587, 589, 590, 592, 593, 600, 601, 607, 617, 660, 668, 671, 716, 725, 726, 729, 737], "rule": [6, 8, 9, 14, 29, 31, 32, 37, 106, 109, 132, 133, 134, 183, 194, 227, 229, 236, 238, 246, 248, 312, 321, 388, 434, 539, 541, 546, 548, 573, 574, 581, 586, 589, 593, 607, 696, 716, 717, 720, 721, 722, 724, 727, 728, 729, 731, 735, 738, 756], "cast": [6, 8, 9, 14, 22, 29, 31, 37, 106, 109, 134, 228, 321, 435, 436, 539, 541, 546, 556, 601, 664, 665, 670, 672, 729, 734, 740], "nan": [6, 8, 9, 10, 20, 22, 29, 31, 32, 33, 106, 174, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 247, 250, 274, 283, 287, 292, 295, 301, 306, 321, 432, 433, 440, 441, 468, 522, 536, 539, 541, 543, 554, 556, 557, 656, 657, 658, 659, 667, 668, 669, 671, 672, 673, 674, 675, 716, 722, 725, 731, 736, 737], "infin": [6, 8, 10, 14, 29, 31, 37, 106, 174, 175, 176, 177, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 215, 216, 217, 218, 219, 222, 227, 228, 230, 232, 236, 237, 239, 240, 241, 244, 245, 247, 295, 306, 468, 536, 539, 541, 543, 546, 556, 557, 592, 601, 667, 669, 674, 675, 716, 725], "implement": [6, 7, 9, 20, 21, 29, 30, 32, 37, 44, 49, 106, 120, 121, 134, 153, 154, 168, 174, 175, 176, 179, 180, 181, 182, 191, 192, 194, 197, 199, 201, 215, 216, 217, 218, 227, 229, 232, 236, 239, 240, 244, 245, 295, 306, 310, 321, 356, 357, 440, 441, 460, 461, 539, 540, 541, 543, 545, 546, 554, 555, 556, 571, 578, 579, 580, 589, 598, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 693, 702, 710, 712, 715, 716, 717, 718, 720, 722, 723, 725, 726, 728, 729, 730, 732, 734, 735, 736, 738, 740, 742, 743, 744, 745, 747, 748, 750, 752, 753, 754, 755, 758, 761, 762], "match": [6, 9, 26, 29, 32, 106, 201, 236, 277, 279, 306, 309, 312, 352, 384, 405, 408, 482, 539, 541, 543, 546, 579, 580, 585, 601, 710, 712, 717, 719, 720, 724, 734, 756, 761], "newli": [6, 29, 106, 449, 539, 543, 714, 718, 721, 732, 735], "float64": [6, 9, 18, 22, 28, 29, 31, 32, 33, 41, 45, 76, 89, 90, 106, 109, 113, 114, 119, 120, 123, 124, 129, 130, 134, 136, 137, 143, 146, 228, 282, 306, 321, 434, 481, 538, 539, 543, 546, 552, 579, 580, 585, 601, 647, 648, 665, 722, 734, 735], "broadcast_arrai": [6, 29, 539], "against": [6, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 107, 226, 245, 274, 275, 278, 287, 306, 321, 440, 441, 442, 479, 539, 541, 543, 546, 553, 584, 585, 587, 590, 651, 704, 735, 740, 748, 755], "x2": [6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 51, 52, 56, 107, 133, 140, 160, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 236, 243, 248, 274, 277, 282, 283, 284, 286, 288, 293, 297, 306, 312, 321, 394, 434, 444, 539, 540, 541, 543, 546, 553, 574, 581, 584, 589, 593, 596, 597, 600, 655, 690, 716, 722, 724, 726, 728, 732, 733], "x3": [6, 10, 107, 444, 539, 543], "mix": [6, 8, 29, 31, 32, 33, 38, 41, 51, 52, 107, 120, 121, 134, 153, 154, 184, 187, 188, 189, 194, 195, 201, 205, 213, 214, 224, 227, 230, 236, 311, 321, 376, 441, 458, 460, 461, 462, 463, 472, 506, 509, 539, 540, 541, 543, 545, 546, 547, 548, 551, 556, 559, 561, 564, 567, 569, 572, 573, 596, 603, 605, 606, 644, 666, 668, 671, 712, 715, 722, 723, 724, 732, 738, 740, 750, 755, 759, 761], "broadcast_to": [6, 29, 539, 722], "can_cast": [6, 29, 539, 722, 729, 733], "occur": [6, 8, 20, 29, 31, 43, 109, 228, 244, 539, 541, 553, 554, 651, 652, 656, 657, 658, 659, 716, 721, 723, 726, 737], "accord": [6, 10, 16, 22, 29, 39, 45, 109, 119, 177, 188, 194, 201, 227, 238, 309, 312, 352, 400, 462, 465, 486, 487, 539, 541, 543, 546, 548, 556, 600, 608, 621, 671, 673, 690, 696, 712, 713, 716, 722, 727, 729, 733, 735], "as_n": [6, 7, 26, 29, 30, 112, 113, 114, 115, 116, 117, 123, 150, 151, 163, 539, 540, 722], "int32": [6, 9, 10, 18, 19, 22, 29, 32, 33, 41, 42, 87, 92, 98, 103, 106, 109, 111, 113, 115, 117, 120, 122, 123, 127, 130, 134, 138, 142, 144, 162, 255, 301, 317, 321, 425, 435, 436, 437, 463, 472, 508, 538, 539, 540, 543, 552, 553, 556, 646, 647, 648, 652, 664, 665, 670, 672, 722, 733, 735, 740], "finfo": [6, 29, 539, 735], "inform": [6, 11, 29, 34, 119, 122, 445, 533, 539, 543, 544, 549, 624, 702, 711, 712, 713, 714, 716, 720, 721, 726, 729, 730, 732, 734, 735, 758], "about": [6, 29, 119, 122, 539, 702, 706, 709, 711, 712, 713, 714, 715, 716, 719, 721, 722, 723, 727, 728, 732, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 748, 756, 757, 760], "8": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 51, 52, 59, 90, 91, 95, 98, 103, 112, 114, 115, 116, 119, 152, 169, 177, 179, 180, 184, 185, 188, 190, 192, 198, 201, 205, 206, 212, 213, 214, 219, 222, 223, 225, 226, 227, 232, 233, 236, 237, 238, 241, 242, 245, 246, 247, 253, 254, 256, 258, 259, 274, 282, 285, 287, 288, 289, 292, 299, 301, 303, 306, 309, 310, 311, 312, 321, 327, 328, 329, 330, 335, 336, 340, 341, 345, 346, 348, 350, 351, 356, 362, 373, 374, 376, 377, 378, 380, 381, 382, 386, 390, 395, 396, 405, 406, 408, 409, 412, 413, 422, 424, 436, 439, 440, 442, 448, 449, 451, 455, 456, 459, 462, 466, 470, 471, 472, 474, 475, 478, 481, 486, 487, 491, 501, 502, 503, 504, 524, 527, 529, 532, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 559, 563, 564, 567, 568, 569, 571, 575, 576, 577, 580, 581, 584, 585, 586, 589, 592, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 610, 617, 618, 620, 626, 633, 637, 645, 646, 647, 648, 650, 655, 656, 658, 660, 661, 663, 665, 666, 668, 670, 672, 673, 684, 713, 720, 721, 724, 735, 739, 743], "14": [6, 8, 9, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 106, 119, 122, 175, 180, 182, 189, 193, 219, 223, 227, 233, 240, 248, 281, 309, 310, 312, 321, 327, 328, 329, 330, 340, 347, 350, 351, 354, 386, 390, 395, 412, 435, 501, 524, 539, 541, 543, 544, 545, 546, 548, 550, 554, 556, 559, 560, 562, 564, 568, 577, 581, 589, 598, 620, 637, 646, 647, 648, 656, 665, 666, 720, 724, 735], "resolut": [6, 29, 119, 539, 714], "1e": [6, 9, 11, 14, 15, 17, 29, 32, 34, 37, 38, 40, 50, 119, 274, 287, 306, 315, 414, 415, 416, 492, 493, 501, 514, 515, 524, 525, 530, 532, 539, 543, 544, 546, 547, 551, 594, 603, 604, 605, 644, 685, 687, 688, 702, 720, 729, 732, 734, 744, 745], "06": [6, 18, 31, 34, 50, 59, 119, 176, 192, 309, 330, 340, 530, 535, 539, 544, 648, 735, 743], "min": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 99, 101, 119, 122, 226, 269, 271, 303, 310, 358, 456, 486, 487, 501, 538, 539, 541, 543, 546, 556, 585, 591, 594, 595, 601, 702], "4028235e": [6, 119, 539], "38": [6, 9, 31, 32, 41, 119, 244, 293, 306, 309, 321, 328, 347, 350, 351, 435, 539, 541, 546, 586, 724], "max": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 119, 122, 225, 309, 310, 312, 327, 328, 329, 345, 346, 347, 348, 350, 358, 407, 450, 451, 456, 472, 486, 487, 539, 541, 543, 546, 556, 585, 587, 590, 684, 688, 721, 733], "iinfo": [6, 29, 539], "integ": [6, 8, 9, 13, 14, 16, 18, 22, 23, 26, 31, 32, 33, 36, 37, 39, 41, 45, 46, 51, 52, 76, 90, 122, 123, 129, 133, 134, 138, 174, 184, 185, 186, 187, 188, 189, 190, 200, 201, 212, 224, 229, 232, 236, 237, 247, 248, 271, 272, 278, 281, 282, 303, 306, 309, 312, 316, 319, 321, 336, 341, 351, 386, 395, 400, 412, 420, 421, 422, 423, 424, 426, 427, 432, 434, 435, 436, 441, 442, 465, 481, 491, 523, 538, 539, 541, 543, 545, 546, 548, 552, 555, 556, 557, 558, 559, 560, 561, 563, 565, 567, 574, 576, 586, 600, 601, 615, 645, 646, 647, 648, 649, 650, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 714, 720, 722, 731, 734, 735, 740, 742], "119": [6, 122], "122": [6, 122, 192, 541], "int8": [6, 18, 28, 29, 41, 89, 115, 120, 122, 123, 127, 255, 301, 538, 539, 646, 722, 735], "128": [6, 8, 13, 29, 31, 36, 52, 122, 198, 309, 330, 340, 455, 465, 539, 541, 543, 545, 546, 560, 562, 567, 589, 702], "127": [6, 9, 14, 29, 32, 122, 295, 306, 539, 546, 581], "12": [6, 8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 40, 41, 45, 51, 52, 122, 177, 179, 184, 188, 189, 192, 194, 195, 196, 214, 227, 230, 237, 240, 247, 248, 263, 264, 285, 288, 289, 303, 306, 309, 312, 321, 327, 328, 329, 330, 332, 336, 337, 345, 346, 350, 351, 352, 384, 386, 390, 395, 412, 424, 435, 441, 451, 455, 456, 487, 493, 501, 515, 541, 543, 545, 546, 548, 550, 551, 552, 553, 554, 556, 559, 563, 568, 569, 577, 581, 585, 589, 595, 596, 598, 610, 614, 616, 618, 620, 637, 644, 646, 647, 648, 655, 656, 664, 665, 666, 670, 672, 713, 718, 720, 722, 724, 731], "54": [6, 8, 13, 31, 32, 36, 41, 122, 191, 192, 197, 212, 241, 247, 260, 303, 309, 321, 330, 340, 435, 541, 545, 546, 556, 569, 586, 589, 646, 647, 648, 666, 721, 724], "1220": [6, 122], "int16": [6, 9, 18, 22, 29, 41, 109, 113, 115, 120, 122, 129, 144, 255, 301, 321, 435, 436, 539, 556, 646, 664, 665, 670, 672, 722, 733, 735, 740], "32768": [6, 29, 122, 502, 543], "32767": [6, 29, 122], "is_bool_dtyp": [6, 29, 539], "is_float_dtyp": [6, 29, 539, 736], "is_int_dtyp": [6, 29, 539, 734, 736], "is_uint_dtyp": [6, 29, 539, 734, 736], "result_typ": [6, 29, 539, 722], "arrays_and_dtyp": [6, 29, 134, 539], "involv": [6, 29, 134, 177, 194, 201, 227, 232, 539, 541, 705, 707, 715, 721, 722, 724, 734, 738, 745, 755, 761], "_arraywithdevic": [7, 51], "dev": [7, 26, 30, 155, 162, 540, 713, 723, 729, 742, 744], "to_devic": [7, 30, 150, 540, 702], "move": [7, 9, 30, 32, 101, 164, 168, 172, 269, 303, 312, 399, 538, 540, 702, 714, 723, 736], "__dlpack__": [7, 30, 88, 168, 538, 540], "mai": [7, 8, 9, 14, 20, 21, 30, 31, 37, 44, 51, 52, 76, 88, 168, 194, 195, 201, 206, 214, 222, 223, 227, 228, 230, 245, 337, 454, 490, 538, 540, 541, 543, 546, 554, 555, 556, 592, 601, 656, 657, 658, 659, 660, 663, 667, 668, 669, 671, 706, 711, 712, 713, 714, 716, 720, 721, 722, 726, 729, 730, 731, 733, 734, 735, 738, 741, 742, 744, 762], "caveat": [7, 30, 168, 311, 375, 540], "portabl": [7, 30, 168, 540, 702, 753], "_arraywithelementwis": [8, 51], "ab": [8, 14, 24, 31, 47, 51, 52, 232, 274, 287, 306, 312, 407, 541, 546, 550, 585, 595, 601, 633, 636, 696, 710, 717, 722, 730, 733, 735], "absolut": [8, 9, 14, 24, 26, 31, 32, 37, 51, 174, 238, 274, 287, 290, 296, 306, 310, 311, 358, 370, 373, 374, 541, 546, 585, 586, 587, 592, 707, 713], "aco": [8, 31, 541], "real": [8, 9, 22, 31, 32, 45, 51, 61, 64, 67, 97, 98, 174, 175, 176, 177, 179, 180, 181, 182, 183, 192, 194, 195, 197, 199, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 227, 229, 230, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 280, 290, 306, 309, 310, 331, 352, 357, 358, 535, 538, 541, 546, 553, 556, 578, 579, 580, 585, 592, 594, 595, 598, 601, 654, 667, 669, 670, 671, 672, 720, 757], "invers": [8, 9, 14, 31, 32, 37, 175, 176, 179, 180, 181, 182, 183, 309, 319, 331, 340, 342, 426, 541, 546, 582, 586, 590, 690, 722, 747], "cosin": [8, 31, 175, 176, 191, 192, 258, 261, 303, 309, 330, 340, 541, 684], "57": [8, 9, 31, 32, 152, 175, 176, 179, 180, 182, 189, 192, 193, 233, 249, 540, 541], "69": [8, 34, 41, 175, 217, 309, 330, 340, 528, 541, 544, 546, 585, 586, 647, 735, 743], "acosh": [8, 31, 120, 121, 539, 541, 710], "area": [8, 9, 31, 32, 36, 176, 180, 183, 309, 344, 351, 541, 705, 732, 738, 746, 751], "hyperbol": [8, 31, 176, 180, 183, 192, 240, 244, 245, 541], "sector": [8, 31, 176, 180, 183, 541, 705], "32": [8, 9, 18, 31, 32, 36, 37, 41, 51, 52, 61, 118, 176, 188, 189, 198, 212, 234, 237, 238, 276, 306, 309, 310, 312, 321, 328, 329, 330, 340, 350, 351, 356, 384, 435, 455, 471, 535, 539, 541, 543, 545, 546, 552, 553, 556, 560, 562, 563, 564, 567, 569, 584, 589, 646, 647, 648, 655, 666, 702, 721, 731, 743, 760], "99": [8, 9, 11, 29, 31, 41, 90, 176, 191, 296, 306, 501, 528, 538, 541, 543, 544, 550, 556, 629, 637, 647, 666], "second": [8, 9, 11, 14, 16, 20, 31, 32, 33, 34, 37, 39, 43, 51, 52, 73, 101, 132, 140, 177, 182, 184, 186, 187, 188, 189, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 227, 230, 232, 243, 269, 274, 283, 285, 286, 287, 293, 297, 298, 303, 306, 310, 311, 312, 319, 321, 356, 357, 358, 362, 376, 406, 411, 421, 423, 427, 434, 437, 447, 496, 518, 524, 525, 530, 537, 538, 539, 541, 543, 544, 546, 548, 549, 550, 554, 574, 577, 578, 579, 581, 584, 589, 591, 592, 594, 596, 600, 617, 618, 623, 626, 656, 657, 658, 688, 706, 713, 716, 719, 722, 724, 727, 732, 733, 735, 737, 742, 760], "compat": [8, 14, 16, 19, 22, 23, 31, 37, 39, 42, 45, 46, 51, 52, 108, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 248, 539, 541, 546, 548, 553, 556, 557, 574, 587, 590, 593, 596, 600, 601, 613, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 702, 705, 718, 728, 733, 734, 736, 740, 748], "multipli": [8, 9, 13, 22, 31, 32, 36, 49, 177, 243, 288, 309, 310, 344, 366, 367, 435, 436, 541, 545, 556, 568, 664, 670, 714, 717, 718, 720, 724], "determin": [8, 9, 14, 16, 20, 23, 26, 31, 32, 33, 37, 44, 46, 49, 51, 52, 87, 109, 111, 118, 124, 125, 126, 127, 129, 130, 131, 146, 156, 158, 159, 170, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 199, 201, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 224, 227, 232, 236, 239, 240, 241, 242, 243, 244, 245, 248, 290, 295, 306, 309, 310, 311, 321, 344, 358, 373, 434, 444, 447, 468, 469, 473, 474, 475, 476, 477, 478, 504, 522, 538, 539, 540, 541, 543, 546, 548, 549, 554, 557, 573, 574, 575, 577, 581, 582, 584, 586, 587, 589, 590, 592, 593, 598, 600, 601, 607, 622, 623, 624, 656, 657, 658, 659, 660, 674, 675, 683, 687, 704, 720, 722, 723, 725, 729, 733, 735, 737, 738], "15": [8, 9, 10, 14, 18, 22, 28, 29, 31, 32, 33, 36, 37, 39, 41, 45, 52, 91, 119, 177, 184, 188, 194, 205, 212, 213, 219, 227, 236, 237, 238, 285, 299, 306, 307, 309, 310, 312, 321, 327, 328, 345, 347, 350, 351, 356, 386, 390, 395, 412, 435, 451, 455, 456, 459, 470, 471, 496, 501, 518, 538, 539, 541, 543, 545, 546, 548, 550, 552, 553, 554, 556, 559, 569, 577, 580, 581, 582, 589, 595, 596, 614, 620, 625, 637, 646, 647, 654, 656, 664, 665, 666, 713, 721, 724, 731, 758], "angl": [8, 31, 182, 192, 240, 245, 286, 306, 541, 747], "deg": [8, 31, 178, 541], "radian": [8, 9, 31, 32, 175, 178, 179, 181, 182, 191, 193, 233, 239, 244, 295, 306, 541, 725], "degre": [8, 9, 22, 31, 32, 45, 178, 193, 233, 312, 406, 541, 556, 671, 673, 754], "1j": [8, 31, 32, 178, 179, 191, 192, 197, 199, 211, 234, 239, 240, 244, 276, 501, 541, 543], "2j": [8, 9, 31, 32, 178, 207, 276, 309, 336, 341, 502, 541, 543], "3j": [8, 9, 31, 32, 178, 211, 234, 276, 306, 541], "35619449": [8, 178, 541], "78539816": [8, 178, 541], "135": [8, 178, 450, 541, 543], "45": [8, 9, 22, 31, 32, 34, 36, 41, 52, 178, 182, 194, 237, 238, 293, 306, 309, 321, 330, 340, 351, 435, 441, 524, 530, 541, 544, 546, 548, 556, 589, 615, 647, 648, 666], "asin": [8, 31, 541], "sine": [8, 31, 179, 180, 239, 240, 541], "927": [8, 31, 179], "asinh": [8, 31, 179, 541], "atan": [8, 31, 541], "tangent": [8, 31, 181, 182, 183, 244, 245, 541, 725], "785": [8, 31, 181, 182, 541], "atan2": [8, 31, 541], "quotient": [8, 31, 182, 194, 201, 541], "245": [8, 36, 182, 545, 568, 569], "68": [8, 41, 62, 90, 182, 309, 330, 340, 535, 538, 541, 551, 644, 647, 648], "588": [8, 182, 541], "inf": [8, 9, 10, 14, 31, 32, 33, 37, 182, 199, 208, 209, 210, 211, 215, 216, 228, 250, 290, 301, 306, 310, 321, 354, 437, 468, 522, 536, 541, 543, 546, 585, 601, 710, 722, 731], "36": [8, 9, 13, 22, 32, 33, 37, 182, 237, 238, 285, 306, 309, 321, 330, 340, 435, 455, 456, 502, 541, 543, 546, 550, 556, 569, 586, 589, 599, 636, 666], "75": [8, 9, 31, 32, 33, 36, 41, 68, 92, 180, 182, 194, 207, 261, 284, 285, 303, 306, 351, 442, 457, 470, 501, 535, 538, 541, 543, 546, 550, 552, 559, 582, 589, 633, 648], "52": [8, 31, 33, 34, 41, 182, 192, 194, 321, 435, 455, 456, 471, 524, 541, 543, 544, 545, 546, 556, 569, 589, 648, 666, 696], "719": [8, 182, 541], "197": [8, 182, 541], "atanh": [8, 31, 541], "549": [8, 31, 36, 183, 541, 545, 569], "47": [8, 9, 14, 18, 31, 32, 33, 34, 36, 41, 183, 241, 309, 321, 328, 346, 347, 435, 455, 456, 528, 541, 543, 544, 545, 546, 552, 569, 581, 647, 648], "bitwise_and": [8, 31, 541], "11": [8, 9, 10, 13, 14, 18, 22, 31, 32, 33, 36, 37, 39, 41, 45, 52, 177, 181, 184, 199, 236, 237, 243, 289, 306, 309, 310, 312, 327, 328, 340, 345, 346, 348, 350, 351, 359, 384, 386, 390, 395, 397, 412, 435, 436, 449, 455, 456, 462, 471, 487, 541, 543, 545, 546, 547, 548, 550, 552, 553, 554, 556, 559, 560, 568, 569, 577, 580, 581, 582, 584, 585, 589, 594, 595, 603, 605, 610, 615, 616, 618, 620, 631, 633, 643, 646, 647, 648, 655, 656, 664, 665, 666, 673, 720, 721, 722, 724, 731], "bitwise_invert": [8, 31, 541], "bitiwse_invert": [8, 185], "bitwise_left_shift": [8, 31, 541], "bitwise_or": [8, 31, 541], "bitwise_right_shift": [8, 31, 51, 541], "64": [8, 9, 13, 31, 32, 33, 36, 37, 41, 45, 52, 118, 188, 198, 232, 241, 242, 282, 306, 309, 330, 340, 455, 456, 502, 530, 539, 541, 543, 544, 545, 546, 550, 556, 560, 562, 564, 567, 586, 589, 599, 633, 637, 647, 666, 670, 702, 713, 743, 744, 760], "16": [8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 51, 52, 122, 188, 217, 237, 244, 282, 285, 289, 306, 309, 312, 321, 327, 328, 330, 336, 340, 341, 345, 346, 348, 351, 390, 435, 441, 456, 459, 481, 501, 502, 534, 539, 541, 543, 544, 545, 546, 548, 550, 552, 553, 556, 567, 569, 573, 577, 580, 581, 589, 595, 620, 633, 637, 646, 647, 648, 655, 665, 666, 702, 714, 724, 743], "bitwise_xor": [8, 31, 51, 541], "89": [8, 18, 29, 31, 32, 41, 52, 122, 189, 539, 541, 546, 556, 596, 647, 648, 672], "51": [8, 9, 31, 32, 33, 41, 189, 227, 240, 310, 330, 372, 541, 648], "18": [8, 9, 18, 31, 32, 36, 37, 41, 45, 62, 189, 194, 236, 240, 249, 285, 306, 309, 312, 330, 336, 340, 341, 345, 348, 351, 390, 535, 541, 546, 552, 556, 563, 577, 584, 589, 646, 647, 648, 665, 666, 670, 720, 724], "19": [8, 9, 18, 31, 32, 36, 37, 41, 180, 189, 217, 227, 244, 309, 310, 312, 321, 329, 330, 341, 345, 348, 351, 356, 390, 435, 541, 546, 550, 552, 555, 577, 585, 598, 636, 646, 647, 648, 663, 724], "26": [8, 9, 17, 18, 32, 33, 34, 41, 189, 194, 240, 309, 310, 330, 367, 470, 524, 541, 543, 544, 545, 546, 550, 551, 556, 567, 577, 589, 596, 626, 644, 646, 647, 666], "27": [8, 9, 14, 18, 31, 32, 36, 37, 41, 45, 188, 189, 192, 232, 240, 241, 282, 306, 309, 330, 340, 471, 541, 543, 546, 550, 556, 584, 589, 599, 626, 633, 647, 666, 670], "23": [8, 9, 14, 18, 28, 31, 32, 33, 36, 41, 91, 189, 192, 209, 210, 211, 234, 236, 237, 238, 240, 247, 276, 277, 306, 309, 312, 321, 327, 328, 330, 340, 345, 346, 347, 348, 351, 384, 435, 441, 538, 541, 545, 546, 550, 553, 564, 577, 581, 585, 595, 626, 633, 637, 646, 647, 648, 655, 702, 721, 735, 740], "20": [8, 9, 13, 18, 22, 31, 32, 33, 36, 37, 41, 45, 189, 193, 197, 233, 237, 241, 285, 287, 289, 306, 309, 312, 327, 329, 345, 348, 351, 384, 455, 462, 463, 465, 487, 491, 501, 541, 543, 546, 552, 553, 556, 559, 560, 570, 577, 582, 585, 589, 596, 646, 654, 655, 664, 665, 666, 670, 672, 702, 721, 738, 742], "74": [8, 41, 189, 219, 541, 546, 586], "41": [8, 9, 14, 31, 32, 33, 36, 37, 62, 181, 189, 227, 241, 309, 310, 317, 321, 328, 346, 351, 364, 425, 435, 450, 451, 535, 541, 543, 546, 556, 573, 581, 672], "59": [8, 189, 321, 435], "24": [8, 9, 14, 22, 31, 32, 33, 36, 37, 41, 51, 189, 197, 212, 214, 227, 237, 238, 241, 285, 288, 306, 309, 321, 327, 329, 330, 340, 345, 346, 347, 348, 351, 435, 455, 456, 541, 543, 546, 550, 556, 559, 577, 585, 589, 626, 637, 646, 647, 648, 664, 666, 726, 743], "ceil": [8, 9, 31, 32, 49, 76, 309, 327, 328, 329, 345, 346, 347, 350, 538, 541, 684, 732], "round": [8, 9, 31, 32, 49, 50, 177, 190, 194, 200, 201, 227, 241, 247, 248, 281, 306, 541, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747], "co": [8, 10, 31, 192, 197, 199, 240, 459, 541, 543, 705, 711, 722, 740, 747], "express": [8, 9, 31, 32, 175, 179, 181, 182, 191, 193, 233, 239, 244, 295, 306, 541, 690, 725, 733, 740, 745, 755, 756], "416": [8, 191, 541], "540": [8, 191], "990": [8, 191], "cosh": [8, 31, 191, 541], "76": [8, 22, 29, 31, 32, 41, 122, 176, 192, 240, 340, 539, 541, 546, 550, 556, 596, 633, 647, 666], "81": [8, 14, 29, 31, 37, 41, 122, 192, 217, 242, 321, 435, 539, 541, 546, 550, 552, 556, 581, 586, 599, 633, 648, 666, 735], "deg2rad": [8, 31, 541], "convers": [8, 9, 32, 193, 233, 488, 498, 543, 706, 712, 718, 739, 741, 745, 747, 748, 750, 754, 761], "90": [8, 9, 31, 32, 189, 193, 233, 237, 296, 306, 312, 321, 406, 435, 541, 546, 556, 589, 666, 705], "180": [8, 31, 193, 233, 541], "270": [8, 31, 193, 233, 541], "360": [8, 31, 193, 233, 541, 721], "71": [8, 31, 36, 193, 233, 351, 541], "28": [8, 9, 13, 17, 31, 32, 33, 36, 37, 41, 45, 193, 217, 233, 309, 310, 330, 340, 356, 441, 470, 524, 541, 543, 544, 545, 546, 551, 556, 560, 562, 564, 567, 569, 589, 644, 646, 647, 648, 666, 670, 702], "divid": [8, 9, 10, 16, 26, 31, 32, 39, 51, 52, 201, 315, 414, 415, 416, 501, 541, 543, 548, 615, 717, 720, 724, 727, 735], "dividend": [8, 31, 194, 201, 236, 248, 541], "divisor": [8, 9, 11, 22, 31, 32, 34, 45, 194, 201, 204, 205, 236, 248, 309, 312, 327, 328, 329, 386, 395, 412, 524, 525, 530, 541, 544, 556, 671, 673, 684, 688], "375": [8, 195, 230], "erf": [8, 31, 541], "exponenti": [8, 9, 31, 32, 196, 197, 199, 219, 232, 254, 301, 310, 365, 541], "gauss": [8, 31, 196, 541], "error": [8, 9, 13, 26, 31, 32, 36, 59, 196, 244, 310, 311, 321, 322, 369, 372, 373, 374, 441, 443, 490, 535, 541, 543, 545, 546, 556, 572, 592, 595, 667, 669, 685, 686, 688, 699, 706, 707, 711, 713, 714, 716, 717, 718, 721, 722, 723, 724, 727, 728, 733, 735, 736, 737, 742, 748, 755], "328": [8, 196, 244, 541], "677": [8, 196, 541], "842": [8, 196, 244, 541], "exp": [8, 9, 31, 32, 65, 67, 199, 219, 232, 251, 301, 309, 336, 341, 535, 541, 546, 592, 731, 733], "evalu": [8, 9, 26, 31, 32, 197, 199, 215, 216, 217, 218, 222, 229, 231, 238, 242, 290, 310, 312, 367, 397, 534, 541, 544, 550, 557, 635, 636, 674, 675, 685, 686, 714, 720, 722, 729, 730, 755], "71828198": [8, 31, 197], "38905573": [8, 31, 197], "08553696": [8, 31, 197, 541], "exp2": [8, 31, 541], "power": [8, 9, 10, 14, 31, 32, 33, 37, 51, 52, 188, 197, 198, 232, 273, 282, 303, 306, 492, 502, 514, 541, 543, 546, 550, 586, 599, 631, 683, 737, 742, 743, 744, 755, 757, 761], "expm1": [8, 31, 541, 722], "244": [8, 199, 702], "918": [8, 199], "48": [8, 9, 31, 32, 33, 34, 41, 61, 176, 199, 241, 309, 328, 329, 330, 340, 346, 347, 350, 470, 524, 528, 535, 541, 543, 544, 546, 550, 556, 589, 626, 647, 666], "_": [8, 26, 31, 34, 109, 197, 199, 207, 208, 223, 321, 372, 434, 455, 524, 525, 539, 541, 543, 544, 546, 548, 550, 556, 592, 595, 621, 632, 671, 708, 712, 725, 730, 732, 735, 743], "147": [8, 199, 541], "floor": [8, 9, 31, 32, 49, 188, 201, 309, 327, 328, 329, 331, 345, 346, 347, 350, 541, 684, 732], "floor_divid": [8, 31, 541], "fmin": [8, 31, 541], "minimum": [8, 9, 10, 16, 19, 22, 31, 32, 33, 39, 42, 45, 174, 202, 229, 271, 282, 303, 306, 312, 321, 400, 432, 436, 492, 493, 501, 502, 514, 515, 541, 543, 548, 553, 556, 606, 652, 667, 669, 737, 752, 758, 762], "gcd": [8, 31, 541, 722], "greater": [8, 9, 13, 16, 18, 31, 32, 36, 41, 51, 52, 89, 175, 176, 179, 180, 182, 183, 186, 188, 194, 200, 201, 215, 217, 232, 236, 238, 240, 241, 245, 246, 247, 275, 306, 309, 331, 336, 341, 538, 541, 545, 546, 548, 552, 572, 574, 586, 616, 648, 714, 734], "greater_equ": [8, 31, 51, 52, 219, 541], "imaginari": [8, 31, 51, 61, 64, 67, 97, 98, 175, 176, 177, 192, 194, 195, 197, 199, 207, 227, 229, 230, 237, 240, 241, 245, 276, 306, 310, 358, 535, 538, 541, 553, 654, 724], "4j": [8, 31, 207, 502, 541, 543], "6j": [8, 9, 31, 207, 211, 276, 541], "isfinit": [8, 31, 541, 733], "out_i": [8, 31, 208, 209, 210, 211, 234, 541], "self_i": [8, 31, 208, 209, 210, 211, 234], "finit": [8, 31, 174, 175, 176, 177, 180, 182, 183, 192, 194, 195, 197, 199, 201, 208, 209, 215, 217, 227, 228, 230, 232, 236, 240, 241, 245, 541], "isinf": [8, 31, 541], "detect_posit": [8, 31, 209, 541], "detect_neg": [8, 31, 209, 541], "detect": [8, 26, 31, 209, 541, 550, 625, 636, 712, 713, 718, 720, 721, 727, 735, 743, 744], "isnan": [8, 31, 541], "isreal": [8, 31, 541], "5j": [8, 31, 32, 211, 234, 276, 306, 541], "lcm": [8, 31, 541, 722], "common": [8, 9, 26, 31, 133, 204, 212, 277, 282, 306, 539, 541, 704, 707, 710, 712, 713, 719, 722, 723, 724, 729, 730, 733, 736, 738, 748, 752, 755, 762], "21": [8, 9, 10, 18, 28, 31, 32, 36, 37, 41, 45, 51, 93, 122, 177, 180, 182, 188, 189, 212, 227, 292, 309, 310, 312, 321, 327, 330, 340, 345, 348, 351, 352, 354, 384, 435, 487, 538, 539, 541, 546, 547, 550, 556, 577, 589, 605, 631, 646, 647, 664, 665, 666, 726, 731], "60": [8, 22, 31, 33, 41, 45, 178, 212, 463, 471, 487, 501, 523, 541, 543, 546, 550, 556, 589, 628, 646, 664, 666, 670, 721], "less": [8, 9, 14, 18, 22, 31, 32, 37, 41, 51, 52, 175, 176, 179, 182, 183, 190, 194, 201, 215, 216, 217, 218, 232, 236, 238, 241, 294, 306, 309, 310, 321, 330, 331, 340, 369, 372, 434, 437, 541, 546, 552, 556, 585, 586, 587, 590, 601, 648, 671, 673, 684, 705, 713, 714, 720, 722, 724, 726, 728, 733, 735, 738, 739, 740, 755, 757], "less_equ": [8, 31, 51, 52, 541, 726], "61": [8, 9, 14, 31, 32, 34, 38, 41, 180, 215, 217, 242, 330, 524, 541, 544, 545, 546, 547, 567, 581, 603, 605, 648], "log10": [8, 31, 541], "logarithm": [8, 31, 197, 215, 216, 217, 218, 219, 280, 290, 306, 541, 546, 592], "602": [8, 216, 541], "699": [8, 216, 541], "log1p": [8, 31, 541, 731], "693": [8, 31, 66, 180, 217, 535, 541, 547, 605], "001": [8, 9, 17, 29, 32, 34, 119, 217, 234, 276, 287, 306, 525, 539, 541, 544, 551, 644, 743, 744], "0953": [8, 31, 215, 217, 541], "log2": [8, 31, 220, 541], "logaddexp": [8, 31, 541], "logaddexp2": [8, 31, 541, 710], "169925": [8, 31, 220, 541], "logical_and": [8, 31, 541, 733, 738, 762], "logical_not": [8, 31, 541, 722], "logical_or": [8, 31, 541, 762], "conform": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 321, 434, 538, 539, 541, 546, 548, 553, 554, 555, 556, 557, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 607, 609, 610, 611, 613, 614, 616, 617, 621, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 725, 727], "api": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 132, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 321, 434, 538, 539, 541, 546, 548, 553, 554, 555, 556, 557, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 607, 609, 610, 611, 613, 614, 616, 617, 621, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 703, 704, 710, 713, 714, 715, 717, 719, 722, 723, 724, 725, 726, 728, 730, 732, 733, 734, 735, 738, 739, 741, 743, 748, 749, 750, 751, 753, 755, 757, 760, 762], "extens": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 276, 306, 321, 434, 538, 539, 541, 546, 548, 553, 554, 555, 556, 557, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 607, 609, 610, 611, 613, 614, 616, 617, 621, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 702, 708, 711, 713, 714, 725, 727, 735, 752, 755, 762], "api_specif": [8, 31, 109, 197, 207, 208, 223, 539, 541, 548, 556, 621, 671, 725], "array_api": [8, 31, 109, 197, 207, 208, 223, 539, 541, 546, 548, 556, 592, 621, 671, 725], "html": [8, 31, 101, 109, 197, 207, 208, 223, 269, 303, 321, 434, 538, 539, 541, 546, 548, 556, 592, 621, 671, 705, 725], "logical_xor": [8, 31, 541], "maximum": [8, 9, 10, 11, 16, 19, 22, 26, 31, 32, 33, 34, 39, 42, 45, 52, 167, 283, 296, 306, 309, 310, 312, 321, 325, 335, 369, 372, 400, 435, 437, 450, 451, 459, 530, 540, 541, 543, 544, 546, 548, 550, 553, 556, 585, 606, 637, 651, 652, 667, 669, 714, 724, 732, 743, 762], "use_wher": [8, 31, 225, 226, 541], "formula": [8, 9, 31, 194, 216, 218, 225, 226, 227, 289, 306, 315, 414, 416, 541], "clip": [8, 9, 16, 31, 32, 33, 39, 225, 226, 312, 384, 405, 408, 450, 451, 541, 543, 548, 720, 729, 731, 732, 743, 745], "than": [8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 26, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 51, 52, 76, 89, 119, 167, 175, 176, 179, 180, 182, 183, 186, 188, 190, 194, 200, 201, 215, 216, 217, 218, 225, 227, 232, 236, 238, 240, 241, 245, 246, 247, 252, 258, 274, 275, 287, 294, 303, 306, 309, 310, 312, 321, 330, 331, 336, 337, 340, 341, 342, 352, 353, 354, 369, 372, 391, 392, 435, 436, 437, 474, 475, 478, 495, 517, 538, 539, 540, 541, 543, 545, 546, 548, 552, 553, 554, 556, 572, 574, 584, 585, 586, 587, 590, 601, 606, 610, 616, 648, 654, 657, 658, 659, 664, 665, 670, 671, 672, 673, 684, 705, 708, 710, 714, 716, 720, 721, 722, 724, 726, 732, 733, 734, 735, 736, 737, 738, 740, 743, 744, 745, 748, 749, 752, 753, 754, 755, 761, 762], "exce": [8, 9, 32, 226, 312, 409, 541], "product": [8, 9, 13, 14, 22, 31, 32, 36, 37, 45, 49, 227, 310, 321, 356, 361, 362, 363, 366, 367, 368, 435, 436, 541, 545, 546, 556, 571, 572, 574, 581, 584, 589, 596, 600, 664, 665, 666, 670, 671, 712, 740, 755, 757], "30": [8, 9, 32, 33, 41, 45, 52, 227, 285, 293, 306, 309, 312, 330, 340, 351, 384, 425, 455, 457, 462, 463, 470, 471, 487, 496, 501, 541, 543, 546, 550, 556, 582, 589, 634, 646, 647, 665, 666, 670, 683, 721], "56": [8, 9, 13, 18, 31, 32, 36, 93, 227, 241, 244, 247, 309, 330, 340, 524, 538, 541, 544, 545, 546, 550, 556, 560, 562, 564, 569, 589, 625, 647, 666, 724], "nan_to_num": [8, 31, 541], "posinf": [8, 31, 228, 541], "neginf": [8, 31, 228, 541], "veri": [8, 31, 228, 274, 287, 306, 541, 546, 592, 704, 705, 711, 712, 713, 714, 719, 720, 722, 723, 724, 726, 728, 729, 732, 733, 734, 735, 736, 738, 741, 743, 744, 745, 748, 751, 752, 753, 755, 756, 757, 760, 761, 762], "5e": [8, 11, 31, 32, 228, 293, 530, 541, 544], "not_equ": [8, 31, 51, 52, 541], "pow": [8, 31, 51, 52, 541, 716], "expon": [8, 9, 10, 32, 33, 232, 282, 284, 288, 306, 502, 541, 543, 546, 586], "25": [8, 10, 14, 15, 18, 22, 25, 31, 32, 33, 36, 37, 40, 41, 45, 51, 52, 67, 92, 177, 178, 188, 194, 196, 207, 212, 227, 232, 235, 237, 240, 241, 242, 247, 261, 303, 311, 321, 351, 373, 375, 376, 435, 442, 470, 471, 487, 501, 538, 541, 543, 546, 547, 550, 551, 556, 559, 573, 577, 582, 599, 604, 626, 633, 637, 644, 646, 647, 648, 665, 666, 668, 673, 720, 731], "rad2deg": [8, 31, 541], "286": [8, 32, 233], "458": [8, 233], "573": [8, 233, 541], "hand": [8, 702, 716, 722, 723, 727, 729, 735, 748], "reciproc": [8, 31, 541], "333": [8, 31, 194, 235, 451, 541, 543], "remaind": [8, 9, 16, 26, 31, 32, 39, 203, 541, 548, 615, 716, 732], "modulu": [8, 31, 236, 541, 732], "sign": [8, 9, 14, 20, 22, 31, 32, 37, 49, 76, 174, 175, 176, 177, 180, 182, 183, 188, 192, 194, 197, 199, 201, 227, 229, 236, 240, 241, 245, 277, 306, 310, 312, 321, 370, 407, 435, 436, 538, 541, 546, 554, 556, 592, 656, 657, 658, 659, 664, 665, 670, 672, 705, 713, 740, 745], "x2_i": [8, 31, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 541, 716], "decim": [8, 31, 237, 541, 737], "94": [8, 9, 11, 18, 31, 32, 34, 41, 161, 237, 238, 296, 306, 340, 528, 540, 544, 648], "256": [8, 33, 237, 238, 502, 545, 560, 562, 564], "0001": [8, 9, 32, 237, 238, 310, 369, 372, 688], "67": [8, 10, 14, 31, 33, 36, 41, 51, 189, 192, 197, 237, 238, 240, 247, 321, 351, 435, 455, 456, 501, 527, 529, 541, 543, 544, 546, 581, 648], "678": [8, 237, 238], "33": [8, 18, 22, 31, 33, 34, 36, 180, 181, 188, 237, 309, 312, 321, 328, 350, 351, 384, 435, 451, 501, 528, 541, 543, 544, 545, 546, 550, 556, 568, 569, 589, 643, 646, 666, 673], "np_variant": [8, 31, 238, 541], "sin": [8, 10, 31, 192, 197, 199, 240, 459, 541, 543, 717, 740], "841": [8, 25, 31, 59, 239, 535, 541], "909": [8, 31, 33, 239, 541], "141": [8, 31, 106, 239, 539, 541], "sinh": [8, 31, 239, 541], "63": [8, 25, 31, 36, 37, 67, 233, 240, 241, 309, 321, 330, 340, 351, 435, 541, 546, 550, 556, 573, 589, 626, 637, 666], "232": [8, 31, 240, 541], "sqrt": [8, 9, 31, 32, 309, 331, 336, 337, 341, 342, 541, 683, 702], "squar": [8, 9, 14, 31, 32, 37, 241, 310, 311, 321, 357, 365, 373, 434, 526, 527, 529, 534, 541, 544, 546, 550, 573, 575, 576, 578, 579, 580, 582, 586, 592, 593, 594, 599, 631, 702], "root": [8, 31, 241, 541, 682, 709, 713, 714, 719, 733, 743], "73": [8, 37, 241, 321, 435, 546, 552, 573, 647, 735], "44": [8, 9, 18, 31, 32, 41, 180, 227, 237, 241, 242, 277, 306, 309, 329, 330, 541, 545, 546, 550, 553, 556, 568, 589, 633, 646, 647, 655, 666], "subtract": [8, 31, 51, 52, 89, 312, 400, 538, 541, 717, 720, 724], "tan": [8, 31, 446, 541, 543, 725, 728, 729, 732, 733, 740], "tanh": [8, 31, 244, 541, 680, 740], "762": [8, 31, 245, 541], "964": [8, 31, 245, 541], "trapz": [8, 31, 541], "dx": [8, 31, 246, 541], "apart": [8, 31, 246, 541], "singl": [8, 18, 26, 31, 41, 246, 287, 306, 310, 316, 367, 421, 509, 522, 526, 541, 543, 544, 545, 552, 554, 571, 646, 647, 648, 656, 684, 706, 712, 713, 714, 716, 721, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 743, 744, 745, 748], "trapezoid": [8, 31, 246, 541], "trunc": [8, 31, 541], "025": [8, 247, 311, 376, 541, 549, 624], "trunc_divid": [8, 31, 541], "_arraywithactivationsexperiment": [9, 51], "elu": [9, 32, 301, 680], "scaler": [9, 32, 249, 301, 735], "ep": [9, 14, 17, 32, 37, 40, 119, 250, 301, 310, 315, 358, 414, 415, 416, 539, 546, 551, 587, 590, 644, 680, 687], "outpu": [9, 32, 250, 301], "clamp": [9, 32, 250, 301, 745], "elementwis": [9, 17, 32, 40, 250, 252, 298, 301, 546, 551, 599, 644, 729, 736, 740], "19722438": [9, 32, 250, 301], "38629448": [9, 32, 250, 301], "38629436": [9, 32, 250, 301], "logsigmoid": [9, 32, 301, 680], "31326175": [9, 25, 251, 301], "126928": [9, 32, 251], "01814993": [9, 251], "00004578": [9, 251], "57888985": [9, 251], "31326169": [9, 32, 251, 301], "69314718": [9, 14, 25, 32, 37, 251, 290, 301, 306, 546, 592], "01104775": [9, 251], "prelu": [9, 32, 301, 680], "f": [9, 16, 32, 39, 252, 301, 312, 390, 548, 550, 613, 628, 632, 633, 634, 637, 642, 643, 702, 706, 707, 714, 715, 720, 721, 740, 743, 751], "unidirect": [9, 252, 301], "smaller": [9, 16, 22, 32, 39, 252, 274, 287, 301, 306, 309, 321, 337, 342, 352, 434, 435, 436, 455, 543, 548, 556, 606, 614, 664, 665, 670, 672, 702, 714, 726, 740], "relu6": [9, 32, 301, 680], "rectifi": [9, 25, 32, 61, 63, 64, 253, 256, 257, 301, 535], "unit": [9, 25, 32, 49, 59, 61, 62, 63, 64, 65, 66, 67, 249, 253, 254, 256, 257, 301, 417, 418, 535, 702, 713, 716, 722, 733, 734, 735, 748, 756, 759], "selu": [9, 32, 301, 680], "scale": [9, 13, 17, 32, 34, 36, 40, 61, 165, 166, 254, 285, 301, 306, 309, 310, 315, 326, 332, 333, 334, 342, 352, 362, 414, 415, 416, 531, 535, 540, 544, 545, 551, 568, 571, 572, 644, 683, 684, 688, 755, 757], "11133075": [9, 254, 301], "05070102": [9, 32, 254, 301], "10140204": [9, 254, 301], "15210295": [9, 254, 301], "20280409": [9, 254, 301], "25350523": [9, 254, 301], "30420589": [9, 254, 301], "35490704": [9, 254, 301], "silu": [9, 32, 301, 680], "26894143": [9, 256], "73105854": [9, 32, 256], "thresholded_relu": [9, 32, 301], "custom": [9, 32, 257, 300, 301, 308, 696, 705, 709, 721, 726, 730, 734, 735, 738, 744, 755, 759, 760, 761], "_arraywithconversionsexperiment": [9, 51], "_arraywithcreationexperiment": [9, 51], "blackman_window": [9, 32, 303], "period": [9, 32, 240, 244, 258, 260, 261, 263, 264, 303, 309, 343, 541, 714], "window": [9, 13, 32, 36, 258, 260, 261, 263, 264, 273, 303, 309, 327, 328, 329, 331, 345, 346, 347, 348, 350, 351, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684, 708, 714, 760], "symmetr": [9, 14, 32, 37, 49, 258, 260, 261, 263, 264, 303, 310, 312, 357, 400, 546, 573, 578, 579, 580, 602, 720], "38777878e": [9, 32, 258, 303], "40000000e": [9, 258, 303], "00000000e": [9, 32, 33, 258, 303, 309, 330, 336, 340, 341, 710], "00": [9, 10, 32, 33, 37, 199, 258, 303, 309, 330, 336, 340, 341, 459, 502, 541, 543, 546, 547, 580, 603, 727, 735], "30000000e": [9, 32, 258, 303], "eye_lik": [9, 32, 303], "elsewher": [9, 32, 87, 259, 303, 538, 553, 655, 713], "trilu": [9, 32, 303], "retain": [9, 101, 269, 270, 303, 526, 538, 544, 731, 750], "unsorted_segment_min": [9, 32, 303], "segment_id": [9, 32, 271, 272, 303, 690], "num_seg": [9, 32, 271, 272, 303, 690], "given": [9, 10, 15, 16, 18, 26, 32, 33, 34, 38, 39, 41, 49, 51, 52, 76, 85, 92, 93, 112, 113, 114, 115, 116, 128, 133, 152, 161, 163, 165, 166, 167, 169, 173, 246, 271, 274, 278, 279, 285, 286, 287, 289, 292, 303, 306, 309, 310, 311, 312, 315, 316, 321, 327, 328, 329, 330, 335, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 352, 358, 361, 374, 375, 376, 377, 378, 379, 387, 388, 389, 396, 398, 409, 413, 417, 418, 419, 420, 421, 422, 423, 424, 434, 435, 436, 437, 463, 486, 487, 497, 524, 525, 528, 530, 531, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 602, 603, 604, 605, 606, 609, 610, 611, 612, 614, 615, 619, 620, 632, 633, 642, 643, 646, 647, 648, 650, 662, 663, 664, 665, 680, 681, 683, 684, 686, 687, 688, 689, 690, 696, 705, 706, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 741, 742, 744, 747, 752, 757, 758, 761, 762], "segment": [9, 32, 271, 272, 303, 719, 724], "id": [9, 32, 150, 271, 272, 303, 540, 685, 686, 702, 708, 711, 713, 717, 719, 720, 727, 731, 735, 749], "drop": [9, 32, 271, 303, 311, 312, 375, 408, 683, 684, 713, 748], "gather": [9, 10, 32, 33, 271, 272, 303, 463, 465, 543, 762], "th": [9, 32, 271, 272, 279, 303, 306, 310, 321, 355, 360, 442], "identifi": [9, 32, 271, 272, 303, 716, 721, 735, 738], "total": [9, 22, 26, 32, 45, 52, 89, 169, 271, 272, 278, 303, 306, 538, 540, 553, 556, 654, 671, 673, 702, 706, 707, 714, 722, 723, 724, 735, 738, 743, 744, 748], "distinct": [9, 20, 32, 271, 272, 303, 554, 656, 657, 658, 659, 705, 713, 720, 725, 731, 732, 733, 739, 755], "unsorted_segment_sum": [9, 32, 303], "_arraywithdata_typeexperiment": [9, 51], "_arraywithdeviceexperiment": [9, 51], "_arraywithelementwiseexperiment": [9, 51], "allclos": [9, 32, 306], "rtol": [9, 14, 32, 37, 274, 287, 306, 546, 587, 590, 734], "atol": [9, 14, 32, 37, 274, 287, 306, 546, 587, 734], "08": [9, 22, 32, 41, 180, 274, 287, 306, 309, 330, 340, 541, 647, 648, 673, 727], "equal_nan": [9, 32, 274, 287, 306], "rel": [9, 11, 14, 16, 21, 28, 32, 34, 37, 39, 44, 51, 91, 274, 287, 306, 311, 321, 375, 434, 525, 528, 530, 531, 532, 544, 546, 548, 555, 577, 587, 590, 598, 610, 614, 660, 663, 714, 721, 734, 738, 755, 757], "toler": [9, 14, 32, 37, 274, 287, 306, 310, 358, 369, 372, 546, 587, 590, 716, 734, 755], "compar": [9, 10, 20, 21, 26, 32, 33, 44, 274, 287, 306, 444, 447, 543, 554, 555, 656, 657, 658, 659, 660, 663, 702, 718, 724, 726, 734, 735, 738, 743, 751, 753, 755, 761, 762], "altern": [9, 32, 49, 274, 280, 284, 286, 287, 288, 289, 291, 292, 293, 297, 298, 306, 702, 712, 713, 719, 732, 743, 758], "1e10": [9, 274, 287, 306], "00001e10": [9, 274, 287, 306], "00001e": [9, 274, 306], "005": [9, 32, 274, 287, 306, 373], "binar": [9, 32, 306], "outcom": [9, 32, 275, 285, 306], "comparison": [9, 32, 195, 230, 275, 306, 311, 375, 541, 546, 595, 726], "conj": [9, 32, 192, 197, 199, 240, 241, 245, 306, 541], "conjug": [9, 14, 32, 37, 276, 306, 309, 310, 316, 331, 353, 358, 366, 368, 422, 546, 584, 588, 596], "copysign": [9, 32, 306], "unsign": [9, 22, 32, 277, 306, 321, 435, 436, 556, 664, 665, 670, 672, 722, 740], "count_nonzero": [9, 32, 306], "keepdim": [9, 14, 16, 19, 22, 23, 26, 32, 37, 39, 42, 45, 46, 278, 292, 299, 306, 307, 321, 439, 440, 441, 442, 546, 548, 553, 556, 557, 585, 601, 620, 651, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 726, 733, 740], "count": [9, 16, 20, 23, 28, 32, 39, 43, 46, 89, 160, 278, 306, 312, 321, 411, 432, 437, 538, 540, 546, 548, 554, 557, 574, 600, 607, 610, 656, 657, 674, 675, 719, 720, 724, 743], "flatten": [9, 10, 14, 16, 19, 20, 32, 33, 37, 39, 42, 43, 278, 292, 306, 310, 312, 321, 355, 399, 403, 408, 411, 432, 439, 440, 441, 442, 455, 459, 543, 546, 548, 553, 554, 581, 589, 601, 607, 612, 614, 651, 652, 656, 657, 658, 659, 682, 702, 732, 738], "left": [9, 14, 19, 21, 32, 37, 42, 44, 70, 71, 186, 201, 278, 292, 299, 306, 307, 309, 310, 312, 321, 343, 357, 360, 364, 370, 371, 391, 401, 439, 440, 441, 442, 455, 537, 541, 543, 546, 553, 555, 578, 579, 585, 594, 599, 651, 662, 713, 714, 716, 719, 721, 722, 724], "diff": [9, 26, 32, 306, 724, 732], "prepend": [9, 32, 279, 306, 546, 548, 584, 609, 713], "append": [9, 14, 26, 32, 186, 279, 306, 541, 546, 548, 577, 584, 609, 702, 721, 735, 740, 743], "differenc": [9, 32, 279, 306], "taken": [9, 14, 32, 37, 279, 306, 309, 352, 546, 577, 712, 721, 733, 736, 745, 756], "prior": [9, 32, 279, 306, 316, 422, 546, 596, 726, 736], "expand": [9, 10, 16, 32, 33, 279, 306, 312, 459, 543, 548, 609, 720], "direct": [9, 32, 279, 284, 288, 293, 297, 306, 309, 312, 342, 352, 391, 392, 406, 555, 663, 712, 717, 719, 733, 738, 744, 745, 747, 751, 755, 756, 759], "except": [9, 10, 16, 18, 23, 26, 32, 33, 37, 41, 46, 108, 279, 296, 306, 316, 321, 421, 440, 441, 454, 472, 489, 504, 510, 539, 543, 546, 548, 552, 553, 557, 590, 607, 609, 617, 646, 647, 648, 654, 674, 675, 686, 702, 714, 715, 716, 717, 721, 722, 723, 725, 728, 732, 733, 736, 737, 738, 742, 748], "discret": [9, 32, 279, 306, 309, 330, 331, 336, 337, 340, 341, 342, 352, 547, 604, 684], "digamma": [9, 32, 306], "7549271": [9, 280, 306], "92278427": [9, 32, 280, 306], "9988394": [9, 280, 306], "fix": [9, 32, 49, 306, 310, 372, 545, 571, 702, 713, 714, 716, 722, 727, 735, 736], "nearest": [9, 32, 177, 194, 227, 237, 281, 306, 309, 321, 344, 442, 541, 738], "toward": [9, 16, 32, 39, 201, 248, 281, 293, 306, 312, 321, 406, 437, 541, 548, 614, 702, 708, 710, 713, 740, 751, 755], "float_pow": [9, 32, 306], "125": [9, 14, 37, 188, 282, 306, 311, 373, 541, 546, 599], "fmax": [9, 32, 306], "fmod": [9, 32, 541], "divis": [9, 10, 11, 32, 33, 34, 188, 194, 201, 203, 236, 238, 248, 312, 386, 493, 501, 515, 524, 525, 530, 541, 543, 544, 545, 558, 565, 566, 688, 729, 737], "frexp": [9, 32, 306], "next": [9, 32, 119, 284, 288, 293, 297, 306, 539, 683, 685, 686, 688, 706, 708, 712, 713, 714, 718, 722, 724, 725, 727, 730, 741, 742, 743, 755, 757], "represent": [9, 10, 26, 32, 33, 52, 104, 105, 119, 122, 147, 148, 174, 177, 184, 187, 189, 194, 201, 224, 227, 229, 244, 262, 284, 288, 293, 297, 303, 306, 445, 506, 536, 539, 540, 541, 543, 684, 747, 753, 754, 756, 760, 761], "gradient": [9, 32, 49, 167, 300, 306, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 549, 622, 623, 624, 688, 702, 715, 736, 743, 744, 747, 748, 755], "edge_ord": [9, 32, 285, 306], "r": [9, 14, 26, 32, 37, 49, 285, 300, 306, 308, 526, 544, 546, 548, 591, 620, 713, 714, 715, 731, 734], "estim": [9, 32, 285, 306, 321, 434], "boundari": [9, 18, 32, 41, 285, 306, 309, 344, 552, 648, 755], "note": [9, 10, 14, 16, 20, 32, 37, 39, 49, 89, 101, 133, 201, 236, 237, 244, 269, 270, 285, 303, 306, 309, 310, 312, 331, 357, 360, 368, 369, 372, 390, 539, 541, 545, 546, 548, 554, 556, 571, 578, 579, 592, 594, 613, 617, 657, 659, 668, 684, 708, 710, 712, 713, 714, 717, 722, 724, 725, 727, 732, 733, 734, 735, 736, 738], "over": [9, 14, 22, 23, 24, 29, 32, 36, 37, 45, 46, 47, 49, 72, 265, 266, 285, 292, 303, 306, 309, 310, 312, 319, 321, 323, 324, 325, 328, 337, 342, 346, 350, 351, 352, 368, 379, 390, 405, 408, 427, 437, 490, 523, 537, 543, 546, 551, 552, 556, 557, 574, 585, 596, 598, 600, 601, 644, 648, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 687, 693, 696, 702, 704, 706, 713, 714, 718, 724, 725, 731, 732, 734, 736, 740, 742, 748, 753, 755], "partial": [9, 26, 32, 120, 121, 153, 154, 285, 306, 310, 312, 321, 369, 401, 402, 403, 404, 441, 460, 461, 529, 539, 540, 543, 544, 546, 583, 685, 686, 714, 719, 738], "diment": [9, 285, 306], "40": [9, 10, 31, 32, 33, 41, 45, 52, 188, 192, 212, 241, 285, 306, 309, 328, 330, 340, 346, 455, 457, 462, 463, 487, 501, 523, 526, 541, 543, 544, 546, 550, 556, 582, 589, 634, 647, 666, 670, 702, 721], "80": [9, 32, 285, 306, 310, 321, 367, 435, 546, 550, 556, 589, 636, 666, 705], "72": [9, 18, 32, 34, 199, 285, 306, 309, 330, 340, 528, 541, 544, 546, 556, 589, 647, 666], "33333333": [9, 32, 235, 285, 306, 541], "hypot": [9, 32, 306], "hypotenus": [9, 286, 306], "4031": [9, 286, 306], "8102": [9, 286, 306], "isclos": [9, 32, 306, 716], "hold": [9, 10, 14, 22, 32, 37, 45, 49, 274, 287, 292, 306, 321, 386, 412, 435, 436, 441, 486, 487, 543, 546, 556, 585, 665, 702, 743, 756], "ldexp": [9, 32, 306], "lerp": [9, 32, 306], "end": [9, 32, 76, 182, 238, 289, 306, 312, 390, 400, 402, 403, 405, 538, 541, 682, 702, 713, 714, 718, 721, 732, 736, 738, 739, 747, 748, 753, 758], "weight": [9, 11, 13, 15, 32, 34, 36, 38, 49, 261, 289, 303, 306, 309, 310, 321, 335, 361, 432, 434, 437, 524, 525, 528, 530, 531, 532, 544, 545, 547, 549, 569, 570, 571, 572, 603, 624, 683, 684, 686, 688, 702, 720, 729, 735, 740, 744, 745, 754], "interpol": [9, 32, 289, 306, 309, 321, 442, 545, 571, 738, 755], "lgamma": [9, 306], "45373654": [9, 290, 306], "6477685": [9, 290, 306], "modf": [9, 32, 306], "fraction": [9, 32, 291, 306, 321, 442, 545, 568], "nansum": [9, 32, 306], "accumul": [9, 32, 292, 306], "nextaft": [9, 32, 306], "0e": [9, 11, 32, 34, 293, 306, 530, 544], "4013e": [9, 32, 293, 306], "4028e": [9, 32, 293, 306], "signbit": [9, 32, 306], "sinc": [9, 32, 306, 702, 705, 713, 714, 716, 717, 718, 720, 721, 722, 723, 726, 732, 733, 748, 755, 761], "637": [9, 32, 295, 306], "212": [9, 13, 32, 295, 306, 569], "0909": [9, 32, 295, 306], "sparsify_tensor": [9, 32, 306], "card": [9, 32, 296, 306, 760], "sparsifi": [9, 32, 296, 306], "arang": [9, 14, 22, 32, 37, 92, 296, 306, 309, 310, 327, 328, 329, 336, 341, 345, 346, 347, 348, 350, 354, 367, 392, 482, 523, 538, 543, 546, 549, 556, 585, 601, 624, 666, 702, 722, 732, 762], "reshap": [9, 13, 14, 16, 26, 32, 36, 37, 39, 296, 306, 309, 310, 312, 327, 328, 329, 332, 345, 346, 347, 348, 350, 354, 367, 390, 523, 543, 545, 546, 548, 561, 563, 567, 585, 601, 702, 732, 733, 735, 738, 740, 742, 745], "91": [9, 36, 41, 189, 296, 306, 351, 541, 545, 546, 552, 556, 569, 589, 647, 666], "92": [9, 10, 41, 296, 306, 522, 532, 544, 546, 575, 647, 648], "93": [9, 31, 33, 41, 152, 241, 296, 306, 455, 456, 540, 543, 647, 648], "95": [9, 11, 14, 18, 25, 34, 36, 41, 59, 296, 306, 351, 524, 528, 532, 535, 544, 546, 552, 581, 647, 648], "96": [9, 11, 31, 32, 33, 41, 191, 212, 244, 296, 306, 309, 330, 455, 456, 528, 541, 543, 544, 546, 556, 589, 648, 666], "97": [9, 11, 31, 34, 41, 180, 296, 306, 528, 541, 544, 647], "xlogi": [9, 32, 306], "0986": [9, 32, 297, 306], "3863": [9, 32, 297, 306], "0000": [9, 32, 260, 261, 264, 297, 303, 306, 310, 312, 365, 394], "zeta": [9, 32, 306], "q": [9, 13, 14, 32, 36, 37, 298, 306, 310, 321, 357, 442, 545, 546, 550, 572, 578, 579, 591, 633, 713, 714, 715, 734, 748], "0369": [9, 32, 298, 306], "2021": [9, 32, 298, 306, 702], "_arraywithgeneralexperiment": [9, 51], "init_valu": [9, 32, 36, 299, 307, 309, 351], "act": [9, 32, 299, 307, 714, 724, 737, 748, 762], "reduct": [9, 10, 15, 23, 26, 32, 33, 36, 38, 46, 299, 307, 309, 311, 351, 373, 374, 375, 376, 377, 456, 486, 487, 543, 547, 557, 603, 604, 605, 674, 675, 685, 722, 729, 732, 735, 742], "_arraywithgradientsexperiment": [9, 51], "_arraywithimageexperiment": [9, 51], "_arraywithlayersexperiment": [9, 51], "adaptive_avg_pool1d": [9, 32, 309], "1d": [9, 32, 49, 309, 310, 312, 321, 323, 330, 332, 334, 340, 366, 380, 384, 405, 408, 434, 684], "adapt": [9, 32, 34, 309, 323, 324, 325, 531, 544, 684, 688, 705], "averag": [9, 11, 15, 32, 34, 38, 309, 311, 321, 323, 324, 327, 328, 329, 374, 375, 376, 377, 434, 524, 525, 530, 544, 545, 547, 549, 571, 603, 622, 623, 683, 684], "pool": [9, 32, 36, 309, 323, 324, 325, 327, 328, 329, 345, 346, 347, 348, 351, 684, 713], "signal": [9, 32, 309, 323, 324, 325, 330, 331, 340, 684, 754, 755], "sever": [9, 32, 49, 309, 310, 323, 324, 325, 368, 713, 714, 736, 748, 753, 759], "plane": [9, 32, 194, 197, 199, 227, 239, 240, 241, 244, 309, 312, 323, 324, 325, 406, 541], "l_in": [9, 32, 309, 323], "batch": [9, 10, 14, 26, 32, 33, 37, 165, 166, 309, 315, 323, 324, 325, 331, 344, 414, 415, 416, 459, 462, 463, 523, 540, 543, 545, 546, 549, 551, 569, 571, 583, 601, 622, 623, 624, 644, 684, 687, 702, 720, 729, 734, 743, 753], "spatial": [9, 13, 32, 36, 309, 315, 323, 324, 325, 344, 351, 414, 415, 416, 545, 558, 559, 560, 561, 563, 565, 567, 687, 747], "Will": [9, 32, 309, 323, 324, 325, 682, 693, 748], "l_out": [9, 32, 309, 323], "adaptive_avg_pool2d": [9, 32, 309], "2d": [9, 32, 49, 259, 303, 309, 310, 312, 321, 324, 325, 332, 333, 366, 371, 381, 389, 434, 684, 702, 733, 738], "h_in": [9, 32, 309, 324, 325], "w_in": [9, 32, 309, 324, 325], "s_0": [9, 32, 309, 324, 325], "s_1": [9, 32, 309, 324, 325], "adaptive_max_pool2d": [9, 32, 309], "avg_pool1d": [9, 32, 309], "kernel": [9, 13, 32, 36, 309, 327, 328, 329, 345, 346, 347, 348, 545, 570, 740, 748, 755, 758, 759], "stride": [9, 13, 32, 33, 36, 51, 309, 312, 327, 328, 329, 345, 346, 347, 348, 350, 351, 378, 543, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684, 732, 736, 755], "pad": [9, 13, 16, 32, 36, 39, 309, 312, 327, 328, 329, 330, 331, 336, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 459, 543, 545, 548, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 608, 621, 684, 702], "data_format": [9, 13, 32, 36, 309, 315, 327, 328, 329, 332, 333, 334, 345, 346, 347, 348, 350, 414, 415, 416, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684, 687, 702], "nwc": [9, 13, 32, 36, 309, 327, 332, 345, 348, 545, 558, 559, 560, 565, 566, 684], "count_include_pad": [9, 32, 309, 327, 328, 329, 684], "ceil_mod": [9, 32, 309, 327, 328, 329, 345, 346, 347, 350, 684], "batch_siz": [9, 13, 18, 32, 36, 41, 309, 311, 327, 328, 329, 345, 346, 347, 348, 377, 545, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 645, 702, 743], "d_in": [9, 13, 32, 36, 309, 327, 328, 329, 331, 336, 337, 341, 345, 346, 347, 348, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "slide": [9, 13, 32, 36, 309, 327, 328, 329, 345, 346, 347, 348, 351, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684], "algorithm": [9, 13, 25, 32, 36, 59, 309, 310, 327, 328, 329, 344, 345, 346, 347, 348, 369, 370, 372, 546, 559, 561, 562, 563, 564, 567, 592, 680, 684, 722, 733, 738, 748, 755, 757, 759], "per": [9, 13, 32, 36, 309, 310, 312, 327, 328, 329, 345, 346, 347, 348, 368, 407, 545, 559, 561, 562, 563, 564, 567, 571, 684, 714, 721, 730, 733, 743], "ncw": [9, 13, 32, 36, 309, 327, 332, 333, 345, 348, 545, 558, 559, 560, 565, 566, 684], "avg_pool2d": [9, 32, 309], "nhwc": [9, 13, 32, 36, 309, 328, 333, 346, 350, 545, 558, 561, 562, 565, 566, 567, 684], "divisor_overrid": [9, 32, 309, 328, 329, 684], "nchw": [9, 13, 32, 36, 309, 328, 333, 346, 350, 545, 558, 561, 562, 565, 566, 567, 684, 702], "kernel_s": [9, 32, 309, 327, 328, 329, 684, 690], "max_pool2d": [9, 32, 309, 328], "46": [9, 18, 32, 36, 41, 93, 217, 238, 260, 303, 309, 328, 346, 347, 538, 541, 550, 626, 646, 647], "avg_pool3d": [9, 32, 309], "ndhwc": [9, 13, 32, 36, 309, 329, 334, 347, 545, 558, 563, 564, 565, 566, 684], "d": [9, 10, 13, 14, 16, 28, 32, 33, 36, 37, 39, 65, 93, 101, 134, 177, 194, 195, 227, 230, 269, 303, 309, 310, 312, 316, 319, 327, 328, 329, 336, 341, 345, 346, 347, 348, 350, 355, 367, 382, 386, 388, 391, 395, 408, 412, 420, 426, 447, 535, 538, 539, 541, 545, 546, 548, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 576, 577, 581, 585, 589, 599, 615, 628, 632, 633, 634, 637, 642, 643, 702, 705, 706, 707, 713, 715, 718, 719, 720, 731, 735, 738, 743, 751], "volum": [9, 13, 32, 36, 309, 329, 331, 336, 337, 341, 347, 545, 563, 564, 708], "filter": [9, 13, 32, 36, 263, 264, 303, 309, 329, 347, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684, 702, 718, 721], "ncdhw": [9, 13, 32, 36, 309, 329, 334, 347, 545, 558, 563, 564, 565, 566, 684], "43": [9, 32, 41, 52, 188, 309, 310, 321, 329, 356, 435, 541, 552, 553, 647, 648, 655], "dct": [9, 32, 309, 684, 743], "norm": [9, 10, 14, 32, 33, 37, 48, 49, 309, 310, 330, 331, 335, 336, 337, 340, 341, 342, 352, 354, 358, 417, 418, 419, 450, 451, 472, 543, 546, 585, 601, 644, 684, 688, 736], "lenght": [9, 32, 260, 263, 264, 273, 309, 330, 684], "truncat": [9, 32, 309, 310, 330, 336, 340, 341, 342, 352, 371, 489, 543, 682, 684, 726, 743], "larger": [9, 16, 22, 32, 39, 45, 119, 309, 330, 337, 340, 342, 352, 539, 548, 556, 606, 614, 671, 673, 684, 735, 738, 762], "ortho": [9, 32, 309, 330, 331, 336, 337, 340, 341, 342, 352, 684], "102": [9, 32, 41, 330, 646], "406": [9, 32, 330, 450, 543], "dft": [9, 32, 309], "onesid": [9, 32, 309, 331], "dft_length": [9, 32, 309, 331], "backward": [9, 23, 32, 46, 236, 309, 331, 336, 337, 341, 342, 352, 541, 546, 557, 574, 600, 674, 675, 684, 736, 748], "fourier": [9, 32, 309, 331, 336, 337, 341, 342, 352, 459, 543], "fft": [9, 32, 309, 331, 337, 352, 684, 712, 755], "n_fft": [9, 309, 331], "becaus": [9, 309, 331, 713, 714, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 744, 745, 748, 755, 758, 761], "satisfi": [9, 309, 310, 331, 358, 724], "symmetri": [9, 309, 331], "fast": [9, 309, 331, 755], "rfft": [9, 32, 309, 331, 352], "batch_idx": [9, 309, 331], "signal_dim1": [9, 309, 331], "signal_dim2": [9, 309, 331], "signal_dimn": [9, 309, 331], "signal_dim": [9, 309, 331], "embed": [9, 32, 309, 545, 571, 684, 755], "max_norm": [9, 10, 32, 33, 309, 335, 450, 451, 543, 684], "dim": [9, 26, 28, 32, 96, 259, 303, 309, 312, 326, 336, 337, 338, 341, 349, 390, 538, 545, 558, 565, 566, 684, 702, 722, 733, 734, 738], "ifft": [9, 32, 309, 336, 342], "pi": [9, 32, 240, 244, 309, 336, 341, 536, 541], "44509285e": [9, 32, 309, 336], "14423775e": [9, 32, 309, 336], "17j": [9, 32, 309, 336, 341], "11483250e": [9, 32, 309, 336], "16j": [9, 32, 309, 336, 341], "33486982e": [9, 32, 309, 336], "22464680e": [9, 32, 309, 336], "95799250e": [9, 32, 309, 336], "66951701e": [9, 32, 309, 336], "fft2": [9, 309], "crop": [9, 32, 309, 337, 342, 352], "repeat": [9, 10, 16, 32, 33, 39, 309, 321, 337, 342, 434, 457, 543, 548, 549, 619, 624, 696, 708, 714, 717, 718, 724, 725, 732, 735], "vari": [9, 20, 49, 245, 337, 455, 541, 543, 554, 657, 658, 659, 720, 724, 733, 735, 742], "20477401j": [9, 309, 337], "0614962j": [9, 309, 337], "idct": [9, 32, 309], "79": [9, 10, 32, 33, 36, 41, 51, 189, 194, 309, 330, 340, 351, 450, 451, 541, 543, 648], "49862671": [9, 32, 309, 330, 340], "70": [9, 32, 33, 309, 330, 340, 463, 487, 546, 556, 589, 666, 705], "37691498": [9, 32, 309, 330, 340], "00390816": [9, 32, 309, 330, 340], "58938599": [9, 32, 309, 330, 340], "92713165": [9, 32, 309, 330, 340], "078475": [9, 32, 309, 330, 340], "19664812": [9, 32, 309, 330, 340], "95411837": [9, 32, 309, 330, 340], "30636606e": [9, 32, 309, 341], "43029718e": [9, 32, 309, 341], "18j": [9, 32, 309, 336, 341], "53080850e": [9, 32, 309, 341], "58689626e": [9, 32, 309, 341], "24474906e": [9, 32, 309, 341], "91858728e": [9, 32, 309, 341], "01435406e": [9, 32, 309, 341], "ifftn": [9, 32, 309], "combin": [9, 26, 32, 52, 309, 321, 342, 352, 434, 460, 461, 543, 546, 574, 584, 714, 717, 720, 721, 722, 724, 726, 729, 735, 745, 755], "explain": [9, 32, 309, 342, 352, 702, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 738, 740, 741, 742, 743, 744, 745, 751, 758, 761], "24730653": [9, 32, 309, 342], "90832391j": [9, 32, 309, 342], "49495562": [9, 32, 309, 342], "9039565j": [9, 32, 309, 342], "98193269": [9, 32, 309, 342], "49560517j": [9, 32, 309, 342], "93280757": [9, 32, 309, 342], "48075343j": [9, 32, 309, 342], "28526384": [9, 32, 309, 342], "3351205j": [9, 32, 309, 342], "2343787": [9, 32, 309, 342], "83528011j": [9, 32, 309, 342], "18791352": [9, 32, 309, 342], "30690572j": [9, 32, 309, 342], "82115787": [9, 32, 309, 342], "96195183j": [9, 32, 309, 342], "44719226": [9, 32, 309, 342], "72654048j": [9, 32, 309, 342], "51476765": [9, 309, 342], "66160417j": [9, 309, 342], "04319742": [9, 309, 342], "05411636j": [9, 309, 342], "015561": [9, 309, 342], "04216015j": [9, 309, 342], "06310689": [9, 309, 342], "05347854j": [9, 309, 342], "13392983": [9, 309, 342], "16052352j": [9, 309, 342], "08371392": [9, 309, 342], "17252843j": [9, 309, 342], "0031429": [9, 309, 342], "05421245j": [9, 309, 342], "10446617": [9, 309, 342], "17747098j": [9, 309, 342], "05344324": [9, 309, 342], "07972424j": [9, 309, 342], "8344667": [9, 32, 309, 342], "98222595j": [9, 32, 309, 342], "48472244": [9, 32, 309, 342], "30233797j": [9, 32, 309, 342], "mode": [9, 14, 26, 32, 37, 48, 49, 50, 164, 167, 172, 177, 194, 227, 268, 303, 309, 310, 312, 339, 344, 352, 360, 366, 368, 369, 372, 384, 393, 398, 400, 401, 403, 405, 408, 410, 488, 489, 490, 494, 495, 497, 498, 511, 512, 516, 517, 519, 520, 540, 541, 543, 546, 591, 684, 685, 686, 699, 708, 713, 714, 715, 720, 723, 724, 738, 748, 755, 758], "scale_factor": [9, 32, 309, 344, 738], "recompute_scale_factor": [9, 32, 309, 344, 738], "align_corn": [9, 32, 309, 344, 738], "antialia": [9, 32, 309, 344, 738], "down": [9, 32, 309, 312, 344, 392, 682, 713, 735, 750, 755, 761], "channel": [9, 10, 13, 32, 33, 36, 51, 52, 309, 315, 332, 333, 334, 344, 414, 415, 416, 455, 459, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 680, 681, 683, 684, 686, 687, 688, 689, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738], "height": [9, 10, 13, 32, 33, 36, 309, 344, 455, 543, 545, 561, 562, 563, 564, 567, 682, 743], "width": [9, 10, 13, 32, 33, 36, 309, 310, 312, 321, 344, 358, 400, 437, 455, 543, 545, 559, 560, 561, 562, 563, 564, 567, 571], "bilinear": [9, 32, 309, 344, 738], "trilinear": [9, 32, 309, 344, 738], "nearest_exact": [9, 32, 309, 344, 738], "tf_area": [9, 32, 309, 344, 738], "bicub": [9, 32, 309, 344, 738], "mitchellcub": [9, 32, 309, 344, 738], "lanczos3": [9, 32, 309, 344, 738], "lanczos5": [9, 32, 309, 344, 738], "gaussian": [9, 32, 59, 309, 344, 535, 738], "overwrit": [9, 26, 32, 167, 309, 344, 540, 714, 732, 733, 740], "corner": [9, 32, 309, 344, 713, 714, 733], "pixel": [9, 32, 309, 344], "align": [9, 26, 32, 309, 310, 344, 355, 713, 721, 733, 740, 742, 750, 761], "thu": [9, 32, 188, 201, 232, 236, 244, 245, 309, 310, 344, 357, 541, 546, 578, 579, 708, 712, 721, 726, 730, 733, 736], "antialias": [9, 32, 309, 344], "downsampl": [9, 32, 309, 344], "resiz": [9, 32, 309, 344, 738], "max_pool1d": [9, 32, 309, 348], "dilat": [9, 13, 32, 36, 309, 312, 345, 346, 347, 350, 351, 400, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 684], "dilaton": [9, 32, 309, 345, 346, 347], "ensur": [9, 10, 32, 33, 309, 310, 345, 346, 347, 370, 472, 543, 702, 712, 713, 714, 717, 722, 723, 724, 726, 727, 728, 730, 732, 733, 734, 735, 736, 749, 755], "cover": [9, 32, 309, 345, 346, 347, 702, 712, 716, 717, 719, 724, 725, 729, 730, 735, 738, 739], "max_pool3d": [9, 32, 309], "reduce_window": [9, 36, 309], "window_dimens": [9, 36, 309, 351], "window_strid": [9, 36, 309, 351], "base_dil": [9, 36, 309, 351], "window_dil": [9, 36, 309, 351], "string": [9, 10, 13, 26, 32, 36, 104, 105, 117, 124, 146, 147, 148, 149, 150, 152, 161, 168, 169, 173, 255, 301, 309, 310, 312, 351, 358, 400, 436, 453, 539, 540, 543, 545, 546, 558, 559, 560, 561, 563, 565, 567, 580, 682, 696, 718, 719, 721, 722, 723, 726, 733, 740, 743], "low": [9, 13, 18, 36, 41, 309, 351, 545, 552, 558, 559, 560, 561, 563, 565, 567, 646, 648, 720, 726, 732, 733, 738, 740, 751, 753, 755, 756, 757, 759, 761], "high": [9, 13, 18, 36, 41, 309, 351, 495, 543, 545, 552, 558, 559, 560, 561, 563, 565, 567, 646, 648, 706, 712, 726, 731, 733, 743, 750, 751, 752, 753, 754, 755, 759, 761, 762], "pair": [9, 13, 36, 182, 201, 265, 298, 303, 306, 309, 342, 351, 352, 541, 545, 546, 558, 559, 560, 561, 563, 565, 567, 572, 574], "give": [9, 13, 36, 133, 309, 351, 539, 545, 548, 558, 559, 560, 561, 563, 565, 567, 613, 682, 683, 702, 706, 708, 713, 714, 715, 718, 721, 722, 724, 725, 727, 728, 735, 755, 759], "rfftn": [9, 32, 309], "linear_algebra": [9, 14, 32, 37, 546, 736], "_arraywithlinearalgebraexperiment": [9, 51], "adjoint": [9, 14, 32, 37, 310, 546, 582, 593, 594], "cond": [9, 32, 73, 310, 537, 748], "p": [9, 10, 14, 32, 33, 37, 94, 198, 310, 315, 354, 419, 450, 451, 538, 541, 543, 546, 550, 585, 601, 633, 684, 702, 713, 714, 715], "933034373659268": [9, 354], "diagflat": [9, 32, 310, 362, 365], "offset": [9, 14, 17, 28, 32, 37, 40, 89, 310, 315, 355, 414, 415, 416, 538, 546, 551, 577, 598, 644], "padding_valu": [9, 32, 310, 355], "right_left": [9, 32, 310, 355], "num_row": [9, 32, 310, 355], "num_col": [9, 32, 310, 355], "dot": [9, 13, 32, 36, 49, 310, 367, 545, 546, 571, 572, 600, 702, 713, 721], "eig": [9, 14, 32, 310, 546, 579, 580], "37228132": [9, 32, 310, 357, 359, 578], "82456484": [9, 357, 578], "41597356": [9, 357, 578], "56576746": [9, 357, 578], "90937671": [9, 357, 578], "eigh_tridiagon": [9, 32, 310], "eigvals_onli": [9, 32, 310, 358], "select": [9, 22, 32, 45, 310, 312, 321, 358, 367, 408, 435, 436, 556, 664, 665, 712, 713, 714, 721, 732, 735, 740, 742, 745, 748, 755, 758, 759], "select_rang": [9, 32, 310, 358], "tol": [9, 32, 50, 310, 358, 369, 372], "eigenvalu": [9, 14, 32, 37, 49, 310, 357, 358, 359, 546, 578, 579, 580, 587], "eigenvector": [9, 32, 310, 357, 358, 546, 578, 579], "v": [9, 13, 21, 28, 32, 36, 44, 93, 192, 197, 199, 240, 310, 312, 358, 364, 370, 389, 541, 545, 549, 555, 572, 624, 662, 682, 684, 685, 686, 687, 688, 689, 702, 708, 709, 713, 714, 715, 719, 740, 743, 744, 745], "interv": [9, 18, 23, 32, 41, 46, 76, 92, 93, 99, 310, 321, 358, 437, 538, 546, 548, 552, 557, 574, 600, 606, 609, 617, 646, 648, 674, 675], "togeth": [9, 26, 32, 274, 287, 306, 310, 358, 689, 702, 705, 717, 720, 722, 732, 733, 735, 736, 738, 744, 745, 748, 753, 755, 756, 761], "cluster": [9, 32, 310, 358, 748, 755], "converg": [9, 32, 310, 358, 706], "li": [9, 32, 310, 321, 358, 442, 704], "_2": [9, 32, 310, 358], "machin": [9, 14, 32, 37, 119, 122, 310, 358, 539, 546, 587, 590, 705, 713, 716, 729, 747, 750, 753, 755, 757, 758, 759, 760, 761], "precis": [9, 14, 32, 37, 119, 207, 227, 234, 241, 282, 306, 310, 321, 358, 434, 495, 517, 539, 541, 543, 546, 579, 580, 585, 592, 594, 595, 601, 721, 722, 733, 737, 738, 759], "eig_val": [9, 32, 310, 358], "decreas": [9, 32, 310, 358], "eig_vector": [9, 32, 310, 358], "38196": [9, 358], "61803": [9, 358], "eigval": [9, 32, 310], "initialize_tuck": [9, 32, 310], "svd": [9, 14, 32, 37, 310, 360, 364, 369, 370, 371, 372, 546, 595], "seed": [9, 13, 18, 20, 26, 32, 36, 41, 267, 268, 303, 310, 316, 360, 369, 372, 420, 421, 422, 423, 424, 545, 552, 554, 568, 645, 646, 647, 648, 650, 656, 681, 683, 730, 734, 735], "truncated_svd": [9, 32, 310, 360, 369, 372], "non_neg": [9, 32, 268, 303, 310, 360], "mask": [9, 13, 32, 36, 49, 310, 312, 360, 361, 369, 372, 407, 465, 543, 545, 568, 571, 572, 738], "svd_mask_repeat": [9, 32, 310, 360, 369, 372], "compon": [9, 32, 97, 98, 175, 176, 177, 180, 183, 192, 194, 195, 197, 199, 227, 229, 230, 237, 240, 241, 244, 245, 267, 268, 276, 303, 306, 310, 360, 369, 538, 541, 553, 654, 702, 705, 740, 751, 756, 758], "distribut": [9, 15, 18, 32, 38, 41, 309, 310, 311, 316, 332, 333, 334, 360, 369, 372, 375, 377, 420, 421, 422, 423, 424, 547, 552, 603, 604, 605, 645, 646, 647, 648, 650, 683, 684, 685, 686, 712, 713, 721, 723, 748, 755, 758], "tuckertensor": [9, 32, 50, 268, 303, 310, 360, 369, 372], "scheme": [9, 32, 310, 360, 369, 716, 744, 755], "tucker": [9, 32, 268, 303, 310, 360, 369], "decomposit": [9, 14, 32, 37, 49, 267, 268, 303, 310, 360, 369, 372, 546, 573, 579, 583, 591, 594, 712, 762], "factor": [9, 11, 13, 14, 32, 34, 36, 37, 48, 49, 165, 166, 167, 309, 310, 342, 352, 360, 361, 369, 372, 524, 525, 530, 531, 540, 544, 545, 546, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 683, 684, 688, 705, 726], "miss": [9, 32, 310, 312, 360, 369, 372, 407, 688, 712, 713, 717, 720, 721, 724, 733, 735, 738], "everywher": [9, 32, 310, 360, 369, 372], "els": [9, 10, 18, 31, 32, 41, 112, 113, 114, 115, 116, 128, 234, 238, 310, 316, 360, 369, 371, 372, 421, 454, 458, 539, 541, 543, 550, 552, 635, 638, 646, 647, 648, 696, 702, 712, 713, 714, 716, 718, 722, 723, 726, 729, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745, 748, 756], "imput": [9, 32, 310, 360, 369, 372], "core": [9, 32, 49, 158, 310, 360, 369, 372, 540, 704, 713, 723, 735, 745, 753, 754, 755, 756, 760, 762], "kron": [9, 32, 310, 365, 762], "make_svd_non_neg": [9, 32, 310, 371], "u": [9, 14, 28, 32, 37, 49, 93, 310, 364, 370, 371, 546, 550, 573, 580, 594, 633, 702, 705, 707, 713, 714, 715, 720, 721, 727, 730, 732, 733, 734, 735, 736, 738, 744, 748], "nntype": [9, 32, 310, 364], "nndsvd": [9, 32, 310, 364], "being": [9, 26, 32, 47, 51, 55, 76, 310, 312, 364, 400, 496, 538, 543, 546, 580, 682, 683, 702, 705, 706, 713, 714, 716, 717, 718, 720, 722, 723, 724, 728, 730, 732, 733, 734, 735, 736, 738, 740, 743, 747, 748, 751, 753, 754, 755, 756, 761, 762], "decompos": [9, 32, 49, 267, 268, 284, 291, 303, 306, 310, 364, 369, 372, 733], "singular": [9, 14, 32, 37, 310, 360, 364, 370, 371, 546, 585, 587, 590, 594, 595, 722], "nndsvda": [9, 32, 310, 364], "boutsidi": [9, 32, 310, 364], "gallopoulo": [9, 32, 310, 364], "pattern": [9, 10, 32, 33, 310, 364, 455, 456, 457, 543, 706, 722, 725], "recognit": [9, 32, 310, 364], "1350": [9, 32, 310, 364], "1362": [9, 32, 310, 364], "2008": [9, 32, 310, 364, 755], "matrix_exp": [9, 32, 310], "7183": [9, 32, 310, 365], "3891": [9, 32, 310, 365], "mode_dot": [9, 32, 48, 49, 50, 310], "matrix_or_vector": [9, 32, 49, 50, 310, 366], "i_1": [9, 32, 49, 310, 366], "i_k": [9, 32, 49, 310, 366], "i_n": [9, 32, 49, 310, 366], "i_": [9, 32, 49, 310, 321, 366, 437], "multi_dot": [9, 32, 310], "49": [9, 18, 32, 36, 37, 241, 309, 310, 321, 330, 340, 351, 367, 435, 541, 556, 599, 647, 666], "148": [9, 31, 32, 197, 310, 367], "multi_mode_dot": [9, 32, 310], "mat_or_vec_list": [9, 32, 310, 368], "skip": [9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 310, 312, 332, 333, 334, 361, 363, 368, 373, 374, 376, 377, 380, 381, 382, 385, 401, 404, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 550, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 696, 719, 729, 735], "ndim": [9, 14, 19, 32, 37, 42, 51, 55, 310, 312, 368, 369, 372, 380, 381, 382, 393, 401, 403, 410, 523, 543, 546, 553, 591, 594, 654, 720, 729, 735], "text": [9, 10, 310, 368, 712, 714, 719, 724, 725], "times_0": [9, 310, 368], "vec": [9, 310, 368], "times_1": [9, 310, 368], "cdot": [9, 227, 310, 368, 541], "times_n": [9, 310, 368], "noqa": [9, 49, 174, 241, 309, 310, 345, 368, 541, 547, 603, 684, 693, 734], "partial_tuck": [9, 32, 310], "n_iter_max": [9, 32, 310, 369, 372], "verbos": [9, 32, 310, 369, 372, 735, 740], "return_error": [9, 32, 310, 369, 372], "variat": [9, 32, 310, 369, 372, 724, 733, 735], "reconstruct": [9, 14, 20, 32, 43, 310, 312, 369, 372, 411, 546, 554, 594, 656, 658, 734], "return_erro": [9, 310, 369, 372], "svd_flip": [9, 32, 310], "u_based_decis": [9, 32, 310, 370], "column": [9, 14, 32, 37, 49, 87, 101, 269, 303, 310, 312, 319, 321, 357, 361, 370, 389, 391, 392, 396, 398, 427, 433, 434, 538, 546, 578, 579, 585, 591, 593, 594, 599, 683], "basi": [9, 32, 310, 370, 714, 716, 743], "flip": [9, 16, 32, 39, 49, 185, 310, 312, 370, 391, 392, 541, 548, 732, 742, 743, 745], "row": [9, 32, 87, 101, 269, 303, 310, 312, 319, 321, 361, 370, 392, 398, 413, 427, 433, 434, 538, 546, 552, 553, 585, 593, 594, 599, 645, 654, 683], "decis": [9, 32, 310, 370, 716, 722, 738, 740, 742, 755], "u_adjust": [9, 32, 310, 370], "v_adjust": [9, 32, 310, 370], "compute_uv": [9, 14, 32, 37, 310, 371, 546, 594], "n_eigenvec": [9, 32, 310, 371], "returnedv": [9, 371], "vh": [9, 14, 32, 37, 310, 371, 546, 594], "significantli": [9, 14, 32, 37, 310, 371, 546, 594, 704, 721, 753], "faster": [9, 14, 32, 37, 310, 371, 546, 594, 711, 750, 757, 760], "eigen": [9, 32, 310, 371], "full": [9, 14, 32, 36, 37, 49, 119, 206, 214, 267, 268, 303, 310, 311, 312, 371, 375, 401, 404, 489, 498, 512, 520, 538, 539, 541, 543, 545, 546, 560, 562, 563, 564, 587, 591, 593, 594, 702, 705, 706, 713, 714, 719, 722, 725, 726, 728, 729, 733, 735, 738, 740, 748, 753, 755, 761], "namedtupl": [9, 14, 20, 32, 37, 43, 310, 312, 357, 371, 411, 546, 554, 578, 579, 591, 592, 594, 656, 657, 658], "fixed_factor": [9, 32, 310, 372], "tl": [9, 32, 310, 372], "g": [9, 18, 20, 22, 24, 32, 41, 47, 49, 105, 134, 147, 194, 207, 227, 234, 237, 309, 310, 316, 321, 345, 347, 372, 420, 421, 422, 423, 424, 435, 436, 539, 540, 541, 546, 550, 552, 554, 556, 579, 580, 585, 592, 594, 595, 601, 628, 632, 634, 637, 642, 646, 647, 648, 656, 657, 658, 659, 664, 665, 667, 669, 670, 672, 683, 706, 707, 712, 713, 715, 716, 718, 719, 720, 731, 733, 735, 740, 748, 750, 751], "kolda": [9, 32, 310, 372], "bader": [9, 32, 310, 372], "applic": [9, 13, 32, 36, 310, 372, 545, 546, 550, 556, 571, 572, 598, 631, 632, 633, 637, 638, 670, 672, 702, 713, 721, 722, 723, 730, 744, 752, 753, 755, 757, 759, 761], "siam": [9, 32, 310, 372], "review": [9, 32, 310, 372, 712, 714, 721, 724, 733, 736], "vol": [9, 32, 310, 372], "pp": [9, 32, 310, 372], "455": [9, 32, 310, 372], "500": [9, 32, 33, 36, 309, 310, 332, 333, 372, 463, 543], "2009": [9, 32, 310, 372], "loss": [9, 32, 49, 373, 374, 375, 376, 377, 495, 517, 543, 603, 604, 605, 702, 721, 722, 729, 733, 736, 737, 743, 744, 745, 755, 762], "_arraywithlossesexperiment": [9, 51], "huber_loss": [9, 32, 311], "pred": [9, 15, 32, 38, 311, 373, 375, 547, 603, 604, 605, 702, 720, 729, 732], "delta": [9, 11, 32, 34, 311, 373, 524, 544], "ground": [9, 311, 373, 704, 710, 733, 735], "truth": [9, 195, 205, 206, 213, 214, 230, 311, 373, 541, 710, 733, 735], "predict": [9, 15, 32, 38, 311, 373, 375, 377, 547, 603, 604, 605, 702], "transit": [9, 32, 311, 373, 755], "huber": [9, 32, 311, 373], "l1_loss": [9, 32, 311], "No": [9, 15, 32, 38, 311, 374, 375, 376, 377, 547, 603, 714, 721, 722, 755], "l1": [9, 14, 32, 37, 311, 315, 373, 374, 376, 417, 546, 601, 720, 743], "targetict": [9, 32, 311, 374, 376, 377], "20000000000000004": [9, 374], "smooth_l1_loss": [9, 32, 311], "smooth": [9, 15, 32, 38, 311, 373, 376, 547, 603, 604, 605, 731], "8125": [9, 376], "soft_margin_loss": [9, 32, 311], "soft": [9, 32, 311, 312, 377, 407, 723], "margin": [9, 32, 311, 377, 733], "35667497": [9, 377, 547, 604], "22314353": [9, 377], "60943791": [9, 377], "manipul": [9, 32, 704, 732, 733, 736, 738, 740, 745, 747, 755], "_arraywithmanipulationexperiment": [9, 51], "as_strid": [9, 32, 312], "nativeshap": [9, 13, 16, 18, 32, 39, 41, 77, 78, 85, 90, 97, 102, 312, 316, 378, 388, 393, 401, 404, 420, 421, 422, 423, 424, 487, 500, 505, 507, 538, 543, 545, 548, 552, 558, 560, 562, 564, 566, 613, 646, 647, 648, 728, 730], "byte": [9, 10, 28, 32, 33, 51, 89, 312, 378, 481, 538, 543, 760, 761], "associative_scan": [9, 32, 312], "revers": [9, 10, 14, 22, 32, 37, 45, 51, 52, 310, 312, 321, 363, 379, 391, 392, 435, 436, 454, 543, 546, 548, 556, 599, 610, 664, 665, 712, 720, 721, 722, 724, 725, 732, 733, 738, 745, 748], "associ": [9, 14, 32, 37, 177, 227, 312, 321, 379, 437, 541, 546, 587, 590, 602, 714, 722, 729, 730, 733, 734, 735, 748], "scan": [9, 32, 312, 379, 748], "atleast_1d": [9, 32, 312], "ari": [9, 32, 312, 380, 381, 382, 386, 395, 412], "cannot": [9, 244, 380, 381, 382, 541, 714, 716, 718, 722, 733, 740, 745, 761], "avoid": [9, 16, 32, 194, 199, 201, 217, 227, 312, 315, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 414, 415, 416, 449, 465, 490, 495, 517, 541, 543, 548, 609, 610, 611, 613, 615, 616, 618, 620, 713, 714, 718, 719, 720, 721, 722, 726, 730, 733, 735, 736, 737, 738, 755], "view": [9, 16, 32, 51, 88, 312, 380, 381, 382, 386, 388, 390, 391, 392, 395, 399, 406, 412, 465, 538, 543, 548, 609, 610, 611, 613, 615, 616, 618, 620, 713, 714, 726, 755], "made": [9, 16, 32, 310, 312, 362, 380, 381, 382, 617, 705, 708, 712, 714, 716, 717, 720, 721, 726, 727, 729, 731, 732, 733, 736, 738, 740, 742, 755], "a1": [9, 33, 380, 381, 382, 447], "a2": [9, 380, 381, 382], "atleast_2d": [9, 32, 312], "atleast_3d": [9, 32, 312], "three": [9, 94, 258, 303, 312, 382, 538, 713, 714, 720, 721, 722, 724, 733, 735, 738, 739, 740, 756, 761], "concat_from_sequ": [9, 32, 312], "input_sequ": [9, 32, 312, 385], "new_axi": [9, 32, 312, 385, 745], "concaten": [9, 10, 16, 32, 37, 312, 385, 455, 459, 543, 545, 548, 571, 589, 607, 734, 738, 740, 743], "insert": [9, 19, 32, 42, 312, 377, 385, 548, 550, 553, 555, 609, 629, 630, 651, 662, 721, 727], "do": [9, 10, 26, 32, 33, 194, 227, 236, 312, 321, 385, 441, 442, 472, 541, 543, 550, 625, 632, 635, 636, 637, 642, 702, 706, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 740, 742, 743, 744, 745, 748, 750, 756, 761, 762], "stack": [9, 14, 16, 26, 32, 37, 39, 51, 99, 100, 270, 303, 310, 312, 357, 385, 387, 396, 413, 489, 498, 520, 538, 543, 546, 548, 550, 575, 577, 578, 579, 580, 582, 584, 586, 587, 588, 590, 591, 592, 594, 595, 598, 625, 635, 636, 684, 702, 711, 716, 718, 732, 740, 751, 753, 760, 761], "dsplit": [9, 32, 312], "indices_or_sect": [9, 32, 312, 386, 395, 412], "3rd": [9, 32, 312, 386], "dstack": [9, 32, 312], "fill_diagon": [9, 32, 312], "fill_diag": [9, 389], "start_dim": [9, 32, 312, 390, 702], "end_dim": [9, 32, 312, 390, 702], "read": [9, 16, 26, 28, 32, 39, 89, 312, 390, 538, 548, 613, 712, 713, 719, 721, 735, 737, 738, 755], "fastest": [9, 16, 32, 39, 310, 312, 367, 390, 548, 613], "slowest": [9, 16, 32, 39, 312, 390, 548, 613], "fortran": [9, 16, 32, 39, 312, 390, 548, 613, 755, 759], "layout": [9, 16, 32, 39, 312, 390, 548, 613, 718, 732, 733, 738], "fliplr": [9, 32, 312, 732], "diag": [9, 14, 32, 37, 312, 391, 392, 546, 579, 740], "flipud": [9, 32, 312, 732], "fold": [9, 32, 312, 401, 402, 721], "unfold": [9, 32, 49, 310, 312, 360, 393, 401, 403], "folded_tensor": [9, 312, 393], "heavisid": [9, 32, 312], "step": [9, 11, 28, 32, 34, 76, 92, 312, 394, 524, 525, 528, 530, 531, 532, 538, 544, 549, 622, 623, 624, 682, 688, 702, 706, 708, 712, 713, 714, 717, 718, 720, 721, 722, 723, 724, 731, 733, 735, 740, 743, 744, 745, 747, 755], "5000": [9, 312, 394, 546, 582], "hsplit": [9, 32, 312], "horizont": [9, 32, 312, 395, 455, 543], "hstack": [9, 32, 312], "vstack": [9, 32, 312, 396], "i0": [9, 32, 312, 321, 437], "modifi": [9, 26, 32, 49, 312, 321, 397, 400, 405, 441, 712, 713, 714, 716, 718, 719, 722, 723, 725, 727, 729, 732, 734, 735, 736, 740], "bessel": [9, 22, 32, 45, 263, 303, 312, 397, 556, 671, 673], "kind": [9, 22, 32, 119, 122, 123, 232, 321, 397, 435, 436, 441, 539, 541, 556, 664, 665, 670, 672, 711, 733, 735, 738, 740, 748], "26606588": [9, 32, 312, 397], "2795853": [9, 32, 312, 397], "88079259": [9, 32, 312, 397], "row_mod": [9, 32, 312, 398], "column_mod": [9, 32, 312, 398], "ascend": [9, 21, 32, 44, 312, 319, 398, 427, 555, 660, 662], "prod": [9, 10, 22, 33, 45, 310, 312, 361, 363, 398, 456, 543, 556, 722, 724, 740], "moveaxi": [9, 32, 312], "destin": [9, 32, 312, 399], "unstack": [9, 16, 26, 39, 399, 548, 720, 740, 743, 762], "reorder": [9, 16, 32, 39, 312, 399, 455, 543, 548, 610], "uniqu": [9, 10, 20, 32, 33, 43, 312, 399, 400, 411, 479, 543, 549, 550, 554, 622, 623, 624, 627, 631, 656, 657, 658, 659, 702, 704, 716, 720, 729, 733, 734, 738, 748, 758], "pad_width": [9, 16, 32, 39, 312, 400, 548, 608, 621], "stat_length": [9, 32, 312, 400], "constant_valu": [9, 32, 312, 400], "end_valu": [9, 32, 312, 400], "reflect_typ": [9, 32, 312, 400], "even": [9, 32, 49, 194, 227, 232, 237, 312, 321, 400, 434, 541, 705, 706, 713, 714, 716, 721, 722, 723, 725, 728, 729, 732, 733, 734, 738, 742, 743, 744, 745, 748, 761], "partial_fold": [9, 32, 312], "skip_begin": [9, 32, 312, 401, 402, 403, 404], "untouch": [9, 32, 312, 401, 402, 403, 404], "begin": [9, 32, 238, 312, 400, 401, 402, 403, 404, 541, 550, 625, 636, 682, 713, 716, 721, 734], "re": [9, 10, 19, 32, 42, 167, 312, 401, 402, 455, 540, 543, 546, 548, 553, 596, 614, 653, 655, 703, 704, 705, 707, 712, 713, 714, 715, 716, 722, 731, 732, 733, 734, 736, 738, 742, 745, 748, 755], "partial_tensor_to_vec": [9, 32, 312], "skip_end": [9, 32, 312, 402, 403], "vectoris": [9, 32, 49, 312, 402, 404], "partial_unfold": [9, 32, 312], "ravel_tensor": [9, 32, 312, 403], "n_sampl": [9, 32, 312, 403], "n_1": [9, 32, 312, 403], "n_2": [9, 32, 312, 403], "n_i": [9, 32, 310, 312, 361, 403], "partial_vec_to_tensor": [9, 32, 312], "rot90": [9, 32, 312, 732], "rotat": [9, 32, 312, 406, 747], "soft_threshold": [9, 32, 312], "whole": [9, 32, 312, 315, 407, 417, 418, 419, 714, 719, 727], "take_along_axi": [9, 32, 312], "extract": [9, 32, 312, 384, 408, 733, 736, 751, 755, 756, 761], "One": [9, 10, 16, 18, 32, 33, 39, 41, 312, 380, 381, 382, 384, 400, 408, 456, 543, 548, 552, 613, 646, 717, 720, 722, 724, 729, 734, 735, 740, 742, 743], "bound": [9, 32, 312, 384, 405, 408, 726, 733, 735, 740, 761], "arr": [9, 10, 29, 32, 127, 312, 384, 405, 408, 487, 539, 718, 722, 723], "top_k": [9, 32, 312], "largest": [9, 26, 32, 119, 122, 310, 312, 370, 409, 539, 546, 585, 594, 747], "sort": [9, 20, 26, 32, 43, 52, 246, 310, 312, 321, 357, 409, 427, 441, 541, 546, 554, 578, 579, 594, 595, 656, 660, 661, 662, 702, 711, 721, 736], "top": [9, 16, 32, 312, 409, 455, 543, 607, 682, 702, 713, 714, 722, 733, 735, 738, 743, 744, 755, 759], "retun": [9, 32, 312, 409], "smallest": [9, 26, 32, 119, 122, 190, 312, 409, 539, 541, 546, 585], "name": [9, 14, 20, 24, 37, 43, 47, 201, 310, 312, 357, 409, 411, 445, 446, 541, 543, 546, 554, 578, 579, 583, 591, 592, 594, 599, 656, 657, 658, 686, 693, 695, 712, 713, 714, 718, 719, 720, 721, 724, 725, 726, 728, 733, 734, 735, 736, 737, 738, 740, 743, 745, 755], "unfolded_tensor": [9, 312, 410], "unique_consecut": [9, 32, 312], "vsplit": [9, 32, 312], "vertic": [9, 32, 312, 412, 413, 455, 543, 714], "_arraywithnormsexperiment": [9, 51], "batch_norm": [9, 32, 315], "varianc": [9, 22, 32, 45, 315, 414, 416, 556, 673, 683, 687], "momentum": [9, 32, 315, 414, 416, 687, 705], "nsc": [9, 32, 315, 414, 415, 416, 687], "braodcast": [9, 32, 315, 414], "present": [9, 26, 32, 276, 306, 315, 414, 415, 416, 704, 712, 714, 720, 722, 723, 728, 732, 740, 752, 753, 762], "running_mean": [9, 32, 315, 414, 416, 687], "running_var": [9, 32, 315, 414, 416, 687], "nc": [9, 32, 315, 414, 415, 416, 687], "group_norm": [9, 32, 315], "num_group": [9, 32, 315, 415], "group": [9, 32, 312, 315, 411, 415, 545, 550, 558, 565, 566, 627, 716, 720, 722, 729, 733, 734, 751, 754, 760], "separ": [9, 10, 32, 315, 415, 545, 571, 714, 717, 720, 721, 735, 740, 742, 743, 756, 760], "instance_norm": [9, 32, 315], "l1_normal": [9, 32, 315], "33333334": [9, 315, 417, 419, 526, 544, 545, 546, 567, 601], "33333337": [9, 92, 315, 417, 526, 538, 544], "28571439": [9, 315, 417], "l2_normal": [9, 32, 315, 419], "l2": [9, 14, 37, 48, 49, 315, 418, 419, 546, 601, 684, 720], "44721359": [9, 32, 315, 418, 419], "89442718": [9, 32, 315, 418, 419], "60000002": [9, 45, 52, 315, 418, 419, 668], "80000001": [9, 315, 418, 419], "lp_normal": [9, 32, 315], "lp": [9, 315, 419], "_arraywithrandomexperiment": [9, 51], "bernoulli": [9, 32, 309, 316, 332, 333, 334], "probabl": [9, 13, 15, 18, 32, 36, 38, 41, 309, 316, 321, 332, 333, 334, 420, 434, 437, 441, 545, 547, 552, 568, 571, 572, 603, 645, 683, 684, 702, 706, 735, 749], "event": [9, 32, 316, 420, 735], "entri": [9, 16, 26, 32, 39, 43, 92, 312, 316, 391, 392, 420, 538, 548, 550, 615, 638, 656, 713, 721, 735, 755], "parameter": [9, 18, 32, 41, 316, 420, 421, 423, 424, 552, 645, 647, 648], "prob": [9, 13, 32, 36, 41, 309, 316, 332, 333, 334, 420, 545, 552, 568, 645, 684, 702], "odd": [9, 32, 232, 312, 316, 400, 420, 541, 711, 716], "drawn": [9, 18, 32, 41, 316, 420, 421, 422, 423, 424, 552, 645, 646, 647, 648, 683, 735], "dirichlet": [9, 32, 316], "shuffl": [9, 18, 26, 32, 41, 422, 552], "10598304": [9, 316, 422], "21537054": [9, 316, 422], "67864642": [9, 316, 422], "48006698": [9, 316, 422], "07472073": [9, 316, 422], "44521229": [9, 316, 422], "55479872": [9, 316, 422], "05426367": [9, 316, 422], "39093761": [9, 316, 422], "19531053": [9, 316, 422], "51675832": [9, 316, 422], "28793114": [9, 316, 422], "12315625": [9, 316, 422], "29823365": [9, 316, 422], "5786101": [9, 316, 422], "15564976": [9, 316, 422], "50542368": [9, 316, 422], "33892656": [9, 316, 422], "1325352": [9, 316, 422], "44439589": [9, 316, 422], "42306891": [9, 316, 422], "gamma": [9, 17, 32, 40, 280, 290, 306, 316, 321, 438, 551, 644], "poisson": [9, 32, 311, 316, 375], "rate": [9, 11, 32, 34, 309, 316, 350, 424, 525, 528, 530, 531, 532, 544, 549, 622, 623, 624, 688, 721], "paramt": [9, 424, 550, 632, 642], "lam": [9, 32, 316, 424], "_arraywithsearchingexperiment": [9, 51], "unravel_index": [9, 32, 317], "unravel": [9, 32, 317, 425], "_arraywithsetexperiment": [9, 51], "_arraywithsortingexperiment": [9, 51], "lexsort": [9, 32, 319], "indirectli": [9, 32, 319, 427], "statist": [9, 32, 47, 312, 400, 687, 700, 712, 722, 735, 736, 755], "_arraywithstatisticalexperiment": [9, 51], "bincount": [9, 32, 321], "minlength": [9, 32, 321, 432], "alreadi": [9, 14, 26, 32, 37, 190, 200, 227, 237, 247, 312, 321, 381, 382, 400, 432, 441, 541, 546, 581, 589, 696, 702, 712, 713, 714, 718, 720, 722, 723, 728, 732, 733, 738, 748, 749, 755, 757, 762], "bin": [9, 32, 321, 432, 437, 708, 713, 714, 716, 720], "corrcoef": [9, 32, 321], "rowvar": [9, 32, 321, 433, 434], "relationship": [9, 32, 433, 683], "cov": [9, 32, 321], "bia": [9, 13, 32, 36, 40, 321, 434, 482, 543, 545, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 644, 684, 729, 735, 740, 744], "ddof": [9, 32, 321, 434], "fweight": [9, 32, 321, 434], "aweight": [9, 32, 321, 434], "overridden": [9, 32, 321, 434, 688, 717], "unbias": [9, 22, 32, 45, 321, 434, 556, 673], "frequenc": [9, 10, 32, 33, 321, 434, 459, 543, 714], "typic": [9, 32, 274, 287, 306, 321, 434, 555, 662, 684, 716, 729, 754, 762], "assign": [9, 32, 49, 321, 434, 712, 714, 718, 722, 732, 742], "covari": [9, 32, 321, 434], "cummax": [9, 32, 321], "exclus": [9, 10, 22, 26, 32, 33, 45, 76, 310, 321, 369, 435, 436, 474, 475, 478, 538, 543, 552, 556, 646, 664, 665, 720, 722, 729, 745, 759, 761], "cumul": [9, 22, 32, 45, 321, 435, 436, 556, 664, 665, 747], "int64": [9, 18, 19, 21, 22, 29, 41, 42, 44, 45, 97, 109, 115, 118, 120, 122, 126, 127, 131, 138, 255, 262, 301, 303, 319, 321, 427, 435, 436, 538, 539, 553, 555, 556, 646, 651, 652, 653, 662, 664, 665, 670, 672, 722, 733, 735, 740], "uint64": [9, 22, 116, 121, 123, 124, 134, 136, 139, 255, 301, 321, 435, 436, 539, 556, 664, 665, 670, 672, 722, 735, 740], "uint16": [9, 22, 111, 116, 121, 122, 131, 255, 301, 321, 435, 436, 539, 556, 664, 665, 670, 672, 722, 733, 735, 740], "bit": [9, 22, 118, 119, 122, 185, 186, 188, 321, 435, 436, 539, 541, 556, 664, 665, 670, 672, 711, 712, 713, 720, 721, 722, 724, 729, 740, 742, 761], "uint32": [9, 22, 116, 121, 122, 123, 145, 255, 301, 321, 435, 436, 539, 556, 664, 665, 670, 672, 722, 735, 740], "resolv": [9, 22, 201, 321, 435, 436, 541, 548, 556, 609, 664, 665, 670, 672, 714, 719, 722, 727, 740], "cummin": [9, 32, 321], "histogram": [9, 32, 321], "extend_lower_interv": [9, 32, 321, 437], "extend_upper_interv": [9, 32, 321, 437], "densiti": [9, 32, 321, 437], "monoton": [9, 32, 321, 437], "rightmost": [9, 32, 321, 437], "extend": [9, 32, 312, 321, 400, 437, 718, 719, 725, 726, 728, 733, 736, 748, 752, 755, 761], "c1": [9, 32, 321, 437, 720], "ff": [9, 32, 321, 437], "c_": [9, 32, 321, 437], "igamma": [9, 32, 321], "incomplet": [9, 32, 321, 438, 714], "3614": [9, 32, 321, 438], "2085": [9, 32, 321, 438], "median": [9, 32, 312, 321, 400, 441], "nanmean": [9, 32, 321], "anyth": [9, 32, 321, 440, 441, 714, 726, 735, 736, 755, 756], "sub": [9, 14, 16, 26, 27, 31, 32, 33, 37, 39, 52, 226, 310, 312, 321, 358, 386, 395, 412, 440, 441, 546, 548, 549, 577, 615, 622, 623, 624, 682, 712, 714, 715, 720, 726, 733, 734, 735, 742, 743, 744, 751], "6666666666666665": [9, 32, 321, 440], "nanmedian": [9, 32, 321], "overwrite_input": [9, 32, 321, 441], "save": [9, 26, 32, 321, 441, 499, 521, 540, 543, 557, 686, 706, 708, 713, 721, 727, 735, 748, 754], "treat": [9, 26, 32, 52, 232, 292, 306, 312, 321, 408, 441, 541, 731, 735, 741, 745], "undefin": [9, 32, 312, 321, 322, 400, 441, 443, 726, 731], "fulli": [9, 32, 321, 441, 684, 702, 706, 717, 722, 728, 731, 738, 740, 741, 742, 743, 744, 745, 748, 753, 754, 755, 761, 762], "quantil": [9, 32, 321], "inclus": [9, 32, 76, 321, 442, 538, 552, 646, 707, 718, 732, 738], "higher": [9, 32, 310, 312, 321, 369, 372, 380, 381, 382, 442, 683, 722, 732, 739, 740, 745, 748, 752, 755, 756, 759, 761, 762], "midpoint": [9, 32, 321, 442], "surround": [9, 32, 321, 442, 738], "whichev": [9, 32, 321, 442], "_arraywithutilityexperiment": [9, 51], "optional_get_el": [9, 32, 322], "empti": [9, 10, 26, 33, 76, 255, 301, 312, 322, 400, 443, 450, 487, 538, 543, 546, 550, 556, 557, 598, 601, 639, 670, 672, 674, 675, 712, 713, 717, 719, 722, 723, 732], "behavior": [9, 20, 194, 201, 227, 232, 236, 322, 443, 490, 513, 541, 543, 554, 656, 657, 658, 659, 712, 719, 720, 721, 722, 732, 733, 734, 735, 738, 740, 748, 752], "_arraywithgener": [10, 51], "all_equ": [10, 33, 543], "equality_matrix": [10, 33, 444, 543], "array_equ": [10, 33, 543], "assert_supports_inplac": [10, 33, 543], "ivybackendexcept": [10, 33, 448, 472, 543, 697, 717, 723, 726], "clip_matrix_norm": [10, 33, 543], "downscal": [10, 33, 450, 451, 472, 543], "894": [10, 33, 450, 451, 543, 551, 644], "clip_vector_norm": [10, 33, 543], "default_v": [10, 454, 543], "catch_except": [10, 454, 543], "rev": [10, 454, 543], "with_cal": [10, 454, 543], "catch": [10, 454, 543, 730, 735], "might": [10, 133, 454, 539, 543, 710, 712, 713, 714, 721, 722, 724, 727, 730, 733, 735, 736, 738, 740, 742, 743, 750], "einops_rearrang": [10, 33, 543], "axes_length": [10, 33, 455, 456, 457, 543], "arrang": [10, 455, 543], "rearrang": [10, 33, 455, 457, 543], "einop": [10, 33, 455, 456, 457, 543, 705], "einops_reduc": [10, 33, 543], "einops_repeat": [10, 33, 543], "fourier_encod": [10, 33, 543], "max_freq": [10, 33, 459, 543], "num_band": [10, 33, 459, 543], "band": [10, 33, 459, 543], "linearli": [10, 33, 459, 543, 546, 593], "oppos": [10, 33, 459, 543, 722], "geometr": [10, 33, 459, 543, 546, 599], "seper": [10, 459, 543, 724, 734], "0000000e": [10, 33, 459, 543], "2246468e": [10, 33, 459, 543], "4492936e": [10, 459, 543], "6739404e": [10, 33, 459, 543], "batch_dim": [10, 33, 462, 463, 543, 690], "gather_nd": [10, 33, 543], "get_num_dim": [10, 33, 543], "as_arrai": [10, 33, 466, 500, 543, 690], "has_nan": [10, 33, 543], "include_inf": [10, 33, 468, 522, 543], "inplace_decr": [10, 33, 543], "val": [10, 26, 31, 33, 207, 470, 471, 472, 491, 492, 493, 541, 543, 722, 732, 742], "decrement": [10, 33, 470, 543], "inplace_incr": [10, 33, 543], "increment": [10, 33, 471, 543, 714, 755], "inplace_upd": [10, 33, 490, 543, 681, 732], "ensure_in_backend": [10, 33, 472, 543, 732], "keep_input_dtyp": [10, 33, 472, 543, 732], "is_arrai": [10, 33, 543, 732, 733], "rather": [10, 26, 33, 76, 167, 474, 475, 478, 538, 540, 543, 705, 710, 714, 716, 720, 722, 725, 733, 734, 735, 736, 745, 748, 751, 754, 755], "is_ivy_arrai": [10, 33, 543, 732, 742], "is_ivy_contain": [10, 543], "is_native_arrai": [10, 33, 130, 475, 539, 543, 742], "isin": [10, 33, 543], "test_el": [10, 33, 479, 543], "assume_uniqu": [10, 33, 479, 543], "invert": [10, 33, 185, 479, 541, 543, 546, 586], "speed": [10, 33, 479, 543, 704, 735, 758], "scatter_flat": [10, 33, 543], "occupi": [10, 119, 122, 486, 487, 539, 543], "scatter_nd": [10, 33, 543, 738, 742], "stable_divid": [10, 33, 543, 729], "denomin": [10, 17, 33, 40, 493, 501, 515, 543, 551, 644, 687, 729, 737, 748, 752], "min_denomin": [10, 33, 493, 501, 515, 543, 737], "global": [10, 26, 33, 52, 112, 113, 114, 115, 116, 165, 166, 167, 492, 493, 496, 501, 502, 514, 515, 518, 539, 540, 543, 687, 693, 713, 717, 718, 721, 722, 723, 726, 729, 733, 740, 755], "_min_denomin": [10, 501, 543], "stable_pow": [10, 33, 543], "min_bas": [10, 33, 492, 502, 514, 543, 687, 737], "stabl": [10, 21, 33, 44, 101, 269, 303, 319, 427, 492, 493, 501, 502, 514, 515, 538, 543, 555, 660, 663, 713, 718, 722, 733, 737, 740, 748], "00004": [10, 33, 502, 543], "00008": [10, 33, 502, 543], "00004000e": [10, 502], "56002560e": [10, 502], "60001200e": [10, 502], "09602048e": [10, 502], "supports_inplace_upd": [10, 33, 543], "to_fil": 10, "fid": 10, "sep": 10, "format_": 10, "binari": [10, 13, 15, 36, 38, 184, 187, 189, 224, 244, 311, 375, 377, 541, 545, 547, 568, 603], "filenam": [10, 686, 692, 743], "txt": [10, 713, 716, 719], "recov": [10, 726, 733], "appropri": [10, 19, 24, 42, 47, 177, 194, 201, 227, 274, 287, 306, 541, 553, 651, 712, 713, 714, 726, 730, 735], "to_list": [10, 33, 543], "to_numpi": [10, 33, 543, 702, 734, 743], "address": [10, 508, 543, 706, 712, 714, 716, 717, 728, 740, 751, 753, 755, 761], "to_scalar": [10, 33, 543], "value_is_nan": [10, 33, 543], "_arraywithgradi": [11, 51], "adam_step": [11, 34, 544], "mw": [11, 34, 524, 525, 544, 744], "vw": [11, 34, 524, 525, 544, 744], "beta1": [11, 34, 446, 524, 525, 530, 543, 544, 688, 744], "beta2": [11, 34, 446, 524, 525, 530, 543, 544, 688, 744], "999": [11, 31, 34, 245, 524, 525, 530, 532, 541, 544, 688, 744], "epsilon": [11, 14, 15, 34, 37, 38, 446, 524, 525, 530, 543, 544, 546, 547, 587, 590, 603, 604, 605, 685, 687, 688, 720, 729, 732, 744], "07": [11, 15, 31, 34, 38, 41, 182, 215, 219, 238, 309, 340, 514, 524, 525, 527, 528, 529, 530, 541, 543, 544, 547, 604, 605, 647, 685, 688, 744], "cost": [11, 34, 524, 525, 528, 530, 531, 532, 544, 549, 622, 623, 624, 738, 753], "dc": [11, 34, 524, 525, 528, 530, 531, 532, 544], "dw": [11, 34, 524, 525, 528, 530, 531, 532, 544], "forget": [11, 34, 524, 525, 530, 544, 688, 702, 722], "adam": [11, 34, 446, 524, 525, 530, 543, 544, 688, 702, 743, 744, 745, 755], "prevent": [11, 34, 524, 525, 530, 544, 545, 556, 568, 672, 683, 688, 712, 714, 721, 722, 726, 732, 733, 736], "dcdw": [11, 34, 524, 525, 528, 530, 531, 544], "adam_step_delta": [11, 34, 524, 544], "2020105": [11, 524, 544], "22187898": [11, 524, 544], "24144873": [11, 524, 544], "10000002": [11, 45, 249, 301, 524, 668], "20000005": [11, 249, 301, 524], "00300002": [11, 524], "00800002": [11, 524], "adam_upd": [11, 34, 544, 744], "lr": [11, 34, 446, 525, 528, 530, 531, 532, 543, 544, 688, 743, 744], "mw_tm1": [11, 34, 525, 530, 544], "vw_tm1": [11, 34, 525, 530, 544], "stop_gradi": [11, 34, 167, 446, 525, 528, 530, 531, 532, 540, 543, 544, 549, 622, 623, 624, 688, 744], "learn": [11, 34, 310, 370, 455, 525, 528, 530, 531, 532, 543, 544, 549, 622, 623, 624, 688, 702, 704, 705, 707, 711, 712, 713, 715, 716, 727, 729, 731, 739, 747, 750, 753, 757, 758, 759, 760, 761, 762], "previou": [11, 34, 141, 142, 143, 144, 145, 300, 308, 511, 513, 514, 515, 516, 518, 519, 521, 525, 530, 539, 543, 544, 683, 699, 714, 716, 718, 721, 723, 728, 733, 735, 738, 745, 748, 758], "ws_new": [11, 34, 525, 530, 531, 532, 544], "updated_weight": [11, 34, 525, 544], "92558753": [11, 525], "92558873": [11, 525, 544], "92558718": [11, 525, 544], "00000063e": [11, 34, 525, 544], "00000016e": [11, 34, 525, 544], "00000086e": [11, 34, 525, 544], "gradient_descent_upd": [11, 34, 544, 549, 622, 623, 624], "descent": [11, 34, 528, 544, 688, 744, 755], "new_weight": [11, 34, 528, 530, 544, 743], "lamb_upd": [11, 34, 544], "max_trust_ratio": [11, 34, 530, 544, 688], "decay_lambda": [11, 34, 530, 531, 544, 688], "trust": [11, 34, 530, 544, 688], "ratio": [11, 34, 530, 544, 688], "decai": [11, 34, 530, 531, 544, 688], "lamb": [11, 34, 530, 544, 688, 744], "784": [11, 530, 544], "78": [11, 189, 238, 530, 541, 544, 546, 552, 556, 589, 647, 666], "lars_upd": [11, 34, 544], "lar": [11, 34, 531, 544, 688, 744], "optimizer_upd": [11, 34, 544], "effective_grad": [11, 34, 532, 544], "3e": [11, 34, 532, 544], "preserve_typ": [11, 34, 533, 544], "_arraywithimag": [12, 51], "_arraywithlay": [13, 51], "conv1d": [13, 36, 545, 684], "filter_format": [13, 36, 545, 558, 559, 561, 562, 563, 565], "channel_last": [13, 36, 545, 558, 559, 561, 562, 563, 565, 566], "x_dilat": [13, 36, 545, 558, 559, 561, 562, 563, 565], "fw": [13, 36, 321, 434, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 713, 735], "d_out": [13, 36, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566], "channel_first": [13, 36, 545, 558, 559, 561, 562, 563, 565, 566], "wio": [13, 545, 558, 559, 560, 565], "conv1d_transpos": [13, 36, 545], "output_shap": [13, 36, 545, 558, 560, 562, 564, 566, 684], "conv2d": [13, 36, 545, 562, 684, 702], "fh": [13, 36, 545, 550, 558, 561, 562, 563, 564, 565, 566, 567, 637], "hwio": [13, 545, 558, 559, 561, 565], "conv2d_transpos": [13, 36, 545], "random_norm": [13, 14, 18, 36, 37, 41, 455, 543, 545, 546, 552, 560, 562, 563, 564, 567, 570, 594, 702], "std": [13, 18, 22, 36, 41, 45, 316, 421, 545, 552, 556, 560, 562, 563, 564, 567, 646, 647, 702, 724], "conv3d": [13, 36, 545, 564, 684], "fd": [13, 36, 545, 558, 563, 564, 565, 566], "conv3d_transpos": [13, 36, 545], "depthwise_conv2d": [13, 36, 545], "dropout": [13, 36, 309, 332, 333, 334, 545, 571, 572, 684, 743], "noise_shap": [13, 36, 545, 568], "droput": [13, 568], "turn": [13, 36, 49, 332, 333, 334, 545, 568, 684, 706, 713, 719, 720, 723, 724, 733, 735], "reproduc": [13, 36, 545, 568, 710, 716], "42857146": [13, 545, 568], "85714293": [13, 545, 568], "28571415": [13, 36, 545, 568], "71428585": [13, 36, 545, 568], "14285755": [13, 36, 545, 568], "5714283": [13, 545, 568], "4285717": [13, 36, 545, 568], "8571434": [13, 36, 545, 568], "2857151": [13, 545, 568], "dropout1d": [13, 36, 309], "droput1d": [13, 332, 333], "dropout2d": [13, 36, 309], "dropout3d": [13, 36, 309], "droput3d": [13, 334], "outer_batch_shap": [13, 36, 545, 569], "inner_batch_shap": [13, 36, 545, 569], "in_featur": [13, 36, 545, 569, 735], "out_featur": [13, 36, 545, 569, 735], "84": [13, 22, 31, 41, 122, 152, 217, 539, 540, 546, 551, 556, 569, 589, 644, 647, 648, 666], "133": [13, 451, 543, 569], "134": [13, 546, 569, 586], "lstm_updat": [13, 36, 545, 740], "init_h": [13, 36, 545, 570, 740], "init_c": [13, 36, 545, 570, 740], "recurrent_kernel": [13, 36, 545, 570, 740], "recurrent_bia": [13, 36, 545, 570, 740], "cell": [13, 36, 545, 570, 684, 721, 740], "batch_shap": [13, 18, 28, 36, 41, 87, 96, 538, 545, 546, 552, 570, 571, 572, 602, 645, 684, 738, 740, 742], "hidden": [13, 36, 545, 570, 684, 719, 726, 740, 744], "recurr": [13, 36, 545, 570, 740, 755, 759], "timestep": [13, 36, 545, 570, 571, 684, 740], "h_i": [13, 36, 570], "c_i": [13, 36, 570], "rc": [13, 36, 570], "multi_head_attent": [13, 36, 545, 732], "num_head": [13, 36, 545, 571, 684], "attention_mask": [13, 36, 545, 571], "in_proj_weight": [13, 36, 545, 571], "q_proj_weight": [13, 36, 545, 571], "k_proj_weight": [13, 36, 545, 571], "v_proj_weight": [13, 36, 545, 571], "out_proj_weight": [13, 36, 545, 571], "in_proj_bia": [13, 36, 545, 571], "out_proj_bia": [13, 36, 545, 571], "is_caus": [13, 36, 545, 571, 572], "return_attention_weight": [13, 36, 545, 571], "average_attention_weight": [13, 36, 545, 571], "key_chain": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675], "to_appli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 550, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675], "prune_unappli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 550, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675], "map_sequ": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 269, 270, 273, 274, 275, 276, 278, 280, 286, 287, 293, 295, 296, 297, 298, 299, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 351, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 380, 381, 382, 385, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 421, 426, 427, 434, 435, 436, 437, 442, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675], "scaled_dot_product_attent": [13, 36, 545], "dropout_p": [13, 36, 545, 572], "queri": [13, 26, 36, 152, 166, 465, 491, 540, 543, 545, 571, 572, 684, 720, 722, 742, 755], "num_queri": [13, 36, 545, 571, 572], "feat_dim": [13, 36, 545, 572], "num_kei": [13, 36, 545, 571, 572], "causal": [13, 36, 545, 571, 572], "attent": [13, 36, 545, 571, 572, 684, 705, 714, 717], "score": [13, 36, 311, 377, 545, 572, 702], "40000001": [13, 25, 51, 52, 61, 64, 249, 301, 535, 545, 554, 572, 657], "29999995": [13, 249, 301, 545, 554, 572, 657], "19994521": [13, 545, 572], "09994531": [13, 545, 572], "30000019": [13, 545, 572], "_arraywithlinearalgebra": [14, 51], "choleski": [14, 37, 546, 732], "l": [14, 31, 37, 221, 310, 357, 546, 573, 578, 579, 580, 584, 598, 714, 715], "625": [14, 32, 284, 546, 573], "cross": [14, 15, 37, 38, 546, 547, 603, 604, 605, 702, 721, 722], "vif": [14, 37, 574], "det": [14, 37, 546, 592, 721], "axis1": [14, 16, 37, 39, 546, 548, 577, 598, 618], "axis2": [14, 37, 546, 577, 598], "eigh": [14, 37, 310, 357, 546, 578], "uplo": [14, 37, 546, 579, 580], "eigvalsh": [14, 37, 546], "inner": [14, 28, 37, 55, 96, 310, 357, 538, 546, 549, 578, 579, 584, 622, 623, 624, 712, 732], "array_lik": [14, 37, 309, 311, 312, 352, 373, 376, 377, 405, 546, 581, 589], "ident": [14, 26, 87, 155, 465, 491, 538, 540, 543, 546, 550, 581, 586, 638, 684, 704, 706, 720, 729, 730, 733, 734, 736, 738, 742, 743, 748, 750], "53": [14, 18, 31, 36, 113, 169, 199, 351, 527, 529, 539, 540, 544, 546, 551, 581, 644, 648], "83": [14, 36, 41, 241, 309, 321, 330, 340, 351, 435, 541, 545, 546, 569, 581, 647], "3d": [14, 32, 309, 332, 333, 382, 546, 581, 684, 738, 747], "29": [14, 31, 33, 34, 36, 41, 182, 321, 351, 435, 455, 456, 526, 530, 541, 543, 544, 546, 581, 646, 647, 648], "109": [14, 546, 581], "105": [14, 36, 545, 546, 547, 568, 569, 581, 589, 603], "149": [14, 546, 581], "171": [14, 546, 581], "143": [14, 31, 52, 244, 541, 546, 581, 724], "173": [14, 546, 581], "203": [14, 31, 183, 546, 551, 581, 644], "233": [14, 546, 581], "inv": [14, 37, 546], "matmul": [14, 37, 523, 543, 546, 594, 718, 735, 736, 740], "transpose_a": [14, 37, 546, 584], "transpose_b": [14, 37, 546, 584], "adjoint_a": [14, 37, 546, 584], "adjoint_b": [14, 37, 546, 584], "matrix_norm": [14, 37, 546], "ord": [14, 37, 546, 585, 601], "fro": [14, 37, 311, 373, 546, 585], "nuc": [14, 37, 546, 585], "matrix_pow": [14, 37, 546], "matrix_rank": [14, 37, 546], "hermitian": [14, 37, 310, 357, 358, 546, 578, 579, 580, 587, 594], "largest_singular_valu": [14, 37, 546, 587, 590], "defici": [14, 546, 587], "matrix_transpos": [14, 37, 546, 742], "outer": [14, 37, 49, 546, 549, 622, 623, 624, 712], "pinv": [14, 37, 546], "pseudo": [14, 37, 546, 590, 731], "99999988": [14, 37, 546, 590], "qr": [14, 37, 546, 734], "orthonorm": [14, 37, 546, 591, 594], "lead": [14, 26, 37, 52, 201, 310, 364, 490, 541, 543, 546, 591, 594, 705, 706, 721, 722, 724, 736, 748], "complet": [14, 26, 37, 546, 591, 705, 712, 713, 714, 716, 717, 720, 721, 724, 726, 729, 733, 734, 735, 738, 742, 743, 753], "field": [14, 20, 37, 43, 310, 312, 357, 411, 546, 554, 578, 579, 591, 592, 594, 656, 657, 658, 702, 721, 747, 753, 761], "those": [14, 16, 26, 32, 37, 39, 76, 133, 194, 227, 408, 523, 538, 539, 541, 543, 546, 548, 550, 553, 591, 594, 606, 627, 654, 704, 712, 713, 714, 717, 720, 721, 722, 730, 732, 733, 734, 735, 738, 752], "slogdet": [14, 37, 546], "logabsdet": [14, 37, 546, 592], "natur": [14, 37, 197, 215, 216, 217, 218, 237, 290, 306, 541, 546, 592, 705, 717, 724, 726, 734, 747], "098611": [14, 546, 592], "solv": [14, 37, 310, 364, 546, 702, 713, 716, 733, 741, 747, 757], "full_matric": [14, 37, 546, 594], "svf": [14, 594], "close": [14, 199, 217, 237, 258, 303, 541, 546, 548, 594, 609, 712, 713, 714, 722, 725, 733, 738, 755], "reconstructed_x": [14, 546, 594], "svdval": [14, 37, 546], "tensordot": [14, 37, 546, 722], "tensorsolv": [14, 37, 546], "vander": [14, 37, 546], "vandermond": [14, 37, 546, 599], "vecdot": [14, 37, 546], "vector_norm": [14, 37, 546], "singleton": [14, 19, 22, 23, 37, 42, 45, 46, 546, 548, 553, 556, 557, 601, 609, 616, 652, 667, 668, 669, 670, 671, 672, 673, 674, 675, 740], "mathemat": [14, 37, 177, 182, 194, 199, 201, 217, 227, 536, 541, 546, 585, 601, 722, 733, 738, 755, 761], "manhattan": [14, 37, 546, 601], "euclidean": [14, 37, 49, 546, 601], "7416575": [14, 37, 546, 601], "vector_to_skew_symmetric_matrix": [14, 37, 546], "_arraywithloss": [15, 51], "binary_cross_entropi": [15, 38, 547, 721], "from_logit": [15, 38, 547, 603, 685], "pos_weight": [15, 38, 547, 603], "amount": [15, 38, 169, 540, 547, 603, 604, 605, 713, 721, 723, 734], "crossentropi": [15, 38, 547, 603], "entropi": [15, 38, 547, 603, 604, 605, 702], "357": [15, 38, 547, 603, 605], "223": [15, 38, 547, 603, 605], "cross_entropi": [15, 38, 547, 605, 702, 720, 729, 732], "3862944": [15, 547, 604], "sparse_cross_entropi": [15, 38, 547], "_arraywithmanipul": [16, 51], "x_min": [16, 39, 548, 606, 745], "x_max": [16, 39, 548, 606, 745], "constant_pad": [16, 39, 548], "before_1": [16, 39, 312, 400, 548, 608, 621], "after_1": [16, 39, 312, 400, 548, 608, 621], "before_n": [16, 39, 312, 400, 548, 608, 621], "after_n": [16, 39, 312, 400, 548, 608, 621], "permute_dim": [16, 39, 548], "repetit": [16, 39, 548, 612, 619, 738], "fit": [16, 39, 548, 612, 712, 733, 740, 751, 752, 755], "flat": [16, 26, 39, 317, 425, 486, 543, 548, 612, 682], "allowzero": [16, 39, 548, 613], "remain": [16, 19, 32, 39, 42, 177, 194, 195, 201, 209, 210, 227, 230, 236, 238, 309, 332, 333, 334, 352, 541, 548, 550, 553, 613, 631, 654, 713, 714, 721, 724, 726, 729, 736, 738, 748], "roll": [16, 39, 548, 728], "shift": [16, 28, 39, 52, 91, 101, 186, 188, 269, 303, 538, 541, 548, 614, 713, 714, 723, 724, 728], "restor": [16, 39, 548, 614, 727], "num_or_size_split": [16, 26, 39, 548, 615, 740], "with_remaind": [16, 26, 39, 548, 615], "mani": [16, 26, 39, 101, 269, 303, 538, 548, 615, 682, 702, 704, 705, 706, 712, 713, 714, 717, 718, 720, 721, 722, 723, 724, 725, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 748, 751, 755, 758, 761, 762], "squeez": [16, 39, 548, 755], "squeezabl": [16, 548, 616], "document": [16, 201, 523, 541, 543, 617, 707, 709, 711, 714, 719, 721, 722, 724, 732, 733, 734, 735, 743, 745], "swapax": [16, 39, 548], "axis0": [16, 39, 548, 618], "swap_ax": [16, 618], "tile": [16, 33, 39, 457, 548], "unpack": [16, 39, 548, 620, 734, 735], "zero_pad": [16, 39, 548], "_arraywithnorm": [17, 51], "layer_norm": [17, 40, 551], "normalized_idx": [17, 40, 551, 644], "new_std": [17, 40, 551, 644, 687], "learnabl": [17, 40, 549, 551, 624, 644, 684, 687, 745], "deviat": [17, 18, 22, 40, 41, 45, 551, 552, 556, 644, 647, 671, 683, 687, 706, 716], "0976": [17, 551, 644], "3452": [17, 551, 644], "2740": [17, 551, 644], "1047": [17, 551, 644], "5886": [17, 551, 644], "2732": [17, 551, 644], "7696": [17, 551, 644], "7024": [17, 551, 644], "2518": [17, 551, 644], "826": [17, 551, 644], "178": [17, 551, 644], "981": [17, 551, 644], "831": [17, 551, 644], "421": [17, 551, 644], "_arraywithrandom": [18, 51], "multinomi": [18, 41, 316, 422, 552], "population_s": [18, 41, 552, 645], "num_sampl": [18, 41, 552, 645], "unnorm": [18, 41, 552, 645, 735], "popul": [18, 22, 26, 41, 45, 552, 556, 645, 671, 673, 722, 723, 732, 735, 740, 761], "draw": [18, 41, 316, 420, 422, 424, 552, 645, 647, 648, 683, 712, 716, 734, 735], "ve": [18, 41, 552, 645, 712, 713, 714, 735, 738, 739, 742, 750], "highest": [18, 41, 552, 646, 722], "half": [18, 41, 76, 241, 538, 541, 552, 646, 648, 710, 738], "235": [18, 647], "float16": [18, 29, 41, 89, 111, 113, 114, 119, 121, 255, 282, 301, 306, 538, 539, 546, 601, 647, 648, 710, 722, 733, 735], "807": [18, 647], "random_uniform": [18, 41, 552, 723, 726, 735, 740, 744], "86": [18, 32, 41, 309, 321, 340, 435, 524, 544, 647, 648], "_arraywithsearch": [19, 51], "select_last_index": [19, 42, 553, 651, 652], "occurr": [19, 312, 321, 411, 432, 553, 554, 651, 652, 656], "argmin": [19, 42, 553], "output_dtyp": [19, 42, 553, 652], "across": [19, 26, 33, 42, 51, 165, 166, 194, 201, 227, 245, 315, 416, 447, 468, 503, 540, 541, 543, 545, 550, 553, 568, 571, 631, 651, 652, 684, 712, 716, 722, 724, 726, 728, 729, 731, 735, 738, 753, 755, 760], "argwher": [19, 42, 553], "nonzero": [19, 42, 175, 176, 177, 180, 183, 192, 194, 197, 199, 201, 227, 240, 245, 541, 553], "as_tupl": [19, 42, 553, 654], "fewer": [19, 42, 553, 654], "yield": [19, 265, 266, 303, 312, 400, 553, 655, 702, 721], "_arraywithset": [20, 51], "unique_al": [20, 43, 554], "by_valu": [20, 43, 554, 656], "inverse_indic": [20, 43, 312, 411, 554, 656, 658], "unique_count": [20, 43, 554], "unique_invers": [20, 43, 554], "unique_valu": [20, 43, 554], "admonit": [20, 659], "henc": [20, 177, 276, 306, 541, 548, 554, 609, 656, 657, 658, 659, 693, 713, 720, 721, 722, 732, 735], "dask": [20, 554, 656, 657, 658, 659, 705], "difficult": [20, 554, 656, 657, 658, 659, 714, 716, 722, 735, 748], "know": [20, 554, 656, 657, 658, 659, 706, 709, 712, 714, 723, 730, 734, 735, 738, 756], "omit": [20, 237, 541, 554, 656, 657, 658, 659, 728, 732, 733], "x_i": [20, 22, 31, 174, 175, 176, 179, 180, 181, 183, 185, 190, 191, 192, 197, 199, 200, 207, 208, 209, 210, 211, 215, 216, 217, 218, 222, 229, 234, 237, 238, 239, 240, 241, 242, 244, 245, 247, 276, 295, 306, 541, 554, 556, 656, 657, 658, 659, 667, 668, 669, 671, 672, 673, 683, 725], "x_j": [20, 554, 656, 657, 658, 659], "impli": [20, 554, 656, 657, 658, 659, 735], "could": [20, 554, 656, 657, 658, 659, 705, 706, 712, 713, 714, 716, 721, 722, 724, 730, 732, 733, 734, 735, 740, 742, 743, 744, 755, 760, 761], "typeerror": [20, 43, 554, 659, 742], "_arraywithsort": [21, 51], "argsort": [21, 44, 555, 662, 733], "descend": [21, 44, 546, 555, 594, 595, 660, 663], "stabil": [21, 44, 501, 502, 543, 555, 660, 663, 722, 731, 736, 738], "maintain": [21, 44, 555, 660, 663, 704, 714, 716, 727, 732, 734, 735, 754], "msort": [21, 44, 555], "searchsort": [21, 44, 555], "side": [21, 44, 286, 306, 555, 662, 684, 696, 713, 714, 719], "sorter": [21, 44, 555, 662], "ret_dtyp": [21, 44, 555, 662], "_arraywithstatist": [22, 51], "cumprod": [22, 45, 556, 733, 745], "120": [22, 45, 52, 546, 589, 664, 702], "cumsum": [22, 45, 556, 722], "einsum": [22, 45, 556], "equat": [22, 32, 45, 260, 303, 546, 556, 593, 666, 696, 721, 755], "operand": [22, 32, 36, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 295, 299, 306, 307, 309, 351, 541, 546, 556, 592, 598, 666, 667, 669, 670, 672, 696, 717, 720, 725, 733], "describ": [22, 32, 177, 194, 195, 227, 230, 232, 316, 319, 424, 427, 541, 545, 556, 571, 666, 670, 672, 709, 712, 713, 714, 719, 721, 732, 733, 735, 740, 745, 755], "contract": [22, 546, 556, 596, 666], "seq": [22, 556, 666], "consist": [22, 26, 194, 201, 227, 310, 357, 541, 546, 556, 578, 579, 666, 685, 686, 704, 716, 717, 721, 722, 727, 732, 740, 756], "ii": [22, 45, 556, 666, 714], "jk": [22, 556, 666], "ik": [22, 556, 666], "66": [22, 32, 33, 34, 189, 309, 340, 455, 456, 528, 541, 543, 544, 546, 556, 589, 666], "104": [22, 546, 556, 589, 666], "126": [22, 59, 233, 535, 541, 546, 556, 586, 666], "510": [22, 556, 666], "special": [22, 37, 49, 51, 52, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 295, 306, 541, 546, 556, 592, 598, 667, 668, 669, 670, 671, 672, 673, 683, 712, 716, 717, 719, 721, 724, 725, 726, 728, 732, 734, 735, 736, 738, 755, 756, 757], "arithmet": [22, 45, 188, 194, 227, 541, 556, 668, 733], "propag": [22, 188, 541, 556, 667, 668, 669, 671, 672, 673, 731], "04999995": [22, 668], "freedom": [22, 45, 556, 671, 673, 718], "adjust": [22, 45, 310, 370, 556, 671, 673, 693], "constitut": [22, 45, 556, 671, 673, 729, 740, 756], "commonli": [22, 45, 556, 671, 673, 726, 729, 731], "81649661": [22, 556, 671], "var": [22, 45, 47, 72, 73, 74, 75, 537, 549, 556, 622, 623, 690, 713, 724, 740], "6666665": [22, 673, 743], "667": [22, 33, 194, 451, 501, 541, 543, 673], "_arraywithutil": [23, 51], "AND": [23, 46, 184, 195, 221, 541, 557, 674], "invalid": [23, 46, 546, 548, 557, 600, 609, 674, 675, 713, 722], "OR": [23, 46, 187, 223, 230, 541, 557, 675, 713, 714, 731], "_wrap_funct": [24, 47, 719, 729, 730], "function_nam": [24, 47, 712, 736], "new_funct": [24, 47, 719], "add_ivy_array_instance_method": 24, "cl": [24, 47], "shown": [24, 26, 47, 211, 234, 276, 306, 541, 712, 713, 714, 716, 719, 721, 722, 724, 726, 727, 728, 733, 734, 735, 736, 737, 740, 742, 748], "toi": [24, 47], "arrayexampl": 24, "hasattr": [24, 47], "_containerwithactiv": [25, 52], "dict_in": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "queue": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 496, 518, 543, 737, 743], "queue_load_s": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "container_combine_method": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "list_join": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "queue_timeout": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 496, 518, 543, 737], "print_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "key_length_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "print_ind": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "print_line_spac": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "ivyh": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "default_key_color": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "green": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 701, 712, 713, 714], "keyword_color_dict": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "rebuild_child_contain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "types_to_iteratively_nest": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "alphabetical_kei": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "dynamic_backend": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 686, 718, 737], "build_cal": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "containerbas": [25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 720], "static": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 55, 56, 84, 329, 342, 347, 369, 372, 406, 415, 504, 538, 589, 681, 686, 733, 737, 748, 754, 755, 756], "_static_gelu": 25, "exact": [25, 26, 59, 309, 311, 344, 349, 375, 554, 656, 658, 680, 713, 714, 716, 724, 740], "formul": [25, 59, 680], "chain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 332, 333, 334, 373, 374, 376, 377, 385, 406, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 549, 550, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 622, 623, 627, 638, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 682, 689, 717, 720, 731, 733, 744, 745, 748, 755], "prune": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 274, 275, 276, 278, 280, 286, 287, 293, 295, 297, 298, 299, 332, 333, 334, 373, 374, 376, 377, 380, 381, 382, 385, 406, 408, 409, 414, 416, 417, 418, 419, 421, 434, 435, 436, 437, 444, 447, 448, 450, 451, 455, 456, 457, 459, 462, 463, 466, 468, 470, 471, 472, 474, 475, 478, 486, 487, 501, 502, 504, 506, 508, 509, 522, 528, 533, 550, 559, 560, 561, 562, 568, 569, 572, 573, 574, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 598, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 620, 621, 638, 639, 640, 641, 645, 646, 647, 648, 650, 653, 656, 657, 658, 659, 660, 664, 665, 668, 670, 671, 673, 674, 675, 721], "static_gelu": 25, "185": 25, "046": 25, "_static_hardswish": 25, "_static_leaky_relu": 25, "static_leaky_relu": 25, "38999999": [25, 32, 61, 249, 301], "_static_log_softmax": 25, "static_log_softmax": 25, "371": [25, 62], "_static_mish": 25, "static_mish": 25, "30883577": [25, 63, 535], "28903052": [25, 63, 535], "10714479": [25, 63, 535], "_static_relu": 25, "static_relu": 25, "_static_sigmoid": 25, "static_sigmoid": 25, "2689414": [25, 65, 66, 535], "7310586": [25, 65, 66, 535], "88079703": [25, 65, 535], "62245935": [25, 65], "4750208": [25, 65], "_static_softmax": 25, "static_softmax": 25, "72844321": [25, 66], "19852395": [25, 66], "07303288": [25, 66], "_static_softplu": 25, "revert": [25, 67, 535], "static_softplu": 25, "53499615": 25, "42036411": 25, "948": [25, 67], "166": [25, 59, 535], "159": [25, 59, 535, 545, 569], "__getitem__": [26, 720], "slice": [26, 33, 101, 269, 303, 312, 384, 405, 408, 462, 463, 465, 491, 538, 543, 550, 634, 755], "dictionari": [26, 43, 52, 166, 526, 540, 544, 659, 717, 721, 722, 729, 733, 734, 743, 748], "multiprocess": [26, 52, 543, 743, 748], "asynchron": [26, 52, 755], "wait": [26, 52, 496, 543, 702, 712, 714, 721, 733], "arriv": [26, 52, 496, 543, 738], "cont_list_join": [26, 52], "timeout": [26, 52, 496, 518, 543, 737], "limit": [26, 52, 119, 122, 450, 451, 539, 543, 548, 606, 683, 690, 702, 713, 714, 719, 721, 724, 726, 733, 735, 738, 743, 748, 754, 755, 756], "whitespac": [26, 52], "indent": [26, 52, 743], "newlin": [26, 52, 725], "color": [26, 52, 701], "termin": [26, 52, 713, 714, 720, 727, 740, 743], "termcolor": [26, 52], "rebuild": [26, 52, 708], "constructor": [26, 52, 446, 543, 681, 689, 722, 723, 725, 742], "kept": [26, 52, 549, 622, 623, 714, 732, 736], "encount": [26, 52, 684, 710, 712, 722, 726, 735], "further": [26, 52, 705, 706, 714, 716, 717, 721, 724, 726, 728, 729, 732, 733, 735, 739, 740, 743, 744, 760, 761], "instruct": [26, 52, 702, 712, 713, 716, 726, 727, 734, 735, 749, 753, 756, 759, 761], "structur": [26, 29, 52, 119, 122, 452, 543, 550, 629, 638, 682, 702, 712, 714, 717, 720, 729, 734, 735, 736, 743, 744, 754, 755], "alphabet": [26, 52], "__setitem__": [26, 717, 720, 742], "_cont_at_key_chains_input_as_dict": 26, "current_chain": 26, "ignore_key_error": 26, "_cont_at_key_chains_input_as_seq": 26, "_cont_call_static_method_with_flexible_arg": 26, "static_method": 26, "kw": 26, "self_idx": 26, "_cont_concat_unifi": 26, "_cont_get_dev": 26, "_cont_get_shap": 26, "properti": [26, 49, 50, 51, 55, 686, 688, 716, 720, 729, 734, 735, 742, 743, 744, 761], "_cont_ivi": 26, "_cont_mean_unifi": 26, "_1": 26, "_cont_prune_key_chains_input_as_dict": 26, "return_cont": 26, "_cont_prune_key_chains_input_as_seq": 26, "_cont_slice_kei": 26, "key_slic": 26, "_cont_sum_unifi": 26, "_get_queue_item": 26, "cont_all_fals": 26, "assert_is_bool": 26, "assert": [26, 448, 543, 710, 715, 716, 729, 732, 733, 734, 735, 736, 742, 743], "cont_all_key_chain": 26, "include_empti": 26, "cont_all_tru": [26, 720, 743], "cont_as_bool": 26, "cont_assert_contains_sub_contain": 26, "sub_cont": 26, "screen": [26, 712, 713, 743], "cont_assert_contains_sub_structur": 26, "check_shap": [26, 690], "cont_assert_ident": 26, "check_typ": 26, "same_arrai": [26, 743], "arrays_equ": 26, "cont_assert_identical_structur": 26, "assert_and_assign": 26, "strucutr": 26, "congruent": 26, "cont_at_key_chain": 26, "ignore_non": 26, "cont_at_kei": 26, "substr": 26, "try": [26, 510, 543, 683, 693, 702, 703, 705, 706, 712, 713, 714, 716, 717, 720, 721, 722, 726, 727, 732, 734, 740, 742, 748], "cont_combin": 26, "prioriti": [26, 693, 714, 723, 732], "most": [26, 28, 49, 96, 310, 357, 495, 517, 538, 543, 546, 578, 579, 699, 702, 705, 711, 712, 713, 717, 720, 721, 722, 723, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 748, 755, 756, 758, 759, 761, 762], "duplic": [26, 550, 627, 718, 725, 730, 731, 734, 744, 761], "configur": [26, 166, 540, 550, 638, 708, 713, 714, 719, 721, 722, 727], "container_rightmost": 26, "cont_common_key_chain": 26, "cont_config": 26, "cont_contains_sub_contain": 26, "cont_contains_sub_structur": 26, "cont_copi": [26, 743], "cont_create_if_abs": 26, "noth": [26, 738, 761], "cont_cutoff_at_depth": 26, "depth_cutoff": 26, "summari": [26, 123, 452, 467, 539, 543, 713, 714, 735], "cont_cutoff_at_height": 26, "height_cutoff": 26, "deep": [26, 455, 543, 702, 704, 707, 709, 711, 712, 714, 716, 719, 720, 722, 727, 731, 734, 739, 742, 743, 753, 755, 758, 759, 761, 762], "intern": [26, 54, 55, 56, 550, 625, 635, 636, 683, 684, 685, 686, 687, 689, 717, 720, 723, 725, 732, 734, 735, 737], "cont_dev": 26, "belong": [26, 712, 716, 744], "cont_dev_str": 26, "cont_diff": [26, 743], "diff_kei": 26, "detect_key_diff": 26, "detect_value_diff": 26, "detect_shape_diff": 26, "share": [26, 140, 539, 702, 705, 718, 720, 724, 729, 731, 733, 734, 735, 738, 740, 753, 754, 761], "among": [26, 706, 720, 721, 735, 738, 755], "container0": 26, "cont_duplicate_array_keychain": 26, "cont_find_sub_contain": 26, "sub_cont_to_find": 26, "exsit": 26, "cont_find_sub_structur": 26, "sub_struc_to_find": 26, "cont_flatten_key_chain": [26, 743], "__": [26, 724, 743], "above_height": [26, 743], "below_depth": [26, 743], "cont_format_key_chain": 26, "format_fn": 26, "cont_from_disk_as_hdf5": [26, 743], "h5_obj_or_filepath": 26, "slice_obj": 26, "load": [26, 310, 370, 557, 686, 702, 735, 748, 754, 761], "disk": [26, 686, 743, 754], "h5py": 26, "hdf5": [26, 686, 743], "filepath": [26, 557, 676, 677, 714, 716], "h5": 26, "cont_from_disk_as_json": [26, 743], "json_filepath": 26, "json": [26, 708, 713, 743], "cont_from_disk_as_pickl": [26, 743], "pickle_filepath": 26, "pickl": [26, 686, 720, 743], "cont_from_flat_list": 26, "flat_list": 26, "hierarchi": [26, 712, 743, 751, 761], "cont_handle_inplac": 26, "prime": [26, 722], "overwritten": [26, 717, 718], "cont_has_kei": 26, "query_kei": 26, "somewher": [26, 721], "cont_has_key_chain": 26, "cont_ident": [26, 743], "cont_identical_array_shap": 26, "regardless": [26, 706, 707, 722, 726, 742, 745], "cont_identical_config": 26, "cont_identical_structur": 26, "cont_if_exist": 26, "cont_inplace_upd": 26, "cont_ivi": 26, "cont_key_chains_contain": 26, "sub_str": 26, "cont_list_stack": [26, 743], "cont_load": 26, "cont_map": [26, 720, 743], "func": [26, 49, 167, 300, 308, 449, 523, 526, 527, 529, 534, 540, 543, 544, 550, 638, 712, 716, 717, 724, 726, 731, 732], "cont_map_sub_cont": 26, "include_self": 26, "possibi": 26, "cont_max_depth": 26, "cont_multi_map": 26, "map_nest": 26, "assert_ident": 26, "leftmost": [26, 550, 638], "cont_multi_map_in_funct": 26, "cont_num_arrai": 26, "cont_overwrite_at_key_chain": 26, "target_dict": 26, "return_dict": 26, "cont_prune_empti": 26, "keep_non": 26, "cont_prune_key_chain": 26, "key1": [26, 702, 744], "key2": [26, 702], "key3": 26, "cont_prune_key_from_key_chain": 26, "cont_prune_kei": 26, "cont_prune_keys_from_key_chain": 26, "cont_reduc": 26, "cont_remove_key_length_limit": 26, "cont_remove_print_limit": 26, "cont_reshape_lik": 26, "leading_shap": 26, "cont_restructur": 26, "keep_orig": 26, "old": [26, 713, 718, 732], "cont_restructure_key_chain": 26, "keychain_map": 26, "cont_sav": 26, "cont_set_at_key_chain": 26, "cont_set_at_kei": 26, "cont_shap": [26, 545, 563], "attribut": [26, 119, 120, 121, 122, 153, 154, 162, 460, 461, 539, 540, 543, 718, 719, 720, 722, 725, 726, 729, 730, 732, 733, 738, 741, 742, 743, 744], "cont_show": 26, "cont_show_sub_contain": 26, "sub_cont_or_keychain": 26, "cont_size_ordered_arrai": 26, "keychain": [26, 32, 275, 380, 381, 382, 408], "cont_slice_kei": 26, "all_depth": 26, "cont_slice_via_kei": 26, "slice_kei": 26, "cont_sort_by_kei": 26, "cont_structural_diff": 26, "cont_to_dict": 26, "cont_to_disk_as_hdf5": [26, 743], "starting_index": 26, "max_batch_s": 26, "later": [26, 449, 543, 712, 727, 732, 735, 736, 755], "cont_to_disk_as_json": [26, 743], "cont_to_disk_as_pickl": [26, 743], "cont_to_flat_list": 26, "cont_to_iter": [26, 720], "leaf_keys_onli": 26, "cont_to_iterator_kei": 26, "cont_to_iterator_valu": 26, "cont_to_json": 26, "cont_to_nested_list": 26, "cont_to_raw": 26, "cont_trim_kei": 26, "max_length": 26, "trim": 26, "cont_try_kc": 26, "cont_unifi": 26, "unifi": [26, 167, 540, 703, 705, 715, 716, 717, 722, 726, 730, 731, 733, 738, 740, 748, 751, 752, 753, 755, 759, 762], "concatten": [26, 167, 540], "cont_unstack_cont": 26, "dim_siz": 26, "cont_update_config": 26, "cont_with_default_key_color": 26, "cont_with_entries_as_list": 26, "cont_with_ivy_backend": 26, "ivy_backend": [26, 734], "cont_with_key_length_limit": [26, 743], "cont_with_print_ind": [26, 743], "cont_with_print_limit": [26, 743], "cont_with_print_line_spac": 26, "h5_file_s": 26, "shuffle_h5_fil": 26, "seed_valu": [26, 552, 649], "split_cont": 26, "constitu": [26, 745], "_is_json": 26, "_repr": 26, "_containerwithconvers": [27, 52], "_static_to_ivi": 27, "_static_to_n": 27, "_containerwithcr": [28, 52], "_static_arang": 28, "_static_asarrai": 28, "_static_copy_arrai": 28, "_static_empti": 28, "_static_empty_lik": 28, "_static_ey": 28, "n_row": [28, 32, 87, 101, 269, 303, 310, 363, 538], "n_col": [28, 32, 87, 101, 269, 303, 538], "_static_from_dlpack": 28, "_static_ful": 28, "_static_full_lik": 28, "static_full_lik": 28, "2324": [28, 91, 538], "234": [28, 31, 91, 113, 196, 247, 538, 539, 541, 545, 569], "123": [28, 29, 91, 122, 458, 538, 543, 735], "_static_linspac": 28, "_static_logspac": 28, "static_logspac": 28, "15443469": [28, 93], "64158883": [28, 93], "_static_meshgrid": 28, "_static_native_arrai": 28, "_static_one_hot": 28, "static_one_hot": 28, "_static_on": 28, "_static_ones_lik": 28, "_static_tril": 28, "_static_triu": 28, "_static_zero": 28, "_static_zeros_lik": 28, "frombuff": [28, 538], "expos": [28, 89, 452, 538, 543, 702, 704, 721, 740, 744], "interfac": [28, 89, 538, 705, 742, 745, 748, 750, 751, 752, 753, 754, 755, 759, 762], "x00": [28, 89, 538], "xf0": [28, 89, 538], "x01": [28, 89, 538], "x02": [28, 89, 538], "x03": [28, 89, 538], "x04": [28, 89, 538], "x05": [28, 89], "5443469": [28, 93, 538], "static_frombuff": 28, "static_triu_indic": 28, "triu_indic": [28, 538], "_containerwithdatatyp": [29, 52], "_static_astyp": 29, "718": [29, 31, 106, 223, 539], "618": [29, 31, 106, 223, 539], "static_astyp": 29, "_static_broadcast_arrai": 29, "static_broadcast_arrai": 29, "_static_broadcast_to": 29, "static_broadcast_to": 29, "_static_can_cast": 29, "from_": [29, 109, 539], "static_can_cast": 29, "_static_default_complex_dtyp": 29, "complex_dtyp": [29, 112, 135, 539], "_static_default_float_dtyp": 29, "float_dtyp": [29, 114, 137, 539], "_static_dtyp": 29, "_static_finfo": 29, "inquir": [29, 119, 122], "static_finfo": 29, "55040e": [29, 119, 539], "7976931348623157e": [29, 119, 539], "308": [29, 119, 539, 735], "_static_function_supported_dtyp": 29, "_static_function_unsupported_dtyp": 29, "_static_iinfo": 29, "1800": [29, 122, 539], "1084": 29, "40000": 29, "static_iinfo": 29, "2147483648": [29, 122, 539], "2147483647": [29, 122, 539], "_static_is_bool_dtyp": 29, "dtype_in": [29, 104, 105, 118, 124, 125, 126, 127, 128, 129, 130, 131, 146, 539], "_static_is_complex_dtyp": 29, "is_complex_dtyp": [29, 539, 736], "roughli": [29, 713, 716, 758], "static_is_complex_dtyp": 29, "complex64": [29, 112, 126, 135, 141, 207, 234, 255, 301, 539, 541, 546, 592, 594, 595, 722], "_static_is_float_dtyp": 29, "static_is_float_dtyp": 29, "_static_is_int_dtyp": 29, "_static_is_uint_dtyp": 29, "_static_result_typ": 29, "static_result_typ": 29, "broadcats": [29, 107], "_containerwithdevic": [30, 52], "_static_dev": 30, "static_dev": 30, "_static_to_devic": 30, "static_to_devic": 30, "contaion": [30, 151], "_containerwithelementwis": [31, 52], "_static_ab": 31, "static_ab": 31, "_static_aco": 31, "static_aco": 31, "_static_acosh": 31, "static_acosh": 31, "_static_add": 31, "static_add": [31, 56], "_static_asin": 31, "static_asin": 31, "524": [31, 179, 541], "412": [31, 36, 179, 541], "201": [31, 32, 179, 330, 541], "_static_asinh": 31, "static_asinh": 31, "_static_atan": 31, "static_atan": 31, "_static_atan2": 31, "static_atan2": 31, "915": [31, 182, 541], "983": [31, 182, 541], "978": [31, 182, 541], "696": [31, 41, 182, 541, 647], "993": [31, 182, 541], "_static_atanh": 31, "static_atanh": 31, "_static_bitwise_and": 31, "static_bitwise_and": 31, "_static_bitwise_invert": 31, "static_bitwise_invert": 31, "_static_bitwise_left_shift": 31, "_static_bitwise_or": 31, "static_bitwise_or": 31, "_static_bitwise_right_shift": 31, "static_bitwise_right_shift": 31, "_static_bitwise_xor": 31, "static_bitwise_xor": 31, "_static_ceil": 31, "static_ceil": 31, "_static_co": 31, "static_co": 31, "_static_cosh": 31, "static_cosh": 31, "34": [31, 32, 33, 41, 122, 189, 192, 219, 240, 309, 321, 351, 441, 455, 456, 539, 541, 543, 545, 546, 552, 569, 586, 647, 648, 723], "_static_deg2rad": 31, "static_deg2rad": 31, "0262": [31, 193, 233, 541], "873": [31, 193, 233, 541], "_static_divid": 31, "static_divid": 31, "_static_equ": 31, "static_equ": 31, "_static_erf": 31, "static_erf": 31, "27632612": [31, 196], "934008": [31, 196], "99999928": [31, 196], "91903949": [31, 196], "_static_exp": 31, "static_exp": 31, "59814835": [31, 197, 541], "4131622": [31, 197], "_static_expm1": 31, "thefunct": [31, 196], "areal": 31, "static_expm1": 31, "71828175": [31, 197, 541], "38905621": [31, 197, 541], "59815216": 31, "_static_floor": 31, "static_floor": 31, "_static_floor_divid": 31, "static_floor_divid": 31, "_static_great": 31, "static_great": 31, "_static_greater_equ": 31, "static_greater_equ": 31, "_static_isfinit": 31, "999999999999": [31, 208, 541], "static_isfinit": 31, "_static_isinf": 31, "static_isinf": 31, "_static_isnan": 31, "static_isnan": 31, "_static_isr": 31, "0j": [31, 32, 97, 98, 175, 176, 177, 180, 183, 192, 197, 199, 211, 215, 217, 234, 238, 240, 241, 245, 276, 306, 538, 541, 546, 592], "23j": [31, 32], "9j": [31, 32], "static_isr": 31, "_static_lcm": 31, "1080": [31, 212], "1550": [31, 212], "130": [31, 212], "_static_less": 31, "static_less": 31, "_static_less_equ": 31, "static_less_equ": 31, "_static_log": 31, "static_log": 31, "_static_log10": 31, "static_log10": 31, "898": [31, 216, 541], "0414": [31, 216, 541], "_static_log1p": 31, "static_log1p": 31, "_static_log2": 31, "_static_logaddexp": 31, "static_logaddexp": 31, "_static_logical_and": 31, "static_logical_and": 31, "_static_logical_not": 31, "static_logical_not": 31, "_static_logical_or": 31, "static_logical_or": 31, "_static_logical_xor": 31, "static_logical_xor": 31, "_static_maximum": 31, "static_maximum": 31, "_static_minimum": 31, "static_minimum": 31, "_static_multipli": 31, "static_multipli": 31, "_static_neg": 31, "static_neg": 31, "_static_not_equ": 31, "static_not_equ": 31, "_static_posit": 31, "static_posit": 31, "_static_pow": 31, "static_pow": 31, "_static_rad2deg": 31, "static_rad2deg": 31, "5160": 31, "10300": [31, 233, 541], "15500": 31, "20600": 31, "2860": [31, 233], "_static_reciproc": 31, "recirpoc": [31, 235], "static_reciproc": 31, "_static_remaind": 31, "static_remaind": 31, "_static_round": 31, "thevfunct": 31, "300": [31, 33, 36, 237, 309, 332, 333, 463, 487, 541, 543, 546, 582, 735], "527": [31, 237, 541], "static_round": 31, "301": [31, 237, 541], "_static_sign": 31, "static_sign": 31, "_static_sin": 31, "static_sin": 31, "757": [31, 239, 541], "959": [31, 199, 239, 541], "279": [31, 239, 309, 330, 340, 450, 541, 543], "_static_sinh": 31, "static_sinh": 31, "835": [31, 240], "347": [31, 240], "721": [31, 240], "_static_sqrt": 31, "static_sqrt": 31, "_static_squar": 31, "static_squar": 31, "_static_subtract": 31, "static_subtract": 31, "_static_tan": 31, "static_tan": 31, "_static_tanh": 31, "static_tanh": 31, "995": [31, 245, 541], "9999": 31, "_static_trapz": 31, "static_trapz": 31, "_static_trunc": 31, "static_trunc": 31, "_static_trunc_divid": 31, "75j": [31, 178, 207], "01317055": [31, 178], "05634501": [31, 178], "115": [31, 178, 233, 541], "3461759": [31, 178], "524111": [31, 178], "644": [31, 179, 541, 744], "305": [31, 36, 179, 541], "351": [31, 193, 233], "00613": [31, 193], "0154": [31, 193], "403": [31, 197], "428772": [31, 197], "649": [31, 199], "220": [31, 199], "865": [31, 199], "metho": [31, 206, 218], "7j": [31, 32, 211, 234, 276, 306, 541], "956": [31, 217], "08746284": [31, 220], "32192809": [31, 220], "nuner": [31, 227], "65": [31, 34, 41, 188, 227, 470, 524, 541, 543, 544, 546, 556, 589, 647, 648, 666, 721], "000": [31, 228, 710, 721], "413": [31, 233], "took": [31, 234], "335": [31, 32, 234, 276], "345j": [31, 32, 234, 276], "static_angl": 31, "static_exp2": 31, "static_fmin": 31, "static_gcd": 31, "static_imag": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_r": 31, "_containerwithactivationexperiment": [32, 52], "_static_elu": 32, "static_elu": 32, "_static_silu": 32, "static_silu": 32, "27777028": [32, 256], "23947507": [32, 256], "0900332": [32, 256], "contan": [32, 250], "19722462": [32, 250], "84729779": [32, 250], "31326163": [32, 251], "46328258": [32, 251], "51301527": [32, 251], "79813886": [32, 251], "22856998": [32, 254], "42028043": [32, 254], "31868932": [32, 254], "static_logit": 32, "static_logsigmoid": 32, "34115386": 32, "64439666": 32, "24115384": 32, "55435526": 32, "07888974": 32, "00741899": 32, "26328245": 32, "00012302": 32, "static_prelu": 32, "static_relu6": 32, "static_selu": 32, "static_thresholded_relu": 32, "_containerwithconversionexperiment": [32, 52], "_containerwithcreationexperiment": [32, 52], "_static_trilu": 32, "blackman": [32, 258, 303], "00770143e": [32, 258], "49229857e": [32, 258], "hamming_window": [32, 303], "coeffici": [32, 260, 303, 546, 593], "ham": [32, 260, 303], "8000": [32, 260, 303], "2000": [32, 260, 303, 702], "4180": [32, 260], "8180": [32, 260], "hann_window": [32, 303], "hann": [32, 261, 303], "7500": [32, 261], "3455": [32, 261], "9045": [32, 261], "kaiser_bessel_derived_window": [32, 303], "suitabl": [32, 263, 264, 303, 555, 662, 713, 714, 720, 736, 755], "spectral": [32, 263, 264, 303], "analysi": [32, 263, 264, 303, 755, 756], "design": [32, 201, 258, 263, 264, 303, 541, 702, 704, 705, 715, 719, 721, 722, 732, 733, 734, 738, 740, 742, 748, 751, 753, 755, 758, 759, 760], "kaiser": [32, 258, 263, 264, 303], "70710677": [32, 263, 418, 419], "18493208": [32, 263, 303], "9827513": [32, 263, 303], "kaiser_window": [32, 303], "static_kaiser_window": [32, 264], "2049": [32, 264], "8712": [32, 264], "0367": [32, 264, 303], "7753": [32, 264], "static_blackman_window": 32, "window_length": [32, 258, 260, 263, 264, 273, 303], "static_eye_lik": 32, "static_hamming_window": 32, "static_hann_window": 32, "static_hann": 32, "static_kaiser_bessel_derived_window": 32, "static_tril_indic": 32, "static_unsorted_segment_min": 32, "static_unsorted_segment_sum": 32, "static_vorbis_window": 32, "vorbis_window": [32, 303], "vorbi": [32, 273, 303], "38268343": [32, 273], "92387953": [32, 273], "14943586": [32, 273, 303], "51644717": [32, 273], "85631905": [32, 273], "98877142": [32, 273], "tril_indic": [32, 303], "_containerwithdata_typeexperiment": [32, 52], "_containerwithdeviceexperiment": [32, 52], "_containerwithelementwiseexperiment": [32, 52], "0003": [32, 274, 546, 582], "0006": [32, 274, 298], "2345j": [32, 276], "5772": [32, 280], "9635": [32, 280], "4228": [32, 280], "9228": [32, 280], "mantissa": [32, 284, 306], "frist": [32, 285, 306], "coord": [32, 285], "6055": [32, 286], "160": [32, 288], "10240": [32, 288], "60000038": [32, 289, 306], "0707": [32, 295, 306], "0579": [32, 295, 306], "static_allclos": 32, "static_binar": 32, "static_conj": 32, "static_copysign": 32, "static_count_nonzero": 32, "static_diff": 32, "static_digamma": 32, "57721537": 32, "96351004": 32, "static_fix": 32, "static_float_pow": 32, "static_fmax": 32, "static_fmod": 32, "static_frexp": 32, "static_gradi": 32, "static_hypot": 32, "static_isclos": 32, "static_ldexp": 32, "static_lerp": 32, "90000057": [32, 289, 306], "80000019": [32, 289, 306], "70000076": [32, 289, 306], "55000019": [32, 289, 306], "05000019": [32, 289, 306], "static_modf": 32, "static_nansum": 32, "static_nextaft": 32, "static_signbit": 32, "static_sinc": 32, "636": 32, "090": 32, "070": 32, "057": 32, "static_sparsify_tensor": 32, "static_xlogi": 32, "static_zeta": 32, "0244": [32, 298], "_containerwithgeneralexperiment": [32, 52], "_static_reduc": 32, "static_reduc": 32, "_containerwithgradientsexperiment": [32, 52], "_containerwithimageexperiment": [32, 52], "_containerwithlayersexperiment": [32, 52], "_static_fft": 32, "static_fft": 32, "673": [32, 330], "0507": [32, 330], "79711437": [32, 309, 330, 340], "94867325": [32, 309, 330, 340], "74089146": [32, 309, 330, 340], "25980937": [32, 309, 330, 340], "64958102": [32, 309, 330, 340], "2442648": [32, 309, 330, 340], "247306": [32, 342], "908323j": [32, 342], "494955": [32, 342], "90395j": [32, 342], "static_adaptive_avg_pool1d": 32, "static_adaptive_avg_pool2d": 32, "static_adaptive_max_pool2d": 32, "static_avg_pool1d": 32, "static_avg_pool2d": 32, "static_avg_pool3d": 32, "static_dct": 32, "132": 32, "182": 32, "242": 32, "253": [32, 240, 541], "515": [32, 552, 647], "467": 32, "static_dft": 32, "static_embed": 32, "static_idct": 32, "93732834": [32, 309, 330], "75048852": [32, 309, 330], "29723358": [32, 309, 340], "6950531": 32, "93914509": 32, "88008738": 32, "18951225": 32, "06697273": [32, 309, 340], "57439804": 32, "68861485": [32, 309, 340], "41308832": [32, 309, 340], "0700836": 32, "2449036": 32, "285": 32, "6711426": 32, "514": 32, "501709": 32, "4924011": 32, "static_ifft": 32, "static_ifftn": 32, "static_interpol": 32, "static_max_pool1d": 32, "static_max_pool2d": 32, "max_pool2dd": 32, "static_max_pool3d": 32, "static_rfftn": 32, "_containerwithlinearalgebraexperiment": [32, 52], "933034": [32, 310, 354], "eigenvealu": [32, 357, 578], "xx": [32, 357, 359, 578], "37228107": [32, 357, 578], "3722816": [32, 357, 578], "8245648": [32, 357, 578], "41597357": [32, 357, 578], "56576747": [32, 357, 578], "9093767": [32, 357, 578], "56155": [32, 358], "82842": [32, 358], "450": [32, 362], "static_adjoint": 32, "static_cond": 32, "static_diagflat": 32, "static_dot": 32, "static_eig": 32, "static_eigh_tridiagon": 32, "static_eigv": 32, "static_initialize_tuck": 32, "static_kron": 32, "kroneck": [32, 310, 361, 362], "static_make_svd_non_neg": 32, "static_matrix_exp": 32, "static_mode_dot": 32, "static_multi_dot": 32, "regular": [32, 310, 321, 367, 438, 546, 583, 713, 733, 755], "static_multi_mode_dot": 32, "static_partial_tuck": 32, "static_svd_flip": 32, "static_truncated_svd": 32, "static_tuck": 32, "_containerwithlossesexperiment": [32, 52], "_static_huber_loss": 32, "static_huber_loss": 32, "0575": [32, 373], "_static_l1_loss": 32, "static_l1_loss": 32, "_static_smooth_l1_loss": 32, "static_smooth_l1_loss": 32, "_static_soft_margin_loss": 32, "_containerwithmanipulationexperiment": [32, 52], "_static_fill_diagon": 32, "_static_unique_consecut": 32, "atleast": [32, 312, 380, 381, 382, 723], "ary1": [32, 312, 380, 381, 382], "ary2": [32, 312, 380, 381, 382], "broadcast_shap": [32, 55, 312], "static_concat_from_sequ": [32, 385], "30192195": [32, 397], "static_as_strid": 32, "static_atleast_1d": 32, "static_atleast_2d": 32, "static_atleast_3d": 32, "static_broadcast_shap": 32, "static_dsplit": 32, "static_dstack": 32, "static_expand": 32, "static_flatten": 32, "static_fliplr": 32, "static_flipud": 32, "static_fold": 32, "static_heavisid": 32, "static_hsplit": 32, "static_hstack": 32, "static_i0": 32, "static_matric": 32, "static_moveaxi": 32, "static_pad": 32, "static_partial_fold": 32, "static_partial_tensor_to_vec": 32, "static_partial_unfold": 32, "static_partial_vec_to_tensor": 32, "static_rot90": 32, "static_soft_threshold": 32, "static_take_along_axi": 32, "static_top_k": 32, "static_unfold": 32, "static_vsplit": 32, "static_vstack": 32, "_containerwithnormsexperiment": [32, 52], "16903085": [32, 418, 419], "50709254": [32, 418, 419], "84515423": [32, 418, 419], "44183609": [32, 418, 419], "56807494": [32, 418, 419], "69431382": [32, 418, 419], "static_batch_norm": 32, "static_group_norm": 32, "static_instance_norm": 32, "static_l1_norm": 32, "static_l2_norm": 32, "static_lp_norm": 32, "12500000": 32, "37500000": 32, "62500000": 32, "27500000": 32, "35000000": 32, "42500000": 32, "0000000": 32, "5000000": 32, "2500000": 32, "_containerwithrandomexperiment": [32, 52], "43643127": [32, 422], "32325703": [32, 422], "24031169": [32, 422], "34251311": [32, 422], "31692529": [32, 422], "3405616": [32, 422], "5319725": [32, 422], "22458365": [32, 422], "24344385": [32, 422], "26588406": [32, 422], "61075421": [32, 422], "12336174": [32, 422], "51142915": [32, 422], "25041268": [32, 422], "23815817": [32, 422], "64042903": [32, 422], "25763214": [32, 422], "10193883": [32, 422], "31624692": [32, 422], "46567987": [32, 422], "21807321": [32, 422], "37677699": [32, 422], "39914594": [32, 422], "22407707": [32, 422], "static_bernoulli": 32, "static_beta": 32, "static_dirichlet": 32, "static_gamma": 32, "static_poisson": 32, "_containerwithsearchingexperiment": [32, 52], "static_unravel_index": 32, "_containerwithsetexperiment": [32, 52], "_containerwithsortingexperiment": [32, 52], "invert_permut": [32, 319], "static_invert_permut": 32, "static_lexsort": [32, 44], "_containerwithstatisticalexperiment": [32, 52], "_static_cummax": 32, "static_cummax": 32, "_static_cummin": 32, "todo": [32, 436, 712, 722, 733], "static_cummin": 32, "func_nam": [32, 437, 712, 724, 725, 729, 733], "static_bincount": 32, "static_corrcoef": 32, "static_cov": [32, 321, 434], "static_histogram": 32, "static_igamma": 32, "static_median": 32, "static_nanmean": 32, "static_nanmedian": 32, "static_quantil": 32, "_containerwithutilityexperiment": [32, 52], "static_optional_get_el": 32, "_containerwithgener": [33, 52], "_static_all_equ": 33, "static_all_equ": 33, "_static_array_equ": 33, "x0": [33, 447, 543, 724], "level": [33, 447, 682, 702, 706, 707, 712, 714, 720, 722, 726, 729, 731, 732, 733, 737, 738, 739, 740, 743, 744, 745, 748, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762], "a0": [33, 447], "static_array_equ": 33, "_static_assert_supports_inplac": 33, "_static_clip_matrix_norm": 33, "static_clip_matrix_norm": 33, "849": [33, 450, 451, 543], "_static_clip_vector_norm": 33, "static_clip_vector_norm": 33, "_static_einops_rearrang": 33, "static_einops_rearrang": 33, "_static_einops_reduc": 33, "static_einops_reduc": 33, "29333329": [33, 456, 543], "53000069": [33, 456, 543], "39666676": [33, 456, 543], "20666695": [33, 456, 543], "_static_einops_repeat": 33, "static_einops_repeat": 33, "_static_fourier_encod": 33, "static_fourier_encod": 33, "classivi": [33, 548, 554, 615, 657], "89858720e": 33, "79717439e": 33, "_static_gath": 33, "static_gath": 33, "_static_gather_nd": 33, "200": [33, 36, 188, 309, 332, 333, 463, 487, 541, 543, 696, 743], "400": [33, 36, 309, 332, 333, 463, 487, 543, 546, 582], "static_gather_nd": 33, "_static_get_num_dim": 33, "static_get_num_dim": 33, "_static_has_nan": 33, "leafwis": 33, "static_has_nan": 33, "_static_inplace_decr": 33, "_static_inplace_incr": 33, "_static_inplace_upd": 33, "_static_is_arrai": 33, "static_is_arrai": 33, "_static_is_ivy_arrai": 33, "static_is_ivy_arrai": 33, "_static_is_native_arrai": 33, "static_is_native_arrai": 33, "_static_scatter_flat": 33, "ref": [33, 37, 213, 227, 230, 236, 243, 541, 548, 617, 713, 732], "_static_scatter_nd": 33, "static_scatter_nd": 33, "_static_stable_divid": 33, "22222222": 33, "11111111": 33, "857": [33, 501, 543], "444": 33, "_static_stable_pow": 33, "00012": [33, 502, 543], "00016": [33, 34, 502, 530, 543, 544], "00001": [33, 502, 543], "00032": [33, 502], "00256": [33, 502], "1679638": [33, 502], "395": [33, 502], "16777383": [33, 502], "77": [33, 189, 502, 541, 546, 556, 589, 666], "_static_supports_inplace_upd": 33, "_static_to_list": 33, "static_to_list": 33, "_static_to_numpi": 33, "static_to_numpi": 33, "_static_to_scalar": 33, "static_to_scalar": 33, "_static_value_is_nan": 33, "452": 33, "static_value_is_nan": 33, "833": [33, 451], "600": [33, 36, 309, 332, 333, 463, 721], "700": [33, 463], "items": [33, 51, 543], "static_isin": 33, "static_items": 33, "complex128": [33, 112, 113, 126, 135, 141, 255, 301, 481, 539, 543, 546, 579, 580, 585, 601, 710, 722], "static_strid": 33, "425": [33, 522], "_containerwithgradi": [34, 52], "_static_stop_gradi": 34, "static_stop_gradi": 34, "87": [34, 36, 188, 217, 321, 351, 435, 524, 541, 544], "976": [34, 245, 524, 541, 544], "49e": [34, 524, 544], "74e": [34, 524, 544], "95e": [34, 524, 544], "024": [34, 524, 544], "096": [34, 524, 544], "216": [34, 37, 524, 544, 599], "384": [34, 524, 544], "626": [34, 524, 544], "en": [34, 524, 525, 544, 721], "wikipedia": [34, 524, 525, 544], "wiki": [34, 524, 525, 544], "stochastic_gradient_desc": [34, 524, 525, 544], "01099": [34, 525], "01003": [34, 525, 544], "01015": [34, 525, 544], "99936122": [34, 525, 544], "99936116": [34, 525, 544], "99936128": [34, 525, 544], "99936104": [34, 525, 544], "w_new": [34, 528, 544], "88": [34, 41, 61, 189, 321, 435, 528, 535, 541, 544, 546, 552, 556, 589, 648, 666], "708": [34, 530, 544], "445": [34, 530, 544], "6e": [34, 530, 544], "00036": [34, 530, 544], "00049": [34, 530, 544], "layerwis": [34, 531, 544], "_containerwithimag": [35, 52], "_containerwithlay": [36, 52], "_static_conv1d": 36, "static_conv1d": 36, "_static_conv1d_transpos": 36, "static_conv1d_transpos": 36, "112": [36, 546, 556, 560, 589, 666], "_static_conv2d": 36, "ey": [36, 538, 545, 561, 567, 738, 745], "static_conv2d": 36, "_static_conv2d_transpos": 36, "static_conv2d_transpos": 36, "_static_conv3d": 36, "fdfh": [36, 563], "static_conv3d": 36, "_static_conv3d_transpos": 36, "static_conv3d_transpos": 36, "_static_depthwise_conv2d": 36, "inp": [36, 545, 567], "static_depthwise_conv2d": 36, "_static_dropout": 36, "static_dropout": 36, "_static_dropout1d": 36, "static_dropout1d": 36, "_static_dropout2d": 36, "_static_dropout3d": 36, "_static_linear": 36, "278": [36, 545, 568, 569], "static_linear": 36, "352": [36, 545, 569, 726], "195": 36, "_static_lstm_upd": 36, "_static_multi_head_attent": 36, "_static_reduce_window": 36, "_static_scaled_dot_product_attent": 36, "static_scaled_dot_product_attent": 36, "39999962": [36, 545, 568, 569], "19999695": [36, 569], "11600018": [36, 569], "88399887": [36, 569], "196": [36, 545, 569], "306": [36, 545, 569], "19999981": [36, 545, 568, 572], "59249449": [36, 545, 572], "68226194": [36, 545, 572], "4000001": [36, 545, 568, 572], "19603825": [36, 545, 572], "9960382": [36, 545, 572], "26894283": [36, 545, 572], "40236187": [36, 545, 572], "39999437": [36, 545, 572], "59999037": [36, 545, 572], "35046196": [36, 545, 572], "54282808": [36, 545, 572], "39989519": [36, 545, 572], "5998764": [36, 545, 572], "_containerwithlinearalgebra": [37, 52], "_static_choleski": 37, "static_choleski": 37, "577": [37, 546, 573], "707": [37, 546, 573], "static_rol": [37, 39], "_static_cross": 37, "static_cross": 37, "_static_det": 37, "_static_diag": 37, "_static_diagon": 37, "static_diagon": 37, "_static_eigh": 37, "_static_eigvalsh": 37, "static_eigvalsh": 37, "51572949": [37, 546, 580], "17091519": [37, 546, 580], "3448143": [37, 546, 580], "88178420e": [37, 546, 580], "35898387e": [37, 546, 580], "46410179e": [37, 546, 580], "_static_inn": 37, "static_inn": 37, "_static_inv": 37, "static_inv": 37, "_static_matmul": 37, "matul": 37, "static_matmul": 37, "_static_matrix_norm": 37, "deimens": 37, "static_matrix_norm": 37, "_static_matrix_pow": 37, "_static_matrix_rank": 37, "static_matrix_rank": 37, "_static_matrix_transpos": 37, "static_matrix_transpos": 37, "_static_out": 37, "n1": [37, 94, 538], "n2": [37, 94, 538], "static_out": [37, 589], "_static_pinv": 37, "static_pinv": 37, "0426": 37, "0964": 37, "0605": 37, "1368": 37, "_static_qr": 37, "_static_slogdet": 37, "static_slogdet": 37, "6931472": 37, "0986123": 37, "_static_solv": 37, "_static_svd": 37, "static_svd": 37, "au": 37, "aS": 37, "avh": 37, "bu": [37, 705], "bvh": 37, "_static_svdv": 37, "_static_tensordot": 37, "_static_tensorsolv": 37, "_static_trac": 37, "static_trac": 37, "_static_vand": 37, "static_vand": 37, "343": [37, 237, 541, 599], "512": [37, 545, 560, 599, 702], "729": [37, 599, 744], "_static_vecdot": 37, "_static_vector_norm": 37, "static_vector_norm": 37, "77359247": [37, 601], "_static_vector_to_skew_symmetric_matrix": 37, "09861231": [37, 546, 592], "3475602": [37, 594], "93765765": [37, 594], "58776021": [37, 594], "10416126": [37, 594], "80644298": [37, 594], "87024701": [37, 594], "48127627": [37, 594], "79101127": [37, 594], "98288572": [37, 594], "68917423": [37, 594], "_containerwithloss": [38, 52], "_static_binary_cross_entropi": 38, "static_binary_cross_entropi": 38, "511": [38, 547, 603, 605], "_static_cross_entropi": 38, "static_cross_entropi": 38, "20397282": 38, "83258148": 38, "60943794": [38, 546, 592], "_static_sparse_cross_entropi": 38, "static_sparse_cross_entropi": 38, "5108256": [38, 604], "609438": [38, 604], "_containerwithmanipul": [39, 52], "_static_clip": 39, "static_clip": 39, "_static_concat": 39, "_static_constant_pad": 39, "static_constant_pad": 39, "_static_expand_dim": 39, "static_expand_dim": 39, "container_axi": [39, 548, 609], "_static_flip": 39, "static_flip": 39, "_static_permute_dim": 39, "static_permute_dim": 39, "_static_repeat": 39, "static_repeat": 39, "_static_reshap": 39, "static_reshap": 39, "_static_rol": 39, "positivclip": 39, "_static_split": 39, "static_split": 39, "_static_squeez": 39, "static_squeez": 39, "_static_stack": 39, "leavv": 39, "static_stack": 39, "_static_swapax": 39, "_static_til": 39, "static_til": 39, "_static_unstack": 39, "static_unstack": 39, "_static_zero_pad": 39, "repreat": [39, 612], "_containerwithnorm": [40, 52], "34198591": [40, 551, 644], "04274819": [40, 551, 644], "29923761": [40, 551, 644], "24053511": [40, 551, 644], "62221265": [40, 644], "20277636": [40, 644], "41943574": [40, 644], "83710337": [40, 644], "_containerwithrandom": [41, 52], "_static_multinomi": 41, "_static_randint": 41, "static_randint": 41, "_static_random_norm": 41, "static_random_norm": 41, "651": 41, "_static_random_uniform": 41, "static_random_uniform": 41, "481": 41, "0999": 41, "_static_shuffl": 41, "static_shuffl": 41, "431": [41, 647], "274": [41, 647], "_containerwithsearch": [42, 52], "_static_argmax": 42, "static_argmax": 42, "_static_argmin": 42, "static_argmin": 42, "_static_argwher": 42, "static_argwher": 42, "_static_nonzero": 42, "_static_wher": 42, "static_wher": 42, "_containerwithset": [43, 52], "_static_unique_al": 43, "static_unique_al": 43, "_static_unique_count": 43, "static_unique_count": 43, "_static_unique_invers": 43, "static_unique_invers": 43, "_static_unique_valu": 43, "_containerwithsort": [44, 52], "_static_argsort": 44, "static_argsort": 44, "_static_searchsort": 44, "_static_sort": 44, "static_sort": 44, "static_msort": 44, "_containerwithstatist": [45, 52], "_static_cumprod": 45, "static_cumprod": 45, "_static_cumsum": 45, "static_cumsum": 45, "_static_prod": 45, "static_prod": 45, "11000001": [45, 670], "23100001": [45, 670], "30800003": [45, 556, 670], "_static_sum": 45, "_static_var": 45, "static_var": 45, "12666667": [45, 556, 673], "11555555": [45, 556, 673], "rtype": [45, 666, 696], "py": [45, 310, 370, 666, 693, 696, 702, 712, 713, 714, 716, 718, 721, 722, 723, 725, 726, 727, 728, 729, 733, 734, 735, 736, 740, 742, 744, 745], "respectv": [45, 671], "81649649": [45, 671], "94280904": [45, 671], "509902": [45, 556, 671], "2472192": [45, 671], "44948983": [45, 671], "41421354": [45, 671], "contian": [45, 673], "6666667": [45, 673], "_containerwithutil": [46, 52], "_static_al": 46, "static_al": 46, "_static_ani": 46, "static_ani": 46, "add_ivy_container_instance_method": 47, "containerexampl": 47, "factorized_tensor": [48, 49, 50], "factorizedtensor": [48, 49, 50], "matrix_or_tensor": 48, "to_tensor": [48, 49, 50], "to_unfold": [48, 49, 50], "to_vec": [48, 49, 50], "cp_tensor": 49, "cptensor": [49, 267, 303], "cp_copi": 49, "cp_flip_sign": 49, "s_i": 49, "receiv": [49, 446, 482, 543, 549, 622, 623, 624, 684, 714, 722, 723, 735, 738], "summar": [49, 735], "normalisation_weight": 49, "normalised_factor": 49, "cp_lstsq_grad": 49, "return_loss": 49, "third": [49, 312, 387, 411, 546, 554, 594, 656, 719, 732, 748, 754, 755, 761], "nabla": 49, "mathcal": 49, "mathbf": 49, "factor_matric": 49, "cp_gradient": 49, "quantiti": 49, "cp_mode_dot": 49, "keep_dim": [49, 50], "cp_multi_mode_dot": 49, "cp_n_param": 49, "tensor_shap": [49, 50], "n_param": [49, 50], "cp_norm": 49, "cp_to_tensor": 49, "fact": [49, 714, 716, 721, 733, 735, 740, 743], "khatria": 49, "rao": [49, 310, 361], "khatri": [49, 310, 361], "cp_normal": 49, "normalis": 49, "u_1": 49, "u_n": 49, "v_1": 49, "v_n": 49, "v_k": 49, "u_k": 49, "absorb": 49, "refold": [49, 312, 393, 404], "cp_to_unfold": 49, "ie": 49, "s_u_i": 49, "exploit": [49, 758], "khatri_rao": [49, 310], "cp_to_vec": 49, "ravel": [49, 738], "unfolding_dot_khatri_rao": 49, "mttkrp": 49, "validate_cp_rank": 49, "percent": 49, "validate_cp_tensor": 49, "tucker_tensor": 50, "tucker_copi": 50, "tucker_mode_dot": [50, 762], "tucker_n_param": 50, "tucker_norm": 50, "tucker_to_tensor": 50, "skip_factor": 50, "transpose_factor": 50, "tucker_to_unfold": 50, "tucker_to_vec": 50, "validate_tucker_rank": 50, "fixed_mod": 50, "validate_tucker_tensor": 50, "_bisection_root_find": 50, "fun": [50, 523, 543, 550, 636, 721], "max_it": 50, "__abs__": [51, 52], "__add__": [51, 52, 717, 720, 724, 725, 728, 733, 734, 742], "__eq__": [51, 52], "__ge__": [51, 52], "__gt__": [51, 52, 738], "__le__": [51, 52], "__lt__": [51, 52], "__ne__": [51, 52], "__pow__": [51, 52, 742], "69678056": 51, "59876156": 51, "82660675": 51, "__radd__": [51, 52, 724, 725, 733], "__rrshift__": [51, 52], "__rshift__": [51, 52], "__rsub__": [51, 52], "__sub__": [51, 52, 717, 720, 724, 728, 742], "__truediv__": [51, 52, 717, 720, 724], "__xor__": [51, 52], "referenc": [51, 726, 732], "hardwar": [51, 55, 705, 713, 738, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761], "resid": [51, 55, 548, 609, 733, 740, 744], "mt": [51, 742], "hopefulli": [51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 704, 705, 706, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747], "overview": [51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 719, 721, 735, 739, 747], "submodul": [51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 682, 683, 684, 686, 687, 688, 689, 712, 713, 714, 716, 719, 721, 723, 729, 730, 735, 739, 740, 744, 750], "question": [51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 680, 681, 683, 684, 686, 687, 688, 689, 702, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747, 748], "reach": [51, 52, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 637, 680, 681, 683, 684, 686, 687, 688, 689, 704, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747, 754, 755], "eq": 52, "ge": 52, "gt": [52, 734, 740], "le": 52, "lt": 52, "ne": 52, "75979435": 52, "52153397": 52, "13532257": 52, "rshift": 52, "truediv": 52, "66666669": [52, 315, 419, 526, 544], "nested_arrai": [54, 55, 56, 719], "nestedarrai": 54, "nested_rank": [54, 55, 56], "inner_shap": [54, 55, 56], "nestedarraybas": [54, 55, 56], "classmethod": [54, 55], "from_row_length": 54, "row_length": 54, "from_row_split": 54, "row_split": 54, "ragged_map": 55, "ragged_multi_map": 55, "ragged_arrai": 55, "ragged_multi_map_in_funct": 55, "replace_ivy_arrai": 55, "unbind": 55, "nestedarrayelementwis": 56, "strictli": [61, 64, 67, 201, 535, 541, 728, 732], "behaviour": [61, 64, 228, 535, 541, 711, 714, 715, 716, 717, 720, 722, 723, 725, 726, 728, 729, 730, 732, 733, 735, 736, 742], "24000001": [61, 535], "703": [62, 535], "683": [62, 535], "408": [62, 535], "313": [62, 535], "437": [62, 535], "40337825": [63, 535], "56114835": [63, 535], "20788449": [63, 535], "0768": [66, 535], "231": [66, 535], "\u03b2": [67, 535], "66666667": [68, 321, 434, 535], "body_fn": [72, 73, 75, 537], "bodi": [72, 75, 537, 716, 735], "lst": [72, 537], "orelse_fn": [73, 537], "lambda": [73, 75, 454, 526, 527, 529, 534, 537, 543, 544, 546, 550, 579, 632, 633, 637, 702, 712, 729, 730, 731, 734, 738, 740, 743], "body1": [74, 537], "body2": [74, 537], "repeatedli": [75, 537, 550, 634, 721, 735], "continu": [75, 241, 537, 541, 702, 705, 706, 711, 712, 713, 715, 716, 732, 735, 748, 755], "chosen": [76, 182, 538, 541, 553, 655, 712, 721, 733], "ml_framework": [76, 538], "distanc": [76, 538], "adjac": [76, 538], "nestedsequ": [77, 78, 538], "typevar": [77, 78, 538], "supportsbufferprotocol": [77, 78, 538], "static_copy_arrai": [84, 538], "intdtyp": [87, 98, 103, 115, 126, 131, 138, 144, 255, 301, 538, 539], "interchang": [88, 538, 548, 618], "plu": [89, 538], "x00b": [89, 538], "x00d": [89, 538], "x00e": [89, 538], "66666663": [92, 538], "41588834": [93, 538], "7827941": [93, 538], "6227766": [93, 538], "23413252": [93, 538], "n3": [94, 538], "similarli": [94, 101, 177, 269, 303, 538, 541, 718, 722, 733, 738, 742, 761], "xv": [94, 538], "yv": [94, 538], "x_nativ": [95, 538, 732], "y_nativ": [95, 538], "z_nativ": [95, 538], "d_type": [97, 538], "col": [101, 269, 303, 538], "primari": [101, 120, 121, 153, 154, 269, 303, 319, 427, 460, 461, 538, 539, 540, 543, 712, 715, 718, 722, 730, 732, 733, 735, 738, 748, 750], "purpos": [101, 199, 217, 269, 303, 538, 541, 546, 592, 714, 715, 717, 720, 721, 723, 724, 726, 728, 729, 730, 733, 735, 738, 739, 742, 750, 754, 756, 759, 760, 761], "upward": [101, 269, 303, 538], "downward": [101, 269, 303, 538], "2xn": [101, 269, 303, 538], "subarrai": [101, 269, 303, 538], "incompat": [108, 539], "uint8": [109, 116, 120, 131, 134, 139, 145, 255, 301, 539, 722, 735], "closest": [111, 190, 200, 201, 237, 247, 312, 405, 539, 541, 735, 738], "xtype": [111, 539], "ytype": [111, 539], "native_uint16": [111, 539], "complexdtyp": [112, 126, 135, 539], "set_default_complex_dtyp": [112, 141, 539], "4294": [112, 114, 539], "967346": [112, 114, 539], "set_default_dtyp": [113, 142, 539, 722, 729], "floatdtyp": [114, 137, 539], "set_default_float_dtyp": [114, 123, 135, 143, 539, 722], "int_dtyp": [115, 138, 539], "set_default_int_dtyp": [115, 123, 144, 539, 722], "4294967346": [115, 116, 539], "uint_dtyp": [116, 139, 539], "uint": [116, 131, 139, 145, 539, 722, 734], "uintdtyp": [116, 131, 139, 145, 539], "set_default_uint_dtyp": [116, 123, 145, 539], "native_bool": [118, 539], "followng": [119, 539], "ieee": [119, 177, 194, 199, 217, 227, 236, 241, 244, 536, 539, 541, 705], "754": [119, 177, 194, 199, 217, 227, 236, 241, 244, 536, 539, 541, 705], "smallest_norm": [119, 539], "bfloat16": [120, 539, 722, 733, 735, 736], "unsupport": [121, 154, 461, 539, 540, 543, 713, 733], "encapsul": [122, 539, 721], "314": [122, 234, 276, 306, 539, 541], "9223372036854775808": [122, 539], "9223372036854775807": [122, 539], "65535": [122, 539], "4294967295": [122, 539], "un": [124, 539, 722, 740], "native_uint8": [124, 539], "hashabl": [128, 539], "type1": [132, 539], "type2": [132, 539], "array_api_promot": [132, 133, 539], "unexpect": [133, 201, 539, 541, 722], "default_complex_dtyp": [135, 539], "default_dtype_stack": [136, 142, 539], "unset_default_dtyp": [136, 539], "native_uint64": [136, 539], "default_float_dtyp": [137, 539, 722], "default_int_dtyp": [138, 144, 539, 722], "default_uint_dtyp": [139, 145, 539], "ret1": [140, 539], "ret2": [140, 539], "reset": [141, 142, 143, 144, 145, 171, 172, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 539, 540, 543, 723], "default_complex_dtype_stack": [141, 539], "default_float_dtype_stack": [143, 539], "native_float16": [146, 539], "unmodifi": [148, 540, 718, 722], "tpu": [148, 154, 165, 170, 540, 723, 755, 758], "clear": [149, 540, 702, 704, 705, 706, 712, 714, 718, 722, 723, 724, 733, 738, 740, 742, 755], "cach": [149, 449, 540, 543, 693, 727, 729, 732, 735], "gpu": [150, 152, 153, 156, 159, 161, 163, 165, 166, 169, 171, 173, 540, 702, 713, 714, 721, 723, 742, 749, 753, 755, 758, 759, 760], "aliv": [155, 160, 162, 464, 484, 485, 540, 543, 723], "139740789224448": [155, 540], "physic": [158, 540], "default_devic": [160, 163, 164, 165, 171, 172, 540, 723, 726], "process_specif": [161, 173, 540], "percentag": [161, 540], "ram": [161, 169, 173, 540], "alon": [161, 173, 540, 702, 708, 727, 735], "036902561555": [161, 540], "7024003467681645": [161, 540], "as_native_dev": [161, 540], "7095597456708771": [161, 540], "attr_onli": [162, 540], "soft_device_mod": [164, 172, 540], "chunk": [165, 166, 167, 540], "codebas": [165, 166, 540, 706, 707, 715, 722, 727, 732, 733, 735, 736, 739], "split_factor": [165, 540, 726], "max_chunk_s": [167, 540], "chunk_siz": [167, 540], "input_ax": [167, 540], "output_ax": [167, 540], "usag": [167, 540, 705, 722, 729, 732, 735, 740, 748, 758], "fed": [167, 540, 744], "fist": [167, 540], "gb": [169, 173, 540, 713], "66700032": [169, 540], "589934592": [169, 540], "set_default_devic": [171, 540, 723], "set_soft_device_mod": [172, 540, 723], "219563008": [173, 540], "902400346": [173, 540], "525205504": [173, 540], "na": [174, 541, 735], "princip": [175, 179, 181, 295, 306, 541], "domain": [175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 215, 216, 218, 239, 240, 241, 244, 245, 295, 306, 541, 725, 753, 755], "codomain": [175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 215, 216, 218, 239, 240, 241, 244, 245, 295, 306, 541, 725], "\u03c0": [175, 179, 181, 182, 536, 541], "3\u03c0": [175, 182, 541], "unspecifi": [175, 176, 180, 183, 192, 197, 199, 201, 232, 236, 240, 241, 245, 310, 357, 541, 546, 548, 578, 579, 617, 732], "\u03c0j": [176, 180, 183, 215, 217, 541], "3\u03c0j": [176, 215, 217, 541], "x1_i": [177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 541, 716], "neither": [177, 194, 201, 227, 541, 546, 596, 721, 733, 738], "nor": [177, 194, 201, 227, 541, 721, 733, 759], "2019": [177, 194, 199, 217, 227, 541, 755, 758], "too": [177, 194, 201, 227, 541, 683, 712, 713, 714, 716, 722, 726, 736, 748], "overflow": [177, 194, 201, 541, 546, 556, 592, 672, 711, 722], "commut": [177, 541], "tabl": [177, 194, 227, 495, 517, 541, 543, 684, 722, 733, 737, 755], "dj": [177, 194, 227, 541], "bj": [177, 194, 227, 276, 306, 541], "invlov": [177, 541], "z1": [177, 541], "z2": [177, 541], "yj": [178, 541], "nanj": [180, 541], "809": [180, 541], "199": [180, 541], "569": [180, 541], "733": [180, 541], "notat": [182, 541, 556, 666, 721], "denot": [182, 541, 686], "quadrant": [182, 541], "rai": [182, 541, 705], "bitwis": [184, 187, 189, 224, 541], "170": [188, 541], "243": [188, 541], "225": [188, 541], "xor": [189, 224, 541], "654": [191, 541], "ci": [192, 197, 199, 240, 541, 716, 722, 727, 734, 735, 748], "368": [192, 541], "670": [192, 541], "202": [192, 541, 716], "548": [192, 541], "1490": [192, 541], "57079633": [193, 541], "14159265": [193, 541], "71238898": [193, 541], "28318531": [193, 541], "02617994": [193, 541], "87266463": [193, 541], "01919862": [193, 541], "03839725": [193, 541], "05759586": [193, 541], "07679449": [193, 541], "09599311": [193, 541], "11519173": [193, 541], "35081118": [193, 541], "88139129": [193, 541], "underflow": [194, 201, 541, 546, 592, 722], "textbook": [194, 227, 541], "frac": [194, 216, 218, 238, 240, 244, 309, 315, 336, 337, 341, 342, 414, 416, 541], "ac": [194, 227, 541, 696], "bd": [194, 227, 541], "bc": [194, 227, 541, 696], "versu": [194, 227, 232, 541], "riemann": [194, 227, 541], "sphere": [194, 227, 541], "c99": [194, 227, 541], "infinit": [194, 227, 241, 541], "usual": [194, 227, 541, 696, 713, 716, 722, 733, 735, 738], "interest": [194, 227, 541, 712, 714], "unlik": [194, 227, 541, 705, 716, 721, 724, 760, 762], "698": [194, 541], "cut": [197, 199, 239, 240, 241, 244, 541, 704, 761], "08553692": [197, 541], "567": [197, 541], "00344786": [197, 541], "76297021": [197, 541], "197948": [197, 541], "53253174": [197, 541], "accur": [199, 217, 541, 546, 592, 730], "fdlibm": [199, 217, 541], "compliant": [199, 217, 222, 223, 541, 556, 667, 668, 669, 671], "potenti": [199, 217, 541, 702, 712, 713, 721, 722, 733, 739, 758], "632": [199, 541], "20e": [199, 541], "72e": [199, 541], "greatest": [200, 201, 204, 541], "introduc": [201, 541, 548, 554, 614, 656, 704, 720, 721, 722, 730, 734, 735, 738, 743], "via": [201, 310, 369, 372, 541, 550, 635, 636, 714, 716, 720, 722, 723, 732, 736, 738, 740, 742, 743, 747, 755], "pep": [201, 541, 728], "238": [201, 541], "goal": [201, 541, 702, 705, 712, 755, 761], "disambigu": [201, 541, 731], "former": [201, 541, 722, 725, 733], "latter": [201, 541, 716, 718, 722, 725, 733], "overload": [201, 541, 735], "led": [201, 541, 716, 757], "subtl": [201, 541, 722, 761], "ambigu": [201, 541], "semant": [201, 236, 541, 704, 740, 745, 756], "ill": [201, 541], "diverg": [201, 541], "prefer": [201, 541, 702, 713, 720, 726, 730, 733, 749, 755], "surpris": [201, 541, 748], "arrau": [207, 541], "log_": [216, 218, 541], "742": [217, 541], "hanl": [218, 541], "NOT": [222, 541, 696, 712], "particular": [222, 541, 713, 714, 716, 718, 721, 722, 724, 730, 732, 733, 735, 736, 751, 755, 761], "negat": [229, 276, 306, 541], "omplex": [230, 541], "carefulli": [232, 541, 683, 733, 753, 758], "52095687": [232, 541], "92457771": [232, 541], "49372482": [232, 541], "22738838": [232, 541], "156": [232, 541], "5877228": [232, 541], "189": [233, 541], "252": [233, 541], "315": [233, 541], "378": [233, 541], "1150": [233, 541], "2890": [233, 541], "172": [233, 541], "229": [233, 541], "487": [233, 541, 545, 569], "344": [233, 541], "355j": [234, 276, 306, 541], "55j": [234, 276, 306, 541], "That": [236, 311, 375, 541, 696, 713, 714, 717, 735, 742, 743, 744, 756], "primarili": [236, 541, 712, 720, 755], "reason": [236, 245, 541, 705, 712, 714, 716, 717, 720, 721, 722, 724, 729, 732, 733, 735, 736, 738, 740, 742, 761], "counterpart": [237, 541, 720, 730], "deliber": [237, 541, 738], "imprecis": [237, 541], "5654": [237, 541], "034": [237, 541], "433": [237, 527, 529, 541, 544], "known": [238, 541, 683, 716, 721, 722, 733, 735], "signum": [238, 541], "x_": [238, 541], "operatornam": [238, 240, 541, 546, 579], "textrm": [238, 541], "932": [239, 541], "746": [239, 541], "443": [239, 541], "657": [239, 451, 541, 543], "indistinguish": [241, 541], "convent": [241, 541, 546, 556, 584, 666, 704, 714, 718, 728, 736, 747, 761], "infti": [241, 541], "32455532": [241, 541], "89897949": [241, 541], "169": [241, 541], "analyt": [244, 541, 755, 757, 761], "math": [244, 541, 732, 733, 734, 745, 753], "pole": [244, 541], "546": [244, 541, 545, 569], "916": [244, 541, 547, 603], "996": [244, 541], "histor": [245, 541], "stem": [245, 541, 732], "older": [245, 541], "patch": [245, 541, 722, 755], "advis": [245, 541, 733], "462": [245, 541], "604": [245, 541], "984": [245, 541], "997": [245, 541], "0375": [247, 541], "032": [247, 541], "57258511": [249, 301], "69999999": [249, 301, 534, 544], "90928203": [249, 301], "98772264": [249, 301], "99591321": [249, 301], "99863964": [249, 301], "69880581": [249, 301], "18126924": [249, 301], "20141329": [251, 301], "40318608": [251, 301], "48683619": [251, 301], "46328247": [251, 301], "59813893": [251, 301], "43748799": [251, 301], "parametr": [252, 301, 716, 735, 755], "6705687": [254, 301], "52016652": [254, 301], "40560818": [254, 301], "45630932": [254, 301], "doubl": [255, 301], "2689": [256, 301], "7310": [256, 301], "7615": [256, 301], "2784": [256, 301], "7168": [256, 301], "8708": [256, 301], "4374": [256, 301], "1379": [256, 301], "0089": [256, 301], "taper": [258, 261, 303], "term": [258, 303, 311, 375, 545, 570, 684, 702, 704, 714, 720, 740, 750, 755], "summat": [258, 303, 556, 666, 696], "leakag": [258, 303], "slightli": [258, 303, 708, 720, 733, 735, 740, 744], "wors": [258, 303, 705], "y1": [259, 303], "0800": [260, 303], "3979": [260, 303], "9121": [260, 303], "5400": [260, 303], "han": [261, 303], "dens": [262, 303, 684, 702], "ith": [262, 303], "00726415": [263, 303], "9999736": [263, 303], "2773e": [264, 303], "0172e": [264, 303], "9294e": [264, 303], "4149": [264, 303], "9138": [264, 303], "5529": [264, 303], "multidimension": [265, 266, 303, 755], "orthogon": [267, 268, 303, 310, 357, 369, 372, 546, 578, 579], "normalise_factor": [267, 303], "cp": [267, 303, 714], "complementari": [273, 303, 753, 761], "38268346": [273, 303], "38268352": [273, 303], "8563191": [273, 303], "14943568": [273, 303], "much": [274, 287, 306, 683, 705, 712, 713, 714, 717, 720, 722, 729, 732, 733, 734, 736, 737, 738, 740, 742, 743, 753, 755, 761, 762], "arrrai": [276, 306], "position": [282, 306], "inexact": [282, 306], "triangl": [286, 306], "999999e": [287, 306], "65999985": [289, 306], "52000046": [289, 306], "1500001": [289, 306, 456, 543], "11259177": [290, 306], "3574118": [290, 306], "20097363": [290, 306], "Not": [292, 306, 310, 359, 536, 718, 726, 734, 743, 744, 748], "suppli": [294, 306, 312, 400, 696, 717, 719, 735], "217234": [295, 306], "hurwitz": [298, 306], "custom_grad_func": [300, 308], "bind": [300, 308, 712, 731, 754, 755], "upstream": [300, 308, 713, 714, 716, 731], "sequence_length": 301, "ndenumer": 303, "ndindex": 303, "random_cp": 303, "random_tuck": 303, "bind_custom_gradient_funct": [308, 731], "area_interpol": 309, "division_overrid": [309, 327], "avg": [309, 327, 329, 350], "dimensio": [309, 328], "tranform": [309, 330, 340], "01823380e": [309, 330, 340], "15385818e": [309, 330, 340], "36371466e": [309, 330, 340], "38763905e": [309, 330, 340], "60722279e": [309, 330, 340], "80319249e": [309, 330, 340], "05617893e": [309, 330, 340], "21500000e": [309, 330, 340], "24000015e": [309, 330, 340], "90734863e": [309, 330, 340], "10000420e": [309, 330, 340], "15899994e": [309, 330, 340], "24000053e": [309, 330, 340], "81469727e": [309, 330, 340], "09999847e": [309, 330, 340], "4135742": [309, 330, 340], "6779785": [309, 330, 340], "3770599": [309, 330, 340], "114": [309, 330, 340], "8719864": [309, 330, 340], "72109985": [309, 330, 340], "52869415": [309, 330, 340], "79182434": [309, 330, 340], "72489166": [309, 330, 340], "container_n": [309, 330, 340], "container_typ": [309, 330, 340, 543], "container_norm": [309, 330, 340], "1580677": [309, 330], "89422607": [309, 330], "86190414": [309, 330], "00041008": [309, 330], "75149155": [309, 330], "97056389": [309, 330], "87819386": [309, 330], "89381361": [309, 330], "50000000e": [309, 330, 340], "22044605e": [309, 330, 340], "randomli": [309, 332, 333, 334, 545, 568, 684], "ed": [309, 332, 333, 334], "rest": [309, 312, 332, 333, 334, 386, 713, 719, 721, 735, 745, 757], "4d": [309, 333, 334], "5d": [309, 334, 684], "emb": [309, 335], "51285338": [309, 335], "87183261": [309, 335], "2308116": [309, 335], "02733949e": [309, 336], "00j": [309, 336], "49660576e": [309, 336], "68178638e": [309, 336], "01j": [309, 336, 341], "98912367e": [309, 336], "21802426e": [309, 336, 341], "04549134e": [309, 336, 341], "82842712e": [309, 336, 341], "86902654e": [309, 336, 341], "25501143e": [309, 336, 341], "32978028e": [309, 336, 341], "52068201e": [309, 336, 341], "71158374e": [309, 336, 341], "generate_einsum_equ": 309, "get_interpolate_kernel": 309, "27279224e": [309, 340], "44232273e": [309, 340], "70464332e": [309, 340], "73454881e": [309, 340], "00902849e": [309, 340], "10039906e": [309, 340], "07022366e": [309, 340], "69506073": [309, 340], "93914604": [309, 340], "88008881": [309, 340], "18951607": [309, 340], "57439613": [309, 340], "15318303e": [309, 341], "15148591e": [309, 341], "19j": [309, 341], "25000000e": [309, 341], "35378602e": [309, 341], "02j": [309, 341], "65404249e": [309, 341], "17611649e": [309, 341], "24320230e": [309, 341], "79344813e": [309, 341], "22374531e": [309, 341], "45929364e": [309, 341], "14208718e": [309, 341], "07177031e": [309, 341], "what": [309, 342, 352, 702, 705, 706, 708, 714, 715, 720, 721, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 739, 740, 742, 743, 744, 745, 747, 748, 751, 756, 757, 760], "indexerror": [309, 342, 352, 548, 609, 697, 726], "interp": [309, 738], "xp": [309, 343, 716], "fp": [309, 343], "nd": [309, 344], "bicubic_tensorflow": [309, 344, 738], "max_unpool1d": 309, "unpool": [309, 348], "pool_result": [309, 348], "unpool_result": [309, 348], "nearest_interpol": 309, "input_shap": [309, 349, 702], "window_shap": [309, 350], "pool_typ": [309, 350], "99038106j": [309, 352], "33012702": [309, 352], "23205081j": [309, 352], "33012702j": [309, 352], "superdiagon": [310, 355, 546, 576], "subdiagon": [310, 355, 546, 576], "eigendecomposit": [310, 357, 546, 578, 579], "qlq\u1d40": [310, 357, 546, 578, 579], "behav": [310, 357, 546, 578, 716, 726, 730, 732, 733, 734, 742, 756], "tridiagon": [310, 358], "38196602": [310, 358], "61803389": [310, 358], "35048741": [310, 358], "56710052": [310, 358], "06693714": [310, 358], "74234426": [310, 358], "56155282": [310, 358], "56155276": [310, 358], "82842714": [310, 358], "82842731": [310, 358], "necessarili": [310, 359, 717, 720], "random_st": [310, 360], "skip_matrix": [310, 361, 363], "seen": [310, 316, 361, 422, 693, 704, 705, 721, 722, 724, 726, 733, 735, 740, 742, 743, 761], "khatri_rao_product": [310, 361], "kronecker_product": [310, 363], "n_column": [310, 363], "nnmf": [310, 364], "hoi": [310, 369, 372], "determinist": [310, 370], "borrow": [310, 370, 715], "scikit": [310, 370, 705], "extmath": [310, 370], "mae": [311, 374], "log_poisson_loss": 311, "compute_full_loss": [311, 375, 685], "likelihood": [311, 375], "assumpt": [311, 375], "minu": [311, 375], "plai": [311, 375, 702, 713, 717, 723, 733, 735, 745, 755, 758], "factori": [311, 375], "stirl": [311, 375], "favor": [311, 375], "28402555": [311, 375], "03402555": [311, 375], "1573164": [311, 375], "3467": [311, 376], "0133": [311, 376], "0250": [311, 376], "0056": [311, 376], "0025": [311, 376], "0675": [311, 376], "hing": [311, 377], "6987": [311, 377], "1606": [311, 377], "3711": [311, 377], "4032": [311, 377], "6931": [311, 377], "whilst": [312, 380, 381, 382, 745, 750, 755], "ary3": [312, 382], "goe": [312, 384, 715, 718, 727, 732, 738], "mod": [312, 384, 716], "tall": [312, 389], "horizot": [312, 396], "shortcut": [312, 400, 713], "linear_ramp": [312, 400], "reflect": [312, 400, 708, 714, 717, 732, 735], "ramp": [312, 400], "mirror": [312, 400, 712, 755], "signatur": [312, 321, 400, 434, 705, 722, 723, 724, 725, 728, 732, 735, 736, 738, 752, 761], "padding_func": [312, 400], "iaxis_pad_width": [312, 400], "iaxi": [312, 400], "style": [312, 400, 553, 654, 714, 727, 755], "unalt": [312, 400], "put_along_axi": 312, "put": [312, 405, 702, 712, 735, 748, 761], "basic": [312, 407, 707, 712, 724, 735], "shrinkag": [312, 407], "elimin": [312, 411, 713], "consecut": [312, 411], "batch_mean": [315, 414, 416], "batch_var": [315, 414, 416], "running_vari": [315, 414, 416], "42857143": [315, 419], "5714286": [315, 419], "distrubut": [316, 420], "paramter": [316, 420], "multivari": [316, 422], "bayesian": [316, 422], "supposedli": [319, 426], "indirect": [319, 427], "secondari": [319, 427], "is_ivy_sparse_arrai": 320, "is_native_sparse_arrai": 320, "native_sparse_arrai": 320, "coo_indic": [320, 430], "crow_indic": [320, 430], "col_indic": [320, 430], "ccol_indic": [320, 430], "row_indic": [320, 430], "dense_shap": [320, 430], "native_sparse_array_to_indices_values_and_shap": 320, "nativesparsearrai": 320, "sparsearrai": 320, "linalg": [321, 434, 546, 592, 712, 732, 734], "aw": [321, 434, 705], "48447205": [321, 434], "c0": [321, 437], "ck": [321, 437], "i1": [321, 437], "c2": [321, 437], "nearest_jax": [321, 442], "idx": [445, 543, 702, 723, 742], "inspect": [445, 543], "retriev": [445, 543, 714, 733], "compile_on_next_step": [446, 543, 685, 686, 688, 744], "decor": [449, 543, 710, 716, 717, 720, 722, 723, 729, 732, 733, 734, 738], "recalcul": [449, 543], "my_sum": [449, 543], "val1": [449, 543], "val2": [449, 543], "cached_sum": [449, 543], "line_eq": [449, 543], "slp": [449, 543], "itc": [449, 543], "cached_line_eq": [449, 543], "0353": [450, 543], "424": [450, 543], "58": [450, 543], "176": [450, 543], "339": [450, 543], "271": [450, 543], "168": [450, 543], "391": [450, 543], "417": [451, 543], "583": [451, 543], "0667": [451, 543], "267": [451, 543], "131": [451, 543], "263": [451, 543], "394": [451, 543, 552, 650], "526": [451, 543], "788": [451, 543], "public": [452, 543, 721, 731, 742, 758], "default_str": [454, 543], "46999979": [455, 543], "66000009": [455, 543], "93000001": [455, 543], "29000092": [455, 543], "33999991": [455, 543], "6400001": [455, 543], "96000004": [455, 543], "36000013": [455, 543], "51999998": [455, 543], "67000008": [455, 543], "30000001": [455, 543, 554, 657], "suppos": [455, 543, 722, 735], "960": [455, 543], "1280": [455, 543, 702], "3600": [455, 543], "bottom": [455, 543, 712, 713, 721, 761], "h1": [455, 543], "w1": [455, 543], "40499985": [456, 543], "61000061": [456, 543], "incas": [460, 461, 543], "max_depth": [467, 543, 550, 637], "seen_set": [467, 543], "local_set": [467, 543], "thrown": [472, 543, 717, 723, 726, 727, 748], "ivyexcept": [472, 504, 543, 697, 723, 726, 730, 732, 733, 736], "allow_dupl": [482, 543], "best": [482, 543, 702, 707, 711, 712, 713, 714, 715, 721, 722, 726, 735, 736, 749, 758, 759], "o": [482, 543, 702, 713, 715, 721, 740, 749], "context": [483, 543, 713, 714, 718, 722, 723, 724], "fork": [483, 543, 707, 716, 721], "forkserv": [483, 543], "spawn": [483, 543], "consol": [485, 543, 714, 727, 735, 742], "garbag": [485, 543], "collector": [485, 543], "get_all_arrays_in_memori": [485, 543], "array_mod": [488, 511, 543, 737], "exept": [489, 543], "exception_trace_mod": [489, 512, 543, 737], "lenient": [490, 513, 543], "manag": [490, 513, 543, 702, 706, 707, 718, 722, 723, 732, 748, 757, 759], "inplace_mod": [490, 513, 543], "break": [490, 543, 702, 718, 722, 728, 736, 748], "strict": [490, 513, 543], "infus": [491, 543], "nestable_mod": [494, 516, 543, 737], "effeci": [495, 517, 543, 737], "wider": [495, 517, 543, 737, 761], "promtion": [495, 543], "precise_mod": [495, 517, 543, 737], "shape_array_mod": [497, 519, 543, 737], "show_func_wrapper_trace_mod": [498, 520, 543, 737], "tmp_dr": [499, 543], "temporari": [499, 521, 543, 712, 722, 737], "tmp_dir": [499, 521, 543, 737], "tmp": [499, 521, 543], "my_tmp": [499, 543], "49999999999975": [501, 543], "5015015015010504": [501, 543], "000444502911705e": [501, 543], "9999999999995j": [501, 543], "00000262": [502, 543], "15605032": [502, 543], "01208451j": [502, 543], "00048": [502, 543], "1296": [502, 543], "00864": [502, 543], "2048": [502, 543], "isn": [504, 543, 714, 730, 732, 743, 748, 757], "possibli": [506, 543, 735, 748], "100000023841858": [506, 543], "200000047683716": [506, 543], "299999952316284": [506, 543], "400000095367432": [506, 543], "599999904632568": [506, 543], "dictionai": [510, 543], "__name__": [510, 543, 702, 726], "hemant": [510, 543], "set_array_mod": [511, 543, 737], "unset_shape_array_mod": [511, 543], "previous": [512, 543, 693, 713, 718, 729, 731, 735, 740], "set_exception_trace_mod": [512, 543, 726], "set_inplace_mod": [513, 543], "set_min_bas": [514, 543], "set_min_denomin": [515, 543], "set_nestable_mod": [516, 543], "set_precise_mod": [517, 543], "set_queue_timeout": [518, 543], "set_shape_array_mod": [519, 543], "set_show_func_wrapper_trace_mod": [520, 543, 726], "set_tmp_dir": [521, 543], "my_dir": [521, 543], "451": [522, 543], "in_ax": [523, 543], "out_ax": [523, 543], "thereof": [523, 543], "summaris": [523, 543], "grad": [524, 544, 688, 702, 731, 743, 744, 745], "99999998": [524, 544], "09999998": [524, 544], "19999998": [524, 544], "00000001": [524, 544], "00300001": [524, 544], "00800001": [524, 544], "0125": [524, 544], "17294501": [524, 544], "15770318": [524, 544], "20863818": [524, 544], "90000075": [525, 544], "90000164": [525, 544], "9000032": [525, 544], "50000012e": [525, 544], "92558754": [525, 544], "92558694": [525, 544], "92558682": [525, 544], "92558861": [525, 544], "60000025e": [525, 544], "01024": [525, 544], "retain_grad": [526, 544], "xs_grad_idx": [526, 544, 731], "ret_grad_idx": [526, 544, 731], "func_ret": [526, 544, 731], "666666": [526, 544], "333332": [526, 544], "66666675": [526, 534, 544], "argnum": [527, 544], "grad_fn": [527, 534, 544, 743], "933": [527, 529, 544], "jacobian": [529, 544, 748, 755], "jac_fn": [529, 544], "639": [530, 544], "361": [530, 544], "value_grad": [534, 544], "42333412": [534, 544], "5333333": [534, 544], "93333334": [534, 544], "43333334": [534, 544], "0666666": [534, 544], "softsign": 535, "718281828459045": 536, "euler": [536, 747], "141592653589793": 536, "newaxi": 536, "cast_bool": 537, "cmp_i": 537, "cmp_isnot": 537, "for_loop": 537, "if_els": 537, "try_except": 537, "while_loop": 537, "asarray_handle_nest": 538, "asarray_infer_devic": 538, "asarray_infer_dtyp": 538, "asarray_inputs_to_native_shap": 538, "asarray_to_native_arrays_and_back": 538, "as_ivy_dtyp": [539, 733], "as_native_dtyp": 539, "check_float": 539, "closest_valid_dtyp": 539, "default_dtyp": [539, 722, 729], "dtype_bit": 539, "function_supported_dtyp": [539, 722, 735], "function_unsupported_dtyp": [539, 722], "infer_default_dtyp": 539, "invalid_dtyp": [539, 722], "is_hashable_dtyp": 539, "is_native_dtyp": 539, "promote_typ": [539, 722], "promote_types_of_input": [539, 722, 732], "type_promote_arrai": [539, 722], "unset_default_complex_dtyp": 539, "unset_default_float_dtyp": 539, "unset_default_int_dtyp": 539, "unset_default_uint_dtyp": 539, "valid_dtyp": 539, "defaultcomplexdtyp": 539, "defaultdtyp": 539, "defaultfloatdtyp": 539, "defaultintdtyp": 539, "defaultuintdtyp": 539, "as_ivy_dev": [540, 742], "clear_cached_mem_on_dev": 540, "dev_util": [540, 723], "function_supported_devic": 540, "function_unsupported_devic": 540, "get_all_ivy_arrays_on_dev": [540, 723], "gpu_is_avail": [540, 702], "handle_soft_device_vari": [540, 723], "num_cpu_cor": [540, 723], "num_gpu": [540, 723, 735], "num_ivy_arrays_on_dev": 540, "percent_used_mem_on_dev": 540, "print_all_ivy_arrays_on_dev": 540, "set_split_factor": [540, 726], "split_func_cal": 540, "total_mem_on_dev": [540, 723], "tpu_is_avail": 540, "unset_default_devic": [540, 723], "unset_soft_device_mod": [540, 723], "used_mem_on_dev": 540, "defaultdevic": [540, 723], "profil": 540, "save_dir": 540, "arg_info": 543, "arg_nam": 543, "cache_fn": [543, 729], "current_backend_str": [543, 735, 740, 742], "function_supported_devices_and_dtyp": 543, "function_unsupported_devices_and_dtyp": 543, "get_item": [543, 732], "get_referrers_recurs": 543, "inplace_arrays_support": 543, "inplace_variables_support": 543, "is_ivy_nested_arrai": 543, "isscalar": 543, "match_kwarg": 543, "num_arrays_in_memori": 543, "print_all_arrays_in_memori": 543, "set_item": 543, "to_ivy_shap": 543, "to_native_shap": 543, "try_else_non": 543, "unset_array_mod": [543, 737], "unset_exception_trace_mod": 543, "unset_inplace_mod": 543, "unset_min_bas": 543, "unset_min_denomin": 543, "unset_nestable_mod": 543, "unset_precise_mod": 543, "unset_queue_timeout": 543, "unset_show_func_wrapper_trace_mod": 543, "unset_tmp_dir": 543, "vmap": [543, 748, 755], "arraymod": 543, "precisemod": 543, "execute_with_gradi": [544, 702, 743, 744, 745, 748], "jac": 544, "value_and_grad": [544, 731], "conv": [545, 684, 738], "feature_group_count": [545, 558, 565, 566], "oiw": [545, 558, 559, 565], "oihw": [545, 558, 561, 565], "oidhw": [545, 558, 562, 563, 565], "dhwio": [545, 558, 559, 562, 563, 565], "258": [545, 560, 562, 564], "conv_general_dil": [545, 733], "conv_general_transpos": 545, "depthwis": [545, 567, 684], "overfit": [545, 568], "1428566": [545, 568], "49000001": [545, 568], "55599999": [545, 568], "21000004": [545, 568], "incom": [545, 569], "666": [545, 546, 569, 585], "4269": [545, 569], "911": [545, 569, 726], "157": [545, 569], "753": [545, 569], "101": [545, 546, 550, 569, 582, 631], "545": [545, 552, 569, 648], "547": [545, 569, 723], "124": [545, 569], "852": [545, 569], "963": [545, 569], "98495483": [545, 569], "0293808": [545, 569], "0159359": [545, 569], "74752808": [545, 569], "20942307": [545, 569], "108": [545, 556, 569, 666], "3205719": [545, 569], "long": [545, 570, 713, 714, 721, 722, 724, 726, 733, 740, 755], "short": [545, 570, 714, 722, 740, 744], "unrol": [545, 570, 740, 743], "lstm": [545, 570, 684, 740, 755], "multi": [545, 546, 571, 574, 684, 724, 739, 748, 751, 753, 755, 759], "head": [545, 571, 684, 702, 711, 713, 721, 733], "paper": [545, 571, 702, 706], "vaswani": [545, 571], "et": [545, 546, 571, 594], "al": [545, 571], "2017": [545, 571], "attend": [545, 571], "num_attention_head": [545, 571], "key_dim": [545, 571, 684], "value_dim": [545, 571, 684], "Then": [545, 571, 709, 712, 713, 714, 718, 719, 721, 727, 730, 732, 735, 736, 748], "query_dim": [545, 571], "measur": [545, 571, 684], "new_": [545, 571], "attention_weight": [545, 571], "alongsid": [545, 571, 705], "attenion_weight": [545, 571], "out_feat_dim": [545, 571], "23333359": [545, 572], "03946018": [545, 572], "0280633": [545, 572], "29981947": [545, 572], "29981089": [545, 572], "06345534": [545, 572], "9634552": [545, 572], "19336844": [545, 572], "09336829": [545, 572], "axisa": [546, 574], "axisb": [546, 574], "axisc": [546, 574], "293": [546, 575], "46997": [546, 575], "futur": [546, 579, 580, 702, 704, 706, 713, 714, 721, 722, 735, 736, 738, 742, 748, 761], "45033181e": [546, 580], "02829754e": [546, 580], "54220343e": [546, 580], "12647155e": [546, 580], "38447177e": [546, 580], "56155300e": [546, 580], "26794919": [546, 580], "7320509": [546, 580], "0012": [546, 582], "00342": [546, 582], "000565": [546, 582], "0104": [546, 582], "000981": [546, 582], "00282": [546, 582], "000766": [546, 582], "0322": [546, 582], "00237": [546, 582], "000151": [546, 582], "00101": [546, 582], "00019": [546, 582], "0214": [546, 582], "00171": [546, 582], "0107": [546, 582], "0167": [546, 582], "0472": [546, 582], "0536": [546, 582], "0177": [546, 582], "000429": [546, 582], "00762": [546, 582], "lu_factor": 546, "pivot": [546, 583], "lu": [546, 583], "frobeniu": [546, 585], "nuclear": [546, 585], "induc": [546, 585], "ranl": [546, 585], "47722558": [546, 585], "776": [546, 585], "6000004": [546, 585], "118": [546, 586], "moor": [546, 590], "penros": [546, 590], "deteremin": [546, 592], "logsabsdet": [546, 592], "although": [546, 592, 717, 720, 733, 738, 753, 755], "again": [546, 592, 705, 706, 714, 717, 718, 719, 720, 724, 726, 727, 732, 733, 735, 736, 738, 743, 745, 748, 760, 761], "subject": [546, 592], "solut": [546, 593, 702, 713, 714, 720, 722, 734, 735, 738, 753, 757], "ordin": [546, 593, 747], "usvh": [546, 594], "cetera": [546, 594], "86217213": [546, 595], "31816804": [546, 595], "615": [546, 595], "ss": [546, 595], "25994301": [546, 595], "16403675": [546, 595], "61529762": [546, 595], "51231241": [546, 595], "39777088": [546, 595], "15413129": [546, 595], "1029852": [546, 595], "01383495": [546, 595], "86647356": [546, 595], "7786541": [546, 595], "55970621": [546, 595], "16857576": [546, 595], "86412698": [546, 595], "37566757": [546, 595], "88477993": [546, 595], "95925522": [546, 595], "6444726": [546, 595], "54687881": [546, 595], "16134834": [546, 595], "35037804": [546, 595], "31025076": [546, 595], "35769391": [546, 595], "transposit": [546, 596], "success": [546, 556, 598, 670, 672, 705, 721], "0x": [546, 599], "Such": [546, 599, 729, 735], "progress": [546, 599, 713, 714, 745], "alexandr": [546, 599], "theophil": [546, 599], "9000001": [546, 601], "64158917": [546, 601], "skew": [546, 602], "6666193": [547, 603], "67164493e": [547, 603], "05471958e": [547, 603], "32684899e": [547, 603], "30496836e": [547, 603], "e501": [547, 603, 684], "05393649": [547, 603], "49992943": [547, 603], "83330965": [547, 603], "35667494": [547, 605], "79329094": [547, 605], "512926": [547, 605], "outsid": [548, 606, 617, 723, 729, 742, 760], "honor": [548, 613], "beyond": [548, 614, 725, 733, 761], "famili": [548, 617], "intxx": [548, 617], "floatxx": [548, 617], "construct": [548, 619, 684, 687, 688, 689, 740, 744, 745, 753, 755, 762], "rep": [548, 619], "fomaml_step": 549, "inner_cost_fn": [549, 622, 623, 624], "outer_cost_fn": [549, 622, 623], "inner_grad_step": [549, 622, 623, 624], "inner_learning_r": [549, 622, 623, 624], "inner_optimization_step": [549, 622, 623, 624], "inner_batch_fn": [549, 622, 623], "outer_batch_fn": [549, 622, 623], "average_across_step": [549, 622, 623], "inner_v": [549, 622, 623], "keep_inner_v": [549, 622, 623], "outer_v": [549, 622, 623], "keep_outer_v": [549, 622, 623], "return_inner_v": [549, 622, 623, 624], "num_task": [549, 622, 623, 624], "maml": [549, 622, 623], "task": [549, 622, 623, 624, 702, 707, 714, 733, 734, 747, 755, 761, 762], "0x7eff7870c310": [549, 622, 623, 624], "maml_step": 549, "vanilla": [549, 623, 744, 755], "recev": [549, 623], "reptile_step": 549, "cost_fn": [549, 624], "reptil": [549, 624], "_variabl": [549, 624], "batch_in": [549, 624], "latent": [549, 624], "4485182": [549, 624], "139": [549, 624], "9569855": [549, 624], "9880483": [549, 624], "01766968": [549, 624], "02197957": [549, 624], "02197981": [549, 624], "all_nested_indic": 550, "include_nest": [550, 625], "_index": [550, 625, 636], "_base": [550, 625, 635, 636, 732], "extra_nest_typ": [550, 625, 626, 635, 636, 637], "themselv": [550, 625, 720, 722, 723, 725, 729, 733, 744, 752, 761], "far": [550, 625, 636, 723, 724, 741, 760, 761], "copy_nest": 550, "to_mut": [550, 626, 637], "deepli": [550, 626, 748, 755], "mutabl": [550, 626, 632, 633, 637, 642, 643, 718], "copied_nest": [550, 626], "1337": [550, 626, 637], "duplicate_array_index_chain": 550, "index_nest": [550, 729], "insert_into_nest_at_index": 550, "insert_into_nest_at_indic": 550, "onto": [550, 631, 637, 703, 704, 755], "special_squar": [550, 631], "6666666666666667": [550, 631], "special_pow": [550, 631], "linear_model": [550, 631], "map_nest_at_index": 550, "shallow": [550, 632, 633, 637, 642, 643], "_result": [550, 632, 642], "placehold": [550, 632, 637, 642, 684, 714, 717, 728, 750], "hh": [550, 632, 637], "map_nest_at_indic": 550, "ub": [550, 633], "tb": [550, 633], "multi_index_nest": 550, "nested_ani": 550, "check_nest": [550, 635, 636], "conditon": [550, 635, 636], "nested_argwher": 550, "stop_after_n_found": [550, 636], "nested_indic": [550, 636], "nested_map": [550, 723, 729], "_depth": [550, 637], "_tuple_check_fn": [550, 637], "_list_check_fn": [550, 637], "_dict_check_fn": [550, 637], "wherebi": [550, 637, 712, 752], "ah": [550, 637], "bh": [550, 637], "ch": [550, 637], "dh": [550, 637, 716], "eh": [550, 637], "gh": [550, 637, 713], "ih": [550, 637], "1338": [550, 637], "nested_multi_map": 550, "index_chain": [550, 638], "nest0": [550, 638], "ivy_arrai": [550, 638, 717, 733], "unappli": [550, 638], "prune_empti": 550, "prune_nest_at_index": 550, "prune_nest_at_indic": 550, "set_nest_at_index": 550, "set_nest_at_indic": 550, "111": [550, 643], "xyz": [550, 643], "pqr": [550, 643], "mini": [551, 644, 684, 687], "uniformli": [552, 646, 648], "22346112": [552, 647], "0922": [552, 647], "49671414": [552, 647], "1382643": [552, 647], "64768857": [552, 647], "5230298": [552, 647], "23415337": [552, 647], "23413695": [552, 647], "9213753": [552, 647], "12818667": [552, 647], "799": [552, 647], "469": [552, 647], "287": [552, 647], "0366": [552, 647], "26431865": [552, 648], "475": [552, 648], "878": [552, 648], "861": [552, 648], "929": [552, 648], "789": [552, 648], "519": [552, 648], "0435": [552, 648], "381": [552, 648], "4608004": [552, 648], "8458502": [552, 648], "67270088": [552, 648], "31128597": [552, 648], "zeroel": [553, 654], "major": [553, 654, 705, 722, 723, 734, 735, 748, 752, 755], "guarante": [554, 656, 658, 706, 717, 722, 732, 748], "aggreg": [554, 656, 721], "fourth": [554, 656], "1141": [554, 656], "8101": [554, 656], "9298": [554, 656], "8460": [554, 656], "2119": [554, 656], "3519": [554, 656], "6252": [554, 656], "4033": [554, 656], "7443": [554, 656], "2577": [554, 656], "3707": [554, 656], "0545": [554, 656], "3238": [554, 656], "5944": [554, 656], "0775": [554, 656], "4327": [554, 656], "62519997": [554, 656], "40329999": [554, 656], "59439999": [554, 656], "74430001": [554, 656], "81010002": [554, 656], "84600002": [554, 656], "92979997": [554, 656], "einstein": [556, 666, 696], "117": [556, 666], "sentinel": [556, 667, 669], "90000004": [556, 668], "intend": [556, 672, 683, 716, 728, 731, 753, 755, 759, 760], "07472222": [556, 673], "00666667": [556, 673], "08966666": [556, 673], "simplicit": [557, 674, 675], "meta": [622, 623, 624, 717, 736, 755], "geglu": 680, "leakyrelu": 680, "logsoftmax": 680, "moduleconvert": [681, 686], "from_flax_modul": 681, "native_modul": 681, "params_fx": 681, "rng_seed": 681, "constructor_arg": 681, "constructor_kwarg": 681, "instance_arg": 681, "instance_kwarg": 681, "flax": [681, 706, 745, 748, 755], "from_haiku_modul": 681, "params_hk": 681, "from_keras_modul": 681, "from_paddle_modul": 681, "paddl": [681, 693, 712, 713, 722], "from_torch_modul": 681, "dedic": [681, 728, 738, 742, 744], "to_ivy_modul": [681, 745], "native_module_class": 681, "modulehelp": [682, 686], "check_submod_ret": 682, "expected_submod_ret": [682, 686], "get_mod_kei": 682, "top_mod": 682, "explicit": [682, 713, 720, 722, 731, 732, 733, 740, 748, 755], "mod_depth": 682, "mod_height": 682, "mod_with_top_mod_key_chain": 682, "flatten_key_chain": 682, "iimedi": 682, "parent": [682, 712, 721, 742], "show_mod_in_top_mod": 682, "upper_depth": 682, "lower_depth": 682, "coverag": [682, 722, 735], "prompt": [682, 712, 714], "show_structur": 682, "this_repr": 682, "show_v_in_top_v": 682, "perspect": 682, "top_v": 682, "sub_mod": 682, "show_v": 682, "comopos": 682, "enumer": [682, 702], "track_submod_call_ord": [682, 686], "track_submod_ret": [682, 686], "v_with_top_v_key_chain": 682, "create_vari": [683, 744], "var_shap": [683, 744], "fan_out": [683, 744], "fan_in": [683, 744], "rectangular": 683, "firstlayersiren": 683, "siren": 683, "distribt": 683, "glorotuniform": [683, 684, 744], "glorot": 683, "xavier": 683, "neuron": 683, "w_1x_1": 683, "w_2x_2": 683, "w_nx_n": 683, "w_i": 683, "vanish": 683, "explod": [683, 703, 704], "big": [683, 707, 748, 755], "pick": 683, "abstract": [683, 688, 704, 720, 722, 732, 733, 735, 738, 744, 748, 753, 755, 757, 758, 762], "kaimingnorm": 683, "fan_mod": [683, 744], "kaim": 683, "he": 683, "center": 683, "negative_slop": 683, "fan": 683, "propog": 683, "fan_sum": [683, 744], "proport": 683, "Ones": 683, "randomnorm": 683, "stddev": 683, "w0": 683, "gain": [683, 714, 716, 739, 744, 755], "wlim": 683, "predefin": 683, "initialz": 683, "fan_avg": 683, "adaptiveavgpool1d": 684, "adaptiveavgpool2d": 684, "avgpool1d": 684, "implicit": [684, 720, 725, 733, 735, 740, 755], "avgpool2d": 684, "avgpool3d": 684, "input_channel": [684, 702, 740, 744], "output_channel": [684, 702, 744], "filter_s": 684, "weight_initi": [684, 744], "bias_initi": [684, 744], "0x7eff7896b520": 684, "0x7eff7896b5b0": 684, "conv1dtranspos": 684, "0x7eff789697b0": 684, "0x7eff7896b610": 684, "filter_shap": 684, "0x7eff78969450": 684, "0x7eff789699f0": 684, "conv2dtranspos": 684, "0x7eff78969840": 684, "0x7eff78969810": 684, "0x7eff78969510": 684, "0x7eff789694e0": 684, "conv3dtranspos": 684, "0x7eff789691e0": 684, "0x7eff789691b0": 684, "depthwiseconv2d": 684, "num_channel": 684, "0x7eff78969390": 684, "0x7eff789690c0": 684, "bernoul": 684, "num_embed": 684, "embedding_dim": 684, "padding_idx": 684, "lookup": 684, "num_embeddingss": 684, "whenev": [684, 714, 718, 721, 722, 726, 732, 735, 737, 743], "renorm": 684, "insensit": 684, "num_lay": 684, "return_sequ": 684, "return_st": 684, "0x7eff78968f40": 684, "get_initial_st": 684, "connect": [684, 705, 713, 744, 745, 753], "0x7eff78969180": 684, "0x7eff789694b0": 684, "maxpool1d": 684, "maxpool2d": [684, 702], "maxpool3d": 684, "multiheadattent": 684, "embed_dim": 684, "head_dim": 684, "dropout_r": 684, "use_proj_bia": 684, "attention_ax": 684, "build_mod": [684, 685, 686], "on_init": [684, 686], "parallel": [684, 719, 755, 759, 760], "binarycrossentropyloss": 685, "store_var": [685, 686], "fallback_to_non_compil": [685, 686, 688], "fall": [685, 686, 688, 712, 722, 739], "with_partial_v": [685, 686], "crossentropyloss": 685, "logpoissonloss": 685, "modulemeta": 686, "submod_depth": 686, "submods_to_track": 686, "varibl": 686, "temporarili": [686, 710, 716], "from_cal": 686, "trigger": [686, 712, 727], "successfulli": [686, 713, 717], "built_": 686, "compile_kwarg": 686, "_unified_ivy_graph": 686, "_call": 686, "eval": 686, "register_buff": 686, "var_nam": 686, "save_weight": 686, "weights_path": 686, "show_graph": 686, "randomness_factor": 686, "save_to_disk": 686, "notebook": 686, "with_edge_label": 686, "with_arg_label": 686, "with_output_label": 686, "output_connected_onli": 686, "highlight_subgraph": 686, "fname": [686, 743], "batchnorm2d": 687, "num_featur": 687, "affin": 687, "track_running_stat": 687, "trail": 687, "layernorm": 687, "normalized_shap": 687, "elementwise_affin": 687, "set_stat": [688, 744], "init_on_first_step": 688, "ignore_miss": 688, "privat": [688, 733, 735], "_step": [688, 744], "sgd": [688, 755], "stochast": [688, 755], "sub_modul": 689, "check_al": 690, "messag": [690, 697, 701, 705, 713, 714, 721, 724, 726, 727, 733, 740, 742], "check_all_or_any_fn": 690, "check_ani": 690, "check_dev_correct_format": 690, "check_dimens": 690, "check_elem_in_list": [690, 729, 732, 733], "elem": 690, "check_equ": [690, 733], "check_exist": 690, "check_fals": 690, "check_fill_value_and_dtype_are_compat": [690, 736], "check_gather_input_valid": 690, "check_gather_nd_input_valid": 690, "check_great": 690, "allow_equ": [690, 726], "check_inplace_sizes_valid": [690, 732], "check_isinst": 690, "allowed_typ": 690, "check_kernel_padding_s": 690, "padding_s": 690, "check_less": [690, 726], "check_one_way_broadcast": 690, "check_same_dtyp": 690, "check_shapes_broadcast": 690, "check_tru": 690, "check_unsorted_segment_min_valid_param": 690, "ast_help": 692, "importtransform": 692, "nodetransform": 692, "impersonate_import": 692, "tree": [692, 708, 722], "local_ivy_id": 692, "visit_import": 692, "visit_importfrom": 692, "ivyload": 692, "loader": [692, 702, 743, 748], "exec_modul": 692, "ivypathfind": 692, "metapathfind": 692, "find_spec": 692, "fullnam": 692, "contextmanag": 693, "choose_random_backend": 693, "convert_from_numpy_to_target_backend": 693, "variable_id": 693, "numpy_obj": 693, "convert_from_source_backend_to_numpi": 693, "current_backend": [693, 712, 726, 729, 734, 736, 740], "global_backend": 693, "fn_name_from_version_specific_fn_nam": 693, "prevent_access_loc": 693, "previous_backend": [693, 718], "unset": [693, 718, 740], "op": [693, 736, 740, 748], "eagertensor": [693, 734], "subsequ": [693, 713, 717, 721, 722, 724, 728, 729, 732, 735, 744, 756], "Or": [693, 702, 709, 732, 743], "jaxlib": [693, 713, 717, 722, 723, 728, 736, 740, 742], "xla_extens": [693, 717, 722, 723, 728, 736, 740, 742], "arrayimpl": 693, "set_backend_to_specific_vers": 693, "set_jax_backend": 693, "set_mxnet_backend": 693, "mxnet": [693, 705, 712, 713, 762], "mx": 693, "set_numpy_backend": 693, "set_paddle_backend": 693, "set_tensorflow_backend": 693, "set_torch_backend": 693, "unset_backend": [693, 718], "with_backend": 693, "sub_backend_handl": 694, "available_sub_backend": 694, "clear_sub_backend": 694, "find_available_sub_backend": 694, "sub_backends_loc": 694, "set_sub_backend": 694, "sub_backend_str": 694, "unset_sub_backend": 694, "dynamic_import": 695, "import_modul": [695, 740], "packag": [695, 702, 708, 710, 713, 721, 733, 748, 749, 755, 757], "einsum_pars": 696, "convert_interleaved_input": 696, "interleav": 696, "convert_subscript": 696, "old_sub": 696, "symbol_map": 696, "subscript": 696, "oe": 696, "ellipsi": 696, "find_output_shap": 696, "find_output_str": 696, "canon": 696, "gen_unused_symbol": 696, "symbol": [696, 712, 713, 755, 756], "abd": 696, "get_symbol": 696, "letter": 696, "resort": 696, "unicod": 696, "charact": [696, 705, 733], "chr": 696, "192": 696, "surrog": 696, "\u0155": 696, "20000": 696, "\u4eac": 696, "has_valid_einsum_chars_onli": 696, "einsum_str": 696, "abaz": 696, "\u00f6ver": 696, "is_valid_einsum_char": 696, "\u01f5": 696, "legalise_einsum_expr": 696, "reproduct": 696, "pars": [696, 719, 724, 748], "intak": 696, "contract_path": 696, "parse_einsum_input": 696, "einsum_eqn": 696, "legalis": 696, "legalise_einsum_eqn": 696, "za": 696, "xza": 696, "xz": 696, "possibly_convert_to_numpi": 696, "thing": [696, 704, 705, 706, 711, 712, 713, 714, 718, 733, 735, 738, 742, 743, 755], "everyth": [696, 702, 706, 712, 713, 714, 715, 721, 724, 732, 733, 734, 735, 741, 748, 749], "myshap": 696, "__main__": 696, "0x10f850710": 696, "inplaceupdateexcept": 697, "include_backend": [697, 726], "invalidbackendexcept": 697, "ivyattributeerror": [697, 726], "attributeerror": [697, 726, 742], "ivybroadcastshapeerror": [697, 726], "ivydeviceerror": 697, "ivydtypepromotionerror": [697, 726], "ivyerror": [697, 702, 726], "ivyindexerror": [697, 726], "ivynotimplementedexcept": [697, 726], "notimplementederror": 697, "ivyvalueerror": [697, 726], "handle_except": [697, 728, 730], "add_array_spec": 698, "fn_array_spec": 698, "set_logging_mod": 699, "debug": [699, 713, 714, 720, 721, 731, 735, 738, 743, 755], "info": [699, 702, 719, 725, 727], "unset_logging_mod": 699, "recent": [699, 704, 705, 713, 714, 735], "print_stat": 700, "viz": 700, "visual": [700, 702, 713, 733, 735, 748, 755, 757, 760], "snakeviz": 700, "bonu": 700, "cprofil": 700, "cprint": [701, 740], "straight": [702, 721, 733, 735, 742], "awai": [702, 753, 755], "dive": [702, 707, 709, 711, 712, 714, 716, 720, 722, 727, 734, 739, 742, 743, 748, 761], "grow": [702, 755], "guid": [702, 707, 712, 713, 714, 719, 727, 733, 761], "own": [702, 705, 706, 713, 716, 721, 722, 725, 726, 732, 733, 736, 740, 748, 750, 751, 754, 755, 760, 761], "variou": [702, 714, 716, 721, 722, 725, 726, 728, 730, 731, 733, 734, 735, 747, 749, 750, 751, 753, 754, 755, 758, 761], "perk": [702, 717, 720], "essenti": [702, 704, 705, 712, 718, 720, 723, 724, 729, 732, 733, 734, 761], "mainli": [702, 712, 715, 731, 733, 735, 741, 743, 750, 755], "handler": [702, 739, 741, 745, 750], "behind": [702, 715, 728, 735, 739, 741], "scene": [702, 703, 704, 715, 739, 741, 755], "facilit": 702, "agnost": [702, 717, 728, 740, 742, 745, 748, 761, 762], "mse_loss": 702, "jax_ms": 702, "tf_mse": 702, "np_mse": 702, "torch_ms": 702, "regressor": 702, "input_dim": 702, "output_dim": 702, "_build": 702, "linear0": [702, 743, 744], "linear1": [702, 743, 744], "_forward": [702, 725, 740, 743, 744], "easili": [702, 705, 713, 717, 721, 733, 738, 743, 744, 745, 748, 755, 761, 762], "favorit": 702, "n_training_exampl": 702, "loss_fn": [702, 743, 744, 745], "epoch": 702, "5f": 702, "finish": [702, 707, 712, 713, 715], "usabl": [702, 728, 736], "topic": [702, 730, 742, 755], "mechan": [702, 721, 746, 748], "vision": [702, 708, 746, 751, 761], "robot": [702, 746], "reinforc": [702, 747], "gym": 702, "builder": [702, 709, 746, 748, 750], "trainer": [702, 706, 746, 748, 762], "highli": [702, 755], "flexibl": [702, 720, 722, 728, 731, 736, 738, 755], "everyon": [702, 706, 707, 712, 713, 714, 748], "plan": [702, 747, 749], "interoper": [702, 705, 752, 753, 755, 758], "easiest": [702, 709, 713, 749], "command": [702, 709, 713, 716, 719, 721, 727, 749], "python3": [702, 708, 713, 714], "pre": [702, 708, 710, 712, 735, 745, 748, 749, 755], "pull": [702, 706, 707, 708, 712, 713, 716, 724, 727, 736, 738, 748, 749], "unifyai": [702, 708, 709, 713, 714, 719, 749], "sweat_smil": 702, "git": [702, 708, 709, 711, 713, 714, 716, 719, 721, 727, 735, 749], "clone": [702, 708, 709, 714, 749], "com": [702, 708, 709, 713, 714, 716, 719, 721, 722, 749], "cd": [702, 708, 709, 713, 714, 749], "page": [702, 712, 713, 714, 719, 721, 741, 742, 745, 746, 749], "video": [702, 707, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 749, 753], "tutori": [702, 714, 733, 749], "quit": [702, 710, 714, 717, 724, 725, 729, 730, 735, 738, 755, 761], "lot": [702, 705, 706, 721, 722, 730, 735, 748, 754], "jax_fn": 702, "jax_x": 702, "torch_x": 702, "torch_fn": 702, "focus": [702, 736, 747, 753, 754, 755, 761, 762], "architectur": [702, 713, 745, 748, 753, 754, 755, 758, 759, 760], "orient": [702, 747], "contributor": [702, 707, 710, 712, 713, 714, 733, 739, 755], "nuanc": 702, "background": [702, 713, 719, 755, 757], "contextualis": 702, "problem": [702, 705, 714, 716, 717, 718, 723, 733, 742, 751, 757, 761], "explos": [702, 703, 705], "why": [702, 703, 705, 714, 732, 742], "adher": [702, 704, 705, 716, 722, 725, 728, 738, 740, 745, 751, 752, 761], "lastli": [702, 717], "paint": [702, 704, 740], "pictur": [702, 704, 712, 740], "role": [702, 714, 723, 733, 741, 756, 758, 762], "wide": [702, 714, 735, 753, 755], "demo": [702, 708, 747], "showcas": [702, 747], "shorter": [702, 742], "ensp": 702, "eff_encod": 702, "efficientnet_v2": 702, "efficientnetv2b0": 702, "include_top": 702, "imagenet": 702, "torch_eff_encod": 702, "customiz": [702, 719], "script": [702, 708, 713, 714, 721, 724, 740, 748, 755], "deepmind_perceiver_io": 702, "perceiver_backbon": 702, "dummy_input": 702, "backbon": [702, 740, 743], "perceiverioclassifi": 702, "max_pool": 702, "1024": 702, "sm_framework": 702, "segmentation_model": 702, "sm": 702, "torch_sm": 702, "metric": [702, 748], "iou_scor": 702, "rax": 702, "torch_rax": 702, "poly1_softmax_loss": 702, "madmom": 702, "madmon": 702, "torch_madmom": 702, "freq": 702, "audio": 702, "hz2midi": 702, "reduce_mean": [702, 743, 744, 745], "torch_loss": 702, "output_dens": 702, "maxpooling1d": 702, "pool_siz": 702, "tf_kornia": 702, "sharp": 702, "tf_rax": 702, "tf_madmom": 702, "tf_loss": 702, "hk_eff_encod": 702, "dummy_x": 702, "jax_sm": 702, "jax_madmom": 702, "jax_loss": 702, "jax_enable_x64": 702, "np_kornia": 702, "np_sm": 702, "np_rax": 702, "np_loss": 702, "yourself": [702, 712, 714, 727, 735, 738, 747], "anyon": [702, 705, 707, 714, 721, 748, 761], "classif": [702, 755], "ivynet": 702, "h_w": 702, "extractor": 702, "image_height": 702, "image_width": 702, "favourit": [702, 713], "pure": [702, 725, 728, 733, 738, 742, 745, 748, 755, 761, 762], "helper": [702, 719, 722, 726, 743, 750], "generate_batch": 702, "dataset_s": 702, "y_train": 702, "num_correct": 702, "y_pred": 702, "hyperparam": 702, "num_epoch": 702, "model_nam": 702, "epoch_loss": 702, "running_loss": 702, "training_accuraci": 702, "train_loss": 702, "train_correct": 702, "train_loop": 702, "tqdm": 702, "xbatch": 702, "ybatch": 702, "ybatch_encod": 702, "loss_prob": 702, "batch_loss": 702, "set_descript": 702, "set_postfix": 702, "accuracy_percentag": 702, "naverag": 702, "6f": 702, "plot": [702, 755], "_train_summari": 702, "csv": 702, "writer": 702, "writerow": 702, "prepar": [702, 721], "folder": [702, 708, 713, 714, 716, 719, 721, 729, 733, 735, 736, 737], "believ": [702, 705, 714], "feedback": [702, 721], "welcom": [702, 707, 713, 714], "appreci": 702, "amaz": 702, "acceler": [702, 733, 753, 757, 758, 759, 760], "journei": [702, 707], "achiev": [702, 721, 722, 729, 730, 735, 738, 743, 745, 750], "ambiti": 702, "season": 702, "perfect": [702, 747], "idea": [702, 706, 708, 712, 736, 741, 747, 754], "fellow": 702, "twitter": 702, "sneak": 702, "peek": 702, "certainli": [702, 705, 761], "great": [702, 705, 706, 714, 735, 740, 742, 761], "stai": [702, 721], "credit": 702, "accompani": 702, "articl": [702, 727], "lenton2021ivi": 702, "titl": [702, 712, 714, 719], "templat": [702, 719, 725, 735], "inter": 702, "author": [702, 712, 714, 753, 757], "lenton": 702, "daniel": 702, "pardo": 702, "fabio": 702, "falck": 702, "fabian": 702, "jame": 702, "stephen": 702, "clark": 702, "ronald": 702, "journal": 702, "arxiv": 702, "preprint": 702, "2102": 702, "02886": 702, "year": [702, 704, 706, 716, 748, 755], "huge": [703, 705, 721, 743, 755, 761], "collabor": [703, 704, 705], "consortium": [703, 705], "grown": 704, "consider": [704, 712, 724, 728, 738, 752, 753], "especi": [704, 713, 718, 727, 755], "rapidli": 704, "repo": [704, 708, 711, 714, 716, 719, 721, 722, 734, 735], "wonder": [704, 706, 742], "evolv": [704, 755], "shareabl": 704, "hinder": [704, 728], "outdat": 704, "matter": [704, 724], "month": [704, 713], "rigor": [704, 735], "newest": 704, "softwar": [704, 705, 713, 714, 753, 758, 759, 760], "rapid": [704, 705, 713, 755], "prototyp": [704, 755], "vital": [704, 745], "signific": [704, 705, 737, 748, 755], "bottleneck": 704, "quickli": [704, 706, 713, 714, 721, 743, 744, 755, 762], "obsolet": [704, 706], "constantli": [704, 738], "invent": 704, "wheel": 704, "simultan": [704, 706], "modern": [704, 705, 731, 760], "scalabl": [704, 740, 760, 761], "univers": [704, 733], "languag": [704, 706, 733, 740, 750, 753, 756, 758, 759, 760, 761], "front": [704, 733, 739, 740, 743, 753, 755], "runner": 704, "littl": [704, 742, 757], "principl": [704, 753, 755, 758], "almost": [704, 711, 720, 734, 741, 743], "syntax": [704, 705, 722, 755], "unsurprisingli": [704, 724], "fundament": [704, 721, 733, 738, 740, 755], "2006": 704, "cloth": 704, "central": [705, 712, 727, 738, 761], "forgiven": 705, "eyebrow": 705, "somehow": 705, "strong": [705, 748, 755], "industri": [705, 755, 757], "funni": 705, "comic": 705, "strip": 705, "easi": [705, 713, 714, 717, 718, 720, 729, 731, 734, 735, 738, 753, 755, 761, 762], "charger": 705, "instant": 705, "mandat": [705, 722, 732, 735, 736], "adopt": [705, 714, 717, 728, 738, 754, 755, 760], "despit": [705, 720, 722, 723, 734, 740, 752, 755], "bring": [705, 716, 735, 740, 741, 750], "benefit": [705, 706, 713, 717, 720, 732, 738, 742, 743, 748, 753, 757, 760], "unrel": [705, 714], "contrari": 705, "bumpi": 705, "road": 705, "allud": [705, 743], "technologi": [705, 753, 757], "thank": [705, 743], "bio": [705, 713], "pcie": 705, "motherboard": 705, "raid": 705, "storag": [705, 743], "virtual": [705, 708, 714, 733, 758, 759], "bluetooth": 705, "wireless": 705, "exchang": [705, 711, 751, 753], "btx": 705, "sata": 705, "host": [705, 709, 721, 748, 760], "websit": [705, 713, 716], "tcp": 705, "ip": 705, "commun": [705, 707, 712, 713, 714, 748, 754, 755, 757], "smtp": 705, "send": [705, 760], "gmail": [705, 721], "outlook": 705, "pop": [705, 713], "email": [705, 721], "live": [705, 706, 718, 719, 722, 751, 753], "did": [705, 712, 719, 745, 761], "aris": [705, 722, 727, 748], "substanti": [705, 714, 717, 722, 735, 755], "innov": 705, "growth": [705, 758], "necess": 705, "parti": [705, 719, 748, 754, 755, 761], "engag": [705, 707, 714], "regard": [705, 711, 720, 733, 734, 738], "2015": [705, 755], "frame": [705, 747, 755], "matur": [705, 748, 755], "preced": [705, 744], "aros": 705, "effort": [705, 707, 712, 748, 751, 755, 761], "stage": [705, 707, 714, 715, 716, 719, 735, 755], "mission": [705, 757], "At": [705, 712, 713, 714, 716, 735, 736, 755], "ourselv": [705, 761], "quansight": [705, 761], "compani": [705, 751], "organ": [705, 717, 720, 729, 733, 736, 750], "panda": 705, "scipi": [705, 712, 757, 762], "conda": [705, 713, 757], "apach": [705, 757, 761], "onnx": [705, 753, 761], "jupyt": [705, 757], "cupi": [705, 755, 762], "net": [705, 706, 740, 745], "sympi": 705, "modin": 705, "spyder": 705, "googl": [705, 721], "octoml": [705, 761], "sponsor": 705, "lg": 705, "electron": 705, "shaw": 705, "intel": [705, 713, 753, 760], "promis": 705, "pursuit": 705, "unif": [705, 707, 742, 751, 761], "clearli": [705, 712, 714, 724, 734, 735, 759], "thought": [705, 713, 714, 728, 753], "care": [705, 714, 723, 733, 738, 745], "gone": [705, 739], "excit": [705, 707, 715], "complianc": 705, "hope": [705, 748, 761], "suit": [705, 713, 715, 716, 721, 735, 743, 747, 750, 755, 761], "motiv": [705, 742], "convinc": 705, "celebr": 705, "encourag": [705, 727, 747, 748], "foundat": [705, 758], "perfectli": 706, "happi": [706, 713, 748], "abund": 706, "better": [706, 708, 712, 715, 733, 734, 736, 738, 739, 742, 743, 744, 758], "streamlin": [706, 758], "workflow": [706, 712, 714, 718, 722, 731, 733, 743, 746, 750, 754, 761, 762], "week": [706, 714], "sai": [706, 712, 713, 730, 742], "deepmind": 706, "releas": [706, 712, 713, 722, 736, 738, 748, 755, 761], "awesom": 706, "love": 706, "perceiverio": 706, "slew": 706, "rush": 706, "inevit": [706, 756], "often": [706, 711, 716, 726, 728, 729, 733, 735, 748, 756, 759, 762], "erron": 706, "poor": 706, "repositori": [706, 708, 709, 713, 714, 715, 716, 719], "confus": [706, 722, 726, 732, 738, 750], "hour": [706, 721], "spent": 706, "spin": 706, "discuss": [706, 712, 714, 719, 722, 723, 732, 733, 735, 738, 741, 742, 743, 748, 751, 756], "sake": 706, "few": [706, 711, 712, 714, 720, 722, 723, 728, 729, 731, 732, 734, 735, 738, 740, 741, 742, 743, 744, 746, 755, 757], "wouldn": 706, "nice": [706, 735, 755], "frantic": 706, "port": 706, "lucid": 706, "honk": 706, "understand": [706, 708, 710, 711, 712, 713, 714, 715, 716, 719, 724, 725, 728, 734, 739, 751, 761], "hasn": 706, "spend": [706, 755], "torchvis": 706, "sonnet": 706, "statu": [706, 712, 721, 727], "quo": 706, "dopamin": 706, "ignit": 706, "catalyst": 706, "lightn": 706, "fastai": 706, "trax": [706, 745], "objax": [706, 745], "offer": [706, 733, 744, 755, 761, 762], "strongli": [707, 713, 733, 761, 762], "skill": [707, 757], "veteran": 707, "beginn": [707, 755], "aspect": [707, 731, 743, 755], "board": [707, 719], "local": [707, 708, 713, 716, 719, 729, 734, 735], "resourc": [707, 712, 713, 721], "setup": [708, 713, 714, 719, 721], "mech": [708, 709], "grasp": [708, 733], "dir": [708, 743], "mutual": [708, 720, 729], "venv": 708, "ivy_dev": [708, 713, 714], "bat": [708, 713, 714], "mac": [708, 713, 714], "linux": [708, 713, 714, 758, 760], "instal": [708, 709, 713, 714, 718, 719, 727, 747], "edit": [708, 712, 713, 714, 727], "pip": [708, 710, 713, 719, 727, 747], "immedi": [708, 713], "ivy_robot": [708, 747], "docker": [708, 710, 711], "desktop": [708, 713], "my": [708, 721], "mount": [708, 709, 714], "rm": [708, 709, 714], "pwd": [708, 709], "pycharm": [708, 710, 735], "vscode": [708, 713], "devcontain": [708, 713], "remot": [708, 713, 716, 727], "codespac": 708, "good": [708, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 740, 741, 744], "commit": [708, 710, 712, 716, 724, 735], "make_doc": 709, "sh": [709, 713, 714, 716, 721], "ssh": [709, 721], "make_docs_without_dock": [709, 719], "sphinx": [709, 719], "aim": [710, 714, 716, 730, 733, 735, 739, 753, 755, 758], "assist": 710, "navig": [710, 713, 714, 715], "actual": [710, 714, 715, 721, 729, 730, 732, 733, 734, 735, 738, 739, 744, 748, 756, 761], "runtimeerror": 710, "logaddexp2_cpu": 710, "falsifi": [710, 716, 735], "test_logaddexp2": 710, "backend_fw": [710, 734], "on_devic": [710, 734], "dtype_and_x": [710, 734, 735], "test_flag": [710, 734, 735], "functiontestflag": 710, "ground_truth_backend": [710, 734], "num_positional_arg": [710, 734, 735], "with_out": [710, 734, 735], "instance_method": [710, 735], "test_gradi": [710, 735], "test_compil": 710, "as_vari": [710, 734, 735], "fn_name": [710, 718, 734, 735], "reproduce_failur": [710, 716, 730, 735], "axicy2bkaamobaar2waaaacvaai": 710, "assertionerror": [710, 716, 726, 734, 735], "25830078125": 710, "258544921875": 710, "test_acosh": 710, "axicy2baabyqwqgiaabdaai": 710, "instabl": [710, 722], "41421356": 710, "41421356e": 710, "34078079e": 710, "154": 710, "test_ab": [710, 713, 735], "000j": 710, "154j": 710, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 710, "deal": [710, 723, 729, 731, 733, 748], "experiment": [710, 714, 722, 733, 736, 740, 755], "climb": 711, "steep": 711, "curv": 711, "realpython": 711, "pyn": 711, "platform": [711, 753, 757, 759], "stuck": [711, 712], "spell": 711, "though": [711, 712, 714, 722, 723, 725, 729, 732, 733, 738, 743, 748], "sound": [711, 721, 739], "peopl": [711, 713, 714, 715, 755, 757], "action": [711, 721, 724, 727, 735], "frequent": [712, 714, 718, 755], "outlin": [712, 713, 714, 715, 720, 722, 725, 729, 732, 733, 735], "broad": [712, 757], "individu": [712, 714, 716, 718, 722, 729, 733, 755, 758, 761, 762], "explan": [712, 713, 714, 720, 725, 728, 733, 736, 742], "focu": [712, 731, 753, 754, 757, 762], "pypi": [712, 713, 736, 748], "familiar": [712, 713], "hypothesi": [712, 714, 716, 721, 730], "fail": [712, 713, 714, 716, 721, 722, 724, 727, 730, 732, 733, 734], "sure": [712, 713, 714, 716, 721, 726, 733, 734, 735, 738, 749], "aforement": 712, "categori": [712, 716, 717, 720, 722, 726, 733, 736, 739], "arraywithelementwis": [712, 717, 742], "containerwithmanipul": 712, "thorough": [712, 725, 728, 735], "comment": [712, 713, 714, 716, 722, 727, 733, 738], "add_reformatting_checklist_": 712, "category_nam": [712, 722, 723, 725, 728, 729], "pr": [712, 714, 716, 727, 733, 734, 735], "autom": [712, 721, 727, 735, 750, 757], "bot": [712, 727], "markdown": [712, 719], "patient": [712, 713], "emoji": 712, "legend": 712, "mark": [712, 714, 716, 735, 740], "checkbox": [712, 713], "proce": [712, 713], "elabor": 712, "struggl": 712, "assigne": 712, "status": 712, "refrain": 712, "mindspor": 712, "subsect": [712, 713, 714, 716, 721], "verifi": [712, 722, 723, 733, 735, 736], "assess": [712, 738], "merg": [712, 714, 716, 721, 733, 755], "composition": 712, "pend": 712, "helpfulli": [712, 738, 753], "problemat": [712, 713], "unimpl": 712, "issue_link": 712, "alias": [712, 733, 734], "alias_nam": 712, "push": [712, 714, 716, 734, 735, 761], "liner": 712, "meanwhil": [712, 721], "reselect": 712, "placement": 712, "categoris": [712, 716, 733], "faithfulli": 712, "creation_routin": [712, 734], "indexing_routin": 712, "ma": 712, "manipulation_routin": 712, "mathematical_funct": [712, 733], "sorting_searching_count": 712, "ufunc": [712, 733], "matrix_and_vector_product": 712, "matrix_eigenvalu": 712, "norms_and_other_numb": 712, "solving_equations_and_inverting_matric": 712, "seem": [712, 713, 738, 744, 745, 748, 755], "namespac": [712, 722, 730, 733, 734, 736, 740, 745], "gleam": 712, "uncom": 712, "test_numpy_inn": 712, "ivy_test": [712, 713, 714, 716, 719, 721, 734], "test_ivi": [712, 713, 714, 719, 721, 734, 735], "test_frontend": [712, 721, 734], "unsur": [712, 735], "explor": [712, 713, 714, 722, 738, 741, 745, 747, 755, 758], "confirm": 712, "worri": [712, 713, 727], "readi": [712, 713], "analyz": [712, 750], "relevant_submodul": 712, "strategi": [712, 734], "invit": [712, 733, 738], "roadmap": [712, 721], "think": [712, 714, 721, 724, 738, 756], "deem": [712, 733], "subtask": 712, "defer": [712, 717, 722, 723, 729, 732, 733, 735, 761], "clearer": [712, 726, 734, 743], "backend_nam": [712, 718, 722, 723, 725, 728, 729, 730], "approach": [712, 713, 714, 717, 720, 722, 723, 729, 733, 735, 736, 738, 742, 743, 748, 752, 759, 761], "sometim": [712, 713, 714, 716, 722, 729, 733, 735, 738], "standalon": [712, 717, 735, 750, 751, 756, 761, 762], "conveni": [712, 722, 723, 728, 734, 741, 743, 744, 750, 761], "rare": [712, 723, 748, 760], "come": [712, 713, 714, 717, 721, 733, 737, 738, 744, 746, 750, 755], "tab": [712, 713, 721, 743], "click": [712, 713, 714, 721, 725, 727, 741], "button": [712, 713, 714], "centr": 712, "predetermin": 712, "report": [712, 735], "superset": [712, 715, 729, 732, 748], "reserv": 712, "interact": [712, 754, 755, 760], "submit": [712, 727], "your_usernam": 713, "your_fold": 713, "enter": [713, 714, 717, 722, 723, 728, 730], "sync": [713, 716], "nutshel": [713, 728], "hook": [713, 727], "lint": 713, "attempt": [713, 737, 748], "properli": [713, 715, 726, 727, 733, 735], "cours": [713, 714, 716, 717, 724, 732, 733, 738, 743, 748, 760, 761], "whatev": [713, 720, 748], "elig": 713, "student": 713, "licens": [713, 758], "remind": 713, "expir": 713, "profession": 713, "trial": 713, "jetbrain": 713, "bui": [713, 761], "paid": 713, "pace": 713, "person": [713, 714], "experi": [713, 726, 735, 741, 743, 748], "abil": [713, 738, 741, 748, 755], "perhap": [713, 742, 743, 744, 748, 761], "icon": [713, 714], "panel": 713, "palett": 713, "ctrl": [713, 714], "On": [713, 722, 723, 727, 733, 735, 738, 741, 745], "m1": 713, "optional_apple_silicon_1": 713, "optional_apple_silicon_2": 713, "builtin": [713, 742, 744], "cmd": 713, "virtualenv": 713, "tick": [713, 714, 721], "paddlepaddl": 713, "wget": 713, "nz2": 713, "archiv": 713, "openssl": 713, "libssl1": 713, "1_1": 713, "1f": 713, "1ubuntu2": 713, "19_amd64": 713, "deb": 713, "sudo": 713, "dpkg": 713, "array_api_test": [713, 714, 716], "test_array_api": [713, 714, 716, 735], "mitig": [713, 761], "conflict": [713, 714, 721, 733, 743], "powershel": 713, "admin": 713, "visit": [713, 714, 721], "menu": 713, "tag": [713, 714], "introspect": 713, "usr": 713, "dialog": 713, "persist": 713, "opt": [713, 718, 722, 732, 735, 738], "caus": [713, 714, 716, 718, 720, 721, 722, 724, 732, 734, 735, 748], "earlier": [713, 714, 722, 736], "virtualis": 713, "dropdown": [713, 721], "dockerfil": 713, "apt": 713, "ca": 713, "certif": 713, "curl": 713, "gnupg": 713, "lsb": 713, "mkdir": [713, 721], "keyr": 713, "fssl": 713, "gpg": 713, "dearmor": 713, "arch": 713, "lsb_releas": 713, "tee": 713, "null": 713, "ce": 713, "cli": 713, "containerd": 713, "io": [713, 721], "plugin": 713, "systemctl": 713, "permiss": [713, 721], "press": [713, 714, 743], "ok": 713, "successful": 713, "4a": 713, "socket": 713, "chmod": [713, 721], "rwx": 713, "sock": 713, "pid": 713, "coupl": [713, 717, 742, 744, 755], "editor": 713, "pytest": [713, 714, 716, 721, 730, 735], "keyboard": 713, "displai": [713, 719, 721, 726, 735, 743], "screenshot": 713, "test_elementwis": 713, "bar": 713, "shell": [713, 714], "run_tests_cli": [713, 716], "run_ivy_core_test": 713, "run_ivy_nn_test": 713, "run_ivy_stateful_test": 713, "run_test": [713, 721], "test_depend": 713, "test_ivy_cor": 713, "test_ivy_nn": 713, "test_ivy_st": 713, "unix": 713, "test_": [713, 734], "test_funct": [713, 714, 721, 734, 735], "test_cor": [713, 714, 734], "bash": [713, 714, 716], "offici": [713, 722, 740], "wish": [713, 733], "ivy_cor": 713, "ivy_nn": 713, "ivy_st": 713, "simplest": [713, 724, 735, 738], "header": [713, 714], "advanc": [713, 754], "arrow": 713, "test_stat": 713, "test_submodule_nam": 713, "test_function_nam": 713, "debugg": 713, "studio": [713, 735], "afterward": [713, 743], "restart": 713, "overlap": [713, 721, 736, 738, 756], "test_file_path": 713, "test_fn_nam": 713, "engin": [713, 755, 757, 758], "comma": 713, "postcreatecommand": 713, "post_create_command": 713, "poststartcommand": 713, "safe": [713, 733], "containerworkspacefold": 713, "reopen": 713, "test_fle_path": 713, "slash": 713, "computation": 713, "heavi": [713, 733, 734, 738, 756], "comfort": [713, 726], "isol": [713, 714, 756, 761], "fledg": [713, 740, 741], "container": 713, "intens": 713, "headach": 713, "arm": [713, 714], "vm": [713, 721], "azur": 713, "cloud": [713, 721, 747, 757], "longer": [713, 722, 732, 735, 755], "theme": [713, 719], "slow": 713, "ipad": 713, "browser": [713, 719], "quota": 713, "requisit": 713, "pane": [713, 714, 721], "six": [713, 738], "dockerfilegpu": 713, "ivv": 713, "multiv": 713, "multivers": [713, 736], "dockerfilemultivers": 713, "dockerhub": 713, "region": 713, "box": 713, "upto": [713, 714], "minut": [713, 721], "launch": 713, "kindli": 713, "guidelin": 713, "conatin": 713, "colour": 713, "chanc": 713, "troubleshoot": 713, "ever": 713, "flask": 713, "toolbar": [713, 714], "_array_modul": [713, 716], "refresh": 713, "workspac": 713, "pytestarg": 713, "unittesten": 713, "pytesten": 713, "autotestdiscoveronsaveen": 713, "conftest": 713, "quick": [714, 715, 734, 744], "tendenc": 714, "land": 714, "world": [714, 757], "fly": [714, 755], "hard": [714, 742, 755], "respons": [714, 721, 722], "internship": 714, "serv": [714, 717, 720, 728, 729, 733, 734, 735, 738, 739, 750, 753], "suspect": 714, "iii": 714, "reformat": [714, 727], "issue_numb": 714, "12345": 714, "delet": [714, 721], "clean": [714, 736, 740, 741, 743], "rememb": 714, "respond": 714, "dai": [714, 727], "freed": 714, "situat": [714, 721, 745], "upon": [714, 724, 732, 735, 738, 748, 754, 755], "unabl": [714, 738], "obvious": [714, 721], "qualiti": 714, "hypothet": 714, "frustrat": 714, "busi": 714, "fine": [714, 722, 724, 733, 742, 745, 761], "inact": 714, "me": 714, "unfairli": 714, "investig": 714, "wherea": [714, 717, 718, 720, 722, 723, 724, 728, 729, 735, 745, 752], "practic": [714, 718, 721, 733, 758], "checkout": [714, 716, 735], "name_of_your_branch": 714, "date": [714, 716], "complic": [714, 734, 740], "merge_with_upstream": 714, "abort": 714, "tediou": [714, 724, 738], "stash": [714, 727], "reinstat": 714, "fetch": [714, 716, 721], "uncommit": 714, "unstag": [714, 727], "untrack": 714, "comprehens": [714, 716], "atlassian": 714, "wrote": 714, "blame": 714, "revis": 714, "eg": 714, "grep": 714, "commit_id": 714, "handi": 714, "histori": 714, "toggl": 714, "highlight": [714, 721, 724, 733], "approv": 714, "someon": [714, 748], "hash": [714, 743], "cancel": 714, "speedup": 714, "unavail": 714, "tickbox": 714, "span": [714, 753, 761], "intent": [714, 732], "discourag": 714, "philosophi": 714, "valuabl": 714, "infrequ": 714, "earli": [714, 755], "wast": [714, 721], "spot": [714, 724, 729], "mistak": 714, "propos": [714, 733, 738, 755], "mountain": 714, "advoc": [714, 748], "session": [714, 755], "beauti": 714, "concern": [714, 715, 720, 722, 724, 732, 738, 739, 761], "undo": 714, "stress": 714, "nifti": 714, "reassur": 714, "local_path_to_ivi": 714, "subfold": [714, 734, 735, 736], "dep": 714, "fresh": 714, "arsen": 714, "declar": 714, "exec": 714, "rf": 714, "ivy_contain": 714, "test_imag": 714, "test_random_crop": 714, "test_creation_funct": 714, "test_arang": 714, "cursor": 714, "alt": 714, "blog": 714, "breakpoint": 714, "gutter": 714, "caret": 714, "f8": 714, "f9": 714, "Into": 714, "f7": 714, "smart": 714, "fragment": [714, 751, 753, 757], "dummi": 714, "wherein": [714, 729, 735], "failur": [714, 721, 734, 735], "who": [715, 726, 739, 748, 755, 757], "weed": [715, 739], "tour": 715, "runtim": [715, 729, 735, 738, 755], "conjunct": 716, "establish": [716, 757], "2020": [716, 755], "popular": [716, 755], "sens": [716, 724, 733, 742], "unconnect": 716, "initialis": [716, 733, 735], "everytim": [716, 722], "strang": [716, 742], "thoroughli": 716, "test_linalg": [716, 734], "test_set_funct": 716, "test_signatur": 716, "excess": [716, 718, 724], "array_modul": 716, "vv": 716, "test_manipulation_funct": 716, "test_concat": [716, 735], "nb": 716, "liber": 716, "fortun": 716, "______________________": 716, "test_remaind": 716, "_______________________": 716, "test_operators_and_elementwise_funct": 716, "1264": 716, "st": [716, 734, 735], "1277": 716, "binary_param_assert_against_refimpl": 716, "ctx": 716, "620": 716, "binary_assert_against_refimpl": 716, "324": 716, "scalar_o": 716, "17304064": 716, "binaryparamcontext": 716, "axic42baaowcnp": 716, "rumwmabaear0": 716, "make_binary_param": 716, "numeric_dtyp": 716, "left_strat": 716, "left_sym": 716, "right_strat": 716, "right_sym": 716, "right_is_scalar": 716, "binary_param_assert_dtyp": 716, "binary_param_assert_shap": 716, "recreat": 716, "unexpectedli": 716, "discrep": [716, 734], "varieti": [716, 721, 722, 723, 735, 737, 751, 753, 757, 758, 761, 762], "test_asarray_arrai": 716, "test_floor_divid": 716, "health": 716, "test_iop": 716, "__imod__": 716, "isequ": 716, "test_matrix_norm": 716, "alter": 716, "tweak": 716, "array_api_methods_to_test": 716, "test_trac": 716, "test_special_cas": 716, "__ipow__": 716, "is_integ": 716, "easier": [716, 717, 718, 722, 734, 736, 750, 755, 757], "revisit": [716, 728], "devicearrai": [717, 733, 740, 742], "wrapper": [717, 719, 720, 722, 726, 729, 732, 733, 742, 750, 751, 755], "_data": [717, 732, 733, 742], "organiz": [717, 720, 733], "inherit": [717, 720, 726, 742, 748, 750], "bear": [717, 720, 722, 733], "underpin": [717, 720, 740], "programmat": [717, 720, 756], "backup": [717, 719, 720], "accident": [717, 720, 733], "readabl": [717, 720, 726, 727, 728, 735, 736, 742, 743], "absent": [717, 720], "auto": [717, 719, 720, 727, 743], "__mul__": [717, 720, 724, 728, 738, 742], "throw": [717, 722, 723, 726, 742, 755], "imposs": 717, "inputs_to_native_arrai": [717, 729, 730], "outputs_to_ivy_arrai": [717, 722, 723, 728, 729, 730], "firstli": [717, 722, 724, 725, 726, 729, 730, 732, 738, 743, 751, 761], "anywai": [717, 730, 733], "secondli": [717, 722], "permit": [717, 728, 733, 735, 738], "dictat": [717, 724, 728, 732], "__ivy_array_function__": 717, "inspir": [717, 747], "__torch_function__": 717, "myarrai": 717, "handled_funct": 717, "notimpl": 717, "issubclass": 717, "four": [717, 722, 724, 728, 729, 735, 738, 743], "enough": [717, 721, 723, 735, 742, 743, 744], "ivy_funct": 717, "my_ab": 717, "my_arrai": 717, "Of": [717, 732, 733, 743, 760, 761], "subset": [717, 721, 725, 728, 731, 733, 735, 740, 755], "implicit_backend": [718, 740], "__dict__": [718, 732, 740], "ivy_original_dict": [718, 740], "get_backend": [718, 729], "fallback": 718, "challeng": [718, 761], "switch": [718, 726, 729, 730, 762], "scope": [718, 756, 760], "intermediari": 718, "illustr": [718, 740, 747], "set_dynamic_backend": 718, "unset_dynamic_backend": 718, "dynamic_backend_a": 718, "set_": 718, "unset_": 718, "technic": [718, 728, 732, 748, 755, 757], "setter": 718, "backend_handl": 718, "requires_grad": 718, "memory_format": 718, "preserve_format": 718, "weren": 718, "vast": [718, 722, 755], "minor": [718, 738, 748], "fn_name_v_1p12_and_abov": 718, "fn_name_v_1p01_to_1p1": 718, "heavili": [719, 730, 748], "characterist": 719, "conf": 719, "cleanup": 719, "disabl": 719, "procedur": [719, 721, 724, 734], "readm": [719, 748], "toctre": 719, "maxdepth": 719, "caption": 719, "related_work": 719, "deep_div": 719, "faq": 719, "glossari": 719, "autosummari": 719, "top_functional_toc": 719, "restructuredtext": 719, "render": [719, 725], "inlin": 719, "discov": [719, 722], "ivy_toctree_caption_map": 719, "stub": 719, "unfortun": [719, 727], "forc": [719, 721, 723], "linker": 719, "foo": 719, "discussion_channel_map": 719, "1000043690254946374": 719, "1000043749088436315": 719, "seri": [719, 733, 735, 755, 757], "discussion_paragraph": 719, "discord_link": 719, "channel_link": 719, "gg": 719, "zvqdvbznqj": 719, "799879767196958751": 719, "channel_id": 719, "paragraph": 719, "autoskippablemethod": 719, "skippable_method_attribut": 719, "__qualname__": 719, "autodoc": 719, "atribut": 719, "__doc__": 719, "autoivydata": 719, "containerwithelementwis": 720, "__repr__": 720, "__contains__": 720, "__getstate__": 720, "__setstate__": 720, "unpickl": 720, "num_dim": [720, 745], "__len__": 720, "enforc": [720, 742], "extern": [720, 728, 733, 735, 736], "lefthand": 720, "righthand": 720, "handle_nest": [720, 728, 729, 730, 740], "addition": [720, 732, 733, 761], "presenc": [720, 732], "absenc": [720, 728, 755], "implicitli": [720, 731, 735, 740], "log_pr": [720, 729, 732], "intuit": [720, 735, 743, 744, 751], "chronolog": 720, "concurr": [720, 721, 729, 755], "had": [720, 721, 732, 736, 740, 755, 756], "consum": [720, 721, 728, 734, 735], "__list__": 720, "But": [720, 721, 725, 727, 730, 738, 745], "implic": 720, "whatsoev": [720, 729, 750, 761], "eager": [720, 748, 755], "children": 720, "shallowest": 720, "deepest": 720, "regularli": 721, "rollback": 721, "incorpor": [721, 734, 743, 755], "techniqu": 721, "triplet": 721, "test_torch": [721, 734], "test_tensor": [721, 734], "test_torch_instance_arctan_": 721, "12500": 721, "daili": 721, "shoot": 721, "ideal": [721, 733, 738, 743], "impact": [721, 735, 744, 757], "_reduce_loss": [721, 729, 732], "test_nn": 721, "test_loss": 721, "test_binary_cross_entropy_with_logit": 721, "test_cross_entropi": 721, "test_binary_cross_entropi": 721, "test_sparse_cross_entropi": 721, "test_loss_funct": 721, "test_torch_binary_cross_entropi": 721, "test_torch_cross_entropi": 721, "binary_cross_entropy_with_logit": 721, "torch_binary_cross_entropi": 721, "torch_cross_entropi": 721, "underneath": [721, 753], "magic": 721, "readthedoc": 721, "affect": [721, 733], "pedagog": 721, "f_1": 721, "t_1": 721, "t_3": 721, "t_7": 721, "t_": 721, "f_m": 721, "cyclic": 721, "intellig": [721, 735, 757], "tests_fil": 721, "file_nam": [721, 735, 736], "del": 721, "intersect": [721, 735, 747], "tests_lin": 721, "elif": [721, 726, 732, 733, 734], "correspondingli": 721, "tests_to_run": 721, "determine_tests_lin": 721, "mongodb": 721, "databas": [721, 735], "secret": 721, "db": 721, "ssh_deploy_kei": 721, "suffic": [721, 730, 735], "massiv": 721, "constraint": [721, 722, 731], "mb": 721, "yml": 721, "felicit": 721, "clone_map": 721, "master": [721, 755], "home": 721, "deploy_kei": 721, "user_email": 721, "rashul": 721, "chutani": 721, "user_nam": 721, "target_branch": 721, "github_serv": 721, "deploy_key_fil": 721, "ssh_known_hosts_fil": 721, "known_host": 721, "keyscan": 721, "export": [721, 754, 761], "git_ssh_command": 721, "userknownhostsfil": 721, "methodologi": 721, "master1": 721, "restructur": 721, "_map": 721, "t_2": 721, "t_n": 721, "index_map": 721, "test_map": 721, "routin": [721, 732, 733, 738, 748, 755], "incorrect": 721, "snowbal": 721, "irrelev": [721, 722, 724], "recalibr": 721, "workflow_dispatch": 721, "schedul": [721, 748, 755, 762], "cron": 721, "saturdai": 721, "night": 721, "pm": 721, "gut": 721, "lesser": [721, 726], "lol": 721, "cater": 721, "master2": 721, "master32": 721, "synchron": 721, "runner2": 721, "corrupt": 721, "discard": 721, "decoupl": [721, 744], "150": 721, "cycl": [721, 735], "rashulchutani": 721, "yellow": 721, "queu": 721, "redirect": 721, "book": 721, "onrend": 721, "jo": 721, "ran": 721, "badg": 721, "clickabl": 721, "all_dtyp": 722, "all_numeric_dtyp": 722, "all_int_dtyp": 722, "all_float_dtyp": 722, "replic": [722, 731, 732, 733], "thirdli": 722, "native_float32": 722, "importantli": [722, 742, 745, 747], "arguabl": [722, 723, 733], "jaxarrai": [722, 723, 726, 728, 732, 736, 740], "_handle_0_dim_output": 722, "subtli": [722, 732], "promote_types_frontend_nam": 722, "promote_types_of_frontend_name_input": 722, "frontend_nam": 722, "demonstr": [722, 724, 726, 742], "accuraci": 722, "upcast": 722, "nearli": [722, 728, 730, 755], "downcast": 722, "footprint": 722, "concret": 722, "compound": 722, "infer_dtyp": [722, 723, 728, 730], "settabl": [722, 723], "handle_out_argu": [722, 723, 728, 729, 730, 732, 740], "infer_devic": [722, 723, 728, 730], "deleg": [722, 762], "shape_to_tupl": 722, "with_supported_dtyp": 722, "with_unsupported_dtyp": [722, 733], "unment": 722, "backend_vers": 722, "_cast_for_unary_op": [722, 729, 732], "target_typ": 722, "unsupported_dtyp": 722, "supported_dtypes_and_devic": 722, "with_unsupported_device_and_dtyp": 722, "globals_getter_func": 722, "f1": 722, "f2": 722, "lack": [722, 732, 755, 762], "inconsist": [722, 726, 731], "84530": 722, "unwarr": 722, "risk": [722, 761], "needlessli": 722, "bloat": 722, "undergo": [722, 748], "supported_dtyp": 722, "unsupported_devic": 722, "supported_devic": 722, "slight": [722, 735, 744], "downsid": 722, "inflat": 722, "undesir": 722, "accomplish": 722, "upcast_data_typ": 722, "downcast_data_typ": 722, "crosscast_data_typ": 722, "cast_data_typ": 722, "downcast_data_dtyp": 722, "tri": 722, "vice": 722, "versa": 722, "till": 722, "crosscast": 722, "exmp1": 722, "watch": [722, 733], "handle_numpy_arrays_in_specific_backend": [722, 728], "cate": 722, "understood": 722, "consumpt": [722, 759], "dual": 723, "categor": [723, 729, 733], "210": 723, "_handle_except": [723, 726], "1013": 723, "_handle_nest": [723, 726], "905": 723, "_handle_out_argu": [723, 726], "441": 723, "_inputs_to_native_arrai": [723, 726], "new_arg": [723, 726], "new_kwarg": [723, 726], "_outputs_to_ivy_arrai": [723, 726], "358": 723, "_handle_array_funct": [723, 726], "863": 723, "_handle_device_shift": 723, "handle_device_shift": [723, 730], "crucial": [723, 731], "device_shifting_dev": 723, "__enter__": 723, "exit": 723, "__exit__": 723, "mostli": [723, 732, 735], "soft_devic": 723, "eight": [724, 739], "op_nam": 724, "__r": 724, "recap": [724, 744], "combinatori": 724, "unus": [724, 732], "okai": [724, 738, 740], "meant": [724, 732], "spec": [724, 725], "my_func": [724, 736], "some_flag": 724, "another_flag": 724, "jointli": 724, "5574077": 724, "1850398": 724, "5463025": 724, "8422884": 724, "91601413": 724, "9647598": 724, "3738229": 724, "1597457": 724, "0963247": 724, "9955841": 724, "3278579": 724, "asid": [724, 747], "14254655": 724, "1578213": 724, "380515": 724, "trivial": [724, 732], "exlud": 724, "failing_fn_nam": 724, "onlin": [724, 725], "minutest": 724, "suffici": [724, 733, 735], "fault": [724, 755], "contrast": [725, 728, 733, 761], "instanti": 725, "preview": 725, "needless": [725, 734], "renam": [725, 733], "judgment": 725, "operator_nam": 725, "succinct": 725, "docst": 725, "native_error": 726, "isinst": [726, 733, 735, 736, 744, 745], "_combine_messag": 726, "truli": [726, 742], "wrong": [726, 727, 730, 733, 738], "198": 726, "392": 726, "_handle_array_like_without_promot": 726, "805": 726, "432": 726, "349": 726, "other_test": 726, "523": 726, "_handle_numpy_out": 726, "396": [726, 744], "_outputs_to_numpy_arrai": 726, "_inputs_to_ivy_arrays_np": 726, "ivy_arg": 726, "ivy_kwarg": 726, "453": 726, "_from_zero_dim_arrays_to_scalar": 726, "truth_value_test": 726, "217": 726, "visibl": 726, "unwieldi": 726, "awar": [726, 727], "squash": 726, "cleaner": [726, 743], "caught": [726, 727], "functool": [726, 733, 742], "rethrow": 726, "_print_traceback_histori": 726, "error_stack": 726, "axiserror": 726, "got": 726, "polici": [726, 730, 735, 737, 747], "moreov": 726, "met": 726, "black": 727, "flake8": 727, "formatt": 727, "linter": 727, "autoflak": 727, "docformatt": 727, "pydocstyl": 727, "cfg": 727, "yaml": 727, "patch1687898304": 727, "8072": 727, "3516aed563": 727, "akshai": 727, "jain": 727, "gui": 727, "cryptic": 727, "garden": 727, "utc": 727, "didn": 727, "human": 727, "intervent": 727, "typo": 727, "ui": 727, "handle_array_like_without_promot": [728, 730], "to_native_arrays_and_back": [728, 730, 740], "handle_array_funct": [728, 730], "inputs_to_native_shap": [728, 730], "sole": [728, 736, 754, 755, 756], "rational": [728, 732, 738], "__div__": [728, 738], "484": 728, "annot": 728, "brittl": 728, "freeli": 728, "inde": [728, 738, 748, 753], "original_typ": 728, "cumbersom": 728, "venn": 729, "diagram": [729, 761], "light": [729, 736, 748, 750, 756, 761], "maximis": 729, "array_arg": 729, "encompass": 729, "maxim": [729, 732, 740, 752, 753, 757, 758, 759], "partial_mixed_handl": [729, 730, 738], "handle_partial_mixed_funct": [729, 730, 738], "fn_decor": 729, "mixed_backend_wrapp": [729, 732], "to_add": 729, "to_skip": 729, "inputs_to_ivy_arrai": [729, 730], "modif": [729, 755], "briefli": [729, 735, 743], "get_all_arrays_on_dev": 729, "outputs_to_ivy_shap": 730, "outputs_to_native_arrai": 730, "handle_view_index": [730, 732], "handle_view": [730, 732], "handle_rag": 730, "handle_backend_invalid": 730, "handle_nan": 730, "to_native_shapes_and_back": 730, "scenario": 731, "inter_func": 731, "custom_grad_fn": 731, "args1": 731, "detach": 731, "eas": [731, 755], "captur": [731, 735, 745, 756], "program": [732, 752, 753, 755, 758, 759, 762], "speak": 732, "val_n": 732, "base_idx": 732, "_manipulation_stack": 732, "base_flat": 732, "_view_ref": 732, "_update_view": 732, "contigu": 732, "c_contigu": 732, "ascontiguousarrai": 732, "copyto": 732, "_is_vari": 732, "tensor_scatter_nd_upd": 732, "is_vari": 732, "_update_torch_view": 732, "predominantli": [732, 736, 747], "support_native_out": [732, 740], "_scalar_output_to_0d_arrai": 732, "_wrap_fn": 732, "dim0": 732, "dim1": 732, "res_floor": 732, "mul": [732, 742], "extent": [732, 733], "to_out_fn": 732, "add_wrapp": 732, "input_arrai": 732, "metadata": 732, "paradigm": [732, 748, 755], "expans": 732, "brief": [732, 735], "weak": 732, "_torch_bas": 732, "_torch_view_ref": 732, "_torch_manipul": 732, "weakli": 732, "adequ": 732, "exhaust": [732, 735, 752, 761], "tf_frontend": 733, "lax": [733, 734, 738, 745, 748], "fn_tree": [733, 734, 735], "torch_frontend": [733, 734], "numpy_frontend": 733, "jax_frontend": 733, "to_ivy_arrays_and_back": [733, 734], "fidel": 733, "algebra": [733, 753, 754, 755, 758, 762], "xla": [733, 748, 750, 755], "dynamic": 733, "mimic": 733, "arithmetic_oper": 733, "handle_numpy_out": 733, "handle_numpy_dtyp": 733, "handle_numpy_cast": 733, "from_zero_dim_arrays_to_scalar": 733, "_add": 733, "same_kind": 733, "subok": [733, 734, 738], "promote_types_of_numpy_input": 733, "underscor": 733, "unhandl": 733, "trigonometric_funct": 733, "_tan": 733, "check_tensorflow_cast": 733, "raw_op": [733, 734], "tackl": 733, "map_raw_ops_alia": 733, "unnecessari": 733, "output_typ": 733, "kwargs_to_upd": 733, "pointwise_op": 733, "slower": 733, "sensibl": 733, "ahead": [733, 736, 755], "reduce_logsumexp": 733, "input_tensor": 733, "logsumexp": 733, "trick": 733, "max_input_tensor": 733, "meet": 733, "preferred_element_typ": 733, "finer": 733, "logicaland": 733, "np_frontend": 733, "_ivy_arrai": 733, "radd": 733, "_init_data": 733, "_process_str_data": 733, "_dtype": [733, 734, 742], "_shape": [733, 742], "govern": 733, "promote_types_of_": 733, "_input": 733, "promote_types_of_torch_input": [733, 734], "saniti": 733, "handle_numpy_casting_speci": 733, "new_fn": 733, "equiv": 733, "unsaf": 733, "array_type_test": 733, "_isfinit": 733, "organis": 733, "youtub": 733, "jump": 734, "knowledg": 734, "handle_frontend_test": [734, 735], "handle_frontend_method": [734, 735], "test_frontend_funct": 734, "lift": [734, 756], "get_dtyp": [734, 735], "dtype_and_valu": [734, 735], "get_shap": [734, 735], "np_frontend_help": 734, "test_jax": 734, "test_lax": 734, "test_oper": 734, "available_dtyp": [734, 735], "test_with_out": [734, 735], "test_jax_tan": 734, "input_dtyp": [734, 735], "backend_to_test": 734, "test_numpi": 734, "test_mathematical_funct": 734, "test_trigonometric_funct": 734, "dtypes_values_cast": 734, "dtypes_values_casting_dtyp": 734, "arr_func": 734, "number_positional_arg": 734, "get_num_positional_args_ufunc": 734, "test_numpy_tan": 734, "handle_where_and_array_bool": 734, "test_tensorflow": 734, "test_math": 734, "test_tensorflow_tan": 734, "test_pointwise_op": 734, "test_torch_tan": 734, "_fill_valu": 734, "update_backend": 734, "test_glob": 734, "min_valu": [734, 735], "max_valu": [734, 735], "allow_non": [734, 735], "min_num_dim": [734, 735], "max_num_dim": [734, 735], "min_dim_s": [734, 735], "max_dim_s": 734, "test_jax_ful": 734, "test_from_shape_or_valu": 734, "_input_fill_and_dtyp": 734, "dtype_and_input": 734, "large_abs_safety_factor": [734, 735], "small_abs_safety_factor": 734, "safety_factor_scal": [734, 735], "dtype_to_cast": 734, "input_fill_dtyp": 734, "test_numpy_ful": 734, "test_raw_op": 734, "test_tensorflow_fil": 734, "test_creation_op": 734, "with_arrai": 734, "sampled_from": [734, 735], "test_torch_ful": 734, "test_valu": [734, 735], "add_nois": 734, "all_clos": 734, "_get_dtype_and_matrix": 734, "test_torch_qr": 734, "frontend_ret": 734, "frontend_q": 734, "frontend_r": 734, "assert_all_clos": 734, "ret_np": 734, "ret_from_gt_np": 734, "walkthrough": 734, "comparison_op": 734, "test_comparison_op": 734, "num_arrai": [734, 735], "allow_inf": [734, 735], "shared_dtyp": 734, "test_torch_great": 734, "all_alias": 734, "class_tre": 734, "init_tre": 734, "method_nam": 734, "test_frontend_method": 734, "init_input_dtyp": 734, "init_all_as_kwargs_np": 734, "intial": 734, "method_input_dtyp": 734, "method_all_as_kwargs_np": 734, "test_ndarrai": 734, "test_numpy_instance_add__": 734, "frontend_method_data": 734, "init_flag": [734, 735], "method_flag": [734, 735], "test_tensorflow_instance_add": 734, "method_tre": [734, 735], "1e04": 734, "allow_infin": 734, "test_torch_instance_add": 734, "atol_": 734, "_arrays_idx_n_dtyp": 734, "test_manipul": [734, 735], "surprisingli": 734, "closest_relevant_group": 734, "strive": [734, 735, 738, 748, 757], "fixtur": 735, "eleg": [735, 755], "unexplor": 735, "upload": 735, "artifact": 735, "bespok": 735, "_array_or_typ": 735, "test_default_int_dtyp": 735, "clariti": [735, 738, 755], "print_hypothesis_exampl": 735, "searchstrategi": 735, "custom_strategi": 735, "randomis": 735, "simplist": 735, "intricaci": 735, "glanc": 735, "capabl": [735, 738], "one_of": 735, "datum": 735, "pipe": 735, "shorthand": 735, "array_or_scal": 735, "len_of_arrai": 735, "test_add": 735, "gradient_test": 735, "test_gpu_is_avail": 735, "handle_test": 735, "pretest": 735, "handle_method": 735, "thankfulli": 735, "as_variable_flag": 735, "min_siz": 735, "max_siz": 735, "native_array_flag": 735, "container_flag": 735, "test_instance_method": 735, "test_inplac": 735, "seamlessli": 735, "criterion": 735, "array_valu": 735, "valid_ax": 735, "craft": 735, "hoc": 735, "44758124e": 735, "11228": 735, "456": 735, "268": 735, "wherev": 735, "dtype_values_axi": 735, "9622": 735, "28136": 735, "6375": 735, "12720": 735, "21354": 735, "900e": 735, "955e": 735, "exclude_min": 735, "57384": 735, "25687": 735, "248": 735, "array_dtyp": 735, "array_bool": 735, "test_devic": 735, "array_shap": 735, "common_shap": 735, "test_lay": 735, "size_bound": 735, "reshape_shap": 735, "stand": 735, "some_sequ": 735, "allow_nan": 735, "allow_subnorm": 735, "get_bound": 735, "arrays_valu": 735, "36418": 735, "213": 735, "21716926": 735, "none_or_list_of_float": 735, "get_prob": 735, "103515625e": 735, "099609375": 735, "probabilist": 735, "get_axi": 735, "number_positional_argu": 735, "unreproduc": 735, "x_and_linear": 735, "mixed_fn_compo": 735, "is_torch_backend": 735, "x_shape": [735, 740], "weight_shap": 735, "bias_shap": 735, "ivy_np": 735, "valid_float_dtyp": 735, "test_demo": 735, "failing_test": 735, "traceback": 735, "shrink": 735, "prescrib": 735, "scratch": 735, "therebi": 735, "test_gelu": 735, "test_fil": 735, "phase": [735, 748, 755], "notabl": [735, 755], "newer": 735, "max_exampl": 735, "deadlin": 735, "weird": 735, "systemat": 735, "safeguard": 735, "inabl": 735, "test_result_typ": 735, "9090909090909091": 735, "judgement": 736, "some_namespac": 736, "some_backend": 736, "another_backend": 736, "refactor": 736, "ongo": 736, "_assert_fill_value_and_dtype_are_compat": 736, "_to_devic": 736, "pin": 736, "conclud": 736, "unpinn": 736, "culmin": 736, "unsett": 737, "array_significant_figur": 737, "figur": 737, "array_decimal_valu": 737, "warning_level": 737, "nan_polici": 737, "stablest": 737, "answer": [738, 742, 748], "contradict": 738, "entail": 738, "sacrif": 738, "jacfwd": 738, "jacrev": 738, "banner": 738, "expens": 738, "incredibli": [738, 743, 748, 758], "price": 738, "pai": 738, "intrus": 738, "x_beta": 738, "equip": 738, "priorit": 738, "simplif": 738, "allevi": 738, "ineffici": [738, 748, 755], "fuse": 738, "hybrid": 738, "workaround": 738, "slip": 738, "radar": 738, "stumbl": 738, "fulfil": 739, "syntact": [740, 745], "power_seq": 740, "backend_stack": 740, "_determine_backend_from_arg": 740, "importlib": 740, "_backend_dict": 740, "x_flat": 740, "wi": 740, "wi_x": 740, "wii_x": 740, "wif_x": 740, "wig_x": 740, "wio_x": 740, "wh": 740, "ht": 740, "ct": 740, "hts_list": 740, "wii_xt": 740, "wif_xt": 740, "wig_xt": 740, "wio_xt": 740, "zip": 740, "htm1": 740, "ctm1": 740, "wh_htm1": 740, "whi_htm1": 740, "whf_htm1": 740, "whg_htm1": 740, "who_htm1": 740, "ft": 740, "ot": 740, "reliabl": 740, "sacrific": 740, "hear": 740, "virtu": [740, 752], "pure_ivi": 740, "compile_graph": [740, 745], "pure_torch": 740, "_layer": 740, "unclean": 740, "wx": 740, "temp": 740, "ivy_func": 740, "emphas": 740, "torchscript": [740, 750, 762], "example_input": 740, "primit": [741, 748, 753, 755], "upcom": 741, "hierarch": [741, 743, 744, 755], "arraywithactiv": 742, "arraywithcr": 742, "arraywithdatatyp": 742, "arraywithdevic": 742, "arraywithgener": 742, "arraywithgradi": 742, "arraywithimag": 742, "arraywithlay": 742, "arraywithlinearalgebra": 742, "arraywithloss": 742, "arraywithmanipul": 742, "arraywithnorm": 742, "arraywithrandom": 742, "arraywithsearch": 742, "arraywithset": 742, "arraywithsort": 742, "arraywithstatist": 742, "arraywithutil": 742, "_init": 742, "_size": 742, "_devic": 742, "_dev_str": 742, "_pre_repr": 742, "_post_repr": 742, "framework_str": 742, "noinspect": 742, "pypep8nam": 742, "immut": 742, "claim": 742, "_native_wrapp": 742, "genuin": 742, "some_method": 742, "rewritten": 742, "compartment": 742, "newshap": 742, "new_shap": 742, "tidi": 742, "crystal": 742, "ton": 743, "ado": [743, 744], "arbitrarili": 743, "soup": 743, "walk": [743, 744], "cnt": 743, "combo": 743, "3333335": 743, "delimit": 743, "autocomplet": 743, "midwai": 743, "agent": 743, "total_spe": 743, "total_height": 743, "total_width": 743, "ag": 743, "tot": 743, "total_": 743, "total_h": 743, "cnt0": 743, "cnt1": 743, "diff_0": 743, "diff_1": 743, "config0": 743, "config1": 743, "decod": 743, "l0": 743, "decoder__l0": 743, "decoder__l1": 743, "encoder__l0": 743, "encoder__l1": 743, "l0__b": 743, "l0__w": 743, "l1__b": 743, "l1__w": 743, "printabl": 743, "obviou": [743, 755], "foresight": 743, "untidili": 743, "update_ag": 743, "normalize_img": 743, "img_max": 743, "reduce_max": 743, "img_min": 743, "reduce_min": 743, "img_rang": 743, "agent_posit": 743, "agent_veloc": 743, "agent_cam_front_rgb": 743, "agent_cam_front_depth": 743, "agent_cam_rear_rgb": 743, "agent_cam_rear_depth": 743, "agent_cam_lidar": 743, "camera": 743, "front_rgb": 743, "front_depth": 743, "rear_rgb": 743, "rear_depth": 743, "lidar": 743, "rgb": 743, "rear": 743, "veloc": 743, "cam": 743, "cam_max": 743, "cam_min": 743, "cam_rang": 743, "five": 743, "perman": 743, "thread": [743, 755], "pretti": [743, 761], "straightforward": 743, "dataload": [743, 746], "_cnt": 743, "img_": 743, "png": 743, "_dataset_s": 743, "_batch_siz": 743, "_count": [743, 744], "__next__": 743, "img_fnam": 743, "loaded_img": 743, "cv2": 743, "imread": 743, "from_numpi": 743, "batch_slic": 743, "mymodel": 743, "x_in": [743, 744, 745], "0145": 743, "addbackward0": 743, "_create_vari": 744, "_input_channel": 744, "_output_channel": 744, "_w_shape": 744, "_b_shape": 744, "_with_bia": 744, "764": 744, "872": 744, "211": 744, "439": 744, "nightmar": 744, "overcom": 744, "v0": 744, "v1": 744, "key0": 744, "linear3": 744, "v2": 744, "counter": 744, "_w_init": 744, "_b_init": 744, "misnom": 744, "saw": 744, "_beta1": 744, "_beta2": 744, "_epsilon": 744, "_mw": 744, "_vw": 744, "_first_pass": 744, "_should_compil": 744, "new_v": 744, "_lr": 744, "_inplac": 744, "_stop_gradi": 744, "clip_by_valu": 745, "sparse_funct": 745, "_linear": 745, "jax_graph": 745, "to_backend": 745, "thinli": 745, "to_haiku_modul": 745, "loss_fn_t": 745, "without_apply_rng": 745, "update_rul": 745, "tree_multimap": 745, "differenti": [747, 755], "pose": 747, "quaternion": 747, "ivy_mech": 747, "target_facing_rotation_matrix": 747, "polar_to_cartesian_coord": 747, "warp": 747, "optic": 747, "voxel": 747, "ivy_vis": 747, "coords_to_voxel_grid": 747, "render_pixel_coord": 747, "radianc": 747, "nerf": 747, "trajectori": 747, "motion": 747, "mobil": [747, 755], "sample_spline_path": 747, "rigidmobil": 747, "sample_bodi": 747, "drone": 747, "sample_link": 747, "openai": 747, "swimmer": 747, "reward": 747, "supervis": 747, "door": [747, 748], "cartpol": 747, "mountain_car": 747, "pendulum": 747, "reacher": 747, "learnt": 747, "ture": 747, "ntm": 747, "egospher": 747, "esm": 747, "ivy_memori": 747, "egocentr": 747, "room": 747, "doubt": 748, "grate": 748, "probe": 748, "remark": 748, "lock": 748, "gold": 748, "dex": 748, "ye": 748, "tricki": [748, 750], "predictor": 748, "tight": 748, "driver": 748, "dispatch": [748, 755, 758], "ast": 748, "checkpoint": 748, "autodiff": 748, "shine": 748, "merci": 748, "autograd": 748, "compet": [748, 755], "parallelis": 748, "spmd": 748, "mixtur": 748, "expert": 748, "sophist": 748, "depart": 748, "hundr": 748, "thousand": 748, "broadli": [748, 761], "supplementari": 748, "reusabl": [748, 753, 755], "fanci": [748, 755], "fusion": [748, 759], "lose": 748, "pmap": 748, "eventu": 748, "supplement": 748, "backdoor": 748, "callback": 748, "record": [748, 756], "somewhat": [748, 755], "outsourc": 748, "nail": 750, "asset": 750, "scientist": 750, "correl": 750, "conceptu": [751, 756], "broken": [751, 755], "tracer": 751, "infrastructur": [751, 757, 758], "vendor": [751, 757], "complimentari": [751, 761], "acycl": [751, 756], "insert_numb": 752, "insert_t": 752, "scaffold": [753, 761], "heart": 753, "toolchain": [753, 758], "intermedi": [753, 754, 755, 756, 761], "ir": [753, 756, 761], "assembli": [753, 760, 761], "idl": 753, "middl": 753, "emit": 753, "gnu": [753, 758], "gcc": [753, 760], "broader": 753, "heterogen": 753, "aid": 753, "coprocessor": 753, "ai": [753, 757], "programm": [753, 760], "gate": 753, "onednn": 753, "sit": [753, 756, 761], "tandem": 753, "possess": 753, "khrono": [754, 760], "appl": 754, "coremltool": 754, "albeit": 754, "promin": 755, "abbrevi": 755, "laboratori": 755, "proprietari": [755, 759, 760], "mathwork": 755, "commerci": 755, "1984": 755, "toolbox": 755, "mupad": 755, "simulink": 755, "graphic": [755, 759, 760], "simul": 755, "million": [755, 758], "worldwid": 755, "scienc": [755, 757], "econom": 755, "2001": 755, "scientif": 755, "od": 755, "solver": 755, "cython": 755, "friendli": 755, "2002": 755, "lua": 755, "luajit": 755, "idiap": 755, "epfl": 755, "2005": 755, "numarrai": 755, "cpython": 755, "partli": 755, "2007": 755, "regress": [755, 762], "forest": 755, "boost": 755, "dbscan": 755, "inbuilt": 755, "esqu": 755, "aesara": 755, "datafram": 755, "critic": [755, 761], "2012": 755, "Its": 755, "polymorph": 755, "mpi": 755, "openmp": 755, "glue": 755, "jaot": 755, "nasa": 755, "cern": 755, "climat": 755, "allianc": 755, "influenti": 755, "2014": 755, "scala": 755, "ship": 755, "forgiv": 755, "decemb": 755, "announc": 755, "mainten": 755, "v7": 755, "meaning": 755, "2016": 755, "imper": 755, "amazon": 755, "traction": 755, "cognit": [755, 762], "toolkit": [755, 756, 762], "grade": 755, "realiz": 755, "dnn": 755, "cnn": 755, "rnn": 755, "backpropag": 755, "succumb": 755, "came": 755, "monitor": 755, "practition": [755, 759, 760, 761], "hobbyist": 755, "tremend": 755, "ecosystem": 755, "gear": 755, "batteri": 755, "zygot": 755, "jl": 755, "workload": 755, "daggerflux": 755, "frontier": 755, "hessian": 755, "2018": 755, "lightweight": [755, 762], "shortcom": 755, "barrier": 755, "inexperienc": 755, "underdevelop": 755, "fanat": 755, "ounc": 755, "infanc": 755, "emerg": 755, "nich": 755, "introduct": 755, "lite": 755, "enterpris": 755, "reinvent": [755, 757], "inertia": 755, "creator": [755, 757], "paszk": 755, "hi": 755, "safeti": 755, "bulk": 755, "haskel": 755, "dataflow": 756, "distil": 756, "essenc": [756, 761], "enclos": 756, "trace_modul": 756, "scriptfunct": 756, "scriptmodul": 756, "fake": 756, "proxi": 756, "site": 756, "graphmodul": 756, "travi": 757, "oliph": 757, "leader": 757, "cornerston": 757, "numba": 757, "numfocu": 757, "pydata": 757, "confer": 757, "consult": 757, "servic": 757, "expertis": 757, "devop": 757, "mlop": 757, "dashboard": 757, "startup": 757, "mlir": [757, 758, 761], "Their": 757, "held": 757, "privileg": 757, "presum": 757, "llvm": [757, 760], "founder": 757, "tvm": [757, 761], "sustain": 757, "empow": 757, "har": 757, "burden": 757, "benchmark": 757, "convention": 758, "precompil": 758, "executor": 758, "julia": [758, 761], "fsf": 758, "gpl": 758, "biggest": [758, 761], "nvidia": [759, 760], "conduct": 759, "throughput": 759, "autotun": 759, "gpgpu": 759, "talk": 760, "classic": 760, "sycl": 760, "dpc": 760, "processor": 760, "maco": 760, "x86": 760, "oneapi": 760, "ia": 760, "aka": 760, "xeon": 760, "gen9": 760, "xe": 760, "arria": 760, "gx": 760, "fpga": 760, "tune": [760, 761], "lofti": 761, "ambit": 761, "realm": 761, "bedrock": 761, "flux": 761, "bite": 761, "chew": 761, "eagerpi": 761, "tensorli": 761, "thinc": 761, "neuropod": 761, "exhibit": 761, "emploi": 761, "fx": 761, "retrain": 761, "closer": 761, "greatli": 761, "modular": 761, "anywher": 761, "theano": 762, "plaidml": 762, "partial_svd": 762, "excel": 762, "subsystem": 762}, "objects": {"ivy.Array": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [524, 0, 1, "", "adam_step"], [525, 0, 1, "", "adam_update"], [323, 0, 1, "", "adaptive_avg_pool1d"], [324, 0, 1, "", "adaptive_avg_pool2d"], [325, 0, 1, "", "adaptive_max_pool2d"], [177, 0, 1, "", "add"], [353, 0, 1, "", "adjoint"], [674, 0, 1, "", "all"], [444, 0, 1, "", "all_equal"], [274, 0, 1, "", "allclose"], [178, 0, 1, "", "angle"], [675, 0, 1, "", "any"], [651, 0, 1, "", "argmax"], [652, 0, 1, "", "argmin"], [660, 0, 1, "", "argsort"], [653, 0, 1, "", "argwhere"], [447, 0, 1, "", "array_equal"], [378, 0, 1, "", "as_strided"], [78, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [448, 0, 1, "", "assert_supports_inplace"], [379, 0, 1, "", "associative_scan"], [106, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [380, 0, 1, "", "atleast_1d"], [381, 0, 1, "", "atleast_2d"], [382, 0, 1, "", "atleast_3d"], [327, 0, 1, "", "avg_pool1d"], [328, 0, 1, "", "avg_pool2d"], [329, 0, 1, "", "avg_pool3d"], [414, 0, 1, "", "batch_norm"], [420, 0, 1, "", "bernoulli"], [421, 0, 1, "", "beta"], [275, 0, 1, "", "binarizer"], [603, 0, 1, "", "binary_cross_entropy"], [432, 0, 1, "", "bincount"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [258, 0, 1, "", "blackman_window"], [107, 0, 1, "", "broadcast_arrays"], [108, 0, 1, "", "broadcast_to"], [109, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [573, 0, 1, "", "cholesky"], [606, 0, 1, "", "clip"], [450, 0, 1, "", "clip_matrix_norm"], [451, 0, 1, "", "clip_vector_norm"], [607, 0, 1, "", "concat"], [385, 0, 1, "", "concat_from_sequence"], [354, 0, 1, "", "cond"], [276, 0, 1, "", "conj"], [608, 0, 1, "", "constant_pad"], [559, 0, 1, "", "conv1d"], [560, 0, 1, "", "conv1d_transpose"], [561, 0, 1, "", "conv2d"], [562, 0, 1, "", "conv2d_transpose"], [563, 0, 1, "", "conv3d"], [564, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "copy_array"], [277, 0, 1, "", "copysign"], [433, 0, 1, "", "corrcoef"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [278, 0, 1, "", "count_nonzero"], [434, 0, 1, "", "cov"], [574, 0, 1, "", "cross"], [604, 0, 1, "", "cross_entropy"], [435, 0, 1, "", "cummax"], [436, 0, 1, "", "cummin"], [664, 0, 1, "", "cumprod"], [665, 0, 1, "", "cumsum"], [330, 0, 1, "", "dct"], [454, 0, 1, "", "default"], [193, 0, 1, "", "deg2rad"], [567, 0, 1, "", "depthwise_conv2d"], [575, 0, 1, "", "det"], [151, 0, 1, "", "dev"], [331, 0, 1, "", "dft"], [576, 0, 1, "", "diag"], [355, 0, 1, "", "diagflat"], [577, 0, 1, "", "diagonal"], [279, 0, 1, "", "diff"], [280, 0, 1, "", "digamma"], [422, 0, 1, "", "dirichlet"], [194, 0, 1, "", "divide"], [356, 0, 1, "", "dot"], [568, 0, 1, "", "dropout"], [332, 0, 1, "", "dropout1d"], [333, 0, 1, "", "dropout2d"], [334, 0, 1, "", "dropout3d"], [386, 0, 1, "", "dsplit"], [387, 0, 1, "", "dstack"], [117, 0, 1, "", "dtype"], [357, 0, 1, "", "eig"], [579, 0, 1, "", "eigh"], [358, 0, 1, "", "eigh_tridiagonal"], [359, 0, 1, "", "eigvals"], [580, 0, 1, "", "eigvalsh"], [455, 0, 1, "", "einops_rearrange"], [456, 0, 1, "", "einops_reduce"], [457, 0, 1, "", "einops_repeat"], [666, 0, 1, "", "einsum"], [249, 0, 1, "", "elu"], [335, 0, 1, "", "embedding"], [86, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [458, 0, 1, "", "exists"], [197, 0, 1, "", "exp"], [198, 0, 1, "", "exp2"], [388, 0, 1, "", "expand"], [609, 0, 1, "", "expand_dims"], [199, 0, 1, "", "expm1"], [259, 0, 1, "", "eye_like"], [336, 0, 1, "", "fft"], [337, 0, 1, "", "fft2"], [389, 0, 1, "", "fill_diagonal"], [119, 0, 1, "", "finfo"], [281, 0, 1, "", "fix"], [390, 0, 1, "", "flatten"], [610, 0, 1, "", "flip"], [391, 0, 1, "", "fliplr"], [392, 0, 1, "", "flipud"], [282, 0, 1, "", "float_power"], [200, 0, 1, "", "floor"], [201, 0, 1, "", "floor_divide"], [283, 0, 1, "", "fmax"], [202, 0, 1, "", "fmin"], [203, 0, 1, "", "fmod"], [393, 0, 1, "", "fold"], [459, 0, 1, "", "fourier_encode"], [284, 0, 1, "", "frexp"], [88, 0, 1, "", "from_dlpack"], [91, 0, 1, "", "full_like"], [423, 0, 1, "", "gamma"], [462, 0, 1, "", "gather"], [463, 0, 1, "", "gather_nd"], [204, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [466, 0, 1, "", "get_num_dims"], [285, 0, 1, "", "gradient"], [528, 0, 1, "", "gradient_descent_update"], [205, 0, 1, "", "greater"], [206, 0, 1, "", "greater_equal"], [415, 0, 1, "", "group_norm"], [60, 0, 1, "", "hardswish"], [468, 0, 1, "", "has_nans"], [394, 0, 1, "", "heaviside"], [437, 0, 1, "", "histogram"], [395, 0, 1, "", "hsplit"], [396, 0, 1, "", "hstack"], [373, 0, 1, "", "huber_loss"], [286, 0, 1, "", "hypot"], [397, 0, 1, "", "i0"], [340, 0, 1, "", "idct"], [341, 0, 1, "", "ifft"], [342, 0, 1, "", "ifftn"], [438, 0, 1, "", "igamma"], [122, 0, 1, "", "iinfo"], [207, 0, 1, "", "imag"], [360, 0, 1, "", "initialize_tucker"], [581, 0, 1, "", "inner"], [470, 0, 1, "", "inplace_decrement"], [471, 0, 1, "", "inplace_increment"], [472, 0, 1, "", "inplace_update"], [416, 0, 1, "", "instance_norm"], [344, 0, 1, "", "interpolate"], [582, 0, 1, "", "inv"], [474, 0, 1, "", "is_array"], [125, 0, 1, "", "is_bool_dtype"], [127, 0, 1, "", "is_float_dtype"], [129, 0, 1, "", "is_int_dtype"], [475, 0, 1, "", "is_ivy_array"], [476, 0, 1, "", "is_ivy_container"], [478, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [287, 0, 1, "", "isclose"], [208, 0, 1, "", "isfinite"], [479, 0, 1, "", "isin"], [209, 0, 1, "", "isinf"], [210, 0, 1, "", "isnan"], [211, 0, 1, "", "isreal"], [481, 0, 1, "", "itemsize"], [362, 0, 1, "", "kron"], [374, 0, 1, "", "l1_loss"], [417, 0, 1, "", "l1_normalize"], [418, 0, 1, "", "l2_normalize"], [530, 0, 1, "", "lamb_update"], [531, 0, 1, "", "lars_update"], [644, 0, 1, "", "layer_norm"], [212, 0, 1, "", "lcm"], [288, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [289, 0, 1, "", "lerp"], [213, 0, 1, "", "less"], [214, 0, 1, "", "less_equal"], [427, 0, 1, "", "lexsort"], [290, 0, 1, "", "lgamma"], [569, 0, 1, "", "linear"], [92, 0, 1, "", "linspace"], [215, 0, 1, "", "log"], [216, 0, 1, "", "log10"], [217, 0, 1, "", "log1p"], [218, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [219, 0, 1, "", "logaddexp"], [220, 0, 1, "", "logaddexp2"], [221, 0, 1, "", "logical_and"], [222, 0, 1, "", "logical_not"], [223, 0, 1, "", "logical_or"], [224, 0, 1, "", "logical_xor"], [250, 0, 1, "", "logit"], [251, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "logspace"], [419, 0, 1, "", "lp_normalize"], [570, 0, 1, "", "lstm_update"], [364, 0, 1, "", "make_svd_non_negative"], [584, 0, 1, "", "matmul"], [398, 0, 1, "", "matricize"], [365, 0, 1, "", "matrix_exp"], [585, 0, 1, "", "matrix_norm"], [586, 0, 1, "", "matrix_power"], [587, 0, 1, "", "matrix_rank"], [588, 0, 1, "", "matrix_transpose"], [667, 0, 1, "", "max"], [345, 0, 1, "", "max_pool1d"], [346, 0, 1, "", "max_pool2d"], [347, 0, 1, "", "max_pool3d"], [225, 0, 1, "", "maximum"], [668, 0, 1, "", "mean"], [439, 0, 1, "", "median"], [94, 0, 1, "", "meshgrid"], [669, 0, 1, "", "min"], [226, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [366, 0, 1, "", "mode_dot"], [291, 0, 1, "", "modf"], [399, 0, 1, "", "moveaxis"], [661, 0, 1, "", "msort"], [367, 0, 1, "", "multi_dot"], [571, 0, 1, "", "multi_head_attention"], [368, 0, 1, "", "multi_mode_dot"], [645, 0, 1, "", "multinomial"], [227, 0, 1, "", "multiply"], [228, 0, 1, "", "nan_to_num"], [440, 0, 1, "", "nanmean"], [441, 0, 1, "", "nanmedian"], [292, 0, 1, "", "nansum"], [95, 0, 1, "", "native_array"], [229, 0, 1, "", "negative"], [293, 0, 1, "", "nextafter"], [654, 0, 1, "", "nonzero"], [230, 0, 1, "", "not_equal"], [96, 0, 1, "", "one_hot"], [98, 0, 1, "", "ones_like"], [532, 0, 1, "", "optimizer_update"], [443, 0, 1, "", "optional_get_element"], [589, 0, 1, "", "outer"], [400, 0, 1, "", "pad"], [401, 0, 1, "", "partial_fold"], [402, 0, 1, "", "partial_tensor_to_vec"], [369, 0, 1, "", "partial_tucker"], [403, 0, 1, "", "partial_unfold"], [404, 0, 1, "", "partial_vec_to_tensor"], [611, 0, 1, "", "permute_dims"], [590, 0, 1, "", "pinv"], [424, 0, 1, "", "poisson"], [231, 0, 1, "", "positive"], [232, 0, 1, "", "pow"], [252, 0, 1, "", "prelu"], [670, 0, 1, "", "prod"], [591, 0, 1, "", "qr"], [442, 0, 1, "", "quantile"], [233, 0, 1, "", "rad2deg"], [646, 0, 1, "", "randint"], [647, 0, 1, "", "random_normal"], [648, 0, 1, "", "random_uniform"], [234, 0, 1, "", "real"], [235, 0, 1, "", "reciprocal"], [299, 0, 1, "", "reduce"], [351, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [253, 0, 1, "", "relu6"], [236, 0, 1, "", "remainder"], [612, 0, 1, "", "repeat"], [613, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [352, 0, 1, "", "rfftn"], [614, 0, 1, "", "roll"], [406, 0, 1, "", "rot90"], [237, 0, 1, "", "round"], [572, 0, 1, "", "scaled_dot_product_attention"], [486, 0, 1, "", "scatter_flat"], [487, 0, 1, "", "scatter_nd"], [662, 0, 1, "", "searchsorted"], [254, 0, 1, "", "selu"], [500, 0, 1, "", "shape"], [650, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [238, 0, 1, "", "sign"], [294, 0, 1, "", "signbit"], [256, 0, 1, "", "silu"], [239, 0, 1, "", "sin"], [295, 0, 1, "", "sinc"], [240, 0, 1, "", "sinh"], [592, 0, 1, "", "slogdet"], [376, 0, 1, "", "smooth_l1_loss"], [377, 0, 1, "", "soft_margin_loss"], [407, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [593, 0, 1, "", "solve"], [663, 0, 1, "", "sort"], [605, 0, 1, "", "sparse_cross_entropy"], [296, 0, 1, "", "sparsify_tensor"], [615, 0, 1, "", "split"], [241, 0, 1, "", "sqrt"], [242, 0, 1, "", "square"], [616, 0, 1, "", "squeeze"], [501, 0, 1, "", "stable_divide"], [502, 0, 1, "", "stable_pow"], [617, 0, 1, "", "stack"], [671, 0, 1, "", "std"], [533, 0, 1, "", "stop_gradient"], [503, 0, 1, "", "strides"], [243, 0, 1, "", "subtract"], [672, 0, 1, "", "sum"], [504, 0, 1, "", "supports_inplace_updates"], [594, 0, 1, "", "svd"], [370, 0, 1, "", "svd_flip"], [595, 0, 1, "", "svdvals"], [618, 0, 1, "", "swapaxes"], [408, 0, 1, "", "take_along_axis"], [244, 0, 1, "", "tan"], [245, 0, 1, "", "tanh"], [596, 0, 1, "", "tensordot"], [597, 0, 1, "", "tensorsolve"], [257, 0, 1, "", "thresholded_relu"], [619, 0, 1, "", "tile"], [168, 0, 1, "", "to_device"], [506, 0, 1, "", "to_list"], [508, 0, 1, "", "to_numpy"], [509, 0, 1, "", "to_scalar"], [409, 0, 1, "", "top_k"], [598, 0, 1, "", "trace"], [246, 0, 1, "", "trapz"], [99, 0, 1, "", "tril"], [270, 0, 1, "", "trilu"], [100, 0, 1, "", "triu"], [247, 0, 1, "", "trunc"], [248, 0, 1, "", "trunc_divide"], [371, 0, 1, "", "truncated_svd"], [372, 0, 1, "", "tucker"], [410, 0, 1, "", "unfold"], [656, 0, 1, "", "unique_all"], [411, 0, 1, "", "unique_consecutive"], [657, 0, 1, "", "unique_counts"], [658, 0, 1, "", "unique_inverse"], [659, 0, 1, "", "unique_values"], [425, 0, 1, "", "unravel_index"], [271, 0, 1, "", "unsorted_segment_min"], [272, 0, 1, "", "unsorted_segment_sum"], [620, 0, 1, "", "unstack"], [522, 0, 1, "", "value_is_nan"], [599, 0, 1, "", "vander"], [673, 0, 1, "", "var"], [600, 0, 1, "", "vecdot"], [601, 0, 1, "", "vector_norm"], [602, 0, 1, "", "vector_to_skew_symmetric_matrix"], [412, 0, 1, "", "vsplit"], [413, 0, 1, "", "vstack"], [655, 0, 1, "", "where"], [297, 0, 1, "", "xlogy"], [621, 0, 1, "", "zero_pad"], [103, 0, 1, "", "zeros_like"], [298, 0, 1, "", "zeta"]], "ivy": [[543, 1, 1, "", "ArrayMode"], [539, 1, 1, "", "DefaultComplexDtype"], [540, 1, 1, "", "DefaultDevice"], [539, 1, 1, "", "DefaultDtype"], [539, 1, 1, "", "DefaultFloatDtype"], [539, 1, 1, "", "DefaultIntDtype"], [539, 1, 1, "", "DefaultUintDtype"], [320, 1, 1, "", "NativeSparseArray"], [538, 1, 1, "", "NestedSequence"], [543, 1, 1, "", "PreciseMode"], [540, 1, 1, "", "Profiler"], [320, 1, 1, "", "SparseArray"], [174, 2, 1, "", "abs"], [175, 2, 1, "", "acos"], [176, 2, 1, "", "acosh"], [544, 2, 1, "", "adam_step"], [544, 2, 1, "", "adam_update"], [323, 2, 1, "", "adaptive_avg_pool1d"], [324, 2, 1, "", "adaptive_avg_pool2d"], [325, 2, 1, "", "adaptive_max_pool2d"], [177, 2, 1, "", "add"], [353, 2, 1, "", "adjoint"], [557, 2, 1, "", "all"], [444, 2, 1, "", "all_equal"], [550, 2, 1, "", "all_nested_indices"], [274, 2, 1, "", "allclose"], [178, 2, 1, "", "angle"], [557, 2, 1, "", "any"], [538, 2, 1, "", "arange"], [326, 2, 1, "", "area_interpolate"], [445, 2, 1, "", "arg_info"], [446, 2, 1, "", "arg_names"], [553, 2, 1, "", "argmax"], [553, 2, 1, "", "argmin"], [555, 2, 1, "", "argsort"], [553, 2, 1, "", "argwhere"], [538, 2, 1, "", "array"], [447, 2, 1, "", "array_equal"], [147, 2, 1, "", "as_ivy_dev"], [539, 2, 1, "", "as_ivy_dtype"], [148, 2, 1, "", "as_native_dev"], [539, 2, 1, "", "as_native_dtype"], [312, 2, 1, "", "as_strided"], [538, 2, 1, "", "asarray"], [538, 2, 1, "", "asarray_handle_nestable"], [538, 2, 1, "", "asarray_infer_device"], [538, 2, 1, "", "asarray_infer_dtype"], [538, 2, 1, "", "asarray_inputs_to_native_shapes"], [538, 2, 1, "", "asarray_to_native_arrays_and_back"], [179, 2, 1, "", "asin"], [180, 2, 1, "", "asinh"], [448, 2, 1, "", "assert_supports_inplace"], [312, 2, 1, "", "associative_scan"], [539, 2, 1, "", "astype"], [181, 2, 1, "", "atan"], [182, 2, 1, "", "atan2"], [183, 2, 1, "", "atanh"], [312, 2, 1, "", "atleast_1d"], [312, 2, 1, "", "atleast_2d"], [312, 2, 1, "", "atleast_3d"], [327, 2, 1, "", "avg_pool1d"], [328, 2, 1, "", "avg_pool2d"], [329, 2, 1, "", "avg_pool3d"], [315, 2, 1, "", "batch_norm"], [316, 2, 1, "", "bernoulli"], [316, 2, 1, "", "beta"], [275, 2, 1, "", "binarizer"], [547, 2, 1, "", "binary_cross_entropy"], [321, 2, 1, "", "bincount"], [300, 2, 1, "", "bind_custom_gradient_function"], [184, 2, 1, "", "bitwise_and"], [185, 2, 1, "", "bitwise_invert"], [186, 2, 1, "", "bitwise_left_shift"], [187, 2, 1, "", "bitwise_or"], [188, 2, 1, "", "bitwise_right_shift"], [189, 2, 1, "", "bitwise_xor"], [303, 2, 1, "", "blackman_window"], [539, 2, 1, "", "broadcast_arrays"], [312, 2, 1, "", "broadcast_shapes"], [539, 2, 1, "", "broadcast_to"], [449, 2, 1, "", "cache_fn"], [539, 2, 1, "", "can_cast"], [537, 2, 1, "", "cast_bool"], [190, 2, 1, "", "ceil"], [539, 2, 1, "", "check_float"], [546, 2, 1, "", "cholesky"], [312, 2, 1, "", "choose"], [149, 2, 1, "", "clear_cached_mem_on_dev"], [548, 2, 1, "", "clip"], [450, 2, 1, "", "clip_matrix_norm"], [451, 2, 1, "", "clip_vector_norm"], [539, 2, 1, "", "closest_valid_dtype"], [537, 2, 1, "", "cmp_is"], [537, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [548, 2, 1, "", "concat"], [312, 2, 1, "", "concat_from_sequence"], [354, 2, 1, "", "cond"], [276, 2, 1, "", "conj"], [548, 2, 1, "", "constant_pad"], [452, 2, 1, "", "container_types"], [545, 2, 1, "", "conv"], [545, 2, 1, "", "conv1d"], [545, 2, 1, "", "conv1d_transpose"], [545, 2, 1, "", "conv2d"], [545, 2, 1, "", "conv2d_transpose"], [545, 2, 1, "", "conv3d"], [545, 2, 1, "", "conv3d_transpose"], [545, 2, 1, "", "conv_general_dilated"], [545, 2, 1, "", "conv_general_transpose"], [538, 2, 1, "", "copy_array"], [550, 2, 1, "", "copy_nest"], [277, 2, 1, "", "copysign"], [321, 2, 1, "", "corrcoef"], [191, 2, 1, "", "cos"], [192, 2, 1, "", "cosh"], [278, 2, 1, "", "count_nonzero"], [321, 2, 1, "", "cov"], [546, 2, 1, "", "cross"], [547, 2, 1, "", "cross_entropy"], [321, 2, 1, "", "cummax"], [321, 2, 1, "", "cummin"], [556, 2, 1, "", "cumprod"], [556, 2, 1, "", "cumsum"], [453, 2, 1, "", "current_backend_str"], [330, 2, 1, "", "dct"], [454, 2, 1, "", "default"], [539, 2, 1, "", "default_complex_dtype"], [150, 2, 1, "", "default_device"], [539, 2, 1, "", "default_dtype"], [539, 2, 1, "", "default_float_dtype"], [539, 2, 1, "", "default_int_dtype"], [539, 2, 1, "", "default_uint_dtype"], [193, 2, 1, "", "deg2rad"], [545, 2, 1, "", "depthwise_conv2d"], [546, 2, 1, "", "det"], [151, 2, 1, "", "dev"], [152, 2, 1, "", "dev_util"], [331, 2, 1, "", "dft"], [546, 2, 1, "", "diag"], [355, 2, 1, "", "diagflat"], [546, 2, 1, "", "diagonal"], [279, 2, 1, "", "diff"], [280, 2, 1, "", "digamma"], [316, 2, 1, "", "dirichlet"], [194, 2, 1, "", "divide"], [356, 2, 1, "", "dot"], [545, 2, 1, "", "dropout"], [332, 2, 1, "", "dropout1d"], [333, 2, 1, "", "dropout2d"], [334, 2, 1, "", "dropout3d"], [312, 2, 1, "", "dsplit"], [312, 2, 1, "", "dstack"], [539, 2, 1, "", "dtype"], [539, 2, 1, "", "dtype_bits"], [550, 2, 1, "", "duplicate_array_index_chains"], [536, 6, 1, "", "e"], [357, 2, 1, "", "eig"], [546, 2, 1, "", "eigh"], [358, 2, 1, "", "eigh_tridiagonal"], [359, 2, 1, "", "eigvals"], [546, 2, 1, "", "eigvalsh"], [455, 2, 1, "", "einops_rearrange"], [456, 2, 1, "", "einops_reduce"], [457, 2, 1, "", "einops_repeat"], [556, 2, 1, "", "einsum"], [301, 2, 1, "", "elu"], [335, 2, 1, "", "embedding"], [538, 2, 1, "", "empty"], [538, 2, 1, "", "empty_like"], [195, 2, 1, "", "equal"], [196, 2, 1, "", "erf"], [544, 2, 1, "", "execute_with_gradients"], [458, 2, 1, "", "exists"], [197, 2, 1, "", "exp"], [198, 2, 1, "", "exp2"], [312, 2, 1, "", "expand"], [548, 2, 1, "", "expand_dims"], [199, 2, 1, "", "expm1"], [538, 2, 1, "", "eye"], [303, 2, 1, "", "eye_like"], [336, 2, 1, "", "fft"], [337, 2, 1, "", "fft2"], [312, 2, 1, "", "fill_diagonal"], [539, 2, 1, "", "finfo"], [281, 2, 1, "", "fix"], [312, 2, 1, "", "flatten"], [548, 2, 1, "", "flip"], [312, 2, 1, "", "fliplr"], [312, 2, 1, "", "flipud"], [282, 2, 1, "", "float_power"], [200, 2, 1, "", "floor"], [201, 2, 1, "", "floor_divide"], [283, 2, 1, "", "fmax"], [202, 2, 1, "", "fmin"], [203, 2, 1, "", "fmod"], [312, 2, 1, "", "fold"], [549, 2, 1, "", "fomaml_step"], [537, 2, 1, "", "for_loop"], [459, 2, 1, "", "fourier_encode"], [284, 2, 1, "", "frexp"], [538, 2, 1, "", "from_dlpack"], [538, 2, 1, "", "frombuffer"], [538, 2, 1, "", "full"], [538, 2, 1, "", "full_like"], [153, 2, 1, "", "function_supported_devices"], [460, 2, 1, "", "function_supported_devices_and_dtypes"], [539, 2, 1, "", "function_supported_dtypes"], [154, 2, 1, "", "function_unsupported_devices"], [461, 2, 1, "", "function_unsupported_devices_and_dtypes"], [539, 2, 1, "", "function_unsupported_dtypes"], [316, 2, 1, "", "gamma"], [462, 2, 1, "", "gather"], [463, 2, 1, "", "gather_nd"], [204, 2, 1, "", "gcd"], [59, 2, 1, "", "gelu"], [338, 2, 1, "", "generate_einsum_equation"], [464, 2, 1, "", "get_all_arrays_in_memory"], [155, 2, 1, "", "get_all_ivy_arrays_on_dev"], [339, 2, 1, "", "get_interpolate_kernel"], [465, 2, 1, "", "get_item"], [466, 2, 1, "", "get_num_dims"], [467, 2, 1, "", "get_referrers_recursive"], [156, 2, 1, "", "gpu_is_available"], [544, 2, 1, "", "grad"], [285, 2, 1, "", "gradient"], [544, 2, 1, "", "gradient_descent_update"], [205, 2, 1, "", "greater"], [206, 2, 1, "", "greater_equal"], [315, 2, 1, "", "group_norm"], [303, 2, 1, "", "hamming_window"], [157, 2, 1, "", "handle_soft_device_variable"], [303, 2, 1, "", "hann_window"], [60, 2, 1, "", "hardswish"], [468, 2, 1, "", "has_nans"], [312, 2, 1, "", "heaviside"], [321, 2, 1, "", "histogram"], [312, 2, 1, "", "hsplit"], [312, 2, 1, "", "hstack"], [311, 2, 1, "", "huber_loss"], [286, 2, 1, "", "hypot"], [312, 2, 1, "", "i0"], [340, 2, 1, "", "idct"], [537, 2, 1, "", "if_else"], [341, 2, 1, "", "ifft"], [342, 2, 1, "", "ifftn"], [321, 2, 1, "", "igamma"], [122, 2, 1, "", "iinfo"], [207, 2, 1, "", "imag"], [550, 2, 1, "", "index_nest"], [303, 2, 1, "", "indices"], [536, 6, 1, "", "inf"], [123, 2, 1, "", "infer_default_dtype"], [360, 2, 1, "", "initialize_tucker"], [546, 2, 1, "", "inner"], [469, 2, 1, "", "inplace_arrays_supported"], [470, 2, 1, "", "inplace_decrement"], [471, 2, 1, "", "inplace_increment"], [472, 2, 1, "", "inplace_update"], [473, 2, 1, "", "inplace_variables_supported"], [550, 2, 1, "", "insert_into_nest_at_index"], [550, 2, 1, "", "insert_into_nest_at_indices"], [315, 2, 1, "", "instance_norm"], [343, 2, 1, "", "interp"], [344, 2, 1, "", "interpolate"], [546, 2, 1, "", "inv"], [124, 2, 1, "", "invalid_dtype"], [319, 2, 1, "", "invert_permutation"], [474, 2, 1, "", "is_array"], [125, 2, 1, "", "is_bool_dtype"], [126, 2, 1, "", "is_complex_dtype"], [127, 2, 1, "", "is_float_dtype"], [128, 2, 1, "", "is_hashable_dtype"], [129, 2, 1, "", "is_int_dtype"], [475, 2, 1, "", "is_ivy_array"], [476, 2, 1, "", "is_ivy_container"], [477, 2, 1, "", "is_ivy_nested_array"], [320, 2, 1, "", "is_ivy_sparse_array"], [478, 2, 1, "", "is_native_array"], [130, 2, 1, "", "is_native_dtype"], [320, 2, 1, "", "is_native_sparse_array"], [131, 2, 1, "", "is_uint_dtype"], [287, 2, 1, "", "isclose"], [208, 2, 1, "", "isfinite"], [479, 2, 1, "", "isin"], [209, 2, 1, "", "isinf"], [210, 2, 1, "", "isnan"], [211, 2, 1, "", "isreal"], [480, 2, 1, "", "isscalar"], [481, 2, 1, "", "itemsize"], [544, 2, 1, "", "jac"], [303, 2, 1, "", "kaiser_bessel_derived_window"], [303, 2, 1, "", "kaiser_window"], [361, 2, 1, "", "khatri_rao"], [362, 2, 1, "", "kron"], [363, 2, 1, "", "kronecker"], [311, 2, 1, "", "l1_loss"], [315, 2, 1, "", "l1_normalize"], [315, 2, 1, "", "l2_normalize"], [544, 2, 1, "", "lamb_update"], [544, 2, 1, "", "lars_update"], [551, 2, 1, "", "layer_norm"], [212, 2, 1, "", "lcm"], [288, 2, 1, "", "ldexp"], [535, 2, 1, "", "leaky_relu"], [289, 2, 1, "", "lerp"], [213, 2, 1, "", "less"], [214, 2, 1, "", "less_equal"], [319, 2, 1, "", "lexsort"], [290, 2, 1, "", "lgamma"], [545, 2, 1, "", "linear"], [538, 2, 1, "", "linspace"], [557, 2, 1, "", "load"], [215, 2, 1, "", "log"], [216, 2, 1, "", "log10"], [217, 2, 1, "", "log1p"], [218, 2, 1, "", "log2"], [311, 2, 1, "", "log_poisson_loss"], [535, 2, 1, "", "log_softmax"], [219, 2, 1, "", "logaddexp"], [220, 2, 1, "", "logaddexp2"], [221, 2, 1, "", "logical_and"], [222, 2, 1, "", "logical_not"], [223, 2, 1, "", "logical_or"], [224, 2, 1, "", "logical_xor"], [301, 2, 1, "", "logit"], [301, 2, 1, "", "logsigmoid"], [538, 2, 1, "", "logspace"], [315, 2, 1, "", "lp_normalize"], [545, 2, 1, "", "lstm_update"], [546, 2, 1, "", "lu_factor"], [364, 2, 1, "", "make_svd_non_negative"], [549, 2, 1, "", "maml_step"], [550, 2, 1, "", "map"], [550, 2, 1, "", "map_nest_at_index"], [550, 2, 1, "", "map_nest_at_indices"], [482, 2, 1, "", "match_kwargs"], [546, 2, 1, "", "matmul"], [312, 2, 1, "", "matricize"], [365, 2, 1, "", "matrix_exp"], [546, 2, 1, "", "matrix_norm"], [546, 2, 1, "", "matrix_power"], [546, 2, 1, "", "matrix_rank"], [546, 2, 1, "", "matrix_transpose"], [556, 2, 1, "", "max"], [345, 2, 1, "", "max_pool1d"], [346, 2, 1, "", "max_pool2d"], [347, 2, 1, "", "max_pool3d"], [348, 2, 1, "", "max_unpool1d"], [225, 2, 1, "", "maximum"], [556, 2, 1, "", "mean"], [321, 2, 1, "", "median"], [538, 2, 1, "", "meshgrid"], [556, 2, 1, "", "min"], [226, 2, 1, "", "minimum"], [535, 2, 1, "", "mish"], [310, 2, 1, "", "mode_dot"], [291, 2, 1, "", "modf"], [312, 2, 1, "", "moveaxis"], [555, 2, 1, "", "msort"], [310, 2, 1, "", "multi_dot"], [545, 2, 1, "", "multi_head_attention"], [550, 2, 1, "", "multi_index_nest"], [310, 2, 1, "", "multi_mode_dot"], [552, 2, 1, "", "multinomial"], [227, 2, 1, "", "multiply"], [483, 2, 1, "", "multiprocessing"], [536, 6, 1, "", "nan"], [228, 2, 1, "", "nan_to_num"], [321, 2, 1, "", "nanmean"], [321, 2, 1, "", "nanmedian"], [292, 2, 1, "", "nansum"], [538, 2, 1, "", "native_array"], [320, 2, 1, "", "native_sparse_array"], [320, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [303, 2, 1, "", "ndenumerate"], [303, 2, 1, "", "ndindex"], [349, 2, 1, "", "nearest_interpolate"], [229, 2, 1, "", "negative"], [550, 2, 1, "", "nested_any"], [550, 2, 1, "", "nested_argwhere"], [550, 2, 1, "", "nested_map"], [550, 2, 1, "", "nested_multi_map"], [536, 6, 1, "", "newaxis"], [293, 2, 1, "", "nextafter"], [553, 2, 1, "", "nonzero"], [230, 2, 1, "", "not_equal"], [484, 2, 1, "", "num_arrays_in_memory"], [158, 2, 1, "", "num_cpu_cores"], [159, 2, 1, "", "num_gpus"], [160, 2, 1, "", "num_ivy_arrays_on_dev"], [538, 2, 1, "", "one_hot"], [538, 2, 1, "", "ones"], [538, 2, 1, "", "ones_like"], [544, 2, 1, "", "optimizer_update"], [322, 2, 1, "", "optional_get_element"], [546, 2, 1, "", "outer"], [312, 2, 1, "", "pad"], [312, 2, 1, "", "partial_fold"], [312, 2, 1, "", "partial_tensor_to_vec"], [310, 2, 1, "", "partial_tucker"], [312, 2, 1, "", "partial_unfold"], [312, 2, 1, "", "partial_vec_to_tensor"], [161, 2, 1, "", "percent_used_mem_on_dev"], [548, 2, 1, "", "permute_dims"], [536, 6, 1, "", "pi"], [546, 2, 1, "", "pinv"], [316, 2, 1, "", "poisson"], [350, 2, 1, "", "pool"], [231, 2, 1, "", "positive"], [232, 2, 1, "", "pow"], [301, 2, 1, "", "prelu"], [485, 2, 1, "", "print_all_arrays_in_memory"], [162, 2, 1, "", "print_all_ivy_arrays_on_dev"], [556, 2, 1, "", "prod"], [132, 2, 1, "", "promote_types"], [133, 2, 1, "", "promote_types_of_inputs"], [550, 2, 1, "", "prune_empty"], [550, 2, 1, "", "prune_nest_at_index"], [550, 2, 1, "", "prune_nest_at_indices"], [312, 2, 1, "", "put_along_axis"], [546, 2, 1, "", "qr"], [321, 2, 1, "", "quantile"], [233, 2, 1, "", "rad2deg"], [552, 2, 1, "", "randint"], [303, 2, 1, "", "random_cp"], [552, 2, 1, "", "random_normal"], [303, 2, 1, "", "random_tucker"], [552, 2, 1, "", "random_uniform"], [234, 2, 1, "", "real"], [235, 2, 1, "", "reciprocal"], [299, 2, 1, "", "reduce"], [351, 2, 1, "", "reduce_window"], [535, 2, 1, "", "relu"], [301, 2, 1, "", "relu6"], [236, 2, 1, "", "remainder"], [548, 2, 1, "", "repeat"], [549, 2, 1, "", "reptile_step"], [548, 2, 1, "", "reshape"], [134, 2, 1, "", "result_type"], [352, 2, 1, "", "rfftn"], [548, 2, 1, "", "roll"], [312, 2, 1, "", "rot90"], [237, 2, 1, "", "round"], [557, 2, 1, "", "save"], [545, 2, 1, "", "scaled_dot_product_attention"], [486, 2, 1, "", "scatter_flat"], [487, 2, 1, "", "scatter_nd"], [555, 2, 1, "", "searchsorted"], [552, 2, 1, "", "seed"], [301, 2, 1, "", "selu"], [301, 2, 1, "", "sequence_length"], [543, 2, 1, "", "set_array_mode"], [135, 2, 1, "", "set_default_complex_dtype"], [163, 2, 1, "", "set_default_device"], [136, 2, 1, "", "set_default_dtype"], [137, 2, 1, "", "set_default_float_dtype"], [138, 2, 1, "", "set_default_int_dtype"], [139, 2, 1, "", "set_default_uint_dtype"], [543, 2, 1, "", "set_exception_trace_mode"], [543, 2, 1, "", "set_inplace_mode"], [543, 2, 1, "", "set_item"], [543, 2, 1, "", "set_min_base"], [543, 2, 1, "", "set_min_denominator"], [550, 2, 1, "", "set_nest_at_index"], [550, 2, 1, "", "set_nest_at_indices"], [543, 2, 1, "", "set_nestable_mode"], [543, 2, 1, "", "set_precise_mode"], [543, 2, 1, "", "set_queue_timeout"], [543, 2, 1, "", "set_shape_array_mode"], [543, 2, 1, "", "set_show_func_wrapper_trace_mode"], [164, 2, 1, "", "set_soft_device_mode"], [165, 2, 1, "", "set_split_factor"], [543, 2, 1, "", "set_tmp_dir"], [543, 2, 1, "", "shape"], [552, 2, 1, "", "shuffle"], [535, 2, 1, "", "sigmoid"], [238, 2, 1, "", "sign"], [294, 2, 1, "", "signbit"], [301, 2, 1, "", "silu"], [239, 2, 1, "", "sin"], [295, 2, 1, "", "sinc"], [240, 2, 1, "", "sinh"], [546, 2, 1, "", "slogdet"], [311, 2, 1, "", "smooth_l1_loss"], [311, 2, 1, "", "soft_margin_loss"], [312, 2, 1, "", "soft_thresholding"], [535, 2, 1, "", "softmax"], [535, 2, 1, "", "softplus"], [535, 2, 1, "", "softsign"], [546, 2, 1, "", "solve"], [555, 2, 1, "", "sort"], [547, 2, 1, "", "sparse_cross_entropy"], [296, 2, 1, "", "sparsify_tensor"], [548, 2, 1, "", "split"], [166, 2, 1, "", "split_factor"], [167, 2, 1, "", "split_func_call"], [241, 2, 1, "", "sqrt"], [242, 2, 1, "", "square"], [548, 2, 1, "", "squeeze"], [543, 2, 1, "", "stable_divide"], [543, 2, 1, "", "stable_pow"], [548, 2, 1, "", "stack"], [556, 2, 1, "", "std"], [544, 2, 1, "", "stop_gradient"], [543, 2, 1, "", "strides"], [243, 2, 1, "", "subtract"], [556, 2, 1, "", "sum"], [543, 2, 1, "", "supports_inplace_updates"], [546, 2, 1, "", "svd"], [310, 2, 1, "", "svd_flip"], [546, 2, 1, "", "svdvals"], [548, 2, 1, "", "swapaxes"], [312, 2, 1, "", "take_along_axis"], [244, 2, 1, "", "tan"], [245, 2, 1, "", "tanh"], [546, 2, 1, "", "tensordot"], [546, 2, 1, "", "tensorsolve"], [301, 2, 1, "", "thresholded_relu"], [548, 2, 1, "", "tile"], [168, 2, 1, "", "to_device"], [543, 2, 1, "", "to_ivy_shape"], [543, 2, 1, "", "to_list"], [543, 2, 1, "", "to_native_shape"], [543, 2, 1, "", "to_numpy"], [543, 2, 1, "", "to_scalar"], [312, 2, 1, "", "top_k"], [169, 2, 1, "", "total_mem_on_dev"], [170, 2, 1, "", "tpu_is_available"], [546, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [246, 2, 1, "", "trapz"], [538, 2, 1, "", "tril"], [303, 2, 1, "", "tril_indices"], [303, 2, 1, "", "trilu"], [538, 2, 1, "", "triu"], [538, 2, 1, "", "triu_indices"], [247, 2, 1, "", "trunc"], [248, 2, 1, "", "trunc_divide"], [310, 2, 1, "", "truncated_svd"], [543, 2, 1, "", "try_else_none"], [537, 2, 1, "", "try_except"], [310, 2, 1, "", "tucker"], [140, 2, 1, "", "type_promote_arrays"], [312, 2, 1, "", "unfold"], [2, 2, 1, "", "unify"], [554, 2, 1, "", "unique_all"], [312, 2, 1, "", "unique_consecutive"], [554, 2, 1, "", "unique_counts"], [554, 2, 1, "", "unique_inverse"], [554, 2, 1, "", "unique_values"], [317, 2, 1, "", "unravel_index"], [543, 2, 1, "", "unset_array_mode"], [141, 2, 1, "", "unset_default_complex_dtype"], [171, 2, 1, "", "unset_default_device"], [142, 2, 1, "", "unset_default_dtype"], [143, 2, 1, "", "unset_default_float_dtype"], [144, 2, 1, "", "unset_default_int_dtype"], [145, 2, 1, "", "unset_default_uint_dtype"], [543, 2, 1, "", "unset_exception_trace_mode"], [543, 2, 1, "", "unset_inplace_mode"], [543, 2, 1, "", "unset_min_base"], [543, 2, 1, "", "unset_min_denominator"], [543, 2, 1, "", "unset_nestable_mode"], [543, 2, 1, "", "unset_precise_mode"], [543, 2, 1, "", "unset_queue_timeout"], [543, 2, 1, "", "unset_shape_array_mode"], [543, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [172, 2, 1, "", "unset_soft_device_mode"], [543, 2, 1, "", "unset_tmp_dir"], [303, 2, 1, "", "unsorted_segment_min"], [303, 2, 1, "", "unsorted_segment_sum"], [548, 2, 1, "", "unstack"], [173, 2, 1, "", "used_mem_on_dev"], [146, 2, 1, "", "valid_dtype"], [544, 2, 1, "", "value_and_grad"], [543, 2, 1, "", "value_is_nan"], [546, 2, 1, "", "vander"], [556, 2, 1, "", "var"], [546, 2, 1, "", "vecdot"], [546, 2, 1, "", "vector_norm"], [546, 2, 1, "", "vector_to_skew_symmetric_matrix"], [543, 2, 1, "", "vmap"], [303, 2, 1, "", "vorbis_window"], [312, 2, 1, "", "vsplit"], [312, 2, 1, "", "vstack"], [553, 2, 1, "", "where"], [537, 2, 1, "", "while_loop"], [297, 2, 1, "", "xlogy"], [548, 2, 1, "", "zero_pad"], [538, 2, 1, "", "zeros"], [538, 2, 1, "", "zeros_like"], [298, 2, 1, "", "zeta"]], "ivy.Container": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [524, 0, 1, "", "adam_step"], [525, 0, 1, "", "adam_update"], [323, 0, 1, "", "adaptive_avg_pool1d"], [324, 0, 1, "", "adaptive_avg_pool2d"], [325, 0, 1, "", "adaptive_max_pool2d"], [177, 0, 1, "", "add"], [353, 0, 1, "", "adjoint"], [674, 0, 1, "", "all"], [444, 0, 1, "", "all_equal"], [274, 0, 1, "", "allclose"], [178, 0, 1, "", "angle"], [675, 0, 1, "", "any"], [651, 0, 1, "", "argmax"], [652, 0, 1, "", "argmin"], [660, 0, 1, "", "argsort"], [653, 0, 1, "", "argwhere"], [447, 0, 1, "", "array_equal"], [378, 0, 1, "", "as_strided"], [78, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [448, 0, 1, "", "assert_supports_inplace"], [379, 0, 1, "", "associative_scan"], [106, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [380, 0, 1, "", "atleast_1d"], [381, 0, 1, "", "atleast_2d"], [382, 0, 1, "", "atleast_3d"], [327, 0, 1, "", "avg_pool1d"], [328, 0, 1, "", "avg_pool2d"], [329, 0, 1, "", "avg_pool3d"], [414, 0, 1, "", "batch_norm"], [420, 0, 1, "", "bernoulli"], [421, 0, 1, "", "beta"], [275, 0, 1, "", "binarizer"], [603, 0, 1, "", "binary_cross_entropy"], [432, 0, 1, "", "bincount"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [258, 0, 1, "", "blackman_window"], [107, 0, 1, "", "broadcast_arrays"], [383, 0, 1, "", "broadcast_shapes"], [108, 0, 1, "", "broadcast_to"], [109, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [573, 0, 1, "", "cholesky"], [606, 0, 1, "", "clip"], [450, 0, 1, "", "clip_matrix_norm"], [451, 0, 1, "", "clip_vector_norm"], [607, 0, 1, "", "concat"], [385, 0, 1, "", "concat_from_sequence"], [354, 0, 1, "", "cond"], [276, 0, 1, "", "conj"], [608, 0, 1, "", "constant_pad"], [559, 0, 1, "", "conv1d"], [560, 0, 1, "", "conv1d_transpose"], [561, 0, 1, "", "conv2d"], [562, 0, 1, "", "conv2d_transpose"], [563, 0, 1, "", "conv3d"], [564, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "copy_array"], [277, 0, 1, "", "copysign"], [433, 0, 1, "", "corrcoef"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [278, 0, 1, "", "count_nonzero"], [434, 0, 1, "", "cov"], [574, 0, 1, "", "cross"], [604, 0, 1, "", "cross_entropy"], [435, 0, 1, "", "cummax"], [436, 0, 1, "", "cummin"], [664, 0, 1, "", "cumprod"], [665, 0, 1, "", "cumsum"], [330, 0, 1, "", "dct"], [193, 0, 1, "", "deg2rad"], [567, 0, 1, "", "depthwise_conv2d"], [575, 0, 1, "", "det"], [151, 0, 1, "", "dev"], [331, 0, 1, "", "dft"], [576, 0, 1, "", "diag"], [355, 0, 1, "", "diagflat"], [577, 0, 1, "", "diagonal"], [279, 0, 1, "", "diff"], [280, 0, 1, "", "digamma"], [422, 0, 1, "", "dirichlet"], [194, 0, 1, "", "divide"], [356, 0, 1, "", "dot"], [568, 0, 1, "", "dropout"], [332, 0, 1, "", "dropout1d"], [333, 0, 1, "", "dropout2d"], [334, 0, 1, "", "dropout3d"], [386, 0, 1, "", "dsplit"], [387, 0, 1, "", "dstack"], [117, 0, 1, "", "dtype"], [357, 0, 1, "", "eig"], [579, 0, 1, "", "eigh"], [358, 0, 1, "", "eigh_tridiagonal"], [359, 0, 1, "", "eigvals"], [580, 0, 1, "", "eigvalsh"], [455, 0, 1, "", "einops_rearrange"], [456, 0, 1, "", "einops_reduce"], [457, 0, 1, "", "einops_repeat"], [666, 0, 1, "", "einsum"], [249, 0, 1, "", "elu"], [335, 0, 1, "", "embedding"], [86, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [197, 0, 1, "", "exp"], [198, 0, 1, "", "exp2"], [388, 0, 1, "", "expand"], [609, 0, 1, "", "expand_dims"], [199, 0, 1, "", "expm1"], [259, 0, 1, "", "eye_like"], [336, 0, 1, "", "fft"], [389, 0, 1, "", "fill_diagonal"], [119, 0, 1, "", "finfo"], [281, 0, 1, "", "fix"], [390, 0, 1, "", "flatten"], [610, 0, 1, "", "flip"], [391, 0, 1, "", "fliplr"], [392, 0, 1, "", "flipud"], [282, 0, 1, "", "float_power"], [200, 0, 1, "", "floor"], [201, 0, 1, "", "floor_divide"], [283, 0, 1, "", "fmax"], [202, 0, 1, "", "fmin"], [203, 0, 1, "", "fmod"], [393, 0, 1, "", "fold"], [459, 0, 1, "", "fourier_encode"], [284, 0, 1, "", "frexp"], [88, 0, 1, "", "from_dlpack"], [89, 0, 1, "", "frombuffer"], [91, 0, 1, "", "full_like"], [423, 0, 1, "", "gamma"], [462, 0, 1, "", "gather"], [463, 0, 1, "", "gather_nd"], [204, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [466, 0, 1, "", "get_num_dims"], [285, 0, 1, "", "gradient"], [528, 0, 1, "", "gradient_descent_update"], [205, 0, 1, "", "greater"], [206, 0, 1, "", "greater_equal"], [415, 0, 1, "", "group_norm"], [260, 0, 1, "", "hamming_window"], [261, 0, 1, "", "hann_window"], [60, 0, 1, "", "hardswish"], [468, 0, 1, "", "has_nans"], [394, 0, 1, "", "heaviside"], [437, 0, 1, "", "histogram"], [395, 0, 1, "", "hsplit"], [396, 0, 1, "", "hstack"], [373, 0, 1, "", "huber_loss"], [286, 0, 1, "", "hypot"], [397, 0, 1, "", "i0"], [340, 0, 1, "", "idct"], [341, 0, 1, "", "ifft"], [342, 0, 1, "", "ifftn"], [438, 0, 1, "", "igamma"], [122, 0, 1, "", "iinfo"], [207, 0, 1, "", "imag"], [360, 0, 1, "", "initialize_tucker"], [581, 0, 1, "", "inner"], [470, 0, 1, "", "inplace_decrement"], [471, 0, 1, "", "inplace_increment"], [472, 0, 1, "", "inplace_update"], [416, 0, 1, "", "instance_norm"], [344, 0, 1, "", "interpolate"], [582, 0, 1, "", "inv"], [426, 0, 1, "", "invert_permutation"], [474, 0, 1, "", "is_array"], [125, 0, 1, "", "is_bool_dtype"], [126, 0, 1, "", "is_complex_dtype"], [127, 0, 1, "", "is_float_dtype"], [129, 0, 1, "", "is_int_dtype"], [475, 0, 1, "", "is_ivy_array"], [478, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [287, 0, 1, "", "isclose"], [208, 0, 1, "", "isfinite"], [479, 0, 1, "", "isin"], [209, 0, 1, "", "isinf"], [210, 0, 1, "", "isnan"], [211, 0, 1, "", "isreal"], [481, 0, 1, "", "itemsize"], [263, 0, 1, "", "kaiser_bessel_derived_window"], [264, 0, 1, "", "kaiser_window"], [362, 0, 1, "", "kron"], [374, 0, 1, "", "l1_loss"], [417, 0, 1, "", "l1_normalize"], [418, 0, 1, "", "l2_normalize"], [530, 0, 1, "", "lamb_update"], [531, 0, 1, "", "lars_update"], [644, 0, 1, "", "layer_norm"], [212, 0, 1, "", "lcm"], [288, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [289, 0, 1, "", "lerp"], [213, 0, 1, "", "less"], [214, 0, 1, "", "less_equal"], [427, 0, 1, "", "lexsort"], [569, 0, 1, "", "linear"], [92, 0, 1, "", "linspace"], [215, 0, 1, "", "log"], [216, 0, 1, "", "log10"], [217, 0, 1, "", "log1p"], [218, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [219, 0, 1, "", "logaddexp"], [220, 0, 1, "", "logaddexp2"], [221, 0, 1, "", "logical_and"], [222, 0, 1, "", "logical_not"], [223, 0, 1, "", "logical_or"], [224, 0, 1, "", "logical_xor"], [250, 0, 1, "", "logit"], [251, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "logspace"], [419, 0, 1, "", "lp_normalize"], [570, 0, 1, "", "lstm_update"], [364, 0, 1, "", "make_svd_non_negative"], [584, 0, 1, "", "matmul"], [398, 0, 1, "", "matricize"], [365, 0, 1, "", "matrix_exp"], [585, 0, 1, "", "matrix_norm"], [586, 0, 1, "", "matrix_power"], [587, 0, 1, "", "matrix_rank"], [588, 0, 1, "", "matrix_transpose"], [667, 0, 1, "", "max"], [345, 0, 1, "", "max_pool1d"], [346, 0, 1, "", "max_pool2d"], [347, 0, 1, "", "max_pool3d"], [225, 0, 1, "", "maximum"], [668, 0, 1, "", "mean"], [439, 0, 1, "", "median"], [94, 0, 1, "", "meshgrid"], [669, 0, 1, "", "min"], [226, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [366, 0, 1, "", "mode_dot"], [291, 0, 1, "", "modf"], [399, 0, 1, "", "moveaxis"], [661, 0, 1, "", "msort"], [367, 0, 1, "", "multi_dot"], [571, 0, 1, "", "multi_head_attention"], [368, 0, 1, "", "multi_mode_dot"], [645, 0, 1, "", "multinomial"], [227, 0, 1, "", "multiply"], [228, 0, 1, "", "nan_to_num"], [440, 0, 1, "", "nanmean"], [441, 0, 1, "", "nanmedian"], [292, 0, 1, "", "nansum"], [95, 0, 1, "", "native_array"], [229, 0, 1, "", "negative"], [293, 0, 1, "", "nextafter"], [654, 0, 1, "", "nonzero"], [230, 0, 1, "", "not_equal"], [96, 0, 1, "", "one_hot"], [98, 0, 1, "", "ones_like"], [532, 0, 1, "", "optimizer_update"], [443, 0, 1, "", "optional_get_element"], [589, 0, 1, "", "outer"], [400, 0, 1, "", "pad"], [401, 0, 1, "", "partial_fold"], [402, 0, 1, "", "partial_tensor_to_vec"], [369, 0, 1, "", "partial_tucker"], [403, 0, 1, "", "partial_unfold"], [404, 0, 1, "", "partial_vec_to_tensor"], [611, 0, 1, "", "permute_dims"], [590, 0, 1, "", "pinv"], [424, 0, 1, "", "poisson"], [231, 0, 1, "", "positive"], [232, 0, 1, "", "pow"], [252, 0, 1, "", "prelu"], [670, 0, 1, "", "prod"], [591, 0, 1, "", "qr"], [442, 0, 1, "", "quantile"], [233, 0, 1, "", "rad2deg"], [646, 0, 1, "", "randint"], [647, 0, 1, "", "random_normal"], [648, 0, 1, "", "random_uniform"], [234, 0, 1, "", "real"], [235, 0, 1, "", "reciprocal"], [299, 0, 1, "", "reduce"], [351, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [253, 0, 1, "", "relu6"], [236, 0, 1, "", "remainder"], [612, 0, 1, "", "repeat"], [613, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [352, 0, 1, "", "rfftn"], [614, 0, 1, "", "roll"], [406, 0, 1, "", "rot90"], [237, 0, 1, "", "round"], [572, 0, 1, "", "scaled_dot_product_attention"], [486, 0, 1, "", "scatter_flat"], [487, 0, 1, "", "scatter_nd"], [662, 0, 1, "", "searchsorted"], [254, 0, 1, "", "selu"], [650, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [238, 0, 1, "", "sign"], [294, 0, 1, "", "signbit"], [256, 0, 1, "", "silu"], [239, 0, 1, "", "sin"], [295, 0, 1, "", "sinc"], [240, 0, 1, "", "sinh"], [592, 0, 1, "", "slogdet"], [376, 0, 1, "", "smooth_l1_loss"], [377, 0, 1, "", "soft_margin_loss"], [407, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [593, 0, 1, "", "solve"], [663, 0, 1, "", "sort"], [605, 0, 1, "", "sparse_cross_entropy"], [296, 0, 1, "", "sparsify_tensor"], [615, 0, 1, "", "split"], [241, 0, 1, "", "sqrt"], [242, 0, 1, "", "square"], [616, 0, 1, "", "squeeze"], [501, 0, 1, "", "stable_divide"], [502, 0, 1, "", "stable_pow"], [617, 0, 1, "", "stack"], [671, 0, 1, "", "std"], [533, 0, 1, "", "stop_gradient"], [503, 0, 1, "", "strides"], [243, 0, 1, "", "subtract"], [672, 0, 1, "", "sum"], [504, 0, 1, "", "supports_inplace_updates"], [594, 0, 1, "", "svd"], [370, 0, 1, "", "svd_flip"], [595, 0, 1, "", "svdvals"], [618, 0, 1, "", "swapaxes"], [408, 0, 1, "", "take_along_axis"], [244, 0, 1, "", "tan"], [245, 0, 1, "", "tanh"], [596, 0, 1, "", "tensordot"], [597, 0, 1, "", "tensorsolve"], [257, 0, 1, "", "thresholded_relu"], [619, 0, 1, "", "tile"], [168, 0, 1, "", "to_device"], [506, 0, 1, "", "to_list"], [508, 0, 1, "", "to_numpy"], [509, 0, 1, "", "to_scalar"], [409, 0, 1, "", "top_k"], [598, 0, 1, "", "trace"], [246, 0, 1, "", "trapz"], [99, 0, 1, "", "tril"], [269, 0, 1, "", "tril_indices"], [270, 0, 1, "", "trilu"], [100, 0, 1, "", "triu"], [101, 0, 1, "", "triu_indices"], [247, 0, 1, "", "trunc"], [248, 0, 1, "", "trunc_divide"], [371, 0, 1, "", "truncated_svd"], [372, 0, 1, "", "tucker"], [410, 0, 1, "", "unfold"], [656, 0, 1, "", "unique_all"], [411, 0, 1, "", "unique_consecutive"], [657, 0, 1, "", "unique_counts"], [658, 0, 1, "", "unique_inverse"], [659, 0, 1, "", "unique_values"], [425, 0, 1, "", "unravel_index"], [271, 0, 1, "", "unsorted_segment_min"], [272, 0, 1, "", "unsorted_segment_sum"], [620, 0, 1, "", "unstack"], [522, 0, 1, "", "value_is_nan"], [599, 0, 1, "", "vander"], [673, 0, 1, "", "var"], [600, 0, 1, "", "vecdot"], [601, 0, 1, "", "vector_norm"], [602, 0, 1, "", "vector_to_skew_symmetric_matrix"], [273, 0, 1, "", "vorbis_window"], [412, 0, 1, "", "vsplit"], [413, 0, 1, "", "vstack"], [655, 0, 1, "", "where"], [297, 0, 1, "", "xlogy"], [621, 0, 1, "", "zero_pad"], [103, 0, 1, "", "zeros_like"], [298, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[3, 3, 0, "-", "activations"], [51, 3, 0, "-", "array"], [4, 3, 0, "-", "conversions"], [5, 3, 0, "-", "creation"], [6, 3, 0, "-", "data_type"], [7, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "experimental"], [10, 3, 0, "-", "general"], [11, 3, 0, "-", "gradients"], [12, 3, 0, "-", "image"], [13, 3, 0, "-", "layers"], [14, 3, 0, "-", "linear_algebra"], [15, 3, 0, "-", "losses"], [16, 3, 0, "-", "manipulation"], [17, 3, 0, "-", "norms"], [18, 3, 0, "-", "random"], [19, 3, 0, "-", "searching"], [20, 3, 0, "-", "set"], [21, 3, 0, "-", "sorting"], [22, 3, 0, "-", "statistical"], [23, 3, 0, "-", "utility"], [24, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[3, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "gelu"], [3, 0, 1, "", "hardswish"], [3, 0, 1, "", "leaky_relu"], [3, 0, 1, "", "log_softmax"], [3, 0, 1, "", "mish"], [3, 0, 1, "", "relu"], [3, 0, 1, "", "sigmoid"], [3, 0, 1, "", "softmax"], [3, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[51, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[51, 5, 1, "", "T"], [51, 0, 1, "", "__abs__"], [51, 0, 1, "", "__add__"], [51, 0, 1, "", "__eq__"], [51, 0, 1, "", "__ge__"], [51, 0, 1, "", "__gt__"], [51, 0, 1, "", "__init__"], [51, 0, 1, "", "__le__"], [51, 0, 1, "", "__lt__"], [51, 0, 1, "", "__ne__"], [51, 0, 1, "", "__pow__"], [51, 0, 1, "", "__radd__"], [51, 0, 1, "", "__rrshift__"], [51, 0, 1, "", "__rshift__"], [51, 0, 1, "", "__rsub__"], [51, 0, 1, "", "__sub__"], [51, 0, 1, "", "__truediv__"], [51, 0, 1, "", "__xor__"], [51, 5, 1, "", "backend"], [51, 5, 1, "", "base"], [51, 5, 1, "", "data"], [51, 5, 1, "", "device"], [51, 5, 1, "", "dtype"], [51, 5, 1, "", "dynamic_backend"], [51, 5, 1, "", "imag"], [51, 5, 1, "", "itemsize"], [51, 5, 1, "", "mT"], [51, 5, 1, "", "ndim"], [51, 5, 1, "", "real"], [51, 5, 1, "", "shape"], [51, 5, 1, "", "size"], [51, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[4, 2, 1, "", "_to_ivy"], [4, 2, 1, "", "_to_native"], [4, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [4, 2, 1, "", "to_ivy"], [4, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[5, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "asarray"], [5, 0, 1, "", "copy_array"], [5, 0, 1, "", "empty_like"], [5, 0, 1, "", "from_dlpack"], [5, 0, 1, "", "full_like"], [5, 0, 1, "", "linspace"], [5, 0, 1, "", "logspace"], [5, 0, 1, "", "meshgrid"], [5, 0, 1, "", "native_array"], [5, 0, 1, "", "one_hot"], [5, 0, 1, "", "ones_like"], [5, 0, 1, "", "tril"], [5, 0, 1, "", "triu"], [5, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[6, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "astype"], [6, 0, 1, "", "broadcast_arrays"], [6, 0, 1, "", "broadcast_to"], [6, 0, 1, "", "can_cast"], [6, 0, 1, "", "dtype"], [6, 0, 1, "", "finfo"], [6, 0, 1, "", "iinfo"], [6, 0, 1, "", "is_bool_dtype"], [6, 0, 1, "", "is_float_dtype"], [6, 0, 1, "", "is_int_dtype"], [6, 0, 1, "", "is_uint_dtype"], [6, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[7, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "dev"], [7, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[8, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "abs"], [8, 0, 1, "", "acos"], [8, 0, 1, "", "acosh"], [8, 0, 1, "", "add"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "asin"], [8, 0, 1, "", "asinh"], [8, 0, 1, "", "atan"], [8, 0, 1, "", "atan2"], [8, 0, 1, "", "atanh"], [8, 0, 1, "", "bitwise_and"], [8, 0, 1, "", "bitwise_invert"], [8, 0, 1, "", "bitwise_left_shift"], [8, 0, 1, "", "bitwise_or"], [8, 0, 1, "", "bitwise_right_shift"], [8, 0, 1, "", "bitwise_xor"], [8, 0, 1, "", "ceil"], [8, 0, 1, "", "cos"], [8, 0, 1, "", "cosh"], [8, 0, 1, "", "deg2rad"], [8, 0, 1, "", "divide"], [8, 0, 1, "", "equal"], [8, 0, 1, "", "erf"], [8, 0, 1, "", "exp"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "expm1"], [8, 0, 1, "", "floor"], [8, 0, 1, "", "floor_divide"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "greater"], [8, 0, 1, "", "greater_equal"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isfinite"], [8, 0, 1, "", "isinf"], [8, 0, 1, "", "isnan"], [8, 0, 1, "", "isreal"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "less"], [8, 0, 1, "", "less_equal"], [8, 0, 1, "", "log"], [8, 0, 1, "", "log10"], [8, 0, 1, "", "log1p"], [8, 0, 1, "", "log2"], [8, 0, 1, "", "logaddexp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "logical_and"], [8, 0, 1, "", "logical_not"], [8, 0, 1, "", "logical_or"], [8, 0, 1, "", "logical_xor"], [8, 0, 1, "", "maximum"], [8, 0, 1, "", "minimum"], [8, 0, 1, "", "multiply"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "negative"], [8, 0, 1, "", "not_equal"], [8, 0, 1, "", "positive"], [8, 0, 1, "", "pow"], [8, 0, 1, "", "rad2deg"], [8, 0, 1, "", "real"], [8, 0, 1, "", "reciprocal"], [8, 0, 1, "", "remainder"], [8, 0, 1, "", "round"], [8, 0, 1, "", "sign"], [8, 0, 1, "", "sin"], [8, 0, 1, "", "sinh"], [8, 0, 1, "", "sqrt"], [8, 0, 1, "", "square"], [8, 0, 1, "", "subtract"], [8, 0, 1, "", "tan"], [8, 0, 1, "", "tanh"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "trunc"], [8, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[9, 3, 0, "-", "activations"], [9, 3, 0, "-", "conversions"], [9, 3, 0, "-", "creation"], [9, 3, 0, "-", "data_type"], [9, 3, 0, "-", "device"], [9, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "general"], [9, 3, 0, "-", "gradients"], [9, 3, 0, "-", "image"], [9, 3, 0, "-", "layers"], [9, 3, 0, "-", "linear_algebra"], [9, 3, 0, "-", "losses"], [9, 3, 0, "-", "manipulation"], [9, 3, 0, "-", "norms"], [9, 3, 0, "-", "random"], [9, 3, 0, "-", "searching"], [9, 3, 0, "-", "set"], [9, 3, 0, "-", "sorting"], [9, 3, 0, "-", "statistical"], [9, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[9, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "elu"], [9, 0, 1, "", "logit"], [9, 0, 1, "", "logsigmoid"], [9, 0, 1, "", "prelu"], [9, 0, 1, "", "relu6"], [9, 0, 1, "", "selu"], [9, 0, 1, "", "silu"], [9, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[9, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[9, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "blackman_window"], [9, 0, 1, "", "eye_like"], [9, 0, 1, "", "trilu"], [9, 0, 1, "", "unsorted_segment_min"], [9, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[9, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[9, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[9, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "allclose"], [9, 0, 1, "", "binarizer"], [9, 0, 1, "", "conj"], [9, 0, 1, "", "copysign"], [9, 0, 1, "", "count_nonzero"], [9, 0, 1, "", "diff"], [9, 0, 1, "", "digamma"], [9, 0, 1, "", "fix"], [9, 0, 1, "", "float_power"], [9, 0, 1, "", "fmax"], [9, 0, 1, "", "fmod"], [9, 0, 1, "", "frexp"], [9, 0, 1, "", "gradient"], [9, 0, 1, "", "hypot"], [9, 0, 1, "", "isclose"], [9, 0, 1, "", "ldexp"], [9, 0, 1, "", "lerp"], [9, 0, 1, "", "lgamma"], [9, 0, 1, "", "modf"], [9, 0, 1, "", "nansum"], [9, 0, 1, "", "nextafter"], [9, 0, 1, "", "signbit"], [9, 0, 1, "", "sinc"], [9, 0, 1, "", "sparsify_tensor"], [9, 0, 1, "", "xlogy"], [9, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[9, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[9, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[9, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[9, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adaptive_avg_pool1d"], [9, 0, 1, "", "adaptive_avg_pool2d"], [9, 0, 1, "", "adaptive_max_pool2d"], [9, 0, 1, "", "avg_pool1d"], [9, 0, 1, "", "avg_pool2d"], [9, 0, 1, "", "avg_pool3d"], [9, 0, 1, "", "dct"], [9, 0, 1, "", "dft"], [9, 0, 1, "", "embedding"], [9, 0, 1, "", "fft"], [9, 0, 1, "", "fft2"], [9, 0, 1, "", "idct"], [9, 0, 1, "", "ifft"], [9, 0, 1, "", "ifftn"], [9, 0, 1, "", "interpolate"], [9, 0, 1, "", "max_pool1d"], [9, 0, 1, "", "max_pool2d"], [9, 0, 1, "", "max_pool3d"], [9, 0, 1, "", "reduce_window"], [9, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adjoint"], [9, 0, 1, "", "cond"], [9, 0, 1, "", "diagflat"], [9, 0, 1, "", "dot"], [9, 0, 1, "", "eig"], [9, 0, 1, "", "eigh_tridiagonal"], [9, 0, 1, "", "eigvals"], [9, 0, 1, "", "initialize_tucker"], [9, 0, 1, "", "kron"], [9, 0, 1, "", "make_svd_non_negative"], [9, 0, 1, "", "matrix_exp"], [9, 0, 1, "", "mode_dot"], [9, 0, 1, "", "multi_dot"], [9, 0, 1, "", "multi_mode_dot"], [9, 0, 1, "", "partial_tucker"], [9, 0, 1, "", "svd_flip"], [9, 0, 1, "", "truncated_svd"], [9, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[9, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "huber_loss"], [9, 0, 1, "", "l1_loss"], [9, 0, 1, "", "smooth_l1_loss"], [9, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[9, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "as_strided"], [9, 0, 1, "", "associative_scan"], [9, 0, 1, "", "atleast_1d"], [9, 0, 1, "", "atleast_2d"], [9, 0, 1, "", "atleast_3d"], [9, 0, 1, "", "concat_from_sequence"], [9, 0, 1, "", "dsplit"], [9, 0, 1, "", "dstack"], [9, 0, 1, "", "expand"], [9, 0, 1, "", "fill_diagonal"], [9, 0, 1, "", "flatten"], [9, 0, 1, "", "fliplr"], [9, 0, 1, "", "flipud"], [9, 0, 1, "", "fold"], [9, 0, 1, "", "heaviside"], [9, 0, 1, "", "hsplit"], [9, 0, 1, "", "hstack"], [9, 0, 1, "", "i0"], [9, 0, 1, "", "matricize"], [9, 0, 1, "", "moveaxis"], [9, 0, 1, "", "pad"], [9, 0, 1, "", "partial_fold"], [9, 0, 1, "", "partial_tensor_to_vec"], [9, 0, 1, "", "partial_unfold"], [9, 0, 1, "", "partial_vec_to_tensor"], [9, 0, 1, "", "rot90"], [9, 0, 1, "", "soft_thresholding"], [9, 0, 1, "", "take_along_axis"], [9, 0, 1, "", "top_k"], [9, 0, 1, "", "unfold"], [9, 0, 1, "", "unique_consecutive"], [9, 0, 1, "", "vsplit"], [9, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[9, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "batch_norm"], [9, 0, 1, "", "group_norm"], [9, 0, 1, "", "instance_norm"], [9, 0, 1, "", "l1_normalize"], [9, 0, 1, "", "l2_normalize"], [9, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[9, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bernoulli"], [9, 0, 1, "", "beta"], [9, 0, 1, "", "dirichlet"], [9, 0, 1, "", "gamma"], [9, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[9, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[9, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[9, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[9, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bincount"], [9, 0, 1, "", "corrcoef"], [9, 0, 1, "", "cov"], [9, 0, 1, "", "cummax"], [9, 0, 1, "", "cummin"], [9, 0, 1, "", "histogram"], [9, 0, 1, "", "igamma"], [9, 0, 1, "", "median"], [9, 0, 1, "", "nanmean"], [9, 0, 1, "", "nanmedian"], [9, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[9, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[10, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "all_equal"], [10, 0, 1, "", "array_equal"], [10, 0, 1, "", "assert_supports_inplace"], [10, 0, 1, "", "clip_matrix_norm"], [10, 0, 1, "", "clip_vector_norm"], [10, 0, 1, "", "default"], [10, 0, 1, "", "einops_rearrange"], [10, 0, 1, "", "einops_reduce"], [10, 0, 1, "", "einops_repeat"], [10, 0, 1, "", "exists"], [10, 0, 1, "", "fourier_encode"], [10, 0, 1, "", "gather"], [10, 0, 1, "", "gather_nd"], [10, 0, 1, "", "get_num_dims"], [10, 0, 1, "", "has_nans"], [10, 0, 1, "", "inplace_decrement"], [10, 0, 1, "", "inplace_increment"], [10, 0, 1, "", "inplace_update"], [10, 0, 1, "", "is_array"], [10, 0, 1, "", "is_ivy_array"], [10, 0, 1, "", "is_ivy_container"], [10, 0, 1, "", "is_native_array"], [10, 0, 1, "", "isin"], [10, 0, 1, "", "scatter_flat"], [10, 0, 1, "", "scatter_nd"], [10, 0, 1, "", "stable_divide"], [10, 0, 1, "", "stable_pow"], [10, 0, 1, "", "supports_inplace_updates"], [10, 0, 1, "", "to_file"], [10, 0, 1, "", "to_list"], [10, 0, 1, "", "to_numpy"], [10, 0, 1, "", "to_scalar"], [10, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[11, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "adam_step"], [11, 0, 1, "", "adam_update"], [11, 0, 1, "", "gradient_descent_update"], [11, 0, 1, "", "lamb_update"], [11, 0, 1, "", "lars_update"], [11, 0, 1, "", "optimizer_update"], [11, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[12, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[13, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "conv1d"], [13, 0, 1, "", "conv1d_transpose"], [13, 0, 1, "", "conv2d"], [13, 0, 1, "", "conv2d_transpose"], [13, 0, 1, "", "conv3d"], [13, 0, 1, "", "conv3d_transpose"], [13, 0, 1, "", "depthwise_conv2d"], [13, 0, 1, "", "dropout"], [13, 0, 1, "", "dropout1d"], [13, 0, 1, "", "dropout2d"], [13, 0, 1, "", "dropout3d"], [13, 0, 1, "", "linear"], [13, 0, 1, "", "lstm_update"], [13, 0, 1, "", "multi_head_attention"], [13, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[14, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "cholesky"], [14, 0, 1, "", "cross"], [14, 0, 1, "", "det"], [14, 0, 1, "", "diag"], [14, 0, 1, "", "diagonal"], [14, 0, 1, "", "eig"], [14, 0, 1, "", "eigh"], [14, 0, 1, "", "eigvalsh"], [14, 0, 1, "", "inner"], [14, 0, 1, "", "inv"], [14, 0, 1, "", "matmul"], [14, 0, 1, "", "matrix_norm"], [14, 0, 1, "", "matrix_power"], [14, 0, 1, "", "matrix_rank"], [14, 0, 1, "", "matrix_transpose"], [14, 0, 1, "", "outer"], [14, 0, 1, "", "pinv"], [14, 0, 1, "", "qr"], [14, 0, 1, "", "slogdet"], [14, 0, 1, "", "solve"], [14, 0, 1, "", "svd"], [14, 0, 1, "", "svdvals"], [14, 0, 1, "", "tensordot"], [14, 0, 1, "", "tensorsolve"], [14, 0, 1, "", "trace"], [14, 0, 1, "", "vander"], [14, 0, 1, "", "vecdot"], [14, 0, 1, "", "vector_norm"], [14, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[15, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "binary_cross_entropy"], [15, 0, 1, "", "cross_entropy"], [15, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[16, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "clip"], [16, 0, 1, "", "concat"], [16, 0, 1, "", "constant_pad"], [16, 0, 1, "", "expand_dims"], [16, 0, 1, "", "flip"], [16, 0, 1, "", "permute_dims"], [16, 0, 1, "", "repeat"], [16, 0, 1, "", "reshape"], [16, 0, 1, "", "roll"], [16, 0, 1, "", "split"], [16, 0, 1, "", "squeeze"], [16, 0, 1, "", "stack"], [16, 0, 1, "", "swapaxes"], [16, 0, 1, "", "tile"], [16, 0, 1, "", "unstack"], [16, 0, 1, "", "view"], [16, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[17, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[18, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "multinomial"], [18, 0, 1, "", "randint"], [18, 0, 1, "", "random_normal"], [18, 0, 1, "", "random_uniform"], [18, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[19, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "argmax"], [19, 0, 1, "", "argmin"], [19, 0, 1, "", "argwhere"], [19, 0, 1, "", "nonzero"], [19, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[20, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "unique_all"], [20, 0, 1, "", "unique_counts"], [20, 0, 1, "", "unique_inverse"], [20, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[21, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "argsort"], [21, 0, 1, "", "msort"], [21, 0, 1, "", "searchsorted"], [21, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[22, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "cumprod"], [22, 0, 1, "", "cumsum"], [22, 0, 1, "", "einsum"], [22, 0, 1, "", "max"], [22, 0, 1, "", "mean"], [22, 0, 1, "", "min"], [22, 0, 1, "", "prod"], [22, 0, 1, "", "std"], [22, 0, 1, "", "sum"], [22, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[23, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "all"], [23, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[24, 2, 1, "", "_wrap_function"], [24, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[25, 3, 0, "-", "activations"], [26, 3, 0, "-", "base"], [52, 3, 0, "-", "container"], [27, 3, 0, "-", "conversions"], [28, 3, 0, "-", "creation"], [29, 3, 0, "-", "data_type"], [30, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "experimental"], [33, 3, 0, "-", "general"], [34, 3, 0, "-", "gradients"], [35, 3, 0, "-", "image"], [36, 3, 0, "-", "layers"], [37, 3, 0, "-", "linear_algebra"], [38, 3, 0, "-", "losses"], [39, 3, 0, "-", "manipulation"], [40, 3, 0, "-", "norms"], [41, 3, 0, "-", "random"], [42, 3, 0, "-", "searching"], [43, 3, 0, "-", "set"], [44, 3, 0, "-", "sorting"], [45, 3, 0, "-", "statistical"], [46, 3, 0, "-", "utility"], [47, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[25, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_gelu"], [25, 0, 1, "", "_static_hardswish"], [25, 0, 1, "", "_static_leaky_relu"], [25, 0, 1, "", "_static_log_softmax"], [25, 0, 1, "", "_static_mish"], [25, 0, 1, "", "_static_relu"], [25, 0, 1, "", "_static_sigmoid"], [25, 0, 1, "", "_static_softmax"], [25, 0, 1, "", "_static_softplus"], [25, 0, 1, "", "gelu"], [25, 0, 1, "", "hardswish"], [25, 0, 1, "", "leaky_relu"], [25, 0, 1, "", "log_softmax"], [25, 0, 1, "", "mish"], [25, 0, 1, "", "relu"], [25, 0, 1, "", "sigmoid"], [25, 0, 1, "", "softmax"], [25, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[26, 1, 1, "", "ContainerBase"], [26, 2, 1, "", "_is_jsonable"], [26, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[26, 0, 1, "", "__getitem__"], [26, 0, 1, "", "__init__"], [26, 0, 1, "", "__setitem__"], [26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [26, 0, 1, "", "_cont_concat_unify"], [26, 0, 1, "", "_cont_get_dev"], [26, 0, 1, "", "_cont_get_shape"], [26, 0, 1, "", "_cont_get_shapes"], [26, 5, 1, "", "_cont_ivy"], [26, 0, 1, "", "_cont_mean_unify"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_slice_keys"], [26, 0, 1, "", "_cont_sum_unify"], [26, 0, 1, "", "_get_queue_item"], [26, 0, 1, "", "cont_all_false"], [26, 0, 1, "", "cont_all_key_chains"], [26, 0, 1, "", "cont_all_true"], [26, 0, 1, "", "cont_as_bools"], [26, 0, 1, "", "cont_assert_contains_sub_container"], [26, 0, 1, "", "cont_assert_contains_sub_structure"], [26, 0, 1, "", "cont_assert_identical"], [26, 0, 1, "", "cont_assert_identical_structure"], [26, 0, 1, "", "cont_at_key_chain"], [26, 0, 1, "", "cont_at_key_chains"], [26, 0, 1, "", "cont_at_keys"], [26, 0, 1, "", "cont_combine"], [26, 0, 1, "", "cont_common_key_chains"], [26, 5, 1, "", "cont_config"], [26, 0, 1, "", "cont_contains_sub_container"], [26, 0, 1, "", "cont_contains_sub_structure"], [26, 0, 1, "", "cont_copy"], [26, 0, 1, "", "cont_create_if_absent"], [26, 0, 1, "", "cont_cutoff_at_depth"], [26, 0, 1, "", "cont_cutoff_at_height"], [26, 0, 1, "", "cont_deep_copy"], [26, 5, 1, "", "cont_dev"], [26, 5, 1, "", "cont_dev_str"], [26, 0, 1, "", "cont_diff"], [26, 0, 1, "", "cont_duplicate_array_keychains"], [26, 0, 1, "", "cont_find_sub_container"], [26, 0, 1, "", "cont_find_sub_structure"], [26, 0, 1, "", "cont_flatten_key_chain"], [26, 0, 1, "", "cont_flatten_key_chains"], [26, 0, 1, "", "cont_format_key_chains"], [26, 0, 1, "", "cont_from_disk_as_hdf5"], [26, 0, 1, "", "cont_from_disk_as_json"], [26, 0, 1, "", "cont_from_disk_as_pickled"], [26, 0, 1, "", "cont_from_flat_list"], [26, 0, 1, "", "cont_handle_inplace"], [26, 0, 1, "", "cont_has_key"], [26, 0, 1, "", "cont_has_key_chain"], [26, 0, 1, "", "cont_identical"], [26, 0, 1, "", "cont_identical_array_shapes"], [26, 0, 1, "", "cont_identical_configs"], [26, 0, 1, "", "cont_identical_structure"], [26, 0, 1, "", "cont_if_exists"], [26, 0, 1, "", "cont_inplace_update"], [26, 5, 1, "", "cont_ivy"], [26, 0, 1, "", "cont_key_chains_containing"], [26, 0, 1, "", "cont_list_join"], [26, 0, 1, "", "cont_list_stack"], [26, 0, 1, "", "cont_load"], [26, 0, 1, "", "cont_map"], [26, 0, 1, "", "cont_map_sub_conts"], [26, 5, 1, "", "cont_max_depth"], [26, 0, 1, "", "cont_multi_map"], [26, 0, 1, "", "cont_multi_map_in_function"], [26, 0, 1, "", "cont_num_arrays"], [26, 0, 1, "", "cont_overwrite_at_key_chain"], [26, 0, 1, "", "cont_overwrite_at_key_chains"], [26, 0, 1, "", "cont_prune_empty"], [26, 0, 1, "", "cont_prune_key_chain"], [26, 0, 1, "", "cont_prune_key_chains"], [26, 0, 1, "", "cont_prune_key_from_key_chains"], [26, 0, 1, "", "cont_prune_keys"], [26, 0, 1, "", "cont_prune_keys_from_key_chains"], [26, 0, 1, "", "cont_reduce"], [26, 0, 1, "", "cont_remove_key_length_limit"], [26, 0, 1, "", "cont_remove_print_limit"], [26, 0, 1, "", "cont_reshape_like"], [26, 0, 1, "", "cont_restructure"], [26, 0, 1, "", "cont_restructure_key_chains"], [26, 0, 1, "", "cont_save"], [26, 0, 1, "", "cont_set_at_key_chain"], [26, 0, 1, "", "cont_set_at_key_chains"], [26, 0, 1, "", "cont_set_at_keys"], [26, 5, 1, "", "cont_shape"], [26, 5, 1, "", "cont_shapes"], [26, 0, 1, "", "cont_show"], [26, 0, 1, "", "cont_show_sub_container"], [26, 0, 1, "", "cont_size_ordered_arrays"], [26, 0, 1, "", "cont_slice_keys"], [26, 0, 1, "", "cont_slice_via_key"], [26, 0, 1, "", "cont_sort_by_key"], [26, 0, 1, "", "cont_structural_diff"], [26, 0, 1, "", "cont_to_dict"], [26, 0, 1, "", "cont_to_disk_as_hdf5"], [26, 0, 1, "", "cont_to_disk_as_json"], [26, 0, 1, "", "cont_to_disk_as_pickled"], [26, 0, 1, "", "cont_to_flat_list"], [26, 0, 1, "", "cont_to_iterator"], [26, 0, 1, "", "cont_to_iterator_keys"], [26, 0, 1, "", "cont_to_iterator_values"], [26, 0, 1, "", "cont_to_jsonable"], [26, 0, 1, "", "cont_to_nested_list"], [26, 0, 1, "", "cont_to_raw"], [26, 0, 1, "", "cont_trim_key"], [26, 0, 1, "", "cont_try_kc"], [26, 0, 1, "", "cont_unify"], [26, 0, 1, "", "cont_unstack_conts"], [26, 0, 1, "", "cont_update_config"], [26, 0, 1, "", "cont_with_default_key_color"], [26, 0, 1, "", "cont_with_entries_as_lists"], [26, 0, 1, "", "cont_with_ivy_backend"], [26, 0, 1, "", "cont_with_key_length_limit"], [26, 0, 1, "", "cont_with_print_indent"], [26, 0, 1, "", "cont_with_print_limit"], [26, 0, 1, "", "cont_with_print_line_spacing"], [26, 5, 1, "", "dynamic_backend"], [26, 0, 1, "", "h5_file_size"], [26, 0, 1, "", "shuffle_h5_file"], [26, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[52, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[52, 0, 1, "", "__abs__"], [52, 0, 1, "", "__add__"], [52, 0, 1, "", "__eq__"], [52, 0, 1, "", "__ge__"], [52, 0, 1, "", "__gt__"], [52, 0, 1, "", "__init__"], [52, 0, 1, "", "__le__"], [52, 0, 1, "", "__lt__"], [52, 0, 1, "", "__ne__"], [52, 0, 1, "", "__pow__"], [52, 0, 1, "", "__radd__"], [52, 0, 1, "", "__rrshift__"], [52, 0, 1, "", "__rshift__"], [52, 0, 1, "", "__rsub__"], [52, 0, 1, "", "__sub__"], [52, 0, 1, "", "__truediv__"], [52, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[27, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_to_ivy"], [27, 0, 1, "", "_static_to_native"], [27, 0, 1, "", "to_ivy"], [27, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[28, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_arange"], [28, 0, 1, "", "_static_asarray"], [28, 0, 1, "", "_static_copy_array"], [28, 0, 1, "", "_static_empty"], [28, 0, 1, "", "_static_empty_like"], [28, 0, 1, "", "_static_eye"], [28, 0, 1, "", "_static_from_dlpack"], [28, 0, 1, "", "_static_full"], [28, 0, 1, "", "_static_full_like"], [28, 0, 1, "", "_static_linspace"], [28, 0, 1, "", "_static_logspace"], [28, 0, 1, "", "_static_meshgrid"], [28, 0, 1, "", "_static_native_array"], [28, 0, 1, "", "_static_one_hot"], [28, 0, 1, "", "_static_ones"], [28, 0, 1, "", "_static_ones_like"], [28, 0, 1, "", "_static_tril"], [28, 0, 1, "", "_static_triu"], [28, 0, 1, "", "_static_zeros"], [28, 0, 1, "", "_static_zeros_like"], [28, 0, 1, "", "asarray"], [28, 0, 1, "", "copy_array"], [28, 0, 1, "", "empty_like"], [28, 0, 1, "", "from_dlpack"], [28, 0, 1, "", "frombuffer"], [28, 0, 1, "", "full_like"], [28, 0, 1, "", "linspace"], [28, 0, 1, "", "logspace"], [28, 0, 1, "", "meshgrid"], [28, 0, 1, "", "native_array"], [28, 0, 1, "", "one_hot"], [28, 0, 1, "", "ones_like"], [28, 0, 1, "", "static_frombuffer"], [28, 0, 1, "", "static_triu_indices"], [28, 0, 1, "", "tril"], [28, 0, 1, "", "triu"], [28, 0, 1, "", "triu_indices"], [28, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[29, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_astype"], [29, 0, 1, "", "_static_broadcast_arrays"], [29, 0, 1, "", "_static_broadcast_to"], [29, 0, 1, "", "_static_can_cast"], [29, 0, 1, "", "_static_default_complex_dtype"], [29, 0, 1, "", "_static_default_float_dtype"], [29, 0, 1, "", "_static_dtype"], [29, 0, 1, "", "_static_finfo"], [29, 0, 1, "", "_static_function_supported_dtypes"], [29, 0, 1, "", "_static_function_unsupported_dtypes"], [29, 0, 1, "", "_static_iinfo"], [29, 0, 1, "", "_static_is_bool_dtype"], [29, 0, 1, "", "_static_is_complex_dtype"], [29, 0, 1, "", "_static_is_float_dtype"], [29, 0, 1, "", "_static_is_int_dtype"], [29, 0, 1, "", "_static_is_uint_dtype"], [29, 0, 1, "", "_static_result_type"], [29, 0, 1, "", "astype"], [29, 0, 1, "", "broadcast_arrays"], [29, 0, 1, "", "broadcast_to"], [29, 0, 1, "", "can_cast"], [29, 0, 1, "", "dtype"], [29, 0, 1, "", "finfo"], [29, 0, 1, "", "iinfo"], [29, 0, 1, "", "is_bool_dtype"], [29, 0, 1, "", "is_complex_dtype"], [29, 0, 1, "", "is_float_dtype"], [29, 0, 1, "", "is_int_dtype"], [29, 0, 1, "", "is_uint_dtype"], [29, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[30, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_dev"], [30, 0, 1, "", "_static_to_device"], [30, 0, 1, "", "dev"], [30, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[31, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_abs"], [31, 0, 1, "", "_static_acos"], [31, 0, 1, "", "_static_acosh"], [31, 0, 1, "", "_static_add"], [31, 0, 1, "", "_static_asin"], [31, 0, 1, "", "_static_asinh"], [31, 0, 1, "", "_static_atan"], [31, 0, 1, "", "_static_atan2"], [31, 0, 1, "", "_static_atanh"], [31, 0, 1, "", "_static_bitwise_and"], [31, 0, 1, "", "_static_bitwise_invert"], [31, 0, 1, "", "_static_bitwise_left_shift"], [31, 0, 1, "", "_static_bitwise_or"], [31, 0, 1, "", "_static_bitwise_right_shift"], [31, 0, 1, "", "_static_bitwise_xor"], [31, 0, 1, "", "_static_ceil"], [31, 0, 1, "", "_static_cos"], [31, 0, 1, "", "_static_cosh"], [31, 0, 1, "", "_static_deg2rad"], [31, 0, 1, "", "_static_divide"], [31, 0, 1, "", "_static_equal"], [31, 0, 1, "", "_static_erf"], [31, 0, 1, "", "_static_exp"], [31, 0, 1, "", "_static_expm1"], [31, 0, 1, "", "_static_floor"], [31, 0, 1, "", "_static_floor_divide"], [31, 0, 1, "", "_static_greater"], [31, 0, 1, "", "_static_greater_equal"], [31, 0, 1, "", "_static_isfinite"], [31, 0, 1, "", "_static_isinf"], [31, 0, 1, "", "_static_isnan"], [31, 0, 1, "", "_static_isreal"], [31, 0, 1, "", "_static_lcm"], [31, 0, 1, "", "_static_less"], [31, 0, 1, "", "_static_less_equal"], [31, 0, 1, "", "_static_log"], [31, 0, 1, "", "_static_log10"], [31, 0, 1, "", "_static_log1p"], [31, 0, 1, "", "_static_log2"], [31, 0, 1, "", "_static_logaddexp"], [31, 0, 1, "", "_static_logical_and"], [31, 0, 1, "", "_static_logical_not"], [31, 0, 1, "", "_static_logical_or"], [31, 0, 1, "", "_static_logical_xor"], [31, 0, 1, "", "_static_maximum"], [31, 0, 1, "", "_static_minimum"], [31, 0, 1, "", "_static_multiply"], [31, 0, 1, "", "_static_negative"], [31, 0, 1, "", "_static_not_equal"], [31, 0, 1, "", "_static_positive"], [31, 0, 1, "", "_static_pow"], [31, 0, 1, "", "_static_rad2deg"], [31, 0, 1, "", "_static_reciprocal"], [31, 0, 1, "", "_static_remainder"], [31, 0, 1, "", "_static_round"], [31, 0, 1, "", "_static_sign"], [31, 0, 1, "", "_static_sin"], [31, 0, 1, "", "_static_sinh"], [31, 0, 1, "", "_static_sqrt"], [31, 0, 1, "", "_static_square"], [31, 0, 1, "", "_static_subtract"], [31, 0, 1, "", "_static_tan"], [31, 0, 1, "", "_static_tanh"], [31, 0, 1, "", "_static_trapz"], [31, 0, 1, "", "_static_trunc"], [31, 0, 1, "", "_static_trunc_divide"], [31, 0, 1, "", "abs"], [31, 0, 1, "", "acos"], [31, 0, 1, "", "acosh"], [31, 0, 1, "", "add"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "asin"], [31, 0, 1, "", "asinh"], [31, 0, 1, "", "atan"], [31, 0, 1, "", "atan2"], [31, 0, 1, "", "atanh"], [31, 0, 1, "", "bitwise_and"], [31, 0, 1, "", "bitwise_invert"], [31, 0, 1, "", "bitwise_left_shift"], [31, 0, 1, "", "bitwise_or"], [31, 0, 1, "", "bitwise_right_shift"], [31, 0, 1, "", "bitwise_xor"], [31, 0, 1, "", "ceil"], [31, 0, 1, "", "cos"], [31, 0, 1, "", "cosh"], [31, 0, 1, "", "deg2rad"], [31, 0, 1, "", "divide"], [31, 0, 1, "", "equal"], [31, 0, 1, "", "erf"], [31, 0, 1, "", "exp"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "expm1"], [31, 0, 1, "", "floor"], [31, 0, 1, "", "floor_divide"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "greater"], [31, 0, 1, "", "greater_equal"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isfinite"], [31, 0, 1, "", "isinf"], [31, 0, 1, "", "isnan"], [31, 0, 1, "", "isreal"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "less"], [31, 0, 1, "", "less_equal"], [31, 0, 1, "", "log"], [31, 0, 1, "", "log10"], [31, 0, 1, "", "log1p"], [31, 0, 1, "", "log2"], [31, 0, 1, "", "logaddexp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "logical_and"], [31, 0, 1, "", "logical_not"], [31, 0, 1, "", "logical_or"], [31, 0, 1, "", "logical_xor"], [31, 0, 1, "", "maximum"], [31, 0, 1, "", "minimum"], [31, 0, 1, "", "multiply"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "negative"], [31, 0, 1, "", "not_equal"], [31, 0, 1, "", "positive"], [31, 0, 1, "", "pow"], [31, 0, 1, "", "rad2deg"], [31, 0, 1, "", "real"], [31, 0, 1, "", "reciprocal"], [31, 0, 1, "", "remainder"], [31, 0, 1, "", "round"], [31, 0, 1, "", "sign"], [31, 0, 1, "", "sin"], [31, 0, 1, "", "sinh"], [31, 0, 1, "", "sqrt"], [31, 0, 1, "", "square"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "subtract"], [31, 0, 1, "", "tan"], [31, 0, 1, "", "tanh"], [31, 0, 1, "", "trapz"], [31, 0, 1, "", "trunc"], [31, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[32, 3, 0, "-", "activations"], [32, 3, 0, "-", "conversions"], [32, 3, 0, "-", "creation"], [32, 3, 0, "-", "data_type"], [32, 3, 0, "-", "device"], [32, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "general"], [32, 3, 0, "-", "gradients"], [32, 3, 0, "-", "image"], [32, 3, 0, "-", "layers"], [32, 3, 0, "-", "linear_algebra"], [32, 3, 0, "-", "losses"], [32, 3, 0, "-", "manipulation"], [32, 3, 0, "-", "norms"], [32, 3, 0, "-", "random"], [32, 3, 0, "-", "searching"], [32, 3, 0, "-", "set"], [32, 3, 0, "-", "sorting"], [32, 3, 0, "-", "statistical"], [32, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[32, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_elu"], [32, 0, 1, "", "_static_silu"], [32, 0, 1, "", "elu"], [32, 0, 1, "", "logit"], [32, 0, 1, "", "logsigmoid"], [32, 0, 1, "", "prelu"], [32, 0, 1, "", "relu6"], [32, 0, 1, "", "selu"], [32, 0, 1, "", "silu"], [32, 0, 1, "", "static_logit"], [32, 0, 1, "", "static_logsigmoid"], [32, 0, 1, "", "static_prelu"], [32, 0, 1, "", "static_relu6"], [32, 0, 1, "", "static_selu"], [32, 0, 1, "", "static_thresholded_relu"], [32, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[32, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[32, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_trilu"], [32, 0, 1, "", "blackman_window"], [32, 0, 1, "", "eye_like"], [32, 0, 1, "", "hamming_window"], [32, 0, 1, "", "hann_window"], [32, 0, 1, "", "kaiser_bessel_derived_window"], [32, 0, 1, "", "kaiser_window"], [32, 0, 1, "", "static_blackman_window"], [32, 0, 1, "", "static_eye_like"], [32, 0, 1, "", "static_hamming_window"], [32, 0, 1, "", "static_hann_window"], [32, 0, 1, "", "static_kaiser_bessel_derived_window"], [32, 0, 1, "", "static_kaiser_window"], [32, 0, 1, "", "static_tril_indices"], [32, 0, 1, "", "static_unsorted_segment_min"], [32, 0, 1, "", "static_unsorted_segment_sum"], [32, 0, 1, "", "static_vorbis_window"], [32, 0, 1, "", "tril_indices"], [32, 0, 1, "", "trilu"], [32, 0, 1, "", "unsorted_segment_min"], [32, 0, 1, "", "unsorted_segment_sum"], [32, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[32, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[32, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[32, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "allclose"], [32, 0, 1, "", "binarizer"], [32, 0, 1, "", "conj"], [32, 0, 1, "", "copysign"], [32, 0, 1, "", "count_nonzero"], [32, 0, 1, "", "diff"], [32, 0, 1, "", "digamma"], [32, 0, 1, "", "fix"], [32, 0, 1, "", "float_power"], [32, 0, 1, "", "fmax"], [32, 0, 1, "", "fmod"], [32, 0, 1, "", "frexp"], [32, 0, 1, "", "gradient"], [32, 0, 1, "", "hypot"], [32, 0, 1, "", "isclose"], [32, 0, 1, "", "ldexp"], [32, 0, 1, "", "lerp"], [32, 0, 1, "", "modf"], [32, 0, 1, "", "nansum"], [32, 0, 1, "", "nextafter"], [32, 0, 1, "", "signbit"], [32, 0, 1, "", "sinc"], [32, 0, 1, "", "sparsify_tensor"], [32, 0, 1, "", "static_allclose"], [32, 0, 1, "", "static_binarizer"], [32, 0, 1, "", "static_conj"], [32, 0, 1, "", "static_copysign"], [32, 0, 1, "", "static_count_nonzero"], [32, 0, 1, "", "static_diff"], [32, 0, 1, "", "static_digamma"], [32, 0, 1, "", "static_fix"], [32, 0, 1, "", "static_float_power"], [32, 0, 1, "", "static_fmax"], [32, 0, 1, "", "static_fmod"], [32, 0, 1, "", "static_frexp"], [32, 0, 1, "", "static_gradient"], [32, 0, 1, "", "static_hypot"], [32, 0, 1, "", "static_isclose"], [32, 0, 1, "", "static_ldexp"], [32, 0, 1, "", "static_lerp"], [32, 0, 1, "", "static_modf"], [32, 0, 1, "", "static_nansum"], [32, 0, 1, "", "static_nextafter"], [32, 0, 1, "", "static_signbit"], [32, 0, 1, "", "static_sinc"], [32, 0, 1, "", "static_sparsify_tensor"], [32, 0, 1, "", "static_xlogy"], [32, 0, 1, "", "static_zeta"], [32, 0, 1, "", "xlogy"], [32, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[32, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_reduce"], [32, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[32, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[32, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[32, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fft"], [32, 0, 1, "", "adaptive_avg_pool1d"], [32, 0, 1, "", "adaptive_avg_pool2d"], [32, 0, 1, "", "adaptive_max_pool2d"], [32, 0, 1, "", "avg_pool1d"], [32, 0, 1, "", "avg_pool2d"], [32, 0, 1, "", "avg_pool3d"], [32, 0, 1, "", "dct"], [32, 0, 1, "", "dft"], [32, 0, 1, "", "embedding"], [32, 0, 1, "", "fft"], [32, 0, 1, "", "idct"], [32, 0, 1, "", "ifft"], [32, 0, 1, "", "ifftn"], [32, 0, 1, "", "interpolate"], [32, 0, 1, "", "max_pool1d"], [32, 0, 1, "", "max_pool2d"], [32, 0, 1, "", "max_pool3d"], [32, 0, 1, "", "rfftn"], [32, 0, 1, "", "static_adaptive_avg_pool1d"], [32, 0, 1, "", "static_adaptive_avg_pool2d"], [32, 0, 1, "", "static_adaptive_max_pool2d"], [32, 0, 1, "", "static_avg_pool1d"], [32, 0, 1, "", "static_avg_pool2d"], [32, 0, 1, "", "static_avg_pool3d"], [32, 0, 1, "", "static_dct"], [32, 0, 1, "", "static_dft"], [32, 0, 1, "", "static_embedding"], [32, 0, 1, "", "static_idct"], [32, 0, 1, "", "static_ifft"], [32, 0, 1, "", "static_ifftn"], [32, 0, 1, "", "static_interpolate"], [32, 0, 1, "", "static_max_pool1d"], [32, 0, 1, "", "static_max_pool2d"], [32, 0, 1, "", "static_max_pool3d"], [32, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "adjoint"], [32, 0, 1, "", "cond"], [32, 0, 1, "", "diagflat"], [32, 0, 1, "", "dot"], [32, 0, 1, "", "eig"], [32, 0, 1, "", "eigh_tridiagonal"], [32, 0, 1, "", "eigvals"], [32, 0, 1, "", "initialize_tucker"], [32, 0, 1, "", "kron"], [32, 0, 1, "", "make_svd_non_negative"], [32, 0, 1, "", "matrix_exp"], [32, 0, 1, "", "mode_dot"], [32, 0, 1, "", "multi_dot"], [32, 0, 1, "", "multi_mode_dot"], [32, 0, 1, "", "partial_tucker"], [32, 0, 1, "", "static_adjoint"], [32, 0, 1, "", "static_cond"], [32, 0, 1, "", "static_diagflat"], [32, 0, 1, "", "static_dot"], [32, 0, 1, "", "static_eig"], [32, 0, 1, "", "static_eigh_tridiagonal"], [32, 0, 1, "", "static_eigvals"], [32, 0, 1, "", "static_initialize_tucker"], [32, 0, 1, "", "static_kron"], [32, 0, 1, "", "static_make_svd_non_negative"], [32, 0, 1, "", "static_matrix_exp"], [32, 0, 1, "", "static_mode_dot"], [32, 0, 1, "", "static_multi_dot"], [32, 0, 1, "", "static_multi_mode_dot"], [32, 0, 1, "", "static_partial_tucker"], [32, 0, 1, "", "static_svd_flip"], [32, 0, 1, "", "static_truncated_svd"], [32, 0, 1, "", "static_tucker"], [32, 0, 1, "", "svd_flip"], [32, 0, 1, "", "truncated_svd"], [32, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[32, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_huber_loss"], [32, 0, 1, "", "_static_l1_loss"], [32, 0, 1, "", "_static_smooth_l1_loss"], [32, 0, 1, "", "_static_soft_margin_loss"], [32, 0, 1, "", "huber_loss"], [32, 0, 1, "", "l1_loss"], [32, 0, 1, "", "smooth_l1_loss"], [32, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[32, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fill_diagonal"], [32, 0, 1, "", "_static_unique_consecutive"], [32, 0, 1, "", "as_strided"], [32, 0, 1, "", "associative_scan"], [32, 0, 1, "", "atleast_1d"], [32, 0, 1, "", "atleast_2d"], [32, 0, 1, "", "atleast_3d"], [32, 0, 1, "", "broadcast_shapes"], [32, 0, 1, "", "concat_from_sequence"], [32, 0, 1, "", "dsplit"], [32, 0, 1, "", "dstack"], [32, 0, 1, "", "expand"], [32, 0, 1, "", "fill_diagonal"], [32, 0, 1, "", "flatten"], [32, 0, 1, "", "fliplr"], [32, 0, 1, "", "flipud"], [32, 0, 1, "", "fold"], [32, 0, 1, "", "heaviside"], [32, 0, 1, "", "hsplit"], [32, 0, 1, "", "hstack"], [32, 0, 1, "", "i0"], [32, 0, 1, "", "matricize"], [32, 0, 1, "", "moveaxis"], [32, 0, 1, "", "pad"], [32, 0, 1, "", "partial_fold"], [32, 0, 1, "", "partial_tensor_to_vec"], [32, 0, 1, "", "partial_unfold"], [32, 0, 1, "", "partial_vec_to_tensor"], [32, 0, 1, "", "rot90"], [32, 0, 1, "", "soft_thresholding"], [32, 0, 1, "", "static_as_strided"], [32, 0, 1, "", "static_atleast_1d"], [32, 0, 1, "", "static_atleast_2d"], [32, 0, 1, "", "static_atleast_3d"], [32, 0, 1, "", "static_broadcast_shapes"], [32, 0, 1, "", "static_concat_from_sequence"], [32, 0, 1, "", "static_dsplit"], [32, 0, 1, "", "static_dstack"], [32, 0, 1, "", "static_expand"], [32, 0, 1, "", "static_flatten"], [32, 0, 1, "", "static_fliplr"], [32, 0, 1, "", "static_flipud"], [32, 0, 1, "", "static_fold"], [32, 0, 1, "", "static_heaviside"], [32, 0, 1, "", "static_hsplit"], [32, 0, 1, "", "static_hstack"], [32, 0, 1, "", "static_i0"], [32, 0, 1, "", "static_matricize"], [32, 0, 1, "", "static_moveaxis"], [32, 0, 1, "", "static_pad"], [32, 0, 1, "", "static_partial_fold"], [32, 0, 1, "", "static_partial_tensor_to_vec"], [32, 0, 1, "", "static_partial_unfold"], [32, 0, 1, "", "static_partial_vec_to_tensor"], [32, 0, 1, "", "static_rot90"], [32, 0, 1, "", "static_soft_thresholding"], [32, 0, 1, "", "static_take_along_axis"], [32, 0, 1, "", "static_top_k"], [32, 0, 1, "", "static_unfold"], [32, 0, 1, "", "static_vsplit"], [32, 0, 1, "", "static_vstack"], [32, 0, 1, "", "take_along_axis"], [32, 0, 1, "", "top_k"], [32, 0, 1, "", "unfold"], [32, 0, 1, "", "unique_consecutive"], [32, 0, 1, "", "vsplit"], [32, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[32, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "batch_norm"], [32, 0, 1, "", "group_norm"], [32, 0, 1, "", "instance_norm"], [32, 0, 1, "", "l1_normalize"], [32, 0, 1, "", "l2_normalize"], [32, 0, 1, "", "lp_normalize"], [32, 0, 1, "", "static_batch_norm"], [32, 0, 1, "", "static_group_norm"], [32, 0, 1, "", "static_instance_norm"], [32, 0, 1, "", "static_l1_normalize"], [32, 0, 1, "", "static_l2_normalize"], [32, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[32, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "bernoulli"], [32, 0, 1, "", "beta"], [32, 0, 1, "", "dirichlet"], [32, 0, 1, "", "gamma"], [32, 0, 1, "", "poisson"], [32, 0, 1, "", "static_bernoulli"], [32, 0, 1, "", "static_beta"], [32, 0, 1, "", "static_dirichlet"], [32, 0, 1, "", "static_gamma"], [32, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[32, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "static_unravel_index"], [32, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[32, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[32, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "invert_permutation"], [32, 0, 1, "", "lexsort"], [32, 0, 1, "", "static_invert_permutation"], [32, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[32, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_cummax"], [32, 0, 1, "", "_static_cummin"], [32, 0, 1, "", "bincount"], [32, 0, 1, "", "corrcoef"], [32, 0, 1, "", "cov"], [32, 0, 1, "", "cummax"], [32, 0, 1, "", "cummin"], [32, 0, 1, "", "histogram"], [32, 0, 1, "", "igamma"], [32, 0, 1, "", "median"], [32, 0, 1, "", "nanmean"], [32, 0, 1, "", "nanmedian"], [32, 0, 1, "", "quantile"], [32, 0, 1, "", "static_bincount"], [32, 0, 1, "", "static_corrcoef"], [32, 0, 1, "", "static_cov"], [32, 0, 1, "", "static_histogram"], [32, 0, 1, "", "static_igamma"], [32, 0, 1, "", "static_median"], [32, 0, 1, "", "static_nanmean"], [32, 0, 1, "", "static_nanmedian"], [32, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[32, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "optional_get_element"], [32, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[33, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_all_equal"], [33, 0, 1, "", "_static_array_equal"], [33, 0, 1, "", "_static_assert_supports_inplace"], [33, 0, 1, "", "_static_clip_matrix_norm"], [33, 0, 1, "", "_static_clip_vector_norm"], [33, 0, 1, "", "_static_einops_rearrange"], [33, 0, 1, "", "_static_einops_reduce"], [33, 0, 1, "", "_static_einops_repeat"], [33, 0, 1, "", "_static_fourier_encode"], [33, 0, 1, "", "_static_gather"], [33, 0, 1, "", "_static_gather_nd"], [33, 0, 1, "", "_static_get_num_dims"], [33, 0, 1, "", "_static_has_nans"], [33, 0, 1, "", "_static_inplace_decrement"], [33, 0, 1, "", "_static_inplace_increment"], [33, 0, 1, "", "_static_inplace_update"], [33, 0, 1, "", "_static_is_array"], [33, 0, 1, "", "_static_is_ivy_array"], [33, 0, 1, "", "_static_is_native_array"], [33, 0, 1, "", "_static_scatter_flat"], [33, 0, 1, "", "_static_scatter_nd"], [33, 0, 1, "", "_static_stable_divide"], [33, 0, 1, "", "_static_stable_pow"], [33, 0, 1, "", "_static_supports_inplace_updates"], [33, 0, 1, "", "_static_to_list"], [33, 0, 1, "", "_static_to_numpy"], [33, 0, 1, "", "_static_to_scalar"], [33, 0, 1, "", "_static_value_is_nan"], [33, 0, 1, "", "all_equal"], [33, 0, 1, "", "array_equal"], [33, 0, 1, "", "assert_supports_inplace"], [33, 0, 1, "", "clip_matrix_norm"], [33, 0, 1, "", "clip_vector_norm"], [33, 0, 1, "", "einops_rearrange"], [33, 0, 1, "", "einops_reduce"], [33, 0, 1, "", "einops_repeat"], [33, 0, 1, "", "fourier_encode"], [33, 0, 1, "", "gather"], [33, 0, 1, "", "gather_nd"], [33, 0, 1, "", "get_num_dims"], [33, 0, 1, "", "has_nans"], [33, 0, 1, "", "inplace_decrement"], [33, 0, 1, "", "inplace_increment"], [33, 0, 1, "", "inplace_update"], [33, 0, 1, "", "is_array"], [33, 0, 1, "", "is_ivy_array"], [33, 0, 1, "", "is_native_array"], [33, 0, 1, "", "isin"], [33, 0, 1, "", "itemsize"], [33, 0, 1, "", "scatter_flat"], [33, 0, 1, "", "scatter_nd"], [33, 0, 1, "", "stable_divide"], [33, 0, 1, "", "stable_pow"], [33, 0, 1, "", "static_isin"], [33, 0, 1, "", "static_itemsize"], [33, 0, 1, "", "static_strides"], [33, 0, 1, "", "strides"], [33, 0, 1, "", "supports_inplace_updates"], [33, 0, 1, "", "to_list"], [33, 0, 1, "", "to_numpy"], [33, 0, 1, "", "to_scalar"], [33, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[34, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_stop_gradient"], [34, 0, 1, "", "adam_step"], [34, 0, 1, "", "adam_update"], [34, 0, 1, "", "gradient_descent_update"], [34, 0, 1, "", "lamb_update"], [34, 0, 1, "", "lars_update"], [34, 0, 1, "", "optimizer_update"], [34, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[35, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[36, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_conv1d"], [36, 0, 1, "", "_static_conv1d_transpose"], [36, 0, 1, "", "_static_conv2d"], [36, 0, 1, "", "_static_conv2d_transpose"], [36, 0, 1, "", "_static_conv3d"], [36, 0, 1, "", "_static_conv3d_transpose"], [36, 0, 1, "", "_static_depthwise_conv2d"], [36, 0, 1, "", "_static_dropout"], [36, 0, 1, "", "_static_dropout1d"], [36, 0, 1, "", "_static_dropout2d"], [36, 0, 1, "", "_static_dropout3d"], [36, 0, 1, "", "_static_linear"], [36, 0, 1, "", "_static_lstm_update"], [36, 0, 1, "", "_static_multi_head_attention"], [36, 0, 1, "", "_static_reduce_window"], [36, 0, 1, "", "_static_scaled_dot_product_attention"], [36, 0, 1, "", "conv1d"], [36, 0, 1, "", "conv1d_transpose"], [36, 0, 1, "", "conv2d"], [36, 0, 1, "", "conv2d_transpose"], [36, 0, 1, "", "conv3d"], [36, 0, 1, "", "conv3d_transpose"], [36, 0, 1, "", "depthwise_conv2d"], [36, 0, 1, "", "dropout"], [36, 0, 1, "", "dropout1d"], [36, 0, 1, "", "dropout2d"], [36, 0, 1, "", "dropout3d"], [36, 0, 1, "", "linear"], [36, 0, 1, "", "lstm_update"], [36, 0, 1, "", "multi_head_attention"], [36, 0, 1, "", "reduce_window"], [36, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[37, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_cholesky"], [37, 0, 1, "", "_static_cross"], [37, 0, 1, "", "_static_det"], [37, 0, 1, "", "_static_diag"], [37, 0, 1, "", "_static_diagonal"], [37, 0, 1, "", "_static_eigh"], [37, 0, 1, "", "_static_eigvalsh"], [37, 0, 1, "", "_static_inner"], [37, 0, 1, "", "_static_inv"], [37, 0, 1, "", "_static_matmul"], [37, 0, 1, "", "_static_matrix_norm"], [37, 0, 1, "", "_static_matrix_power"], [37, 0, 1, "", "_static_matrix_rank"], [37, 0, 1, "", "_static_matrix_transpose"], [37, 0, 1, "", "_static_outer"], [37, 0, 1, "", "_static_pinv"], [37, 0, 1, "", "_static_qr"], [37, 0, 1, "", "_static_slogdet"], [37, 0, 1, "", "_static_solve"], [37, 0, 1, "", "_static_svd"], [37, 0, 1, "", "_static_svdvals"], [37, 0, 1, "", "_static_tensordot"], [37, 0, 1, "", "_static_tensorsolve"], [37, 0, 1, "", "_static_trace"], [37, 0, 1, "", "_static_vander"], [37, 0, 1, "", "_static_vecdot"], [37, 0, 1, "", "_static_vector_norm"], [37, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [37, 0, 1, "", "cholesky"], [37, 0, 1, "", "cross"], [37, 0, 1, "", "det"], [37, 0, 1, "", "diag"], [37, 0, 1, "", "diagonal"], [37, 0, 1, "", "eigh"], [37, 0, 1, "", "eigvalsh"], [37, 0, 1, "", "inner"], [37, 0, 1, "", "inv"], [37, 0, 1, "", "matmul"], [37, 0, 1, "", "matrix_norm"], [37, 0, 1, "", "matrix_power"], [37, 0, 1, "", "matrix_rank"], [37, 0, 1, "", "matrix_transpose"], [37, 0, 1, "", "outer"], [37, 0, 1, "", "pinv"], [37, 0, 1, "", "qr"], [37, 0, 1, "", "slogdet"], [37, 0, 1, "", "solve"], [37, 0, 1, "", "svd"], [37, 0, 1, "", "svdvals"], [37, 0, 1, "", "tensordot"], [37, 0, 1, "", "tensorsolve"], [37, 0, 1, "", "trace"], [37, 0, 1, "", "vander"], [37, 0, 1, "", "vecdot"], [37, 0, 1, "", "vector_norm"], [37, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[38, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_binary_cross_entropy"], [38, 0, 1, "", "_static_cross_entropy"], [38, 0, 1, "", "_static_sparse_cross_entropy"], [38, 0, 1, "", "binary_cross_entropy"], [38, 0, 1, "", "cross_entropy"], [38, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[39, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_clip"], [39, 0, 1, "", "_static_concat"], [39, 0, 1, "", "_static_constant_pad"], [39, 0, 1, "", "_static_expand_dims"], [39, 0, 1, "", "_static_flip"], [39, 0, 1, "", "_static_permute_dims"], [39, 0, 1, "", "_static_repeat"], [39, 0, 1, "", "_static_reshape"], [39, 0, 1, "", "_static_roll"], [39, 0, 1, "", "_static_split"], [39, 0, 1, "", "_static_squeeze"], [39, 0, 1, "", "_static_stack"], [39, 0, 1, "", "_static_swapaxes"], [39, 0, 1, "", "_static_tile"], [39, 0, 1, "", "_static_unstack"], [39, 0, 1, "", "_static_zero_pad"], [39, 0, 1, "", "clip"], [39, 0, 1, "", "concat"], [39, 0, 1, "", "constant_pad"], [39, 0, 1, "", "expand_dims"], [39, 0, 1, "", "flip"], [39, 0, 1, "", "permute_dims"], [39, 0, 1, "", "repeat"], [39, 0, 1, "", "reshape"], [39, 0, 1, "", "roll"], [39, 0, 1, "", "split"], [39, 0, 1, "", "squeeze"], [39, 0, 1, "", "stack"], [39, 0, 1, "", "swapaxes"], [39, 0, 1, "", "tile"], [39, 0, 1, "", "unstack"], [39, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[40, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[41, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_multinomial"], [41, 0, 1, "", "_static_randint"], [41, 0, 1, "", "_static_random_normal"], [41, 0, 1, "", "_static_random_uniform"], [41, 0, 1, "", "_static_shuffle"], [41, 0, 1, "", "multinomial"], [41, 0, 1, "", "randint"], [41, 0, 1, "", "random_normal"], [41, 0, 1, "", "random_uniform"], [41, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[42, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_argmax"], [42, 0, 1, "", "_static_argmin"], [42, 0, 1, "", "_static_argwhere"], [42, 0, 1, "", "_static_nonzero"], [42, 0, 1, "", "_static_where"], [42, 0, 1, "", "argmax"], [42, 0, 1, "", "argmin"], [42, 0, 1, "", "argwhere"], [42, 0, 1, "", "nonzero"], [42, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[43, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_unique_all"], [43, 0, 1, "", "_static_unique_counts"], [43, 0, 1, "", "_static_unique_inverse"], [43, 0, 1, "", "_static_unique_values"], [43, 0, 1, "", "unique_all"], [43, 0, 1, "", "unique_counts"], [43, 0, 1, "", "unique_inverse"], [43, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[44, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_argsort"], [44, 0, 1, "", "_static_searchsorted"], [44, 0, 1, "", "_static_sort"], [44, 0, 1, "", "argsort"], [44, 0, 1, "", "msort"], [44, 0, 1, "", "searchsorted"], [44, 0, 1, "", "sort"], [44, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[45, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_cumprod"], [45, 0, 1, "", "_static_cumsum"], [45, 0, 1, "", "_static_prod"], [45, 0, 1, "", "_static_sum"], [45, 0, 1, "", "_static_var"], [45, 0, 1, "", "cumprod"], [45, 0, 1, "", "cumsum"], [45, 0, 1, "", "einsum"], [45, 0, 1, "", "max"], [45, 0, 1, "", "mean"], [45, 0, 1, "", "min"], [45, 0, 1, "", "prod"], [45, 0, 1, "", "std"], [45, 0, 1, "", "sum"], [45, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[46, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "_static_all"], [46, 0, 1, "", "_static_any"], [46, 0, 1, "", "all"], [46, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[47, 2, 1, "", "_wrap_function"], [47, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[48, 3, 0, "-", "base"], [49, 3, 0, "-", "cp_tensor"], [50, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[48, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[48, 0, 1, "", "__init__"], [48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "mode_dot"], [48, 0, 1, "", "norm"], [48, 0, 1, "", "to_tensor"], [48, 0, 1, "", "to_unfolded"], [48, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[49, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[49, 0, 1, "", "__init__"], [49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "cp_copy"], [49, 0, 1, "", "cp_flip_sign"], [49, 0, 1, "", "cp_lstsq_grad"], [49, 0, 1, "", "cp_mode_dot"], [49, 0, 1, "", "cp_n_param"], [49, 0, 1, "", "cp_norm"], [49, 0, 1, "", "cp_normalize"], [49, 0, 1, "", "cp_to_tensor"], [49, 0, 1, "", "cp_to_unfolded"], [49, 0, 1, "", "cp_to_vec"], [49, 0, 1, "", "mode_dot"], [49, 5, 1, "", "n_param"], [49, 0, 1, "", "norm"], [49, 0, 1, "", "normalize"], [49, 0, 1, "", "to_tensor"], [49, 0, 1, "", "to_unfolded"], [49, 0, 1, "", "to_vec"], [49, 0, 1, "", "unfolding_dot_khatri_rao"], [49, 0, 1, "", "validate_cp_rank"], [49, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[50, 1, 1, "", "TuckerTensor"], [50, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[50, 0, 1, "", "__init__"], [50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "mode_dot"], [50, 5, 1, "", "n_param"], [50, 0, 1, "", "to_tensor"], [50, 0, 1, "", "to_unfolded"], [50, 0, 1, "", "to_vec"], [50, 0, 1, "", "tucker_copy"], [50, 0, 1, "", "tucker_mode_dot"], [50, 0, 1, "", "tucker_n_param"], [50, 0, 1, "", "tucker_normalize"], [50, 0, 1, "", "tucker_to_tensor"], [50, 0, 1, "", "tucker_to_unfolded"], [50, 0, 1, "", "tucker_to_vec"], [50, 0, 1, "", "validate_tucker_rank"], [50, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[55, 3, 0, "-", "base"], [56, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[55, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[55, 0, 1, "", "__init__"], [55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "broadcast_shapes"], [55, 5, 1, "", "data"], [55, 5, 1, "", "device"], [55, 5, 1, "", "dtype"], [55, 5, 1, "", "inner_shape"], [55, 5, 1, "", "ndim"], [55, 0, 1, "", "nested_array"], [55, 5, 1, "", "nested_rank"], [55, 0, 1, "", "ragged_map"], [55, 0, 1, "", "ragged_multi_map"], [55, 0, 1, "", "ragged_multi_map_in_function"], [55, 0, 1, "", "replace_ivy_arrays"], [55, 5, 1, "", "shape"], [55, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[56, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[54, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[54, 0, 1, "", "__init__"], [54, 0, 1, "", "from_row_lengths"], [54, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[535, 3, 0, "-", "activations"], [536, 3, 0, "-", "constants"], [537, 3, 0, "-", "control_flow_ops"], [538, 3, 0, "-", "creation"], [539, 3, 0, "-", "data_type"], [540, 3, 0, "-", "device"], [541, 3, 0, "-", "elementwise"], [542, 3, 0, "-", "experimental"], [543, 3, 0, "-", "general"], [544, 3, 0, "-", "gradients"], [545, 3, 0, "-", "layers"], [546, 3, 0, "-", "linear_algebra"], [547, 3, 0, "-", "losses"], [548, 3, 0, "-", "manipulation"], [549, 3, 0, "-", "meta"], [550, 3, 0, "-", "nest"], [551, 3, 0, "-", "norms"], [552, 3, 0, "-", "random"], [553, 3, 0, "-", "searching"], [554, 3, 0, "-", "set"], [555, 3, 0, "-", "sorting"], [556, 3, 0, "-", "statistical"], [557, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[301, 3, 0, "-", "activations"], [302, 3, 0, "-", "constants"], [303, 3, 0, "-", "creation"], [304, 3, 0, "-", "data_type"], [305, 3, 0, "-", "device"], [306, 3, 0, "-", "elementwise"], [307, 3, 0, "-", "general"], [308, 3, 0, "-", "gradients"], [309, 3, 0, "-", "layers"], [310, 3, 0, "-", "linear_algebra"], [311, 3, 0, "-", "losses"], [312, 3, 0, "-", "manipulation"], [313, 3, 0, "-", "meta"], [314, 3, 0, "-", "nest"], [315, 3, 0, "-", "norms"], [316, 3, 0, "-", "random"], [317, 3, 0, "-", "searching"], [318, 3, 0, "-", "set"], [319, 3, 0, "-", "sorting"], [320, 3, 0, "-", "sparse_array"], [321, 3, 0, "-", "statistical"], [322, 3, 0, "-", "utility"]], "ivy.stateful": [[680, 3, 0, "-", "activations"], [681, 3, 0, "-", "converters"], [682, 3, 0, "-", "helpers"], [683, 3, 0, "-", "initializers"], [684, 3, 0, "-", "layers"], [685, 3, 0, "-", "losses"], [686, 3, 0, "-", "module"], [687, 3, 0, "-", "norms"], [688, 3, 0, "-", "optimizers"], [689, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[680, 1, 1, "", "ELU"], [680, 1, 1, "", "GEGLU"], [680, 1, 1, "", "GELU"], [680, 1, 1, "", "Hardswish"], [680, 1, 1, "", "LeakyReLU"], [680, 1, 1, "", "LogSigmoid"], [680, 1, 1, "", "LogSoftmax"], [680, 1, 1, "", "Logit"], [680, 1, 1, "", "Mish"], [680, 1, 1, "", "PReLU"], [680, 1, 1, "", "ReLU"], [680, 1, 1, "", "ReLU6"], [680, 1, 1, "", "SeLU"], [680, 1, 1, "", "SiLU"], [680, 1, 1, "", "Sigmoid"], [680, 1, 1, "", "Softmax"], [680, 1, 1, "", "Softplus"], [680, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[680, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[680, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[681, 1, 1, "", "ModuleConverters"], [681, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[681, 0, 1, "", "from_flax_module"], [681, 0, 1, "", "from_haiku_module"], [681, 0, 1, "", "from_keras_module"], [681, 0, 1, "", "from_paddle_module"], [681, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[682, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[682, 0, 1, "", "check_submod_rets"], [682, 0, 1, "", "get_mod_key"], [682, 0, 1, "", "mod_depth"], [682, 0, 1, "", "mod_height"], [682, 0, 1, "", "mod_with_top_mod_key_chain"], [682, 0, 1, "", "show_mod_in_top_mod"], [682, 0, 1, "", "show_structure"], [682, 0, 1, "", "show_v_in_top_v"], [682, 0, 1, "", "sub_mods"], [682, 0, 1, "", "track_submod_call_order"], [682, 0, 1, "", "track_submod_rets"], [682, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[683, 1, 1, "", "Constant"], [683, 1, 1, "", "FirstLayerSiren"], [683, 1, 1, "", "GlorotUniform"], [683, 1, 1, "", "Initializer"], [683, 1, 1, "", "KaimingNormal"], [683, 1, 1, "", "Ones"], [683, 1, 1, "", "RandomNormal"], [683, 1, 1, "", "Siren"], [683, 1, 1, "", "Uniform"], [683, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[683, 0, 1, "", "__init__"], [683, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[683, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[683, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[683, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[683, 0, 1, "", "__init__"], [683, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[683, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[683, 0, 1, "", "__init__"], [683, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[683, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[683, 0, 1, "", "__init__"], [683, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[683, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[684, 1, 1, "", "AdaptiveAvgPool1d"], [684, 1, 1, "", "AdaptiveAvgPool2d"], [684, 1, 1, "", "AvgPool1D"], [684, 1, 1, "", "AvgPool2D"], [684, 1, 1, "", "AvgPool3D"], [684, 1, 1, "", "Conv1D"], [684, 1, 1, "", "Conv1DTranspose"], [684, 1, 1, "", "Conv2D"], [684, 1, 1, "", "Conv2DTranspose"], [684, 1, 1, "", "Conv3D"], [684, 1, 1, "", "Conv3DTranspose"], [684, 1, 1, "", "Dct"], [684, 1, 1, "", "DepthwiseConv2D"], [684, 1, 1, "", "Dropout"], [684, 1, 1, "", "Embedding"], [684, 1, 1, "", "FFT"], [684, 1, 1, "", "Identity"], [684, 1, 1, "", "LSTM"], [684, 1, 1, "", "Linear"], [684, 1, 1, "", "MaxPool1D"], [684, 1, 1, "", "MaxPool2D"], [684, 1, 1, "", "MaxPool3D"], [684, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[684, 0, 1, "", "__init__"], [684, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[684, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[684, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[685, 1, 1, "", "BinaryCrossEntropyLoss"], [685, 1, 1, "", "CrossEntropyLoss"], [685, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[685, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[685, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[685, 0, 1, "", "__init__"]], "ivy.stateful.module": [[686, 1, 1, "", "Module"], [686, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[686, 0, 1, "", "__call__"], [686, 0, 1, "", "__init__"], [686, 0, 1, "", "build"], [686, 5, 1, "", "build_mode"], [686, 5, 1, "", "built_"], [686, 0, 1, "", "compile"], [686, 0, 1, "", "eval"], [686, 0, 1, "", "load"], [686, 0, 1, "", "register_buffer"], [686, 0, 1, "", "save"], [686, 0, 1, "", "save_weights"], [686, 0, 1, "", "show_graph"], [686, 0, 1, "", "train"]], "ivy.stateful.norms": [[687, 1, 1, "", "BatchNorm2D"], [687, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[687, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[687, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[688, 1, 1, "", "Adam"], [688, 1, 1, "", "LAMB"], [688, 1, 1, "", "LARS"], [688, 1, 1, "", "Optimizer"], [688, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[688, 0, 1, "", "__init__"], [688, 0, 1, "", "set_state"], [688, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[688, 0, 1, "", "__init__"], [688, 0, 1, "", "set_state"], [688, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[688, 0, 1, "", "__init__"], [688, 0, 1, "", "set_state"], [688, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[688, 0, 1, "", "__init__"], [688, 0, 1, "", "set_state"], [688, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[688, 0, 1, "", "__init__"], [688, 0, 1, "", "set_state"], [688, 5, 1, "", "state"]], "ivy.stateful.sequential": [[689, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[689, 0, 1, "", "__init__"]], "ivy.utils": [[690, 3, 0, "-", "assertions"], [691, 3, 0, "-", "backend"], [695, 3, 0, "-", "dynamic_import"], [696, 3, 0, "-", "einsum_parser"], [697, 3, 0, "-", "exceptions"], [698, 3, 0, "-", "inspection"], [699, 3, 0, "-", "logging"], [700, 3, 0, "-", "profiler"], [701, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[690, 2, 1, "", "check_all"], [690, 2, 1, "", "check_all_or_any_fn"], [690, 2, 1, "", "check_any"], [690, 2, 1, "", "check_dev_correct_formatting"], [690, 2, 1, "", "check_dimensions"], [690, 2, 1, "", "check_elem_in_list"], [690, 2, 1, "", "check_equal"], [690, 2, 1, "", "check_exists"], [690, 2, 1, "", "check_false"], [690, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [690, 2, 1, "", "check_gather_input_valid"], [690, 2, 1, "", "check_gather_nd_input_valid"], [690, 2, 1, "", "check_greater"], [690, 2, 1, "", "check_inplace_sizes_valid"], [690, 2, 1, "", "check_isinstance"], [690, 2, 1, "", "check_kernel_padding_size"], [690, 2, 1, "", "check_less"], [690, 2, 1, "", "check_one_way_broadcastable"], [690, 2, 1, "", "check_same_dtype"], [690, 2, 1, "", "check_shape"], [690, 2, 1, "", "check_shapes_broadcastable"], [690, 2, 1, "", "check_true"], [690, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[692, 3, 0, "-", "ast_helpers"], [693, 3, 0, "-", "handler"], [694, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[692, 1, 1, "", "ImportTransformer"], [692, 1, 1, "", "IvyLoader"], [692, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "impersonate_import"], [692, 0, 1, "", "visit_Import"], [692, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[692, 0, 1, "", "__init__"], [692, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[692, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[693, 1, 1, "", "ContextManager"], [693, 2, 1, "", "choose_random_backend"], [693, 2, 1, "", "convert_from_numpy_to_target_backend"], [693, 2, 1, "", "convert_from_source_backend_to_numpy"], [693, 2, 1, "", "current_backend"], [693, 2, 1, "", "fn_name_from_version_specific_fn_name"], [693, 2, 1, "", "prevent_access_locally"], [693, 2, 1, "", "previous_backend"], [693, 2, 1, "", "set_backend"], [693, 2, 1, "", "set_backend_to_specific_version"], [693, 2, 1, "", "set_jax_backend"], [693, 2, 1, "", "set_mxnet_backend"], [693, 2, 1, "", "set_numpy_backend"], [693, 2, 1, "", "set_paddle_backend"], [693, 2, 1, "", "set_tensorflow_backend"], [693, 2, 1, "", "set_torch_backend"], [693, 2, 1, "", "unset_backend"], [693, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[693, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[694, 2, 1, "", "available_sub_backends"], [694, 2, 1, "", "clear_sub_backends"], [694, 2, 1, "", "find_available_sub_backends"], [694, 2, 1, "", "set_sub_backend"], [694, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[695, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[696, 2, 1, "", "convert_interleaved_input"], [696, 2, 1, "", "convert_subscripts"], [696, 2, 1, "", "find_output_shape"], [696, 2, 1, "", "find_output_str"], [696, 2, 1, "", "gen_unused_symbols"], [696, 2, 1, "", "get_symbol"], [696, 2, 1, "", "has_valid_einsum_chars_only"], [696, 2, 1, "", "is_valid_einsum_char"], [696, 2, 1, "", "legalise_einsum_expr"], [696, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[697, 7, 1, "", "InplaceUpdateException"], [697, 7, 1, "", "InvalidBackendException"], [697, 7, 1, "", "IvyAttributeError"], [697, 7, 1, "", "IvyBackendException"], [697, 7, 1, "", "IvyBroadcastShapeError"], [697, 7, 1, "", "IvyDeviceError"], [697, 7, 1, "", "IvyDtypePromotionError"], [697, 7, 1, "", "IvyError"], [697, 7, 1, "", "IvyException"], [697, 7, 1, "", "IvyIndexError"], [697, 7, 1, "", "IvyNotImplementedException"], [697, 7, 1, "", "IvyValueError"], [697, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[697, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[697, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[698, 2, 1, "", "add_array_specs"], [698, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[699, 2, 1, "", "set_logging_mode"], [699, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[700, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[700, 0, 1, "", "__init__"], [700, 4, 1, "", "print_stats"], [700, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[701, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 740, 745, 756, 761], "compil": [0, 740, 745, 753, 758, 760, 761], "api": [0, 1, 2, 702, 705, 712, 716, 720, 721, 731, 736, 740, 742, 744, 745, 752, 759, 761], "us": [0, 2, 702, 709, 712, 713, 716, 731, 734, 743, 749], "eager": 0, "v": [0, 705, 727, 748], "lazi": 0, "arrai": [0, 51, 54, 77, 320, 705, 716, 717, 721, 728, 742, 752], "cach": 0, "gener": [0, 10, 33, 307, 543, 731, 735, 738], "state": [0, 744, 748], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 702, 708, 724, 728, 731, 734, 738], "set": [1, 20, 43, 318, 554, 702, 713, 718, 737], "up": [1, 702, 713], "ivi": [1, 2, 702, 708, 712, 714, 717, 719, 721, 724, 726, 731, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 747, 761], "folder": 1, "kei": 1, "issu": [1, 712, 714, 727], "question": 1, "transpil": [2, 702, 745], "function": [2, 58, 712, 720, 722, 723, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 745, 748], "librari": [2, 708, 747], "modul": [2, 686, 722, 723, 744], "unifi": [2, 702, 706, 742, 757, 761], "activ": [3, 25, 301, 535, 680], "convers": [4, 27, 730], "creation": [5, 28, 303, 538], "data": [6, 29, 57, 304, 539, 554, 656, 657, 658, 659, 722, 733, 735, 743, 748], "type": [6, 29, 304, 539, 722, 729, 733, 748], "devic": [7, 30, 305, 540, 723, 728, 733], "elementwis": [8, 31, 56, 306, 541], "experiment": [9, 32, 542, 712], "gradient": [11, 34, 285, 308, 544, 731], "imag": [12, 35, 207, 709, 719], "layer": [13, 36, 309, 545, 684], "linear": [14, 37, 310, 546, 569], "algebra": [14, 37, 310, 546], "loss": [15, 38, 311, 547, 685], "manipul": [16, 39, 312, 548], "norm": [17, 40, 315, 551, 687], "random": [18, 41, 316, 552], "search": [19, 42, 317, 553], "sort": [21, 44, 319, 555, 663], "statist": [22, 45, 321, 556], "util": [23, 46, 322, 557, 679], "wrap": [24, 47, 730], "base": [26, 48, 55], "cp": 49, "tensor": [49, 50, 53], "tucker": [50, 372], "contain": [52, 714, 720, 743], "factor": 53, "nest": [54, 314, 550], "class": [57, 678, 717, 726, 733, 742], "gelu": 59, "hardswish": 60, "leaky_relu": 61, "log_softmax": 62, "mish": 63, "relu": 64, "sigmoid": 65, "softmax": 66, "softplu": 67, "softsign": 68, "cast_bool": 69, "cmp_i": 70, "cmp_isnot": 71, "for_loop": 72, "if_els": 73, "try_except": 74, "while_loop": 75, "arang": 76, "asarrai": 78, "asarray_handle_nest": 79, "asarray_infer_devic": 80, "asarray_infer_dtyp": 81, "asarray_inputs_to_native_shap": 82, "asarray_to_native_arrays_and_back": 83, "copy_arrai": 84, "empti": 85, "empty_lik": 86, "ey": 87, "from_dlpack": 88, "note": [88, 538], "frombuff": 89, "full": [90, 734], "full_lik": 91, "linspac": 92, "logspac": 93, "meshgrid": 94, "native_arrai": 95, "one_hot": 96, "ones": 97, "ones_lik": 98, "tril": 99, "triu": 100, "triu_indic": 101, "zero": 102, "zeros_lik": 103, "as_ivy_dtyp": 104, "as_native_dtyp": 105, "astyp": 106, "broadcast_arrai": 107, "broadcast_to": 108, "can_cast": 109, "check_float": 110, "closest_valid_dtyp": 111, "default_complex_dtyp": 112, "default_dtyp": 113, "default_float_dtyp": 114, "default_int_dtyp": 115, "default_uint_dtyp": 116, "dtype": [117, 728], "dtype_bit": 118, "finfo": 119, "function_supported_dtyp": 120, "function_unsupported_dtyp": 121, "iinfo": 122, "infer_default_dtyp": 123, "invalid_dtyp": 124, "is_bool_dtyp": 125, "is_complex_dtyp": 126, "is_float_dtyp": 127, "is_hashable_dtyp": 128, "is_int_dtyp": 129, "is_native_dtyp": 130, "is_uint_dtyp": 131, "promote_typ": 132, "promote_types_of_input": 133, "result_typ": 134, "set_default_complex_dtyp": 135, "set_default_dtyp": 136, "set_default_float_dtyp": 137, "set_default_int_dtyp": 138, "set_default_uint_dtyp": 139, "type_promote_arrai": 140, "unset_default_complex_dtyp": 141, "unset_default_dtyp": 142, "unset_default_float_dtyp": 143, "unset_default_int_dtyp": 144, "unset_default_uint_dtyp": 145, "valid_dtyp": 146, "as_ivy_dev": 147, "as_native_dev": 148, "clear_cached_mem_on_dev": 149, "default_devic": 150, "dev": 151, "dev_util": 152, "function_supported_devic": 153, "function_unsupported_devic": 154, "get_all_ivy_arrays_on_dev": 155, "gpu_is_avail": 156, "handle_soft_device_vari": 157, "num_cpu_cor": 158, "num_gpu": 159, "num_ivy_arrays_on_dev": 160, "percent_used_mem_on_dev": 161, "print_all_ivy_arrays_on_dev": 162, "set_default_devic": 163, "set_soft_device_mod": 164, "paramet": [164, 488, 489, 494, 495, 497, 498, 540, 543, 737], "set_split_factor": 165, "split_factor": 166, "split_func_cal": 167, "to_devic": 168, "total_mem_on_dev": 169, "tpu_is_avail": 170, "unset_default_devic": 171, "unset_soft_device_mod": 172, "used_mem_on_dev": 173, "ab": 174, "aco": 175, "acosh": 176, "add": [177, 724, 734, 761], "angl": 178, "asin": 179, "asinh": 180, "atan": 181, "atan2": 182, "atanh": 183, "bitwise_and": 184, "bitwise_invert": 185, "bitwise_left_shift": 186, "bitwise_or": 187, "bitwise_right_shift": 188, "bitwise_xor": 189, "ceil": 190, "co": 191, "cosh": 192, "deg2rad": 193, "divid": 194, "equal": 195, "erf": 196, "exp": 197, "exp2": 198, "expm1": 199, "floor": 200, "floor_divid": 201, "fmin": 202, "fmod": 203, "gcd": 204, "greater": 205, "greater_equ": 206, "isfinit": 208, "isinf": 209, "isnan": 210, "isreal": 211, "lcm": 212, "less": 213, "less_equ": 214, "log": [215, 699, 713], "log10": 216, "log1p": 217, "log2": 218, "logaddexp": 219, "logaddexp2": 220, "logical_and": 221, "logical_not": 222, "logical_or": 223, "logical_xor": 224, "maximum": 225, "minimum": 226, "multipli": 227, "nan_to_num": 228, "neg": 229, "not_equ": 230, "posit": [231, 728], "pow": 232, "rad2deg": 233, "real": 234, "reciproc": 235, "remaind": 236, "round": 237, "sign": 238, "sin": 239, "sinh": 240, "sqrt": 241, "squar": 242, "subtract": 243, "tan": [244, 724, 734], "tanh": 245, "trapz": 246, "trunc": 247, "trunc_divid": 248, "elu": 249, "logit": 250, "logsigmoid": 251, "prelu": 252, "relu6": 253, "selu": 254, "sequence_length": 255, "silu": 256, "thresholded_relu": 257, "blackman_window": 258, "eye_lik": 259, "hamming_window": 260, "hann_window": 261, "indic": 262, "kaiser_bessel_derived_window": 263, "kaiser_window": 264, "ndenumer": 265, "ndindex": 266, "random_cp": 267, "random_tuck": 268, "tril_indic": 269, "trilu": 270, "unsorted_segment_min": 271, "unsorted_segment_sum": 272, "vorbis_window": 273, "allclos": 274, "binar": 275, "conj": 276, "copysign": 277, "count_nonzero": 278, "diff": 279, "digamma": 280, "fix": 281, "float_pow": 282, "fmax": 283, "frexp": 284, "hypot": 286, "isclos": 287, "ldexp": 288, "lerp": 289, "lgamma": 290, "modf": 291, "nansum": 292, "nextaft": 293, "signbit": 294, "sinc": 295, "sparsify_tensor": 296, "xlogi": 297, "zeta": 298, "reduc": 299, "bind_custom_gradient_funct": 300, "constant": [302, 536], "meta": [313, 549], "spars": 320, "adaptive_avg_pool1d": 323, "adaptive_avg_pool2d": 324, "adaptive_max_pool2d": 325, "area_interpol": 326, "avg_pool1d": 327, "avg_pool2d": 328, "avg_pool3d": 329, "dct": 330, "dft": 331, "dropout1d": 332, "dropout2d": 333, "dropout3d": 334, "embed": 335, "fft": 336, "fft2": 337, "generate_einsum_equ": 338, "get_interpolate_kernel": 339, "idct": 340, "ifft": 341, "ifftn": 342, "interp": 343, "interpol": 344, "max_pool1d": 345, "max_pool2d": 346, "max_pool3d": 347, "max_unpool1d": 348, "nearest_interpol": 349, "pool": 350, "reduce_window": 351, "rfftn": 352, "adjoint": 353, "cond": 354, "diagflat": 355, "dot": 356, "eig": [357, 578], "eigh_tridiagon": 358, "eigval": 359, "initialize_tuck": 360, "khatri_rao": 361, "kron": 362, "kroneck": 363, "make_svd_non_neg": 364, "matrix_exp": 365, "mode_dot": 366, "multi_dot": 367, "multi_mode_dot": 368, "partial_tuck": 369, "svd_flip": 370, "truncated_svd": 371, "huber_loss": 373, "l1_loss": 374, "log_poisson_loss": 375, "smooth_l1_loss": 376, "soft_margin_loss": 377, "as_strid": 378, "associative_scan": 379, "atleast_1d": 380, "atleast_2d": 381, "atleast_3d": 382, "broadcast_shap": 383, "choos": 384, "concat_from_sequ": 385, "dsplit": 386, "dstack": 387, "expand": 388, "fill_diagon": 389, "flatten": 390, "fliplr": 391, "flipud": 392, "fold": 393, "heavisid": 394, "hsplit": 395, "hstack": 396, "i0": 397, "matric": 398, "moveaxi": 399, "pad": 400, "partial_fold": 401, "partial_tensor_to_vec": 402, "partial_unfold": 403, "partial_vec_to_tensor": 404, "put_along_axi": 405, "rot90": 406, "soft_threshold": 407, "take_along_axi": 408, "top_k": 409, "unfold": 410, "unique_consecut": 411, "vsplit": 412, "vstack": 413, "batch_norm": 414, "group_norm": 415, "instance_norm": 416, "l1_normal": 417, "l2_normal": 418, "lp_normal": 419, "bernoulli": 420, "beta": 421, "dirichlet": 422, "gamma": 423, "poisson": 424, "unravel_index": 425, "invert_permut": 426, "lexsort": 427, "is_ivy_sparse_arrai": 428, "is_native_sparse_arrai": 429, "native_sparse_arrai": 430, "native_sparse_array_to_indices_values_and_shap": 431, "bincount": 432, "corrcoef": 433, "cov": 434, "cummax": 435, "cummin": 436, "histogram": 437, "igamma": 438, "median": 439, "nanmean": 440, "nanmedian": 441, "quantil": 442, "optional_get_el": 443, "all_equ": 444, "arg_info": 445, "arg_nam": 446, "array_equ": 447, "assert_supports_inplac": 448, "cache_fn": 449, "clip_matrix_norm": 450, "clip_vector_norm": 451, "container_typ": 452, "current_backend_str": 453, "default": 454, "einops_rearrang": 455, "einops_reduc": 456, "einops_repeat": 457, "exist": [458, 709], "fourier_encod": 459, "function_supported_devices_and_dtyp": 460, "function_unsupported_devices_and_dtyp": 461, "gather": 462, "gather_nd": 463, "get_all_arrays_in_memori": 464, "get_item": 465, "get_num_dim": 466, "get_referrers_recurs": 467, "has_nan": 468, "inplace_arrays_support": 469, "inplace_decr": 470, "inplace_incr": 471, "inplace_upd": 472, "inplace_variables_support": 473, "is_arrai": 474, "is_ivy_arrai": 475, "is_ivy_contain": 476, "is_ivy_nested_arrai": 477, "is_native_arrai": 478, "isin": 479, "isscalar": 480, "items": 481, "match_kwarg": 482, "multiprocess": 483, "num_arrays_in_memori": 484, "print_all_arrays_in_memori": 485, "scatter_flat": 486, "scatter_nd": 487, "set_array_mod": 488, "set_exception_trace_mod": 489, "set_inplace_mod": 490, "set_item": 491, "set_min_bas": 492, "set_min_denomin": 493, "set_nestable_mod": 494, "set_precise_mod": 495, "set_queue_timeout": 496, "set_shape_array_mod": 497, "set_show_func_wrapper_trace_mod": 498, "set_tmp_dir": 499, "shape": [500, 554, 656, 657, 658, 659, 730, 748], "stable_divid": 501, "stable_pow": 502, "stride": 503, "supports_inplace_upd": 504, "to_ivy_shap": 505, "to_list": 506, "to_native_shap": 507, "to_numpi": 508, "to_scalar": 509, "try_else_non": 510, "unset_array_mod": 511, "unset_exception_trace_mod": 512, "unset_inplace_mod": 513, "unset_min_bas": 514, "unset_min_denomin": 515, "unset_nestable_mod": 516, "unset_precise_mod": 517, "unset_queue_timeout": 518, "unset_shape_array_mod": 519, "unset_show_func_wrapper_trace_mod": 520, "unset_tmp_dir": 521, "value_is_nan": 522, "vmap": 523, "adam_step": 524, "adam_upd": 525, "execute_with_gradi": [526, 731], "grad": 527, "gradient_descent_upd": 528, "jac": 529, "lamb_upd": 530, "lars_upd": 531, "optimizer_upd": 532, "stop_gradi": 533, "value_and_grad": 534, "control": [537, 748], "flow": [537, 748], "op": 537, "depend": [554, 656, 657, 658, 659], "output": [554, 656, 657, 658, 659], "conv": 558, "conv1d": 559, "conv1d_transpos": 560, "conv2d": 561, "conv2d_transpos": 562, "conv3d": 563, "conv3d_transpos": 564, "conv_general_dil": 565, "conv_general_transpos": 566, "depthwise_conv2d": 567, "dropout": 568, "lstm_updat": 570, "multi_head_attent": 571, "scaled_dot_product_attent": 572, "choleski": 573, "cross": 574, "det": 575, "diag": 576, "diagon": 577, "eigh": 579, "eigvalsh": 580, "inner": 581, "inv": 582, "lu_factor": 583, "matmul": 584, "matrix_norm": 585, "matrix_pow": 586, "matrix_rank": 587, "matrix_transpos": 588, "outer": 589, "pinv": 590, "qr": 591, "slogdet": 592, "solv": 593, "svd": 594, "svdval": 595, "tensordot": 596, "tensorsolv": 597, "trace": [598, 726], "vander": 599, "vecdot": 600, "vector_norm": 601, "vector_to_skew_symmetric_matrix": 602, "binary_cross_entropi": 603, "cross_entropi": 604, "sparse_cross_entropi": 605, "clip": 606, "concat": 607, "constant_pad": 608, "expand_dim": 609, "flip": 610, "permute_dim": 611, "repeat": 612, "reshap": 613, "roll": [614, 724], "split": 615, "squeez": 616, "stack": [617, 726], "swapax": 618, "tile": 619, "unstack": 620, "zero_pad": 621, "fomaml_step": 622, "maml_step": 623, "reptile_step": 624, "all_nested_indic": 625, "copy_nest": 626, "duplicate_array_index_chain": 627, "index_nest": 628, "insert_into_nest_at_index": 629, "insert_into_nest_at_indic": 630, "map": [631, 721], "map_nest_at_index": 632, "map_nest_at_indic": 633, "multi_index_nest": 634, "nested_ani": 635, "nested_argwher": 636, "nested_map": 637, "nested_multi_map": 638, "prune_empti": 639, "prune_nest_at_index": 640, "prune_nest_at_indic": 641, "set_nest_at_index": 642, "set_nest_at_indic": 643, "layer_norm": 644, "multinomi": 645, "randint": 646, "random_norm": 647, "random_uniform": 648, "seed": 649, "shuffl": 650, "argmax": 651, "argmin": 652, "argwher": 653, "nonzero": 654, "where": [655, 712], "unique_al": 656, "unique_count": 657, "unique_invers": 658, "unique_valu": 659, "argsort": 660, "msort": 661, "searchsort": 662, "cumprod": 664, "cumsum": 665, "einsum": [666, 696], "max": 667, "mean": 668, "min": 669, "prod": 670, "std": 671, "sum": 672, "var": 673, "all": 674, "ani": 675, "load": [676, 743], "save": [677, 743], "framework": [678, 702, 731, 734, 741, 755, 758, 761, 762], "convert": [681, 745], "helper": [682, 692, 734, 735, 736], "initi": [683, 744], "optim": [688, 744], "sequenti": 689, "assert": [690, 726], "backend": [691, 694, 702, 712, 718, 722, 731, 736, 740, 748], "ast": 692, "handler": [693, 694, 740], "sub": 694, "dynam": [695, 718, 748], "import": 695, "parser": 696, "except": [697, 726, 730], "inspect": 698, "profil": 700, "verbos": 701, "statu": 702, "ai": 702, "when": 702, "should": 702, "i": [702, 719, 738], "instal": [702, 749], "pip": [702, 749], "docker": [702, 709, 713, 714, 719, 749], "from": [702, 749], "sourc": [702, 749], "multi": [702, 758, 761], "support": [702, 718, 722, 730, 733, 748], "document": 702, "contribut": [702, 707], "commun": 702, "citat": 702, "background": 703, "ml": [704, 757, 761], "explos": 704, "standard": [705, 738, 752, 761], "skeptic": 705, "complimentari": 705, "competit": 705, "do": [705, 735], "work": [705, 751], "The": [705, 714, 719, 731, 733, 742, 748], "why": [706, 735], "No": [706, 713], "more": [706, 713, 738], "re": [706, 735], "implement": [706, 721, 731, 733], "infinit": 706, "shelf": 706, "life": 706, "appli": [708, 747], "introduct": [708, 733, 734], "robot": [708, 747], "build": [709, 719, 740], "doc": [709, 719], "conveni": [709, 719, 729], "script": [709, 719], "hub": 709, "local": [709, 714, 727], "without": [709, 734], "error": [710, 726], "handl": [710, 717, 723, 726, 730, 748], "help": [711, 714], "resourc": 711, "open": 712, "task": 712, "format": [712, 727, 754, 761], "checklist": 712, "frontend": [712, 718, 733, 734, 745], "place": 712, "extend": [712, 735, 738], "creat": 712, "an": [712, 731], "": [712, 719], "github": [712, 713], "templat": 712, "fork": [713, 714], "clone": [713, 721], "repo": 713, "pre": [713, 727], "commit": [713, 714, 721, 727], "pycharm": [713, 714, 727], "virtual": 713, "environ": 713, "miniconda": 713, "venv": 713, "interpret": 713, "window": 713, "maco": 713, "ubuntu": 713, "test": [713, 714, 716, 721, 734, 735], "detail": 713, "hypothesi": [713, 734, 735], "free": 713, "wsl": 713, "codespac": 713, "basic": [714, 733], "get": [714, 749], "todo": 714, "list": 714, "manag": 714, "your": [714, 735], "who": 714, "To": 714, "ask": 714, "With": 714, "command": 714, "line": 714, "browser": 714, "pull": [714, 721], "request": [714, 721], "small": 714, "often": 714, "interact": 714, "run": [714, 716, 719, 735], "most": 714, "out": [714, 728, 730, 732], "id": [714, 716], "deep": 715, "dive": 715, "termin": 716, "regener": 716, "failur": 716, "skip": 716, "nativ": [717, 738], "integr": [717, 721, 727, 735], "custom": [717, 719, 731, 743, 748], "version": [718, 736, 748], "pipelin": [719, 721, 735, 748], "how": [719, 735], "builder": 719, "being": 719, "option": 719, "structur": [719, 731, 748], "index": 719, "rst": 719, "partial_conf": 719, "py": 719, "prebuild": 719, "sh": 719, "extens": [719, 746], "custom_autosummari": 719, "hide": 719, "tabl": 719, "discussion_link": 719, "skippable_funct": 719, "ivy_data": 719, "instanc": [720, 733, 734, 742], "method": [720, 733, 734, 742, 743], "special": [720, 733], "nestabl": [720, 728, 729, 730], "continu": [721, 727], "push": 721, "pr": 721, "trigger": 721, "A": [721, 738], "top": 721, "down": 721, "view": [721, 730, 732], "store": 721, "retriev": 721, "repositori": 721, "nitti": 721, "gritti": 721, "storag": 721, "space": 721, "unifyai": 721, "determin": 721, "coverag": 721, "workflow": 721, "multipl": 721, "runner": 721, "race": 721, "condit": 721, "period": 721, "manual": 721, "dispatch": 721, "ci": 721, "dashboard": 721, "promot": [722, 733], "argument": [722, 723, 728, 730, 732, 733], "other": [722, 723], "unsupport": 722, "bug": 722, "cast": [722, 733], "mode": [722, 726, 737], "superset": [722, 738], "docstr": [724, 725], "configur": [726, 734, 743], "func_wrapp": 726, "prune": 726, "handle_except": 726, "decor": [726, 730, 735], "consist": [726, 735], "lint": 727, "check": [727, 748], "setup": 727, "code": [727, 736], "common": 727, "keyword": 728, "input": 728, "number": 728, "oper": [728, 737, 742, 748], "integ": 728, "sequenc": 728, "primari": 729, "composit": 729, "mix": [729, 730, 735], "partial": [729, 730, 735], "standalon": 729, "order": 730, "wrapper": [730, 761, 762], "infer": 730, "miscellan": 730, "overview": 731, "usag": [731, 738], "signatur": 731, "design": [731, 736, 739], "our": 731, "polici": [731, 733], "specif": [731, 759, 760, 761], "consider": 731, "inplac": 732, "updat": 732, "copi": 732, "write": [733, 735], "short": 733, "unus": 733, "rule": 733, "numpi": [733, 755], "duplic": [733, 738], "valu": 734, "alia": 734, "own": 735, "strategi": 735, "we": 735, "need": 735, "effect": 735, "bonu": 735, "featur": 735, "self": 735, "explicit": 735, "test_array_funct": 735, "fail": 735, "navig": 736, "categor": 736, "submodul": 736, "unpin": 736, "global": 737, "properti": 737, "getter": 737, "attribut": 737, "setter": 737, "set_": 737, "unset_": 737, "behaviour": 738, "what": [738, 761], "non": 738, "balanc": 738, "effici": 738, "maxim": 738, "block": 740, "monkei": 742, "patch": 742, "construct": 743, "represent": 743, "recurs": 743, "built": 743, "ins": 743, "access": 743, "comparison": 743, "case": 743, "compartment": 743, "network": [743, 745], "weight": 743, "role": 745, "model": [745, 748], "mechan": 747, "vision": 747, "gym": 747, "memori": 747, "faq": 748, "maintain": 748, "size": 748, "gpu": 748, "deploy": 748, "auto": 748, "differenti": 748, "replica": 748, "parallel": 748, "altern": 748, "start": 749, "glossari": 750, "relat": 751, "infrastructur": [753, 761], "llvm": 753, "mlir": 753, "oneapi": 753, "exchang": [754, 761], "onnx": 754, "nnef": 754, "coreml": 754, "matlab": 755, "scipi": 755, "torch": [755, 756], "scikit": 755, "learn": 755, "theano": 755, "panda": 755, "julia": 755, "apach": [755, 758], "spark": 755, "mllib": 755, "caff": 755, "chainer": 755, "tensorflow": 755, "1": 755, "mxnet": 755, "cntk": 755, "pytorch": 755, "flux": 755, "jax": 755, "2": 755, "dex": 755, "languag": 755, "tracer": [756, 761], "tf": 756, "jaxpr": 756, "jit": 756, "fx": 756, "compani": [757, 761], "quansight": 757, "modular": 757, "octoml": 757, "vendor": [758, 759, 760, 761], "tvm": 758, "xla": 758, "gcc": 758, "tensorrt": 759, "cuda": 759, "icc": 760, "icx": 760, "nvcc": 760, "doe": 761, "eagerpi": 762, "kera": 762, "thinc": 762, "tensorli": 762, "neuropod": 762}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"default_uint_dtype": [[116, "default-uint-dtype"]], "leaky_relu": [[61, "leaky-relu"]], "asarray_infer_dtype": [[81, "asarray-infer-dtype"]], "ones": [[97, "ones"]], "softmax": [[66, "softmax"]], "cmp_isnot": [[71, "cmp-isnot"]], "full": [[90, "full"]], "default_float_dtype": [[114, "default-float-dtype"]], "dtype": [[117, "dtype"]], "try_except": [[74, "try-except"]], "one_hot": [[96, "one-hot"]], "logspace": [[93, "logspace"]], "from_dlpack": [[88, "from-dlpack"]], "Note": [[88, null], [538, null]], "default_int_dtype": [[115, "default-int-dtype"]], "broadcast_to": [[108, "broadcast-to"]], "arange": [[76, "arange"]], "asarray_infer_device": [[80, "asarray-infer-device"]], "asarray_to_native_arrays_and_back": [[83, "asarray-to-native-arrays-and-back"]], "softsign": [[68, "softsign"]], "empty": [[85, "empty"]], "tril": [[99, "tril"]], "finfo": [[119, "finfo"]], "ones_like": [[98, "ones-like"]], "softplus": [[67, "softplus"]], "broadcast_arrays": [[107, "broadcast-arrays"]], "sigmoid": [[65, "sigmoid"]], "log_softmax": [[62, "log-softmax"]], "empty_like": [[86, "empty-like"]], "for_loop": [[72, "for-loop"]], "while_loop": [[75, "while-loop"]], "as_ivy_dtype": [[104, "as-ivy-dtype"]], "array": [[77, "array"]], "function_supported_dtypes": [[120, "function-supported-dtypes"]], "cmp_is": [[70, "cmp-is"]], "eye": [[87, "eye"]], "native_array": [[95, "native-array"]], "astype": [[106, "astype"]], "check_float": [[110, "check-float"]], "copy_array": [[84, "copy-array"]], "asarray_handle_nestable": [[79, "asarray-handle-nestable"]], "frombuffer": [[89, "frombuffer"]], "asarray": [[78, "asarray"]], "linspace": [[92, "linspace"]], "closest_valid_dtype": [[111, "closest-valid-dtype"]], "can_cast": [[109, "can-cast"]], "meshgrid": [[94, "meshgrid"]], "triu_indices": [[101, "triu-indices"]], "triu": [[100, "triu"]], "default_dtype": [[113, "default-dtype"]], "asarray_inputs_to_native_shapes": [[82, "asarray-inputs-to-native-shapes"]], "as_native_dtype": [[105, "as-native-dtype"]], "mish": [[63, "mish"]], "function_unsupported_dtypes": [[121, "function-unsupported-dtypes"]], "zeros": [[102, "zeros"]], "default_complex_dtype": [[112, "default-complex-dtype"]], "zeros_like": [[103, "zeros-like"]], "cast_bool": [[69, "cast-bool"]], "if_else": [[73, "if-else"]], "dtype_bits": [[118, "dtype-bits"]], "relu": [[64, "relu"]], "full_like": [[91, "full-like"]], "Frameworks": [[755, "frameworks"], [761, "frameworks"]], "MATLAB matlab": [[755, "matlab-matlab"]], "SciPy scipy": [[755, "scipy-scipy"]], "Torch torch": [[755, "torch-torch"]], "NumPy numpy": [[755, "numpy-numpy"]], "SciKit Learn scikit-learn": [[755, "scikit-learn-scikit-learn"]], "Theano theano": [[755, "theano-theano"]], "Pandas pandas": [[755, "pandas-pandas"]], "Julia julia": [[755, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[755, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[755, "caffe-caffe"]], "Chainer chainer": [[755, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[755, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[755, "mxnet-mxnet"]], "CNTK cntk": [[755, "cntk-cntk"]], "PyTorch pytorch": [[755, "pytorch-pytorch"]], "Flux flux": [[755, "flux-flux"]], "JAX jax": [[755, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[755, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[755, "dex-language-dex-language"]], "FAQ": [[748, "faq"]], "Maintaining Backend Versions": [[748, "maintaining-backend-versions"]], "Dynamic Sizes": [[748, "dynamic-sizes"]], "Type and Shape Checking": [[748, "type-and-shape-checking"]], "GPU handling": [[748, "gpu-handling"]], "Model Deployment": [[748, "model-deployment"]], "Dynamic Control Flow": [[748, "dynamic-control-flow"]], "Auto-Differentiation": [[748, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[748, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[748, "support-for-functions"]], "Alternative Data Structures": [[748, "alternative-data-structures"]], "Custom Operations": [[748, "custom-operations"]], "The Pipeline": [[748, "the-pipeline"]], "State": [[748, "state"]], "Ivy Tests": [[735, "ivy-tests"], [721, "ivy-tests"]], "Testing Pipeline": [[735, "testing-pipeline"]], "Hypothesis": [[735, "id1"]], "Data Generation": [[735, "id2"]], "Writing your own strategy": [[735, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[735, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[735, "ivy-test-decorators"]], "Writing Ivy Tests": [[735, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[735, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[735, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[735, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[735, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[735, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[735, "self-consistent-and-explicit-testing"]], "test_array_function": [[735, "id5"]], "Running Ivy Tests": [[735, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[735, "re-running-failed-ivy-tests"]], "Ivy Frontends": [[733, "ivy-frontends"]], "Introduction": [[733, "introduction"], [734, "introduction"], [708, "introduction"]], "The Frontend Basics": [[733, "the-frontend-basics"]], "Writing Frontend Functions": [[733, "writing-frontend-functions"]], "Short Frontend Implementations": [[733, "short-frontend-implementations"]], "Unused Arguments": [[733, "unused-arguments"]], "Supported Data Types and Devices": [[733, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[733, "id6"]], "Frontend Data Type Promotion Rules": [[733, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[733, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[733, "frontends-duplicate-policy"]], "Design": [[739, "design"]], "Operating Modes": [[737, "operating-modes"]], "Global Parameter Properties": [[737, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[737, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[737, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Compiler Infrastructure": [[753, "compiler-infrastructure"], [761, "compiler-infrastructure"]], "LLVM": [[753, "id1"]], "MLIR": [[753, "id2"]], "OneAPI": [[753, "id3"]], "Ivy as a Transpiler": [[745, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[745, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[745, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[745, "converting-network-models"]], "Wrapper Frameworks": [[762, "wrapper-frameworks"], [761, "wrapper-frameworks"]], "EagerPy eagerpy": [[762, "eagerpy-eagerpy"]], "Keras keras": [[762, "keras-keras"]], "Thinc thinc": [[762, "thinc-thinc"]], "TensorLy tensorly": [[762, "tensorly-tensorly"]], "NeuroPod": [[762, "id1"]], "Navigating the Code": [[736, "navigating-the-code"]], "Categorization": [[736, "categorization"]], "Submodule Design": [[736, "submodule-design"]], "Ivy API": [[736, "ivy-api"]], "Backend API": [[736, "backend-api"]], "Submodule Helper Functions": [[736, "submodule-helper-functions"]], "Version Unpinning": [[736, "version-unpinning"]], "Get Started": [[749, "get-started"]], "Installing using pip": [[749, "installing-using-pip"], [702, "installing-using-pip"]], "Docker": [[749, "docker"], [702, "docker"]], "Installing from source": [[749, "installing-from-source"], [702, "installing-from-source"]], "Applied Libraries": [[747, "applied-libraries"], [708, "applied-libraries"]], "Ivy Mechanics": [[747, "ivy-mechanics"]], "Ivy Vision": [[747, "ivy-vision"]], "Ivy Robot": [[747, "ivy-robot"]], "Ivy Gym": [[747, "ivy-gym"]], "Ivy Memory": [[747, "ivy-memory"]], "Extensions": [[746, "extensions"]], "Ivy Container": [[743, "ivy-container"]], "Construction": [[743, "construction"]], "Representation": [[743, "representation"]], "Recursive Methods": [[743, "recursive-methods"]], "Built-ins": [[743, "built-ins"]], "Access": [[743, "access"]], "Saving and Loading": [[743, "saving-and-loading"]], "Comparisons": [[743, "comparisons"]], "Customized Representations": [[743, "customized-representations"]], "Use Cases": [[743, "use-cases"]], "Compartmentalization": [[743, "compartmentalization"]], "Configuration": [[743, "configuration"]], "Data loading": [[743, "data-loading"]], "Network weights": [[743, "network-weights"]], "Ivy Array": [[742, "ivy-array"], [717, "ivy-array"]], "The Array Class": [[742, "the-array-class"]], "Unifying Operators": [[742, "unifying-operators"]], "API Monkey Patching": [[742, "api-monkey-patching"]], "Instance Methods": [[742, "instance-methods"]], "Superset Behaviour": [[738, "superset-behaviour"]], "Extending the Standard": [[738, "extending-the-standard"]], "What is the Superset?": [[738, "what-is-the-superset"]], "A Non-Duplicate Superset": [[738, "a-non-duplicate-superset"]], "What is not the Superset?": [[738, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[738, "balancing-generalization-with-efficiency"]], "More Examples": [[738, "more-examples"]], "Maximizing Usage of Native Functionality": [[738, "maximizing-usage-of-native-functionality"]], "ML-Unifying Companies": [[757, "ml-unifying-companies"], [761, "ml-unifying-companies"]], "Quansight": [[757, "id1"]], "Modular": [[757, "id2"]], "OctoML": [[757, "id3"]], "What does Ivy Add?": [[761, "what-does-ivy-add"]], "API Standards": [[761, "api-standards"], [752, "api-standards"]], "Graph Tracers": [[761, "graph-tracers"], [756, "graph-tracers"]], "Exchange Formats": [[761, "exchange-formats"], [754, "exchange-formats"]], "Multi-Vendor Compiler Frameworks": [[761, "multi-vendor-compiler-frameworks"], [758, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[761, "vendor-specific-apis"], [759, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[761, "vendor-specific-compilers"], [760, "vendor-specific-compilers"]], "Array API Standard": [[752, "id1"]], "Ivy as a Framework": [[741, "ivy-as-a-framework"]], "ICC": [[760, "id1"]], "ICX": [[760, "icx"]], "NVCC": [[760, "nvcc"]], "Ivy Stateful API": [[744, "ivy-stateful-api"]], "Modules": [[744, "modules"]], "Initializers": [[744, "initializers"], [683, "module-ivy.stateful.initializers"]], "Optimizers": [[744, "optimizers"], [688, "module-ivy.stateful.optimizers"]], "Ivy Frontend Tests": [[734, "ivy-frontend-tests"]], "Frontend Test Examples": [[734, "frontend-test-examples"]], "ivy.tan()": [[734, "ivy-tan"]], "ivy.full()": [[734, "ivy-full"]], "Testing Without Using Tests Values": [[734, "testing-without-using-tests-values"]], "Alias functions": [[734, "alias-functions"]], "Frontend Instance Method Tests": [[734, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[734, "frontend-instance-method-test-examples"]], "ivy.add()": [[734, "ivy-add"]], "Hypothesis Helpers": [[734, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[734, "frontend-framework-testing-configuration"]], "ONNX onnx": [[754, "onnx-onnx"]], "NNEF nnef": [[754, "nnef-nnef"]], "CoreML coreml": [[754, "coreml-coreml"]], "Glossary": [[750, "glossary"]], "Inplace Updates": [[732, "inplace-updates"]], "out argument": [[732, "out-argument"]], "copy argument": [[732, "copy-argument"]], "Views": [[732, "views"]], "Building Blocks": [[740, "building-blocks"]], "Backend Functional APIs \u2705": [[740, "backend-functional-apis"]], "Ivy Functional API \u2705": [[740, "ivy-functional-api"]], "Backend Handler \u2705": [[740, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[740, "graph-compiler"]], "TensorRT tensorrt": [[759, "tensorrt-tensorrt"]], "CUDA cuda": [[759, "cuda-cuda"]], "Related Work": [[751, "related-work"]], "Apache TVM": [[758, "apache-tvm"]], "XLA": [[758, "xla"]], "GCC": [[758, "gcc"]], "tf.Graph": [[756, "tf-graph"]], "Jaxpr": [[756, "jaxpr"]], "torch.jit": [[756, "torch-jit"]], "torch.fx": [[756, "torch-fx"]], "Converters": [[681, "module-ivy.stateful.converters"]], "Docstrings": [[725, "docstrings"]], "Utils": [[679, "utils"]], "Standardization": [[705, "standardization"]], "Skepticism": [[705, "skepticism"]], "Complimentary vs Competitive": [[705, "complimentary-vs-competitive"]], "Do Standards Work?": [[705, "do-standards-work"]], "The Array API Standard": [[705, "the-array-api-standard"]], "Status": [[702, "status"]], "Unified AI": [[702, "unified-ai"]], "Ivy as a transpiler": [[702, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[702, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[702, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[702, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[702, "setting-up-ivy"]], "Using Ivy": [[702, "using-ivy"]], "Multi-backend Support": [[702, "multi-backend-support"]], "Transpilation API": [[702, "transpilation-api"]], "Documentation": [[702, "documentation"]], "Examples": [[702, "examples"], [728, "examples"], [0, "examples"], [2, "examples"]], "Contributing": [[702, "contributing"], [707, "contributing"]], "Community": [[702, "community"]], "Citation": [[702, "citation"]], "Continuous Integration": [[721, "continuous-integration"], [727, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[721, "commit-push-pr-triggered-testing"]], "Implementation": [[721, "implementation"]], "A Top-Down View": [[721, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[721, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[721, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[721, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[721, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[721, "determine-test-coverage-workflow"]], "Multiple Runners": [[721, "multiple-runners"]], "Race Condition": [[721, "race-condition"]], "Array API Tests": [[721, "array-api-tests"], [716, "array-api-tests"]], "Periodic Testing": [[721, "periodic-testing"]], "Manually Dispatched Workflows": [[721, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[721, "ci-pipeline"]], "Push": [[721, "push"]], "Pull Request": [[721, "pull-request"]], "Dashboard": [[721, "dashboard"]], "Containers": [[720, "containers"]], "Container Instance Methods": [[720, "container-instance-methods"]], "API Instance Methods": [[720, "api-instance-methods"]], "API Special Methods": [[720, "api-special-methods"]], "Nestable Functions": [[720, "nestable-functions"], [728, "nestable-functions"], [729, "nestable-functions"]], "Building the Docs Pipeline": [[719, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[719, "how-the-doc-builder-is-being-run"]], "The convenience script": [[719, "the-convenience-script"]], "Options": [[719, "options"]], "The Docker image": [[719, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[719, "how-ivy-s-docs-is-structured"]], "index.rst": [[719, "index-rst"]], "partial_conf.py": [[719, "partial-conf-py"]], "prebuild.sh": [[719, "prebuild-sh"]], "Custom Extensions": [[719, "custom-extensions"]], "custom_autosummary": [[719, "custom-autosummary"]], ":hide-table:": [[719, "hide-table"]], "discussion_linker": [[719, "discussion-linker"]], "skippable_function": [[719, "skippable-function"]], "ivy_data": [[719, "ivy-data"]], "Why Unify?": [[706, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[706, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[706, "infinite-shelf-life"]], "Assertions": [[690, "module-ivy.utils.assertions"]], "Handler": [[693, "module-ivy.utils.backend.handler"]], "Function Wrapping": [[730, "function-wrapping"]], "Decorator order": [[730, "decorator-order"]], "Conversion Wrappers": [[730, "conversion-wrappers"]], "Inference Wrappers": [[730, "inference-wrappers"]], "Out Argument Support": [[730, "out-argument-support"]], "Nestable Support": [[730, "nestable-support"]], "Partial Mixed Function Support": [[730, "partial-mixed-function-support"]], "Shape Conversion": [[730, "shape-conversion"]], "View Handling": [[730, "view-handling"]], "Exception Handling": [[730, "exception-handling"], [726, "exception-handling"]], "Miscellaneous Wrappers": [[730, "miscellaneous-wrappers"]], "Framework classes": [[678, "framework-classes"]], "Ivy Exception Class": [[726, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[726, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[726, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[726, "handle-exceptions-decorator"]], "Consistency in Errors": [[726, "consistency-in-errors"]], "Assertion Function": [[726, "assertion-function"]], "Inspection": [[698, "module-ivy.utils.inspection"]], "std": [[671, "std"]], "Setting Up": [[713, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[713, "forking-and-cloning-the-repo"]], "Pre-Commit": [[713, "pre-commit"]], "PyCharm": [[713, "pycharm"], [727, "pycharm"]], "Virtual environments - No Docker": [[713, "virtual-environments-no-docker"]], "Using miniconda": [[713, "using-miniconda"]], "Using venv": [[713, "using-venv"]], "Docker Interpreter with PyCharm": [[713, "docker-interpreter-with-pycharm"]], "Windows": [[713, "windows"], [713, "id6"]], "MacOS": [[713, "macos"]], "Ubuntu": [[713, "ubuntu"], [713, "id8"]], "Setting Up Testing in PyCharm": [[713, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[713, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[713, "setting-up-for-free"]], "WSL": [[713, "wsl"]], "GitHub Codespaces": [[713, "github-codespaces"]], "Devices": [[723, "devices"]], "Device Module": [[723, "device-module"]], "Arguments in other Functions": [[723, "arguments-in-other-functions"], [722, "arguments-in-other-functions"]], "Device handling": [[723, "device-handling"]], "Sub backend handler": [[694, "module-ivy.utils.backend.sub_backend_handler"]], "Helpful Resources": [[711, "helpful-resources"]], "Docstring Examples": [[724, "docstring-examples"]], "ivy.tan": [[724, "ivy-tan"]], "ivy.roll": [[724, "ivy-roll"]], "ivy.add": [[724, "ivy-add"]], "Formatting": [[727, "formatting"]], "Lint Checks": [[727, "lint-checks"], [727, "id2"]], "Setup Formatting Locally": [[727, "setup-formatting-locally"]], "Pre-commit": [[727, "pre-commit"]], "VS Code": [[727, "vs-code"]], "Common Issues with Pre-Commit": [[727, "common-issues-with-pre-commit"]], "Lint Formatting": [[727, "lint-formatting"]], "Error Handling": [[710, "error-handling"]], "Einsum parser": [[696, "module-ivy.utils.einsum_parser"]], "save": [[677, "save"]], "Gradients": [[731, "gradients"], [544, "gradients"], [11, "module-ivy.data_classes.array.gradients"], [34, "module-ivy.data_classes.container.gradients"], [308, "gradients"]], "Overview": [[731, "overview"]], "Example Usage of the Gradient API": [[731, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[731, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[731, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[731, "custom-gradient-functions"]], "Design of the Gradient API": [[731, "design-of-the-gradient-api"]], "Our policy on gradients": [[731, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[731, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[731, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[731, "framework-specific-considerations"]], "Backend Setting": [[718, "backend-setting"]], "Dynamic Backend Setting": [[718, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[718, "backend-and-frontend-version-support"]], "Data Types": [[722, "data-types"]], "Data Type Module": [[722, "data-type-module"]], "Data Type Promotion": [[722, "data-type-promotion"]], "Supported and Unsupported Data Types": [[722, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[722, "backend-data-type-bugs"]], "Data Type Casting Modes": [[722, "data-type-casting-modes"]], "Superset Data Type Support": [[722, "superset-data-type-support"]], "sum": [[672, "sum"]], "var": [[673, "var"]], "Helpers": [[682, "module-ivy.stateful.helpers"]], "Open Tasks": [[712, "open-tasks"]], "Function Formatting": [[712, "function-formatting"]], "Formatting checklist": [[712, "formatting-checklist"]], "Frontend APIs": [[712, "frontend-apis"]], "Where to place a frontend function": [[712, "where-to-place-a-frontend-function"]], "Frontend checklist": [[712, "frontend-checklist"]], "Ivy Experimental API": [[712, "ivy-experimental-api"]], "Extending the Ivy API": [[712, "extending-the-ivy-api"]], "Where to place a backend function": [[712, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[712, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Activations": [[680, "module-ivy.stateful.activations"], [535, "activations"], [3, "module-ivy.data_classes.array.activations"], [25, "module-ivy.data_classes.container.activations"], [301, "activations"]], "The Basics": [[714, "the-basics"]], "Getting Help": [[714, "getting-help"]], "ToDo List Issues": [[714, "todo-list-issues"]], "Managing Your Fork": [[714, "managing-your-fork"]], "Who To Ask": [[714, "who-to-ask"]], "With Command Line:": [[714, "with-command-line"]], "With Browser:": [[714, "with-browser"]], "Pull Requests": [[714, "pull-requests"]], "Small Commits Often": [[714, "small-commits-often"]], "Interactive Ivy Docker Container": [[714, "interactive-ivy-docker-container"]], "Running Tests Locally": [[714, "running-tests-locally"]], "With Docker": [[714, "with-docker"]], "Getting the most out of IDE": [[714, "getting-the-most-out-of-ide"]], "with PyCharm": [[714, "with-pycharm"]], "Ast helpers": [[692, "module-ivy.utils.backend.ast_helpers"]], "Running the Tests": [[716, "running-the-tests"]], "Using Terminal": [[716, "using-terminal"]], "Using the IDE": [[716, "using-the-ide"]], "Regenerating Test Failures": [[716, "regenerating-test-failures"]], "Test Skipping": [[716, "test-skipping"]], "any": [[675, "any"]], "Losses": [[685, "module-ivy.stateful.losses"], [547, "losses"], [15, "module-ivy.data_classes.array.losses"], [38, "module-ivy.data_classes.container.losses"], [311, "losses"]], "Sequential": [[689, "module-ivy.stateful.sequential"]], "all": [[674, "all"]], "Layers": [[684, "module-ivy.stateful.layers"], [545, "layers"], [36, "module-ivy.data_classes.container.layers"], [13, "module-ivy.data_classes.array.layers"], [309, "layers"]], "Arrays": [[717, "arrays"]], "Native Array": [[717, "native-array"]], "Array Handling": [[717, "array-handling"]], "Integrating custom classes with Ivy": [[717, "integrating-custom-classes-with-ivy"]], "Function Arguments": [[728, "function-arguments"]], "Positional and Keyword Arguments": [[728, "positional-and-keyword-arguments"]], "Input Arrays": [[728, "input-arrays"]], "out Argument": [[728, "out-argument"]], "dtype and device arguments": [[728, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[728, "numbers-in-operator-functions"]], "Integer Sequences": [[728, "integer-sequences"]], "Dynamic import": [[695, "module-ivy.utils.dynamic_import"]], "Building the Docs": [[709, "building-the-docs"]], "Building the Docs using Docker": [[709, "building-the-docs-using-docker"]], "Using convenience script": [[709, "using-convenience-script"]], "Using existing image on Docker Hub": [[709, "using-existing-image-on-docker-hub"]], "Building the image locally": [[709, "building-the-image-locally"]], "Building the Docs without Docker": [[709, "building-the-docs-without-docker"]], "Background": [[703, "background"]], "Example - Ivy Robot": [[708, "example-ivy-robot"]], "Module": [[686, "module-ivy.stateful.module"]], "Verbosity": [[701, "module-ivy.utils.verbosity"]], "Function Types": [[729, "function-types"]], "Primary Functions": [[729, "primary-functions"]], "Compositional Functions": [[729, "compositional-functions"]], "Mixed Functions": [[729, "mixed-functions"]], "Partial Mixed Functions": [[729, "partial-mixed-functions"]], "Standalone Functions": [[729, "standalone-functions"]], "Convenience Functions": [[729, "convenience-functions"]], "Backend": [[691, "backend"]], "Exceptions": [[697, "module-ivy.utils.exceptions"]], "Profiler": [[700, "module-ivy.utils.profiler"]], "Norms": [[687, "module-ivy.stateful.norms"], [551, "norms"], [17, "module-ivy.data_classes.array.norms"], [40, "module-ivy.data_classes.container.norms"], [315, "norms"]], "Deep Dive": [[715, "deep-dive"]], "ML Explosion": [[704, "ml-explosion"]], "Logging": [[699, "module-ivy.utils.logging"]], "load": [[676, "load"]], "swapaxes": [[618, "swapaxes"]], "zero_pad": [[621, "zero-pad"]], "random_normal": [[647, "random-normal"]], "all_nested_indices": [[625, "all-nested-indices"]], "squeeze": [[616, "squeeze"]], "randint": [[646, "randint"]], "permute_dims": [[611, "permute-dims"]], "maml_step": [[623, "maml-step"]], "reptile_step": [[624, "reptile-step"]], "unique_values": [[659, "unique-values"]], "Data-dependent output shape": [[659, null], [658, null], [657, null], [656, null], [554, null], [554, null], [554, null], [554, null]], "argmax": [[651, "argmax"]], "reshape": [[613, "reshape"]], "flip": [[610, "flip"]], "random_uniform": [[648, "random-uniform"]], "layer_norm": [[644, "layer-norm"]], "einsum": [[666, "einsum"]], "set_nest_at_index": [[642, "set-nest-at-index"]], "insert_into_nest_at_index": [[629, "insert-into-nest-at-index"]], "max": [[667, "max"]], "msort": [[661, "msort"]], "min": [[669, "min"]], "copy_nest": [[626, "copy-nest"]], "nested_any": [[635, "nested-any"]], "argsort": [[660, "argsort"]], "tile": [[619, "tile"]], "repeat": [[612, "repeat"]], "unique_inverse": [[658, "unique-inverse"]], "multinomial": [[645, "multinomial"]], "nonzero": [[654, "nonzero"]], "searchsorted": [[662, "searchsorted"]], "split": [[615, "split"]], "prune_empty": [[639, "prune-empty"]], "argmin": [[652, "argmin"]], "duplicate_array_index_chains": [[627, "duplicate-array-index-chains"]], "insert_into_nest_at_indices": [[630, "insert-into-nest-at-indices"]], "map_nest_at_index": [[632, "map-nest-at-index"]], "shuffle": [[650, "shuffle"]], "stack": [[617, "stack"]], "multi_index_nest": [[634, "multi-index-nest"]], "nested_map": [[637, "nested-map"]], "prune_nest_at_index": [[640, "prune-nest-at-index"]], "fomaml_step": [[622, "fomaml-step"]], "sort": [[663, "sort"]], "unique_counts": [[657, "unique-counts"]], "argwhere": [[653, "argwhere"]], "mean": [[668, "mean"]], "seed": [[649, "seed"]], "roll": [[614, "roll"]], "set_nest_at_indices": [[643, "set-nest-at-indices"]], "index_nest": [[628, "index-nest"]], "unstack": [[620, "unstack"]], "cumsum": [[665, "cumsum"]], "prune_nest_at_indices": [[641, "prune-nest-at-indices"]], "cumprod": [[664, "cumprod"]], "where": [[655, "where"]], "nested_argwhere": [[636, "nested-argwhere"]], "map_nest_at_indices": [[633, "map-nest-at-indices"]], "nested_multi_map": [[638, "nested-multi-map"]], "unique_all": [[656, "unique-all"]], "prod": [[670, "prod"]], "map": [[631, "map"]], "Random": [[552, "random"], [41, "module-ivy.data_classes.container.random"], [18, "module-ivy.data_classes.array.random"], [316, "random"]], "svdvals": [[595, "svdvals"]], "tensorsolve": [[597, "tensorsolve"]], "inner": [[581, "inner"]], "multi_head_attention": [[571, "multi-head-attention"]], "Searching": [[553, "searching"], [19, "module-ivy.data_classes.array.searching"], [42, "module-ivy.data_classes.container.searching"], [317, "searching"]], "diag": [[576, "diag"]], "conv_general_transpose": [[566, "conv-general-transpose"]], "expand_dims": [[609, "expand-dims"]], "vecdot": [[600, "vecdot"]], "Statistical": [[556, "statistical"], [45, "module-ivy.data_classes.container.statistical"], [22, "module-ivy.data_classes.array.statistical"], [321, "statistical"]], "matrix_transpose": [[588, "matrix-transpose"]], "eigh": [[579, "eigh"]], "trace": [[598, "trace"]], "Set": [[554, "set"], [43, "module-ivy.data_classes.container.set"], [20, "module-ivy.data_classes.array.set"], [318, "module-ivy.functional.ivy.experimental.set"]], "concat": [[607, "concat"]], "Sorting": [[555, "sorting"], [44, "module-ivy.data_classes.container.sorting"], [21, "module-ivy.data_classes.array.sorting"], [319, "sorting"]], "Nest": [[550, "nest"], [314, "module-ivy.functional.ivy.experimental.nest"]], "conv2d_transpose": [[562, "conv2d-transpose"]], "conv3d": [[563, "conv3d"]], "cross": [[574, "cross"]], "det": [[575, "det"]], "lu_factor": [[583, "lu-factor"]], "matmul": [[584, "matmul"]], "qr": [[591, "qr"]], "matrix_power": [[586, "matrix-power"]], "conv": [[558, "conv"]], "diagonal": [[577, "diagonal"]], "cross_entropy": [[604, "cross-entropy"]], "depthwise_conv2d": [[567, "depthwise-conv2d"]], "inv": [[582, "inv"]], "outer": [[589, "outer"]], "matrix_rank": [[587, "matrix-rank"]], "slogdet": [[592, "slogdet"]], "cholesky": [[573, "cholesky"]], "dropout": [[568, "dropout"]], "scaled_dot_product_attention": [[572, "scaled-dot-product-attention"]], "constant_pad": [[608, "constant-pad"]], "lstm_update": [[570, "lstm-update"]], "eig": [[578, "eig"], [357, "eig"]], "linear": [[569, "linear"]], "Utility": [[557, "utility"], [23, "module-ivy.data_classes.array.utility"], [46, "module-ivy.data_classes.container.utility"], [322, "utility"]], "binary_cross_entropy": [[603, "binary-cross-entropy"]], "matrix_norm": [[585, "matrix-norm"]], "sparse_cross_entropy": [[605, "sparse-cross-entropy"]], "eigvalsh": [[580, "eigvalsh"]], "conv1d": [[559, "conv1d"]], "conv_general_dilated": [[565, "conv-general-dilated"]], "conv3d_transpose": [[564, "conv3d-transpose"]], "solve": [[593, "solve"]], "vector_to_skew_symmetric_matrix": [[602, "vector-to-skew-symmetric-matrix"]], "vander": [[599, "vander"]], "clip": [[606, "clip"]], "vector_norm": [[601, "vector-norm"]], "Meta": [[549, "meta"], [313, "module-ivy.functional.ivy.experimental.meta"]], "conv2d": [[561, "conv2d"]], "pinv": [[590, "pinv"]], "svd": [[594, "svd"]], "tensordot": [[596, "tensordot"]], "conv1d_transpose": [[560, "conv1d-transpose"]], "set_min_denominator": [[493, "set-min-denominator"]], "lars_update": [[531, "lars-update"]], "Linear algebra": [[546, "linear-algebra"], [37, "module-ivy.data_classes.container.linear_algebra"], [14, "module-ivy.data_classes.array.linear_algebra"], [310, "linear-algebra"]], "set_array_mode": [[488, "set-array-mode"]], "Parameter": [[488, "parameter"], [489, "parameter"], [540, "parameter"], [494, "parameter"], [497, "parameter"], [495, "parameter"], [498, "parameter"], [543, "parameter"], [543, "id1"], [543, "id2"], [543, "id3"], [543, "id4"], [543, "id5"], [164, "parameter"]], "unset_min_base": [[514, "unset-min-base"]], "value_is_nan": [[522, "value-is-nan"]], "supports_inplace_updates": [[504, "supports-inplace-updates"]], "Creation": [[538, "creation"], [28, "module-ivy.data_classes.container.creation"], [5, "module-ivy.data_classes.array.creation"], [303, "creation"]], "unset_tmp_dir": [[521, "unset-tmp-dir"]], "unset_precise_mode": [[517, "unset-precise-mode"]], "stable_divide": [[501, "stable-divide"]], "Constants": [[536, "module-ivy.functional.ivy.constants"], [302, "module-ivy.functional.ivy.experimental.constants"]], "set_tmp_dir": [[499, "set-tmp-dir"]], "adam_update": [[525, "adam-update"]], "set_exception_trace_mode": [[489, "set-exception-trace-mode"]], "to_numpy": [[508, "to-numpy"]], "try_else_none": [[510, "try-else-none"]], "to_native_shape": [[507, "to-native-shape"]], "set_item": [[491, "set-item"]], "unset_exception_trace_mode": [[512, "unset-exception-trace-mode"]], "gradient_descent_update": [[528, "gradient-descent-update"]], "lamb_update": [[530, "lamb-update"]], "to_scalar": [[509, "to-scalar"]], "grad": [[527, "grad"]], "Device": [[540, "device"], [7, "module-ivy.data_classes.array.device"], [30, "module-ivy.data_classes.container.device"], [305, "module-ivy.functional.ivy.experimental.device"]], "set_min_base": [[492, "set-min-base"]], "unset_array_mode": [[511, "unset-array-mode"]], "stop_gradient": [[533, "stop-gradient"]], "optimizer_update": [[532, "optimizer-update"]], "Elementwise": [[541, "elementwise"], [56, "module-ivy.data_classes.nested_array.elementwise"], [8, "module-ivy.data_classes.array.elementwise"], [31, "module-ivy.data_classes.container.elementwise"], [306, "elementwise"]], "shape": [[500, "shape"]], "set_nestable_mode": [[494, "set-nestable-mode"]], "set_shape_array_mode": [[497, "set-shape-array-mode"]], "Manipulation": [[548, "manipulation"], [39, "module-ivy.data_classes.container.manipulation"], [16, "module-ivy.data_classes.array.manipulation"], [312, "manipulation"]], "vmap": [[523, "vmap"]], "set_precise_mode": [[495, "set-precise-mode"]], "Data type": [[539, "data-type"], [29, "module-ivy.data_classes.container.data_type"], [6, "module-ivy.data_classes.array.data_type"], [304, "module-ivy.functional.ivy.experimental.data_type"]], "set_show_func_wrapper_trace_mode": [[498, "set-show-func-wrapper-trace-mode"]], "General": [[543, "general"], [10, "module-ivy.data_classes.array.general"], [33, "module-ivy.data_classes.container.general"], [307, "general"]], "unset_inplace_mode": [[513, "unset-inplace-mode"]], "Control flow ops": [[537, "control-flow-ops"]], "strides": [[503, "strides"]], "set_inplace_mode": [[490, "set-inplace-mode"]], "to_list": [[506, "to-list"]], "adam_step": [[524, "adam-step"]], "unset_min_denominator": [[515, "unset-min-denominator"]], "Experimental": [[542, "experimental"], [9, "module-ivy.data_classes.array.experimental"], [32, "module-ivy.data_classes.container.experimental"]], "unset_nestable_mode": [[516, "unset-nestable-mode"]], "unset_shape_array_mode": [[519, "unset-shape-array-mode"]], "to_ivy_shape": [[505, "to-ivy-shape"]], "set_queue_timeout": [[496, "set-queue-timeout"]], "value_and_grad": [[534, "value-and-grad"]], "stable_pow": [[502, "stable-pow"]], "unset_queue_timeout": [[518, "unset-queue-timeout"]], "jac": [[529, "jac"]], "unset_show_func_wrapper_trace_mode": [[520, "unset-show-func-wrapper-trace-mode"]], "execute_with_gradients": [[526, "execute-with-gradients"]], "einops_reduce": [[456, "einops-reduce"]], "gather": [[462, "gather"]], "clip_matrix_norm": [[450, "clip-matrix-norm"]], "einops_repeat": [[457, "einops-repeat"]], "corrcoef": [[433, "corrcoef"]], "function_supported_devices_and_dtypes": [[460, "function-supported-devices-and-dtypes"]], "get_referrers_recursive": [[467, "get-referrers-recursive"]], "lexsort": [[427, "lexsort"]], "is_native_sparse_array": [[429, "is-native-sparse-array"]], "cummin": [[436, "cummin"]], "itemsize": [[481, "itemsize"]], "inplace_variables_supported": [[473, "inplace-variables-supported"]], "fourier_encode": [[459, "fourier-encode"]], "native_sparse_array": [[430, "native-sparse-array"]], "inplace_decrement": [[470, "inplace-decrement"]], "isscalar": [[480, "isscalar"]], "array_equal": [[447, "array-equal"]], "match_kwargs": [[482, "match-kwargs"]], "scatter_nd": [[487, "scatter-nd"]], "nanmedian": [[441, "nanmedian"]], "arg_names": [[446, "arg-names"]], "einops_rearrange": [[455, "einops-rearrange"]], "native_sparse_array_to_indices_values_and_shape": [[431, "native-sparse-array-to-indices-values-and-shape"]], "current_backend_str": [[453, "current-backend-str"]], "multiprocessing": [[483, "multiprocessing"]], "inplace_increment": [[471, "inplace-increment"]], "exists": [[458, "exists"]], "is_array": [[474, "is-array"]], "is_native_array": [[478, "is-native-array"]], "clip_vector_norm": [[451, "clip-vector-norm"]], "quantile": [[442, "quantile"]], "median": [[439, "median"]], "get_item": [[465, "get-item"]], "is_ivy_container": [[476, "is-ivy-container"]], "is_ivy_array": [[475, "is-ivy-array"]], "default": [[454, "default"]], "scatter_flat": [[486, "scatter-flat"]], "all_equal": [[444, "all-equal"]], "is_ivy_nested_array": [[477, "is-ivy-nested-array"]], "print_all_arrays_in_memory": [[485, "print-all-arrays-in-memory"]], "has_nans": [[468, "has-nans"]], "function_unsupported_devices_and_dtypes": [[461, "function-unsupported-devices-and-dtypes"]], "optional_get_element": [[443, "optional-get-element"]], "isin": [[479, "isin"]], "get_num_dims": [[466, "get-num-dims"]], "inplace_arrays_supported": [[469, "inplace-arrays-supported"]], "num_arrays_in_memory": [[484, "num-arrays-in-memory"]], "is_ivy_sparse_array": [[428, "is-ivy-sparse-array"]], "nanmean": [[440, "nanmean"]], "cov": [[434, "cov"]], "arg_info": [[445, "arg-info"]], "histogram": [[437, "histogram"]], "container_types": [[452, "container-types"]], "assert_supports_inplace": [[448, "assert-supports-inplace"]], "get_all_arrays_in_memory": [[464, "get-all-arrays-in-memory"]], "bincount": [[432, "bincount"]], "cummax": [[435, "cummax"]], "igamma": [[438, "igamma"]], "gather_nd": [[463, "gather-nd"]], "inplace_update": [[472, "inplace-update"]], "cache_fn": [[449, "cache-fn"]], "Image": [[12, "module-ivy.data_classes.array.image"], [35, "module-ivy.data_classes.container.image"]], "Tucker tensor": [[50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Functions": [[58, "functions"]], "Data classes": [[57, "data-classes"]], "Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [2, "sharp-bits"]], "Conversions": [[4, "module-ivy.data_classes.array.conversions"], [27, "module-ivy.data_classes.container.conversions"]], "gelu": [[59, "gelu"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Wrapping": [[47, "module-ivy.data_classes.container.wrapping"], [24, "module-ivy.data_classes.array.wrapping"]], "Base": [[26, "module-ivy.data_classes.container.base"], [55, "module-ivy.data_classes.nested_array.base"], [48, "module-ivy.data_classes.factorized_tensor.base"]], "hardswish": [[60, "hardswish"]], "Cp tensor": [[49, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "Container": [[52, "container"]], "Factorized tensor": [[53, "factorized-tensor"]], "Array": [[51, "array"]], "Nested array": [[54, "nested-array"]], "soft_thresholding": [[407, "soft-thresholding"]], "svd_flip": [[370, "svd-flip"]], "batch_norm": [[414, "batch-norm"]], "moveaxis": [[399, "moveaxis"]], "partial_tensor_to_vec": [[402, "partial-tensor-to-vec"]], "instance_norm": [[416, "instance-norm"]], "l2_normalize": [[418, "l2-normalize"]], "put_along_axis": [[405, "put-along-axis"]], "bernoulli": [[420, "bernoulli"]], "choose": [[384, "choose"]], "fliplr": [[391, "fliplr"]], "invert_permutation": [[426, "invert-permutation"]], "hstack": [[396, "hstack"]], "flipud": [[392, "flipud"]], "vstack": [[413, "vstack"]], "gamma": [[423, "gamma"]], "multi_dot": [[367, "multi-dot"]], "soft_margin_loss": [[377, "soft-margin-loss"]], "atleast_2d": [[381, "atleast-2d"]], "fold": [[393, "fold"]], "dstack": [[387, "dstack"]], "partial_unfold": [[403, "partial-unfold"]], "poisson": [[424, "poisson"]], "log_poisson_loss": [[375, "log-poisson-loss"]], "huber_loss": [[373, "huber-loss"]], "expand": [[388, "expand"]], "dsplit": [[386, "dsplit"]], "concat_from_sequence": [[385, "concat-from-sequence"]], "beta": [[421, "beta"]], "dirichlet": [[422, "dirichlet"]], "truncated_svd": [[371, "truncated-svd"]], "unfold": [[410, "unfold"]], "group_norm": [[415, "group-norm"]], "unravel_index": [[425, "unravel-index"]], "partial_vec_to_tensor": [[404, "partial-vec-to-tensor"]], "fill_diagonal": [[389, "fill-diagonal"]], "as_strided": [[378, "as-strided"]], "l1_normalize": [[417, "l1-normalize"]], "i0": [[397, "i0"]], "broadcast_shapes": [[383, "broadcast-shapes"]], "heaviside": [[394, "heaviside"]], "l1_loss": [[374, "l1-loss"]], "top_k": [[409, "top-k"]], "flatten": [[390, "flatten"]], "tucker": [[372, "tucker"]], "associative_scan": [[379, "associative-scan"]], "vsplit": [[412, "vsplit"]], "unique_consecutive": [[411, "unique-consecutive"]], "partial_tucker": [[369, "partial-tucker"]], "take_along_axis": [[408, "take-along-axis"]], "lp_normalize": [[419, "lp-normalize"]], "atleast_3d": [[382, "atleast-3d"]], "multi_mode_dot": [[368, "multi-mode-dot"]], "rot90": [[406, "rot90"]], "smooth_l1_loss": [[376, "smooth-l1-loss"]], "pad": [[400, "pad"]], "atleast_1d": [[380, "atleast-1d"]], "hsplit": [[395, "hsplit"]], "matricize": [[398, "matricize"]], "partial_fold": [[401, "partial-fold"]], "mode_dot": [[366, "mode-dot"]], "Sparse array": [[320, "sparse-array"]], "khatri_rao": [[361, "khatri-rao"]], "rfftn": [[352, "rfftn"]], "nearest_interpolate": [[349, "nearest-interpolate"]], "diagflat": [[355, "diagflat"]], "max_pool3d": [[347, "max-pool3d"]], "dropout1d": [[332, "dropout1d"]], "max_unpool1d": [[348, "max-unpool1d"]], "interpolate": [[344, "interpolate"]], "avg_pool1d": [[327, "avg-pool1d"]], "eigvals": [[359, "eigvals"]], "dot": [[356, "dot"]], "adaptive_avg_pool2d": [[324, "adaptive-avg-pool2d"]], "fft2": [[337, "fft2"]], "max_pool2d": [[346, "max-pool2d"]], "dct": [[330, "dct"]], "embedding": [[335, "embedding"]], "make_svd_non_negative": [[364, "make-svd-non-negative"]], "avg_pool2d": [[328, "avg-pool2d"]], "kron": [[362, "kron"]], "cond": [[354, "cond"]], "generate_einsum_equation": [[338, "generate-einsum-equation"]], "idct": [[340, "idct"]], "matrix_exp": [[365, "matrix-exp"]], "dropout2d": [[333, "dropout2d"]], "ifft": [[341, "ifft"]], "pool": [[350, "pool"]], "avg_pool3d": [[329, "avg-pool3d"]], "area_interpolate": [[326, "area-interpolate"]], "fft": [[336, "fft"]], "ifftn": [[342, "ifftn"]], "kronecker": [[363, "kronecker"]], "dft": [[331, "dft"]], "initialize_tucker": [[360, "initialize-tucker"]], "reduce_window": [[351, "reduce-window"]], "adaptive_max_pool2d": [[325, "adaptive-max-pool2d"]], "eigh_tridiagonal": [[358, "eigh-tridiagonal"]], "dropout3d": [[334, "dropout3d"]], "max_pool1d": [[345, "max-pool1d"]], "adjoint": [[353, "adjoint"]], "interp": [[343, "interp"]], "adaptive_avg_pool1d": [[323, "adaptive-avg-pool1d"]], "get_interpolate_kernel": [[339, "get-interpolate-kernel"]], "ndenumerate": [[265, "ndenumerate"]], "logit": [[250, "logit"]], "trilu": [[270, "trilu"]], "fmax": [[283, "fmax"]], "isclose": [[287, "isclose"]], "zeta": [[298, "zeta"]], "sequence_length": [[255, "sequence-length"]], "conj": [[276, "conj"]], "binarizer": [[275, "binarizer"]], "count_nonzero": [[278, "count-nonzero"]], "diff": [[279, "diff"]], "unsorted_segment_min": [[271, "unsorted-segment-min"]], "float_power": [[282, "float-power"]], "allclose": [[274, "allclose"]], "blackman_window": [[258, "blackman-window"]], "random_tucker": [[268, "random-tucker"]], "indices": [[262, "indices"]], "unsorted_segment_sum": [[272, "unsorted-segment-sum"]], "kaiser_bessel_derived_window": [[263, "kaiser-bessel-derived-window"]], "trunc": [[247, "trunc"]], "sparsify_tensor": [[296, "sparsify-tensor"]], "prelu": [[252, "prelu"]], "nansum": [[292, "nansum"]], "lerp": [[289, "lerp"]], "random_cp": [[267, "random-cp"]], "hann_window": [[261, "hann-window"]], "trunc_divide": [[248, "trunc-divide"]], "bind_custom_gradient_function": [[300, "bind-custom-gradient-function"]], "copysign": [[277, "copysign"]], "logsigmoid": [[251, "logsigmoid"]], "digamma": [[280, "digamma"]], "ldexp": [[288, "ldexp"]], "relu6": [[253, "relu6"]], "thresholded_relu": [[257, "thresholded-relu"]], "vorbis_window": [[273, "vorbis-window"]], "hamming_window": [[260, "hamming-window"]], "sinc": [[295, "sinc"]], "tril_indices": [[269, "tril-indices"]], "lgamma": [[290, "lgamma"]], "eye_like": [[259, "eye-like"]], "frexp": [[284, "frexp"]], "modf": [[291, "modf"]], "trapz": [[246, "trapz"]], "xlogy": [[297, "xlogy"]], "tanh": [[245, "tanh"]], "kaiser_window": [[264, "kaiser-window"]], "tan": [[244, "tan"]], "hypot": [[286, "hypot"]], "reduce": [[299, "reduce"]], "elu": [[249, "elu"]], "selu": [[254, "selu"]], "silu": [[256, "silu"]], "ndindex": [[266, "ndindex"]], "gradient": [[285, "gradient"]], "signbit": [[294, "signbit"]], "nextafter": [[293, "nextafter"]], "fix": [[281, "fix"]], "is_int_dtype": [[129, "is-int-dtype"]], "infer_default_dtype": [[123, "infer-default-dtype"]], "get_all_ivy_arrays_on_dev": [[155, "get-all-ivy-arrays-on-dev"]], "is_native_dtype": [[130, "is-native-dtype"]], "dev_util": [[152, "dev-util"]], "asin": [[179, "asin"]], "print_all_ivy_arrays_on_dev": [[162, "print-all-ivy-arrays-on-dev"]], "unset_default_device": [[171, "unset-default-device"]], "result_type": [[134, "result-type"]], "set_default_int_dtype": [[138, "set-default-int-dtype"]], "unset_default_uint_dtype": [[145, "unset-default-uint-dtype"]], "invalid_dtype": [[124, "invalid-dtype"]], "is_complex_dtype": [[126, "is-complex-dtype"]], "valid_dtype": [[146, "valid-dtype"]], "default_device": [[150, "default-device"]], "tpu_is_available": [[170, "tpu-is-available"]], "angle": [[178, "angle"]], "acos": [[175, "acos"]], "iinfo": [[122, "iinfo"]], "type_promote_arrays": [[140, "type-promote-arrays"]], "unset_default_complex_dtype": [[141, "unset-default-complex-dtype"]], "function_unsupported_devices": [[154, "function-unsupported-devices"]], "num_cpu_cores": [[158, "num-cpu-cores"]], "split_func_call": [[167, "split-func-call"]], "acosh": [[176, "acosh"]], "promote_types_of_inputs": [[133, "promote-types-of-inputs"]], "dev": [[151, "dev"]], "is_bool_dtype": [[125, "is-bool-dtype"]], "set_default_float_dtype": [[137, "set-default-float-dtype"]], "split_factor": [[166, "split-factor"]], "unset_default_dtype": [[142, "unset-default-dtype"]], "unset_default_float_dtype": [[143, "unset-default-float-dtype"]], "gpu_is_available": [[156, "gpu-is-available"]], "set_split_factor": [[165, "set-split-factor"]], "num_gpus": [[159, "num-gpus"]], "set_default_dtype": [[136, "set-default-dtype"]], "set_soft_device_mode": [[164, "set-soft-device-mode"]], "add": [[177, "add"]], "is_uint_dtype": [[131, "is-uint-dtype"]], "percent_used_mem_on_dev": [[161, "percent-used-mem-on-dev"]], "function_supported_devices": [[153, "function-supported-devices"]], "handle_soft_device_variable": [[157, "handle-soft-device-variable"]], "to_device": [[168, "to-device"]], "unset_soft_device_mode": [[172, "unset-soft-device-mode"]], "atan": [[181, "atan"]], "total_mem_on_dev": [[169, "total-mem-on-dev"]], "clear_cached_mem_on_dev": [[149, "clear-cached-mem-on-dev"]], "set_default_uint_dtype": [[139, "set-default-uint-dtype"]], "unset_default_int_dtype": [[144, "unset-default-int-dtype"]], "abs": [[174, "abs"]], "is_hashable_dtype": [[128, "is-hashable-dtype"]], "promote_types": [[132, "promote-types"]], "asinh": [[180, "asinh"]], "is_float_dtype": [[127, "is-float-dtype"]], "atan2": [[182, "atan2"]], "as_native_dev": [[148, "as-native-dev"]], "set_default_complex_dtype": [[135, "set-default-complex-dtype"]], "set_default_device": [[163, "set-default-device"]], "num_ivy_arrays_on_dev": [[160, "num-ivy-arrays-on-dev"]], "used_mem_on_dev": [[173, "used-mem-on-dev"]], "as_ivy_dev": [[147, "as-ivy-dev"]], "bitwise_left_shift": [[186, "bitwise-left-shift"]], "rad2deg": [[233, "rad2deg"]], "isreal": [[211, "isreal"]], "not_equal": [[230, "not-equal"]], "isnan": [[210, "isnan"]], "sinh": [[240, "sinh"]], "logical_and": [[221, "logical-and"]], "reciprocal": [[235, "reciprocal"]], "pow": [[232, "pow"]], "square": [[242, "square"]], "maximum": [[225, "maximum"]], "subtract": [[243, "subtract"]], "fmod": [[203, "fmod"]], "real": [[234, "real"]], "bitwise_or": [[187, "bitwise-or"]], "isinf": [[209, "isinf"]], "less_equal": [[214, "less-equal"]], "greater_equal": [[206, "greater-equal"]], "ceil": [[190, "ceil"]], "log1p": [[217, "log1p"]], "nan_to_num": [[228, "nan-to-num"]], "atanh": [[183, "atanh"]], "bitwise_invert": [[185, "bitwise-invert"]], "round": [[237, "round"]], "cos": [[191, "cos"]], "bitwise_right_shift": [[188, "bitwise-right-shift"]], "equal": [[195, "equal"]], "bitwise_and": [[184, "bitwise-and"]], "logical_or": [[223, "logical-or"]], "positive": [[231, "positive"]], "sin": [[239, "sin"]], "gcd": [[204, "gcd"]], "lcm": [[212, "lcm"]], "floor": [[200, "floor"]], "logical_xor": [[224, "logical-xor"]], "greater": [[205, "greater"]], "bitwise_xor": [[189, "bitwise-xor"]], "fmin": [[202, "fmin"]], "less": [[213, "less"]], "log2": [[218, "log2"]], "log": [[215, "log"]], "log10": [[216, "log10"]], "logical_not": [[222, "logical-not"]], "minimum": [[226, "minimum"]], "isfinite": [[208, "isfinite"]], "negative": [[229, "negative"]], "sqrt": [[241, "sqrt"]], "logaddexp2": [[220, "logaddexp2"]], "expm1": [[199, "expm1"]], "exp2": [[198, "exp2"]], "multiply": [[227, "multiply"]], "remainder": [[236, "remainder"]], "sign": [[238, "sign"]], "cosh": [[192, "cosh"]], "imag": [[207, "imag"]], "erf": [[196, "erf"]], "logaddexp": [[219, "logaddexp"]], "deg2rad": [[193, "deg2rad"]], "exp": [[197, "exp"]], "floor_divide": [[201, "floor-divide"]], "divide": [[194, "divide"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[3, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[3, "module-ivy.data_classes.array.activations"], [4, "module-ivy.data_classes.array.conversions"], [5, "module-ivy.data_classes.array.creation"], [6, "module-ivy.data_classes.array.data_type"], [7, "module-ivy.data_classes.array.device"], [8, "module-ivy.data_classes.array.elementwise"], [9, "module-ivy.data_classes.array.experimental"], [9, "module-ivy.data_classes.array.experimental.activations"], [9, "module-ivy.data_classes.array.experimental.conversions"], [9, "module-ivy.data_classes.array.experimental.creation"], [9, "module-ivy.data_classes.array.experimental.data_type"], [9, "module-ivy.data_classes.array.experimental.device"], [9, "module-ivy.data_classes.array.experimental.elementwise"], [9, "module-ivy.data_classes.array.experimental.general"], [9, "module-ivy.data_classes.array.experimental.gradients"], [9, "module-ivy.data_classes.array.experimental.image"], [9, "module-ivy.data_classes.array.experimental.layers"], [9, "module-ivy.data_classes.array.experimental.linear_algebra"], [9, "module-ivy.data_classes.array.experimental.losses"], [9, "module-ivy.data_classes.array.experimental.manipulation"], [9, "module-ivy.data_classes.array.experimental.norms"], [9, "module-ivy.data_classes.array.experimental.random"], [9, "module-ivy.data_classes.array.experimental.searching"], [9, "module-ivy.data_classes.array.experimental.set"], [9, "module-ivy.data_classes.array.experimental.sorting"], [9, "module-ivy.data_classes.array.experimental.statistical"], [9, "module-ivy.data_classes.array.experimental.utility"], [10, "module-ivy.data_classes.array.general"], [11, "module-ivy.data_classes.array.gradients"], [12, "module-ivy.data_classes.array.image"], [13, "module-ivy.data_classes.array.layers"], [14, "module-ivy.data_classes.array.linear_algebra"], [15, "module-ivy.data_classes.array.losses"], [16, "module-ivy.data_classes.array.manipulation"], [17, "module-ivy.data_classes.array.norms"], [18, "module-ivy.data_classes.array.random"], [19, "module-ivy.data_classes.array.searching"], [20, "module-ivy.data_classes.array.set"], [21, "module-ivy.data_classes.array.sorting"], [22, "module-ivy.data_classes.array.statistical"], [23, "module-ivy.data_classes.array.utility"], [24, "module-ivy.data_classes.array.wrapping"], [25, "module-ivy.data_classes.container.activations"], [26, "module-ivy.data_classes.container.base"], [27, "module-ivy.data_classes.container.conversions"], [28, "module-ivy.data_classes.container.creation"], [29, "module-ivy.data_classes.container.data_type"], [30, "module-ivy.data_classes.container.device"], [31, "module-ivy.data_classes.container.elementwise"], [32, "module-ivy.data_classes.container.experimental"], [32, "module-ivy.data_classes.container.experimental.activations"], [32, "module-ivy.data_classes.container.experimental.conversions"], [32, "module-ivy.data_classes.container.experimental.creation"], [32, "module-ivy.data_classes.container.experimental.data_type"], [32, "module-ivy.data_classes.container.experimental.device"], [32, "module-ivy.data_classes.container.experimental.elementwise"], [32, "module-ivy.data_classes.container.experimental.general"], [32, "module-ivy.data_classes.container.experimental.gradients"], [32, "module-ivy.data_classes.container.experimental.image"], [32, "module-ivy.data_classes.container.experimental.layers"], [32, "module-ivy.data_classes.container.experimental.linear_algebra"], [32, "module-ivy.data_classes.container.experimental.losses"], [32, "module-ivy.data_classes.container.experimental.manipulation"], [32, "module-ivy.data_classes.container.experimental.norms"], [32, "module-ivy.data_classes.container.experimental.random"], [32, "module-ivy.data_classes.container.experimental.searching"], [32, "module-ivy.data_classes.container.experimental.set"], [32, "module-ivy.data_classes.container.experimental.sorting"], [32, "module-ivy.data_classes.container.experimental.statistical"], [32, "module-ivy.data_classes.container.experimental.utility"], [33, "module-ivy.data_classes.container.general"], [34, "module-ivy.data_classes.container.gradients"], [35, "module-ivy.data_classes.container.image"], [36, "module-ivy.data_classes.container.layers"], [37, "module-ivy.data_classes.container.linear_algebra"], [38, "module-ivy.data_classes.container.losses"], [39, "module-ivy.data_classes.container.manipulation"], [40, "module-ivy.data_classes.container.norms"], [41, "module-ivy.data_classes.container.random"], [42, "module-ivy.data_classes.container.searching"], [43, "module-ivy.data_classes.container.set"], [44, "module-ivy.data_classes.container.sorting"], [45, "module-ivy.data_classes.container.statistical"], [46, "module-ivy.data_classes.container.utility"], [47, "module-ivy.data_classes.container.wrapping"], [48, "module-ivy.data_classes.factorized_tensor.base"], [49, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [51, "module-ivy.data_classes.array.array"], [52, "module-ivy.data_classes.container.container"], [54, "module-ivy.data_classes.nested_array.nested_array"], [55, "module-ivy.data_classes.nested_array.base"], [56, "module-ivy.data_classes.nested_array.elementwise"], [301, "module-ivy.functional.ivy.experimental.activations"], [302, "module-ivy.functional.ivy.experimental.constants"], [303, "module-ivy.functional.ivy.experimental.creation"], [304, "module-ivy.functional.ivy.experimental.data_type"], [305, "module-ivy.functional.ivy.experimental.device"], [306, "module-ivy.functional.ivy.experimental.elementwise"], [307, "module-ivy.functional.ivy.experimental.general"], [308, "module-ivy.functional.ivy.experimental.gradients"], [309, "module-ivy.functional.ivy.experimental.layers"], [310, "module-ivy.functional.ivy.experimental.linear_algebra"], [311, "module-ivy.functional.ivy.experimental.losses"], [312, "module-ivy.functional.ivy.experimental.manipulation"], [313, "module-ivy.functional.ivy.experimental.meta"], [314, "module-ivy.functional.ivy.experimental.nest"], [315, "module-ivy.functional.ivy.experimental.norms"], [316, "module-ivy.functional.ivy.experimental.random"], [317, "module-ivy.functional.ivy.experimental.searching"], [318, "module-ivy.functional.ivy.experimental.set"], [319, "module-ivy.functional.ivy.experimental.sorting"], [320, "module-ivy.functional.ivy.experimental.sparse_array"], [321, "module-ivy.functional.ivy.experimental.statistical"], [322, "module-ivy.functional.ivy.experimental.utility"], [535, "module-ivy.functional.ivy.activations"], [536, "module-ivy.functional.ivy.constants"], [537, "module-ivy.functional.ivy.control_flow_ops"], [538, "module-ivy.functional.ivy.creation"], [539, "module-ivy.functional.ivy.data_type"], [540, "module-ivy.functional.ivy.device"], [541, "module-ivy.functional.ivy.elementwise"], [542, "module-ivy.functional.ivy.experimental"], [543, "module-ivy.functional.ivy.general"], [544, "module-ivy.functional.ivy.gradients"], [545, "module-ivy.functional.ivy.layers"], [546, "module-ivy.functional.ivy.linear_algebra"], [547, "module-ivy.functional.ivy.losses"], [548, "module-ivy.functional.ivy.manipulation"], [549, "module-ivy.functional.ivy.meta"], [550, "module-ivy.functional.ivy.nest"], [551, "module-ivy.functional.ivy.norms"], [552, "module-ivy.functional.ivy.random"], [553, "module-ivy.functional.ivy.searching"], [554, "module-ivy.functional.ivy.set"], [555, "module-ivy.functional.ivy.sorting"], [556, "module-ivy.functional.ivy.statistical"], [557, "module-ivy.functional.ivy.utility"], [680, "module-ivy.stateful.activations"], [681, "module-ivy.stateful.converters"], [682, "module-ivy.stateful.helpers"], [683, "module-ivy.stateful.initializers"], [684, "module-ivy.stateful.layers"], [685, "module-ivy.stateful.losses"], [686, "module-ivy.stateful.module"], [687, "module-ivy.stateful.norms"], [688, "module-ivy.stateful.optimizers"], [689, "module-ivy.stateful.sequential"], [690, "module-ivy.utils.assertions"], [691, "module-ivy.utils.backend"], [692, "module-ivy.utils.backend.ast_helpers"], [693, "module-ivy.utils.backend.handler"], [694, "module-ivy.utils.backend.sub_backend_handler"], [695, "module-ivy.utils.dynamic_import"], [696, "module-ivy.utils.einsum_parser"], [697, "module-ivy.utils.exceptions"], [698, "module-ivy.utils.inspection"], [699, "module-ivy.utils.logging"], [700, "module-ivy.utils.profiler"], [701, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[4, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[5, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[6, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[7, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[7, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[7, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[8, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[9, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[9, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[9, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[9, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[9, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[9, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[9, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[9, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[9, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[9, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[9, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[9, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[9, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[9, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[9, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[9, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[9, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[9, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[9, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[9, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[10, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[11, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[12, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[12, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[12, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[13, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[14, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[15, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[16, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[17, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[18, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[18, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[18, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[19, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[20, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[20, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[20, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[21, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[22, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[23, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[24, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[25, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[26, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[26, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[27, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[28, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[29, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[30, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[30, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[31, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[32, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[32, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[32, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[32, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[32, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[32, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[32, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[32, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[32, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[32, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[32, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[32, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[32, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[32, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[32, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[32, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[32, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[32, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[32, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[32, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[33, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[34, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[35, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[35, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[35, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[36, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[37, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[38, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[39, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[40, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[41, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[41, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[42, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[43, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[43, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[43, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[44, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[45, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[46, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[47, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[48, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[49, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[51, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[51, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[52, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[52, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[54, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[55, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[56, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[59, "ivy.gelu"], [535, "ivy.gelu"]], "gelu() (ivy.array method)": [[59, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[59, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[60, "ivy.hardswish"], [535, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[60, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[60, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[61, "ivy.leaky_relu"], [535, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[61, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[61, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[62, "ivy.log_softmax"], [535, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[62, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[62, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[63, "ivy.mish"], [535, "ivy.mish"]], "mish() (ivy.array method)": [[63, "ivy.Array.mish"]], "mish() (ivy.container method)": [[63, "ivy.Container.mish"]], "relu() (in module ivy)": [[64, "ivy.relu"], [535, "ivy.relu"]], "relu() (ivy.array method)": [[64, "ivy.Array.relu"]], "relu() (ivy.container method)": [[64, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[65, "ivy.sigmoid"], [535, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[65, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[65, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[66, "ivy.softmax"], [535, "ivy.softmax"]], "softmax() (ivy.array method)": [[66, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[66, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[67, "ivy.softplus"], [535, "ivy.softplus"]], "softplus() (ivy.array method)": [[67, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[67, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[68, "ivy.softsign"], [535, "ivy.softsign"]], "cast_bool() (in module ivy)": [[69, "ivy.cast_bool"], [537, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[70, "ivy.cmp_is"], [537, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[71, "ivy.cmp_isnot"], [537, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[72, "ivy.for_loop"], [537, "ivy.for_loop"]], "if_else() (in module ivy)": [[73, "ivy.if_else"], [537, "ivy.if_else"]], "try_except() (in module ivy)": [[74, "ivy.try_except"], [537, "ivy.try_except"]], "while_loop() (in module ivy)": [[75, "ivy.while_loop"], [537, "ivy.while_loop"]], "arange() (in module ivy)": [[76, "ivy.arange"], [538, "ivy.arange"]], "array() (in module ivy)": [[77, "ivy.array"], [538, "ivy.array"]], "asarray() (in module ivy)": [[78, "ivy.asarray"], [538, "ivy.asarray"]], "asarray() (ivy.array method)": [[78, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[78, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[79, "ivy.asarray_handle_nestable"], [538, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[80, "ivy.asarray_infer_device"], [538, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[81, "ivy.asarray_infer_dtype"], [538, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[82, "ivy.asarray_inputs_to_native_shapes"], [538, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[83, "ivy.asarray_to_native_arrays_and_back"], [538, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[84, "ivy.copy_array"], [538, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[84, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[84, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[85, "ivy.empty"], [538, "ivy.empty"]], "empty_like() (in module ivy)": [[86, "ivy.empty_like"], [538, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[86, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[86, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[87, "ivy.eye"], [538, "ivy.eye"]], "from_dlpack() (in module ivy)": [[88, "ivy.from_dlpack"], [538, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[88, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[88, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[89, "ivy.frombuffer"], [538, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[89, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[90, "ivy.full"], [538, "ivy.full"]], "full_like() (in module ivy)": [[91, "ivy.full_like"], [538, "ivy.full_like"]], "full_like() (ivy.array method)": [[91, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[91, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[92, "ivy.linspace"], [538, "ivy.linspace"]], "linspace() (ivy.array method)": [[92, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[92, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[93, "ivy.logspace"], [538, "ivy.logspace"]], "logspace() (ivy.array method)": [[93, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[93, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[94, "ivy.meshgrid"], [538, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[94, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[94, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[95, "ivy.native_array"], [538, "ivy.native_array"]], "native_array() (ivy.array method)": [[95, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[95, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[96, "ivy.one_hot"], [538, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[96, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[96, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[97, "ivy.ones"], [538, "ivy.ones"]], "ones_like() (in module ivy)": [[98, "ivy.ones_like"], [538, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[98, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[98, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[99, "ivy.tril"], [538, "ivy.tril"]], "tril() (ivy.array method)": [[99, "ivy.Array.tril"]], "tril() (ivy.container method)": [[99, "ivy.Container.tril"]], "triu() (in module ivy)": [[100, "ivy.triu"], [538, "ivy.triu"]], "triu() (ivy.array method)": [[100, "ivy.Array.triu"]], "triu() (ivy.container method)": [[100, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[101, "ivy.triu_indices"], [538, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[101, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[102, "ivy.zeros"], [538, "ivy.zeros"]], "zeros_like() (in module ivy)": [[103, "ivy.zeros_like"], [538, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[103, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[103, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[104, "ivy.as_ivy_dtype"], [539, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[105, "ivy.as_native_dtype"], [539, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[106, "ivy.astype"], [539, "ivy.astype"]], "astype() (ivy.array method)": [[106, "ivy.Array.astype"]], "astype() (ivy.container method)": [[106, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[107, "ivy.broadcast_arrays"], [539, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[107, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[107, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[108, "ivy.broadcast_to"], [539, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[108, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[108, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[109, "ivy.can_cast"], [539, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[109, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[109, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[110, "ivy.check_float"], [539, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[111, "ivy.closest_valid_dtype"], [539, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[112, "ivy.default_complex_dtype"], [539, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[113, "ivy.default_dtype"], [539, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[114, "ivy.default_float_dtype"], [539, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[115, "ivy.default_int_dtype"], [539, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[116, "ivy.default_uint_dtype"], [539, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[117, "ivy.dtype"], [539, "ivy.dtype"]], "dtype() (ivy.array method)": [[117, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[117, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[118, "ivy.dtype_bits"], [539, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[119, "ivy.finfo"], [539, "ivy.finfo"]], "finfo() (ivy.array method)": [[119, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[119, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[120, "ivy.function_supported_dtypes"], [539, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[121, "ivy.function_unsupported_dtypes"], [539, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[122, "ivy.iinfo"], [539, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[122, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[122, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[123, "ivy.infer_default_dtype"], [539, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[124, "ivy.invalid_dtype"], [539, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[125, "ivy.is_bool_dtype"], [539, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[125, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[125, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[126, "ivy.is_complex_dtype"], [539, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[126, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[127, "ivy.is_float_dtype"], [539, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[127, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[127, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[128, "ivy.is_hashable_dtype"], [539, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[129, "ivy.is_int_dtype"], [539, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[129, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[129, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[130, "ivy.is_native_dtype"], [539, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[131, "ivy.is_uint_dtype"], [539, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[131, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[131, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[132, "ivy.promote_types"], [539, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[133, "ivy.promote_types_of_inputs"], [539, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[134, "ivy.result_type"], [539, "ivy.result_type"]], "result_type() (ivy.array method)": [[134, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[134, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[135, "ivy.set_default_complex_dtype"], [539, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[136, "ivy.set_default_dtype"], [539, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[137, "ivy.set_default_float_dtype"], [539, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[138, "ivy.set_default_int_dtype"], [539, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[139, "ivy.set_default_uint_dtype"], [539, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[140, "ivy.type_promote_arrays"], [539, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[141, "ivy.unset_default_complex_dtype"], [539, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[142, "ivy.unset_default_dtype"], [539, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[143, "ivy.unset_default_float_dtype"], [539, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[144, "ivy.unset_default_int_dtype"], [539, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[145, "ivy.unset_default_uint_dtype"], [539, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[146, "ivy.valid_dtype"], [539, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[147, "ivy.as_ivy_dev"], [540, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[148, "ivy.as_native_dev"], [540, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[149, "ivy.clear_cached_mem_on_dev"], [540, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[150, "ivy.default_device"], [540, "ivy.default_device"]], "dev() (in module ivy)": [[151, "ivy.dev"], [540, "ivy.dev"]], "dev() (ivy.array method)": [[151, "ivy.Array.dev"]], "dev() (ivy.container method)": [[151, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[152, "ivy.dev_util"], [540, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[153, "ivy.function_supported_devices"], [540, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[154, "ivy.function_unsupported_devices"], [540, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[155, "ivy.get_all_ivy_arrays_on_dev"], [540, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[156, "ivy.gpu_is_available"], [540, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[157, "ivy.handle_soft_device_variable"], [540, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[158, "ivy.num_cpu_cores"], [540, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[159, "ivy.num_gpus"], [540, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[160, "ivy.num_ivy_arrays_on_dev"], [540, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[161, "ivy.percent_used_mem_on_dev"], [540, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[162, "ivy.print_all_ivy_arrays_on_dev"], [540, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[163, "ivy.set_default_device"], [540, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[164, "ivy.set_soft_device_mode"], [540, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[165, "ivy.set_split_factor"], [540, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[166, "ivy.split_factor"], [540, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[167, "ivy.split_func_call"], [540, "ivy.split_func_call"]], "to_device() (in module ivy)": [[168, "ivy.to_device"], [540, "ivy.to_device"]], "to_device() (ivy.array method)": [[168, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[168, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[169, "ivy.total_mem_on_dev"], [540, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[170, "ivy.tpu_is_available"], [540, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[171, "ivy.unset_default_device"], [540, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[172, "ivy.unset_soft_device_mode"], [540, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[173, "ivy.used_mem_on_dev"], [540, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[174, "ivy.abs"], [541, "ivy.abs"]], "abs() (ivy.array method)": [[174, "ivy.Array.abs"]], "abs() (ivy.container method)": [[174, "ivy.Container.abs"]], "acos() (in module ivy)": [[175, "ivy.acos"], [541, "ivy.acos"]], "acos() (ivy.array method)": [[175, "ivy.Array.acos"]], "acos() (ivy.container method)": [[175, "ivy.Container.acos"]], "acosh() (in module ivy)": [[176, "ivy.acosh"], [541, "ivy.acosh"]], "acosh() (ivy.array method)": [[176, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[176, "ivy.Container.acosh"]], "add() (in module ivy)": [[177, "ivy.add"], [541, "ivy.add"]], "add() (ivy.array method)": [[177, "ivy.Array.add"]], "add() (ivy.container method)": [[177, "ivy.Container.add"]], "angle() (in module ivy)": [[178, "ivy.angle"], [541, "ivy.angle"]], "angle() (ivy.array method)": [[178, "ivy.Array.angle"]], "angle() (ivy.container method)": [[178, "ivy.Container.angle"]], "asin() (in module ivy)": [[179, "ivy.asin"], [541, "ivy.asin"]], "asin() (ivy.array method)": [[179, "ivy.Array.asin"]], "asin() (ivy.container method)": [[179, "ivy.Container.asin"]], "asinh() (in module ivy)": [[180, "ivy.asinh"], [541, "ivy.asinh"]], "asinh() (ivy.array method)": [[180, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[180, "ivy.Container.asinh"]], "atan() (in module ivy)": [[181, "ivy.atan"], [541, "ivy.atan"]], "atan() (ivy.array method)": [[181, "ivy.Array.atan"]], "atan() (ivy.container method)": [[181, "ivy.Container.atan"]], "atan2() (in module ivy)": [[182, "ivy.atan2"], [541, "ivy.atan2"]], "atan2() (ivy.array method)": [[182, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[182, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[183, "ivy.atanh"], [541, "ivy.atanh"]], "atanh() (ivy.array method)": [[183, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[183, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[184, "ivy.bitwise_and"], [541, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[184, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[184, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[185, "ivy.bitwise_invert"], [541, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[185, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[185, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[186, "ivy.bitwise_left_shift"], [541, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[186, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[186, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[187, "ivy.bitwise_or"], [541, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[187, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[187, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[188, "ivy.bitwise_right_shift"], [541, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[188, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[188, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[189, "ivy.bitwise_xor"], [541, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[189, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[189, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[190, "ivy.ceil"], [541, "ivy.ceil"]], "ceil() (ivy.array method)": [[190, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[190, "ivy.Container.ceil"]], "cos() (in module ivy)": [[191, "ivy.cos"], [541, "ivy.cos"]], "cos() (ivy.array method)": [[191, "ivy.Array.cos"]], "cos() (ivy.container method)": [[191, "ivy.Container.cos"]], "cosh() (in module ivy)": [[192, "ivy.cosh"], [541, "ivy.cosh"]], "cosh() (ivy.array method)": [[192, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[192, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[193, "ivy.deg2rad"], [541, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[193, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[193, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[194, "ivy.divide"], [541, "ivy.divide"]], "divide() (ivy.array method)": [[194, "ivy.Array.divide"]], "divide() (ivy.container method)": [[194, "ivy.Container.divide"]], "equal() (in module ivy)": [[195, "ivy.equal"], [541, "ivy.equal"]], "equal() (ivy.array method)": [[195, "ivy.Array.equal"]], "equal() (ivy.container method)": [[195, "ivy.Container.equal"]], "erf() (in module ivy)": [[196, "ivy.erf"], [541, "ivy.erf"]], "erf() (ivy.array method)": [[196, "ivy.Array.erf"]], "erf() (ivy.container method)": [[196, "ivy.Container.erf"]], "exp() (in module ivy)": [[197, "ivy.exp"], [541, "ivy.exp"]], "exp() (ivy.array method)": [[197, "ivy.Array.exp"]], "exp() (ivy.container method)": [[197, "ivy.Container.exp"]], "exp2() (in module ivy)": [[198, "ivy.exp2"], [541, "ivy.exp2"]], "exp2() (ivy.array method)": [[198, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[198, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[199, "ivy.expm1"], [541, "ivy.expm1"]], "expm1() (ivy.array method)": [[199, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[199, "ivy.Container.expm1"]], "floor() (in module ivy)": [[200, "ivy.floor"], [541, "ivy.floor"]], "floor() (ivy.array method)": [[200, "ivy.Array.floor"]], "floor() (ivy.container method)": [[200, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[201, "ivy.floor_divide"], [541, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[201, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[201, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[202, "ivy.fmin"], [541, "ivy.fmin"]], "fmin() (ivy.array method)": [[202, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[202, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[203, "ivy.fmod"], [541, "ivy.fmod"]], "fmod() (ivy.array method)": [[203, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[203, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[204, "ivy.gcd"], [541, "ivy.gcd"]], "gcd() (ivy.array method)": [[204, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[204, "ivy.Container.gcd"]], "greater() (in module ivy)": [[205, "ivy.greater"], [541, "ivy.greater"]], "greater() (ivy.array method)": [[205, "ivy.Array.greater"]], "greater() (ivy.container method)": [[205, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[206, "ivy.greater_equal"], [541, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[206, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[206, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[207, "ivy.imag"], [541, "ivy.imag"]], "imag() (ivy.array method)": [[207, "ivy.Array.imag"]], "imag() (ivy.container method)": [[207, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[208, "ivy.isfinite"], [541, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[208, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[208, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[209, "ivy.isinf"], [541, "ivy.isinf"]], "isinf() (ivy.array method)": [[209, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[209, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[210, "ivy.isnan"], [541, "ivy.isnan"]], "isnan() (ivy.array method)": [[210, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[210, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[211, "ivy.isreal"], [541, "ivy.isreal"]], "isreal() (ivy.array method)": [[211, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[211, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[212, "ivy.lcm"], [541, "ivy.lcm"]], "lcm() (ivy.array method)": [[212, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[212, "ivy.Container.lcm"]], "less() (in module ivy)": [[213, "ivy.less"], [541, "ivy.less"]], "less() (ivy.array method)": [[213, "ivy.Array.less"]], "less() (ivy.container method)": [[213, "ivy.Container.less"]], "less_equal() (in module ivy)": [[214, "ivy.less_equal"], [541, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[214, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[214, "ivy.Container.less_equal"]], "log() (in module ivy)": [[215, "ivy.log"], [541, "ivy.log"]], "log() (ivy.array method)": [[215, "ivy.Array.log"]], "log() (ivy.container method)": [[215, "ivy.Container.log"]], "log10() (in module ivy)": [[216, "ivy.log10"], [541, "ivy.log10"]], "log10() (ivy.array method)": [[216, "ivy.Array.log10"]], "log10() (ivy.container method)": [[216, "ivy.Container.log10"]], "log1p() (in module ivy)": [[217, "ivy.log1p"], [541, "ivy.log1p"]], "log1p() (ivy.array method)": [[217, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[217, "ivy.Container.log1p"]], "log2() (in module ivy)": [[218, "ivy.log2"], [541, "ivy.log2"]], "log2() (ivy.array method)": [[218, "ivy.Array.log2"]], "log2() (ivy.container method)": [[218, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[219, "ivy.logaddexp"], [541, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[219, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[219, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[220, "ivy.logaddexp2"], [541, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[220, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[220, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[221, "ivy.logical_and"], [541, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[221, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[221, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[222, "ivy.logical_not"], [541, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[222, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[222, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[223, "ivy.logical_or"], [541, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[223, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[223, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[224, "ivy.logical_xor"], [541, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[224, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[224, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[225, "ivy.maximum"], [541, "ivy.maximum"]], "maximum() (ivy.array method)": [[225, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[225, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[226, "ivy.minimum"], [541, "ivy.minimum"]], "minimum() (ivy.array method)": [[226, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[226, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[227, "ivy.multiply"], [541, "ivy.multiply"]], "multiply() (ivy.array method)": [[227, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[227, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[228, "ivy.nan_to_num"], [541, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[228, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[228, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[229, "ivy.negative"], [541, "ivy.negative"]], "negative() (ivy.array method)": [[229, "ivy.Array.negative"]], "negative() (ivy.container method)": [[229, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[230, "ivy.not_equal"], [541, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[230, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[230, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[231, "ivy.positive"], [541, "ivy.positive"]], "positive() (ivy.array method)": [[231, "ivy.Array.positive"]], "positive() (ivy.container method)": [[231, "ivy.Container.positive"]], "pow() (in module ivy)": [[232, "ivy.pow"], [541, "ivy.pow"]], "pow() (ivy.array method)": [[232, "ivy.Array.pow"]], "pow() (ivy.container method)": [[232, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[233, "ivy.rad2deg"], [541, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[233, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[233, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[234, "ivy.real"], [541, "ivy.real"]], "real() (ivy.array method)": [[234, "ivy.Array.real"]], "real() (ivy.container method)": [[234, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[235, "ivy.reciprocal"], [541, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[235, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[235, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[236, "ivy.remainder"], [541, "ivy.remainder"]], "remainder() (ivy.array method)": [[236, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[236, "ivy.Container.remainder"]], "round() (in module ivy)": [[237, "ivy.round"], [541, "ivy.round"]], "round() (ivy.array method)": [[237, "ivy.Array.round"]], "round() (ivy.container method)": [[237, "ivy.Container.round"]], "sign() (in module ivy)": [[238, "ivy.sign"], [541, "ivy.sign"]], "sign() (ivy.array method)": [[238, "ivy.Array.sign"]], "sign() (ivy.container method)": [[238, "ivy.Container.sign"]], "sin() (in module ivy)": [[239, "ivy.sin"], [541, "ivy.sin"]], "sin() (ivy.array method)": [[239, "ivy.Array.sin"]], "sin() (ivy.container method)": [[239, "ivy.Container.sin"]], "sinh() (in module ivy)": [[240, "ivy.sinh"], [541, "ivy.sinh"]], "sinh() (ivy.array method)": [[240, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[240, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[241, "ivy.sqrt"], [541, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[241, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[241, "ivy.Container.sqrt"]], "square() (in module ivy)": [[242, "ivy.square"], [541, "ivy.square"]], "square() (ivy.array method)": [[242, "ivy.Array.square"]], "square() (ivy.container method)": [[242, "ivy.Container.square"]], "subtract() (in module ivy)": [[243, "ivy.subtract"], [541, "ivy.subtract"]], "subtract() (ivy.array method)": [[243, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[243, "ivy.Container.subtract"]], "tan() (in module ivy)": [[244, "ivy.tan"], [541, "ivy.tan"]], "tan() (ivy.array method)": [[244, "ivy.Array.tan"]], "tan() (ivy.container method)": [[244, "ivy.Container.tan"]], "tanh() (in module ivy)": [[245, "ivy.tanh"], [541, "ivy.tanh"]], "tanh() (ivy.array method)": [[245, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[245, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[246, "ivy.trapz"], [541, "ivy.trapz"]], "trapz() (ivy.array method)": [[246, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[246, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[247, "ivy.trunc"], [541, "ivy.trunc"]], "trunc() (ivy.array method)": [[247, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[247, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[248, "ivy.trunc_divide"], [541, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[248, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[248, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[249, "ivy.elu"], [301, "ivy.elu"]], "elu() (ivy.array method)": [[249, "ivy.Array.elu"]], "elu() (ivy.container method)": [[249, "ivy.Container.elu"]], "logit() (in module ivy)": [[250, "ivy.logit"], [301, "ivy.logit"]], "logit() (ivy.array method)": [[250, "ivy.Array.logit"]], "logit() (ivy.container method)": [[250, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[251, "ivy.logsigmoid"], [301, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[251, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[251, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[252, "ivy.prelu"], [301, "ivy.prelu"]], "prelu() (ivy.array method)": [[252, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[252, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[253, "ivy.relu6"], [301, "ivy.relu6"]], "relu6() (ivy.array method)": [[253, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[253, "ivy.Container.relu6"]], "selu() (in module ivy)": [[254, "ivy.selu"], [301, "ivy.selu"]], "selu() (ivy.array method)": [[254, "ivy.Array.selu"]], "selu() (ivy.container method)": [[254, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[255, "ivy.sequence_length"], [301, "ivy.sequence_length"]], "silu() (in module ivy)": [[256, "ivy.silu"], [301, "ivy.silu"]], "silu() (ivy.array method)": [[256, "ivy.Array.silu"]], "silu() (ivy.container method)": [[256, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[257, "ivy.thresholded_relu"], [301, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[257, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[257, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[258, "ivy.blackman_window"], [303, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[258, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[258, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[259, "ivy.eye_like"], [303, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[259, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[259, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[260, "ivy.hamming_window"], [303, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[260, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[261, "ivy.hann_window"], [303, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[261, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[262, "ivy.indices"], [303, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[263, "ivy.kaiser_bessel_derived_window"], [303, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[263, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[264, "ivy.kaiser_window"], [303, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[264, "ivy.Container.kaiser_window"]], "ndenumerate() (in module ivy)": [[265, "ivy.ndenumerate"], [303, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[266, "ivy.ndindex"], [303, "ivy.ndindex"]], "random_cp() (in module ivy)": [[267, "ivy.random_cp"], [303, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[268, "ivy.random_tucker"], [303, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[269, "ivy.tril_indices"], [303, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[269, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[270, "ivy.trilu"], [303, "ivy.trilu"]], "trilu() (ivy.array method)": [[270, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[270, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[271, "ivy.unsorted_segment_min"], [303, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[271, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[271, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[272, "ivy.unsorted_segment_sum"], [303, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[272, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[272, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[273, "ivy.vorbis_window"], [303, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[273, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[274, "ivy.allclose"], [306, "ivy.allclose"]], "allclose() (ivy.array method)": [[274, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[274, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[275, "ivy.binarizer"], [306, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[275, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[275, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[276, "ivy.conj"], [306, "ivy.conj"]], "conj() (ivy.array method)": [[276, "ivy.Array.conj"]], "conj() (ivy.container method)": [[276, "ivy.Container.conj"]], "copysign() (in module ivy)": [[277, "ivy.copysign"], [306, "ivy.copysign"]], "copysign() (ivy.array method)": [[277, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[277, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[278, "ivy.count_nonzero"], [306, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[278, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[278, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[279, "ivy.diff"], [306, "ivy.diff"]], "diff() (ivy.array method)": [[279, "ivy.Array.diff"]], "diff() (ivy.container method)": [[279, "ivy.Container.diff"]], "digamma() (in module ivy)": [[280, "ivy.digamma"], [306, "ivy.digamma"]], "digamma() (ivy.array method)": [[280, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[280, "ivy.Container.digamma"]], "fix() (in module ivy)": [[281, "ivy.fix"], [306, "ivy.fix"]], "fix() (ivy.array method)": [[281, "ivy.Array.fix"]], "fix() (ivy.container method)": [[281, "ivy.Container.fix"]], "float_power() (in module ivy)": [[282, "ivy.float_power"], [306, "ivy.float_power"]], "float_power() (ivy.array method)": [[282, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[282, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[283, "ivy.fmax"], [306, "ivy.fmax"]], "fmax() (ivy.array method)": [[283, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[283, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[284, "ivy.frexp"], [306, "ivy.frexp"]], "frexp() (ivy.array method)": [[284, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[284, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[285, "ivy.gradient"], [306, "ivy.gradient"]], "gradient() (ivy.array method)": [[285, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[285, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[286, "ivy.hypot"], [306, "ivy.hypot"]], "hypot() (ivy.array method)": [[286, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[286, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[287, "ivy.isclose"], [306, "ivy.isclose"]], "isclose() (ivy.array method)": [[287, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[287, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[288, "ivy.ldexp"], [306, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[288, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[288, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[289, "ivy.lerp"], [306, "ivy.lerp"]], "lerp() (ivy.array method)": [[289, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[289, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[290, "ivy.lgamma"], [306, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[290, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[291, "ivy.modf"], [306, "ivy.modf"]], "modf() (ivy.array method)": [[291, "ivy.Array.modf"]], "modf() (ivy.container method)": [[291, "ivy.Container.modf"]], "nansum() (in module ivy)": [[292, "ivy.nansum"], [306, "ivy.nansum"]], "nansum() (ivy.array method)": [[292, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[292, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[293, "ivy.nextafter"], [306, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[293, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[293, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[294, "ivy.signbit"], [306, "ivy.signbit"]], "signbit() (ivy.array method)": [[294, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[294, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[295, "ivy.sinc"], [306, "ivy.sinc"]], "sinc() (ivy.array method)": [[295, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[295, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[296, "ivy.sparsify_tensor"], [306, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[296, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[296, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[297, "ivy.xlogy"], [306, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[297, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[297, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[298, "ivy.zeta"], [306, "ivy.zeta"]], "zeta() (ivy.array method)": [[298, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[298, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[299, "ivy.reduce"], [307, "ivy.reduce"]], "reduce() (ivy.array method)": [[299, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[299, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[300, "ivy.bind_custom_gradient_function"], [308, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[301, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[302, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[303, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[304, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[305, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[306, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[307, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[308, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[309, "ivy.adaptive_avg_pool1d"], [323, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[309, "ivy.adaptive_avg_pool2d"], [324, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[309, "ivy.adaptive_max_pool2d"], [325, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[309, "ivy.area_interpolate"], [326, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[309, "ivy.avg_pool1d"], [327, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[309, "ivy.avg_pool2d"], [328, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[309, "ivy.avg_pool3d"], [329, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[309, "ivy.dct"], [330, "ivy.dct"]], "dft() (in module ivy)": [[309, "ivy.dft"], [331, "ivy.dft"]], "dropout1d() (in module ivy)": [[309, "ivy.dropout1d"], [332, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[309, "ivy.dropout2d"], [333, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[309, "ivy.dropout3d"], [334, "ivy.dropout3d"]], "embedding() (in module ivy)": [[309, "ivy.embedding"], [335, "ivy.embedding"]], "fft() (in module ivy)": [[309, "ivy.fft"], [336, "ivy.fft"]], "fft2() (in module ivy)": [[309, "ivy.fft2"], [337, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[309, "ivy.generate_einsum_equation"], [338, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[309, "ivy.get_interpolate_kernel"], [339, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[309, "ivy.idct"], [340, "ivy.idct"]], "ifft() (in module ivy)": [[309, "ivy.ifft"], [341, "ivy.ifft"]], "ifftn() (in module ivy)": [[309, "ivy.ifftn"], [342, "ivy.ifftn"]], "interp() (in module ivy)": [[309, "ivy.interp"], [343, "ivy.interp"]], "interpolate() (in module ivy)": [[309, "ivy.interpolate"], [344, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[309, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[309, "ivy.max_pool1d"], [345, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[309, "ivy.max_pool2d"], [346, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[309, "ivy.max_pool3d"], [347, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[309, "ivy.max_unpool1d"], [348, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[309, "ivy.nearest_interpolate"], [349, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[309, "ivy.pool"], [350, "ivy.pool"]], "reduce_window() (in module ivy)": [[309, "ivy.reduce_window"], [351, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[309, "ivy.rfftn"], [352, "ivy.rfftn"]], "adjoint() (in module ivy)": [[310, "ivy.adjoint"], [353, "ivy.adjoint"]], "cond() (in module ivy)": [[310, "ivy.cond"], [354, "ivy.cond"]], "diagflat() (in module ivy)": [[310, "ivy.diagflat"], [355, "ivy.diagflat"]], "dot() (in module ivy)": [[310, "ivy.dot"], [356, "ivy.dot"]], "eig() (in module ivy)": [[310, "ivy.eig"], [357, "ivy.eig"], [546, "ivy.eig"], [578, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[310, "ivy.eigh_tridiagonal"], [358, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[310, "ivy.eigvals"], [359, "ivy.eigvals"]], "initialize_tucker() (in module ivy)": [[310, "ivy.initialize_tucker"], [360, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[310, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[310, "ivy.khatri_rao"], [361, "ivy.khatri_rao"]], "kron() (in module ivy)": [[310, "ivy.kron"], [362, "ivy.kron"]], "kronecker() (in module ivy)": [[310, "ivy.kronecker"], [363, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[310, "ivy.make_svd_non_negative"], [364, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[310, "ivy.matrix_exp"], [365, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[310, "ivy.mode_dot"], [366, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[310, "ivy.multi_dot"], [367, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[310, "ivy.multi_mode_dot"], [368, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[310, "ivy.partial_tucker"], [369, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[310, "ivy.svd_flip"], [370, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[310, "ivy.truncated_svd"], [371, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[310, "ivy.tucker"], [372, "ivy.tucker"]], "huber_loss() (in module ivy)": [[311, "ivy.huber_loss"], [373, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[311, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[311, "ivy.l1_loss"], [374, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[311, "ivy.log_poisson_loss"], [375, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[311, "ivy.smooth_l1_loss"], [376, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[311, "ivy.soft_margin_loss"], [377, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[312, "ivy.as_strided"], [378, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[312, "ivy.associative_scan"], [379, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[312, "ivy.atleast_1d"], [380, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[312, "ivy.atleast_2d"], [381, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[312, "ivy.atleast_3d"], [382, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[312, "ivy.broadcast_shapes"], [383, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[312, "ivy.choose"], [384, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[312, "ivy.concat_from_sequence"], [385, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[312, "ivy.dsplit"], [386, "ivy.dsplit"]], "dstack() (in module ivy)": [[312, "ivy.dstack"], [387, "ivy.dstack"]], "expand() (in module ivy)": [[312, "ivy.expand"], [388, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[312, "ivy.fill_diagonal"], [389, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[312, "ivy.flatten"], [390, "ivy.flatten"]], "fliplr() (in module ivy)": [[312, "ivy.fliplr"], [391, "ivy.fliplr"]], "flipud() (in module ivy)": [[312, "ivy.flipud"], [392, "ivy.flipud"]], "fold() (in module ivy)": [[312, "ivy.fold"], [393, "ivy.fold"]], "heaviside() (in module ivy)": [[312, "ivy.heaviside"], [394, "ivy.heaviside"]], "hsplit() (in module ivy)": [[312, "ivy.hsplit"], [395, "ivy.hsplit"]], "hstack() (in module ivy)": [[312, "ivy.hstack"], [396, "ivy.hstack"]], "i0() (in module ivy)": [[312, "ivy.i0"], [397, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[312, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[312, "ivy.matricize"], [398, "ivy.matricize"]], "moveaxis() (in module ivy)": [[312, "ivy.moveaxis"], [399, "ivy.moveaxis"]], "pad() (in module ivy)": [[312, "ivy.pad"], [400, "ivy.pad"]], "partial_fold() (in module ivy)": [[312, "ivy.partial_fold"], [401, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[312, "ivy.partial_tensor_to_vec"], [402, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[312, "ivy.partial_unfold"], [403, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[312, "ivy.partial_vec_to_tensor"], [404, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[312, "ivy.put_along_axis"], [405, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[312, "ivy.rot90"], [406, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[312, "ivy.soft_thresholding"], [407, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[312, "ivy.take_along_axis"], [408, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[312, "ivy.top_k"], [409, "ivy.top_k"]], "unfold() (in module ivy)": [[312, "ivy.unfold"], [410, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[312, "ivy.unique_consecutive"], [411, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[312, "ivy.vsplit"], [412, "ivy.vsplit"]], "vstack() (in module ivy)": [[312, "ivy.vstack"], [413, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[313, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[314, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[315, "ivy.batch_norm"], [414, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[315, "ivy.group_norm"], [415, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[315, "ivy.instance_norm"], [416, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[315, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[315, "ivy.l1_normalize"], [417, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[315, "ivy.l2_normalize"], [418, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[315, "ivy.lp_normalize"], [419, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[316, "ivy.bernoulli"], [420, "ivy.bernoulli"]], "beta() (in module ivy)": [[316, "ivy.beta"], [421, "ivy.beta"]], "dirichlet() (in module ivy)": [[316, "ivy.dirichlet"], [422, "ivy.dirichlet"]], "gamma() (in module ivy)": [[316, "ivy.gamma"], [423, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[316, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[316, "ivy.poisson"], [424, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[317, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[317, "ivy.unravel_index"], [425, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[318, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[319, "ivy.invert_permutation"], [426, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[319, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[319, "ivy.lexsort"], [427, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[320, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[320, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[320, "ivy.is_ivy_sparse_array"], [428, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[320, "ivy.is_native_sparse_array"], [429, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[320, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[320, "ivy.native_sparse_array"], [430, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[320, "ivy.native_sparse_array_to_indices_values_and_shape"], [431, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[321, "ivy.bincount"], [432, "ivy.bincount"]], "corrcoef() (in module ivy)": [[321, "ivy.corrcoef"], [433, "ivy.corrcoef"]], "cov() (in module ivy)": [[321, "ivy.cov"], [434, "ivy.cov"]], "cummax() (in module ivy)": [[321, "ivy.cummax"], [435, "ivy.cummax"]], "cummin() (in module ivy)": [[321, "ivy.cummin"], [436, "ivy.cummin"]], "histogram() (in module ivy)": [[321, "ivy.histogram"], [437, "ivy.histogram"]], "igamma() (in module ivy)": [[321, "ivy.igamma"], [438, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[321, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[321, "ivy.median"], [439, "ivy.median"]], "nanmean() (in module ivy)": [[321, "ivy.nanmean"], [440, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[321, "ivy.nanmedian"], [441, "ivy.nanmedian"]], "quantile() (in module ivy)": [[321, "ivy.quantile"], [442, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[322, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[322, "ivy.optional_get_element"], [443, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[323, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[323, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[324, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[324, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[325, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[325, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[327, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[327, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[328, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[328, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[329, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[329, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[330, "ivy.Array.dct"]], "dct() (ivy.container method)": [[330, "ivy.Container.dct"]], "dft() (ivy.array method)": [[331, "ivy.Array.dft"]], "dft() (ivy.container method)": [[331, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[332, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[332, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[333, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[333, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[334, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[334, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[335, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[335, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[336, "ivy.Array.fft"]], "fft() (ivy.container method)": [[336, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[337, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[340, "ivy.Array.idct"]], "idct() (ivy.container method)": [[340, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[341, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[341, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[342, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[342, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[344, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[344, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[345, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[345, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[346, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[346, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[347, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[347, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[351, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[351, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[352, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[352, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[353, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[353, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[354, "ivy.Array.cond"]], "cond() (ivy.container method)": [[354, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[355, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[355, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[356, "ivy.Array.dot"]], "dot() (ivy.container method)": [[356, "ivy.Container.dot"]], "eig() (ivy.array method)": [[357, "ivy.Array.eig"], [578, "ivy.Array.eig"]], "eig() (ivy.container method)": [[357, "ivy.Container.eig"], [578, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[358, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[358, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[359, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[359, "ivy.Container.eigvals"]], "initialize_tucker() (ivy.array method)": [[360, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[360, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[362, "ivy.Array.kron"]], "kron() (ivy.container method)": [[362, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[364, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[364, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[365, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[365, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[366, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[366, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[367, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[367, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[368, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[368, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[369, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[369, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[370, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[370, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[371, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[371, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[372, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[372, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[373, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[373, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[374, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[374, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[376, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[376, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[377, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[377, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[378, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[378, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[379, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[379, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[380, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[380, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[381, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[381, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[382, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[382, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[383, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[385, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[385, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[386, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[386, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[387, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[387, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[388, "ivy.Array.expand"]], "expand() (ivy.container method)": [[388, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[389, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[389, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[390, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[390, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[391, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[391, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[392, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[392, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[393, "ivy.Array.fold"]], "fold() (ivy.container method)": [[393, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[394, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[394, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[395, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[395, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[396, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[396, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[397, "ivy.Array.i0"]], "i0() (ivy.container method)": [[397, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[398, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[398, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[399, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[399, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[400, "ivy.Array.pad"]], "pad() (ivy.container method)": [[400, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[401, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[401, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[402, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[402, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[403, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[403, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[404, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[404, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[406, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[406, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[407, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[407, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[408, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[408, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[409, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[409, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[410, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[410, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[411, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[411, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[412, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[412, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[413, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[413, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[414, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[414, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[415, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[415, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[416, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[416, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[417, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[417, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[418, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[418, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[419, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[419, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[420, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[420, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[421, "ivy.Array.beta"]], "beta() (ivy.container method)": [[421, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[422, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[422, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[423, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[423, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[424, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[424, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[425, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[425, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[426, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[427, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[427, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[432, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[432, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[433, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[433, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[434, "ivy.Array.cov"]], "cov() (ivy.container method)": [[434, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[435, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[435, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[436, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[436, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[437, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[437, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[438, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[438, "ivy.Container.igamma"]], "median() (ivy.array method)": [[439, "ivy.Array.median"]], "median() (ivy.container method)": [[439, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[440, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[440, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[441, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[441, "ivy.Container.nanmedian"]], "quantile() (ivy.array method)": [[442, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[442, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[443, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[443, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[444, "ivy.all_equal"], [543, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[444, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[444, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[445, "ivy.arg_info"], [543, "ivy.arg_info"]], "arg_names() (in module ivy)": [[446, "ivy.arg_names"], [543, "ivy.arg_names"]], "array_equal() (in module ivy)": [[447, "ivy.array_equal"], [543, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[447, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[447, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[448, "ivy.assert_supports_inplace"], [543, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[448, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[448, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[449, "ivy.cache_fn"], [543, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[450, "ivy.clip_matrix_norm"], [543, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[450, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[450, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[451, "ivy.clip_vector_norm"], [543, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[451, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[451, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[452, "ivy.container_types"], [543, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[453, "ivy.current_backend_str"], [543, "ivy.current_backend_str"]], "default() (in module ivy)": [[454, "ivy.default"], [543, "ivy.default"]], "default() (ivy.array method)": [[454, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[455, "ivy.einops_rearrange"], [543, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[455, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[455, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[456, "ivy.einops_reduce"], [543, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[456, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[456, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[457, "ivy.einops_repeat"], [543, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[457, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[457, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[458, "ivy.exists"], [543, "ivy.exists"]], "exists() (ivy.array method)": [[458, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[459, "ivy.fourier_encode"], [543, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[459, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[459, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[460, "ivy.function_supported_devices_and_dtypes"], [543, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[461, "ivy.function_unsupported_devices_and_dtypes"], [543, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[462, "ivy.gather"], [543, "ivy.gather"]], "gather() (ivy.array method)": [[462, "ivy.Array.gather"]], "gather() (ivy.container method)": [[462, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[463, "ivy.gather_nd"], [543, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[463, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[463, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[464, "ivy.get_all_arrays_in_memory"], [543, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[465, "ivy.get_item"], [543, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[466, "ivy.get_num_dims"], [543, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[466, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[466, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[467, "ivy.get_referrers_recursive"], [543, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[468, "ivy.has_nans"], [543, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[468, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[468, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[469, "ivy.inplace_arrays_supported"], [543, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[470, "ivy.inplace_decrement"], [543, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[470, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[470, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[471, "ivy.inplace_increment"], [543, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[471, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[471, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[472, "ivy.inplace_update"], [543, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[472, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[472, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[473, "ivy.inplace_variables_supported"], [543, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[474, "ivy.is_array"], [543, "ivy.is_array"]], "is_array() (ivy.array method)": [[474, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[474, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[475, "ivy.is_ivy_array"], [543, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[475, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[475, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[476, "ivy.is_ivy_container"], [543, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[476, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[477, "ivy.is_ivy_nested_array"], [543, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[478, "ivy.is_native_array"], [543, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[478, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[478, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[479, "ivy.isin"], [543, "ivy.isin"]], "isin() (ivy.array method)": [[479, "ivy.Array.isin"]], "isin() (ivy.container method)": [[479, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[480, "ivy.isscalar"], [543, "ivy.isscalar"]], "itemsize() (in module ivy)": [[481, "ivy.itemsize"], [543, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[481, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[481, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[482, "ivy.match_kwargs"], [543, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[483, "ivy.multiprocessing"], [543, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[484, "ivy.num_arrays_in_memory"], [543, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[485, "ivy.print_all_arrays_in_memory"], [543, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[486, "ivy.scatter_flat"], [543, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[486, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[486, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[487, "ivy.scatter_nd"], [543, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[487, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[487, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[488, "ivy.set_array_mode"], [543, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[489, "ivy.set_exception_trace_mode"], [543, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[490, "ivy.set_inplace_mode"], [543, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[491, "ivy.set_item"], [543, "ivy.set_item"]], "set_min_base() (in module ivy)": [[492, "ivy.set_min_base"], [543, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[493, "ivy.set_min_denominator"], [543, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[494, "ivy.set_nestable_mode"], [543, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[495, "ivy.set_precise_mode"], [543, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[496, "ivy.set_queue_timeout"], [543, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[497, "ivy.set_shape_array_mode"], [543, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[498, "ivy.set_show_func_wrapper_trace_mode"], [543, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[499, "ivy.set_tmp_dir"], [543, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[500, "ivy.shape"], [543, "ivy.shape"]], "shape() (ivy.array method)": [[500, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[501, "ivy.stable_divide"], [543, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[501, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[501, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[502, "ivy.stable_pow"], [543, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[502, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[502, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[503, "ivy.strides"], [543, "ivy.strides"]], "strides() (ivy.array method)": [[503, "ivy.Array.strides"]], "strides() (ivy.container method)": [[503, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[504, "ivy.supports_inplace_updates"], [543, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[504, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[504, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[505, "ivy.to_ivy_shape"], [543, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[506, "ivy.to_list"], [543, "ivy.to_list"]], "to_list() (ivy.array method)": [[506, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[506, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[507, "ivy.to_native_shape"], [543, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[508, "ivy.to_numpy"], [543, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[508, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[508, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[509, "ivy.to_scalar"], [543, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[509, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[509, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[510, "ivy.try_else_none"], [543, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[511, "ivy.unset_array_mode"], [543, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[512, "ivy.unset_exception_trace_mode"], [543, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[513, "ivy.unset_inplace_mode"], [543, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[514, "ivy.unset_min_base"], [543, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[515, "ivy.unset_min_denominator"], [543, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[516, "ivy.unset_nestable_mode"], [543, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[517, "ivy.unset_precise_mode"], [543, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[518, "ivy.unset_queue_timeout"], [543, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[519, "ivy.unset_shape_array_mode"], [543, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[520, "ivy.unset_show_func_wrapper_trace_mode"], [543, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[521, "ivy.unset_tmp_dir"], [543, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[522, "ivy.value_is_nan"], [543, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[522, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[522, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[523, "ivy.vmap"], [543, "ivy.vmap"]], "adam_step() (in module ivy)": [[524, "ivy.adam_step"], [544, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[524, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[524, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[525, "ivy.adam_update"], [544, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[525, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[525, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[526, "ivy.execute_with_gradients"], [544, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[527, "ivy.grad"], [544, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[528, "ivy.gradient_descent_update"], [544, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[528, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[528, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[529, "ivy.jac"], [544, "ivy.jac"]], "lamb_update() (in module ivy)": [[530, "ivy.lamb_update"], [544, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[530, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[530, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[531, "ivy.lars_update"], [544, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[531, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[531, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[532, "ivy.optimizer_update"], [544, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[532, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[532, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[533, "ivy.stop_gradient"], [544, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[533, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[533, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[534, "ivy.value_and_grad"], [544, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[535, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[536, "ivy.e"]], "inf (in module ivy)": [[536, "ivy.inf"]], "ivy.functional.ivy.constants": [[536, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[536, "ivy.nan"]], "newaxis (in module ivy)": [[536, "ivy.newaxis"]], "pi (in module ivy)": [[536, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[537, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[538, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[538, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[539, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[539, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[539, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[539, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[539, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[539, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[540, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[540, "ivy.Profiler"]], "ivy.functional.ivy.device": [[540, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[541, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[542, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[543, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[543, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[543, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[544, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[545, "ivy.conv"], [558, "ivy.conv"]], "conv1d() (in module ivy)": [[545, "ivy.conv1d"], [559, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[545, "ivy.conv1d_transpose"], [560, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[545, "ivy.conv2d"], [561, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[545, "ivy.conv2d_transpose"], [562, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[545, "ivy.conv3d"], [563, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[545, "ivy.conv3d_transpose"], [564, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[545, "ivy.conv_general_dilated"], [565, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[545, "ivy.conv_general_transpose"], [566, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[545, "ivy.depthwise_conv2d"], [567, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[545, "ivy.dropout"], [568, "ivy.dropout"]], "ivy.functional.ivy.layers": [[545, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[545, "ivy.linear"], [569, "ivy.linear"]], "lstm_update() (in module ivy)": [[545, "ivy.lstm_update"], [570, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[545, "ivy.multi_head_attention"], [571, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[545, "ivy.scaled_dot_product_attention"], [572, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[546, "ivy.cholesky"], [573, "ivy.cholesky"]], "cross() (in module ivy)": [[546, "ivy.cross"], [574, "ivy.cross"]], "det() (in module ivy)": [[546, "ivy.det"], [575, "ivy.det"]], "diag() (in module ivy)": [[546, "ivy.diag"], [576, "ivy.diag"]], "diagonal() (in module ivy)": [[546, "ivy.diagonal"], [577, "ivy.diagonal"]], "eigh() (in module ivy)": [[546, "ivy.eigh"], [579, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[546, "ivy.eigvalsh"], [580, "ivy.eigvalsh"]], "inner() (in module ivy)": [[546, "ivy.inner"], [581, "ivy.inner"]], "inv() (in module ivy)": [[546, "ivy.inv"], [582, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[546, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[546, "ivy.lu_factor"], [583, "ivy.lu_factor"]], "matmul() (in module ivy)": [[546, "ivy.matmul"], [584, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[546, "ivy.matrix_norm"], [585, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[546, "ivy.matrix_power"], [586, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[546, "ivy.matrix_rank"], [587, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[546, "ivy.matrix_transpose"], [588, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[546, "ivy.outer"], [589, "ivy.outer"]], "pinv() (in module ivy)": [[546, "ivy.pinv"], [590, "ivy.pinv"]], "qr() (in module ivy)": [[546, "ivy.qr"], [591, "ivy.qr"]], "slogdet() (in module ivy)": [[546, "ivy.slogdet"], [592, "ivy.slogdet"]], "solve() (in module ivy)": [[546, "ivy.solve"], [593, "ivy.solve"]], "svd() (in module ivy)": [[546, "ivy.svd"], [594, "ivy.svd"]], "svdvals() (in module ivy)": [[546, "ivy.svdvals"], [595, "ivy.svdvals"]], "tensordot() (in module ivy)": [[546, "ivy.tensordot"], [596, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[546, "ivy.tensorsolve"], [597, "ivy.tensorsolve"]], "trace() (in module ivy)": [[546, "ivy.trace"], [598, "ivy.trace"]], "vander() (in module ivy)": [[546, "ivy.vander"], [599, "ivy.vander"]], "vecdot() (in module ivy)": [[546, "ivy.vecdot"], [600, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[546, "ivy.vector_norm"], [601, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[546, "ivy.vector_to_skew_symmetric_matrix"], [602, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[547, "ivy.binary_cross_entropy"], [603, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[547, "ivy.cross_entropy"], [604, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[547, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[547, "ivy.sparse_cross_entropy"], [605, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[548, "ivy.clip"], [606, "ivy.clip"]], "concat() (in module ivy)": [[548, "ivy.concat"], [607, "ivy.concat"]], "constant_pad() (in module ivy)": [[548, "ivy.constant_pad"], [608, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[548, "ivy.expand_dims"], [609, "ivy.expand_dims"]], "flip() (in module ivy)": [[548, "ivy.flip"], [610, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[548, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[548, "ivy.permute_dims"], [611, "ivy.permute_dims"]], "repeat() (in module ivy)": [[548, "ivy.repeat"], [612, "ivy.repeat"]], "reshape() (in module ivy)": [[548, "ivy.reshape"], [613, "ivy.reshape"]], "roll() (in module ivy)": [[548, "ivy.roll"], [614, "ivy.roll"]], "split() (in module ivy)": [[548, "ivy.split"], [615, "ivy.split"]], "squeeze() (in module ivy)": [[548, "ivy.squeeze"], [616, "ivy.squeeze"]], "stack() (in module ivy)": [[548, "ivy.stack"], [617, "ivy.stack"]], "swapaxes() (in module ivy)": [[548, "ivy.swapaxes"], [618, "ivy.swapaxes"]], "tile() (in module ivy)": [[548, "ivy.tile"], [619, "ivy.tile"]], "unstack() (in module ivy)": [[548, "ivy.unstack"], [620, "ivy.unstack"]], "zero_pad() (in module ivy)": [[548, "ivy.zero_pad"], [621, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[549, "ivy.fomaml_step"], [622, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[549, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[549, "ivy.maml_step"], [623, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[549, "ivy.reptile_step"], [624, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[550, "ivy.all_nested_indices"], [625, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[550, "ivy.copy_nest"], [626, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[550, "ivy.duplicate_array_index_chains"], [627, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[550, "ivy.index_nest"], [628, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[550, "ivy.insert_into_nest_at_index"], [629, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[550, "ivy.insert_into_nest_at_indices"], [630, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[550, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[550, "ivy.map"], [631, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[550, "ivy.map_nest_at_index"], [632, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[550, "ivy.map_nest_at_indices"], [633, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[550, "ivy.multi_index_nest"], [634, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[550, "ivy.nested_any"], [635, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[550, "ivy.nested_argwhere"], [636, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[550, "ivy.nested_map"], [637, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[550, "ivy.nested_multi_map"], [638, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[550, "ivy.prune_empty"], [639, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[550, "ivy.prune_nest_at_index"], [640, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[550, "ivy.prune_nest_at_indices"], [641, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[550, "ivy.set_nest_at_index"], [642, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[550, "ivy.set_nest_at_indices"], [643, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[551, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[551, "ivy.layer_norm"], [644, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[552, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[552, "ivy.multinomial"], [645, "ivy.multinomial"]], "randint() (in module ivy)": [[552, "ivy.randint"], [646, "ivy.randint"]], "random_normal() (in module ivy)": [[552, "ivy.random_normal"], [647, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[552, "ivy.random_uniform"], [648, "ivy.random_uniform"]], "seed() (in module ivy)": [[552, "ivy.seed"], [649, "ivy.seed"]], "shuffle() (in module ivy)": [[552, "ivy.shuffle"], [650, "ivy.shuffle"]], "argmax() (in module ivy)": [[553, "ivy.argmax"], [651, "ivy.argmax"]], "argmin() (in module ivy)": [[553, "ivy.argmin"], [652, "ivy.argmin"]], "argwhere() (in module ivy)": [[553, "ivy.argwhere"], [653, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[553, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[553, "ivy.nonzero"], [654, "ivy.nonzero"]], "where() (in module ivy)": [[553, "ivy.where"], [655, "ivy.where"]], "ivy.functional.ivy.set": [[554, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[554, "ivy.unique_all"], [656, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[554, "ivy.unique_counts"], [657, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[554, "ivy.unique_inverse"], [658, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[554, "ivy.unique_values"], [659, "ivy.unique_values"]], "argsort() (in module ivy)": [[555, "ivy.argsort"], [660, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[555, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[555, "ivy.msort"], [661, "ivy.msort"]], "searchsorted() (in module ivy)": [[555, "ivy.searchsorted"], [662, "ivy.searchsorted"]], "sort() (in module ivy)": [[555, "ivy.sort"], [663, "ivy.sort"]], "cumprod() (in module ivy)": [[556, "ivy.cumprod"], [664, "ivy.cumprod"]], "cumsum() (in module ivy)": [[556, "ivy.cumsum"], [665, "ivy.cumsum"]], "einsum() (in module ivy)": [[556, "ivy.einsum"], [666, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[556, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[556, "ivy.max"], [667, "ivy.max"]], "mean() (in module ivy)": [[556, "ivy.mean"], [668, "ivy.mean"]], "min() (in module ivy)": [[556, "ivy.min"], [669, "ivy.min"]], "prod() (in module ivy)": [[556, "ivy.prod"], [670, "ivy.prod"]], "std() (in module ivy)": [[556, "ivy.std"], [671, "ivy.std"]], "sum() (in module ivy)": [[556, "ivy.sum"], [672, "ivy.sum"]], "var() (in module ivy)": [[556, "ivy.var"], [673, "ivy.var"]], "all() (in module ivy)": [[557, "ivy.all"], [674, "ivy.all"]], "any() (in module ivy)": [[557, "ivy.any"], [675, "ivy.any"]], "ivy.functional.ivy.utility": [[557, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[557, "ivy.load"], [676, "ivy.load"]], "save() (in module ivy)": [[557, "ivy.save"], [677, "ivy.save"]], "conv1d() (ivy.array method)": [[559, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[559, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[560, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[560, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[561, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[561, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[562, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[562, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[563, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[563, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[564, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[564, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[567, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[567, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[568, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[568, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[569, "ivy.Array.linear"]], "linear() (ivy.container method)": [[569, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[570, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[570, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[571, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[571, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[572, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[572, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[573, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[573, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[574, "ivy.Array.cross"]], "cross() (ivy.container method)": [[574, "ivy.Container.cross"]], "det() (ivy.array method)": [[575, "ivy.Array.det"]], "det() (ivy.container method)": [[575, "ivy.Container.det"]], "diag() (ivy.array method)": [[576, "ivy.Array.diag"]], "diag() (ivy.container method)": [[576, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[577, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[577, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[579, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[579, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[580, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[580, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[581, "ivy.Array.inner"]], "inner() (ivy.container method)": [[581, "ivy.Container.inner"]], "inv() (ivy.array method)": [[582, "ivy.Array.inv"]], "inv() (ivy.container method)": [[582, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[584, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[584, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[585, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[585, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[586, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[586, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[587, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[587, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[588, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[588, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[589, "ivy.Array.outer"]], "outer() (ivy.container method)": [[589, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[590, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[590, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[591, "ivy.Array.qr"]], "qr() (ivy.container method)": [[591, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[592, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[592, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[593, "ivy.Array.solve"]], "solve() (ivy.container method)": [[593, "ivy.Container.solve"]], "svd() (ivy.array method)": [[594, "ivy.Array.svd"]], "svd() (ivy.container method)": [[594, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[595, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[595, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[596, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[596, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[597, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[597, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[598, "ivy.Array.trace"]], "trace() (ivy.container method)": [[598, "ivy.Container.trace"]], "vander() (ivy.array method)": [[599, "ivy.Array.vander"]], "vander() (ivy.container method)": [[599, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[600, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[600, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[601, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[601, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[602, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[602, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[603, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[603, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[604, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[604, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[605, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[605, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[606, "ivy.Array.clip"]], "clip() (ivy.container method)": [[606, "ivy.Container.clip"]], "concat() (ivy.array method)": [[607, "ivy.Array.concat"]], "concat() (ivy.container method)": [[607, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[608, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[608, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[609, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[609, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[610, "ivy.Array.flip"]], "flip() (ivy.container method)": [[610, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[611, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[611, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[612, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[612, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[613, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[613, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[614, "ivy.Array.roll"]], "roll() (ivy.container method)": [[614, "ivy.Container.roll"]], "split() (ivy.array method)": [[615, "ivy.Array.split"]], "split() (ivy.container method)": [[615, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[616, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[616, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[617, "ivy.Array.stack"]], "stack() (ivy.container method)": [[617, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[618, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[618, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[619, "ivy.Array.tile"]], "tile() (ivy.container method)": [[619, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[620, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[620, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[621, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[621, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[644, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[644, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[645, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[645, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[646, "ivy.Array.randint"]], "randint() (ivy.container method)": [[646, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[647, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[647, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[648, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[648, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[650, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[650, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[651, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[651, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[652, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[652, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[653, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[653, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[654, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[654, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[655, "ivy.Array.where"]], "where() (ivy.container method)": [[655, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[656, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[656, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[657, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[657, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[658, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[658, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[659, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[659, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[660, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[660, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[661, "ivy.Array.msort"]], "msort() (ivy.container method)": [[661, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[662, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[662, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[663, "ivy.Array.sort"]], "sort() (ivy.container method)": [[663, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[664, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[664, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[665, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[665, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[666, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[666, "ivy.Container.einsum"]], "max() (ivy.array method)": [[667, "ivy.Array.max"]], "max() (ivy.container method)": [[667, "ivy.Container.max"]], "mean() (ivy.array method)": [[668, "ivy.Array.mean"]], "mean() (ivy.container method)": [[668, "ivy.Container.mean"]], "min() (ivy.array method)": [[669, "ivy.Array.min"]], "min() (ivy.container method)": [[669, "ivy.Container.min"]], "prod() (ivy.array method)": [[670, "ivy.Array.prod"]], "prod() (ivy.container method)": [[670, "ivy.Container.prod"]], "std() (ivy.array method)": [[671, "ivy.Array.std"]], "std() (ivy.container method)": [[671, "ivy.Container.std"]], "sum() (ivy.array method)": [[672, "ivy.Array.sum"]], "sum() (ivy.container method)": [[672, "ivy.Container.sum"]], "var() (ivy.array method)": [[673, "ivy.Array.var"]], "var() (ivy.container method)": [[673, "ivy.Container.var"]], "all() (ivy.array method)": [[674, "ivy.Array.all"]], "all() (ivy.container method)": [[674, "ivy.Container.all"]], "any() (ivy.array method)": [[675, "ivy.Array.any"]], "any() (ivy.container method)": [[675, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[680, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[680, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[680, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[680, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[680, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[680, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[680, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[680, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[680, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[680, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[680, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[680, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[680, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[680, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[680, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[680, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[680, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[680, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[680, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[680, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[681, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[681, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[681, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[681, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[681, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[681, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[681, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[681, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[682, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[682, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[682, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[683, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[683, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[683, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[683, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[683, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[683, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[683, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[683, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[683, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[683, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[683, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[683, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[683, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[683, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[683, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[683, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[684, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[684, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[684, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[684, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[684, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[684, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[684, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[684, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[684, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[684, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[684, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[684, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[684, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[684, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[684, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[684, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[684, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[684, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[684, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[684, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[684, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[684, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[684, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[684, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[684, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[684, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[685, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[685, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[685, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[685, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[685, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[685, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[685, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[686, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[686, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[686, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[686, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[686, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[686, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[686, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[687, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[687, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[687, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[687, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[687, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[688, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[688, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[688, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[688, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[688, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[688, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[688, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[688, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[688, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[688, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[688, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[688, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[688, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[688, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[688, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[688, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[688, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[688, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[688, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[688, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[688, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[689, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[689, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[689, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[690, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[690, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[691, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[692, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[692, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[692, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[692, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[692, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[692, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[692, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[692, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[692, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[692, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[692, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[693, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[693, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[693, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[694, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[694, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[694, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[694, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[694, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[694, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[695, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[695, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[696, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[696, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[697, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[697, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[697, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[697, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[697, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[697, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[697, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[697, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[697, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[697, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[697, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[697, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[697, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[697, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[697, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[697, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[697, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[697, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[697, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[697, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[697, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[697, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[697, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[697, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[697, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[697, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[698, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[698, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[698, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[699, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[699, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[699, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[700, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[700, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[700, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[700, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[700, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[701, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[701, "module-ivy.utils.verbosity"]], "applied libraries": [[750, "term-Applied-Libraries"]], "automatic code conversions": [[750, "term-Automatic-Code-Conversions"]], "backend handler": [[750, "term-Backend-Handler"]], "compositional functions": [[750, "term-Compositional-Functions"]], "convenience functions": [[750, "term-Convenience-Functions"]], "framework": [[750, "term-Framework"]], "framework handler": [[750, "term-Framework-Handler"]], "graph compiler": [[750, "term-Graph-Compiler"]], "ivy array": [[750, "term-Ivy-Array"]], "ivy backends": [[750, "term-Ivy-Backends"]], "ivy builder": [[750, "term-Ivy-Builder"]], "ivy compiler": [[750, "term-Ivy-Compiler"]], "ivy container": [[750, "term-Ivy-Container"]], "ivy frontends": [[750, "term-Ivy-Frontends"]], "ivy functional api": [[750, "term-Ivy-Functional-API"]], "ivy graph compiler": [[750, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[750, "term-Ivy-Transpiler"]], "mixed functions": [[750, "term-Mixed-Functions"]], "native array": [[750, "term-Native-Array"]], "nestable functions": [[750, "term-Nestable-Functions"]], "pipeline": [[750, "term-Pipeline"]], "primary functions": [[750, "term-Primary-Functions"]], "standalone functions": [[750, "term-Standalone-Functions"]], "submodule helper functions": [[750, "term-Submodule-Helper-Functions"]]}})