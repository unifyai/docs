Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_compile_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_compile_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Compile code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 6, 7, 8, 42, 43, 44, 47, 746, 761, 784], "The": [0, 2, 3, 6, 8, 9, 10, 11, 17, 19, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 133, 134, 136, 138, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 176, 177, 179, 180, 182, 183, 184, 185, 191, 192, 193, 194, 195, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 436, 437, 438, 442, 445, 446, 451, 452, 454, 455, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 528, 530, 533, 534, 537, 539, 540, 543, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 730, 731, 732, 733, 734, 735, 740, 743, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 785, 786, 787, 790, 791, 792, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "transpil": [0, 1, 3, 9, 11, 12, 17, 18, 21, 31, 759, 773, 780, 786, 787, 788, 796, 797, 802, 808, 809], "ar": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 45, 46, 49, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 71, 73, 76, 77, 78, 81, 82, 84, 86, 87, 88, 94, 96, 97, 121, 136, 138, 141, 146, 200, 205, 207, 212, 236, 238, 239, 242, 246, 267, 268, 272, 277, 278, 282, 284, 289, 290, 291, 315, 317, 318, 320, 321, 323, 324, 325, 327, 328, 333, 338, 341, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 367, 370, 371, 377, 378, 379, 380, 383, 388, 390, 398, 403, 404, 406, 414, 415, 416, 418, 419, 422, 426, 427, 428, 436, 437, 438, 440, 446, 449, 451, 453, 460, 462, 466, 467, 468, 469, 470, 480, 485, 486, 487, 488, 489, 491, 494, 495, 496, 505, 511, 516, 520, 531, 532, 541, 551, 563, 573, 585, 587, 588, 590, 591, 592, 593, 595, 597, 599, 600, 601, 615, 616, 618, 619, 621, 625, 626, 627, 631, 632, 634, 637, 641, 642, 646, 647, 648, 653, 654, 657, 661, 663, 673, 678, 683, 684, 685, 693, 694, 695, 698, 699, 700, 701, 703, 705, 729, 730, 733, 736, 737, 743, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809], "publicli": [0, 2], "avail": [0, 2, 4, 6, 8, 10, 28, 29, 44, 55, 78, 195, 201, 203, 204, 215, 358, 451, 503, 587, 590, 749, 751, 760, 761, 767, 768, 769, 770, 772, 773, 780, 782, 785, 795, 796, 807, 808], "yet": [0, 2, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 44, 348, 350, 351, 359, 360, 364, 759, 760, 795], "so": [0, 1, 2, 3, 4, 8, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 40, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 352, 365, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 592, 597, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 637, 638, 639, 641, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 683, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 749, 751, 752, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 795, 802, 803, 804, 806], "certain": [0, 1, 2, 71, 121, 137, 138, 585, 760, 761, 763, 769, 776, 782, 785, 795, 806], "part": [0, 2, 17, 18, 21, 50, 53, 54, 76, 77, 82, 96, 106, 109, 112, 144, 145, 146, 252, 256, 279, 315, 316, 337, 349, 352, 356, 358, 367, 404, 446, 489, 582, 585, 588, 593, 626, 627, 732, 733, 749, 755, 759, 761, 763, 766, 769, 774, 776, 779, 780, 782, 783, 785, 787, 788, 792, 794, 795, 800, 802, 807, 808, 809], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 164, 167, 170, 171, 172, 174, 178, 179, 193, 196, 206, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 391, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 537, 543, 548, 549, 550, 551, 553, 555, 556, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 674, 676, 678, 679, 684, 685, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "doc": [0, 2, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 43, 44, 77, 146, 315, 349, 482, 585, 749, 754, 758, 759, 762, 771, 772, 774, 775, 782, 787, 790, 791], "won": [0, 2, 752, 753, 760, 761, 767, 769, 792, 796], "t": [0, 1, 2, 3, 7, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 40, 42, 43, 44, 54, 58, 69, 77, 81, 92, 94, 96, 331, 346, 352, 354, 356, 404, 519, 537, 551, 573, 590, 591, 592, 597, 616, 617, 680, 731, 749, 752, 753, 755, 756, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 774, 776, 777, 778, 779, 782, 783, 785, 787, 789, 790, 791, 792, 795, 796, 800, 802, 804], "work": [0, 1, 2, 3, 26, 28, 29, 40, 41, 43, 47, 54, 77, 94, 367, 489, 597, 679, 680, 684, 689, 690, 749, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 779, 780, 781, 782, 783, 786, 787, 789, 791, 792, 796, 800, 802, 804, 806, 809], "expect": [0, 2, 6, 8, 9, 11, 21, 25, 28, 29, 31, 44, 45, 47, 54, 59, 60, 77, 83, 178, 246, 290, 355, 377, 398, 493, 586, 588, 590, 594, 636, 650, 729, 730, 731, 733, 749, 753, 760, 761, 763, 769, 770, 773, 774, 777, 779, 781, 782, 785, 795, 796], "now": [0, 2, 3, 7, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 44, 731, 732, 733, 749, 753, 760, 763, 764, 765, 766, 767, 768, 769, 770, 775, 777, 780, 781, 782, 783, 785, 789, 790, 792, 794, 795, 802], "when": [0, 1, 2, 8, 10, 19, 21, 23, 24, 28, 29, 31, 33, 34, 35, 43, 45, 49, 50, 51, 53, 54, 59, 60, 63, 64, 67, 71, 73, 74, 76, 77, 82, 83, 86, 87, 90, 97, 141, 151, 222, 239, 244, 246, 262, 272, 277, 290, 291, 295, 347, 355, 356, 358, 361, 362, 367, 377, 390, 404, 406, 415, 418, 451, 460, 462, 467, 487, 489, 519, 535, 543, 549, 585, 586, 588, 590, 592, 593, 594, 595, 597, 599, 600, 603, 605, 618, 634, 639, 650, 651, 652, 660, 672, 673, 682, 683, 684, 693, 694, 695, 698, 699, 701, 702, 714, 716, 718, 720, 729, 730, 731, 732, 733, 734, 740, 751, 752, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 792, 795, 800, 802, 805, 806, 807, 808], "we": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 45, 46, 47, 54, 59, 60, 61, 69, 77, 82, 83, 92, 94, 112, 346, 354, 358, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 455, 458, 502, 512, 551, 573, 574, 576, 581, 582, 590, 591, 593, 594, 595, 634, 650, 656, 657, 658, 660, 662, 663, 665, 667, 729, 733, 740, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 802, 803, 807, 808], "call": [0, 2, 6, 9, 13, 15, 19, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 42, 46, 54, 69, 74, 77, 92, 94, 97, 117, 171, 172, 212, 356, 367, 413, 487, 537, 543, 557, 573, 574, 576, 584, 587, 590, 591, 593, 597, 639, 672, 678, 682, 683, 729, 731, 732, 733, 735, 740, 749, 752, 759, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 789, 790, 791, 792, 795, 802, 803, 806], "an": [0, 1, 2, 3, 5, 6, 17, 18, 19, 21, 24, 26, 28, 29, 34, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 164, 167, 170, 174, 178, 179, 209, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 304, 305, 307, 308, 309, 311, 312, 315, 316, 317, 318, 319, 322, 325, 327, 332, 336, 341, 347, 349, 352, 355, 356, 357, 358, 361, 362, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 386, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 403, 404, 405, 421, 425, 426, 427, 428, 431, 432, 434, 441, 445, 446, 451, 452, 457, 458, 460, 461, 462, 466, 467, 469, 472, 473, 478, 479, 480, 481, 482, 483, 484, 487, 490, 495, 497, 498, 506, 509, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 528, 534, 537, 538, 547, 551, 555, 556, 557, 570, 573, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 678, 691, 693, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 749, 752, 753, 755, 757, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 805, 806, 808, 809], "ivi": [0, 3, 4, 5, 9, 11, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 753, 754, 756, 757, 758, 760, 762, 763, 765, 767, 769, 770, 772, 774, 775, 776, 777, 779, 785, 786, 793, 795, 796, 797, 798, 809], "function": [0, 6, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 164, 165, 166, 167, 170, 171, 172, 174, 178, 179, 196, 198, 199, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 364, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 529, 532, 533, 534, 537, 538, 541, 543, 545, 548, 549, 550, 551, 553, 555, 556, 557, 563, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 678, 679, 680, 682, 683, 684, 685, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 730, 733, 740, 745, 749, 751, 757, 760, 761, 762, 763, 764, 765, 766, 768, 771, 772, 779, 786, 788, 789, 790, 791, 793, 794, 797, 799, 800, 801, 802, 803, 808, 809], "i": [0, 2, 3, 6, 7, 8, 9, 10, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 191, 193, 195, 196, 198, 199, 201, 203, 206, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 383, 386, 388, 390, 391, 392, 393, 394, 397, 398, 401, 402, 403, 404, 406, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 427, 428, 431, 432, 434, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 529, 530, 533, 534, 535, 537, 543, 547, 548, 549, 551, 553, 555, 556, 557, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 730, 731, 732, 733, 734, 735, 737, 740, 743, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "alwai": [0, 50, 51, 54, 55, 61, 73, 74, 77, 84, 104, 123, 151, 222, 272, 328, 352, 356, 358, 416, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 512, 519, 582, 586, 588, 590, 595, 656, 657, 658, 660, 662, 663, 665, 667, 749, 759, 760, 761, 764, 765, 767, 769, 772, 774, 775, 776, 779, 780, 781, 782, 783, 785, 787, 795], "small": [0, 2, 8, 44, 53, 54, 59, 62, 76, 77, 82, 85, 239, 246, 272, 273, 320, 333, 352, 356, 361, 410, 460, 461, 462, 588, 593, 598, 634, 637, 639, 691, 730, 734, 749, 760, 768, 771, 776, 781, 785, 787, 791, 795, 803], "perform": [0, 2, 8, 21, 23, 25, 28, 29, 31, 33, 40, 42, 50, 54, 58, 59, 67, 68, 73, 77, 78, 81, 82, 90, 91, 107, 111, 137, 138, 209, 217, 239, 272, 293, 325, 345, 352, 353, 355, 356, 358, 365, 367, 377, 378, 379, 380, 382, 383, 387, 388, 396, 415, 425, 473, 481, 482, 502, 503, 504, 517, 518, 519, 535, 545, 582, 585, 587, 588, 590, 592, 593, 596, 597, 603, 604, 615, 617, 641, 643, 648, 669, 670, 671, 679, 680, 711, 712, 721, 722, 731, 753, 763, 764, 765, 767, 769, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 790, 795, 799, 802, 803, 804, 805, 806, 807, 809], "hit": [0, 782, 787], "due": [0, 2, 21, 28, 29, 31, 45, 47, 272, 282, 588, 752, 755, 760, 763, 768, 773, 779, 780, 802], "ad": [0, 54, 61, 77, 84, 92, 239, 272, 320, 333, 352, 361, 460, 461, 462, 548, 549, 588, 590, 593, 595, 626, 627, 656, 731, 736, 749, 752, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 791, 795, 801, 802], "python": [0, 10, 13, 19, 31, 36, 40, 42, 43, 44, 46, 47, 54, 63, 77, 86, 121, 206, 218, 246, 281, 362, 466, 467, 468, 469, 470, 570, 585, 587, 588, 590, 599, 692, 693, 694, 695, 697, 740, 743, 750, 751, 752, 758, 760, 761, 763, 766, 767, 768, 773, 780, 782, 787, 789, 790, 795, 797, 799, 802, 803, 804, 808, 809], "wrap": [0, 2, 19, 21, 28, 29, 31, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 358, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 545, 548, 549, 550, 551, 553, 555, 556, 567, 569, 571, 572, 575, 577, 578, 579, 580, 590, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 637, 638, 639, 641, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 749, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 775, 776, 779, 780, 782, 787, 789, 792, 795, 797, 798, 802, 803, 808, 809], "overhead": [0, 8, 21, 28, 29, 31, 795, 805], "becom": [0, 28, 54, 77, 94, 328, 352, 358, 428, 595, 653, 740, 751, 753, 761, 767, 771, 773, 779, 795], "increasingli": [0, 771], "notic": [0, 759, 764, 768, 774, 782, 785], "larg": [0, 43, 53, 54, 76, 77, 222, 239, 246, 272, 273, 367, 480, 588, 593, 639, 760, 761, 768, 790, 802], "model": [0, 2, 4, 5, 6, 12, 17, 18, 19, 45, 47, 54, 239, 272, 357, 419, 588, 749, 790, 791, 797, 800, 801, 802, 803, 804, 805, 806, 808, 809], "multipl": [0, 19, 28, 53, 54, 59, 62, 67, 68, 71, 76, 77, 78, 79, 82, 84, 85, 90, 91, 134, 233, 257, 264, 270, 271, 272, 274, 355, 356, 358, 365, 376, 383, 386, 388, 413, 432, 441, 458, 473, 491, 529, 571, 572, 575, 577, 579, 580, 585, 588, 590, 591, 592, 593, 595, 598, 600, 603, 604, 607, 608, 609, 610, 620, 629, 631, 632, 653, 656, 661, 662, 691, 698, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 749, 753, 759, 761, 764, 765, 767, 771, 773, 774, 776, 779, 780, 781, 782, 785, 787, 795, 800, 801, 802, 809], "improv": [0, 9, 11, 28, 31, 753, 761, 769, 775, 776, 785, 787, 797, 800, 802, 804, 805], "remov": [0, 2, 17, 18, 21, 28, 29, 31, 59, 71, 82, 593, 595, 596, 597, 624, 631, 645, 663, 669, 670, 686, 746, 749, 759, 765, 766, 768, 769, 772, 776, 782, 785, 792, 802], "extra": [0, 2, 29, 71, 97, 117, 570, 584, 590, 764, 769, 771, 777, 779, 780, 781, 785, 787, 799, 804], "around": [0, 3, 12, 13, 15, 17, 71, 97, 358, 446, 451, 761, 763, 764, 766, 770, 775, 776, 780, 783, 789, 795, 797, 800, 802, 809], "each": [0, 2, 9, 11, 21, 22, 23, 28, 29, 31, 32, 33, 35, 42, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 65, 67, 71, 74, 76, 77, 78, 79, 81, 82, 84, 87, 88, 90, 94, 96, 97, 105, 106, 108, 109, 110, 112, 117, 139, 152, 164, 167, 212, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 298, 299, 301, 302, 307, 314, 317, 318, 322, 328, 332, 336, 341, 344, 347, 349, 352, 355, 356, 358, 362, 365, 367, 373, 374, 375, 378, 379, 380, 383, 391, 392, 393, 394, 397, 398, 403, 404, 407, 414, 415, 417, 418, 426, 427, 428, 431, 432, 437, 438, 440, 441, 443, 445, 446, 449, 457, 458, 466, 473, 478, 479, 480, 481, 482, 483, 491, 494, 502, 509, 510, 526, 550, 570, 572, 573, 575, 577, 578, 579, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 620, 621, 622, 625, 626, 627, 631, 633, 634, 635, 637, 639, 640, 641, 646, 655, 659, 661, 662, 664, 666, 668, 678, 685, 692, 701, 703, 704, 706, 712, 713, 720, 731, 734, 735, 736, 751, 752, 753, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 792, 794, 795, 798, 799, 803, 805, 808], "take": [0, 2, 6, 10, 19, 26, 28, 29, 34, 40, 42, 45, 54, 59, 61, 67, 77, 84, 94, 117, 118, 120, 141, 234, 279, 286, 297, 347, 355, 358, 374, 382, 387, 392, 430, 436, 454, 481, 482, 584, 585, 588, 592, 593, 595, 596, 618, 631, 635, 660, 671, 711, 730, 731, 743, 749, 753, 754, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 779, 780, 781, 782, 785, 787, 789, 791, 792, 795, 796, 799, 800, 808], "ani": [0, 1, 2, 3, 8, 13, 15, 17, 18, 19, 20, 21, 30, 31, 34, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 59, 68, 69, 73, 75, 76, 77, 78, 91, 92, 94, 96, 97, 117, 118, 120, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 155, 170, 174, 178, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 300, 304, 315, 316, 322, 325, 347, 349, 352, 355, 356, 358, 361, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 398, 404, 407, 435, 446, 460, 461, 462, 480, 483, 486, 487, 491, 501, 502, 503, 504, 505, 509, 513, 515, 517, 521, 523, 524, 542, 549, 556, 557, 564, 570, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 678, 679, 681, 682, 689, 691, 695, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 727, 728, 730, 731, 733, 734, 735, 736, 740, 743, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 805, 808, 809], "framework": [0, 2, 6, 7, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 42, 44, 46, 49, 55, 169, 191, 201, 204, 215, 500, 516, 520, 551, 554, 586, 587, 590, 597, 674, 728, 735, 740, 751, 752, 753, 757, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 782, 783, 785, 786, 787, 789, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806], "specif": [0, 2, 19, 20, 25, 26, 28, 29, 30, 32, 34, 42, 52, 54, 55, 75, 77, 78, 179, 210, 213, 246, 267, 268, 277, 362, 470, 502, 503, 504, 530, 586, 587, 588, 590, 593, 595, 596, 599, 602, 603, 626, 627, 643, 664, 669, 670, 671, 692, 709, 714, 715, 716, 718, 732, 733, 740, 745, 749, 751, 757, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 776, 779, 780, 781, 782, 783, 785, 787, 788, 789, 791, 792, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 809], "backend": [0, 2, 6, 20, 21, 22, 29, 31, 32, 34, 49, 50, 54, 55, 59, 71, 77, 78, 82, 96, 129, 165, 166, 169, 191, 198, 199, 201, 204, 215, 356, 402, 404, 487, 495, 507, 508, 516, 519, 520, 530, 537, 551, 554, 585, 586, 587, 590, 593, 641, 728, 733, 735, 739, 740, 751, 757, 758, 760, 761, 762, 763, 764, 768, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 788, 789, 792, 797, 802, 805, 808, 809], "composit": [0, 19, 28, 165, 166, 198, 199, 291, 356, 408, 507, 508, 586, 587, 588, 590, 759, 762, 764, 765, 767, 769, 770, 777, 779, 780, 781, 782, 785, 787, 791, 792, 795, 797, 803], "both": [0, 2, 9, 10, 11, 13, 15, 23, 25, 28, 29, 33, 34, 41, 43, 50, 53, 54, 55, 58, 59, 73, 76, 77, 78, 81, 82, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 177, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 323, 325, 328, 333, 349, 352, 355, 356, 358, 362, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 440, 446, 466, 480, 483, 509, 513, 515, 517, 526, 556, 580, 581, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 749, 759, 761, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 780, 782, 785, 787, 789, 790, 791, 792, 794, 795, 802, 805, 807, 808, 809], "produc": [0, 41, 54, 55, 58, 77, 81, 297, 300, 303, 306, 347, 349, 592, 619, 759, 769, 774, 779, 781, 782, 783, 803, 805], "simplifi": [0, 743, 752, 773, 780, 787, 788, 791, 798, 800, 801, 802, 805, 808, 809], "execut": [0, 9, 11, 19, 20, 21, 23, 28, 29, 31, 33, 36, 43, 45, 47, 118, 120, 557, 584, 587, 590, 760, 761, 766, 767, 768, 769, 770, 771, 773, 776, 777, 779, 782, 785, 787, 789, 792, 795, 797, 798, 802, 803, 804, 805, 806, 808], "comput": [0, 2, 25, 26, 28, 29, 35, 36, 41, 42, 44, 48, 53, 54, 55, 56, 58, 59, 60, 65, 67, 70, 71, 76, 77, 78, 79, 81, 82, 83, 90, 94, 107, 111, 212, 222, 229, 232, 234, 239, 240, 241, 246, 247, 248, 250, 251, 257, 258, 259, 266, 267, 268, 269, 271, 272, 275, 280, 281, 295, 305, 308, 309, 317, 318, 322, 326, 329, 331, 332, 336, 338, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 365, 367, 373, 374, 375, 376, 377, 382, 383, 386, 387, 388, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 406, 408, 411, 413, 415, 417, 418, 419, 420, 421, 422, 423, 440, 443, 455, 460, 462, 472, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 496, 497, 498, 542, 564, 571, 573, 574, 576, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 597, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 620, 621, 625, 626, 627, 630, 631, 632, 634, 636, 638, 640, 641, 643, 645, 647, 648, 650, 651, 652, 656, 678, 703, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 731, 734, 749, 752, 753, 760, 767, 768, 769, 776, 778, 780, 782, 784, 785, 787, 790, 795, 797, 798, 800, 802, 803, 805, 806, 808], "compos": [0, 6, 9, 10, 28, 29, 42, 54, 77, 355, 369, 370, 371, 729, 760, 767, 780, 782, 795, 802, 809], "from": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 84, 86, 87, 90, 91, 92, 94, 97, 121, 123, 131, 133, 134, 135, 136, 139, 140, 143, 146, 148, 154, 172, 178, 179, 195, 200, 205, 211, 212, 238, 246, 247, 274, 278, 279, 286, 290, 303, 304, 310, 315, 317, 318, 323, 326, 328, 329, 331, 332, 344, 349, 352, 355, 356, 358, 362, 367, 378, 379, 380, 394, 398, 410, 416, 419, 430, 432, 441, 446, 452, 454, 457, 458, 466, 467, 468, 469, 470, 481, 482, 501, 509, 510, 512, 532, 543, 553, 570, 572, 573, 577, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 606, 614, 615, 621, 624, 641, 645, 646, 647, 654, 657, 660, 663, 669, 670, 671, 673, 684, 685, 686, 692, 693, 694, 695, 699, 702, 703, 705, 711, 712, 717, 718, 719, 720, 721, 722, 728, 729, 730, 731, 733, 735, 740, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809], "onli": [0, 2, 13, 15, 28, 29, 34, 40, 42, 44, 46, 50, 53, 54, 59, 61, 63, 71, 73, 76, 77, 82, 84, 86, 94, 96, 112, 138, 177, 178, 207, 267, 268, 273, 279, 303, 326, 331, 349, 352, 355, 356, 358, 362, 367, 377, 390, 404, 407, 417, 418, 426, 427, 428, 436, 466, 467, 483, 496, 582, 585, 586, 587, 588, 590, 592, 593, 595, 597, 599, 600, 602, 603, 618, 631, 638, 641, 657, 660, 672, 673, 679, 680, 682, 683, 684, 689, 690, 693, 694, 695, 698, 699, 709, 715, 718, 731, 733, 735, 743, 749, 751, 754, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 793, 795, 801, 802, 803, 808, 809], "which": [0, 2, 3, 6, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 162, 164, 167, 169, 172, 179, 191, 196, 200, 205, 207, 210, 211, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 337, 338, 339, 341, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 365, 367, 377, 378, 379, 380, 382, 383, 387, 388, 397, 398, 401, 404, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 431, 451, 452, 453, 454, 455, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 525, 526, 531, 532, 533, 534, 548, 549, 551, 553, 555, 556, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 615, 616, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 631, 632, 634, 635, 636, 638, 639, 640, 641, 645, 647, 648, 650, 651, 652, 653, 654, 656, 657, 659, 660, 661, 662, 663, 664, 667, 668, 677, 678, 679, 680, 685, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 745, 749, 751, 752, 753, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 809], "result": [0, 2, 3, 6, 8, 9, 10, 11, 13, 15, 28, 29, 40, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 153, 178, 179, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 407, 408, 410, 411, 412, 413, 414, 419, 420, 421, 422, 423, 425, 431, 434, 436, 437, 438, 439, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 497, 498, 502, 503, 504, 509, 510, 519, 526, 533, 534, 571, 572, 573, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 672, 675, 678, 679, 681, 685, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 737, 747, 749, 757, 759, 761, 763, 764, 766, 767, 768, 769, 771, 772, 775, 776, 778, 779, 780, 781, 782, 783, 787, 790, 795, 803, 805], "code": [0, 2, 3, 7, 9, 11, 17, 18, 25, 26, 28, 30, 31, 32, 33, 34, 35, 42, 43, 52, 53, 71, 75, 76, 97, 213, 259, 367, 487, 495, 503, 504, 519, 533, 537, 551, 587, 590, 592, 593, 595, 614, 633, 634, 635, 664, 747, 749, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809], "all": [0, 2, 3, 4, 6, 7, 8, 10, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 41, 42, 44, 45, 47, 49, 50, 54, 55, 58, 59, 61, 63, 68, 69, 71, 72, 73, 76, 77, 78, 81, 82, 84, 86, 91, 92, 94, 121, 134, 141, 144, 145, 146, 200, 207, 239, 243, 271, 272, 315, 316, 325, 342, 349, 352, 355, 356, 358, 367, 388, 397, 398, 404, 407, 415, 418, 446, 457, 486, 491, 494, 511, 531, 532, 548, 555, 556, 570, 573, 585, 587, 588, 590, 591, 592, 593, 595, 596, 597, 599, 600, 604, 615, 617, 618, 621, 634, 639, 640, 643, 648, 657, 661, 663, 669, 670, 671, 672, 673, 674, 683, 684, 685, 686, 692, 695, 700, 729, 730, 731, 737, 740, 745, 749, 751, 752, 753, 754, 755, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809], "don": [0, 3, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 44, 69, 92, 749, 753, 759, 760, 761, 768, 769, 770, 774, 778, 782, 785, 791, 795], "contribut": [0, 43, 54, 77, 367, 483, 755, 758, 759, 760, 761, 766, 774, 780, 787, 796, 806], "output": [0, 2, 6, 7, 8, 10, 19, 25, 26, 28, 29, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 153, 178, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 352, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 404, 407, 408, 411, 412, 413, 414, 416, 419, 420, 421, 422, 423, 424, 430, 431, 434, 436, 437, 438, 439, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 496, 497, 498, 502, 503, 504, 506, 510, 519, 526, 533, 534, 535, 558, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 672, 685, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 743, 749, 756, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 789, 791, 792, 795, 797, 803], "print": [0, 6, 7, 9, 10, 13, 15, 19, 20, 22, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 151, 152, 153, 154, 156, 162, 163, 164, 165, 166, 169, 171, 172, 174, 179, 191, 192, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 213, 214, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 311, 312, 315, 320, 322, 335, 336, 341, 345, 347, 349, 352, 355, 356, 357, 358, 361, 367, 373, 374, 375, 376, 378, 379, 381, 383, 386, 388, 391, 392, 393, 394, 396, 398, 402, 404, 413, 419, 420, 421, 422, 423, 429, 430, 431, 442, 446, 451, 452, 454, 455, 459, 463, 464, 465, 480, 481, 482, 483, 489, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 529, 532, 533, 534, 538, 539, 540, 543, 546, 547, 548, 549, 551, 553, 555, 556, 557, 561, 562, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 619, 620, 621, 622, 624, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 639, 641, 642, 643, 645, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 740, 743, 747, 749, 760, 761, 767, 771, 781, 782, 784, 787, 789, 790, 791], "statement": [0, 2, 36, 41, 768, 779, 782, 785, 795], "logger": 0, "etc": [0, 3, 31, 36, 43, 50, 54, 63, 65, 69, 73, 77, 86, 92, 129, 137, 138, 141, 355, 362, 383, 388, 398, 466, 467, 469, 470, 585, 599, 601, 692, 693, 694, 695, 703, 704, 705, 706, 730, 731, 732, 733, 734, 735, 736, 753, 759, 760, 761, 763, 764, 765, 766, 767, 769, 771, 773, 775, 780, 781, 782, 783, 787, 789, 790, 795, 797, 800, 802, 808], "ha": [0, 1, 3, 6, 8, 10, 13, 15, 19, 21, 25, 28, 29, 31, 34, 36, 40, 47, 50, 54, 59, 61, 65, 67, 71, 74, 77, 78, 82, 84, 88, 90, 94, 139, 195, 219, 239, 242, 244, 246, 256, 272, 274, 277, 279, 282, 284, 285, 289, 317, 318, 349, 355, 357, 358, 367, 390, 421, 430, 453, 454, 457, 479, 481, 482, 484, 515, 585, 587, 588, 592, 593, 595, 600, 601, 603, 618, 631, 632, 640, 641, 643, 645, 648, 656, 663, 701, 704, 705, 706, 711, 712, 715, 717, 718, 719, 720, 729, 740, 751, 752, 753, 759, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 791, 792, 794, 795, 798, 801, 802, 804, 805, 808], "": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 43, 45, 46, 47, 50, 54, 55, 56, 59, 67, 77, 79, 82, 90, 117, 139, 144, 145, 165, 166, 195, 198, 199, 211, 246, 281, 316, 320, 322, 331, 333, 339, 343, 345, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 370, 371, 377, 383, 388, 398, 402, 410, 417, 421, 437, 438, 446, 460, 461, 462, 470, 480, 489, 507, 508, 528, 550, 551, 572, 574, 575, 576, 577, 579, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 597, 603, 607, 609, 611, 613, 623, 634, 641, 642, 648, 684, 718, 720, 729, 730, 731, 732, 733, 734, 735, 736, 740, 749, 752, 753, 754, 755, 757, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 801, 802, 803, 805, 806, 807, 808], "likewis": [0, 2, 19, 24, 28, 35, 749, 761, 767, 769, 772, 775, 776, 780, 785, 790, 808], "redund": [0, 749, 769, 773, 780], "oper": [0, 19, 20, 25, 28, 29, 30, 34, 41, 44, 50, 51, 53, 54, 55, 58, 71, 73, 74, 76, 77, 78, 81, 97, 112, 137, 138, 179, 209, 217, 222, 224, 233, 236, 239, 246, 261, 263, 272, 273, 277, 281, 284, 289, 297, 317, 318, 346, 347, 349, 354, 355, 358, 369, 370, 371, 373, 374, 375, 381, 382, 383, 387, 391, 392, 393, 394, 396, 397, 398, 453, 495, 502, 503, 504, 551, 582, 585, 586, 587, 588, 590, 592, 593, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 643, 645, 717, 719, 731, 749, 751, 759, 760, 762, 763, 764, 767, 769, 770, 771, 772, 773, 776, 779, 780, 782, 785, 787, 790, 791, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809], "origin": [0, 2, 9, 11, 26, 28, 29, 30, 31, 32, 34, 41, 42, 43, 47, 54, 59, 61, 67, 71, 77, 82, 84, 90, 94, 96, 97, 227, 252, 279, 310, 349, 356, 358, 367, 415, 439, 445, 447, 450, 481, 482, 486, 487, 488, 489, 588, 593, 595, 603, 632, 660, 661, 712, 740, 749, 753, 759, 760, 761, 765, 766, 768, 769, 777, 779, 780, 781, 787, 802, 803], "also": [0, 2, 3, 6, 7, 9, 11, 13, 15, 19, 21, 23, 24, 26, 28, 29, 31, 33, 34, 35, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 167, 170, 171, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 355, 356, 358, 365, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 585, 586, 588, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 682, 683, 684, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 740, 749, 751, 752, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 805, 807, 808, 809], "increas": [0, 9, 11, 21, 28, 31, 54, 59, 61, 77, 82, 84, 358, 367, 446, 483, 593, 595, 597, 646, 655, 668, 684, 751, 769, 773, 780, 783, 785, 802], "its": [0, 3, 11, 19, 21, 28, 29, 31, 34, 41, 42, 44, 49, 51, 54, 61, 71, 74, 77, 78, 84, 106, 109, 112, 118, 152, 157, 158, 159, 160, 161, 212, 239, 272, 291, 297, 347, 355, 358, 367, 394, 457, 483, 506, 554, 582, 584, 586, 587, 588, 590, 593, 595, 597, 631, 656, 660, 661, 665, 678, 729, 749, 759, 760, 764, 767, 768, 769, 770, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 792, 795, 797, 801, 802, 808], "overal": [0, 592, 615, 767, 769, 770, 772, 792, 798, 800, 801, 802], "obj": [0, 2, 46, 122, 123, 585], "none": [0, 2, 6, 8, 9, 11, 28, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 169, 170, 171, 172, 174, 176, 179, 189, 191, 194, 195, 207, 208, 209, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 512, 513, 514, 515, 517, 518, 519, 521, 522, 525, 530, 533, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 742, 749, 757, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 776, 779, 780, 781, 782, 783, 785, 787, 789, 791, 792], "arg_stateful_idx": [0, 732, 733], "kwarg_stateful_idx": [0, 732, 733], "include_gener": 0, "true": [0, 2, 6, 7, 8, 9, 10, 11, 13, 15, 19, 22, 23, 25, 26, 28, 29, 33, 34, 35, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 120, 123, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 191, 195, 196, 198, 199, 203, 206, 207, 208, 209, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 431, 432, 433, 434, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 472, 473, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 533, 534, 535, 538, 541, 542, 544, 545, 547, 548, 549, 551, 553, 555, 556, 558, 563, 564, 566, 567, 569, 572, 573, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 680, 682, 683, 684, 685, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 731, 732, 733, 734, 735, 737, 740, 743, 747, 749, 757, 760, 765, 767, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 784, 785, 787, 790, 791, 792], "array_cach": 0, "return_backend_compiled_fn": [0, 28, 29], "fals": [0, 2, 8, 9, 11, 15, 19, 28, 31, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 123, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 196, 201, 203, 206, 207, 209, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 396, 397, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 472, 473, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 529, 533, 534, 535, 538, 541, 542, 544, 545, 547, 548, 549, 551, 553, 555, 556, 558, 563, 564, 566, 567, 569, 572, 573, 575, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 682, 683, 684, 685, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 731, 732, 733, 735, 737, 740, 743, 744, 747, 749, 757, 760, 763, 765, 768, 769, 770, 771, 773, 779, 780, 781, 782, 784, 785, 787, 790, 791, 792], "static_argnum": [0, 787], "static_argnam": [0, 787], "arg": [0, 2, 6, 8, 9, 10, 13, 15, 23, 24, 26, 28, 29, 33, 34, 35, 46, 49, 71, 93, 100, 117, 202, 212, 557, 584, 585, 587, 590, 727, 728, 731, 733, 737, 740, 743, 747, 749, 764, 769, 770, 773, 778, 779, 780, 785, 787, 791], "kwarg": [0, 2, 6, 7, 8, 11, 28, 42, 46, 49, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 100, 202, 358, 446, 529, 557, 585, 587, 590, 727, 728, 731, 733, 740, 747, 749, 764, 769, 770, 773, 776, 779, 780, 785, 787, 791], "callabl": [0, 2, 46, 54, 55, 69, 77, 78, 81, 92, 117, 118, 120, 124, 125, 126, 127, 128, 165, 166, 198, 199, 212, 345, 353, 355, 358, 397, 425, 446, 492, 496, 501, 503, 507, 508, 529, 557, 570, 574, 576, 581, 584, 585, 586, 587, 590, 591, 596, 597, 669, 670, 671, 678, 679, 680, 682, 683, 684, 685, 735, 744, 767, 773, 778, 780, 787], "set": [0, 2, 6, 13, 15, 21, 28, 29, 31, 34, 42, 43, 44, 45, 46, 49, 54, 55, 58, 59, 64, 66, 67, 71, 77, 78, 81, 82, 87, 89, 90, 109, 112, 120, 144, 146, 180, 181, 182, 183, 184, 195, 208, 209, 210, 211, 212, 227, 315, 324, 338, 340, 345, 349, 352, 353, 355, 356, 358, 367, 377, 401, 405, 406, 422, 436, 446, 449, 455, 480, 485, 486, 487, 488, 489, 491, 495, 502, 519, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 551, 559, 582, 584, 585, 586, 587, 588, 590, 592, 593, 597, 599, 600, 602, 603, 615, 619, 621, 632, 634, 637, 640, 641, 672, 679, 682, 683, 684, 689, 690, 696, 698, 699, 703, 705, 706, 707, 710, 718, 720, 729, 730, 731, 733, 735, 740, 746, 751, 754, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 779, 780, 781, 782, 783, 785, 787, 789, 790, 796, 800, 801, 802, 803, 804, 806, 809], "them": [0, 2, 5, 6, 9, 11, 13, 15, 17, 28, 29, 34, 496, 532, 590, 731, 749, 750, 751, 752, 753, 756, 759, 761, 763, 764, 765, 766, 767, 768, 769, 773, 774, 777, 779, 780, 781, 782, 784, 787, 789, 790, 791, 795, 797, 799, 800, 802, 804, 808], "If": [0, 1, 2, 3, 4, 6, 7, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 43, 46, 47, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 179, 195, 211, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 316, 317, 320, 321, 322, 324, 325, 326, 328, 332, 333, 338, 339, 341, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 383, 386, 388, 390, 391, 392, 393, 398, 402, 404, 406, 407, 412, 414, 416, 417, 419, 420, 421, 422, 423, 426, 427, 428, 431, 432, 434, 436, 437, 438, 441, 445, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 525, 526, 533, 534, 538, 548, 549, 551, 553, 555, 556, 569, 570, 573, 575, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 615, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 684, 685, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 730, 731, 733, 734, 740, 749, 751, 754, 755, 756, 757, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 792, 795, 796], "specifi": [0, 2, 25, 26, 28, 29, 33, 34, 35, 46, 48, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 91, 94, 104, 106, 109, 112, 121, 130, 135, 137, 142, 144, 145, 147, 151, 153, 200, 205, 207, 211, 212, 213, 281, 290, 316, 320, 333, 338, 349, 352, 355, 356, 357, 358, 362, 367, 373, 374, 375, 377, 383, 388, 398, 404, 412, 414, 417, 421, 422, 424, 436, 439, 448, 449, 451, 452, 467, 478, 480, 481, 482, 485, 486, 489, 492, 509, 510, 512, 515, 528, 538, 570, 582, 585, 586, 587, 588, 590, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 618, 619, 621, 623, 624, 626, 627, 632, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 661, 663, 664, 667, 668, 676, 677, 679, 680, 687, 688, 689, 690, 693, 694, 695, 697, 698, 699, 701, 704, 705, 706, 707, 711, 712, 713, 717, 719, 721, 722, 727, 729, 731, 732, 733, 760, 762, 766, 769, 770, 775, 776, 777, 779, 780, 781, 782, 787, 790, 791, 808], "eagerli": [0, 2, 23, 24, 28, 29, 33, 34, 35, 42, 749], "otherwis": [0, 1, 2, 28, 29, 46, 49, 50, 51, 53, 54, 55, 58, 59, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 121, 123, 129, 134, 136, 137, 138, 141, 143, 148, 151, 152, 154, 155, 157, 158, 159, 160, 161, 170, 174, 178, 179, 195, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 298, 299, 301, 302, 304, 313, 314, 320, 321, 322, 324, 325, 326, 332, 333, 339, 341, 343, 344, 345, 347, 349, 352, 355, 356, 361, 373, 374, 375, 378, 379, 380, 416, 417, 419, 420, 422, 423, 426, 427, 428, 431, 432, 434, 436, 437, 438, 445, 452, 454, 455, 458, 460, 462, 463, 464, 465, 467, 479, 480, 481, 482, 483, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 526, 533, 534, 548, 549, 551, 553, 555, 556, 557, 569, 573, 575, 580, 584, 585, 586, 587, 588, 590, 591, 592, 593, 596, 597, 600, 601, 602, 603, 604, 606, 607, 608, 609, 615, 616, 618, 619, 620, 621, 622, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 641, 645, 647, 648, 650, 651, 652, 653, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 685, 692, 693, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 733, 734, 740, 749, 761, 764, 767, 769, 770, 771, 776, 777, 779, 782, 787], "happen": [0, 2, 24, 28, 29, 291, 588, 749, 753, 760, 761, 770, 779, 782, 790], "lazili": [0, 2, 23, 24, 25, 28, 29, 33, 35, 46, 749], "paramet": [0, 2, 15, 26, 28, 29, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 529, 530, 533, 534, 537, 538, 539, 540, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 743, 745, 749, 759, 764, 772, 773, 775, 780, 781, 782, 783, 787, 789, 790, 794, 803], "creat": [0, 1, 2, 8, 19, 20, 21, 23, 24, 28, 29, 30, 31, 33, 34, 35, 42, 43, 44, 46, 47, 50, 53, 54, 63, 71, 73, 76, 77, 82, 86, 121, 122, 123, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 273, 303, 304, 313, 314, 315, 349, 355, 356, 358, 362, 373, 374, 375, 396, 406, 415, 418, 424, 446, 451, 466, 467, 468, 469, 470, 537, 553, 570, 581, 585, 588, 590, 591, 599, 636, 692, 693, 694, 695, 697, 728, 730, 731, 732, 733, 734, 735, 736, 752, 754, 755, 760, 761, 764, 765, 766, 768, 769, 770, 773, 776, 777, 779, 780, 781, 782, 785, 787, 788, 791, 793, 794, 797, 802, 803, 808], "option": [0, 2, 34, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 169, 179, 191, 195, 207, 210, 211, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 500, 502, 503, 504, 505, 506, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 525, 530, 533, 534, 538, 548, 549, 551, 553, 555, 556, 557, 569, 571, 572, 573, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 682, 683, 684, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 730, 733, 735, 736, 743, 747, 759, 760, 761, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 782, 783, 785, 787, 792, 795, 802, 808], "list": [0, 3, 7, 8, 9, 10, 44, 49, 50, 51, 53, 54, 55, 58, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 134, 136, 139, 140, 141, 143, 148, 152, 154, 167, 171, 172, 179, 195, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 304, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 333, 339, 340, 341, 343, 344, 345, 352, 355, 356, 358, 365, 373, 374, 375, 377, 378, 379, 380, 391, 392, 393, 394, 404, 406, 409, 414, 415, 418, 419, 420, 422, 423, 426, 427, 428, 429, 431, 432, 441, 452, 454, 455, 458, 460, 462, 463, 464, 465, 467, 472, 480, 481, 482, 483, 491, 493, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 517, 518, 519, 521, 522, 525, 529, 533, 534, 548, 549, 551, 553, 554, 555, 556, 557, 569, 570, 575, 580, 585, 586, 587, 588, 590, 592, 593, 595, 597, 598, 601, 602, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 643, 645, 650, 651, 652, 653, 654, 657, 660, 661, 662, 663, 664, 667, 668, 672, 673, 674, 675, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 708, 709, 711, 712, 715, 717, 718, 720, 721, 722, 728, 729, 731, 737, 743, 758, 759, 760, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 779, 780, 781, 782, 783, 787, 790, 791, 792, 795, 802, 803, 808], "instanc": [0, 19, 25, 28, 29, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 164, 167, 170, 171, 172, 174, 179, 196, 208, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 352, 355, 356, 357, 358, 361, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 391, 392, 393, 394, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 544, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 755, 759, 760, 761, 763, 764, 765, 769, 771, 772, 773, 775, 776, 777, 778, 779, 782, 790, 791, 792, 797, 803], "consid": [0, 23, 33, 34, 54, 59, 65, 77, 82, 112, 146, 267, 268, 315, 320, 323, 333, 349, 352, 356, 367, 404, 406, 415, 480, 582, 585, 588, 593, 601, 623, 634, 703, 704, 705, 706, 730, 751, 752, 764, 765, 768, 769, 776, 778, 783, 785, 788, 789, 790, 799, 803, 807, 809], "dure": [0, 9, 11, 21, 23, 28, 31, 33, 34, 52, 56, 67, 71, 75, 79, 90, 213, 355, 378, 379, 380, 537, 557, 571, 572, 577, 587, 590, 591, 592, 593, 596, 603, 615, 631, 669, 670, 671, 718, 720, 729, 732, 733, 734, 735, 760, 767, 769, 770, 773, 776, 777, 779, 780, 781, 782, 785, 795, 802, 803, 808], "posit": [0, 44, 46, 49, 53, 54, 55, 59, 60, 61, 76, 77, 78, 82, 83, 84, 94, 132, 134, 146, 164, 219, 220, 221, 225, 228, 239, 246, 253, 254, 260, 262, 272, 273, 280, 281, 285, 286, 290, 304, 315, 320, 323, 333, 349, 352, 356, 358, 401, 416, 422, 445, 496, 506, 570, 583, 585, 586, 588, 590, 593, 594, 595, 599, 600, 604, 620, 623, 645, 650, 656, 661, 696, 701, 721, 722, 728, 749, 759, 761, 763, 767, 780, 782, 783, 790, 794, 804], "argument": [0, 2, 23, 25, 26, 28, 29, 31, 33, 34, 35, 40, 42, 44, 46, 49, 50, 53, 54, 55, 59, 71, 72, 76, 77, 78, 94, 97, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 391, 392, 393, 394, 404, 446, 480, 483, 487, 492, 493, 495, 496, 501, 503, 504, 509, 513, 515, 517, 519, 529, 533, 534, 551, 556, 557, 570, 580, 585, 586, 588, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 678, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 731, 732, 733, 740, 743, 745, 749, 751, 759, 762, 763, 764, 765, 766, 767, 771, 772, 774, 776, 781, 782, 783, 785, 787, 789, 790, 797, 802], "keyword": [0, 2, 26, 28, 29, 44, 46, 49, 50, 54, 71, 77, 97, 139, 273, 358, 367, 446, 480, 493, 496, 529, 557, 585, 588, 590, 597, 603, 678, 719, 732, 733, 743, 759, 764, 767, 769, 770, 777, 779, 780, 781, 782, 783, 785, 790], "str": [0, 2, 44, 46, 49, 50, 54, 55, 58, 59, 60, 61, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 139, 141, 143, 148, 149, 152, 154, 156, 157, 158, 159, 163, 164, 167, 168, 169, 170, 171, 172, 174, 176, 179, 180, 181, 182, 183, 184, 191, 192, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 355, 356, 357, 358, 361, 367, 373, 374, 375, 377, 378, 379, 380, 382, 383, 387, 388, 391, 392, 393, 394, 396, 397, 398, 400, 404, 415, 418, 419, 420, 421, 422, 423, 426, 427, 428, 430, 431, 436, 452, 454, 455, 460, 461, 462, 463, 464, 465, 467, 469, 480, 481, 482, 483, 489, 491, 492, 494, 495, 497, 498, 500, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 530, 533, 534, 536, 537, 546, 548, 549, 551, 553, 555, 556, 569, 573, 580, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 678, 679, 684, 689, 692, 693, 694, 695, 697, 700, 703, 704, 705, 707, 711, 712, 713, 715, 717, 718, 720, 721, 722, 731, 733, 734, 743, 769, 770, 773, 776, 779, 780, 783, 787, 792], "current": [0, 19, 28, 29, 42, 43, 54, 55, 71, 77, 97, 117, 165, 166, 169, 186, 187, 188, 189, 190, 191, 197, 198, 199, 200, 205, 207, 356, 358, 402, 403, 446, 507, 508, 511, 516, 520, 531, 532, 551, 584, 586, 587, 590, 593, 597, 625, 672, 682, 683, 729, 733, 740, 746, 749, 753, 756, 759, 760, 761, 763, 765, 767, 768, 769, 770, 773, 774, 776, 779, 780, 781, 782, 785, 787, 792, 794, 795, 802, 808, 809], "bool": [0, 2, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 123, 129, 134, 135, 136, 137, 138, 139, 141, 143, 148, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 187, 191, 195, 196, 198, 199, 201, 203, 206, 207, 212, 213, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 316, 320, 321, 322, 324, 326, 332, 333, 338, 339, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 367, 373, 374, 375, 377, 378, 379, 380, 390, 391, 392, 393, 396, 404, 406, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 434, 435, 436, 437, 438, 441, 445, 449, 452, 454, 455, 458, 460, 462, 463, 464, 465, 467, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 533, 534, 538, 547, 548, 549, 551, 553, 555, 556, 569, 572, 573, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 618, 619, 620, 621, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 638, 639, 641, 645, 646, 648, 650, 651, 652, 653, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 678, 679, 680, 682, 683, 684, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 731, 734, 735, 743, 747, 769, 771, 773, 779, 780, 782, 783, 785, 787, 792], "includ": [0, 2, 3, 17, 21, 31, 36, 50, 53, 54, 55, 59, 64, 67, 68, 71, 73, 76, 77, 78, 82, 87, 90, 91, 121, 122, 123, 137, 138, 140, 146, 219, 243, 247, 248, 249, 252, 254, 257, 265, 273, 286, 291, 305, 308, 309, 310, 315, 317, 319, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 340, 343, 344, 349, 355, 358, 367, 373, 374, 375, 400, 403, 405, 437, 438, 440, 443, 445, 447, 450, 468, 470, 471, 479, 483, 485, 486, 488, 489, 515, 569, 585, 588, 590, 593, 597, 599, 600, 603, 604, 625, 646, 648, 672, 695, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 734, 745, 749, 752, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 780, 781, 782, 783, 785, 787, 794, 795, 799, 800, 802, 804, 807, 808, 809], "creation": [0, 44, 54, 71, 77, 97, 766, 769, 770, 775, 777, 780, 781, 782, 783, 787, 802, 804, 808], "constant": [0, 13, 15, 20, 23, 24, 30, 33, 35, 40, 54, 61, 62, 77, 84, 85, 94, 357, 358, 421, 446, 595, 597, 598, 655, 678, 691, 730, 732, 733, 734, 749, 776, 781, 783, 791, 792, 795], "appear": [0, 358, 437, 438, 570, 590, 760, 761, 763, 780, 785], "whether": [0, 2, 17, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 122, 123, 134, 136, 141, 143, 148, 151, 152, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 179, 191, 195, 196, 198, 199, 201, 203, 206, 207, 209, 212, 213, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 316, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 349, 352, 355, 356, 357, 358, 367, 373, 374, 375, 377, 378, 379, 380, 396, 410, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 434, 436, 437, 438, 441, 445, 452, 454, 455, 458, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 533, 534, 535, 536, 538, 541, 542, 544, 545, 547, 548, 549, 551, 553, 555, 556, 563, 564, 567, 569, 572, 573, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 603, 604, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 630, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 678, 679, 680, 682, 683, 684, 685, 689, 690, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 727, 728, 731, 732, 733, 734, 735, 743, 749, 754, 759, 760, 764, 767, 769, 771, 775, 779, 780, 782, 784, 785], "appli": [0, 2, 9, 11, 25, 28, 29, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 352, 353, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 390, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 582, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 634, 636, 637, 638, 639, 641, 645, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 678, 681, 684, 685, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 727, 731, 734, 749, 754, 756, 759, 760, 761, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 782, 783, 785, 789, 790, 791, 792, 793, 795, 797, 803], "nativ": [0, 2, 6, 7, 19, 28, 29, 49, 50, 52, 55, 72, 75, 78, 96, 100, 140, 149, 150, 156, 157, 158, 159, 160, 161, 175, 178, 193, 194, 195, 196, 206, 214, 218, 519, 521, 525, 532, 537, 554, 585, 586, 587, 590, 728, 740, 749, 757, 759, 765, 769, 770, 773, 776, 777, 779, 780, 781, 782, 787, 789, 790, 797, 800, 809], "e": [0, 28, 45, 46, 50, 54, 59, 63, 65, 66, 67, 69, 76, 77, 82, 86, 89, 90, 92, 94, 96, 129, 138, 139, 142, 143, 146, 150, 179, 192, 219, 220, 221, 225, 227, 228, 231, 233, 235, 239, 240, 242, 245, 246, 252, 253, 260, 261, 262, 263, 270, 271, 272, 273, 275, 277, 279, 281, 282, 285, 286, 290, 296, 315, 349, 355, 356, 362, 367, 368, 373, 374, 377, 391, 392, 393, 394, 407, 413, 466, 467, 468, 469, 470, 481, 482, 490, 583, 585, 586, 587, 588, 592, 593, 595, 597, 599, 601, 602, 603, 618, 621, 626, 627, 631, 632, 634, 637, 640, 641, 642, 645, 648, 656, 664, 675, 679, 680, 681, 684, 689, 690, 693, 694, 695, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 731, 743, 749, 752, 753, 754, 755, 757, 759, 760, 761, 762, 763, 765, 767, 769, 773, 778, 780, 782, 787, 790, 795, 796, 797, 798], "tf": [0, 2, 6, 8, 13, 15, 20, 23, 24, 26, 28, 29, 30, 31, 33, 35, 40, 45, 46, 749, 764, 765, 769, 770, 775, 779, 780, 782, 783, 785, 787, 792, 795, 797, 802], "after": [0, 2, 6, 7, 8, 9, 10, 11, 28, 29, 43, 54, 55, 56, 58, 62, 71, 77, 78, 79, 81, 85, 185, 286, 339, 352, 355, 356, 358, 377, 378, 379, 380, 397, 413, 435, 446, 519, 572, 575, 577, 578, 579, 586, 588, 590, 591, 592, 597, 598, 605, 606, 607, 608, 610, 612, 614, 615, 683, 691, 735, 740, 749, 755, 759, 760, 761, 763, 765, 766, 768, 769, 771, 773, 775, 778, 781, 782, 786, 796, 802], "union": [0, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 525, 526, 528, 529, 533, 534, 538, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 679, 680, 681, 682, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 735, 736, 764, 767, 769, 770, 771, 773, 775, 776, 779, 783, 785, 787, 792], "int": [0, 8, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 100, 107, 111, 112, 122, 123, 132, 134, 135, 136, 137, 138, 141, 144, 145, 146, 153, 160, 163, 164, 167, 174, 189, 203, 204, 205, 212, 213, 222, 229, 230, 231, 232, 233, 234, 246, 249, 273, 282, 288, 291, 295, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 324, 325, 327, 331, 338, 340, 342, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 404, 406, 407, 409, 412, 414, 415, 417, 418, 421, 424, 425, 429, 431, 432, 435, 436, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 492, 502, 503, 504, 506, 509, 510, 513, 528, 531, 533, 548, 549, 550, 554, 570, 571, 572, 573, 574, 577, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 621, 623, 624, 632, 633, 643, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 743, 767, 769, 770, 771, 773, 775, 776, 779, 781, 782, 783, 785, 787, 792], "iter": [0, 42, 44, 49, 54, 55, 61, 69, 71, 77, 78, 84, 92, 97, 117, 118, 120, 212, 311, 312, 349, 356, 358, 406, 415, 418, 446, 491, 529, 584, 587, 590, 595, 597, 655, 659, 666, 668, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 687, 688, 690, 743, 753, 763, 765, 767, 787, 790], "For": [0, 1, 9, 10, 11, 19, 21, 28, 29, 31, 34, 36, 50, 54, 59, 65, 77, 82, 121, 139, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 274, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 317, 318, 322, 341, 349, 352, 356, 358, 412, 414, 428, 446, 449, 585, 588, 593, 595, 601, 603, 639, 641, 645, 653, 664, 703, 704, 705, 706, 714, 716, 717, 719, 728, 751, 752, 753, 755, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 789, 790, 791, 792, 794, 795, 799, 800, 803, 808, 809], "jax": [0, 2, 5, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 34, 40, 42, 46, 48, 53, 54, 55, 65, 70, 76, 78, 104, 106, 109, 112, 290, 331, 352, 367, 489, 519, 551, 570, 582, 588, 590, 601, 703, 704, 705, 706, 727, 740, 749, 752, 753, 757, 758, 759, 760, 761, 763, 765, 769, 770, 773, 775, 778, 779, 780, 781, 782, 783, 785, 787, 789, 792, 795, 803, 805, 808, 809], "jit": [0, 6, 9, 11, 28, 31, 787, 795, 802], "tupl": [0, 2, 46, 49, 50, 51, 53, 54, 55, 58, 59, 61, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 122, 123, 134, 136, 140, 141, 143, 146, 148, 152, 153, 154, 165, 166, 167, 171, 172, 178, 179, 185, 195, 198, 199, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 307, 312, 315, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 352, 354, 355, 356, 358, 361, 362, 363, 365, 367, 373, 374, 375, 377, 378, 379, 380, 382, 387, 388, 391, 392, 393, 394, 396, 397, 398, 403, 404, 406, 410, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 429, 431, 441, 446, 452, 454, 455, 457, 460, 462, 463, 464, 465, 467, 468, 470, 471, 472, 480, 481, 482, 483, 485, 486, 487, 488, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 538, 548, 549, 550, 551, 553, 554, 555, 556, 569, 570, 571, 572, 573, 575, 577, 580, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 641, 643, 644, 645, 648, 650, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 692, 693, 694, 695, 697, 700, 701, 703, 704, 705, 706, 707, 708, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 733, 743, 764, 769, 775, 776, 779, 781, 782, 787, 790, 791, 795], "dict": [0, 2, 19, 28, 29, 42, 46, 49, 55, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 165, 166, 167, 171, 172, 179, 195, 198, 199, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 358, 377, 378, 379, 380, 419, 420, 422, 423, 426, 427, 428, 431, 446, 452, 454, 455, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 492, 494, 495, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 529, 533, 534, 548, 549, 551, 553, 555, 556, 569, 580, 586, 587, 590, 597, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 672, 673, 675, 678, 679, 680, 681, 683, 684, 685, 689, 690, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 728, 731, 733, 740, 764, 767, 790, 791, 797], "return": [0, 2, 6, 8, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 730, 731, 733, 735, 740, 743, 744, 745, 746, 749, 760, 761, 764, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 795, 803], "type": [0, 2, 7, 9, 13, 15, 19, 25, 28, 29, 34, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 730, 731, 733, 737, 740, 743, 744, 747, 749, 755, 759, 760, 761, 762, 763, 764, 767, 770, 771, 772, 773, 775, 777, 779, 781, 782, 783, 785, 787, 789, 790, 802, 803, 806], "lazygraph": [0, 2], "modul": [0, 6, 8, 9, 11, 13, 15, 17, 18, 19, 25, 26, 28, 29, 30, 34, 40, 41, 42, 44, 45, 46, 69, 71, 92, 97, 348, 350, 351, 359, 360, 364, 530, 590, 604, 723, 727, 728, 729, 731, 732, 734, 736, 739, 740, 749, 753, 756, 760, 764, 765, 766, 773, 776, 779, 780, 782, 787, 788, 790, 792, 794, 795, 802, 803, 805], "moduletyp": [0, 2, 69, 92], "A": [0, 1, 2, 28, 29, 43, 50, 51, 54, 55, 61, 63, 67, 68, 71, 74, 76, 77, 78, 81, 82, 84, 86, 88, 91, 94, 97, 117, 118, 120, 132, 140, 146, 152, 193, 212, 274, 276, 280, 304, 315, 317, 318, 320, 330, 333, 337, 338, 349, 352, 355, 356, 358, 361, 362, 367, 383, 397, 404, 413, 422, 431, 434, 452, 455, 460, 461, 462, 463, 466, 467, 468, 469, 470, 478, 487, 489, 494, 496, 505, 517, 518, 548, 549, 550, 553, 581, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 597, 599, 603, 604, 615, 624, 626, 629, 630, 635, 636, 640, 641, 653, 656, 658, 662, 664, 672, 675, 677, 679, 680, 681, 682, 683, 687, 688, 689, 690, 692, 693, 694, 695, 697, 703, 713, 721, 722, 729, 730, 747, 749, 750, 751, 752, 753, 758, 759, 760, 762, 767, 769, 770, 773, 775, 776, 780, 781, 782, 787, 790, 795, 797, 802, 803], "non": [0, 2, 21, 31, 51, 53, 54, 59, 63, 64, 67, 68, 74, 76, 77, 82, 86, 87, 90, 91, 134, 151, 169, 178, 247, 267, 268, 273, 324, 329, 342, 352, 356, 358, 367, 404, 406, 410, 427, 428, 483, 486, 585, 586, 588, 593, 597, 599, 600, 603, 604, 621, 622, 632, 634, 641, 643, 647, 648, 685, 694, 698, 699, 700, 701, 714, 715, 716, 717, 718, 720, 721, 722, 730, 732, 733, 735, 764, 767, 769, 771, 787, 802], "initi": [0, 2, 7, 28, 29, 45, 54, 58, 71, 77, 81, 97, 356, 367, 406, 415, 418, 488, 592, 617, 728, 729, 731, 732, 733, 735, 736, 749, 752, 761, 765, 769, 770, 781, 782, 787, 802, 808, 809], "object": [0, 2, 19, 24, 26, 28, 42, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 129, 133, 134, 155, 164, 167, 175, 178, 213, 271, 467, 573, 585, 586, 587, 591, 597, 599, 675, 676, 677, 679, 680, 681, 687, 688, 689, 690, 697, 728, 731, 732, 733, 740, 743, 749, 764, 765, 767, 768, 776, 777, 780, 781, 782, 785, 789, 792, 802, 808], "forward": [0, 8, 10, 15, 28, 29, 42, 44, 54, 77, 355, 377, 382, 383, 387, 388, 398, 728, 730, 732, 733, 735, 749, 760, 765, 772, 778, 782, 783, 785, 792, 794, 795, 802, 803], "pass": [0, 2, 6, 8, 9, 10, 11, 13, 15, 19, 26, 28, 29, 35, 41, 42, 44, 46, 47, 53, 54, 69, 71, 76, 77, 92, 97, 117, 118, 120, 156, 178, 193, 212, 227, 273, 358, 361, 362, 367, 436, 460, 462, 466, 486, 487, 519, 584, 586, 587, 588, 590, 596, 669, 670, 728, 732, 733, 735, 736, 740, 743, 747, 749, 757, 759, 761, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 795, 800], "same": [0, 2, 6, 7, 8, 9, 11, 15, 21, 23, 28, 31, 33, 35, 40, 41, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 86, 88, 90, 94, 95, 96, 110, 121, 131, 136, 138, 139, 141, 143, 144, 145, 146, 148, 151, 152, 153, 164, 167, 212, 219, 220, 221, 222, 224, 226, 230, 232, 235, 239, 245, 246, 252, 272, 274, 276, 279, 281, 282, 283, 292, 296, 304, 314, 315, 316, 317, 318, 322, 328, 344, 347, 349, 352, 355, 356, 358, 361, 363, 365, 367, 373, 374, 375, 391, 392, 393, 394, 396, 397, 398, 403, 406, 407, 415, 416, 417, 418, 430, 431, 446, 454, 460, 462, 471, 473, 478, 479, 480, 481, 482, 483, 484, 489, 526, 580, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 599, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 654, 657, 658, 660, 661, 663, 664, 669, 670, 685, 695, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 731, 743, 749, 751, 753, 755, 760, 761, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 789, 791, 792, 795, 799, 801, 808, 809], "copi": [0, 2, 3, 44, 47, 50, 51, 52, 53, 54, 55, 61, 71, 73, 74, 75, 76, 77, 78, 84, 94, 95, 122, 123, 129, 133, 151, 213, 273, 358, 424, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 512, 538, 548, 555, 556, 585, 586, 587, 588, 590, 595, 597, 602, 656, 657, 658, 660, 662, 663, 665, 667, 673, 708, 710, 760, 761, 763, 765, 768, 769, 772, 780, 781, 787, 794, 795], "everi": [0, 2, 25, 28, 29, 34, 42, 50, 54, 55, 77, 78, 135, 136, 296, 331, 347, 352, 355, 358, 391, 392, 393, 457, 491, 585, 590, 755, 759, 761, 763, 765, 766, 768, 769, 771, 774, 775, 776, 777, 779, 780, 781, 782, 787, 789, 791, 802], "method": [0, 2, 19, 28, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 151, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 356, 357, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 585, 586, 588, 590, 591, 593, 594, 597, 600, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 683, 684, 685, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 729, 730, 731, 732, 733, 759, 761, 763, 764, 765, 768, 769, 770, 771, 772, 775, 782, 783, 787, 788, 791, 792, 795, 803, 809], "To": [0, 1, 2, 3, 10, 13, 15, 19, 28, 29, 40, 43, 44, 45, 246, 357, 421, 543, 588, 590, 730, 755, 759, 760, 763, 764, 765, 766, 769, 771, 773, 774, 776, 777, 780, 781, 782, 783, 790, 791, 792], "you": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 77, 78, 94, 96, 97, 358, 367, 434, 487, 509, 510, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 618, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 802], "need": [0, 1, 2, 3, 6, 9, 11, 17, 19, 25, 26, 28, 29, 42, 43, 44, 54, 55, 61, 77, 78, 84, 355, 356, 367, 377, 382, 383, 387, 403, 487, 497, 498, 519, 590, 592, 593, 595, 597, 618, 625, 653, 656, 683, 749, 753, 755, 756, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 783, 785, 787, 789, 790, 794, 795, 798, 802, 803, 804, 808], "correspond": [0, 2, 3, 6, 9, 11, 15, 28, 29, 43, 51, 53, 54, 55, 58, 61, 64, 65, 67, 71, 74, 76, 77, 81, 84, 90, 94, 97, 152, 164, 167, 227, 277, 291, 317, 327, 328, 349, 352, 355, 356, 358, 361, 367, 377, 383, 394, 398, 400, 403, 404, 405, 437, 438, 451, 460, 461, 462, 481, 482, 548, 570, 586, 588, 590, 592, 593, 595, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 618, 621, 625, 626, 632, 639, 640, 660, 661, 692, 698, 699, 703, 704, 705, 706, 711, 712, 717, 718, 719, 720, 743, 749, 759, 761, 764, 765, 767, 768, 769, 771, 772, 773, 775, 776, 778, 780, 782, 785, 787, 802], "input": [0, 2, 7, 8, 11, 13, 15, 25, 26, 28, 33, 34, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 193, 195, 196, 209, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 512, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 533, 534, 535, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 730, 731, 733, 734, 743, 763, 764, 765, 767, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 795, 803, 806], "let": [0, 2, 6, 7, 8, 9, 11, 13, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 43, 45, 47, 55, 67, 78, 219, 220, 221, 222, 225, 228, 237, 240, 242, 244, 253, 254, 255, 260, 262, 275, 283, 285, 286, 290, 509, 510, 588, 590, 593, 603, 645, 715, 717, 718, 719, 720, 749, 753, 755, 759, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 792, 809], "start": [0, 1, 2, 3, 4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 50, 54, 71, 73, 77, 81, 121, 134, 137, 138, 335, 345, 352, 353, 355, 358, 367, 397, 436, 439, 447, 449, 456, 488, 585, 729, 743, 749, 754, 755, 759, 760, 761, 762, 768, 769, 771, 772, 774, 775, 780, 782, 785, 786, 787, 789, 790, 791, 794, 795, 802, 808], "simpl": [0, 2, 6, 13, 17, 18, 20, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 40, 42, 44, 47, 54, 77, 367, 480, 731, 749, 751, 759, 760, 761, 764, 766, 767, 769, 770, 771, 772, 776, 779, 780, 782, 783, 785, 789, 791, 792, 795, 797, 801, 802, 803, 804], "import": [0, 1, 2, 6, 9, 11, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 45, 46, 47, 54, 65, 69, 73, 77, 92, 193, 194, 198, 208, 210, 367, 480, 587, 596, 601, 671, 706, 740, 749, 752, 755, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 787, 789, 790, 792, 795, 798, 800, 802, 805, 806, 808], "set_backend": [0, 2, 6, 7, 8, 10, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 34, 35, 41, 43, 44, 45, 53, 55, 69, 76, 78, 166, 175, 193, 194, 208, 210, 223, 495, 519, 586, 587, 590, 596, 671, 740, 749, 763, 765, 769, 770, 776, 777, 778, 787, 789, 792], "torch": [0, 2, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 45, 46, 47, 50, 55, 59, 69, 78, 82, 129, 166, 193, 194, 208, 210, 282, 495, 519, 551, 585, 586, 587, 588, 590, 593, 596, 641, 671, 728, 740, 749, 757, 760, 761, 763, 764, 765, 766, 768, 769, 770, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 789, 790, 792, 795, 797, 808], "def": [0, 2, 6, 8, 9, 11, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 53, 76, 117, 223, 496, 584, 590, 596, 597, 671, 678, 743, 749, 759, 760, 763, 764, 767, 769, 770, 771, 773, 775, 776, 778, 779, 780, 781, 782, 783, 785, 787, 789, 790, 791, 792], "fn": [0, 7, 45, 47, 54, 71, 74, 77, 100, 124, 125, 126, 127, 128, 165, 166, 198, 199, 202, 358, 425, 492, 507, 508, 557, 585, 586, 587, 590, 597, 678, 679, 680, 682, 683, 684, 737, 740, 744, 745, 747, 770, 773, 779, 780, 787], "x": [0, 2, 6, 8, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 122, 123, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 171, 172, 174, 179, 195, 196, 200, 205, 206, 207, 211, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 315, 316, 319, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 365, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 431, 433, 434, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 538, 539, 540, 543, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 569, 570, 572, 573, 574, 576, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 675, 678, 679, 680, 681, 682, 683, 684, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 734, 737, 740, 743, 747, 749, 759, 764, 765, 767, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 783, 785, 787, 789, 790, 791, 792], "y": [0, 28, 29, 40, 41, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 129, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 148, 151, 152, 153, 162, 164, 167, 179, 192, 196, 200, 205, 206, 207, 211, 213, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 304, 320, 326, 332, 333, 334, 335, 336, 341, 343, 345, 347, 349, 352, 355, 356, 357, 358, 361, 367, 374, 376, 378, 379, 383, 386, 388, 392, 400, 404, 408, 413, 419, 420, 421, 422, 423, 431, 433, 442, 446, 454, 455, 459, 463, 464, 465, 473, 479, 480, 481, 482, 483, 486, 488, 489, 491, 494, 497, 498, 501, 502, 504, 505, 506, 509, 510, 511, 515, 517, 518, 519, 521, 522, 525, 526, 531, 538, 539, 540, 543, 546, 547, 548, 549, 551, 553, 555, 556, 557, 561, 562, 565, 568, 569, 570, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 607, 609, 611, 614, 615, 616, 620, 621, 622, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 639, 641, 642, 643, 645, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 675, 678, 679, 681, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 747, 749, 765, 767, 770, 771, 778, 780, 781, 782, 783, 785, 787, 789], "z": [0, 19, 28, 29, 41, 42, 50, 53, 54, 55, 59, 60, 63, 65, 67, 73, 76, 77, 78, 82, 83, 84, 86, 90, 96, 97, 137, 138, 140, 141, 200, 222, 223, 227, 229, 232, 234, 239, 250, 251, 254, 255, 256, 258, 259, 264, 266, 268, 269, 270, 271, 279, 288, 295, 296, 322, 347, 352, 357, 367, 419, 420, 421, 422, 423, 429, 431, 442, 479, 480, 483, 489, 494, 506, 509, 510, 517, 518, 534, 547, 548, 549, 557, 570, 585, 587, 588, 590, 593, 594, 595, 597, 599, 600, 601, 603, 621, 631, 636, 637, 641, 648, 650, 651, 652, 653, 675, 679, 681, 689, 693, 694, 695, 698, 703, 713, 714, 716, 717, 718, 730, 749, 765, 767, 770, 771, 787, 789], "k": [0, 7, 9, 41, 44, 50, 54, 58, 59, 63, 73, 76, 77, 81, 82, 86, 94, 117, 132, 144, 145, 146, 266, 304, 315, 316, 349, 356, 358, 362, 365, 367, 401, 412, 452, 455, 466, 467, 468, 469, 470, 473, 483, 494, 584, 585, 590, 592, 593, 597, 599, 600, 619, 623, 631, 632, 638, 640, 641, 642, 645, 680, 693, 694, 695, 701, 749, 762, 763, 780, 781, 787, 798, 802], "j": [0, 50, 53, 54, 59, 67, 73, 76, 77, 82, 94, 120, 141, 220, 221, 222, 223, 225, 228, 237, 239, 242, 244, 252, 260, 262, 266, 272, 283, 285, 286, 289, 290, 322, 352, 355, 356, 367, 382, 383, 387, 398, 399, 403, 405, 412, 489, 494, 584, 585, 588, 590, 593, 603, 625, 645, 713, 761, 762, 766, 798], "concat": [0, 8, 40, 45, 55, 61, 71, 84, 212, 506, 587, 590, 595, 668, 781, 785, 787], "sum_j": 0, "sum": [0, 2, 42, 44, 53, 54, 55, 58, 59, 60, 67, 71, 76, 77, 78, 81, 82, 83, 90, 94, 96, 97, 212, 222, 264, 288, 318, 338, 349, 352, 356, 357, 367, 397, 402, 419, 420, 421, 422, 423, 486, 487, 503, 533, 534, 587, 588, 590, 592, 593, 594, 603, 615, 619, 632, 641, 645, 648, 650, 651, 652, 712, 713, 730, 732, 743, 749, 767, 769, 776, 778, 779, 780, 787], "1": [0, 2, 4, 6, 7, 8, 9, 10, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 151, 152, 153, 154, 158, 162, 163, 164, 167, 172, 174, 179, 195, 196, 200, 204, 205, 207, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 529, 531, 533, 534, 538, 547, 548, 549, 550, 551, 553, 555, 556, 557, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 729, 730, 731, 732, 733, 734, 735, 736, 740, 743, 749, 752, 753, 757, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 785, 786, 787, 789, 790, 791, 792, 795], "2": [0, 2, 6, 7, 8, 9, 10, 11, 13, 19, 21, 22, 23, 25, 26, 28, 29, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 151, 152, 153, 154, 158, 162, 164, 172, 174, 179, 195, 196, 197, 200, 203, 205, 207, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 315, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 411, 413, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 445, 446, 451, 452, 453, 454, 455, 457, 458, 459, 463, 464, 465, 468, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 529, 531, 533, 534, 538, 547, 548, 549, 550, 551, 553, 557, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 730, 731, 740, 743, 749, 757, 760, 761, 763, 765, 766, 767, 768, 769, 771, 773, 775, 776, 778, 779, 780, 781, 782, 786, 787, 789, 790, 791, 792, 795, 808, 809], "3": [0, 2, 6, 8, 9, 10, 13, 15, 19, 22, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 122, 123, 132, 134, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 151, 152, 153, 154, 158, 162, 164, 172, 174, 179, 193, 195, 196, 207, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 378, 381, 382, 383, 386, 387, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 413, 418, 419, 420, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 445, 446, 451, 452, 453, 454, 455, 457, 458, 459, 463, 464, 465, 468, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 529, 533, 534, 547, 548, 549, 553, 556, 557, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 743, 749, 759, 760, 763, 764, 765, 767, 768, 769, 771, 773, 776, 778, 781, 782, 787, 789, 790, 791, 792, 809], "4": [0, 6, 7, 8, 9, 10, 11, 13, 19, 21, 22, 23, 24, 25, 26, 28, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 122, 123, 129, 132, 134, 136, 137, 138, 139, 140, 141, 143, 146, 148, 152, 153, 154, 162, 164, 167, 172, 174, 179, 196, 197, 205, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 306, 311, 312, 315, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 419, 420, 422, 424, 426, 427, 428, 430, 431, 432, 433, 436, 437, 438, 441, 442, 443, 445, 446, 451, 452, 453, 454, 455, 457, 458, 459, 463, 464, 465, 468, 470, 471, 473, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 512, 515, 517, 518, 519, 526, 533, 534, 548, 549, 550, 551, 553, 557, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 645, 646, 648, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 735, 743, 749, 753, 757, 759, 760, 765, 766, 767, 768, 769, 771, 778, 781, 782, 785, 787, 789, 790, 791, 792, 802, 808, 809], "compiled_fn": 0, "In": [0, 2, 5, 6, 7, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 47, 52, 54, 55, 61, 75, 78, 84, 94, 206, 213, 214, 218, 222, 239, 240, 246, 254, 255, 272, 275, 281, 283, 355, 358, 361, 378, 379, 380, 426, 427, 428, 432, 434, 436, 437, 438, 439, 441, 445, 452, 458, 460, 462, 492, 512, 519, 537, 587, 588, 590, 593, 595, 599, 639, 656, 657, 658, 660, 662, 663, 665, 667, 695, 749, 751, 753, 755, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 794, 795, 798, 800, 802, 803, 805, 808], "case": [0, 2, 13, 15, 21, 23, 28, 29, 31, 32, 33, 34, 42, 49, 50, 54, 55, 61, 67, 71, 73, 77, 78, 84, 94, 97, 123, 139, 165, 166, 193, 198, 199, 206, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 329, 331, 341, 352, 355, 358, 361, 362, 368, 378, 379, 380, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 460, 462, 468, 490, 512, 519, 533, 534, 535, 585, 586, 587, 588, 590, 593, 595, 597, 603, 639, 645, 656, 657, 658, 660, 662, 663, 665, 667, 675, 681, 714, 715, 716, 717, 718, 719, 720, 732, 733, 735, 749, 752, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 789, 791, 792, 795, 801, 805], "would": [0, 1, 8, 22, 28, 29, 32, 34, 36, 44, 50, 52, 54, 73, 75, 77, 84, 107, 111, 123, 213, 355, 358, 382, 387, 426, 427, 432, 434, 436, 437, 438, 445, 449, 458, 582, 587, 656, 657, 658, 660, 662, 663, 665, 667, 749, 752, 754, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 775, 777, 779, 780, 781, 782, 783, 785, 786, 787, 789, 791, 792, 795, 802, 808], "can": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 50, 51, 54, 55, 59, 61, 63, 65, 73, 74, 77, 78, 82, 84, 86, 88, 94, 106, 109, 122, 123, 138, 140, 154, 193, 210, 211, 212, 297, 300, 310, 347, 349, 355, 356, 361, 362, 365, 367, 377, 390, 407, 412, 414, 417, 431, 460, 467, 468, 473, 480, 526, 537, 570, 573, 582, 585, 586, 587, 590, 591, 592, 593, 595, 599, 618, 624, 631, 641, 645, 660, 664, 693, 694, 695, 703, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 806, 808, 809], "observ": [0, 54, 77, 367, 479, 480, 761, 773, 787, 804], "As": [0, 2, 6, 8, 9, 11, 13, 15, 21, 25, 26, 28, 29, 31, 34, 40, 41, 65, 69, 92, 601, 703, 704, 705, 706, 749, 751, 759, 760, 761, 764, 766, 767, 768, 769, 770, 773, 774, 775, 776, 779, 780, 781, 782, 785, 789, 790, 791, 795, 802, 807], "variabl": [0, 1, 41, 43, 44, 46, 54, 55, 56, 62, 71, 77, 78, 79, 85, 117, 118, 120, 356, 362, 367, 416, 468, 479, 480, 495, 519, 520, 521, 522, 525, 551, 572, 573, 575, 577, 578, 579, 584, 590, 591, 593, 596, 598, 640, 669, 670, 671, 691, 728, 729, 730, 731, 732, 733, 734, 735, 736, 761, 765, 769, 772, 775, 778, 779, 782, 783, 787, 790, 791, 792, 795, 803], "calcul": [0, 6, 42, 53, 54, 55, 60, 67, 71, 76, 77, 78, 82, 83, 90, 97, 219, 220, 221, 222, 223, 224, 225, 226, 227, 236, 237, 239, 242, 243, 244, 260, 261, 262, 263, 264, 265, 270, 271, 272, 277, 284, 285, 286, 288, 289, 290, 331, 341, 352, 355, 356, 358, 361, 367, 373, 374, 375, 404, 446, 460, 462, 487, 526, 588, 590, 593, 594, 603, 627, 636, 639, 650, 651, 652, 714, 715, 716, 717, 718, 719, 720, 730, 731, 734, 752, 759, 772, 787], "valu": [0, 7, 40, 41, 43, 44, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 96, 97, 99, 112, 117, 118, 120, 121, 132, 135, 136, 137, 138, 141, 146, 151, 168, 172, 178, 211, 212, 219, 220, 221, 222, 224, 226, 227, 228, 235, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 297, 302, 304, 311, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 330, 331, 333, 334, 336, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 366, 367, 377, 390, 397, 401, 404, 406, 410, 415, 416, 417, 418, 419, 420, 422, 430, 435, 440, 446, 451, 453, 454, 455, 457, 460, 462, 466, 467, 469, 470, 476, 478, 481, 482, 483, 486, 487, 488, 489, 495, 497, 498, 499, 501, 506, 509, 510, 512, 514, 517, 518, 519, 526, 533, 534, 538, 539, 540, 543, 551, 556, 561, 562, 565, 568, 569, 570, 571, 572, 573, 577, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 623, 626, 627, 632, 633, 634, 637, 638, 639, 640, 641, 642, 645, 648, 653, 654, 655, 659, 660, 668, 669, 670, 674, 676, 677, 678, 679, 680, 685, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 729, 730, 731, 732, 733, 734, 735, 757, 760, 761, 763, 766, 767, 769, 770, 771, 772, 773, 775, 776, 779, 780, 782, 784, 785, 787, 789, 795, 802, 803], "wa": [0, 2, 28, 29, 34, 43, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 303, 304, 320, 321, 322, 324, 326, 332, 333, 339, 340, 341, 343, 344, 345, 349, 352, 378, 379, 380, 419, 420, 422, 423, 426, 427, 428, 431, 452, 454, 455, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 557, 569, 575, 580, 588, 590, 597, 603, 604, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 740, 749, 752, 757, 761, 763, 768, 771, 776, 778, 780, 787, 789, 801, 802, 804], "like": [0, 2, 7, 9, 11, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 45, 47, 50, 53, 54, 61, 73, 76, 77, 81, 84, 89, 138, 155, 178, 223, 243, 249, 252, 265, 283, 325, 328, 340, 352, 355, 356, 358, 365, 367, 397, 398, 403, 427, 428, 436, 472, 473, 489, 585, 586, 588, 593, 595, 599, 602, 625, 660, 695, 708, 749, 752, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 794, 795, 802, 807], "were": [0, 6, 8, 45, 71, 74, 167, 171, 172, 246, 588, 761, 769, 773, 774, 778, 779, 781, 782, 783, 785, 787, 802, 803, 808], "exclud": [0, 36, 67, 77, 90, 121, 146, 315, 349, 481, 482, 585, 599, 695, 711, 740, 771, 787], "process": [0, 6, 8, 23, 28, 29, 33, 42, 206, 218, 587, 752, 753, 754, 760, 761, 766, 767, 768, 774, 776, 778, 780, 781, 782, 785, 787, 792, 800, 801, 802, 805, 806, 808, 809], "tensor": [0, 2, 6, 7, 9, 10, 11, 13, 15, 19, 20, 23, 24, 26, 28, 29, 30, 34, 40, 42, 50, 53, 54, 55, 58, 60, 61, 63, 71, 73, 76, 77, 78, 81, 82, 83, 84, 86, 93, 129, 137, 138, 141, 146, 162, 178, 270, 271, 297, 300, 310, 313, 314, 315, 321, 342, 347, 349, 352, 355, 356, 357, 358, 367, 368, 373, 374, 377, 381, 390, 391, 392, 393, 406, 407, 410, 412, 414, 415, 418, 422, 436, 439, 444, 447, 448, 449, 450, 453, 456, 486, 490, 533, 534, 585, 586, 588, 590, 592, 593, 594, 595, 599, 615, 617, 618, 630, 643, 650, 660, 662, 692, 731, 740, 749, 751, 764, 765, 769, 770, 775, 776, 779, 780, 781, 782, 783, 785, 787, 789, 790, 792, 795, 797, 799, 800, 803, 805, 806, 809], "shape": [0, 2, 6, 7, 8, 13, 15, 21, 22, 23, 24, 28, 29, 34, 40, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 207, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 312, 313, 314, 315, 316, 321, 322, 323, 325, 328, 330, 332, 334, 335, 336, 337, 341, 342, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 434, 439, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 479, 480, 481, 482, 483, 497, 498, 502, 503, 504, 506, 509, 510, 513, 519, 526, 533, 534, 544, 552, 554, 566, 570, 571, 572, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 672, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 707, 708, 710, 711, 712, 713, 715, 717, 718, 720, 721, 722, 730, 731, 734, 743, 749, 761, 767, 769, 770, 771, 772, 773, 775, 779, 780, 781, 782, 783, 784, 787, 789, 790, 791, 792], "indic": [0, 6, 10, 50, 54, 55, 58, 59, 61, 62, 64, 65, 66, 71, 73, 74, 77, 78, 81, 82, 84, 85, 87, 88, 89, 94, 122, 123, 141, 144, 146, 167, 171, 172, 283, 315, 316, 331, 349, 352, 355, 356, 358, 363, 365, 373, 374, 375, 377, 381, 382, 383, 387, 388, 391, 392, 393, 394, 398, 404, 418, 426, 427, 428, 430, 432, 434, 436, 437, 438, 441, 445, 451, 452, 454, 455, 457, 458, 471, 472, 473, 494, 509, 510, 512, 533, 534, 538, 570, 573, 574, 585, 588, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 606, 608, 609, 610, 611, 614, 618, 634, 648, 656, 657, 658, 660, 661, 662, 663, 665, 667, 672, 675, 677, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 698, 699, 700, 701, 703, 705, 707, 709, 710, 729, 731, 732, 733, 737, 743, 745, 768, 775, 778, 780, 792], "trace": [0, 2, 9, 11, 23, 25, 28, 29, 31, 33, 34, 46, 55, 59, 71, 78, 82, 521, 522, 525, 536, 545, 559, 567, 590, 593, 749, 763, 769, 784, 787, 795, 797, 803, 808], "doesn": [0, 34, 519, 537, 590, 731, 760, 765, 767, 768, 769, 770, 771, 774, 776, 778, 782, 785, 787, 795, 800], "impos": 0, "addit": [0, 52, 54, 55, 62, 75, 77, 78, 85, 118, 120, 213, 222, 282, 367, 479, 484, 502, 503, 504, 570, 584, 587, 588, 590, 596, 598, 671, 691, 731, 759, 760, 761, 765, 769, 771, 772, 774, 776, 778, 779, 780, 782, 783, 785, 789, 790, 792, 802, 803, 804, 808], "restrict": [0, 767, 768, 780, 787, 799], "datatyp": [0, 50, 71, 73, 123, 136, 140, 156, 177, 181, 585, 586, 783], "out": [0, 2, 6, 8, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 43, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 162, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 407, 408, 409, 411, 412, 413, 414, 419, 420, 421, 422, 423, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 497, 498, 502, 503, 504, 506, 509, 510, 519, 529, 533, 534, 571, 572, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 672, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 802, 809], "differ": [0, 1, 2, 6, 7, 9, 11, 13, 17, 18, 22, 23, 24, 28, 29, 32, 33, 34, 35, 53, 54, 55, 59, 67, 71, 77, 78, 90, 96, 97, 106, 109, 164, 222, 239, 246, 247, 272, 288, 320, 325, 328, 329, 333, 352, 355, 356, 358, 367, 388, 398, 415, 418, 437, 438, 452, 481, 482, 489, 509, 510, 582, 586, 588, 590, 592, 593, 595, 603, 615, 616, 628, 639, 654, 664, 711, 712, 717, 719, 720, 733, 749, 751, 752, 753, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 795, 799, 800, 801, 802, 805, 808, 809], "b": [0, 34, 48, 53, 54, 55, 58, 59, 67, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 122, 123, 129, 134, 135, 136, 138, 141, 143, 148, 151, 152, 153, 154, 162, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 352, 355, 356, 357, 358, 362, 365, 367, 373, 374, 375, 376, 378, 379, 382, 386, 387, 388, 391, 392, 393, 397, 402, 404, 408, 413, 418, 419, 420, 422, 426, 427, 428, 429, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 445, 446, 452, 454, 455, 458, 459, 464, 465, 467, 468, 470, 471, 473, 480, 481, 482, 483, 485, 487, 489, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 526, 533, 534, 548, 549, 551, 555, 556, 569, 571, 572, 573, 575, 577, 579, 580, 582, 585, 586, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 622, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 645, 646, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 675, 678, 679, 680, 681, 683, 684, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 743, 749, 750, 753, 754, 757, 761, 762, 763, 765, 767, 768, 771, 776, 778, 781, 786, 787, 788, 790, 791, 792, 793, 798], "new": [0, 1, 3, 9, 11, 12, 13, 15, 17, 20, 26, 28, 29, 30, 44, 46, 54, 55, 56, 61, 62, 71, 73, 77, 78, 79, 82, 84, 85, 130, 133, 135, 136, 141, 142, 143, 147, 148, 185, 228, 274, 276, 280, 320, 323, 333, 338, 352, 358, 367, 424, 431, 445, 451, 487, 502, 503, 504, 506, 509, 510, 512, 533, 534, 537, 539, 546, 548, 549, 555, 572, 575, 577, 578, 579, 585, 586, 588, 590, 591, 595, 597, 598, 628, 636, 656, 660, 664, 677, 689, 690, 691, 728, 731, 734, 735, 740, 749, 751, 752, 753, 754, 759, 760, 761, 762, 764, 765, 767, 768, 769, 771, 772, 774, 777, 779, 780, 781, 782, 783, 785, 786, 789, 792, 794, 797, 800, 804, 808, 809], "run": [0, 2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 42, 44, 45, 46, 54, 56, 77, 79, 361, 460, 462, 571, 572, 577, 591, 596, 669, 670, 671, 731, 732, 733, 734, 743, 749, 755, 756, 759, 760, 762, 764, 765, 768, 770, 771, 773, 774, 775, 777, 780, 781, 787, 788, 789, 790, 791, 792, 794, 795, 796, 800, 802, 803, 804, 805, 807, 808, 809], "under": [0, 2, 19, 28, 29, 357, 421, 743, 749, 759, 760, 762, 763, 770, 771, 772, 774, 780, 781, 782, 785, 786, 787, 790, 792, 795, 802, 805, 809], "hood": [0, 2, 19, 28, 29, 749, 762, 770, 771, 774, 780, 782, 785, 786, 787, 790, 792, 809], "track": [0, 19, 28, 29, 41, 42, 597, 684, 729, 732, 733, 760, 761, 763, 778, 779, 802], "befor": [0, 2, 6, 7, 8, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 42, 54, 58, 59, 61, 65, 67, 71, 77, 81, 82, 209, 212, 217, 355, 358, 367, 382, 387, 397, 437, 438, 439, 446, 481, 482, 587, 592, 593, 595, 596, 597, 601, 603, 605, 606, 607, 608, 610, 612, 614, 618, 619, 631, 648, 654, 669, 670, 684, 703, 704, 705, 706, 711, 712, 717, 719, 729, 740, 743, 759, 760, 761, 763, 764, 766, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 787, 790, 795, 802], "instead": [0, 2, 13, 15, 19, 28, 35, 42, 47, 53, 54, 59, 76, 77, 82, 193, 281, 307, 349, 355, 367, 391, 392, 393, 480, 483, 587, 588, 593, 634, 759, 760, 761, 763, 766, 768, 769, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 785, 787, 789, 790, 795, 800, 802, 808, 809], "allow": [0, 2, 26, 28, 29, 40, 54, 77, 137, 277, 367, 483, 487, 529, 585, 588, 590, 602, 709, 729, 732, 733, 747, 749, 752, 755, 759, 761, 764, 765, 768, 769, 773, 774, 776, 777, 778, 779, 780, 781, 782, 785, 787, 789, 795, 797, 800, 802, 806, 807], "dynam": [0, 35, 595, 660, 740, 762, 768, 769, 770, 779, 780, 784, 787, 802, 806], "done": [0, 2, 42, 44, 47, 593, 627, 758, 759, 760, 761, 763, 766, 768, 770, 771, 774, 779, 780, 782, 790, 802], "first": [0, 1, 2, 6, 7, 8, 10, 13, 19, 21, 22, 23, 25, 28, 29, 31, 32, 33, 42, 45, 46, 47, 50, 53, 54, 59, 61, 63, 64, 65, 67, 73, 76, 77, 78, 82, 84, 86, 88, 90, 94, 96, 97, 117, 118, 137, 138, 146, 177, 185, 195, 222, 227, 229, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 272, 275, 277, 288, 289, 297, 303, 304, 315, 317, 318, 320, 329, 331, 332, 333, 339, 343, 344, 347, 349, 352, 355, 356, 357, 358, 365, 367, 377, 402, 403, 404, 408, 422, 432, 436, 443, 446, 448, 449, 452, 457, 467, 469, 473, 481, 482, 483, 489, 494, 584, 585, 586, 587, 588, 590, 592, 593, 595, 596, 597, 600, 601, 602, 603, 618, 621, 624, 625, 626, 628, 631, 636, 638, 639, 641, 643, 647, 660, 661, 664, 665, 669, 670, 671, 672, 673, 682, 683, 685, 697, 698, 699, 703, 704, 705, 708, 709, 711, 712, 730, 731, 732, 733, 735, 740, 749, 751, 752, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 770, 771, 774, 775, 776, 777, 779, 780, 782, 785, 787, 789, 790, 792, 800, 802, 803, 807], "invok": [0, 2, 54, 355, 377, 749, 774], "onc": [0, 1, 6, 8, 28, 29, 40, 42, 59, 63, 82, 86, 212, 356, 403, 587, 593, 599, 625, 626, 627, 641, 692, 753, 759, 760, 761, 767, 768, 769, 770, 771, 774, 779, 780, 782, 785, 787, 790, 795], "been": [0, 1, 13, 15, 23, 25, 28, 29, 54, 55, 63, 77, 78, 86, 195, 282, 358, 453, 502, 503, 504, 587, 588, 590, 599, 692, 743, 759, 761, 763, 765, 767, 768, 769, 770, 772, 773, 775, 776, 779, 782, 787, 789, 794, 795, 797, 802, 809], "directli": [0, 1, 2, 13, 15, 19, 22, 26, 28, 29, 32, 356, 407, 597, 684, 749, 753, 761, 763, 764, 767, 768, 769, 770, 772, 774, 776, 777, 779, 780, 781, 783, 784, 787, 789, 791, 792, 794, 795, 806, 807, 808], "here": [0, 2, 4, 6, 14, 16, 19, 24, 27, 28, 29, 40, 42, 43, 44, 45, 47, 77, 282, 423, 588, 749, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 771, 774, 775, 777, 778, 779, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 794, 795, 802, 803], "eager_graph": [0, 2, 28, 29, 749], "doe": [0, 19, 28, 41, 43, 53, 54, 55, 61, 71, 76, 77, 84, 94, 146, 234, 273, 275, 283, 315, 349, 356, 357, 367, 368, 403, 421, 486, 487, 490, 519, 585, 588, 590, 593, 595, 625, 662, 752, 757, 759, 761, 762, 765, 768, 769, 771, 772, 774, 775, 776, 779, 780, 781, 782, 785, 787, 789, 790, 795, 797, 798, 802, 803, 809], "lazy_graph": [0, 2, 28, 29, 749], "up": [0, 6, 8, 9, 11, 28, 54, 55, 77, 78, 355, 358, 377, 390, 438, 526, 590, 592, 615, 729, 751, 752, 753, 754, 755, 757, 759, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 803, 808, 809], "enabl": [0, 6, 7, 8, 9, 10, 11, 26, 43, 54, 59, 71, 82, 97, 355, 357, 377, 421, 537, 590, 593, 634, 749, 752, 760, 761, 764, 767, 769, 776, 777, 778, 779, 780, 782, 783, 786, 788, 790, 792, 795, 797, 800, 801, 802, 803, 804, 805, 808, 809], "delai": [0, 761], "until": [0, 6, 8, 752, 761, 779, 787, 795, 809], "have": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 40, 42, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 164, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 303, 304, 316, 321, 322, 330, 332, 334, 335, 336, 337, 341, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 404, 407, 408, 411, 412, 413, 414, 417, 419, 420, 421, 422, 423, 427, 428, 431, 432, 434, 439, 447, 448, 449, 450, 452, 455, 456, 463, 464, 465, 466, 467, 469, 470, 471, 473, 480, 481, 482, 483, 487, 490, 497, 498, 502, 503, 504, 509, 510, 519, 533, 534, 537, 571, 572, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 672, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 731, 733, 734, 735, 736, 743, 749, 750, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 808, 809], "necessari": [0, 2, 34, 50, 54, 73, 77, 84, 123, 239, 272, 358, 426, 427, 428, 432, 434, 436, 437, 438, 445, 458, 542, 564, 588, 590, 656, 657, 658, 660, 662, 663, 665, 667, 749, 760, 764, 765, 767, 771, 779, 780, 782, 784, 785], "particularli": [0, 761, 790, 795, 800], "librari": [0, 7, 9, 11, 17, 18, 24, 26, 40, 42, 52, 65, 75, 213, 244, 246, 262, 267, 268, 290, 587, 588, 593, 601, 603, 626, 627, 703, 704, 705, 706, 714, 715, 716, 718, 749, 751, 752, 753, 754, 756, 759, 760, 763, 792, 793, 795, 797, 798, 799, 800, 802, 806, 809], "where": [0, 3, 9, 21, 25, 31, 32, 36, 44, 50, 53, 54, 55, 59, 61, 63, 64, 67, 68, 71, 73, 76, 77, 78, 82, 84, 86, 87, 90, 91, 94, 135, 136, 139, 141, 146, 227, 237, 239, 242, 244, 246, 247, 256, 261, 262, 263, 270, 271, 272, 277, 279, 283, 285, 289, 295, 297, 315, 317, 318, 329, 333, 340, 347, 349, 352, 355, 356, 357, 358, 361, 362, 367, 369, 370, 371, 377, 382, 383, 387, 403, 404, 406, 407, 409, 415, 418, 419, 426, 427, 428, 440, 446, 460, 461, 462, 466, 467, 469, 470, 480, 488, 489, 519, 533, 570, 585, 588, 590, 592, 593, 595, 597, 599, 600, 603, 604, 618, 621, 625, 626, 630, 632, 634, 636, 637, 638, 641, 642, 645, 647, 653, 655, 656, 658, 664, 668, 676, 683, 692, 693, 694, 695, 700, 701, 718, 720, 721, 722, 730, 734, 749, 751, 752, 753, 754, 757, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 790, 791, 792, 795, 796, 800, 809], "feasibl": [0, 752, 759, 768], "provid": [0, 2, 17, 19, 23, 26, 28, 29, 33, 34, 40, 46, 50, 54, 55, 59, 61, 64, 67, 68, 71, 73, 77, 78, 82, 84, 87, 90, 91, 117, 139, 141, 157, 158, 159, 160, 161, 169, 179, 191, 195, 291, 356, 358, 361, 367, 402, 415, 418, 432, 441, 458, 460, 462, 489, 501, 533, 534, 584, 585, 586, 587, 588, 590, 592, 593, 595, 597, 600, 603, 604, 618, 633, 636, 647, 656, 657, 664, 676, 698, 718, 720, 721, 722, 731, 735, 740, 749, 751, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 785, 789, 791, 794, 795, 800, 801, 802, 803, 804, 805, 806, 809], "valid": [0, 8, 42, 44, 54, 58, 68, 77, 81, 91, 94, 156, 355, 356, 373, 374, 375, 391, 392, 393, 394, 396, 397, 413, 418, 522, 586, 590, 592, 595, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 656, 664, 721, 722, 731, 743, 760, 765, 769, 771, 774, 778, 781, 782, 803], "look": [0, 3, 8, 19, 28, 29, 42, 44, 47, 749, 751, 755, 759, 760, 761, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 787, 789, 791, 792, 796, 798, 802], "find": [0, 1, 17, 43, 44, 47, 59, 65, 71, 82, 593, 597, 601, 634, 674, 703, 704, 705, 706, 743, 749, 751, 754, 758, 759, 760, 761, 763, 766, 768, 778, 782, 785, 787, 790, 797], "abl": [0, 3, 6, 8, 30, 34, 45, 47, 71, 94, 760, 761, 763, 769, 776, 779, 780, 783, 787, 792, 805, 808], "through": [0, 29, 34, 42, 54, 77, 227, 367, 486, 487, 588, 597, 675, 681, 733, 743, 749, 754, 757, 758, 759, 761, 762, 765, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 794, 800, 802, 803, 804], "flag": [0, 2, 71, 195, 367, 480, 587, 592, 618, 734, 761, 769, 770, 779, 780, 781, 782], "reduc": [0, 54, 55, 59, 64, 67, 68, 71, 77, 78, 82, 87, 90, 91, 212, 338, 352, 353, 367, 485, 486, 487, 488, 489, 503, 587, 590, 593, 600, 603, 604, 638, 698, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 743, 768, 773, 780, 785, 787, 789, 800, 804, 805, 806], "time": [0, 1, 2, 6, 7, 9, 11, 26, 28, 29, 34, 42, 44, 45, 46, 54, 56, 59, 65, 77, 79, 88, 94, 134, 325, 352, 355, 356, 358, 367, 383, 388, 414, 418, 446, 452, 480, 572, 577, 585, 591, 592, 593, 595, 596, 600, 601, 615, 617, 631, 666, 669, 670, 671, 698, 699, 703, 704, 731, 732, 733, 751, 752, 753, 759, 760, 761, 765, 767, 768, 769, 771, 775, 776, 777, 779, 780, 782, 783, 787, 790, 792, 795, 800, 802, 803, 806, 807, 808], "comp_func": 0, "default": [0, 3, 6, 8, 28, 29, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 171, 172, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 195, 196, 198, 199, 203, 206, 207, 208, 210, 211, 212, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 543, 547, 548, 549, 551, 553, 555, 556, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 680, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 743, 759, 760, 761, 765, 766, 769, 770, 771, 772, 773, 775, 776, 780, 782, 785, 787, 791, 797, 802], "follow": [0, 3, 22, 23, 28, 29, 32, 33, 34, 40, 43, 44, 54, 55, 56, 58, 59, 65, 71, 77, 78, 79, 81, 82, 134, 167, 212, 222, 239, 246, 272, 274, 281, 282, 310, 349, 355, 358, 361, 377, 390, 434, 446, 451, 460, 462, 517, 518, 519, 548, 549, 572, 575, 577, 578, 579, 585, 586, 587, 588, 590, 591, 592, 593, 597, 601, 618, 619, 632, 638, 648, 678, 684, 703, 704, 705, 706, 731, 735, 749, 751, 752, 756, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 799, 802, 805], "show": [0, 5, 6, 7, 10, 17, 23, 28, 29, 30, 31, 33, 40, 42, 44, 45, 536, 545, 567, 590, 729, 749, 759, 760, 761, 766, 768, 771, 774, 779, 780, 782, 784, 794, 795, 802], "simpler": [0, 759, 761, 774, 803, 809], "obtain": [0, 28, 29, 47, 54, 77, 310, 349, 355, 394, 592, 618, 780], "howev": [0, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 59, 82, 246, 289, 290, 361, 460, 462, 537, 588, 590, 593, 639, 641, 740, 752, 759, 760, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 782, 785, 787, 789, 790, 791, 792, 795, 801, 802, 808], "desir": [0, 51, 52, 54, 64, 71, 74, 75, 77, 87, 94, 151, 153, 154, 213, 310, 342, 349, 352, 358, 367, 444, 486, 488, 489, 586, 587, 593, 600, 643, 700, 730, 731, 751, 761, 765, 768, 769, 770, 780, 787, 802], "below": [0, 2, 4, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 40, 43, 44, 45, 50, 54, 59, 82, 90, 144, 145, 146, 246, 256, 279, 315, 316, 322, 349, 352, 585, 588, 593, 624, 645, 720, 749, 754, 759, 760, 762, 763, 767, 768, 769, 770, 771, 773, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 798, 800, 805, 807], "ultim": [0, 19, 28], "trade": 0, "off": [0, 21, 31, 58, 59, 81, 82, 378, 379, 380, 592, 593, 615, 624, 645, 730, 731, 753, 760, 786, 808], "between": [0, 2, 17, 18, 23, 33, 34, 35, 40, 53, 54, 55, 58, 59, 60, 61, 65, 71, 76, 77, 81, 83, 84, 97, 121, 164, 227, 240, 275, 277, 291, 320, 333, 335, 352, 355, 356, 357, 358, 367, 378, 379, 380, 391, 392, 393, 402, 419, 420, 421, 422, 423, 446, 489, 585, 586, 588, 592, 594, 595, 597, 599, 601, 615, 636, 650, 651, 652, 656, 664, 678, 693, 704, 705, 706, 735, 751, 764, 765, 771, 775, 776, 777, 779, 780, 781, 782, 785, 786, 788, 789, 790, 792, 794, 798, 799, 801, 802, 803, 808], "memori": [0, 6, 8, 50, 54, 61, 73, 77, 84, 123, 139, 194, 206, 212, 214, 218, 358, 367, 426, 427, 432, 434, 436, 437, 438, 445, 458, 487, 532, 537, 560, 585, 587, 590, 592, 595, 617, 656, 657, 658, 660, 662, 663, 665, 667, 749, 768, 769, 770, 779, 780, 785, 787, 793, 795, 802, 804, 805, 806], "store": [0, 42, 44, 47, 51, 54, 55, 59, 61, 71, 74, 77, 78, 82, 84, 153, 355, 356, 398, 402, 506, 590, 593, 595, 645, 662, 731, 732, 733, 756, 761, 764, 765, 767, 772, 777, 779, 780, 781, 787, 789, 790, 791, 797], "thei": [0, 3, 35, 40, 45, 54, 59, 63, 65, 71, 82, 86, 88, 177, 291, 328, 352, 586, 588, 593, 596, 599, 601, 646, 669, 670, 692, 703, 736, 749, 758, 759, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 787, 789, 790, 791, 792, 795, 799, 802, 804, 805, 808, 809], "By": [0, 20, 40, 47, 54, 60, 61, 67, 68, 77, 83, 84, 90, 91, 286, 319, 331, 338, 349, 352, 355, 357, 365, 367, 377, 421, 473, 480, 483, 537, 588, 590, 593, 594, 595, 603, 604, 621, 647, 650, 659, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 760, 765, 769, 771, 773, 776, 778, 779, 780, 787, 791, 792], "choos": [0, 7, 42, 44, 52, 64, 65, 75, 213, 239, 246, 267, 268, 272, 358, 587, 588, 600, 601, 603, 702, 703, 704, 705, 706, 714, 715, 716, 718, 759, 760, 761, 777, 782, 788, 792], "node": [0, 2, 71, 78, 97, 495, 505, 551, 597, 682, 683, 730, 739, 752, 766, 767, 780, 803], "bake": 0, "randint": [0, 58, 63, 65, 81, 86, 599, 601, 614, 617, 703, 769], "0": [0, 2, 6, 7, 8, 9, 10, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 121, 129, 132, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 162, 164, 167, 168, 172, 174, 179, 192, 195, 197, 200, 205, 206, 207, 208, 210, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 373, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 418, 419, 420, 421, 422, 423, 425, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 496, 497, 498, 501, 502, 503, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 529, 531, 533, 534, 538, 543, 547, 548, 549, 551, 553, 555, 556, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 633, 634, 635, 637, 639, 641, 642, 643, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 743, 749, 757, 760, 761, 763, 765, 767, 768, 769, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 787, 789, 790, 791, 792, 795], "100": [0, 9, 11, 40, 42, 44, 50, 53, 54, 73, 76, 77, 78, 81, 95, 138, 146, 233, 273, 286, 315, 333, 342, 349, 352, 355, 356, 378, 379, 415, 418, 510, 518, 534, 585, 588, 590, 593, 597, 629, 678, 749, 752, 753, 768, 769, 782, 790, 791, 792, 795], "size": [0, 8, 13, 15, 20, 23, 24, 30, 31, 33, 34, 35, 42, 44, 47, 54, 55, 58, 59, 61, 63, 64, 71, 77, 78, 81, 82, 84, 86, 87, 94, 96, 97, 134, 137, 210, 211, 212, 303, 306, 310, 317, 318, 319, 324, 338, 345, 349, 352, 353, 355, 356, 358, 361, 362, 365, 367, 369, 370, 371, 372, 373, 374, 390, 391, 392, 394, 395, 404, 415, 418, 432, 444, 455, 461, 462, 468, 473, 485, 486, 487, 488, 489, 528, 533, 585, 587, 590, 592, 593, 595, 599, 600, 604, 619, 621, 624, 628, 632, 636, 638, 641, 647, 656, 661, 662, 663, 692, 698, 701, 721, 722, 731, 749, 779, 781, 782, 785, 790], "rand": [0, 26, 28, 29, 44, 743, 749], "And": [0, 9, 11, 13, 15, 20, 23, 28, 29, 30, 43, 74, 749, 763, 766, 774, 776, 782], "final": [0, 2, 9, 11, 13, 15, 17, 25, 28, 29, 34, 40, 41, 50, 55, 77, 78, 94, 120, 137, 138, 355, 398, 506, 584, 585, 590, 592, 618, 759, 761, 763, 764, 765, 766, 768, 769, 771, 772, 776, 778, 779, 780, 785, 786, 790, 798, 808], "__setattr__": [0, 767], "__getattr__": [0, 767], "arbitrari": [0, 2, 21, 31, 50, 51, 54, 71, 74, 139, 152, 179, 426, 427, 428, 573, 585, 586, 591, 775, 776, 778, 779, 780, 782, 791, 795, 803, 808], "class": [0, 2, 6, 8, 10, 13, 15, 19, 28, 29, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 134, 143, 148, 164, 167, 180, 182, 183, 242, 279, 322, 342, 352, 366, 367, 374, 375, 403, 486, 487, 493, 502, 506, 519, 529, 551, 585, 586, 587, 588, 590, 592, 594, 597, 598, 617, 619, 625, 636, 641, 650, 666, 672, 673, 684, 691, 706, 713, 717, 718, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 743, 747, 749, 759, 765, 766, 767, 769, 770, 771, 772, 775, 777, 778, 781, 782, 785, 787, 788, 790, 791, 792, 793, 794, 795, 797, 800, 802, 803, 809], "cont": 0, "new_attribut": 0, "contain": [0, 19, 28, 29, 43, 48, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 162, 164, 165, 166, 167, 170, 171, 172, 174, 176, 179, 196, 198, 199, 200, 205, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 354, 355, 356, 357, 358, 361, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 538, 541, 543, 548, 549, 550, 551, 553, 555, 556, 563, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 679, 680, 681, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 731, 732, 733, 735, 736, 740, 743, 749, 751, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 768, 769, 771, 772, 775, 776, 777, 778, 779, 781, 782, 784, 785, 786, 787, 788, 791, 795, 796, 797, 802, 803, 808], "cont_deep_copi": [0, 71, 790], "some": [0, 2, 7, 8, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 34, 40, 44, 45, 71, 79, 244, 246, 262, 355, 378, 379, 380, 571, 572, 575, 577, 578, 579, 587, 588, 591, 597, 683, 731, 749, 752, 753, 757, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 794, 795, 796, 797, 798, 799, 801, 802, 803, 808, 809], "still": [0, 2, 22, 24, 25, 28, 29, 31, 32, 35, 59, 71, 82, 593, 641, 752, 759, 761, 764, 765, 769, 772, 773, 774, 776, 779, 780, 782, 785, 791, 795, 799, 802, 808], "develop": [0, 2, 13, 27, 28, 29, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 766, 768, 783, 794, 795, 797, 800, 801, 802, 803, 804, 807, 808, 809], "account": [0, 34, 44, 46, 54, 61, 77, 84, 286, 358, 436, 588, 595, 660, 730, 743, 760, 768, 772, 780, 783], "point": [0, 17, 26, 51, 53, 54, 59, 63, 65, 67, 74, 76, 77, 82, 86, 90, 121, 122, 123, 130, 132, 135, 142, 143, 147, 151, 164, 168, 172, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 252, 253, 254, 255, 260, 261, 262, 263, 264, 272, 274, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 303, 304, 306, 335, 336, 339, 341, 349, 352, 355, 356, 357, 362, 367, 378, 379, 380, 403, 417, 419, 466, 467, 468, 469, 470, 480, 481, 482, 489, 583, 585, 586, 588, 593, 599, 600, 601, 602, 603, 620, 622, 625, 626, 627, 629, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 645, 648, 694, 695, 701, 703, 704, 705, 706, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 740, 753, 757, 759, 760, 761, 763, 764, 765, 766, 768, 771, 772, 775, 779, 780, 782, 783, 785, 787, 789, 790, 794, 808], "wip": [0, 774], "ll": [0, 1, 2, 6, 8, 9, 11, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 43, 749, 753, 754, 757, 759, 760, 761, 766, 771, 774, 778, 779, 790], "soon": [0, 759, 761, 768, 769, 793, 795], "control": [0, 36, 54, 77, 146, 294, 315, 347, 349, 355, 358, 378, 379, 380, 430, 454, 537, 585, 590, 593, 623, 729, 767, 769, 770, 778, 779, 780, 781, 785, 789, 790, 794, 797, 802, 808], "flow": [0, 36, 767, 794, 802, 803], "built": [0, 28, 29, 34, 42, 44, 47, 121, 585, 731, 732, 733, 749, 760, 761, 766, 767, 782, 788, 796, 797, 801, 802, 806], "moment": [0, 2, 6, 56, 79, 571, 572, 577, 591, 735, 759, 765, 795], "condit": [0, 64, 77, 87, 118, 356, 400, 584, 597, 600, 682, 683, 702, 763, 769, 771, 773, 776, 777, 779, 782, 794], "branch": [0, 45, 227, 239, 242, 244, 272, 284, 285, 286, 289, 588, 760, 761, 763, 768, 774, 795, 802], "loop": [0, 9, 11, 21, 36, 69, 92, 117, 120, 584, 596, 669, 670, 671, 749, 765, 795], "regist": [0, 761], "correctli": [0, 2, 3, 25, 28, 29, 42, 54, 59, 64, 77, 82, 87, 324, 352, 367, 486, 487, 488, 489, 593, 600, 632, 698, 759, 760, 761, 764, 767, 769, 771, 773, 774, 775, 781, 782, 785, 791, 795], "while": [0, 1, 28, 29, 36, 54, 58, 71, 77, 81, 94, 97, 120, 141, 178, 246, 247, 267, 268, 329, 352, 355, 356, 358, 398, 413, 448, 449, 479, 584, 585, 586, 588, 592, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 703, 715, 718, 751, 752, 757, 759, 760, 761, 764, 765, 766, 768, 769, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 785, 789, 791, 792, 795, 802, 808, 809], "your": [0, 1, 2, 3, 5, 6, 7, 9, 11, 13, 15, 17, 18, 19, 21, 22, 25, 28, 29, 32, 40, 42, 44, 46, 749, 752, 753, 754, 755, 757, 758, 759, 760, 763, 765, 766, 768, 772, 774, 778, 780, 783, 785, 790, 791, 795, 796, 802], "depend": [0, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 33, 50, 51, 54, 55, 59, 65, 66, 74, 77, 82, 89, 90, 118, 129, 151, 219, 220, 221, 224, 225, 226, 227, 236, 237, 239, 242, 244, 260, 261, 262, 263, 272, 274, 277, 284, 285, 289, 290, 341, 352, 356, 403, 416, 551, 584, 585, 586, 588, 590, 593, 600, 602, 625, 626, 638, 639, 640, 641, 702, 707, 710, 720, 749, 752, 755, 756, 757, 759, 760, 761, 766, 769, 770, 772, 777, 779, 780, 781, 782, 785, 787, 795, 796, 800, 802, 803], "chang": [0, 6, 7, 19, 29, 42, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 358, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 582, 588, 595, 597, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 637, 638, 639, 641, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 673, 684, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 749, 753, 755, 759, 760, 761, 763, 765, 766, 767, 768, 769, 771, 772, 774, 780, 781, 782, 783, 784, 785, 787, 791, 795, 796, 805, 808], "number": [0, 42, 44, 45, 46, 47, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 94, 96, 97, 100, 121, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 152, 157, 158, 159, 160, 161, 163, 164, 167, 170, 171, 172, 174, 176, 179, 203, 204, 205, 219, 220, 221, 222, 223, 225, 227, 228, 235, 237, 239, 240, 242, 244, 245, 246, 252, 253, 254, 256, 260, 262, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 290, 292, 300, 310, 313, 314, 315, 317, 318, 320, 322, 323, 324, 325, 333, 338, 342, 347, 349, 352, 355, 356, 358, 361, 367, 388, 398, 400, 403, 406, 407, 415, 417, 418, 426, 427, 428, 446, 447, 448, 449, 450, 452, 455, 457, 460, 461, 462, 478, 480, 481, 482, 483, 488, 506, 513, 531, 548, 549, 556, 569, 570, 583, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 599, 600, 601, 603, 604, 605, 612, 613, 615, 618, 621, 625, 626, 627, 634, 639, 641, 645, 646, 647, 650, 653, 655, 656, 658, 659, 661, 662, 664, 666, 668, 669, 670, 671, 692, 696, 701, 703, 704, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 730, 731, 734, 749, 750, 751, 760, 761, 767, 768, 769, 770, 771, 777, 778, 779, 782, 783, 784, 785, 787, 790], "underli": [0, 19, 28, 29, 40, 54, 61, 77, 84, 229, 232, 234, 269, 358, 436, 588, 593, 595, 639, 660, 767, 779, 785, 802], "piec": [0, 761, 764, 776, 777, 787, 798, 800], "insid": [0, 44, 59, 82, 97, 358, 455, 593, 634, 760, 761, 764, 767, 769, 770, 776, 777, 782, 783, 808], "said": [0, 28, 29, 753, 783], "other": [0, 2, 6, 9, 11, 13, 15, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 51, 53, 54, 55, 61, 67, 71, 74, 76, 77, 78, 84, 90, 94, 96, 97, 121, 141, 152, 178, 239, 244, 246, 262, 271, 272, 321, 325, 352, 358, 431, 439, 451, 491, 492, 585, 586, 588, 590, 599, 603, 654, 664, 695, 718, 720, 749, 752, 755, 759, 760, 761, 763, 764, 767, 768, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 789, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 808, 809], "numpi": [0, 2, 6, 7, 8, 9, 11, 13, 15, 20, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 53, 54, 55, 67, 76, 77, 78, 146, 175, 193, 223, 283, 315, 349, 367, 480, 487, 495, 519, 548, 551, 555, 585, 586, 587, 588, 590, 603, 713, 740, 743, 749, 751, 752, 758, 759, 760, 761, 763, 764, 765, 768, 769, 770, 773, 775, 779, 781, 782, 783, 785, 787, 789, 792, 796, 797, 804, 809], "len": [0, 8, 42, 44, 50, 54, 59, 77, 82, 139, 307, 349, 355, 356, 367, 388, 398, 407, 415, 418, 489, 585, 593, 646, 749, 767, 768, 773, 779, 780, 782, 789, 792], "incorrectli": [0, 772], "There": [0, 19, 26, 29, 34, 94, 348, 350, 351, 359, 360, 364, 749, 751, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 776, 778, 780, 781, 784, 787, 790, 795, 803, 804, 808, 809], "succe": [0, 760], "hide": [0, 773], "shouldn": [0, 783], "realli": [0, 7, 40, 760, 767, 795, 807, 808], "check": [0, 6, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 45, 47, 49, 51, 55, 59, 71, 74, 78, 82, 112, 155, 156, 165, 166, 169, 171, 172, 173, 176, 191, 198, 199, 206, 218, 495, 505, 507, 508, 515, 521, 522, 523, 524, 525, 541, 551, 563, 569, 582, 586, 587, 590, 593, 597, 626, 627, 634, 672, 673, 682, 683, 684, 729, 743, 749, 756, 758, 759, 760, 761, 763, 767, 768, 770, 771, 773, 777, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 791, 796], "recommend": [0, 267, 268, 281, 588, 603, 715, 718, 760, 765, 766, 774, 777, 778], "nois": [0, 2, 13, 15, 28, 29, 749], "anoth": [0, 2, 6, 19, 21, 22, 25, 26, 28, 29, 31, 32, 44, 45, 133, 152, 154, 585, 586, 749, 752, 759, 760, 761, 765, 767, 769, 770, 773, 774, 776, 779, 780, 782, 787, 789, 792, 797, 802, 808], "right": [0, 43, 54, 59, 71, 77, 82, 97, 115, 116, 231, 233, 286, 332, 352, 355, 356, 358, 389, 410, 416, 417, 437, 502, 584, 588, 590, 593, 602, 641, 646, 709, 754, 759, 760, 761, 762, 763, 771, 785, 790], "feel": [0, 1, 3, 43, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 749, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786], "free": [0, 1, 3, 8, 42, 43, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 749, 755, 757, 758, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 794, 803, 805], "open": [0, 1, 2, 3, 6, 8, 9, 10, 11, 25, 28, 29, 42, 43, 44, 45, 55, 63, 86, 121, 585, 599, 693, 695, 749, 751, 752, 753, 754, 760, 761, 766, 769, 772, 780, 781, 785, 794, 800, 801, 802, 804, 805], "issu": [0, 730, 753, 754, 757, 758, 760, 763, 765, 768, 769, 770, 771, 773, 780, 782, 783, 785, 787, 791, 795], "minim": [0, 42, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 637, 638, 639, 641, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 772, 779, 781, 785, 787, 800, 808], "resnet50": 0, "hug": [0, 11, 28], "face": [0, 11, 28, 754, 760, 763, 774, 778, 785, 787, 802, 808], "classifi": [0, 2, 6, 13, 15, 28, 29, 42, 44, 45, 749], "breed": 0, "cat": [0, 2, 6, 10, 43, 781, 785, 787, 792], "transform": [0, 2, 6, 7, 9, 10, 11, 25, 28, 29, 42, 43, 45, 54, 58, 77, 81, 355, 356, 376, 377, 382, 383, 386, 387, 388, 398, 410, 592, 616, 731, 749, 777, 782, 792, 794, 797, 800, 802, 803, 804], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 28, 71, 749, 790, 793], "load_dataset": [0, 2, 42], "download": [0, 2, 6, 10, 13, 15, 28, 29, 43, 44, 47, 760, 782], "imag": [0, 2, 5, 6, 9, 11, 13, 17, 25, 28, 29, 42, 43, 44, 45, 46, 47, 53, 54, 58, 76, 77, 81, 96, 219, 220, 221, 222, 225, 228, 237, 240, 242, 244, 253, 254, 255, 260, 262, 275, 282, 283, 285, 286, 290, 355, 373, 374, 390, 391, 392, 394, 502, 588, 590, 592, 605, 606, 607, 608, 609, 612, 613, 614, 731, 749, 755, 760, 785, 787, 788, 790, 792, 794, 796, 802], "huggingfac": [0, 2, 42], "test": [0, 2, 7, 20, 21, 23, 24, 30, 31, 33, 34, 35, 43, 44, 53, 55, 68, 76, 78, 91, 120, 170, 174, 253, 254, 255, 256, 279, 355, 378, 379, 380, 526, 584, 586, 588, 590, 604, 721, 722, 749, 753, 757, 758, 759, 762, 766, 769, 771, 773, 774, 777, 780, 783, 795, 796, 802], "image_processor": [0, 2, 45], "from_pretrain": [0, 2, 7, 11, 28, 45], "microsoft": [0, 2, 11, 28, 752, 802, 807, 809], "resnet": [0, 2, 5, 11, 17, 28], "50": [0, 2, 11, 28, 29, 40, 44, 54, 67, 76, 77, 78, 238, 278, 339, 352, 355, 356, 383, 402, 408, 504, 510, 517, 518, 534, 548, 588, 590, 593, 597, 600, 603, 629, 636, 673, 675, 701, 713, 778, 789], "preprocess": [0, 6, 10, 28, 29, 42, 45], "return_tensor": [0, 2, 7, 11, 28, 45], "pt": [0, 7, 11, 28], "normal": [0, 4, 6, 10, 13, 14, 15, 16, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 54, 62, 63, 77, 85, 86, 94, 341, 352, 355, 361, 367, 376, 377, 382, 383, 386, 387, 388, 398, 460, 461, 462, 463, 464, 465, 480, 483, 595, 598, 599, 654, 664, 691, 692, 694, 730, 731, 734, 749, 759, 779, 780, 785, 790, 800], "feed": [0, 6, 212, 587, 802, 803], "itself": [0, 6, 23, 33, 53, 94, 273, 492, 557, 588, 590, 597, 684, 751, 757, 760, 761, 763, 766, 767, 768, 769, 770, 773, 774, 779, 780, 791, 794, 795, 801, 802, 803, 808], "without": [0, 3, 6, 31, 40, 44, 47, 65, 71, 543, 557, 590, 595, 597, 601, 660, 673, 703, 704, 705, 706, 743, 761, 764, 765, 767, 768, 769, 770, 771, 773, 775, 776, 780, 782, 783, 785, 789, 790, 791, 794, 795, 799, 802, 803, 804, 808], "pytorch": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 26, 28, 29, 40, 47, 282, 588, 735, 749, 752, 753, 758, 759, 764, 769, 770, 773, 775, 776, 779, 780, 781, 785, 787, 792, 795, 797, 803, 805, 806, 808, 809], "no_grad": [0, 7, 42], "logit": [0, 6, 7, 8, 10, 42, 43, 44, 45, 54, 60, 77, 83, 347, 362, 466, 469, 594, 650, 652, 727, 749], "With": [0, 6, 21, 31, 40, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 67, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 151, 152, 153, 154, 156, 162, 163, 164, 167, 174, 179, 180, 181, 182, 183, 193, 196, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 306, 322, 324, 330, 333, 334, 335, 337, 338, 341, 347, 349, 352, 355, 356, 357, 358, 367, 376, 378, 379, 386, 400, 401, 402, 404, 405, 413, 422, 436, 437, 438, 440, 443, 445, 446, 452, 455, 457, 471, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 495, 496, 497, 498, 501, 502, 503, 504, 505, 509, 510, 513, 515, 517, 518, 519, 533, 534, 548, 549, 551, 553, 555, 556, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 619, 620, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 639, 641, 642, 643, 645, 646, 650, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 752, 753, 760, 771, 780, 782, 785, 787, 802, 805], "compiled_graph": 0, "our": [0, 6, 9, 11, 13, 15, 17, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 40, 42, 43, 46, 69, 92, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 754, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 771, 773, 774, 777, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 795, 807, 808], "predicted_label": 0, "argmax": [0, 8, 43, 44, 45, 64, 87, 600, 749, 780], "item": [0, 3, 7, 28, 29, 40, 42, 44, 49, 55, 69, 71, 73, 76, 77, 78, 134, 158, 195, 249, 265, 273, 325, 327, 340, 499, 509, 510, 514, 548, 549, 585, 586, 587, 590, 597, 604, 677, 678, 679, 680, 684, 689, 690, 724, 732, 733, 749, 759, 767, 769, 787, 789, 790, 792], "config": [0, 7, 8, 9, 11, 22, 28, 29, 42, 43, 45, 71, 597, 685, 749, 755, 760, 763, 766, 768, 774, 781, 790, 803], "id2label": [0, 45], "us": [1, 3, 4, 5, 6, 7, 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 87, 92, 94, 97, 104, 138, 141, 151, 163, 165, 166, 177, 178, 198, 199, 201, 206, 210, 211, 212, 213, 215, 218, 224, 232, 260, 261, 263, 264, 266, 267, 268, 270, 271, 273, 282, 286, 291, 303, 305, 306, 308, 309, 310, 314, 331, 334, 335, 338, 349, 352, 355, 356, 358, 361, 362, 363, 365, 367, 373, 374, 375, 377, 378, 379, 380, 381, 383, 388, 390, 391, 392, 393, 396, 398, 402, 404, 406, 410, 412, 414, 415, 416, 417, 418, 436, 440, 444, 446, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 480, 487, 489, 507, 508, 517, 518, 529, 537, 539, 540, 542, 548, 549, 561, 562, 564, 571, 572, 577, 578, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 601, 603, 616, 618, 619, 624, 626, 634, 642, 648, 650, 659, 660, 661, 665, 669, 670, 671, 672, 674, 675, 681, 682, 683, 685, 692, 693, 694, 695, 697, 698, 699, 700, 703, 705, 713, 727, 728, 729, 730, 731, 732, 733, 734, 735, 740, 743, 747, 753, 754, 755, 758, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "compil": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 22, 26, 32, 36, 45, 47, 290, 588, 732, 733, 735, 749, 767, 780, 783, 785, 786, 788, 795, 796, 797, 798, 801, 802, 803, 806, 809], "grant": [1, 749], "pilot": [1, 749, 758], "access": [1, 2, 3, 25, 28, 29, 71, 749, 759, 760, 761, 768, 769, 774, 779, 780, 802, 804, 806], "user": [1, 17, 28, 43, 44, 46, 273, 290, 358, 446, 537, 588, 590, 729, 731, 732, 733, 743, 749, 751, 752, 755, 760, 761, 762, 764, 765, 767, 768, 769, 770, 773, 777, 778, 779, 780, 782, 784, 785, 786, 787, 795, 796, 800, 802, 808, 809], "join": [1, 43, 44, 61, 71, 77, 84, 431, 595, 654, 664, 749], "waitlist": [1, 749], "want": [1, 2, 6, 8, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 41, 42, 44, 54, 69, 77, 92, 239, 272, 358, 434, 588, 729, 733, 749, 752, 754, 756, 759, 760, 761, 766, 768, 770, 773, 774, 776, 777, 778, 779, 782, 785, 790, 791, 792, 795, 796], "get": [1, 2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 42, 43, 45, 52, 59, 71, 75, 82, 96, 162, 163, 164, 167, 195, 196, 197, 200, 206, 211, 214, 218, 493, 511, 532, 550, 586, 587, 590, 593, 597, 648, 674, 729, 730, 731, 743, 749, 753, 754, 758, 759, 760, 762, 763, 768, 769, 770, 776, 777, 778, 779, 780, 781, 782, 787, 788, 789, 790, 791, 797, 802, 808], "one": [1, 2, 6, 9, 11, 13, 15, 17, 18, 21, 22, 25, 26, 28, 29, 31, 32, 44, 45, 46, 50, 54, 55, 58, 59, 61, 64, 65, 67, 71, 73, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 94, 121, 129, 139, 141, 142, 143, 152, 154, 212, 233, 239, 246, 247, 264, 270, 271, 272, 291, 297, 303, 306, 307, 320, 324, 329, 330, 333, 334, 335, 337, 338, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 376, 378, 382, 383, 386, 387, 390, 399, 400, 407, 414, 422, 426, 427, 428, 436, 437, 438, 443, 445, 450, 453, 460, 461, 462, 466, 471, 481, 482, 485, 486, 487, 488, 489, 491, 529, 533, 534, 536, 553, 555, 556, 569, 571, 572, 575, 577, 579, 580, 585, 586, 587, 588, 590, 591, 592, 593, 595, 598, 600, 601, 603, 606, 607, 608, 609, 610, 611, 614, 628, 631, 632, 636, 638, 647, 648, 656, 657, 658, 661, 663, 667, 691, 698, 701, 703, 704, 705, 706, 711, 713, 734, 737, 740, 746, 749, 752, 753, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 789, 790, 792, 795, 797, 802, 803, 805, 808], "directori": [1, 42, 43, 44, 47, 546, 568, 587, 590, 755, 756, 759, 760, 761, 766, 768, 780, 782], "keep": [1, 2, 3, 4, 13, 15, 19, 25, 26, 28, 54, 61, 71, 77, 84, 94, 342, 356, 418, 595, 667, 758, 759, 760, 761, 763, 765, 766, 767, 768, 773, 779, 780, 782, 783, 785, 790, 792, 796], "locat": [1, 3, 44, 141, 367, 481, 585, 597, 599, 602, 676, 692, 709, 759, 761, 765, 766, 770, 780, 781, 782, 783, 800], "ivy_root": 1, "environ": [1, 6, 8, 43, 46, 749, 754, 755, 761, 794, 796, 802, 804], "path": [1, 3, 43, 44, 739, 760, 766, 779, 780, 781, 802], "either": [1, 2, 23, 24, 33, 34, 35, 36, 40, 46, 53, 54, 55, 58, 67, 71, 76, 77, 78, 81, 82, 106, 109, 112, 118, 133, 134, 219, 220, 221, 222, 227, 237, 239, 240, 242, 244, 246, 253, 254, 260, 261, 262, 263, 264, 272, 281, 283, 284, 286, 289, 290, 321, 341, 352, 355, 367, 376, 386, 396, 397, 481, 482, 501, 521, 529, 530, 538, 557, 582, 584, 585, 588, 590, 592, 593, 596, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 631, 636, 639, 643, 669, 670, 671, 711, 712, 717, 719, 729, 731, 732, 733, 740, 759, 760, 761, 765, 767, 769, 770, 771, 772, 773, 774, 776, 779, 780, 781, 782, 785, 787, 790, 795, 802], "manual": [1, 4, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 597, 672, 682, 683, 759, 760, 761, 769, 774, 782, 791], "automat": [1, 6, 8, 10, 28, 29, 34, 753, 759, 760, 761, 762, 765, 766, 768, 769, 774, 776, 779, 782, 785, 786, 788, 791, 792, 797, 802, 805, 809], "past": [1, 761, 763, 781, 782, 802], "content": [1, 3, 4, 14, 16, 27, 28, 43, 44, 54, 71, 77, 367, 487, 759, 761, 766, 770, 779, 787, 790], "pem": 1, "file": [1, 3, 42, 43, 44, 55, 71, 546, 568, 590, 733, 759, 760, 761, 763, 764, 765, 766, 767, 768, 770, 772, 773, 774, 776, 780, 781, 782, 783, 787, 790, 798, 801, 802, 803], "refer": [1, 3, 8, 54, 61, 67, 68, 77, 79, 84, 90, 91, 132, 146, 244, 262, 304, 315, 340, 349, 352, 355, 356, 358, 383, 388, 398, 401, 418, 436, 571, 572, 585, 588, 591, 593, 595, 603, 604, 621, 623, 647, 660, 718, 720, 721, 722, 731, 749, 758, 759, 760, 761, 763, 764, 766, 768, 769, 775, 776, 777, 778, 779, 780, 781, 782, 795, 797, 802], "equival": [1, 2, 9, 11, 28, 59, 82, 94, 121, 233, 246, 267, 268, 281, 282, 358, 457, 585, 588, 593, 634, 637, 640, 648, 740, 779, 780, 785, 790, 792], "echo": [1, 760, 768], "n": [1, 2, 40, 43, 44, 45, 47, 50, 53, 54, 58, 59, 61, 63, 64, 67, 68, 76, 77, 81, 82, 84, 86, 87, 90, 91, 94, 96, 139, 144, 145, 146, 219, 289, 291, 315, 316, 325, 349, 352, 355, 356, 358, 361, 362, 365, 367, 369, 370, 371, 376, 377, 382, 383, 386, 387, 388, 396, 397, 398, 404, 405, 412, 414, 418, 428, 432, 435, 439, 441, 452, 458, 460, 461, 462, 466, 467, 468, 469, 470, 473, 480, 489, 585, 588, 592, 593, 595, 597, 599, 600, 603, 604, 605, 606, 607, 608, 610, 612, 614, 621, 624, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 645, 646, 647, 648, 655, 656, 658, 664, 668, 680, 693, 694, 695, 701, 715, 717, 718, 719, 720, 721, 722, 731, 734, 743, 749, 762, 766, 768, 782], "api_kei": 1, "bug": [1, 246, 588, 749, 759, 761, 766, 774, 780, 782], "pleas": [1, 3, 34, 43, 47, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794], "rais": [1, 43, 44, 50, 54, 55, 63, 65, 68, 71, 73, 77, 78, 84, 86, 88, 91, 123, 153, 242, 277, 328, 352, 355, 358, 362, 367, 388, 398, 426, 427, 432, 434, 436, 437, 438, 445, 451, 458, 467, 486, 487, 495, 519, 537, 539, 549, 551, 557, 561, 586, 588, 590, 593, 595, 599, 600, 601, 603, 604, 631, 633, 647, 656, 657, 658, 660, 662, 663, 664, 665, 667, 693, 694, 695, 701, 706, 714, 716, 721, 722, 732, 733, 735, 749, 752, 761, 763, 765, 769, 770, 773, 779, 780, 783, 784, 787, 789], "github": [1, 4, 6, 7, 8, 10, 28, 42, 43, 44, 45, 46, 749, 751, 755, 756, 758, 761, 763, 768, 769, 771, 772, 774, 782, 796], "add": [1, 3, 21, 31, 44, 46, 53, 54, 62, 69, 71, 76, 77, 85, 92, 96, 97, 345, 353, 355, 397, 529, 557, 588, 590, 593, 598, 603, 645, 691, 719, 731, 734, 749, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 776, 777, 779, 780, 782, 783, 785, 787, 789, 795, 798, 800, 802], "label": [1, 42, 43, 44, 54, 60, 77, 83, 357, 419, 421, 422, 423, 594, 650, 651, 652, 749, 759, 763, 780, 786, 787, 788, 792, 802], "accordingli": [1, 3, 59, 64, 65, 67, 68, 82, 87, 90, 91, 139, 239, 244, 246, 262, 272, 286, 585, 588, 593, 600, 601, 603, 604, 648, 699, 703, 704, 705, 706, 714, 715, 716, 717, 718, 719, 720, 721, 722, 780, 787], "member": [1, 752, 759, 761, 780], "team": [1, 3, 749, 754, 759, 760, 761, 780, 804], "back": [1, 42, 54, 61, 77, 84, 358, 436, 535, 558, 590, 592, 595, 618, 660, 730, 732, 733, 735, 752, 760, 764, 769, 770, 773, 777, 778, 784, 786, 795, 800, 804], "asap": 1, "haven": [1, 28, 29, 34, 802], "found": [1, 42, 44, 45, 47, 59, 61, 65, 71, 77, 82, 84, 88, 97, 200, 367, 431, 481, 587, 597, 624, 631, 664, 683, 703, 729, 755, 759, 760, 761, 764, 765, 766, 767, 769, 770, 772, 774, 777, 779, 780, 804], "ask": [1, 749, 753, 759, 760, 771, 787, 789, 795], "suggest": [1, 3, 759, 760, 761, 766, 769, 774, 778, 780, 782, 783, 784], "someth": [1, 749, 761, 765, 774, 783, 790, 791, 795, 808], "help": [1, 3, 17, 44, 46, 492, 537, 590, 603, 719, 730, 749, 754, 755, 756, 759, 760, 764, 765, 766, 767, 768, 769, 771, 774, 776, 777, 779, 780, 782, 783, 789, 790, 791, 793, 797, 798, 802, 804, 808], "post": [1, 6, 8, 42, 62, 85, 598, 691, 760, 778, 792], "forum": [1, 766], "discord": [1, 3, 43, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794], "server": [1, 42, 749, 760, 761, 766, 802], "convert": [2, 5, 8, 9, 11, 13, 15, 17, 18, 20, 22, 25, 26, 28, 29, 30, 32, 34, 42, 45, 47, 49, 50, 53, 71, 72, 73, 76, 94, 122, 123, 140, 149, 150, 192, 193, 194, 195, 206, 214, 218, 238, 278, 358, 363, 426, 427, 428, 471, 535, 552, 554, 555, 556, 558, 585, 586, 587, 588, 590, 593, 597, 649, 673, 684, 685, 740, 743, 749, 753, 759, 764, 765, 777, 778, 780, 782, 784, 787, 795, 797, 800, 801, 808], "written": [2, 5, 6, 7, 17, 19, 28, 29, 42, 55, 749, 751, 760, 763, 764, 772, 774, 775, 779, 780, 783, 787, 789, 792, 795, 800, 802, 806, 808, 809], "choic": [2, 29, 46, 54, 67, 77, 90, 356, 358, 416, 430, 603, 718, 720, 749, 753, 760, 768, 779, 780, 790, 802, 809], "preserv": [2, 54, 55, 56, 71, 77, 78, 79, 97, 355, 356, 358, 367, 390, 415, 426, 427, 428, 437, 438, 487, 519, 580, 590, 591, 595, 657, 782, 792, 795], "logic": [2, 68, 91, 203, 239, 240, 266, 267, 268, 272, 275, 587, 588, 604, 721, 722, 759, 764, 768, 769, 770, 773, 776, 777, 778, 779, 780, 782, 785, 789], "target": [2, 13, 15, 21, 23, 24, 26, 28, 29, 31, 32, 33, 34, 35, 44, 54, 77, 194, 357, 420, 421, 422, 423, 587, 731, 733, 739, 749, 757, 760, 762, 765, 774, 781, 786, 790, 791, 792, 798, 800, 801, 802, 805, 807, 808], "optim": [2, 9, 11, 19, 28, 29, 42, 44, 45, 47, 56, 79, 303, 349, 357, 421, 493, 579, 590, 591, 596, 669, 670, 671, 730, 749, 753, 769, 779, 785, 788, 790, 792, 794, 800, 801, 802, 803, 804, 805, 806, 809], "tool": [2, 19, 28, 29, 749, 750, 753, 760, 761, 771, 774, 788, 792, 794, 795, 800, 801, 802, 803, 805, 808, 809], "make": [2, 3, 6, 8, 9, 10, 11, 20, 28, 29, 30, 42, 46, 740, 749, 752, 753, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 789, 790, 792, 796, 800, 802, 803, 804, 805, 808, 809], "ml": [2, 6, 7, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 47, 749, 750, 752, 753, 754, 758, 780, 786, 787, 788, 790, 791, 792, 794, 798, 799, 800, 801, 802, 805, 807, 809], "relat": [2, 26, 246, 588, 749, 755, 758, 759, 760, 761, 773, 780, 782, 783, 784, 785, 794, 805], "project": [2, 17, 22, 28, 29, 32, 592, 618, 731, 749, 751, 752, 753, 756, 759, 760, 761, 764, 765, 766, 782, 791, 794, 795, 798, 800, 802, 805, 809], "independ": [2, 19, 29, 54, 63, 77, 86, 222, 239, 272, 282, 362, 466, 588, 593, 599, 621, 640, 692, 749, 763, 769, 771, 777, 787, 792, 800], "research": [2, 28, 29, 42, 749, 751, 794, 802, 809], "deploi": [2, 42, 749, 768, 797, 800, 801, 802, 804, 808], "system": [2, 44, 593, 640, 749, 760, 761, 765, 768, 769, 795, 800, 802, 805, 807, 809], "build": [2, 12, 16, 17, 19, 26, 28, 29, 32, 33, 34, 35, 40, 42, 47, 65, 71, 97, 601, 703, 704, 705, 706, 731, 732, 733, 749, 752, 754, 755, 760, 762, 768, 769, 776, 778, 786, 788, 791, 792, 795, 797, 800, 802, 804, 807, 808, 809], "block": [2, 9, 28, 29, 32, 33, 34, 35, 356, 408, 749, 761, 767, 769, 773, 776, 782, 786, 788, 792, 795, 797, 807, 809], "neural": [2, 592, 727, 731, 749, 794, 798, 800, 801, 802, 806, 808, 809], "network": [2, 19, 26, 28, 29, 40, 42, 47, 592, 616, 727, 729, 730, 731, 732, 733, 749, 752, 767, 776, 787, 791, 794, 798, 800, 801, 802, 806, 808, 809], "layer": [2, 13, 15, 19, 25, 26, 28, 29, 40, 45, 54, 62, 77, 85, 598, 617, 618, 691, 728, 729, 730, 732, 733, 734, 735, 736, 749, 751, 772, 780, 783, 785, 787, 788, 791, 800, 802, 806, 809], "activ": [2, 13, 26, 28, 29, 54, 55, 58, 69, 77, 81, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 294, 298, 299, 301, 302, 551, 592, 618, 619, 730, 731, 749, 755, 760, 761, 769, 774, 783, 784, 791, 802, 805], "train": [2, 13, 15, 26, 28, 29, 45, 54, 56, 58, 77, 79, 81, 355, 361, 378, 379, 380, 460, 462, 571, 572, 577, 591, 592, 615, 618, 619, 730, 731, 732, 733, 734, 749, 753, 767, 770, 776, 790, 791, 792, 793, 794, 795, 797, 800, 801, 806, 808, 809], "pipelin": [2, 749, 751, 756, 762, 763, 764, 781, 783, 792, 797, 802, 803, 808], "publish": [2, 42, 749, 753, 795], "ex": [2, 768], "haiku": [2, 6, 7, 8, 9, 11, 26, 28, 29, 40, 42, 46, 728, 749, 753, 792, 802], "latest": [2, 42, 44, 53, 76, 154, 242, 252, 253, 268, 367, 480, 586, 588, 593, 595, 603, 639, 668, 718, 731, 749, 759, 760, 761, 763, 765, 768, 772, 783, 795, 796, 807], "integr": [2, 6, 7, 13, 15, 22, 29, 32, 51, 53, 54, 74, 76, 77, 151, 291, 337, 352, 367, 483, 586, 588, 749, 758, 760, 762, 777, 800, 802, 804, 805, 806], "kornia": [2, 17, 18, 25, 28, 29, 42, 46, 749], "advantag": [2, 26, 28, 29, 749, 760, 761, 779, 780, 796, 802], "featur": [2, 6, 11, 13, 15, 17, 19, 28, 29, 42, 46, 54, 77, 355, 369, 370, 371, 378, 379, 380, 730, 731, 749, 759, 760, 761, 764, 765, 768, 775, 783, 785, 790, 795, 802, 803, 804, 808], "tensorflow": [2, 12, 13, 17, 19, 20, 23, 24, 26, 28, 29, 30, 33, 34, 35, 40, 46, 53, 54, 55, 76, 77, 146, 193, 223, 315, 349, 356, 404, 551, 585, 587, 590, 740, 749, 752, 753, 757, 758, 759, 760, 761, 763, 765, 768, 769, 770, 775, 779, 780, 781, 782, 783, 785, 787, 792, 795, 797, 800, 803, 805, 806, 808, 809], "deploy": [2, 760, 801, 804, 805, 808, 809], "definit": [2, 47, 53, 59, 76, 82, 291, 588, 593, 620, 749, 761, 764, 769, 776, 789], "job": [2, 28, 29, 749, 766, 768], "graph": [2, 3, 6, 8, 17, 18, 21, 25, 26, 29, 35, 36, 41, 46, 47, 65, 601, 703, 704, 705, 706, 732, 733, 749, 753, 767, 776, 780, 785, 788, 795, 797, 798, 802, 805], "leverag": [2, 25, 28, 29, 749, 760, 779, 800, 802], "frontend": [2, 536, 590, 749, 758, 761, 762, 768, 769, 773, 778, 782, 785, 786, 788, 797, 802], "link": [2, 3, 19, 28, 29, 43, 749, 755, 759, 760, 761, 766, 768, 769, 774, 780, 798, 800], "swap": [2, 61, 84, 595, 665, 740], "replac": [2, 14, 16, 27, 43, 53, 55, 61, 63, 71, 76, 78, 84, 86, 132, 273, 304, 349, 533, 534, 538, 585, 588, 590, 595, 599, 653, 692, 752, 761, 766, 767, 769, 770, 777, 780, 782, 789, 792, 795, 809], "sourc": [2, 6, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 35, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 759, 760, 761, 763, 764, 766, 767, 768, 780, 801, 802, 803, 804, 805], "debug_mod": 2, "params_v": [2, 42, 749], "must": [2, 34, 42, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 306, 316, 317, 318, 321, 322, 323, 325, 328, 330, 332, 334, 335, 336, 337, 341, 344, 347, 349, 352, 355, 356, 357, 358, 361, 362, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 407, 408, 411, 412, 413, 414, 417, 419, 420, 421, 422, 423, 426, 427, 428, 431, 432, 434, 436, 437, 438, 439, 441, 445, 447, 448, 449, 450, 452, 454, 455, 456, 458, 463, 464, 465, 466, 467, 469, 470, 473, 480, 481, 482, 483, 489, 497, 498, 502, 503, 504, 509, 510, 512, 519, 533, 534, 570, 571, 572, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 735, 737, 751, 753, 755, 758, 759, 760, 761, 763, 764, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 782, 783, 784, 785, 787, 791, 792, 803, 809], "unless": [2, 50, 54, 59, 73, 77, 141, 272, 320, 333, 338, 352, 585, 588, 593, 634, 765, 770, 779, 795], "explicitli": [2, 593, 626, 627, 643, 731, 732, 733, 763, 764, 765, 767, 769, 772, 773, 776, 777, 778, 779, 781, 782, 787, 795, 802], "nn": [2, 6, 8, 15, 26, 28, 29, 42, 46, 139, 585, 749, 776, 781, 785, 792, 803], "kera": [2, 12, 13, 15, 17, 18, 26, 28, 29, 45, 46, 728, 749, 753, 808], "hk": [2, 9, 11, 28, 42, 46, 749, 792], "trainabl": [2, 13, 15, 19, 25, 26, 28, 29, 46, 728, 732, 733, 736, 749, 772, 788, 790, 791], "transpile_kwarg": 2, "It": [2, 3, 6, 20, 28, 29, 30, 31, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 153, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 303, 304, 316, 321, 322, 330, 332, 334, 335, 336, 337, 341, 347, 349, 352, 355, 356, 357, 358, 361, 362, 367, 368, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 399, 400, 401, 407, 408, 411, 412, 413, 414, 419, 420, 421, 422, 423, 431, 434, 439, 447, 448, 449, 450, 452, 456, 460, 463, 464, 465, 466, 467, 469, 470, 480, 481, 482, 483, 490, 497, 498, 502, 503, 504, 509, 510, 519, 533, 534, 535, 571, 572, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 640, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 671, 672, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 706, 707, 710, 711, 712, 715, 717, 718, 720, 721, 722, 730, 731, 749, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 777, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 800, 802, 803, 805, 806, 807, 808, 809], "alia": [2, 19, 28, 583, 759, 780], "similar": [2, 3, 19, 28, 29, 281, 588, 592, 618, 731, 751, 757, 759, 760, 767, 768, 769, 770, 773, 774, 776, 777, 778, 780, 781, 782, 783, 790, 795, 798, 799, 800, 801, 808], "instantli": [2, 749], "proper": [2, 749, 759, 780], "arrai": [2, 6, 7, 10, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 185, 195, 196, 200, 205, 207, 209, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 537, 538, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 736, 740, 743, 745, 749, 757, 759, 760, 761, 762, 765, 766, 767, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 795, 797, 800, 801, 802, 804, 808, 809], "snippet": [2, 782], "test_fn": [2, 120, 584, 749], "x1": [2, 8, 19, 28, 29, 47, 51, 53, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 89, 96, 97, 101, 152, 162, 178, 185, 205, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 281, 288, 293, 304, 320, 323, 328, 329, 330, 332, 334, 339, 343, 349, 352, 358, 367, 440, 480, 491, 494, 586, 587, 588, 590, 593, 600, 602, 621, 628, 631, 636, 640, 643, 644, 647, 702, 709, 737, 749, 763, 769, 771, 773, 775, 779, 780], "effici": [2, 8, 9, 10, 11, 17, 18, 20, 21, 28, 29, 30, 31, 59, 82, 356, 357, 410, 421, 593, 634, 749, 760, 761, 767, 776, 777, 779, 782, 787, 790, 795, 802, 804, 805], "ret": [2, 13, 15, 28, 29, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 411, 413, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 538, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 729, 733, 735, 740, 745, 749, 769, 770, 772, 773, 778, 779, 780, 781, 783, 787, 792], "entir": [2, 19, 28, 29, 31, 44, 54, 67, 68, 71, 77, 78, 90, 91, 212, 242, 244, 284, 285, 355, 358, 367, 378, 379, 380, 446, 483, 515, 587, 588, 603, 604, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 752, 753, 759, 760, 761, 763, 764, 767, 769, 771, 773, 779, 780, 781, 782, 785, 787, 790, 791, 792, 795, 802, 808, 809], "just": [2, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 42, 44, 54, 59, 67, 82, 94, 146, 315, 349, 356, 414, 585, 593, 603, 634, 713, 731, 749, 752, 753, 760, 761, 763, 765, 768, 769, 770, 771, 772, 776, 777, 779, 780, 781, 782, 787, 789, 790, 795, 802, 803, 808], "line": [2, 9, 11, 17, 18, 21, 22, 25, 28, 29, 31, 32, 43, 44, 289, 588, 749, 753, 760, 763, 764, 765, 768, 770, 771, 773, 780, 782, 785, 788, 789, 790, 791, 793, 805], "request": [2, 9, 11, 25, 28, 29, 42, 45, 54, 203, 362, 470, 587, 749, 753, 754, 759, 771, 774, 783, 785], "jnp": [2, 7, 20, 25, 28, 29, 30, 31, 34, 40, 42, 46, 749, 769, 770, 773, 775, 779, 783, 787, 792], "pil": [2, 6, 8, 9, 10, 11, 25, 28, 29, 43, 44, 45, 749], "jax_kornia": [2, 25, 28, 29, 749], "url": [2, 9, 11, 25, 28, 29, 42, 45, 749], "http": [2, 4, 6, 7, 8, 9, 10, 11, 15, 25, 28, 29, 42, 43, 44, 45, 46, 47, 53, 76, 79, 146, 154, 242, 252, 253, 268, 315, 349, 367, 480, 571, 572, 585, 586, 588, 591, 593, 595, 603, 639, 668, 718, 749, 755, 756, 760, 761, 763, 766, 768, 769, 772, 796], "cocodataset": [2, 9, 11, 25, 28, 29, 45, 749], "org": [2, 9, 11, 25, 28, 29, 42, 44, 45, 47, 53, 76, 79, 146, 154, 242, 252, 253, 268, 315, 349, 367, 480, 571, 572, 585, 586, 588, 591, 593, 595, 603, 639, 668, 718, 749, 772], "train2017": [2, 9, 11, 25, 28, 29, 749], "000000000034": [2, 25, 28, 29, 749], "jpg": [2, 6, 8, 9, 10, 11, 25, 28, 29, 44, 45, 749], "raw_img": [2, 25, 28, 29, 749], "stream": [2, 9, 11, 25, 28, 29, 42, 45, 52, 75, 213, 587, 749, 806], "raw": [2, 6, 8, 9, 10, 11, 25, 28, 29, 42, 45, 46, 71, 749, 772, 803], "format": [2, 3, 25, 26, 28, 29, 40, 42, 43, 44, 52, 55, 67, 70, 71, 72, 75, 112, 162, 196, 355, 366, 396, 476, 502, 582, 586, 587, 590, 592, 603, 604, 605, 606, 608, 609, 610, 612, 613, 713, 723, 724, 749, 761, 762, 768, 769, 770, 771, 772, 773, 780, 783, 787, 789, 790, 798, 800, 802, 803], "img": [2, 6, 8, 10, 25, 28, 29, 42, 43, 44, 46, 749, 790], "transpos": [2, 8, 25, 28, 29, 46, 54, 58, 59, 71, 77, 81, 82, 96, 356, 399, 412, 414, 479, 592, 593, 605, 607, 609, 611, 612, 613, 631, 635, 637, 643, 731, 749, 779, 789, 792], "expand_dim": [2, 25, 28, 29, 44, 46, 61, 84, 592, 595, 614, 749, 780, 787, 790], "255": [2, 8, 25, 28, 29, 42, 43, 44, 46, 58, 77, 81, 233, 588, 614, 749], "version": [2, 6, 25, 31, 42, 43, 44, 47, 48, 54, 77, 94, 104, 290, 324, 326, 352, 367, 485, 489, 570, 588, 590, 593, 626, 627, 740, 749, 751, 752, 753, 760, 761, 766, 768, 769, 772, 779, 781, 787, 808, 809], "enhanc": [2, 25, 28, 29, 749], "5": [2, 6, 7, 8, 9, 10, 13, 21, 24, 25, 26, 28, 29, 40, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 121, 122, 123, 134, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 152, 153, 154, 158, 162, 164, 172, 174, 179, 196, 205, 210, 213, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 319, 322, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 363, 365, 367, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 391, 392, 393, 394, 396, 397, 398, 402, 403, 405, 406, 415, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 436, 437, 440, 441, 442, 445, 446, 451, 452, 453, 454, 455, 458, 459, 464, 465, 468, 470, 471, 473, 478, 480, 481, 482, 483, 484, 485, 487, 489, 495, 496, 497, 498, 501, 502, 503, 504, 506, 509, 510, 512, 515, 517, 518, 519, 533, 534, 538, 548, 549, 550, 551, 553, 557, 570, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 641, 642, 643, 645, 646, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 743, 749, 759, 760, 761, 763, 765, 767, 768, 769, 771, 773, 775, 778, 781, 782, 789, 790, 791], "last": [2, 21, 26, 28, 31, 50, 54, 58, 59, 60, 61, 64, 66, 67, 68, 71, 73, 77, 81, 82, 83, 84, 89, 90, 91, 96, 137, 138, 141, 195, 304, 325, 349, 352, 355, 357, 358, 365, 367, 383, 388, 398, 421, 436, 446, 448, 473, 481, 482, 585, 587, 592, 593, 594, 595, 600, 602, 603, 604, 617, 618, 621, 624, 636, 645, 647, 651, 652, 654, 657, 660, 661, 662, 664, 698, 699, 707, 709, 710, 711, 712, 721, 722, 731, 740, 749, 753, 761, 763, 765, 766, 769, 771, 779, 781, 782, 785, 787, 795, 802], "least": [2, 28, 53, 54, 59, 76, 77, 239, 257, 272, 355, 358, 367, 382, 387, 426, 427, 428, 435, 437, 480, 588, 593, 600, 631, 701, 749, 761, 764, 768, 769, 770, 771, 776, 779, 782], "support": [2, 7, 19, 28, 31, 43, 52, 54, 55, 59, 75, 77, 78, 82, 146, 165, 169, 191, 198, 213, 222, 239, 246, 267, 268, 272, 282, 297, 315, 331, 347, 349, 352, 355, 356, 390, 403, 495, 507, 516, 519, 520, 537, 551, 585, 586, 587, 588, 590, 592, 593, 616, 625, 626, 627, 630, 632, 641, 648, 735, 740, 743, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 770, 771, 772, 775, 776, 778, 779, 781, 782, 783, 785, 786, 787, 789, 790, 792, 796, 797, 799, 801, 802, 805, 807, 808, 809], "timm": [2, 12, 13, 17, 28, 29, 749], "pretrain": [2, 7, 9, 13, 14, 15, 28, 29, 47, 749], "mlp_encod": [2, 13, 28, 29, 749], "create_model": [2, 13, 28, 29, 749], "mixer_b16_224": [2, 13, 28, 29, 749], "num_class": [2, 6, 13, 15, 28, 29, 42, 44, 46, 749, 792], "randn": [2, 13, 15, 28, 29, 749], "224": [2, 6, 10, 13, 15, 28, 29, 42, 43, 45, 749], "encod": [2, 7, 13, 15, 28, 29, 42, 44, 55, 60, 78, 83, 506, 590, 594, 650, 749, 752, 790], "__init__": [2, 6, 8, 13, 15, 28, 29, 40, 41, 42, 44, 71, 93, 94, 95, 96, 97, 99, 100, 727, 730, 731, 732, 733, 734, 735, 736, 739, 740, 743, 744, 747, 749, 759, 764, 765, 769, 773, 780, 783, 787, 789, 790, 791, 792], "self": [2, 6, 8, 13, 15, 28, 29, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 592, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 735, 743, 749, 761, 764, 767, 773, 780, 781, 787, 789, 790, 791, 792], "1000": [2, 6, 9, 13, 28, 29, 42, 43, 44, 45, 47, 50, 73, 138, 585, 749, 790], "super": [2, 3, 6, 8, 13, 15, 28, 29, 42, 54, 77, 356, 404, 749, 773, 787, 790, 791, 792], "fc": [2, 15, 42, 749, 791], "linear": [2, 6, 15, 27, 28, 29, 40, 41, 42, 44, 47, 54, 55, 58, 70, 77, 78, 81, 104, 106, 108, 109, 112, 298, 299, 301, 302, 335, 347, 352, 355, 358, 367, 390, 446, 489, 506, 529, 582, 590, 592, 597, 618, 640, 679, 730, 731, 749, 767, 772, 776, 777, 779, 780, 782, 785, 787, 790, 791, 792, 800, 801, 802, 805], "output_s": [2, 54, 77, 355, 369, 370, 371, 731, 749], "with_bia": [2, 8, 731, 749, 791], "__call__": [2, 42, 731, 732, 733, 749], "_forward_classifi": [2, 749], "standard": [2, 53, 59, 62, 63, 67, 76, 85, 86, 90, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 356, 367, 417, 480, 570, 585, 586, 588, 590, 593, 595, 598, 599, 600, 601, 602, 603, 604, 620, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 654, 656, 657, 658, 660, 661, 663, 664, 668, 691, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 734, 743, 749, 750, 762, 763, 764, 767, 769, 772, 775, 779, 782, 783, 795, 798, 800, 801, 804, 805, 807], "rng_kei": [2, 9, 11, 28, 749], "random": [2, 9, 11, 13, 15, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 42, 44, 45, 54, 58, 71, 77, 81, 313, 314, 349, 356, 406, 415, 418, 466, 467, 468, 469, 470, 592, 615, 692, 693, 694, 695, 696, 697, 730, 743, 749, 759, 770, 781, 782, 783, 792, 794, 802], "prngkei": [2, 9, 11, 21, 22, 28, 29, 42, 749, 792], "42": [2, 9, 11, 21, 22, 28, 29, 40, 42, 43, 48, 63, 70, 79, 86, 112, 233, 355, 376, 386, 571, 575, 582, 588, 591, 593, 598, 599, 603, 632, 636, 691, 692, 693, 694, 695, 696, 711, 713, 749, 787, 792], "uniform": [2, 20, 21, 22, 23, 24, 28, 29, 30, 31, 33, 34, 35, 42, 54, 63, 77, 86, 367, 483, 599, 692, 693, 695, 730, 749, 791, 809], "kei": [2, 9, 21, 22, 28, 29, 44, 46, 49, 54, 58, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 365, 378, 379, 380, 419, 420, 422, 423, 431, 452, 455, 460, 462, 463, 464, 465, 467, 473, 480, 481, 482, 483, 491, 492, 494, 495, 497, 498, 499, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 590, 592, 596, 597, 606, 607, 608, 609, 615, 616, 618, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 669, 670, 675, 681, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 728, 729, 731, 735, 749, 766, 767, 768, 776, 779, 780, 781, 782, 790, 796, 802, 805, 809], "dtype": [2, 6, 8, 10, 15, 21, 23, 24, 40, 43, 50, 51, 54, 55, 58, 59, 63, 64, 67, 73, 74, 76, 77, 78, 81, 82, 86, 87, 90, 96, 99, 100, 101, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 207, 273, 303, 304, 305, 306, 307, 308, 309, 313, 314, 319, 322, 324, 338, 349, 352, 355, 362, 367, 376, 386, 398, 466, 467, 468, 469, 470, 480, 481, 482, 483, 486, 488, 489, 506, 507, 508, 510, 519, 528, 555, 585, 586, 587, 590, 592, 593, 596, 597, 599, 600, 602, 603, 604, 608, 615, 632, 648, 671, 672, 693, 694, 695, 698, 699, 700, 709, 710, 711, 712, 717, 719, 721, 722, 730, 731, 733, 734, 736, 737, 749, 757, 763, 765, 769, 770, 771, 773, 776, 777, 779, 780, 781, 782, 783, 787, 789], "float32": [2, 6, 8, 10, 13, 15, 20, 21, 40, 42, 43, 44, 50, 51, 55, 58, 73, 74, 78, 81, 90, 138, 141, 143, 148, 149, 150, 154, 158, 159, 162, 163, 164, 165, 168, 171, 172, 174, 179, 182, 188, 252, 279, 319, 328, 349, 352, 355, 367, 376, 386, 398, 483, 519, 555, 585, 586, 588, 590, 592, 593, 596, 608, 610, 611, 614, 639, 641, 642, 648, 671, 749, 769, 771, 781, 782, 783], "forward_classifi": [2, 749], "param": [2, 9, 11, 28, 42, 43, 44, 46, 71, 78, 97, 492, 509, 510, 590, 737, 749, 792], "init": [2, 9, 11, 28, 42, 44, 54, 77, 356, 406, 415, 418, 730, 749, 763, 792], "rng": [2, 9, 11, 28, 42, 749, 792], "mention": [2, 13, 15, 28, 29, 34, 752, 759, 760, 761, 764, 765, 771, 775, 776, 779, 780, 782, 785, 802], "abov": [2, 19, 24, 28, 29, 34, 35, 50, 53, 54, 59, 63, 70, 76, 77, 82, 86, 112, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 302, 304, 315, 316, 322, 325, 347, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 388, 391, 392, 393, 394, 398, 403, 404, 446, 480, 483, 509, 513, 515, 517, 519, 556, 580, 582, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 693, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 749, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 785, 787, 789, 790, 791, 792, 802, 807], "exactli": [2, 17, 21, 31, 40, 41, 45, 289, 588, 751, 753, 767, 768, 769, 770, 771, 773, 782, 785], "wai": [2, 17, 18, 19, 22, 24, 28, 32, 34, 40, 94, 749, 751, 752, 756, 758, 760, 763, 764, 765, 766, 768, 769, 770, 779, 780, 781, 782, 785, 789, 790, 791, 792, 795, 796, 804, 808, 809], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 19, 782], "rough": 2, "edg": [2, 46, 54, 61, 77, 84, 310, 349, 355, 358, 367, 390, 446, 483, 595, 653, 655, 668, 763, 782, 802, 804, 808], "These": [2, 35, 54, 77, 356, 358, 367, 403, 445, 480, 592, 593, 618, 625, 626, 749, 751, 752, 753, 755, 758, 759, 760, 761, 763, 767, 769, 771, 772, 775, 776, 779, 780, 782, 787, 788, 790, 791, 792, 795, 797, 802, 806, 808, 809], "subclass": [2, 19, 28, 29, 777, 780, 785], "within": [2, 13, 15, 19, 28, 29, 49, 54, 77, 121, 320, 333, 352, 355, 391, 392, 393, 426, 427, 428, 585, 599, 695, 733, 749, 759, 761, 764, 768, 769, 780, 781, 782, 791, 795, 798, 799, 803], "sequenti": [2, 6, 8, 26, 28, 29, 44, 749, 766, 767, 791], "more": [2, 13, 16, 17, 19, 20, 21, 24, 26, 28, 29, 30, 31, 40, 42, 43, 44, 48, 53, 54, 59, 61, 65, 70, 76, 77, 82, 84, 88, 104, 106, 109, 112, 121, 152, 244, 246, 262, 277, 290, 345, 353, 356, 357, 358, 399, 400, 410, 413, 421, 426, 427, 428, 431, 452, 537, 582, 585, 586, 588, 590, 593, 595, 601, 624, 630, 631, 634, 637, 639, 641, 648, 657, 664, 703, 704, 705, 706, 727, 749, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 800, 801, 802, 803, 804, 805, 808, 809], "complex": [2, 26, 28, 29, 42, 48, 53, 54, 59, 70, 74, 76, 77, 82, 104, 106, 109, 112, 142, 143, 157, 171, 180, 186, 219, 220, 221, 222, 223, 224, 225, 228, 236, 237, 239, 240, 242, 244, 252, 253, 254, 255, 256, 260, 261, 262, 263, 272, 274, 277, 279, 282, 283, 284, 285, 286, 289, 290, 322, 352, 355, 356, 367, 377, 388, 398, 399, 403, 404, 405, 412, 414, 488, 548, 549, 582, 585, 586, 588, 590, 593, 600, 603, 625, 626, 627, 632, 639, 641, 643, 645, 648, 701, 717, 719, 727, 755, 759, 766, 769, 771, 777, 780, 782, 783, 785, 790, 791, 792, 795, 797, 798, 800, 802, 804, 808, 809], "should": [2, 3, 7, 45, 48, 50, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 70, 71, 73, 76, 77, 78, 79, 81, 82, 84, 86, 87, 89, 90, 92, 94, 96, 97, 107, 111, 120, 139, 141, 144, 145, 153, 178, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 304, 316, 330, 334, 335, 336, 337, 341, 346, 347, 349, 352, 354, 355, 356, 357, 358, 362, 367, 378, 379, 380, 382, 387, 406, 415, 418, 422, 445, 446, 466, 467, 480, 481, 482, 496, 519, 570, 572, 575, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 660, 676, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 711, 712, 713, 714, 715, 716, 717, 719, 720, 727, 728, 729, 730, 731, 733, 734, 735, 736, 743, 750, 752, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 798, 799, 802, 804, 809], "util": [2, 8, 26, 42, 45, 54, 77, 197, 356, 416, 587, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 755, 760, 766, 770, 773, 776, 779, 782, 783, 787, 800, 808, 809], "requir": [2, 23, 33, 42, 43, 44, 47, 53, 54, 71, 76, 77, 273, 286, 290, 356, 358, 403, 404, 446, 588, 593, 595, 625, 626, 627, 664, 728, 755, 756, 759, 760, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 777, 780, 781, 782, 783, 785, 787, 789, 795, 802, 808], "state": [2, 16, 27, 42, 58, 81, 186, 187, 188, 189, 190, 272, 558, 560, 563, 565, 566, 586, 588, 590, 592, 617, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 749, 752, 757, 760, 766, 769, 770, 772, 773, 774, 775, 780, 782, 786, 787, 788, 790, 794, 808, 809], "mean": [2, 6, 9, 10, 11, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 43, 44, 54, 55, 58, 60, 61, 63, 67, 69, 71, 73, 77, 78, 81, 83, 84, 86, 90, 92, 94, 134, 212, 324, 352, 355, 356, 357, 358, 361, 362, 367, 383, 388, 401, 410, 419, 420, 421, 422, 423, 431, 436, 446, 460, 462, 467, 486, 487, 503, 573, 574, 576, 581, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 599, 603, 607, 609, 610, 611, 614, 615, 623, 650, 660, 669, 670, 671, 678, 693, 694, 730, 731, 734, 749, 760, 761, 762, 763, 765, 767, 769, 770, 771, 776, 778, 779, 780, 782, 783, 785, 787, 789, 790, 791, 792, 794, 795, 797, 799, 802], "transformed_with_st": 2, "map": [2, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 352, 355, 378, 379, 380, 419, 420, 422, 423, 426, 427, 428, 431, 452, 454, 455, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 570, 575, 580, 590, 597, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 679, 680, 684, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 764, 767, 769, 775, 776, 780, 782, 783, 790, 794, 795, 797, 803], "convolut": [2, 26, 54, 58, 77, 81, 355, 375, 393, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731, 800, 802], "c": [2, 19, 28, 34, 43, 44, 50, 54, 55, 56, 58, 61, 67, 73, 74, 76, 77, 78, 79, 81, 82, 84, 88, 90, 94, 110, 122, 123, 138, 141, 164, 167, 222, 233, 239, 240, 260, 261, 272, 275, 283, 290, 355, 356, 358, 361, 367, 369, 370, 371, 382, 387, 399, 400, 402, 403, 405, 413, 426, 427, 428, 436, 460, 461, 462, 482, 494, 502, 503, 504, 505, 513, 517, 518, 556, 571, 572, 575, 577, 578, 579, 582, 585, 586, 588, 590, 591, 592, 593, 595, 597, 600, 601, 603, 606, 607, 608, 609, 610, 611, 625, 627, 629, 660, 664, 672, 675, 679, 680, 681, 683, 684, 689, 690, 701, 706, 712, 713, 718, 720, 734, 743, 750, 752, 753, 754, 760, 762, 765, 766, 767, 771, 776, 778, 786, 787, 788, 790, 795, 797, 798, 802, 806, 807, 809], "h": [2, 8, 54, 55, 58, 77, 78, 81, 355, 374, 375, 392, 393, 502, 504, 590, 592, 597, 605, 608, 609, 610, 611, 612, 613, 614, 675, 679, 681, 684, 689, 762, 766, 767, 768, 798], "w": [2, 8, 43, 44, 54, 55, 56, 58, 71, 76, 77, 78, 79, 81, 94, 266, 331, 346, 352, 354, 355, 356, 373, 374, 375, 377, 391, 392, 393, 394, 405, 418, 479, 502, 504, 548, 571, 572, 573, 575, 577, 578, 579, 590, 591, 592, 597, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 678, 749, 762, 778, 787, 790, 791], "bigger": 2, "permut": [2, 8, 10, 42, 61, 84, 96, 365, 472, 595, 658, 665], "infer": [2, 5, 9, 11, 17, 21, 31, 33, 34, 43, 45, 47, 50, 54, 55, 58, 61, 73, 77, 78, 81, 84, 121, 123, 131, 135, 136, 140, 143, 148, 157, 158, 159, 160, 161, 303, 304, 362, 468, 513, 547, 585, 586, 590, 592, 595, 615, 660, 740, 762, 765, 769, 770, 782, 787, 792, 800, 801, 804, 806], "correct": [2, 9, 13, 15, 24, 34, 40, 42, 44, 67, 90, 185, 356, 416, 586, 595, 603, 653, 718, 720, 749, 759, 761, 762, 767, 768, 769, 770, 773, 775, 776, 779, 781, 782], "mind": [2, 4, 13, 15, 19, 25, 28, 32, 759, 764, 765, 767, 782, 796], "well": [2, 28, 29, 42, 43, 44, 78, 357, 421, 515, 590, 593, 640, 749, 756, 759, 761, 766, 768, 769, 773, 779, 780, 781, 782, 791, 792, 794, 801, 802, 803, 807], "hf": 2, "tf_model": 2, "tf_input": 2, "repo": [3, 13, 42, 751, 755, 758, 761, 763, 766, 768, 769, 781, 782], "hold": [3, 54, 55, 59, 67, 77, 82, 90, 94, 320, 333, 338, 352, 367, 432, 458, 481, 482, 487, 533, 534, 590, 593, 603, 632, 712, 749, 790, 803], "jupyt": [3, 752, 804], "exampl": [3, 9, 11, 19, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 411, 413, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 445, 446, 451, 452, 453, 454, 455, 457, 458, 459, 463, 464, 465, 468, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 740, 743, 747, 753, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 779, 780, 782, 783, 787, 789, 790, 791, 792, 794, 795, 799, 800, 803, 805, 808, 809], "tab": [3, 759, 760, 768, 790], "web": 3, "relev": [3, 50, 73, 138, 585, 735, 749, 752, 759, 760, 761, 764, 767, 768, 769, 771, 777, 778, 781, 782, 790, 796, 800, 807, 808], "task": [3, 45, 596, 669, 670, 671, 749, 754, 761, 780, 781, 794, 802, 808, 809], "avil": 3, "discuss": [3, 753, 759, 761, 766, 769, 770, 779, 780, 782, 785, 788, 789, 790, 795, 798, 803], "comprehens": [3, 17, 761, 763], "possibl": [3, 6, 34, 50, 54, 73, 77, 84, 94, 123, 246, 289, 303, 349, 355, 357, 358, 377, 419, 426, 427, 428, 432, 434, 436, 437, 438, 445, 458, 529, 588, 590, 592, 603, 615, 656, 657, 658, 660, 662, 663, 665, 667, 714, 716, 746, 749, 752, 754, 759, 760, 761, 763, 766, 767, 769, 771, 772, 774, 776, 778, 779, 780, 781, 782, 785, 787, 790, 794, 795, 800, 802, 808], "easi": [3, 28, 29, 42, 752, 760, 761, 764, 765, 767, 776, 778, 781, 782, 785, 800, 802, 808, 809], "attract": 3, "visual": [3, 46, 747, 749, 760, 780, 782, 795, 802, 804, 807], "nice": [3, 753, 782, 802], "gener": [3, 8, 17, 21, 28, 29, 31, 34, 42, 44, 46, 47, 50, 53, 54, 58, 63, 69, 73, 76, 77, 81, 86, 92, 121, 137, 138, 146, 154, 239, 242, 252, 253, 268, 272, 281, 303, 306, 310, 311, 312, 313, 314, 315, 349, 356, 362, 367, 416, 468, 480, 585, 586, 588, 592, 593, 595, 599, 603, 615, 639, 643, 646, 668, 692, 693, 695, 696, 718, 735, 743, 759, 760, 761, 762, 763, 764, 766, 769, 770, 771, 772, 773, 775, 776, 779, 780, 781, 783, 786, 787, 789, 791, 792, 794, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808], "tone": [3, 7], "emoji": [3, 759], "thing": [3, 26, 40, 42, 743, 751, 752, 753, 758, 759, 760, 761, 765, 780, 782, 785, 789, 790, 802], "seriou": 3, "given": [3, 6, 19, 28, 41, 54, 55, 60, 61, 63, 71, 77, 78, 79, 83, 84, 86, 94, 96, 97, 121, 130, 137, 138, 157, 158, 159, 160, 161, 173, 178, 197, 206, 208, 210, 211, 212, 214, 218, 291, 317, 320, 324, 325, 331, 332, 333, 335, 338, 349, 352, 355, 356, 357, 358, 361, 362, 367, 373, 374, 375, 376, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 398, 404, 407, 420, 421, 422, 423, 424, 425, 433, 434, 435, 442, 444, 455, 459, 463, 464, 465, 466, 467, 468, 469, 470, 480, 481, 482, 483, 488, 510, 533, 534, 544, 571, 572, 575, 577, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 649, 650, 651, 652, 653, 656, 657, 658, 659, 661, 662, 666, 667, 679, 680, 689, 690, 693, 694, 695, 697, 709, 710, 711, 712, 727, 728, 730, 731, 733, 734, 735, 736, 737, 743, 752, 753, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 788, 789, 791, 794, 799, 804, 805, 808, 809], "intern": [3, 71, 99, 100, 101, 597, 672, 682, 683, 730, 731, 732, 733, 734, 736, 764, 767, 770, 772, 779, 781, 782, 784], "releas": [3, 43, 753, 759, 760, 769, 783, 785, 795, 802, 808], "corner": [3, 54, 77, 355, 390, 760, 761, 780], "anybodi": 3, "shortli": 3, "worri": [3, 28, 29, 759, 760, 774], "about": [3, 17, 18, 19, 22, 24, 26, 28, 29, 32, 43, 44, 51, 74, 164, 167, 586, 749, 753, 756, 758, 759, 760, 761, 762, 763, 766, 768, 769, 770, 774, 775, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 803, 804, 807], "style": [3, 42, 44, 358, 446, 600, 701, 761, 774, 802], "stori": 3, "anyon": [3, 749, 752, 754, 761, 768, 795, 808], "question": [3, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 749, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794, 795], "ping": 3, "me": [3, 761], "guillermo": 3, "commun": [3, 43, 752, 754, 759, 760, 761, 795, 801, 802, 804], "ux": 3, "channel": [3, 26, 44, 54, 55, 58, 77, 78, 81, 96, 97, 355, 361, 378, 379, 380, 390, 460, 461, 462, 502, 506, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 727, 728, 730, 731, 733, 734, 735, 736, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785], "ensur": [3, 13, 15, 26, 54, 55, 77, 78, 355, 356, 391, 392, 393, 416, 519, 590, 749, 759, 760, 761, 764, 769, 770, 771, 773, 774, 775, 777, 779, 780, 781, 782, 783, 796, 802], "across": [3, 40, 64, 71, 78, 87, 96, 210, 211, 239, 246, 272, 290, 361, 462, 494, 515, 550, 587, 588, 590, 592, 597, 600, 615, 618, 678, 698, 699, 731, 759, 763, 769, 771, 773, 775, 776, 778, 782, 785, 800, 802, 807], "templat": [3, 749, 766, 772, 782], "asset": [3, 797], "01_templat": 3, "ipynb": 3, "firstli": [3, 20, 21, 24, 30, 31, 35, 40, 764, 769, 771, 772, 773, 776, 777, 779, 785, 790, 798, 808], "updat": [3, 7, 8, 9, 11, 22, 28, 29, 42, 44, 49, 55, 56, 71, 78, 79, 94, 519, 533, 534, 537, 538, 560, 571, 572, 575, 577, 578, 579, 590, 591, 592, 596, 597, 615, 617, 669, 670, 671, 679, 680, 684, 689, 690, 728, 734, 735, 740, 749, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 775, 777, 778, 780, 781, 782, 785, 787, 789, 790, 792, 795], "name": [3, 9, 28, 29, 40, 42, 43, 44, 54, 59, 65, 69, 82, 88, 92, 246, 356, 358, 403, 455, 457, 492, 493, 588, 590, 593, 601, 625, 626, 630, 638, 639, 641, 646, 703, 704, 705, 733, 740, 742, 759, 760, 761, 765, 766, 767, 768, 771, 772, 773, 775, 780, 781, 782, 783, 784, 785, 787, 790, 792, 802], "match": [3, 51, 54, 71, 74, 77, 151, 246, 281, 323, 325, 352, 355, 358, 398, 430, 451, 454, 529, 586, 588, 590, 593, 626, 627, 632, 648, 757, 759, 764, 766, 767, 771, 781, 803, 808], "topic": [3, 17, 20, 21, 22, 30, 31, 32, 33, 34, 35, 749, 777, 789, 802], "Then": [3, 47, 592, 618, 756, 759, 760, 761, 765, 766, 768, 774, 777, 779, 782, 783, 795], "place": [3, 42, 49, 50, 53, 54, 55, 59, 61, 71, 73, 75, 76, 77, 78, 84, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 303, 304, 307, 315, 316, 320, 322, 325, 326, 330, 332, 333, 334, 335, 337, 338, 339, 343, 344, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 436, 446, 451, 467, 480, 483, 487, 495, 503, 504, 509, 513, 515, 517, 518, 519, 533, 537, 551, 556, 560, 580, 585, 586, 587, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 733, 735, 749, 755, 758, 761, 762, 763, 766, 767, 768, 770, 771, 772, 775, 776, 780, 781, 782, 783, 785, 792, 797, 804], "folder": [3, 44, 749, 755, 760, 761, 763, 766, 768, 776, 780, 782, 783, 784], "next": [3, 8, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 42, 44, 54, 77, 164, 330, 334, 339, 343, 352, 586, 730, 732, 733, 735, 753, 755, 759, 760, 761, 765, 769, 771, 772, 774, 777, 788, 789, 790, 802, 804], "edit": [3, 755, 759, 760, 761, 774], "titl": [3, 14, 16, 27, 43, 46, 749, 759, 761, 766], "descript": [3, 4, 37, 38, 39, 44, 47, 50, 53, 54, 59, 76, 77, 82, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 446, 480, 483, 509, 513, 515, 517, 556, 580, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 759, 761, 772, 778, 779], "render": [3, 766, 772], "webpag": [3, 17], "behind": [3, 19, 28, 749, 762, 775, 782, 786, 788], "exist": [3, 19, 28, 29, 42, 43, 44, 47, 50, 54, 55, 71, 73, 77, 78, 84, 123, 358, 426, 427, 431, 432, 434, 436, 437, 438, 445, 458, 501, 537, 590, 595, 654, 656, 657, 658, 660, 662, 663, 665, 667, 735, 737, 749, 751, 752, 759, 760, 763, 765, 770, 771, 772, 776, 777, 779, 780, 782, 785, 787, 795, 797, 800, 802, 805, 808], "cell": [3, 4, 6, 7, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 43, 58, 81, 592, 617, 731, 768, 787], "h2": [3, 4, 14, 16, 27], "tag": [3, 4, 14, 16, 27, 760, 761], "section": [3, 4, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 48, 54, 65, 77, 106, 355, 358, 388, 398, 432, 441, 458, 601, 703, 704, 705, 706, 749, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 785, 786, 790, 791, 798, 805, 808], "h3": [3, 4, 14, 16, 27], "subsect": [3, 4, 14, 16, 27, 759, 760, 761, 763, 768], "step": [3, 4, 14, 15, 16, 27, 28, 29, 40, 42, 43, 44, 54, 56, 73, 77, 79, 121, 137, 358, 440, 571, 572, 575, 577, 578, 579, 585, 591, 596, 669, 670, 671, 729, 735, 749, 753, 755, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 778, 780, 782, 787, 790, 791, 792, 794, 802], "explan": [3, 4, 14, 16, 27, 759, 760, 761, 767, 772, 775, 780, 783, 789], "go": [3, 7, 13, 15, 19, 26, 29, 34, 49, 54, 81, 355, 397, 597, 672, 673, 682, 683, 684, 749, 754, 755, 757, 759, 760, 761, 762, 765, 766, 768, 769, 771, 774, 780, 781, 782, 783, 786, 790, 795, 798, 802, 803, 807, 809], "text": [3, 7, 42, 54, 55, 356, 414, 759, 761, 766, 771, 772], "paragraph": [3, 4, 14, 16, 27, 766], "p": [3, 4, 14, 16, 27, 40, 54, 55, 59, 77, 78, 82, 139, 243, 356, 361, 400, 465, 497, 498, 585, 588, 590, 593, 597, 632, 648, 680, 731, 749, 760, 761, 762], "toctre": [3, 766], "index": [3, 42, 43, 44, 47, 50, 54, 55, 61, 64, 65, 66, 71, 73, 77, 78, 84, 87, 88, 89, 132, 139, 208, 304, 311, 312, 317, 318, 349, 355, 356, 358, 363, 365, 367, 377, 383, 407, 409, 414, 430, 436, 439, 447, 449, 451, 454, 456, 471, 472, 481, 489, 492, 510, 512, 533, 534, 538, 583, 585, 587, 590, 595, 597, 600, 601, 602, 660, 664, 674, 675, 676, 679, 680, 681, 687, 689, 698, 699, 701, 703, 704, 705, 707, 709, 731, 745, 767, 768, 773, 776, 777, 778, 779, 781, 782, 789, 802], "rst": 3, "left": [3, 21, 31, 42, 43, 54, 59, 64, 66, 77, 82, 87, 89, 115, 116, 231, 246, 324, 338, 345, 352, 353, 355, 356, 358, 367, 389, 403, 406, 410, 416, 417, 437, 447, 485, 486, 487, 488, 489, 502, 584, 588, 590, 593, 600, 602, 625, 626, 632, 641, 646, 698, 709, 760, 761, 763, 766, 768, 769, 771], "mai": [3, 52, 53, 54, 59, 65, 66, 75, 76, 82, 89, 96, 97, 121, 133, 213, 239, 240, 246, 251, 259, 267, 268, 272, 273, 275, 290, 383, 501, 537, 585, 587, 588, 590, 593, 601, 602, 603, 639, 648, 703, 704, 705, 706, 707, 710, 714, 715, 716, 718, 753, 758, 759, 760, 761, 763, 767, 768, 769, 773, 776, 777, 778, 780, 781, 782, 785, 788, 789, 791, 809], "grid": [3, 44, 50, 139, 307, 349, 585, 771, 782, 794], "card": [3, 54, 77, 342, 352, 807], "document": [3, 19, 28, 61, 246, 570, 588, 590, 664, 754, 756, 758, 761, 766, 768, 769, 771, 779, 780, 781, 782, 790, 792], "sphinx": [3, 756, 766], "design": [3, 19, 28, 77, 246, 303, 308, 309, 349, 588, 749, 751, 752, 762, 766, 768, 769, 779, 780, 781, 785, 787, 789, 795, 798, 800, 802, 805, 806, 807], "websit": [3, 46, 752, 760, 763], "alreadi": [4, 20, 24, 26, 28, 29, 34, 42, 44, 47, 54, 59, 71, 77, 82, 235, 245, 272, 282, 292, 358, 367, 427, 428, 446, 478, 487, 588, 593, 628, 636, 743, 749, 759, 760, 761, 765, 767, 769, 770, 775, 779, 780, 785, 795, 796, 802, 804, 809], "instal": [4, 8, 9, 11, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 44, 45, 46, 47, 755, 756, 760, 761, 765, 766, 774, 794], "skip": [4, 7, 44, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 356, 358, 378, 379, 380, 407, 409, 414, 419, 420, 422, 423, 426, 427, 428, 431, 447, 450, 452, 454, 455, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 597, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 743, 766, 776, 782], "colab": [4, 7, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 42, 44, 46, 47], "do": [4, 6, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 40, 42, 44, 54, 55, 71, 77, 78, 239, 272, 281, 358, 367, 431, 487, 489, 519, 588, 590, 597, 672, 679, 682, 683, 684, 689, 749, 753, 757, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 787, 789, 790, 791, 792, 795, 797, 803, 808, 809], "packag": [4, 6, 8, 10, 13, 29, 42, 43, 44, 47, 742, 749, 755, 757, 760, 768, 780, 795, 796, 802, 804], "click": [4, 6, 44, 759, 760, 761, 768, 772, 774, 788], "runtim": [4, 6, 7, 8, 9, 10, 11, 21, 28, 31, 42, 43, 762, 776, 782, 785, 802], "restart": [4, 6, 7, 8, 10, 42, 43, 760], "pip": [4, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 755, 757, 760, 766, 774, 794], "q": [4, 6, 7, 8, 9, 10, 11, 42, 43, 44, 54, 58, 59, 77, 81, 82, 344, 352, 356, 367, 403, 489, 592, 593, 597, 619, 625, 626, 638, 680, 760, 761, 762, 781, 795], "git": [4, 6, 7, 8, 10, 28, 42, 43, 44, 45, 749, 755, 756, 758, 760, 761, 763, 766, 768, 774, 782, 796], "clone": [4, 6, 8, 10, 28, 42, 44, 45, 749, 755, 756, 761, 796], "com": [4, 6, 7, 8, 10, 15, 28, 42, 43, 44, 45, 46, 749, 755, 756, 760, 761, 763, 766, 768, 769, 796], "unifyai": [4, 6, 8, 10, 28, 42, 43, 44, 45, 46, 749, 755, 756, 760, 761, 766, 796], "depth": [4, 6, 8, 10, 43, 50, 54, 58, 73, 77, 81, 141, 355, 358, 390, 433, 502, 514, 585, 590, 592, 597, 610, 611, 684, 729, 733, 761, 768, 790, 791, 792, 794, 796], "repositori": [4, 6, 8, 10, 753, 755, 756, 760, 761, 762, 763, 766], "cd": [4, 6, 8, 10, 28, 45, 749, 755, 756, 760, 761, 796], "classif": [5, 6, 10, 17, 42, 749, 802], "acceler": [5, 17, 749, 780, 800, 804, 805, 806, 807], "faster": [5, 6, 9, 11, 17, 28, 29, 45, 47, 54, 59, 77, 82, 356, 417, 593, 641, 758, 797, 804, 807], "mmpretrain": [5, 17], "segment": [5, 17, 54, 77, 317, 318, 349, 766, 771], "unet": [5, 17], "alexnet": [5, 17], "how": [5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 46, 47, 48, 53, 54, 70, 76, 77, 104, 106, 109, 112, 239, 272, 290, 358, 430, 451, 454, 582, 588, 727, 729, 730, 731, 732, 733, 749, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 783, 784, 785, 786, 788, 789, 790, 791, 792, 794, 795, 798, 802], "three": [6, 7, 17, 23, 33, 34, 44, 54, 139, 303, 349, 358, 428, 585, 760, 761, 767, 768, 769, 771, 780, 782, 785, 786, 787, 803, 808], "major": [6, 7, 600, 701, 752, 769, 770, 781, 782, 795, 799, 802], "sinc": [6, 8, 10, 25, 26, 28, 29, 42, 44, 54, 77, 352, 749, 752, 760, 761, 763, 764, 765, 767, 768, 769, 770, 773, 779, 780, 795, 802, 808], "notebook": [6, 7, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 34, 43, 733], "sure": [6, 8, 9, 10, 11, 28, 42, 759, 760, 761, 763, 768, 773, 780, 781, 782, 785, 796], "gpu": [6, 7, 8, 9, 10, 11, 42, 44, 46, 47, 195, 197, 198, 201, 204, 206, 208, 210, 211, 214, 216, 218, 587, 749, 760, 761, 768, 770, 789, 796, 800, 802, 805, 806, 807], "dm": [6, 7, 8, 9, 11, 28, 29, 40, 42], "exit": [6, 8, 10, 25, 28, 29, 770], "imagenet": [6, 15, 43, 45, 749], "wget": [6, 8, 10, 42, 43, 46, 760], "githubusercont": [6, 8, 10, 42, 46], "hub": [6, 8, 10, 42, 45, 47], "master": [6, 8, 10, 20, 21, 22, 30, 31, 32, 33, 34, 35, 42, 44, 45, 46, 768, 802], "imagenet_class": [6, 10], "txt": [6, 10, 43, 55, 760, 763, 766], "r": [6, 10, 42, 43, 54, 59, 71, 77, 82, 94, 331, 346, 352, 354, 573, 591, 593, 595, 638, 667, 760, 761, 762, 778, 781], "f": [6, 7, 9, 10, 28, 29, 41, 42, 44, 54, 61, 77, 84, 297, 310, 347, 349, 358, 436, 595, 597, 660, 675, 679, 680, 681, 684, 689, 690, 749, 753, 754, 761, 762, 767, 768, 787, 790, 798], "categori": [6, 10, 759, 763, 764, 767, 769, 773, 780, 783, 786], "strip": [6, 10, 21, 31, 752], "readlin": [6, 10, 43], "filenam": [6, 8, 10, 28, 29, 42, 44, 47, 55, 733, 739, 790], "torchvis": [6, 9, 10, 42, 753], "np": [6, 7, 8, 9, 11, 13, 15, 20, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 40, 41, 42, 43, 44, 45, 47, 50, 53, 54, 76, 77, 78, 122, 123, 129, 140, 175, 252, 256, 355, 356, 382, 387, 399, 548, 585, 586, 588, 590, 597, 678, 740, 743, 749, 759, 764, 769, 770, 773, 775, 779, 780, 781, 782, 783, 785, 787, 789, 790, 792, 797], "filterwarn": [6, 7], "ignor": [6, 7, 41, 49, 50, 54, 71, 77, 139, 355, 356, 358, 378, 379, 380, 404, 448, 449, 453, 585, 592, 593, 597, 618, 630, 683, 684, 735, 766, 768, 771, 782, 795, 808], "resiz": [6, 8, 9, 10, 42, 43, 54, 77, 355, 390, 785], "256": [6, 8, 10, 53, 78, 282, 283, 549, 592, 607, 609, 611], "centercrop": [6, 10], "totensor": [6, 9, 10, 42], "485": [6, 10, 42], "456": [6, 10, 42, 782], "406": [6, 10, 42, 54, 77, 376, 497, 590], "std": [6, 9, 10, 11, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 43, 58, 63, 67, 81, 86, 90, 362, 467, 592, 599, 603, 607, 609, 610, 611, 614, 693, 694, 749, 771], "229": [6, 10, 42, 278, 588], "225": [6, 10, 42, 44, 233, 588], "torch_img": [6, 8, 10], "unsqueez": [6, 8, 9, 10], "ipython": [6, 8, 10, 28, 29, 47], "displai": [6, 8, 10, 25, 28, 29, 42, 43, 44, 46, 47, 760, 766, 768, 773, 782, 790], "end": [6, 8, 42, 43, 54, 77, 121, 227, 283, 335, 352, 358, 436, 446, 448, 449, 451, 585, 588, 729, 749, 760, 761, 765, 768, 779, 783, 785, 786, 794, 795, 800, 805], "see": [6, 7, 9, 11, 20, 21, 26, 28, 29, 30, 31, 35, 40, 41, 47, 48, 51, 53, 59, 64, 65, 67, 68, 70, 76, 77, 82, 87, 90, 91, 94, 96, 97, 104, 106, 109, 112, 121, 133, 137, 146, 153, 172, 179, 222, 227, 229, 231, 232, 233, 234, 239, 240, 244, 246, 250, 251, 258, 259, 262, 264, 266, 268, 269, 272, 275, 277, 281, 288, 290, 293, 315, 349, 356, 400, 582, 585, 586, 588, 593, 600, 601, 603, 604, 621, 634, 637, 640, 647, 648, 699, 703, 704, 705, 706, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 749, 751, 754, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 774, 775, 776, 780, 781, 782, 785, 787, 789, 790, 794, 795, 798], "ivy_model": [6, 7, 8, 10, 45], "ivy_alexnet": 6, "order": [6, 22, 32, 34, 42, 45, 47, 50, 54, 55, 58, 59, 61, 65, 66, 71, 77, 81, 82, 84, 88, 89, 94, 96, 97, 122, 123, 139, 146, 227, 246, 289, 315, 331, 349, 352, 356, 358, 361, 365, 400, 403, 404, 405, 409, 413, 415, 418, 436, 437, 438, 443, 444, 455, 460, 461, 462, 473, 585, 588, 592, 593, 595, 596, 600, 601, 602, 606, 607, 608, 609, 610, 611, 614, 625, 626, 632, 641, 642, 646, 648, 657, 660, 669, 670, 701, 703, 704, 705, 706, 707, 709, 710, 729, 733, 734, 736, 749, 751, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 790, 792, 795, 798, 801, 802, 803, 805, 808], "quick": [6, 17, 29, 761, 762, 781, 791], "cost": [6, 56, 79, 571, 572, 575, 577, 578, 579, 591, 596, 669, 670, 671, 785, 800], "asarrai": [6, 7, 8, 9, 10, 43, 50, 54, 55, 66, 73, 77, 78, 89, 122, 365, 472, 473, 502, 513, 517, 518, 548, 549, 585, 590, 592, 601, 602, 606, 704, 708, 773, 777, 780, 781], "cuda": [6, 7, 8, 9, 10, 11, 19, 28, 43, 44, 47, 50, 54, 63, 73, 77, 86, 137, 138, 141, 192, 193, 194, 208, 210, 362, 466, 467, 469, 470, 585, 587, 599, 692, 693, 694, 695, 730, 731, 732, 733, 734, 735, 736, 749, 787, 795, 797, 807], "7": [6, 8, 9, 11, 13, 15, 20, 21, 23, 24, 26, 40, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 106, 107, 108, 109, 121, 122, 123, 137, 140, 141, 158, 164, 167, 197, 219, 222, 225, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 245, 246, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 264, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 282, 283, 284, 286, 289, 290, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 306, 309, 310, 320, 322, 324, 325, 331, 332, 333, 335, 337, 338, 345, 347, 349, 352, 353, 355, 356, 357, 358, 363, 367, 373, 374, 375, 376, 381, 382, 386, 387, 391, 394, 396, 397, 398, 402, 411, 419, 420, 421, 422, 423, 426, 427, 428, 432, 436, 441, 442, 445, 446, 451, 452, 454, 458, 459, 468, 470, 471, 478, 481, 482, 484, 485, 489, 495, 497, 498, 502, 503, 506, 517, 518, 519, 526, 533, 534, 548, 551, 571, 572, 574, 575, 576, 577, 579, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 611, 614, 615, 616, 619, 621, 622, 623, 624, 627, 628, 631, 633, 636, 639, 641, 642, 643, 645, 646, 650, 651, 652, 653, 656, 657, 662, 664, 665, 667, 672, 673, 680, 684, 691, 692, 693, 694, 695, 697, 702, 703, 705, 707, 708, 710, 711, 712, 713, 715, 717, 719, 720, 760, 761, 765, 767, 768, 771, 776, 779, 782], "softmax": [6, 10, 13, 26, 28, 29, 44, 48, 58, 69, 70, 81, 582, 592, 618, 619, 727, 749], "argsort": [6, 10, 66, 89, 602, 709, 780], "descend": [6, 10, 66, 89, 593, 602, 641, 642, 707, 710], "top": [6, 10, 12, 17, 26, 28, 29, 42, 43, 54, 61, 77, 310, 349, 358, 455, 502, 590, 654, 729, 749, 760, 761, 769, 780, 782, 785, 790, 791, 802, 806], "gather": [6, 10, 42, 54, 55, 77, 78, 317, 318, 349, 510, 512, 590, 809], "to_list": [6, 10, 55, 78, 590], "282": [6, 10], "281": [6, 10, 42, 44], "285": [6, 10, 77], "dev": [6, 9, 10, 11, 21, 42, 44, 47, 52, 71, 75, 200, 207, 587, 760, 770, 776, 789, 791], "64773697": 6, "29496649": 6, "04526037": 6, "39": [6, 7, 9, 10, 13, 15, 19, 40, 42, 43, 44, 45, 47, 48, 53, 54, 59, 63, 70, 76, 77, 79, 82, 86, 106, 225, 260, 262, 264, 294, 347, 355, 367, 374, 376, 393, 396, 481, 571, 582, 588, 591, 593, 603, 628, 636, 694, 713], "tiger": [6, 10], "tabbi": [6, 10], "egyptian": [6, 10], "confirm": [6, 43, 759], "8": [6, 9, 20, 21, 23, 40, 42, 44, 47, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 96, 97, 104, 135, 136, 140, 143, 148, 157, 159, 160, 161, 164, 197, 214, 222, 224, 225, 229, 230, 233, 235, 237, 243, 246, 250, 251, 257, 258, 259, 264, 267, 268, 270, 271, 272, 277, 278, 281, 282, 283, 286, 287, 290, 291, 292, 298, 299, 301, 303, 304, 320, 328, 331, 333, 334, 335, 338, 345, 347, 349, 352, 355, 356, 357, 358, 367, 373, 374, 375, 376, 381, 382, 386, 387, 391, 392, 394, 396, 397, 402, 408, 419, 420, 422, 423, 424, 426, 427, 428, 432, 436, 441, 442, 451, 452, 454, 455, 458, 459, 468, 470, 482, 485, 486, 489, 495, 496, 498, 502, 503, 506, 509, 513, 517, 518, 519, 521, 522, 525, 528, 533, 534, 538, 548, 549, 550, 551, 571, 574, 576, 579, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 606, 610, 611, 614, 615, 616, 618, 622, 623, 624, 627, 628, 631, 632, 633, 636, 639, 641, 642, 643, 645, 646, 648, 650, 651, 652, 653, 657, 664, 665, 667, 673, 680, 684, 692, 693, 694, 695, 697, 702, 703, 705, 707, 708, 710, 712, 713, 715, 717, 719, 720, 731, 760, 767, 768, 771, 782, 786, 790], "torch_alexnet": 6, "alexnet_weight": 6, "weight": [6, 13, 15, 28, 29, 42, 43, 54, 56, 58, 60, 77, 79, 81, 83, 94, 306, 310, 335, 349, 352, 355, 356, 367, 381, 407, 478, 480, 483, 571, 572, 575, 577, 578, 579, 591, 592, 594, 596, 616, 617, 618, 619, 650, 671, 730, 731, 733, 735, 749, 767, 776, 782, 787, 791, 792, 801], "imagenet1k_v1": [6, 10], "dropout": [6, 58, 81, 355, 378, 379, 380, 592, 618, 619, 731, 790], "9": [6, 7, 8, 9, 10, 11, 20, 21, 23, 40, 42, 44, 47, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 70, 74, 76, 77, 78, 79, 81, 82, 84, 86, 88, 89, 90, 96, 97, 104, 121, 122, 123, 140, 157, 158, 159, 160, 161, 164, 167, 220, 222, 224, 225, 228, 229, 230, 233, 239, 240, 246, 253, 259, 260, 261, 267, 268, 270, 271, 272, 275, 277, 278, 282, 283, 286, 287, 288, 293, 295, 298, 299, 326, 327, 331, 337, 338, 345, 347, 352, 353, 355, 357, 358, 365, 367, 373, 374, 375, 376, 381, 382, 386, 387, 391, 392, 394, 396, 397, 408, 419, 420, 422, 426, 427, 428, 432, 436, 441, 451, 452, 453, 455, 458, 468, 470, 473, 482, 498, 502, 503, 504, 506, 509, 517, 518, 521, 522, 525, 533, 534, 548, 550, 571, 572, 573, 577, 582, 585, 586, 588, 590, 591, 592, 593, 595, 597, 599, 600, 601, 602, 603, 606, 607, 608, 611, 614, 615, 616, 621, 622, 624, 627, 628, 631, 632, 633, 636, 639, 641, 642, 643, 645, 646, 653, 657, 661, 662, 664, 665, 667, 672, 673, 678, 680, 683, 684, 692, 693, 694, 695, 697, 702, 703, 705, 707, 708, 710, 712, 713, 715, 717, 719, 720, 735, 767, 771, 778, 782, 790, 791, 798], "torch_output": [6, 8, 10], "dim": [6, 10, 44, 54, 71, 73, 77, 141, 304, 349, 355, 358, 372, 382, 383, 384, 387, 395, 436, 585, 592, 605, 612, 613, 731, 749, 769, 780, 781, 785], "torch_class": [6, 10], "torch_logit": [6, 10], "devic": [6, 8, 9, 10, 43, 44, 47, 50, 54, 63, 71, 73, 77, 86, 96, 99, 100, 101, 121, 122, 123, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 218, 303, 304, 315, 316, 349, 362, 434, 466, 467, 469, 470, 493, 507, 508, 585, 590, 599, 692, 693, 694, 695, 728, 730, 731, 732, 733, 734, 735, 736, 737, 740, 749, 752, 761, 762, 765, 769, 773, 776, 777, 781, 782, 783, 785, 787, 792, 795, 796, 797, 801, 802, 804, 805, 806, 807], "6477": 6, "2950": 6, "0453": 6, "grad_fn": [6, 10, 26, 40, 574, 581, 591, 790], "lt": [6, 10, 13, 15, 19, 23, 24, 26, 40, 42, 44, 97], "takebackward0": [6, 10], "gt": [6, 10, 13, 15, 19, 23, 24, 26, 40, 42, 44, 47, 97, 781, 787], "great": [6, 8, 749, 752, 753, 761, 782, 787, 789, 808], "u": [6, 9, 42, 44, 46, 47, 54, 59, 73, 77, 82, 94, 138, 356, 410, 416, 417, 593, 597, 620, 627, 641, 680, 749, 752, 754, 760, 761, 762, 767, 768, 774, 777, 779, 780, 781, 782, 783, 785, 791, 795], "try": [6, 20, 30, 40, 43, 47, 71, 557, 590, 730, 740, 749, 750, 752, 753, 759, 760, 761, 763, 764, 767, 768, 769, 773, 774, 779, 781, 787, 789, 795], "10": [6, 8, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 44, 46, 47, 50, 53, 54, 55, 56, 58, 59, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 121, 136, 137, 138, 221, 229, 230, 233, 237, 244, 249, 251, 257, 259, 261, 272, 278, 285, 286, 291, 296, 320, 323, 328, 330, 331, 333, 334, 335, 337, 338, 342, 345, 352, 355, 358, 367, 373, 374, 375, 376, 386, 391, 392, 394, 396, 397, 398, 428, 430, 432, 436, 441, 452, 458, 478, 481, 482, 485, 487, 489, 502, 503, 504, 506, 509, 510, 512, 517, 518, 526, 534, 538, 543, 548, 550, 562, 565, 577, 585, 588, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 609, 615, 622, 624, 628, 629, 631, 632, 633, 636, 641, 642, 643, 657, 662, 663, 664, 665, 667, 678, 680, 683, 684, 691, 692, 693, 694, 695, 701, 703, 709, 711, 712, 713, 714, 716, 717, 719, 720, 735, 749, 752, 760, 763, 767, 768, 769, 771, 778, 781, 782, 787, 789, 790, 807], "11": [6, 8, 19, 21, 23, 40, 42, 43, 44, 47, 53, 54, 55, 58, 59, 63, 67, 76, 77, 78, 81, 82, 84, 86, 90, 97, 222, 226, 229, 244, 281, 282, 288, 335, 352, 355, 356, 358, 373, 374, 386, 391, 392, 394, 396, 397, 405, 430, 432, 436, 441, 443, 458, 481, 482, 496, 502, 503, 509, 518, 534, 588, 590, 592, 593, 594, 595, 597, 599, 600, 601, 603, 606, 607, 615, 616, 624, 627, 628, 629, 631, 632, 636, 641, 642, 650, 652, 657, 662, 663, 665, 667, 678, 680, 690, 693, 694, 695, 702, 703, 711, 712, 713, 720, 767, 768, 769, 771, 778], "st": [6, 7, 9, 763, 781, 782], "perf_count": [6, 9], "raw_logit": 6, "latenc": [6, 9], "axi": [6, 8, 43, 44, 45, 48, 50, 53, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 107, 111, 137, 138, 141, 212, 286, 291, 324, 325, 331, 338, 352, 355, 357, 358, 361, 365, 367, 376, 377, 383, 386, 388, 398, 421, 425, 431, 432, 433, 436, 437, 438, 441, 446, 451, 452, 454, 455, 457, 458, 463, 464, 465, 473, 478, 481, 482, 483, 485, 486, 487, 488, 489, 502, 509, 570, 582, 585, 587, 588, 590, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 614, 621, 624, 632, 647, 648, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 697, 698, 699, 703, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 731, 732, 737, 767, 769, 771, 773, 775, 776, 779, 780, 782, 785, 787, 789, 792, 794], "direct": [6, 54, 77, 325, 330, 334, 339, 343, 352, 355, 358, 388, 398, 437, 438, 452, 602, 710, 759, 764, 766, 780, 785, 791, 792, 794, 798, 802, 803, 806], "tolist": 6, "652289830999962": 6, "int32": [6, 40, 42, 51, 54, 55, 63, 64, 67, 74, 77, 78, 86, 87, 132, 137, 143, 148, 151, 154, 156, 158, 160, 162, 165, 167, 168, 172, 175, 179, 183, 187, 189, 207, 300, 347, 363, 367, 471, 481, 482, 483, 510, 519, 555, 585, 586, 587, 590, 599, 600, 603, 693, 694, 695, 699, 711, 712, 717, 719, 769, 780, 782, 787], "6477362": 6, "29496726": 6, "04526032": 6, "ident": [6, 26, 43, 45, 59, 71, 132, 200, 512, 538, 585, 587, 590, 593, 597, 628, 633, 685, 731, 751, 753, 767, 776, 777, 780, 781, 783, 785, 789, 790, 795, 797], "had": [6, 767, 768, 779, 783, 787, 802, 803], "postprocess": 6, "routin": [6, 768, 779, 780, 785, 795, 802], "carefulli": [6, 277, 588, 730, 780, 800, 805], "rewrit": 6, "easili": [6, 25, 28, 29, 40, 749, 752, 760, 764, 768, 780, 785, 790, 791, 792, 795, 802, 808, 809], "quickest": 6, "particular": [6, 28, 29, 267, 588, 760, 761, 763, 765, 768, 769, 771, 777, 779, 780, 782, 783, 798, 802, 808], "hardwar": [6, 42, 96, 100, 752, 760, 785, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808], "again": [6, 8, 22, 23, 31, 32, 33, 34, 593, 639, 752, 753, 761, 764, 765, 766, 767, 771, 773, 774, 779, 780, 782, 783, 785, 790, 792, 795, 807, 808], "speed": [6, 9, 11, 28, 29, 42, 47, 55, 78, 526, 590, 751, 782, 805], "12": [6, 8, 9, 10, 19, 21, 23, 24, 40, 42, 43, 44, 51, 53, 54, 55, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 85, 86, 90, 96, 97, 167, 222, 224, 229, 233, 234, 237, 239, 240, 241, 259, 272, 275, 282, 285, 292, 293, 308, 309, 331, 334, 335, 349, 352, 355, 358, 367, 373, 374, 375, 376, 378, 382, 383, 391, 392, 396, 397, 398, 430, 432, 436, 441, 458, 470, 481, 487, 488, 498, 502, 503, 534, 540, 548, 562, 588, 590, 592, 593, 595, 597, 598, 599, 600, 601, 603, 606, 610, 615, 616, 624, 628, 632, 636, 642, 643, 645, 657, 661, 663, 665, 667, 684, 691, 693, 694, 695, 702, 703, 711, 712, 713, 717, 719, 760, 765, 767, 769, 771, 778], "repeat": [6, 7, 22, 32, 54, 55, 61, 77, 78, 84, 355, 367, 383, 388, 480, 504, 590, 595, 596, 666, 671, 743, 755, 761, 764, 765, 771, 772, 779, 782], "previou": [6, 21, 22, 23, 25, 31, 32, 33, 35, 56, 79, 186, 187, 188, 189, 190, 346, 354, 558, 560, 561, 562, 563, 565, 566, 568, 572, 577, 586, 590, 591, 730, 746, 761, 763, 765, 768, 770, 775, 780, 782, 785, 792, 795, 805], "13": [6, 8, 9, 10, 19, 24, 40, 42, 44, 48, 53, 54, 58, 59, 63, 67, 76, 77, 78, 79, 81, 84, 86, 90, 96, 112, 167, 197, 222, 234, 237, 246, 257, 277, 286, 331, 338, 345, 352, 355, 358, 375, 376, 386, 391, 397, 430, 432, 436, 441, 458, 470, 481, 482, 497, 498, 502, 503, 518, 540, 548, 571, 582, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 600, 601, 603, 606, 607, 615, 616, 624, 628, 636, 642, 667, 671, 684, 693, 694, 695, 702, 703, 711, 712, 713, 767, 771, 780], "026875037000081647": 6, "14": [6, 8, 9, 10, 24, 40, 42, 43, 44, 51, 53, 54, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 86, 151, 164, 167, 220, 225, 227, 234, 238, 264, 268, 272, 278, 285, 293, 327, 355, 356, 358, 367, 373, 374, 375, 376, 386, 393, 396, 397, 400, 432, 436, 441, 458, 481, 548, 571, 586, 588, 590, 591, 592, 593, 595, 597, 601, 603, 606, 607, 609, 611, 615, 624, 628, 636, 645, 667, 684, 693, 694, 695, 703, 712, 713, 767, 771, 782], "overrid": [6, 8, 34, 43, 50, 54, 73, 77, 141, 367, 480, 585, 764, 766], "behavior": [6, 8, 54, 65, 239, 246, 272, 277, 281, 368, 490, 537, 560, 588, 590, 601, 703, 704, 705, 706, 759, 766, 767, 768, 769, 779, 780, 781, 782, 785, 787, 795, 799], "prealloc": [6, 8], "75": [6, 8, 40, 53, 54, 76, 77, 78, 81, 86, 113, 137, 225, 227, 239, 252, 306, 330, 331, 349, 352, 397, 489, 504, 517, 548, 582, 585, 588, 590, 593, 597, 599, 606, 629, 636, 680, 695], "temporari": [6, 8, 546, 568, 590, 759, 769, 784], "fix": [6, 8, 44, 54, 77, 94, 352, 356, 418, 592, 618, 749, 760, 761, 763, 769, 774, 782, 783], "handl": [6, 8, 40, 42, 48, 52, 53, 54, 70, 71, 75, 76, 77, 97, 104, 106, 109, 112, 192, 193, 194, 195, 196, 200, 205, 206, 214, 218, 224, 236, 261, 277, 283, 284, 289, 290, 358, 430, 451, 454, 582, 587, 588, 593, 603, 645, 717, 719, 727, 735, 754, 762, 767, 768, 769, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 791, 799, 809], "o": [6, 8, 41, 42, 43, 44, 46, 529, 590, 749, 760, 762, 768, 787, 796], "xla_python_client_alloc": [6, 8], "platform": [6, 8, 758, 800, 804, 806], "img_jax": [6, 8], "device_put": [6, 9], "15": [6, 8, 10, 11, 24, 40, 42, 43, 44, 47, 53, 54, 55, 59, 63, 67, 73, 74, 76, 77, 78, 81, 82, 84, 86, 90, 97, 136, 164, 222, 229, 233, 239, 250, 257, 258, 264, 272, 281, 282, 283, 331, 345, 352, 353, 355, 356, 358, 367, 373, 374, 391, 393, 396, 397, 402, 432, 436, 441, 458, 481, 498, 502, 503, 506, 517, 518, 543, 548, 565, 585, 586, 588, 590, 592, 593, 595, 597, 599, 600, 601, 603, 606, 616, 624, 627, 628, 629, 636, 642, 643, 661, 667, 672, 684, 693, 694, 701, 703, 711, 712, 713, 760, 768, 771, 778, 805], "warm": 6, "_": [6, 9, 11, 28, 41, 42, 53, 71, 76, 79, 154, 242, 244, 252, 253, 268, 367, 418, 480, 502, 571, 572, 586, 588, 590, 591, 593, 595, 597, 603, 639, 642, 668, 679, 718, 755, 759, 772, 777, 779, 782, 790], "rang": [6, 28, 29, 40, 41, 42, 44, 50, 54, 67, 73, 77, 121, 137, 138, 286, 310, 349, 356, 358, 367, 404, 412, 439, 447, 449, 456, 481, 482, 483, 502, 570, 585, 588, 590, 601, 603, 703, 711, 712, 717, 719, 730, 749, 769, 773, 776, 782, 787, 790, 791, 792, 802, 808], "16": [6, 8, 11, 24, 40, 42, 44, 53, 54, 55, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 86, 96, 97, 167, 233, 262, 282, 289, 328, 331, 335, 352, 355, 358, 367, 373, 374, 376, 382, 386, 387, 391, 392, 394, 397, 436, 481, 487, 503, 506, 528, 548, 549, 581, 586, 588, 590, 591, 592, 593, 595, 597, 599, 600, 603, 614, 616, 620, 624, 627, 628, 636, 642, 667, 680, 684, 693, 694, 695, 702, 712, 713, 749, 761, 771, 790], "0022192720000475674": 6, "64773613": 6, "29496723": 6, "exact": [6, 70, 71, 104, 355, 357, 390, 395, 421, 601, 703, 705, 727, 760, 761, 763, 771, 787], "note": [6, 8, 24, 28, 29, 34, 43, 44, 45, 54, 55, 59, 61, 65, 77, 82, 84, 94, 134, 146, 178, 246, 281, 282, 289, 315, 316, 331, 349, 352, 355, 356, 358, 377, 403, 406, 414, 415, 418, 436, 586, 588, 592, 593, 595, 601, 603, 618, 625, 626, 639, 641, 660, 664, 704, 706, 715, 731, 755, 757, 759, 760, 761, 764, 769, 771, 772, 774, 779, 780, 781, 782, 783, 785], "dog": 6, "18": [6, 24, 40, 42, 44, 53, 54, 63, 76, 77, 81, 82, 86, 90, 107, 234, 239, 281, 285, 294, 331, 352, 355, 358, 376, 382, 386, 387, 391, 394, 397, 436, 582, 588, 593, 599, 603, 610, 624, 631, 636, 693, 694, 695, 712, 713, 717, 767, 771], "19": [6, 24, 40, 42, 43, 44, 47, 53, 54, 63, 76, 77, 81, 82, 86, 225, 234, 262, 272, 289, 355, 356, 358, 367, 375, 376, 387, 391, 394, 397, 402, 436, 481, 588, 593, 597, 599, 602, 624, 632, 645, 683, 693, 694, 695, 710, 771], "006431100999861883": 6, "258": [6, 592, 607, 609, 611], "104": [6, 67, 593, 603, 636, 713], "259": 6, "72447652": 6, "13937832": 6, "05874982": 6, "samoi": 6, "wallabi": 6, "pomeranian": 6, "incorrect": [6, 768], "predict": [6, 8, 10, 42, 43, 44, 45, 54, 60, 77, 83, 357, 419, 421, 423, 594, 650, 651, 652, 749], "down": [6, 21, 31, 45, 54, 77, 355, 358, 390, 438, 729, 760, 782, 797, 802, 808], "20": [6, 15, 40, 42, 43, 44, 47, 53, 54, 58, 63, 67, 76, 77, 78, 81, 82, 86, 90, 234, 238, 242, 278, 282, 286, 331, 333, 335, 352, 355, 358, 373, 375, 391, 394, 397, 430, 502, 509, 510, 512, 534, 538, 548, 588, 590, 593, 599, 600, 603, 606, 607, 617, 624, 629, 632, 636, 643, 693, 701, 702, 711, 712, 713, 717, 719, 749, 768, 785, 789], "004749261999904775": 6, "7245": 6, "1394": 6, "0587": 6, "promis": [6, 752], "21": [6, 40, 42, 44, 47, 53, 54, 55, 63, 73, 76, 77, 81, 82, 86, 90, 96, 138, 167, 222, 225, 227, 233, 234, 257, 272, 338, 355, 356, 358, 367, 373, 376, 386, 391, 394, 397, 398, 400, 430, 481, 534, 585, 586, 588, 593, 594, 597, 603, 624, 636, 652, 678, 693, 694, 711, 712, 713, 773, 778], "v": [6, 7, 8, 17, 18, 21, 28, 29, 31, 34, 35, 40, 43, 44, 54, 58, 66, 73, 77, 81, 89, 138, 237, 242, 244, 285, 356, 358, 404, 410, 416, 435, 588, 592, 596, 602, 619, 671, 709, 729, 731, 732, 733, 734, 735, 736, 749, 755, 756, 760, 761, 762, 766, 787, 790, 791, 792], "_build": [6, 8, 749], "conv2d": [6, 8, 26, 28, 29, 44, 47, 58, 81, 592, 609, 731, 749], "64": [6, 8, 40, 42, 43, 44, 47, 53, 54, 58, 76, 77, 78, 81, 82, 86, 90, 97, 163, 233, 243, 277, 286, 287, 328, 352, 355, 376, 386, 502, 503, 549, 577, 586, 588, 590, 591, 592, 593, 597, 603, 607, 609, 611, 614, 633, 636, 646, 680, 684, 694, 713, 717, 749, 760, 790, 791, 807], "data_format": [6, 44, 54, 58, 77, 81, 355, 361, 373, 374, 375, 378, 379, 380, 391, 392, 393, 394, 396, 460, 461, 462, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731, 734, 749], "nchw": [6, 44, 54, 58, 77, 81, 355, 374, 379, 392, 396, 592, 605, 608, 609, 612, 613, 614, 731, 749], "relu": [6, 8, 26, 28, 29, 40, 47, 48, 54, 69, 70, 77, 106, 297, 298, 302, 347, 582, 727, 749, 781, 790, 791], "maxpool2d": [6, 8, 42, 731, 749], "192": [6, 44, 743], "384": [6, 79, 571, 591], "avgpool": 6, "adaptiveavgpool2d": [6, 731], "6": [6, 9, 11, 13, 21, 23, 24, 25, 26, 28, 29, 40, 42, 43, 44, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 66, 67, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 104, 106, 111, 117, 122, 123, 135, 136, 139, 140, 143, 148, 152, 153, 154, 162, 164, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 264, 265, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 310, 322, 324, 331, 332, 334, 335, 336, 338, 345, 347, 349, 352, 353, 355, 356, 357, 358, 363, 365, 367, 376, 378, 381, 382, 386, 387, 391, 394, 397, 398, 402, 405, 408, 420, 422, 423, 424, 426, 427, 428, 432, 436, 437, 441, 442, 445, 446, 451, 452, 454, 458, 459, 468, 470, 471, 473, 478, 480, 481, 482, 483, 485, 487, 488, 489, 495, 497, 498, 501, 502, 503, 509, 510, 517, 518, 519, 534, 548, 549, 550, 551, 553, 557, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 621, 622, 623, 624, 626, 627, 628, 631, 632, 633, 636, 639, 641, 642, 643, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 683, 684, 690, 691, 692, 693, 694, 695, 697, 698, 699, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 730, 749, 757, 760, 763, 765, 767, 768, 771, 778, 782, 785, 787, 789, 790, 791], "prob": [6, 44, 54, 58, 77, 81, 86, 355, 362, 378, 379, 380, 466, 592, 599, 615, 692, 731, 749], "4096": 6, "_forward": [6, 8, 9, 11, 28, 29, 40, 41, 44, 749, 772, 787, 790, 791], "reshap": [6, 28, 29, 44, 45, 54, 58, 59, 61, 71, 77, 81, 82, 84, 342, 352, 355, 356, 358, 373, 374, 375, 378, 391, 392, 393, 394, 396, 400, 413, 436, 570, 590, 592, 593, 595, 608, 610, 614, 632, 648, 749, 779, 780, 782, 785, 787, 789, 792], "bidirect": 7, "mlm": 7, "googl": [7, 42, 43, 44, 46, 752, 768], "save": [7, 42, 54, 71, 77, 367, 487, 546, 568, 587, 590, 604, 733, 753, 755, 760, 768, 774, 782, 795, 801], "mohame54": 7, "automodel": [7, 11, 28], "autotoken": 7, "load": [7, 9, 11, 25, 28, 42, 43, 44, 45, 46, 47, 71, 356, 416, 604, 733, 749, 782, 795, 801, 808], "token": [7, 44], "bert_bas": 7, "base": [7, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 99, 101, 138, 146, 178, 242, 243, 260, 261, 262, 263, 277, 310, 315, 321, 324, 328, 335, 349, 352, 355, 356, 365, 397, 416, 472, 539, 549, 561, 585, 586, 588, 590, 593, 595, 601, 603, 632, 656, 703, 704, 705, 706, 713, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 744, 747, 749, 760, 761, 763, 767, 768, 769, 773, 775, 777, 778, 779, 781, 782, 783, 784, 785, 787, 794, 802, 807, 809], "uncas": 7, "eval": [7, 8, 10, 733], "evalu": [7, 53, 54, 71, 76, 77, 242, 244, 260, 261, 262, 263, 267, 274, 276, 283, 287, 336, 356, 358, 413, 443, 581, 588, 591, 597, 604, 682, 683, 721, 722, 732, 733, 761, 767, 769, 776, 777, 802], "bert_token": 7, "sampl": [7, 9, 11, 13, 15, 25, 28, 29, 43, 50, 53, 54, 63, 67, 73, 76, 77, 86, 90, 137, 138, 291, 310, 349, 355, 358, 362, 378, 379, 380, 390, 449, 466, 467, 468, 469, 470, 585, 588, 599, 603, 692, 693, 694, 695, 718, 720, 731, 781, 782], "did": [7, 42, 752, 759, 766, 792, 808], "pad": [7, 42, 44, 54, 58, 61, 77, 81, 84, 355, 358, 373, 374, 375, 376, 377, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 506, 590, 592, 595, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 655, 668, 731, 749], "longest": 7, "max_length": [7, 71], "512": [7, 8, 42, 44, 82, 592, 607, 646, 749], "input_id": 7, "101": [7, 43, 592, 593, 597, 616, 629, 678], "1045": 7, "2106": 7, "1005": 7, "1056": 7, "2428": 7, "2066": 7, "2115": 7, "4309": 7, "1012": 7, "102": [7, 54, 77, 86, 376, 693], "token_type_id": 7, "attention_mask": [7, 58, 81, 592, 618], "pooler": 7, "compar": [7, 9, 11, 28, 41, 45, 47, 54, 55, 65, 66, 71, 77, 78, 89, 320, 333, 352, 491, 494, 590, 601, 602, 703, 704, 705, 706, 707, 710, 749, 765, 771, 773, 781, 782, 785, 790, 798, 800, 802, 808, 809], "bert_output": 7, "pooler_output": 7, "ivy_bert": 7, "bert_base_uncas": 7, "ivy_input": 7, "ivy_output": [7, 45], "logits_clos": 7, "allclos": [7, 9, 11, 13, 15, 28, 45, 47, 54, 77, 352], "detach": [7, 9, 11, 13, 15, 28, 778], "rtol": [7, 13, 15, 54, 59, 77, 82, 320, 333, 352, 593, 634, 637, 781], "005": [7, 54, 77, 320, 333, 352, 419], "atol": [7, 9, 11, 28, 54, 59, 77, 82, 320, 333, 352, 593, 634, 781], "equal": [7, 50, 51, 53, 54, 55, 59, 60, 61, 63, 65, 66, 67, 71, 74, 76, 77, 78, 82, 83, 84, 86, 89, 96, 97, 132, 134, 135, 136, 142, 143, 151, 231, 233, 237, 242, 244, 253, 254, 275, 277, 282, 285, 286, 290, 317, 318, 320, 333, 349, 352, 355, 358, 361, 367, 377, 432, 441, 458, 463, 464, 465, 483, 491, 494, 570, 585, 586, 588, 590, 593, 594, 595, 599, 600, 601, 602, 603, 624, 633, 634, 637, 639, 645, 650, 653, 655, 660, 662, 668, 695, 701, 703, 704, 705, 706, 707, 710, 715, 717, 718, 719, 720, 730, 731, 766, 767, 769, 771, 773, 781, 782], "els": [7, 8, 9, 43, 44, 46, 47, 54, 55, 63, 76, 77, 86, 157, 158, 159, 160, 161, 173, 279, 283, 356, 362, 406, 415, 417, 418, 467, 501, 505, 586, 588, 590, 597, 599, 682, 685, 693, 694, 695, 743, 749, 759, 760, 761, 763, 765, 769, 770, 773, 776, 779, 780, 781, 782, 783, 785, 787, 789, 791, 792, 795, 803], "768": 7, "finish": [7, 17, 28, 29, 40, 43, 749, 754, 759, 760, 762], "2f": [7, 9], "sec": 7, "89": [7, 40, 53, 63, 74, 76, 77, 86, 97, 167, 234, 586, 588, 593, 603, 643, 694, 695, 719], "43": [7, 40, 42, 44, 54, 77, 86, 97, 233, 355, 356, 367, 375, 402, 481, 588, 599, 600, 694, 695, 702], "procedur": [7, 766, 768, 771, 781], "60": [7, 40, 44, 53, 67, 76, 78, 86, 90, 223, 257, 510, 518, 534, 548, 570, 588, 590, 593, 597, 603, 636, 675, 693, 711, 713, 717, 768], "big": [7, 730, 754, 795, 802], "jax_enable_x64": [7, 8, 9, 11, 22, 28, 29, 749], "ref": [7, 8, 78, 82, 258, 272, 275, 281, 288, 588, 595, 664, 760, 779], "fast": [7, 23, 33, 54, 355, 377, 802], "demo": [8, 9, 10, 11, 29, 36, 40, 44, 749, 755, 794], "milesi": 8, "blob": [8, 42, 44], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 8, "data_load": 8, "py": [8, 42, 44, 47, 90, 356, 416, 713, 740, 743, 749, 759, 760, 761, 763, 765, 768, 769, 770, 772, 773, 774, 775, 776, 780, 781, 782, 783, 787, 789, 791, 792], "l65": 8, "mask_valu": 8, "pil_img": 8, "scale": [8, 9, 42, 54, 58, 62, 77, 79, 81, 85, 106, 210, 211, 299, 310, 331, 347, 349, 352, 355, 356, 361, 372, 378, 379, 380, 388, 398, 408, 460, 461, 462, 578, 582, 587, 591, 592, 598, 615, 618, 619, 691, 730, 731, 735, 802, 804], "is_mask": 8, "neww": 8, "newh": 8, "assert": [8, 43, 45, 47, 71, 495, 590, 757, 762, 763, 776, 779, 780, 781, 782, 783, 789, 790], "too": [8, 222, 239, 246, 272, 588, 730, 759, 760, 761, 763, 769, 773, 783, 795], "pixel": [8, 42, 54, 77, 355, 390], "resampl": 8, "nearest": [8, 54, 77, 222, 239, 272, 282, 327, 352, 355, 367, 390, 489, 588, 785], "bicub": [8, 54, 77, 355, 390, 785], "zero": [8, 42, 50, 51, 53, 54, 56, 58, 59, 61, 64, 65, 67, 68, 73, 74, 76, 77, 79, 81, 82, 86, 87, 90, 91, 106, 108, 109, 110, 112, 129, 130, 132, 134, 139, 141, 142, 143, 144, 145, 148, 151, 152, 220, 221, 222, 224, 225, 226, 227, 228, 231, 233, 234, 236, 237, 238, 239, 244, 245, 246, 253, 254, 255, 256, 262, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289, 290, 292, 293, 294, 298, 299, 302, 304, 316, 323, 324, 325, 327, 335, 338, 340, 341, 342, 343, 347, 349, 352, 355, 356, 358, 365, 367, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 397, 398, 402, 404, 413, 440, 445, 446, 472, 481, 482, 498, 502, 509, 529, 571, 572, 577, 578, 579, 580, 582, 585, 586, 588, 590, 591, 592, 593, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 619, 620, 622, 627, 629, 630, 631, 632, 633, 634, 635, 637, 639, 647, 648, 655, 656, 657, 658, 660, 661, 668, 691, 693, 694, 695, 698, 699, 700, 701, 703, 704, 705, 706, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 735, 753, 764, 767, 769, 770, 771, 775, 777, 778, 781, 787, 790, 791, 801], "int64": [8, 54, 63, 64, 66, 67, 74, 86, 87, 89, 90, 142, 154, 160, 163, 165, 167, 171, 172, 176, 183, 300, 307, 347, 349, 365, 367, 473, 481, 482, 585, 586, 600, 602, 603, 693, 698, 699, 700, 709, 711, 712, 717, 719, 769, 780, 782, 787], "enumer": [8, 42, 44, 729, 749], "ndim": [8, 54, 59, 64, 77, 82, 87, 96, 100, 356, 358, 414, 415, 418, 426, 427, 428, 439, 447, 449, 456, 570, 590, 593, 600, 638, 641, 701, 767, 776, 782], "newaxi": [8, 583], "car": 8, "full_img": 8, "from_numpi": [8, 790], "img_numpi": 8, "cpu": [8, 9, 11, 28, 42, 43, 44, 46, 47, 50, 52, 54, 63, 73, 75, 77, 86, 121, 132, 135, 137, 138, 141, 142, 143, 148, 192, 193, 195, 196, 197, 198, 203, 206, 208, 210, 213, 214, 216, 218, 362, 466, 467, 469, 470, 585, 587, 593, 599, 630, 692, 693, 694, 695, 730, 731, 732, 733, 734, 735, 736, 749, 757, 760, 761, 766, 769, 770, 780, 782, 795, 800, 802, 805, 807], "torch_unet": 8, "unet_carvana": 8, "ivy_unet": 8, "n_channel": 8, "n_class": 8, "l62": 8, "mask_to_imag": 8, "ndarrai": [8, 50, 54, 55, 73, 77, 122, 123, 140, 355, 356, 358, 367, 398, 415, 451, 486, 487, 555, 585, 590, 740, 743, 759, 764, 769, 770, 773, 775, 779, 780, 781, 783, 785, 787, 789, 792, 797], "isinst": [8, 26, 28, 29, 773, 780, 782, 783, 791, 792], "uint8": [8, 25, 28, 29, 44, 154, 161, 165, 176, 179, 184, 190, 300, 347, 586, 769, 782], "elif": [8, 9, 768, 773, 779, 780, 781], "fromarrai": [8, 25, 28, 29, 44], "interpol": [8, 42, 54, 77, 335, 352, 355, 367, 489, 592, 618, 785, 802], "mode": [8, 34, 46, 54, 59, 71, 77, 82, 93, 94, 95, 209, 212, 217, 222, 239, 272, 314, 349, 355, 356, 358, 385, 390, 398, 406, 412, 414, 415, 418, 430, 439, 444, 446, 447, 449, 451, 454, 456, 535, 536, 537, 541, 542, 544, 545, 558, 559, 563, 564, 566, 567, 587, 588, 590, 593, 638, 731, 732, 733, 746, 755, 760, 761, 762, 767, 770, 771, 785, 795, 802, 805], "bilinear": [8, 54, 77, 355, 390, 785], "torch_mask": 8, "squeez": [8, 42, 61, 84, 595, 802], "torch_result": 8, "to_numpi": [8, 28, 29, 40, 43, 44, 47, 55, 78, 590, 749, 781, 790], "give": [8, 20, 30, 40, 54, 58, 81, 178, 355, 397, 586, 592, 595, 605, 606, 607, 608, 610, 612, 614, 660, 729, 730, 749, 753, 755, 760, 761, 762, 765, 768, 769, 771, 772, 774, 775, 782, 802, 806], "img_tf": 8, "math": [8, 45, 289, 588, 779, 780, 781, 792, 800], "ve": [8, 17, 26, 28, 63, 86, 599, 692, 759, 760, 761, 782, 785, 786, 789, 797], "lot": [8, 749, 752, 753, 768, 769, 777, 782, 795, 801], "far": [8, 28, 29, 597, 672, 683, 770, 771, 788, 807, 808], "space": [8, 50, 53, 54, 55, 73, 76, 77, 78, 121, 137, 138, 291, 331, 352, 502, 506, 585, 588, 590, 752, 785], "del": [8, 768], "empty_cach": 8, "permute_dim": [8, 61, 84, 595], "usr": [8, 42, 43, 44, 47, 760], "local": [8, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 42, 43, 44, 47, 754, 755, 760, 763, 766, 776, 781, 782], "lib": [8, 42, 43, 44, 47], "python3": [8, 10, 28, 42, 44, 47, 749, 755, 760, 761], "dist": [8, 42, 43, 44, 47], "func_wrapp": [8, 48, 53, 70, 76, 104, 106, 109, 112, 290, 582, 588, 727, 770, 780, 784], "242": [8, 77], "userwarn": [8, 47], "mani": [8, 28, 29, 32, 61, 71, 84, 146, 315, 349, 585, 595, 662, 729, 749, 751, 752, 753, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 785, 787, 789, 790, 795, 798, 802, 805, 808, 809], "view": [8, 54, 61, 77, 96, 133, 358, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 512, 585, 590, 595, 656, 657, 658, 660, 662, 663, 665, 667, 760, 761, 773, 802], "lead": [8, 59, 71, 82, 97, 246, 356, 410, 537, 588, 590, 593, 638, 641, 752, 753, 768, 769, 771, 783, 795], "inplac": [8, 49, 55, 71, 78, 94, 493, 495, 516, 519, 520, 537, 538, 590, 597, 679, 680, 684, 689, 690, 728, 735, 762, 764, 771, 775, 777, 780, 785, 789, 791], "17": [8, 24, 40, 42, 44, 47, 48, 54, 59, 70, 76, 77, 78, 79, 81, 82, 86, 97, 106, 107, 138, 222, 239, 264, 272, 303, 345, 349, 355, 358, 373, 374, 382, 383, 386, 387, 391, 392, 394, 397, 436, 503, 518, 571, 573, 582, 585, 588, 590, 591, 592, 593, 597, 599, 606, 615, 616, 624, 628, 680, 693, 694, 695, 697, 767], "factor": [8, 54, 56, 58, 59, 77, 79, 81, 82, 93, 94, 210, 211, 212, 355, 356, 388, 398, 406, 407, 415, 418, 571, 572, 577, 578, 587, 591, 592, 593, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 620, 730, 731, 735, 752, 773], "inc": 8, "unetdoubleconv": 8, "down1": 8, "unetdown": 8, "128": [8, 28, 29, 42, 51, 53, 58, 74, 76, 81, 97, 167, 243, 355, 376, 386, 502, 512, 586, 588, 590, 592, 593, 607, 609, 614, 636, 749], "down2": 8, "down3": 8, "down4": 8, "1024": [8, 42, 43, 749], "up1": 8, "unetup": 8, "up2": 8, "up3": 8, "up4": 8, "outc": 8, "unetoutconv": 8, "x2": [8, 19, 28, 29, 51, 53, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 96, 97, 101, 152, 178, 185, 205, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 281, 288, 293, 320, 323, 328, 329, 330, 332, 334, 339, 343, 352, 358, 367, 440, 480, 491, 586, 587, 588, 590, 593, 600, 621, 628, 631, 636, 640, 643, 644, 647, 702, 737, 763, 769, 771, 773, 775, 779, 780], "x3": [8, 51, 55, 152, 491, 586, 590], "x4": 8, "x5": 8, "in_channel": 8, "out_channel": 8, "mid_channel": 8, "double_conv": 8, "batchnorm2d": [8, 734], "downscal": [8, 55, 78, 497, 498, 519, 590], "maxpool": 8, "doubl": [8, 300, 347], "conv": [8, 592, 731, 785], "maxpool_conv": 8, "upscal": 8, "scale_factor": [8, 54, 77, 355, 390, 785], "align_corn": [8, 54, 77, 355, 390, 785], "conv2dtranspos": [8, 731], "bhwc": 8, "diff_h": 8, "diff_w": 8, "pad_width": [8, 54, 61, 77, 84, 358, 446, 595, 655, 668], "constant_pad": [8, 61, 84, 595], "openmim": 9, "mim": 9, "0rc8": 9, "get_model": 9, "list_model": 9, "mmengin": 9, "configdict": 9, "saniti": [9, 11, 28, 780], "checkpoint": [9, 45, 795], "against": [9, 51, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 152, 271, 290, 320, 321, 324, 333, 352, 367, 486, 487, 488, 489, 526, 586, 588, 590, 593, 600, 631, 632, 634, 637, 698, 751, 782, 787, 795, 802], "zoo": 9, "checkpoint_nam": [9, 11, 28], "convnext": 9, "tiny_32xb128": 9, "noema_in1k": 9, "openmmlab": 9, "appropri": [9, 19, 28, 29, 55, 64, 69, 87, 92, 222, 239, 246, 272, 320, 333, 352, 588, 600, 698, 759, 760, 761, 773, 777, 782], "get_scal": 9, "cfg": [9, 774], "input_shap": [9, 15, 26, 28, 29, 355, 395, 749], "val2017": [9, 11, 28, 45], "000000039769": [9, 11, 28, 45], "_config": 9, "train_pipelin": 9, "tensor_imag": 9, "transpiled_graph": [9, 11, 28], "what": [9, 11, 17, 22, 28, 29, 32, 33, 36, 41, 42, 355, 388, 398, 749, 752, 753, 755, 761, 762, 767, 768, 771, 772, 774, 775, 777, 778, 779, 780, 781, 782, 786, 787, 789, 790, 791, 792, 794, 795, 798, 803, 804, 807], "_f": [9, 11, 28], "comp_model": [9, 11, 28], "np_imag": [9, 25, 28, 29], "jax_imag": 9, "jax_mlp_forward": 9, "timeit": [9, 11, 21, 28, 29, 45, 47], "06": [9, 44, 51, 63, 76, 79, 95, 104, 164, 221, 237, 355, 376, 386, 577, 582, 586, 591, 695, 782, 790], "m": [9, 10, 11, 28, 41, 43, 45, 47, 50, 54, 59, 63, 76, 77, 82, 86, 96, 139, 144, 145, 146, 266, 315, 316, 349, 355, 356, 357, 358, 362, 377, 403, 406, 407, 409, 419, 428, 437, 438, 452, 466, 467, 468, 469, 470, 585, 593, 597, 599, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 680, 693, 694, 695, 749, 755, 760, 761, 762, 768, 787], "per": [9, 11, 21, 42, 44, 54, 58, 77, 81, 310, 349, 355, 356, 358, 373, 374, 375, 391, 392, 393, 394, 414, 453, 592, 606, 608, 609, 610, 611, 614, 618, 731, 761, 768, 777, 780, 790], "block_until_readi": 9, "08": [9, 54, 67, 77, 86, 225, 320, 333, 352, 355, 376, 386, 588, 694, 695, 720, 774], "\u00b5": [9, 11, 21], "made": [9, 11, 28, 54, 61, 77, 356, 358, 408, 426, 427, 428, 664, 752, 755, 759, 761, 763, 764, 767, 768, 773, 774, 776, 778, 779, 780, 783, 785, 787, 789, 802], "significantli": [9, 11, 28, 54, 59, 77, 82, 356, 417, 593, 641, 751, 768, 800], "even": [9, 25, 28, 29, 54, 77, 94, 239, 272, 277, 282, 358, 367, 446, 480, 588, 752, 753, 760, 761, 763, 768, 769, 770, 772, 775, 776, 779, 780, 781, 785, 789, 790, 791, 792, 795, 808], "better": [9, 31, 40, 46, 47, 753, 755, 759, 762, 780, 781, 783, 785, 786, 789, 790, 791, 805], "v100": 9, "3x": 9, "000000283921": [9, 11, 28], "out_torch": [9, 11, 28], "et": [9, 592, 593, 618, 641], "took": [9, 76, 279], "out_jax": [9, 11, 28], "1e": [9, 11, 13, 15, 28, 40, 44, 51, 54, 56, 59, 60, 62, 74, 77, 79, 82, 83, 85, 95, 164, 320, 333, 352, 361, 460, 461, 462, 539, 540, 548, 561, 562, 571, 572, 577, 579, 586, 590, 591, 593, 594, 598, 641, 650, 651, 652, 691, 732, 734, 735, 749, 767, 776, 779, 781, 791, 792], "66m": 9, "53m": 9, "That": [9, 11, 13, 15, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 42, 281, 357, 421, 588, 743, 760, 761, 764, 782, 789, 790, 791, 803], "pretti": [9, 11, 28, 29, 42, 790, 808], "much": [9, 11, 19, 20, 26, 28, 29, 30, 31, 42, 320, 333, 352, 730, 752, 759, 760, 761, 764, 767, 769, 776, 779, 780, 781, 783, 784, 785, 787, 789, 790, 800, 802, 808, 809], "achiev": [9, 11, 28, 749, 768, 769, 776, 777, 782, 785, 790, 792, 797], "solid": [9, 11, 28], "associ": [10, 54, 59, 77, 82, 222, 272, 358, 367, 425, 483, 588, 593, 634, 637, 649, 761, 769, 776, 777, 780, 781, 782, 795], "resnet34_weight": 10, "torch_resnet_34": 10, "resnet_34": 10, "ivy_resnet_34": 10, "comparison": [10, 54, 77, 240, 275, 321, 352, 357, 421, 588, 593, 642, 773], "shown": [10, 26, 28, 69, 71, 92, 256, 279, 322, 352, 588, 759, 760, 761, 763, 766, 768, 769, 771, 773, 774, 775, 780, 781, 782, 783, 784, 787, 789, 795], "8507": 10, "1351": 10, "0069": 10, "85072654": 10, "13506058": 10, "00688287": 10, "resnet50_weight": 10, "torch_resnet_50": 10, "imagenet1k_v2": 10, "resnet_50": 10, "ivy_resnet_50": 10, "3429": 10, "0408": 10, "0121": 10, "34288213": 10, "04077019": 10, "0121203": 10, "autofeatureextractor": [11, 28], "extractor": [11, 13, 15, 28, 44, 749], "arch_nam": [11, 28], "feature_extractor": [11, 28], "inputs_jax": [11, 28], "last_hidden_st": [11, 28], "jax_forward": [11, 28], "jit_appli": 11, "67": [11, 40, 53, 55, 59, 76, 78, 81, 86, 96, 234, 237, 242, 282, 283, 285, 292, 367, 397, 481, 502, 503, 548, 574, 576, 588, 590, 591, 593, 628, 695], "28": [11, 26, 28, 29, 40, 42, 44, 47, 53, 54, 58, 62, 76, 77, 78, 81, 82, 86, 90, 238, 262, 278, 355, 356, 376, 386, 402, 487, 517, 571, 588, 590, 591, 592, 593, 598, 603, 607, 609, 611, 614, 616, 636, 691, 693, 694, 695, 713, 717, 749], "09": [11, 42, 48, 53, 79, 86, 112, 277, 287, 571, 582, 588, 591, 694], "48": [11, 40, 44, 53, 54, 76, 77, 78, 79, 86, 106, 221, 244, 286, 355, 374, 375, 376, 386, 392, 393, 396, 517, 571, 575, 582, 588, 590, 591, 593, 597, 603, 636, 673, 694, 713], "2x": [11, 28], "seen": [13, 15, 20, 26, 28, 356, 362, 407, 468, 740, 751, 752, 768, 769, 771, 773, 780, 782, 787, 789, 790, 808], "veri": [13, 21, 28, 29, 31, 53, 76, 273, 320, 333, 352, 588, 593, 639, 751, 752, 758, 759, 760, 761, 766, 767, 769, 770, 771, 773, 775, 776, 779, 780, 781, 782, 783, 785, 788, 790, 791, 792, 795, 798, 799, 800, 802, 803, 804, 807, 808, 809], "guid": [13, 26, 749, 754, 759, 760, 761, 766, 774, 780, 808], "focu": [13, 26, 759, 778, 800, 801, 804, 809], "involv": [13, 16, 17, 24, 26, 51, 74, 179, 222, 239, 246, 272, 277, 586, 588, 752, 754, 762, 768, 769, 771, 781, 785, 792, 802, 808], "usual": [13, 15, 45, 239, 272, 588, 743, 760, 763, 769, 780, 782, 785], "own": [13, 15, 19, 28, 29, 34, 749, 752, 753, 760, 763, 768, 769, 772, 773, 779, 780, 783, 787, 795, 797, 798, 801, 802, 807, 808], "mlp": 13, "mixer": 13, "retriev": [13, 15, 19, 492, 590, 761, 780], "tf_mlp_encod": [13, 28, 29], "astyp": [13, 15, 20, 42, 43, 44, 51, 58, 74, 81, 586, 592, 608, 610, 611, 614, 749, 769, 779, 780, 785], "output_torch": [13, 15], "output_tf": [13, 15], "output_dens": [13, 28, 29, 749], "dens": [13, 26, 28, 29, 307, 349, 731, 749], "unit": [13, 28, 29, 54, 70, 77, 94, 104, 106, 107, 108, 109, 110, 111, 112, 294, 298, 299, 301, 302, 347, 463, 464, 582, 749, 760, 763, 769, 780, 781, 782, 795, 803, 806], "learn": [13, 15, 19, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 40, 42, 56, 79, 356, 416, 502, 572, 575, 577, 578, 579, 590, 591, 596, 669, 670, 671, 735, 749, 751, 752, 754, 758, 759, 760, 762, 763, 774, 776, 778, 786, 794, 797, 800, 804, 805, 806, 807, 808, 809], "basic": [13, 15, 19, 22, 26, 28, 29, 32, 35, 358, 453, 754, 759, 771, 782], "fulli": [13, 15, 17, 18, 21, 26, 28, 29, 42, 54, 77, 367, 487, 731, 749, 753, 764, 769, 775, 778, 785, 787, 788, 789, 790, 791, 792, 795, 800, 801, 802, 808, 809], "fine": [13, 15, 28, 29, 761, 769, 771, 780, 789, 792, 808], "tune": [13, 15, 28, 29, 807, 808], "ground": [13, 15, 54, 357, 419, 751, 757, 780, 782], "op": [13, 19, 40, 740, 783, 787, 795], "eagertensor": [13, 19, 40, 740, 781], "readi": [13, 15, 20, 21, 22, 30, 31, 32, 33, 34, 35, 42, 44, 759, 760], "explor": [13, 15, 19, 23, 24, 25, 28, 29, 34, 35, 36, 759, 760, 761, 769, 785, 788, 792, 794, 802, 805], "deepmind": [14, 753], "perceiverio": [14, 753], "backbon": [14, 42, 749, 787, 790], "TO": [14, 16, 27], "efficientnet": 15, "include_top": [15, 749], "eff_encod": [15, 749], "applic": [15, 17, 42, 44, 47, 54, 58, 77, 81, 356, 418, 592, 593, 597, 603, 618, 619, 645, 678, 679, 680, 684, 685, 717, 719, 749, 760, 768, 769, 770, 777, 791, 799, 800, 802, 804, 806, 808], "efficientnet_v2": [15, 749], "efficientnetv2b0": [15, 749], "data": [15, 25, 29, 34, 42, 44, 47, 48, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 81, 82, 84, 86, 87, 88, 89, 90, 91, 96, 97, 99, 100, 101, 104, 106, 109, 112, 121, 122, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 191, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 297, 303, 304, 305, 306, 307, 308, 309, 316, 317, 318, 319, 321, 336, 341, 347, 349, 352, 355, 356, 358, 362, 366, 367, 378, 379, 380, 396, 401, 403, 417, 430, 451, 454, 466, 467, 468, 469, 470, 476, 480, 481, 482, 486, 488, 489, 506, 519, 521, 522, 525, 551, 582, 585, 587, 588, 590, 592, 593, 595, 597, 599, 600, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 615, 616, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 654, 657, 658, 660, 661, 663, 664, 668, 676, 693, 694, 695, 697, 698, 699, 701, 702, 707, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 730, 731, 733, 737, 749, 750, 752, 760, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 777, 779, 781, 783, 785, 787, 789, 797, 802, 803, 804, 806, 807, 808], "storag": [15, 42, 43, 752, 790], "googleapi": [15, 42, 43], "efficientnetv2": 15, "b0_notop": 15, "h5": [15, 71], "24274472": 15, "0u": 15, "torch_eff_encod": [15, 749], "1280": [15, 502, 590, 749], "api": [16, 21, 26, 27, 31, 44, 46, 53, 59, 76, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 177, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 367, 480, 585, 586, 588, 593, 595, 600, 601, 602, 603, 604, 620, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 654, 656, 657, 658, 660, 661, 663, 664, 668, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 750, 751, 757, 760, 761, 762, 764, 766, 769, 770, 771, 772, 773, 775, 777, 779, 780, 781, 782, 785, 786, 788, 790, 795, 796, 797, 798, 800, 802, 804, 807, 809], "welcom": [17, 43, 749, 754, 760, 761], "goal": [17, 42, 246, 588, 749, 752, 759, 802, 808], "experi": [17, 44, 760, 773, 782, 788, 790, 795], "varieti": [17, 763, 768, 769, 770, 782, 784, 798, 800, 804, 805, 808, 809], "organ": [17, 752, 764, 767, 776, 780, 783, 797], "main": [17, 29, 50, 54, 59, 77, 82, 132, 144, 145, 146, 304, 315, 316, 349, 356, 358, 401, 435, 585, 593, 623, 624, 645, 759, 760, 761, 763, 766, 767, 777, 779, 800, 802, 803, 808], "rush": [17, 753], "jump": [17, 781], "straight": [17, 749, 768, 780, 782, 789], "quickstart": 17, "introduct": [17, 19, 26, 28, 29, 802], "capabl": [17, 25, 29, 782, 785], "those": [17, 41, 42, 59, 61, 71, 77, 82, 84, 121, 178, 239, 272, 454, 570, 585, 586, 588, 590, 593, 595, 597, 600, 638, 641, 653, 674, 701, 751, 759, 760, 761, 764, 767, 768, 769, 777, 779, 780, 781, 782, 785, 799], "who": [17, 762, 773, 786, 795, 802, 804], "dive": [17, 19, 28, 40, 749, 754, 756, 758, 759, 761, 763, 767, 769, 774, 781, 786, 789, 790, 795, 808], "deeper": [17, 19, 29, 49, 597, 672, 673, 682, 683, 684, 751, 761, 762, 782, 786], "showcas": [17, 749, 794], "real": [17, 25, 53, 54, 67, 76, 77, 90, 96, 106, 109, 112, 142, 143, 219, 220, 221, 222, 224, 225, 226, 227, 228, 237, 239, 240, 242, 244, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 269, 272, 274, 275, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 326, 336, 352, 355, 356, 377, 398, 403, 404, 582, 585, 588, 593, 600, 603, 625, 626, 627, 632, 639, 641, 642, 645, 648, 701, 714, 716, 717, 718, 719, 767, 804], "world": [17, 25, 761, 804], "re": [17, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 45, 47, 54, 55, 64, 77, 87, 212, 310, 349, 358, 447, 448, 502, 587, 590, 593, 595, 600, 643, 661, 700, 702, 750, 751, 752, 754, 759, 760, 761, 762, 763, 769, 778, 779, 780, 781, 783, 785, 789, 792, 795, 802], "beginn": [17, 754, 802], "advanc": [17, 40, 760, 801], "got": [17, 40, 773], "cover": [17, 28, 54, 77, 355, 391, 392, 393, 749, 759, 763, 764, 766, 771, 772, 776, 777, 782, 785, 786], "write": [17, 18, 28, 29, 40, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 153, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 316, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 334, 335, 336, 337, 340, 341, 342, 347, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 407, 408, 411, 412, 413, 414, 419, 420, 421, 422, 423, 431, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 497, 498, 502, 503, 504, 509, 510, 519, 533, 534, 571, 572, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 672, 691, 692, 693, 694, 695, 697, 699, 700, 702, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 749, 753, 758, 759, 761, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 779, 781, 783, 787, 789, 792, 802, 809], "familiar": [17, 18, 19, 759, 760], "concept": [17, 18, 19], "agnost": [17, 18, 19, 20, 28, 29, 30, 34, 40, 749, 764, 775, 787, 789, 792, 795, 808, 809], "unifi": [17, 18, 19, 21, 22, 28, 31, 32, 36, 43, 71, 212, 587, 750, 752, 762, 763, 764, 769, 773, 777, 778, 780, 785, 787, 795, 798, 799, 800, 802, 806, 809], "alongsid": [17, 18, 19, 20, 30, 592, 618, 752], "turn": [17, 18, 21, 31, 58, 81, 94, 378, 379, 380, 592, 615, 731, 753, 760, 766, 767, 770, 771, 780, 782], "wrapper": [17, 18, 21, 764, 766, 767, 769, 773, 776, 779, 780, 789, 797, 798, 802], "unus": [17, 18, 21, 771, 779], "lazi": [17, 18, 21, 24, 31, 34, 35, 46], "eager": [17, 18, 21, 24, 26, 31, 34, 35, 46, 767, 795, 802], "understand": [17, 18, 19, 23, 40, 46, 753, 755, 757, 758, 759, 760, 761, 762, 763, 766, 771, 772, 775, 781, 786, 798, 808], "decor": [17, 18, 23, 34, 46, 496, 590, 757, 763, 764, 767, 769, 770, 776, 779, 780, 781, 785], "roundup": 19, "over": [19, 26, 29, 31, 42, 54, 59, 67, 68, 69, 74, 77, 81, 82, 90, 91, 92, 94, 117, 311, 312, 331, 338, 349, 352, 355, 356, 358, 365, 367, 369, 370, 371, 374, 383, 388, 392, 396, 397, 398, 414, 425, 436, 451, 454, 473, 483, 488, 537, 570, 584, 590, 593, 598, 599, 603, 604, 621, 632, 643, 645, 647, 648, 691, 695, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 734, 740, 743, 749, 751, 753, 760, 761, 765, 771, 772, 778, 779, 781, 783, 787, 789, 795, 800, 802], "indep": [19, 28], "futur": [19, 28, 42, 593, 626, 627, 749, 751, 753, 760, 761, 768, 769, 782, 783, 785, 789, 795, 808], "proof": [19, 28], "delv": [19, 29], "theori": 19, "deep": [19, 26, 28, 40, 71, 502, 590, 749, 751, 754, 756, 758, 759, 761, 763, 766, 767, 769, 774, 778, 781, 786, 789, 790, 800, 802, 805, 806, 808, 809], "esenti": [19, 28], "abstract": [19, 28, 29, 730, 735, 751, 767, 769, 779, 780, 782, 785, 791, 795, 800, 802, 804, 805, 809], "quirk": [19, 28], "perk": [19, 28, 749, 764, 767], "manag": [19, 26, 28, 537, 560, 590, 749, 753, 754, 765, 769, 770, 779, 795, 804, 806], "simpli": [19, 28, 29, 31, 40, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 588, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 637, 638, 639, 641, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 749, 759, 760, 761, 764, 765, 766, 768, 769, 770, 771, 772, 775, 776, 779, 780, 781, 782, 785, 787, 791, 792, 795, 797, 803, 808], "appropi": 19, "string": [19, 28, 29, 44, 54, 55, 58, 71, 77, 81, 149, 150, 162, 169, 191, 192, 193, 194, 195, 197, 206, 213, 214, 218, 300, 347, 355, 356, 358, 397, 404, 446, 482, 500, 586, 587, 590, 592, 593, 605, 606, 607, 608, 610, 612, 614, 627, 729, 743, 765, 766, 768, 769, 770, 773, 780, 787, 790], "simplest": [19, 760, 771, 782, 785], "interact": [19, 28, 43, 46, 759, 801, 802, 807], "submodul": [19, 28, 42, 44, 96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 729, 730, 731, 733, 734, 735, 736, 759, 760, 761, 763, 766, 768, 770, 776, 777, 782, 786, 787, 791, 797], "ones": [19, 26, 28, 40, 46, 50, 54, 56, 58, 63, 71, 73, 77, 81, 86, 132, 136, 141, 143, 148, 198, 199, 235, 304, 349, 367, 488, 571, 585, 587, 588, 591, 592, 610, 611, 693, 694, 695, 749, 759, 764, 768, 771, 775, 776, 782, 789, 790, 802], "nativearrai": [19, 28, 29, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 122, 123, 129, 131, 136, 137, 138, 139, 140, 141, 143, 144, 145, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 170, 171, 172, 174, 176, 178, 179, 185, 195, 196, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 308, 309, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 480, 481, 482, 483, 484, 491, 494, 495, 497, 498, 502, 503, 504, 506, 509, 510, 511, 512, 513, 515, 517, 518, 519, 522, 525, 526, 528, 533, 534, 535, 538, 547, 548, 549, 550, 551, 553, 555, 556, 558, 569, 571, 572, 573, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 674, 675, 679, 680, 681, 684, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 736, 764, 767, 771, 773, 775, 776, 777, 779, 780, 783, 784, 787, 789, 797], "select": [19, 28, 33, 46, 54, 67, 77, 90, 356, 358, 367, 404, 413, 454, 481, 482, 603, 711, 712, 759, 760, 761, 768, 779, 782, 787, 789, 792, 795, 802, 805, 806], "lastli": [19, 28, 749, 764], "recurs": [19, 28, 29, 42, 44, 49, 71, 72, 165, 166, 198, 199, 507, 508, 586, 587, 590, 597, 672, 673, 676, 682, 683, 684, 760, 763, 766, 767, 776, 779, 791, 795], "native_arrai": [19, 28, 29, 50, 51, 53, 73, 75, 76, 77, 78, 89, 104, 107, 136, 139, 141, 143, 148, 151, 152, 153, 154, 162, 167, 174, 196, 205, 213, 229, 233, 234, 238, 239, 240, 242, 246, 250, 258, 259, 267, 272, 275, 278, 281, 286, 345, 357, 358, 422, 446, 452, 455, 491, 521, 522, 525, 555, 582, 585, 586, 587, 588, 590, 592, 593, 594, 595, 599, 600, 603, 604, 606, 607, 614, 619, 622, 627, 633, 634, 642, 643, 645, 648, 650, 652, 653, 660, 692, 701, 710, 716, 719, 721, 740, 757, 781, 782], "data_class": [19, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 374, 375, 502, 506, 641, 666], "implement": [19, 20, 28, 30, 34, 42, 45, 51, 52, 54, 65, 66, 74, 75, 77, 82, 89, 94, 151, 165, 166, 179, 198, 199, 213, 219, 220, 221, 224, 225, 226, 227, 236, 237, 239, 242, 244, 246, 260, 261, 262, 263, 272, 274, 277, 281, 284, 285, 289, 290, 341, 352, 356, 367, 402, 403, 486, 487, 507, 508, 586, 587, 588, 590, 592, 593, 601, 602, 603, 618, 625, 626, 627, 636, 645, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 740, 749, 757, 759, 762, 763, 764, 765, 767, 769, 770, 772, 773, 775, 776, 777, 779, 781, 782, 783, 785, 787, 789, 790, 791, 792, 794, 795, 797, 799, 800, 801, 802, 805, 808, 809], "low": [19, 28, 31, 47, 54, 58, 63, 81, 86, 355, 397, 592, 599, 605, 606, 607, 608, 610, 612, 614, 693, 695, 767, 773, 779, 780, 785, 787, 798, 800, 802, 803, 804, 806, 808], "level": [19, 28, 29, 31, 78, 494, 729, 749, 753, 754, 759, 761, 767, 769, 773, 776, 778, 779, 780, 784, 785, 786, 787, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809], "fundament": [19, 28, 751, 768, 780, 785, 787, 802], "common": [19, 22, 28, 32, 53, 54, 71, 76, 178, 249, 257, 323, 328, 352, 586, 588, 751, 754, 757, 759, 760, 766, 769, 770, 771, 776, 777, 780, 783, 785, 795, 799, 802, 809], "signatur": [19, 28, 358, 367, 446, 480, 752, 769, 770, 771, 772, 775, 779, 782, 783, 785, 799, 808], "matmul": [19, 28, 29, 45, 59, 82, 570, 590, 593, 641, 765, 782, 783, 787], "to_n": [19, 28, 29, 40, 49, 72, 787], "jaxlib": [19, 25, 43, 740, 760, 764, 769, 770, 775, 783, 787, 789], "xla_extens": [19, 25, 740, 764, 769, 770, 775, 783, 787, 789], "arrayimpl": [19, 25, 740], "why": [19, 749, 750, 752, 761, 779, 789], "disabl": [19, 28, 766], "array_mod": [19, 28, 535, 558, 590, 784], "set_array_mod": [19, 28, 558, 590, 784], "sigmoid": [19, 28, 29, 40, 48, 54, 70, 77, 296, 347, 362, 466, 582, 727, 787, 790, 791], "divid": [19, 24, 28, 29, 45, 53, 54, 55, 61, 71, 76, 77, 84, 96, 97, 246, 361, 460, 461, 462, 548, 588, 590, 595, 662, 764, 767, 771, 774, 782], "exp": [19, 28, 29, 53, 54, 76, 77, 110, 112, 244, 264, 277, 296, 347, 355, 382, 387, 582, 588, 593, 639, 778, 780], "high": [19, 28, 29, 47, 54, 58, 63, 81, 86, 355, 397, 542, 590, 592, 599, 605, 606, 607, 608, 610, 612, 614, 693, 695, 753, 759, 773, 778, 780, 790, 797, 798, 799, 800, 801, 802, 806, 808, 809], "most": [19, 28, 29, 71, 73, 94, 141, 356, 403, 542, 564, 585, 590, 593, 625, 626, 746, 749, 752, 758, 759, 760, 764, 767, 768, 769, 770, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 795, 802, 803, 805, 806, 808, 809], "further": [19, 71, 97, 752, 753, 761, 763, 764, 768, 771, 773, 775, 776, 779, 780, 782, 786, 787, 790, 791, 807, 808], "tutori": [19, 25, 26, 749, 761, 780, 796], "congratul": [19, 25], "come": [19, 42, 759, 760, 761, 764, 768, 780, 784, 785, 791, 793, 797, 802], "good": [19, 28, 29, 755, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 787, 788, 791], "foundat": [19, 752, 805], "power": [19, 28, 29, 53, 54, 55, 59, 76, 77, 78, 82, 96, 97, 233, 242, 243, 277, 319, 328, 349, 352, 539, 549, 561, 588, 590, 593, 597, 633, 646, 678, 730, 784, 789, 790, 791, 802, 804, 808], "defin": [20, 26, 28, 29, 30, 50, 54, 55, 59, 73, 77, 78, 82, 110, 141, 144, 145, 146, 222, 239, 246, 272, 273, 281, 283, 286, 295, 305, 308, 309, 310, 315, 316, 317, 318, 322, 347, 349, 352, 355, 356, 358, 367, 390, 402, 446, 452, 483, 517, 518, 538, 582, 585, 588, 590, 593, 603, 621, 626, 627, 640, 714, 715, 716, 718, 749, 759, 760, 764, 765, 768, 769, 772, 775, 778, 780, 781, 782, 783, 789, 791, 795, 797, 799, 800, 801, 802, 803, 806, 808, 809], "div": [20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35], "sub": [20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 54, 59, 61, 71, 72, 76, 77, 78, 82, 84, 97, 271, 356, 358, 367, 404, 432, 441, 458, 486, 487, 593, 595, 596, 624, 662, 669, 670, 671, 729, 759, 761, 762, 767, 773, 780, 781, 782, 789, 790, 791, 798], "x_": [20, 30, 283, 588], "82997245": 20, "44733784": 20, "32163444": 20, "93330479": 20, "52438271": 20, "20438017": 20, "252316": 20, "0827222": 20, "26017165": 20, "88881904": 20, "compat": [20, 26, 30, 34, 40, 47, 53, 59, 61, 64, 67, 68, 76, 82, 84, 87, 90, 91, 96, 97, 153, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 293, 586, 588, 593, 595, 600, 603, 604, 621, 634, 637, 640, 643, 647, 648, 660, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 749, 752, 765, 775, 780, 781, 783, 787, 795], "sever": [20, 21, 30, 31, 33, 34, 35, 54, 77, 94, 355, 356, 369, 370, 371, 414, 760, 761, 783, 795, 800, 806], "pro": [20, 21, 22, 30, 31, 32, 33, 34, 35], "pick": [21, 31, 730], "purpos": [21, 28, 29, 31, 42, 44, 146, 244, 262, 315, 349, 585, 588, 593, 639, 761, 762, 764, 767, 768, 770, 771, 773, 775, 776, 777, 780, 782, 785, 786, 789, 797, 801, 803, 806, 807, 808], "illustr": [21, 31, 765, 787, 794], "trigger": [21, 31, 733, 759, 774], "unif": [21, 23, 24, 31, 33, 752, 754, 789, 798, 808], "detail": [21, 31, 44, 48, 53, 59, 61, 65, 70, 76, 77, 82, 84, 88, 104, 106, 109, 112, 133, 290, 356, 400, 431, 582, 585, 588, 601, 624, 631, 637, 641, 664, 703, 704, 705, 706, 727, 749, 759, 761, 763, 765, 766, 767, 768, 774, 775, 776, 777, 780, 781, 782, 783, 784, 787, 789, 790, 791, 804, 808], "55563945": 21, "65538704": 21, "14150524": 21, "46951997": 21, "30220294": 21, "14739668": 21, "57017946": 21, "91962677": 21, "51029003": 21, "59644395": 21, "stack": [21, 31, 40, 44, 54, 59, 61, 71, 77, 82, 84, 96, 144, 145, 316, 349, 356, 358, 403, 431, 433, 442, 459, 536, 545, 567, 585, 590, 593, 595, 597, 622, 624, 625, 626, 627, 629, 631, 633, 634, 635, 637, 638, 639, 641, 642, 645, 672, 682, 683, 731, 749, 758, 763, 765, 779, 787, 798, 800, 807, 808], "constitu": [21, 31, 71, 792], "comp": [21, 31], "manner": [21, 29, 31, 41, 49, 72, 597, 684, 751, 760, 770, 772, 776, 780, 783, 790, 794, 795, 798, 800, 808, 809], "5556394": 21, "655387": 21, "1415051": 21, "4695197": 21, "3022028": 21, "1473966": 21, "5701794": 21, "91962665": 21, "51028997": 21, "5964439": 21, "assess": [21, 31, 759, 785], "985": 21, "76": [21, 40, 53, 67, 74, 76, 77, 86, 167, 221, 237, 285, 386, 586, 588, 593, 597, 603, 643, 680, 694, 713], "000": [21, 76, 273, 757, 768], "69": [21, 40, 47, 53, 79, 86, 220, 262, 355, 376, 386, 575, 588, 591, 593, 632, 633, 694, 782, 790], "24": [21, 40, 42, 53, 54, 59, 67, 76, 77, 78, 81, 82, 86, 96, 234, 242, 257, 259, 272, 282, 283, 286, 331, 334, 352, 355, 367, 373, 375, 376, 386, 391, 392, 393, 394, 397, 481, 502, 503, 588, 590, 593, 597, 603, 606, 624, 632, 636, 673, 684, 693, 694, 695, 711, 713, 773, 790], "slower": [21, 780], "On": [21, 28, 29, 760, 769, 770, 774, 780, 782, 785, 788, 792], "hand": [21, 53, 749, 763, 769, 770, 774, 776, 782, 795], "singl": [21, 31, 40, 45, 53, 63, 71, 76, 86, 291, 333, 352, 356, 362, 413, 467, 556, 569, 573, 588, 590, 591, 592, 599, 601, 618, 693, 694, 695, 703, 731, 753, 759, 760, 761, 763, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 790, 791, 792, 795], "learnt": [22, 32, 794], "two": [22, 32, 34, 40, 50, 54, 59, 65, 77, 78, 82, 96, 97, 118, 121, 132, 139, 144, 145, 146, 177, 185, 233, 247, 248, 282, 315, 316, 320, 329, 330, 332, 333, 335, 337, 344, 349, 352, 355, 356, 357, 358, 367, 383, 401, 402, 403, 413, 422, 427, 446, 452, 455, 480, 489, 494, 584, 585, 586, 588, 590, 593, 595, 601, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 665, 703, 704, 705, 706, 731, 753, 759, 760, 763, 764, 769, 770, 771, 772, 776, 780, 781, 782, 785, 786, 790, 792, 799, 807], "workflow": [22, 32, 43, 753, 759, 761, 765, 769, 778, 780, 790, 793, 797, 801, 808, 809], "ivy_norm": 22, "jax_norm": [22, 28, 29], "wider": [22, 32, 542, 564, 590, 784, 808], "avoid": [22, 32, 34, 54, 61, 77, 239, 244, 246, 262, 272, 358, 361, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 460, 461, 462, 496, 512, 537, 542, 564, 588, 590, 595, 656, 657, 658, 660, 662, 663, 665, 667, 760, 761, 765, 766, 767, 768, 769, 773, 777, 780, 782, 783, 784, 785, 802], "conveni": [22, 32, 759, 769, 770, 775, 781, 788, 790, 791, 797, 808], "act": [22, 32, 54, 77, 345, 353, 761, 771, 784, 795, 809], "shorthand": [22, 32, 34, 782], "pair": [22, 32, 42, 54, 58, 81, 227, 246, 311, 344, 349, 352, 355, 388, 397, 398, 588, 592, 593, 605, 606, 607, 608, 610, 612, 614, 619, 621], "93968587": 22, "26075466": 22, "22723222": 22, "06276492": 22, "47426987": 22, "72835908": 22, "71737559": 22, "50411096": 22, "65419174": 22, "15576624": 22, "variou": [22, 32, 34, 40, 749, 761, 763, 768, 769, 772, 773, 775, 777, 778, 780, 781, 782, 794, 796, 797, 798, 800, 801, 802, 805, 808], "implic": [22, 32, 33, 36, 767], "actual": [23, 33, 757, 761, 762, 768, 776, 777, 779, 780, 781, 782, 785, 786, 791, 795, 803, 808], "occur": [23, 28, 29, 33, 46, 51, 53, 65, 74, 76, 88, 154, 273, 289, 586, 588, 600, 601, 698, 699, 703, 704, 705, 706, 763, 768, 770, 773, 784], "becaus": [23, 31, 33, 43, 54, 355, 377, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 791, 792, 795, 802, 805, 808], "altern": [23, 33, 43, 54, 77, 94, 320, 326, 330, 332, 333, 334, 335, 337, 338, 339, 343, 344, 352, 749, 759, 760, 766, 779, 790, 805], "dummi": [23, 24, 33, 34, 35, 41, 761], "assum": [23, 24, 33, 34, 35, 50, 53, 54, 55, 58, 59, 60, 76, 77, 78, 81, 82, 83, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 304, 316, 322, 325, 341, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 414, 446, 480, 483, 509, 513, 515, 517, 526, 556, 580, 585, 586, 588, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 743, 749, 760, 763, 765, 768, 769, 772, 781, 782, 785, 789, 790, 795], "slowli": [23, 33], "norm": [23, 33, 34, 54, 55, 59, 77, 78, 82, 93, 94, 355, 356, 376, 377, 381, 382, 383, 386, 387, 388, 398, 400, 404, 463, 464, 465, 497, 498, 519, 590, 593, 632, 648, 691, 731, 735, 783], "slow": [23, 33, 760], "54320029": 23, "30825614": 23, "17176882": 23, "14351968": 23, "98934778": 23, "82910388": 23, "89044143": 23, "71881472": 23, "1666683": 23, "14417601": 23, "norm_comp": [23, 33, 34], "float64": [23, 24, 51, 54, 63, 67, 73, 74, 76, 77, 78, 86, 90, 121, 134, 135, 151, 154, 158, 159, 164, 165, 168, 169, 174, 175, 179, 181, 182, 188, 191, 273, 328, 352, 367, 480, 528, 585, 586, 590, 593, 599, 626, 627, 632, 648, 694, 695, 712, 769, 781, 782], "norm_tran": [23, 33], "know": [23, 24, 33, 34, 35, 65, 601, 703, 704, 705, 706, 753, 756, 759, 761, 770, 777, 781, 782, 785, 803], "09422972": 24, "46009917": 24, "0881108": 24, "86487021": 24, "83629996": 24, "10654466": 24, "89883457": 24, "02893805": 24, "15644584": 24, "41495672": 24, "wherea": [24, 35, 761, 764, 765, 767, 769, 770, 771, 775, 776, 782, 792, 799], "subtract": [24, 28, 29, 53, 76, 96, 97, 134, 358, 446, 585, 588, 764, 767, 771], "begin": [24, 54, 77, 283, 358, 446, 447, 448, 449, 450, 588, 597, 672, 683, 729, 760, 763, 768, 781], "demonstr": [25, 28, 29, 43, 769, 771, 773, 789], "scenario": [25, 778], "often": [25, 753, 758, 763, 773, 775, 776, 780, 782, 795, 803, 806, 809], "fortun": [25, 26, 763], "everyth": [25, 43, 743, 749, 753, 759, 760, 761, 762, 768, 771, 779, 780, 781, 782, 788, 795, 796], "practic": [25, 761, 765, 768, 780, 805], "though": [25, 758, 759, 761, 769, 770, 772, 776, 779, 780, 785, 790, 795], "sharp": [25, 28, 29, 749], "verifi": [25, 759, 769, 770, 780, 782, 783], "prefer": [25, 28, 29, 246, 588, 749, 760, 767, 773, 777, 780, 796, 802], "whole": [26, 54, 77, 358, 361, 453, 463, 464, 465, 761, 766, 774], "machin": [26, 31, 32, 40, 46, 54, 59, 77, 82, 164, 167, 356, 404, 586, 593, 634, 637, 752, 760, 763, 776, 794, 797, 800, 802, 804, 805, 806, 807, 808], "full": [26, 54, 59, 77, 81, 82, 94, 164, 251, 259, 313, 314, 349, 356, 357, 358, 417, 421, 447, 450, 536, 545, 559, 567, 585, 586, 588, 590, 592, 593, 607, 609, 610, 611, 634, 638, 640, 641, 749, 752, 753, 760, 761, 766, 769, 772, 773, 775, 776, 780, 782, 785, 787, 795, 800, 802, 808], "neccessari": 26, "32": [26, 28, 29, 40, 42, 43, 44, 53, 54, 63, 76, 77, 81, 82, 86, 96, 97, 106, 163, 221, 233, 234, 243, 257, 279, 282, 283, 322, 352, 355, 356, 358, 367, 374, 375, 376, 386, 396, 397, 402, 430, 481, 502, 518, 582, 586, 588, 590, 592, 593, 599, 600, 603, 607, 609, 610, 611, 614, 616, 631, 636, 693, 694, 695, 702, 713, 749, 768, 778, 790, 807], "kernel_s": [26, 28, 29, 44, 54, 77, 355, 373, 374, 375, 731, 737], "flatten": [26, 28, 29, 42, 44, 47, 54, 55, 59, 61, 64, 65, 77, 78, 82, 84, 87, 88, 324, 338, 352, 356, 358, 367, 401, 445, 449, 454, 457, 478, 485, 486, 487, 488, 489, 502, 506, 590, 593, 595, 600, 601, 628, 636, 648, 654, 659, 661, 698, 699, 703, 704, 705, 706, 729, 749, 779, 785], "input_arrai": [26, 28, 29, 779], "torch_model": [26, 28, 29, 46], "thank": [26, 752, 790], "fledg": [26, 760, 787, 788], "output_arrai": [26, 28, 29], "0768": [26, 111, 582], "0727": 26, "0942": 26, "1300": 26, "1350": [26, 54, 77, 356, 410], "0839": 26, "1511": 26, "1061": 26, "0606": 26, "0896": 26, "softmaxbackward0": 26, "furthermor": 26, "interest": [26, 28, 40, 239, 272, 588, 759, 761], "continu": [26, 28, 29, 44, 120, 286, 584, 588, 749, 752, 753, 758, 759, 760, 762, 763, 779, 782, 795, 802], "regress": [27, 802, 809], "checkout": [28, 43, 761, 763, 782], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 28, "pyvi": [28, 29], "theoret": 28, "aspect": [28, 29, 754, 778, 790, 802], "switch": [28, 40, 765, 773, 776, 777, 809], "easiest": [28, 749, 756, 760, 796], "defer": [28, 29, 759, 764, 769, 770, 776, 779, 780, 782, 808], "similarli": [28, 41, 139, 146, 222, 315, 349, 585, 588, 765, 769, 780, 785, 789, 808], "essenc": [28, 803, 808], "regardless": [28, 29, 40, 71, 753, 754, 769, 773, 789, 792], "being": [28, 29, 40, 54, 71, 77, 92, 96, 100, 121, 356, 358, 410, 446, 543, 585, 590, 593, 627, 729, 730, 749, 752, 753, 760, 761, 763, 764, 765, 767, 769, 770, 771, 775, 777, 779, 780, 781, 782, 783, 785, 787, 790, 794, 795, 798, 800, 801, 802, 803, 808, 809], "slide": [28, 54, 58, 77, 81, 355, 373, 374, 375, 391, 392, 393, 394, 397, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731], "could": [28, 29, 34, 65, 601, 703, 704, 705, 706, 752, 753, 759, 760, 761, 763, 768, 769, 771, 777, 779, 780, 781, 782, 787, 789, 790, 791, 802, 807, 808], "regressor": [28, 29, 749], "input_dim": [28, 29, 43, 749], "output_dim": [28, 29, 43, 749], "linear0": [28, 29, 40, 749, 790, 791], "linear1": [28, 29, 40, 749, 790, 791], "instanti": [28, 29, 772], "adam": [28, 29, 40, 44, 56, 79, 493, 571, 572, 577, 590, 591, 735, 749, 790, 791, 792, 802], "n_training_exampl": [28, 29, 749], "2000": [28, 29, 77, 305, 349, 749], "random_norm": [28, 29, 58, 59, 63, 81, 82, 86, 502, 590, 592, 593, 599, 607, 609, 610, 611, 614, 617, 641, 749], "linspac": [28, 29, 50, 73, 121, 585, 749, 775, 785, 787, 809], "loss_fn": [28, 29, 40, 42, 44, 749, 790, 791, 792], "pred": [28, 29, 43, 44, 54, 60, 77, 83, 357, 419, 421, 594, 650, 651, 652, 749, 767, 776, 779], "epoch": [28, 29, 42, 44, 749], "loss": [28, 29, 42, 44, 54, 77, 94, 419, 420, 421, 422, 423, 542, 564, 590, 650, 651, 652, 749, 768, 769, 776, 780, 783, 784, 790, 791, 792, 802, 809], "gradient": [28, 29, 42, 44, 54, 77, 94, 212, 346, 352, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 587, 596, 669, 670, 671, 735, 749, 762, 783, 790, 791, 794, 795, 802], "grad": [28, 29, 40, 44, 571, 591, 735, 749, 778, 790, 791, 792], "execute_with_gradi": [28, 29, 40, 44, 591, 749, 790, 791, 792, 795], "lambda": [28, 29, 45, 47, 118, 120, 501, 573, 574, 576, 581, 584, 590, 591, 593, 597, 626, 679, 680, 684, 749, 759, 776, 777, 778, 781, 785, 787, 790], "2d": [28, 29, 44, 54, 77, 94, 304, 349, 355, 356, 358, 367, 370, 371, 378, 379, 412, 417, 427, 435, 480, 731, 749, 780, 785], "5f": [28, 29, 749], "nonetheless": [28, 29], "slight": [28, 29, 769, 782, 791], "introduc": [28, 29, 246, 588, 595, 601, 661, 703, 751, 767, 768, 769, 777, 781, 782, 785, 790], "address": [28, 29, 55, 555, 590, 753, 759, 761, 763, 764, 775, 787, 798, 800, 802, 808], "extract": [28, 29, 36, 43, 54, 77, 358, 430, 454, 780, 783, 798, 802, 803, 808], "gc": [28, 29], "decompos": [28, 29, 54, 77, 94, 313, 314, 330, 337, 349, 352, 356, 410, 415, 418, 780], "x0": [28, 29, 47, 78, 494, 590, 771], "normalize_comp": [28, 29], "html": [28, 29, 43, 53, 76, 146, 154, 242, 252, 253, 268, 315, 349, 367, 480, 585, 586, 588, 593, 595, 603, 639, 668, 718, 752, 772], "fname": [28, 29, 45, 47, 733, 790], "anticip": [28, 29], "than": [28, 29, 31, 34, 53, 54, 55, 58, 59, 61, 63, 64, 65, 67, 71, 76, 77, 78, 81, 82, 84, 86, 87, 88, 90, 96, 97, 121, 134, 164, 212, 220, 221, 224, 225, 227, 228, 231, 233, 235, 239, 245, 246, 260, 261, 262, 263, 270, 272, 277, 281, 283, 285, 286, 290, 291, 292, 297, 303, 320, 321, 333, 340, 349, 352, 355, 356, 358, 367, 376, 377, 382, 383, 386, 387, 388, 398, 399, 400, 415, 418, 437, 438, 481, 482, 483, 521, 522, 525, 542, 564, 585, 586, 587, 588, 590, 592, 593, 595, 599, 600, 601, 603, 619, 621, 631, 632, 633, 634, 637, 648, 653, 657, 663, 695, 701, 704, 705, 706, 711, 712, 717, 718, 719, 720, 731, 752, 755, 757, 761, 763, 767, 768, 769, 771, 773, 779, 780, 781, 782, 783, 784, 785, 787, 790, 791, 792, 795, 796, 799, 800, 801, 802, 808, 809], "addition": [28, 29, 767, 779, 780, 808], "normalize_native_comp": [28, 29], "immedi": [28, 29, 755, 760], "summar": [28, 29, 94, 782], "codebas": [28, 29, 210, 211, 587, 753, 754, 762, 769, 774, 779, 780, 782, 783, 786], "thought": [28, 29, 752, 760, 761, 775, 800], "No": [28, 29, 42, 54, 60, 77, 83, 357, 420, 421, 422, 423, 594, 650, 761, 768, 769, 802], "matter": [28, 29, 34, 751, 771], "jax_out": [28, 29], "ideal": [28, 29, 768, 780, 785, 790], "But": [28, 29, 767, 768, 772, 774, 777, 785, 792], "bring": [28, 29, 752, 763, 782, 787, 788, 797], "wise": [28, 48, 53, 54, 59, 70, 76, 77, 82, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 280, 281, 288, 293, 294, 296, 298, 299, 301, 302, 320, 321, 326, 327, 328, 329, 332, 333, 334, 335, 339, 340, 343, 344, 347, 352, 355, 356, 358, 378, 379, 380, 402, 407, 433, 440, 442, 443, 459, 582, 588, 595, 621, 653, 735, 785], "vision": [28, 29, 47, 749, 755, 793, 798, 808], "worth": [28, 29], "differenti": [28, 29, 794, 802], "chosen": [28, 29, 47, 121, 227, 585, 588, 600, 702, 759, 768, 780], "plai": [28, 29, 357, 421, 749, 760, 764, 770, 780, 782, 792, 802, 805], "critic": [28, 29, 802, 808], "role": [28, 29, 749, 761, 770, 780, 788, 803, 805, 809], "dl": [28, 29], "cnn": [28, 29, 802], "effortlessli": [28, 29], "previous": [28, 29, 559, 590, 740, 760, 765, 776, 778, 782, 787], "pre": [28, 29, 749, 755, 757, 759, 782, 792, 795, 796, 802], "default_devic": [28, 29, 205, 208, 209, 210, 216, 217, 587, 770, 773], "as_n": [28, 29, 51, 52, 71, 74, 75, 157, 158, 159, 160, 161, 162, 168, 195, 196, 208, 586, 587, 769], "certainli": [28, 29, 749, 752, 808], "upon": [28, 29, 46, 761, 771, 779, 782, 785, 795, 801, 802], "unnecessari": [28, 29, 780], "consist": [28, 29, 67, 71, 239, 246, 272, 356, 403, 588, 593, 603, 625, 626, 713, 732, 733, 751, 763, 764, 768, 769, 774, 779, 787, 803], "extend": [28, 29, 54, 77, 358, 367, 446, 483, 765, 766, 772, 773, 775, 780, 783, 795, 799, 802, 808], "infrastructur": [28, 29, 798, 804, 805], "coco": 28, "structur": [29, 71, 74, 97, 164, 167, 499, 590, 597, 676, 685, 729, 749, 759, 761, 764, 767, 776, 781, 782, 783, 790, 791, 801, 802], "seamlessli": [29, 782], "benefit": [29, 752, 753, 760, 764, 767, 779, 785, 789, 790, 795, 800, 804, 807], "therefor": [29, 34, 50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 178, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 439, 446, 447, 449, 456, 480, 483, 487, 495, 503, 504, 509, 513, 515, 517, 519, 533, 551, 556, 580, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 749, 751, 755, 759, 761, 763, 764, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 785, 787, 789, 791, 795, 799, 802, 808], "wide": [29, 749, 761, 782, 800, 802], "prepar": [29, 42, 44, 47, 749, 768], "plenti": 29, "resourc": [29, 754, 759, 760, 768], "visit": [29, 760, 761, 768], "page": [29, 749, 759, 760, 761, 766, 768, 788, 789, 792, 793, 796], "newli": [30, 31, 43, 45, 51, 74, 151, 496, 586, 590, 761, 765, 768, 779, 782], "randon": [30, 31, 33, 34, 35], "mean_": 30, "std_": 30, "detect": [30, 34, 53, 71, 76, 254, 588, 597, 672, 683, 759, 760, 765, 767, 768, 774, 782, 790, 791], "inspect": [30, 34, 492, 590], "__": [30, 31, 32, 33, 34, 35, 71, 771, 790], "exhibit": [31, 808], "via": [31, 34, 246, 356, 415, 418, 588, 597, 682, 683, 761, 763, 767, 769, 770, 779, 783, 785, 787, 789, 790, 794, 802], "script": [31, 749, 755, 760, 761, 768, 771, 787, 795, 802], "low_level": 31, "chain": [31, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 378, 379, 380, 419, 420, 422, 423, 431, 452, 455, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 596, 597, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 669, 670, 674, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 729, 736, 764, 767, 778, 780, 791, 792, 795, 802], "un": [31, 169, 586, 769, 787], "partial_comp": 31, "time_funct": 31, "slowest": [31, 54, 61, 77, 84, 358, 436, 595, 660], "express": [31, 53, 54, 76, 77, 220, 224, 226, 227, 236, 238, 278, 284, 289, 341, 352, 588, 737, 772, 780, 787, 792, 802, 803], "fastest": [31, 54, 61, 77, 84, 356, 358, 413, 436, 595, 660], "maxim": [31, 776, 779, 787, 799, 800, 804, 805, 806], "conclud": [32, 783], "collect": [32, 42, 44, 46, 47, 49, 71, 72, 582, 587, 590, 591, 592, 594, 597, 598, 599, 685, 727, 731, 732, 734, 735, 760, 768, 773, 777, 778, 781, 782, 794, 800, 802, 805], "global": [33, 34, 44, 55, 71, 78, 97, 157, 158, 159, 160, 161, 210, 211, 212, 539, 540, 543, 548, 549, 561, 562, 565, 586, 587, 590, 734, 740, 760, 764, 765, 768, 769, 770, 773, 776, 780, 787, 802], "approach": [33, 759, 760, 761, 764, 767, 769, 770, 776, 780, 782, 783, 785, 789, 790, 795, 799, 806, 808], "prioriti": [34, 71, 740, 761, 770, 779], "normalize_via_oper": 34, "determin": [34, 53, 54, 59, 61, 65, 68, 71, 76, 77, 78, 82, 89, 91, 94, 96, 97, 132, 154, 156, 163, 169, 170, 171, 172, 174, 175, 176, 191, 201, 203, 204, 215, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 239, 242, 244, 246, 252, 253, 254, 255, 256, 260, 261, 262, 263, 264, 269, 272, 277, 281, 284, 285, 286, 287, 288, 289, 290, 293, 336, 341, 352, 355, 356, 357, 367, 390, 404, 419, 480, 491, 494, 515, 516, 520, 521, 522, 523, 524, 525, 551, 569, 585, 586, 587, 588, 590, 593, 595, 596, 601, 604, 620, 621, 622, 624, 628, 629, 631, 633, 634, 636, 637, 639, 640, 645, 647, 648, 654, 669, 670, 671, 703, 704, 705, 706, 707, 721, 722, 730, 734, 751, 767, 769, 770, 772, 776, 780, 782, 784, 785], "might": [34, 55, 178, 501, 586, 590, 757, 759, 760, 761, 768, 769, 771, 774, 777, 780, 782, 783, 785, 787, 789, 790, 797], "think": [34, 759, 761, 768, 771, 785, 803], "uniqu": [34, 44, 54, 55, 65, 77, 78, 88, 358, 445, 446, 457, 526, 590, 596, 597, 601, 669, 670, 671, 674, 678, 703, 704, 705, 706, 749, 751, 763, 767, 776, 780, 781, 785, 795, 805], "rule": [34, 51, 53, 54, 59, 74, 76, 77, 82, 151, 154, 177, 178, 179, 228, 239, 272, 274, 281, 283, 291, 293, 358, 367, 434, 480, 586, 588, 593, 595, 620, 621, 628, 633, 636, 640, 654, 743, 763, 764, 767, 768, 769, 771, 774, 775, 776, 778, 782, 785, 803], "broadcast": [34, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 96, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 301, 302, 303, 304, 316, 321, 322, 323, 324, 328, 330, 332, 334, 335, 336, 337, 341, 347, 349, 352, 355, 356, 357, 358, 361, 362, 367, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 396, 399, 400, 401, 407, 408, 411, 412, 414, 419, 420, 421, 422, 423, 429, 431, 434, 439, 447, 448, 449, 450, 452, 455, 456, 460, 463, 464, 465, 466, 467, 469, 470, 480, 481, 482, 483, 486, 487, 488, 489, 497, 498, 502, 503, 504, 509, 510, 519, 533, 534, 571, 572, 575, 577, 578, 579, 580, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 638, 640, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 672, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 706, 707, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 743, 767, 769, 771, 772, 773, 782, 783, 787], "elementwis": [34, 54, 62, 77, 85, 295, 297, 344, 347, 593, 598, 646, 691, 776, 783, 787], "taken": [34, 54, 59, 77, 82, 325, 352, 355, 398, 593, 624, 759, 768, 780, 783, 792, 803], "rather": [34, 55, 71, 78, 121, 212, 521, 522, 525, 585, 587, 590, 752, 757, 761, 763, 767, 769, 772, 780, 781, 782, 783, 792, 795, 798, 801, 802], "fact": [34, 94, 761, 763, 768, 780, 782, 787, 790], "pure": [34, 44, 749, 772, 775, 780, 785, 789, 792, 795, 802, 808, 809], "consum": [34, 767, 768, 775, 781, 782], "conflict": [34, 760, 761, 768, 780, 790], "error": [34, 45, 47, 53, 54, 58, 71, 76, 77, 81, 104, 241, 289, 356, 357, 367, 368, 415, 418, 419, 420, 487, 490, 537, 582, 588, 590, 592, 593, 603, 619, 639, 642, 714, 716, 732, 733, 735, 746, 753, 754, 758, 760, 761, 763, 764, 765, 768, 769, 770, 771, 774, 775, 780, 782, 783, 784, 789, 795, 802], "thrown": [34, 519, 590, 764, 770, 773, 774, 795], "consider": [34, 751, 759, 771, 775, 785, 799, 800], "combin": [34, 54, 71, 77, 97, 355, 367, 388, 398, 480, 507, 508, 590, 593, 621, 631, 761, 764, 767, 768, 769, 771, 773, 776, 782, 792, 802], "effect": [34, 50, 54, 56, 67, 77, 79, 90, 139, 355, 357, 390, 421, 571, 579, 585, 591, 592, 603, 618, 718, 720, 752, 759, 764, 767, 768, 772, 775, 779, 781, 785, 795], "explain": [34, 54, 77, 355, 388, 398, 749, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 783, 785, 787, 788, 789, 790, 791, 792, 798, 805, 808], "standalon": [35, 759, 764, 782, 797, 798, 803, 808, 809], "static": [35, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 100, 101, 129, 310, 375, 388, 393, 415, 418, 452, 461, 551, 585, 636, 728, 733, 780, 784, 795, 801, 802, 803], "opposit": 36, "todo": [37, 38, 39, 44, 47, 77, 482, 759, 769, 780], "aim": [40, 757, 761, 763, 777, 780, 782, 786, 800, 802, 805], "interfac": [40, 73, 134, 585, 752, 789, 792, 795, 797, 798, 799, 800, 801, 802, 806, 809], "set_framework": [40, 47], "44": [40, 44, 53, 54, 63, 76, 77, 86, 225, 272, 282, 286, 287, 323, 352, 355, 375, 376, 588, 592, 593, 597, 600, 603, 615, 636, 680, 693, 694, 702, 713], "45": [40, 42, 44, 53, 54, 67, 76, 77, 79, 81, 86, 97, 223, 227, 239, 282, 283, 339, 352, 355, 367, 376, 386, 397, 481, 487, 571, 577, 588, 591, 593, 595, 603, 636, 662, 694, 695, 713], "46": [40, 42, 44, 54, 63, 77, 81, 86, 138, 262, 283, 305, 349, 355, 374, 392, 393, 585, 588, 597, 673, 693, 694], "47": [40, 44, 53, 54, 59, 63, 76, 77, 78, 79, 81, 86, 228, 286, 355, 367, 374, 392, 393, 481, 502, 503, 575, 588, 590, 591, 592, 593, 599, 616, 628, 694, 695], "underneath": [40, 768, 800], "sai": [40, 753, 759, 760, 777, 789], "clip": [40, 53, 54, 61, 76, 77, 78, 84, 270, 271, 358, 430, 451, 454, 497, 498, 588, 590, 595, 767, 776, 778, 779, 790, 792], "a_min": 40, "a_max": 40, "tensforflow": 40, "clip_by_valu": [40, 792], "clip_value_min": 40, "clip_value_max": 40, "clamp": [40, 54, 77, 295, 347, 792], "min": [40, 44, 51, 54, 55, 59, 67, 74, 77, 78, 82, 90, 144, 146, 164, 167, 271, 315, 317, 349, 356, 404, 503, 533, 534, 548, 585, 586, 588, 590, 593, 603, 632, 638, 641, 642, 648, 749], "max": [40, 42, 51, 54, 55, 59, 67, 74, 77, 78, 82, 90, 164, 167, 270, 355, 356, 358, 373, 374, 375, 391, 392, 393, 394, 396, 404, 453, 497, 498, 503, 519, 533, 534, 586, 588, 590, 593, 603, 632, 634, 637, 731, 735, 768, 780], "sole": [40, 775, 783, 801, 802, 803], "49": [40, 44, 54, 63, 77, 81, 82, 286, 355, 356, 367, 376, 386, 397, 413, 481, 588, 603, 646, 694, 713], "51": [40, 44, 53, 54, 76, 77, 78, 86, 234, 272, 285, 356, 376, 418, 588, 695], "93": [40, 54, 76, 78, 86, 197, 286, 342, 352, 502, 503, 587, 590, 694, 695], "devicearrai": [40, 764, 780, 787, 789], "concaten": [40, 54, 55, 61, 77, 82, 358, 431, 502, 506, 590, 592, 595, 618, 636, 654, 781, 785, 787, 790], "accept": [40, 49, 50, 53, 54, 59, 72, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 326, 346, 349, 352, 354, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 446, 480, 483, 487, 495, 503, 504, 509, 513, 515, 517, 519, 533, 551, 556, 580, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 749, 759, 760, 761, 764, 767, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 789, 797, 800], "jax_concat": 40, "tf_concat": 40, "np_concat": 40, "torch_concat": 40, "85": [40, 48, 54, 63, 70, 76, 77, 79, 81, 86, 97, 106, 224, 233, 234, 278, 294, 300, 347, 367, 481, 548, 575, 582, 588, 590, 591, 592, 599, 616, 693, 694, 695], "86": [40, 63, 77, 86, 355, 367, 386, 481, 571, 591, 694, 695], "mymodel": [40, 790], "87": [40, 79, 81, 233, 262, 367, 397, 481, 571, 588, 591], "88": [40, 79, 86, 106, 234, 367, 481, 575, 582, 588, 591, 593, 599, 603, 636, 695, 713], "x_in": [40, 790, 791, 792], "90": [40, 42, 44, 53, 54, 76, 77, 234, 238, 278, 282, 342, 352, 358, 367, 452, 481, 588, 593, 603, 636, 713, 752], "reduce_mean": [40, 749, 790, 791, 792], "91": [40, 54, 81, 86, 234, 342, 352, 397, 588, 592, 593, 599, 603, 616, 636, 694, 713], "49040043354034424": 40, "48975786566734314": 40, "4892795979976654": 40, "48886892199516296": 40, "4884953498840332": 40, "4881443977355957": 40, "4878086447715759": 40, "48748287558555603": 40, "48716384172439575": 40, "48684927821159363": 40, "48653748631477356": 40, "48622724413871765": 40, "4859171509742737": 40, "48560672998428345": 40, "48529526591300964": 40, "4849821627140045": 40, "48466697335243225": 40, "4843493402004242": 40, "4840289056301117": 40, "4837053418159485": 40, "4833785891532898": 40, "4830484390258789": 40, "22": [40, 42, 44, 47, 48, 53, 54, 55, 63, 67, 70, 77, 78, 81, 86, 107, 112, 234, 242, 355, 356, 358, 363, 367, 373, 374, 376, 391, 392, 393, 394, 397, 402, 430, 471, 481, 503, 534, 569, 582, 588, 592, 593, 597, 600, 603, 615, 616, 624, 629, 636, 680, 690, 693, 694, 695, 702, 712, 713, 760, 767, 773], "48271444439888": 40, "23": [40, 42, 44, 53, 54, 59, 63, 73, 76, 77, 78, 81, 86, 136, 234, 237, 254, 255, 256, 279, 281, 282, 283, 285, 292, 322, 323, 352, 355, 358, 367, 373, 374, 376, 386, 391, 392, 393, 394, 397, 430, 481, 487, 585, 588, 592, 593, 597, 600, 611, 624, 628, 632, 642, 673, 680, 684, 693, 694, 695, 702, 749, 768, 782, 787], "48237672448158264": 40, "48203518986701965": 40, "25": [40, 42, 43, 44, 53, 55, 59, 60, 63, 67, 70, 76, 77, 78, 81, 82, 85, 86, 90, 96, 97, 112, 137, 222, 223, 233, 239, 241, 252, 257, 272, 277, 280, 282, 285, 286, 287, 292, 306, 349, 357, 367, 397, 419, 421, 422, 481, 489, 517, 518, 534, 548, 585, 588, 590, 593, 594, 597, 598, 603, 606, 620, 624, 629, 646, 651, 673, 680, 684, 691, 693, 694, 695, 712, 713, 715, 720, 767, 778], "48168954253196716": 40, "26": [40, 42, 44, 47, 53, 54, 62, 63, 77, 78, 79, 86, 234, 239, 285, 355, 356, 376, 413, 517, 571, 588, 590, 591, 592, 593, 597, 598, 603, 614, 624, 636, 643, 673, 691, 693, 694, 713], "4813397228717804": 40, "27": [40, 42, 47, 53, 54, 59, 63, 76, 77, 81, 82, 86, 90, 233, 234, 237, 277, 285, 286, 328, 352, 355, 376, 386, 518, 588, 590, 593, 597, 603, 631, 636, 646, 673, 680, 694, 713, 717], "4809857904911041": 40, "48062753677368164": 40, "29": [40, 42, 44, 47, 59, 76, 78, 79, 81, 86, 227, 367, 397, 481, 502, 503, 573, 577, 588, 590, 591, 593, 628, 693, 694, 695], "48026490211486816": 40, "30": [40, 42, 53, 54, 77, 78, 86, 90, 97, 272, 331, 339, 352, 355, 358, 376, 386, 397, 430, 471, 502, 504, 509, 510, 517, 518, 534, 543, 548, 588, 590, 593, 597, 603, 629, 636, 681, 693, 694, 712, 713, 717, 730, 768], "479898065328598": 40, "31": [40, 42, 43, 47, 48, 53, 54, 76, 77, 78, 81, 86, 107, 112, 138, 233, 264, 272, 355, 358, 367, 375, 376, 430, 481, 497, 582, 585, 588, 590, 694, 695, 790], "47952669858932495": 40, "4791509211063385": 40, "33": [40, 42, 43, 53, 63, 67, 76, 78, 79, 81, 225, 226, 233, 282, 355, 358, 367, 374, 396, 397, 430, 481, 498, 548, 575, 588, 590, 591, 592, 593, 597, 603, 615, 616, 636, 690, 693, 713, 720], "4787706732749939": 40, "34": [40, 42, 76, 77, 78, 86, 167, 234, 237, 264, 285, 355, 367, 397, 487, 502, 503, 586, 588, 590, 592, 593, 599, 616, 633, 694, 695, 770], "47838595509529114": 40, "35": [40, 48, 58, 59, 70, 76, 77, 81, 82, 86, 107, 227, 286, 355, 376, 386, 588, 592, 593, 600, 603, 616, 621, 628, 694, 702, 713], "4779967665672302": 40, "36": [40, 44, 53, 54, 58, 67, 77, 78, 82, 227, 282, 283, 331, 352, 355, 367, 376, 386, 481, 502, 503, 549, 588, 590, 593, 597, 603, 616, 633, 636, 646, 683, 713], "47760307788848877": 40, "37": [40, 48, 53, 54, 70, 76, 77, 81, 96, 107, 225, 233, 282, 285, 289, 363, 397, 471, 588, 592, 593, 597, 599, 616, 633, 680, 694, 768], "4772048890590668": 40, "38": [40, 42, 44, 47, 51, 54, 76, 77, 86, 164, 289, 339, 352, 355, 367, 374, 393, 396, 397, 481, 586, 588, 593, 633, 771], "47680220007896423": 40, "47639501094818115": 40, "40": [40, 42, 44, 54, 55, 76, 77, 78, 86, 90, 97, 233, 237, 257, 286, 331, 352, 355, 374, 376, 386, 392, 502, 504, 509, 510, 534, 548, 570, 573, 588, 590, 591, 593, 597, 603, 629, 636, 681, 694, 713, 717, 749, 768], "47598329186439514": 40, "41": [40, 42, 47, 53, 54, 59, 76, 77, 78, 81, 82, 107, 226, 234, 272, 286, 355, 356, 363, 367, 374, 392, 397, 410, 471, 481, 497, 498, 582, 588, 590, 593, 603, 620, 628, 719], "4755673110485077": 40, "4751465618610382": 40, "4747215211391449": 40, "4742920398712158": 40, "47385817766189575": 40, "47341999411582947": 40, "47297725081443787": 40, "4725303053855896": 40, "47207894921302795": 40, "47162333130836487": 40, "47116345167160034": 40, "52": [40, 53, 76, 78, 79, 86, 227, 237, 239, 367, 481, 502, 503, 518, 571, 588, 590, 591, 592, 593, 603, 616, 636, 695, 713, 743], "470699280500412": 40, "53": [40, 59, 63, 76, 81, 158, 214, 244, 397, 574, 576, 586, 587, 591, 593, 598, 628, 691, 695], "47023090720176697": 40, "54": [40, 51, 53, 58, 76, 77, 81, 86, 167, 236, 237, 242, 257, 286, 292, 305, 349, 355, 367, 376, 386, 481, 588, 592, 593, 603, 616, 633, 636, 693, 694, 695, 713, 768, 771], "4697583019733429": 40, "55": [40, 48, 77, 86, 112, 233, 292, 367, 481, 517, 588, 590, 593, 599, 603, 629, 636, 694, 695, 713, 763], "46928152441978455": 40, "56": [40, 42, 53, 54, 58, 63, 76, 77, 81, 138, 272, 286, 289, 292, 355, 376, 386, 571, 585, 588, 591, 592, 593, 597, 603, 607, 609, 611, 616, 636, 672, 694, 713, 771], "46880054473876953": 40, "57": [40, 42, 53, 54, 76, 77, 197, 220, 221, 224, 225, 227, 234, 237, 238, 278, 294, 587, 588], "4683155119419098": 40, "58": [40, 497, 590], "4678264260292053": 40, "59": [40, 53, 234, 367, 481], "46733325719833374": 40, "46683603525161743": 40, "61": [40, 42, 53, 54, 59, 76, 77, 79, 83, 86, 225, 260, 262, 287, 376, 571, 588, 591, 592, 593, 594, 614, 628, 650, 652, 695], "4663347601890564": 40, "62": [40, 42, 48, 70, 76, 86, 107, 257, 285, 588, 598, 599, 691, 693, 695], "4658295214176178": 40, "63": [40, 44, 53, 70, 76, 81, 82, 112, 278, 285, 286, 355, 367, 376, 386, 397, 481, 588, 593, 597, 603, 620, 636, 673, 684, 713], "465320348739624": 40, "4648073613643646": 40, "65": [40, 42, 44, 47, 76, 79, 86, 233, 272, 517, 571, 588, 590, 591, 593, 603, 636, 694, 695, 713, 768], "46429020166397095": 40, "66": [40, 42, 44, 67, 77, 78, 79, 234, 355, 386, 502, 503, 575, 588, 590, 591, 593, 603, 636, 713], "4637692868709564": 40, "46324464678764343": 40, "68": [40, 44, 47, 53, 86, 107, 135, 227, 355, 376, 386, 582, 585, 588, 598, 691, 694, 695], "4627160429954529": 40, "4621836841106415": 40, "70": [40, 42, 54, 77, 78, 355, 376, 386, 510, 534, 593, 603, 636, 713, 752], "4616474211215973": 40, "71": [40, 53, 76, 81, 238, 278, 397, 588], "46110764145851135": 40, "72": [40, 54, 63, 77, 79, 244, 331, 352, 355, 376, 386, 575, 588, 591, 593, 603, 636, 694, 713], "460563987493515": 40, "73": [40, 53, 82, 286, 367, 481, 593, 599, 620, 694, 782], "4600166976451874": 40, "74": [40, 42, 53, 86, 234, 264, 588, 593, 633], "45946577191352844": 40, "45891112089157104": 40, "45835286378860474": 40, "77": [40, 44, 78, 234, 549, 588, 593, 603, 636, 713], "4577910006046295": 40, "78": [40, 56, 234, 283, 577, 588, 591, 593, 599, 603, 636, 694, 713], "45722562074661255": 40, "79": [40, 42, 54, 55, 77, 78, 81, 86, 96, 234, 239, 355, 376, 386, 397, 497, 498, 588, 590, 695], "45665669441223145": 40, "80": [40, 54, 77, 331, 352, 356, 367, 413, 481, 593, 597, 603, 636, 683, 713, 752], "4560841917991638": 40, "81": [40, 44, 53, 59, 74, 76, 82, 86, 167, 237, 262, 287, 367, 481, 586, 588, 593, 597, 599, 603, 628, 633, 646, 680, 695, 713, 782], "4555082619190216": 40, "82": [40, 42, 47, 48, 53, 79, 86, 107, 225, 367, 481, 571, 591, 694, 695, 757], "45492875576019287": 40, "83": [40, 59, 81, 86, 286, 355, 367, 376, 386, 397, 481, 588, 592, 593, 616, 628, 694], "45434585213661194": 40, "84": [40, 58, 67, 76, 86, 167, 197, 262, 586, 587, 593, 598, 603, 616, 636, 691, 694, 695, 713], "45375964045524597": 40, "4531698524951935": 40, "4525766670703888": 40, "45198020339012146": 40, "4513803720474243": 40, "4507772624492645": 40, "4501707851886749": 40, "4495610296726227": 40, "92": [40, 44, 54, 55, 86, 342, 352, 569, 579, 591, 593, 622, 694, 695], "4489481747150421": 40, "44833192229270935": 40, "94": [40, 53, 54, 56, 63, 76, 77, 79, 86, 206, 282, 283, 342, 352, 386, 575, 587, 591, 695], "4477125108242035": 40, "95": [40, 54, 56, 59, 63, 70, 79, 81, 86, 104, 342, 352, 397, 571, 575, 579, 582, 591, 593, 599, 628, 694, 695], "44708991050720215": 40, "96": [40, 54, 56, 76, 77, 78, 86, 236, 257, 289, 342, 352, 355, 376, 502, 503, 575, 588, 590, 591, 593, 603, 636, 695, 713], "44646409153938293": 40, "97": [40, 54, 56, 76, 79, 86, 225, 342, 352, 575, 588, 591, 694], "44583529233932495": 40, "98": [40, 48, 54, 56, 63, 70, 76, 79, 86, 107, 234, 237, 285, 342, 352, 575, 582, 588, 591, 593, 597, 600, 603, 636, 673, 684, 693, 695, 702, 713], "4452032148838043": 40, "99": [40, 53, 54, 56, 74, 76, 86, 135, 221, 236, 342, 352, 548, 575, 585, 588, 590, 591, 597, 603, 676, 684, 694, 713], "44456806778907776": 40, "4439": 40, "selectbackward0": 40, "hope": [40, 752, 795, 808], "short": [40, 592, 617, 761, 769, 787, 791], "ivy_compil": 41, "ic": 41, "numer": [41, 50, 51, 53, 54, 55, 59, 63, 64, 67, 74, 76, 77, 78, 82, 86, 87, 89, 96, 97, 139, 151, 219, 222, 235, 239, 244, 245, 246, 253, 254, 255, 258, 267, 268, 272, 274, 275, 276, 277, 281, 282, 283, 287, 288, 292, 293, 362, 367, 467, 480, 539, 540, 548, 549, 561, 562, 585, 586, 588, 590, 593, 599, 600, 603, 621, 628, 631, 636, 639, 641, 643, 645, 647, 693, 694, 695, 697, 698, 699, 701, 702, 707, 714, 717, 719, 730, 757, 769, 778, 780, 781, 782, 783, 784, 785, 787, 791, 799, 802, 808], "anyth": [41, 54, 77, 367, 486, 487, 761, 773, 782, 783, 802, 803], "affect": [41, 47, 768, 780], "intermedi": [41, 800, 801, 802, 803, 808], "original_fn": 41, "100000": 41, "var": [41, 67, 90, 92, 117, 118, 119, 120, 584, 596, 603, 669, 670, 737, 760, 771, 787], "co": [41, 42, 53, 55, 76, 237, 242, 244, 285, 506, 588, 590, 752, 758, 769, 787, 794], "sin": [41, 53, 55, 76, 237, 242, 244, 285, 506, 588, 590, 764, 787], "tan": [41, 53, 76, 493, 588, 590, 772, 775, 776, 779, 780, 787], "comp_fn": 41, "compile_graph": [41, 47, 787, 792], "expected_result": 41, "compiled_result": 41, "irrelev": [41, 768, 769, 771], "opeat": 41, "_layer": [41, 787], "net": [41, 46, 47, 752, 753, 787, 792], "compiled_net": 41, "proceed": 42, "pypi": [42, 44, 47, 759, 760, 783, 795], "pkg": [42, 44, 47], "wheel": [42, 44, 47, 751], "public": [42, 44, 47, 499, 590, 768, 778, 789, 805], "revis": [42, 44, 761], "tmp": [42, 44, 546, 568, 590], "req": [42, 44], "tabqrujw": 42, "command": [42, 44, 749, 756, 760, 763, 766, 768, 774, 796], "filter": [42, 44, 46, 54, 58, 77, 81, 308, 309, 349, 355, 375, 393, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731, 749, 765, 768], "quiet": [42, 44], "resolv": [42, 44, 54, 67, 246, 367, 481, 482, 588, 595, 603, 656, 711, 712, 717, 719, 761, 766, 769, 774, 787], "commit": [42, 44, 755, 757, 759, 763, 771, 782], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 42, "metadata": [42, 44, 47, 779], "setup": [42, 44, 47, 755, 760, 761, 766, 768], "satisfi": [42, 44, 47, 54, 355, 356, 377, 404, 771], "core": [42, 43, 44, 46, 47, 54, 77, 94, 203, 356, 406, 415, 418, 587, 751, 760, 770, 782, 792, 800, 801, 802, 803, 807, 809], "einop": [42, 44, 47, 55, 78, 502, 503, 504, 590, 752], "py3": [42, 44, 47], "whl": [42, 43, 44, 47], "kb": [42, 44, 47], "psutil": [42, 44, 47], "cp39": [42, 44], "manylinux_2_12_x86_64": [42, 44], "manylinux2010_x86_64": [42, 44], "manylinux_2_17_x86_64": [42, 44], "manylinux2014_x86_64": [42, 43, 44], "mb": [42, 44, 47, 768], "eta": [42, 44, 47], "00": [42, 44, 47, 54, 55, 77, 78, 82, 244, 303, 349, 355, 376, 382, 386, 387, 506, 549, 588, 590, 593, 594, 627, 650, 774, 782], "termcolor": [42, 44, 47, 71, 97], "tar": [42, 43, 44, 47], "gz": [42, 43, 44, 47], "colorama": [42, 44], "py2": [42, 44], "nvidia": [42, 44, 47, 806, 807], "495": [42, 44], "nvidia_ml_pi": [42, 44], "diskcach": 42, "pypars": [42, 44, 47], "ivy_cor": [42, 44, 47, 760], "1338326": 42, "sha256": [42, 44, 47], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 42, "ephem": [42, 44], "cach": [42, 44, 47, 194, 496, 587, 590, 740, 774, 776, 779, 782], "njrc_e6b": 42, "07": [42, 44, 56, 60, 76, 79, 83, 86, 227, 260, 264, 283, 355, 386, 561, 571, 572, 574, 575, 576, 577, 588, 590, 591, 594, 651, 652, 694, 732, 735, 791], "2e": [42, 44], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [42, 44], "4845": [42, 44], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 42, "root": [42, 43, 44, 47, 53, 76, 286, 588, 729, 756, 760, 761, 766, 780, 790], "b6": [42, 44], "0d": [42, 44], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [42, 44], "successfulli": [42, 44, 47, 733, 760, 764], "attempt": [42, 44, 47, 760, 784, 795], "uninstal": [42, 44, 47], "cannot": [42, 43, 44, 47, 54, 289, 426, 427, 428, 588, 761, 763, 765, 769, 780, 787, 792, 808], "vnd": [42, 44, 47], "json": [42, 44, 47, 71, 755, 760, 790], "psst": 42, "cv2": [42, 44, 46, 790], "pickl": [42, 43, 71, 733, 767, 790], "imageio": 42, "urllib": [42, 47], "_src": 42, "xla_bridg": 42, "tpu": [42, 193, 199, 210, 215, 587, 770, 802, 805], "fall": [42, 732, 733, 735, 759, 769, 786], "tf_cpp_min_log_level": 42, "rerun": 42, "info": [42, 746, 749, 766, 772, 774], "mkdir": [42, 43, 44, 760, 768], "perceiv": [42, 43], "touch": 42, "io_processor": 42, "position_encod": 42, "absl": 42, "jmp": 42, "tabul": 42, "2023": 42, "04": [42, 43, 50, 56, 70, 74, 79, 106, 107, 138, 164, 244, 539, 571, 572, 577, 582, 585, 586, 588, 590, 591, 760, 782], "185": [42, 70], "199": [42, 225, 588], "111": [42, 597, 690], "133": [42, 58, 498, 590, 616], "108": [42, 592, 603, 616, 713], "109": [42, 59, 593, 628], "connect": [42, 731, 752, 760, 791, 792, 800], "443": [42, 284, 588], "sent": 42, "await": 42, "respons": [42, 761, 768, 769], "200": [42, 78, 81, 233, 355, 378, 379, 510, 534, 588, 590, 743, 790], "ok": [42, 760], "length": [42, 43, 50, 54, 60, 61, 71, 77, 83, 84, 94, 97, 121, 134, 139, 300, 305, 308, 309, 319, 325, 347, 349, 352, 355, 356, 358, 362, 365, 377, 382, 383, 386, 387, 388, 398, 407, 414, 446, 454, 468, 473, 570, 585, 590, 592, 593, 594, 595, 601, 618, 641, 642, 650, 660, 703, 729, 731, 782, 790], "29359": 42, "29k": 42, "plain": 42, "67k": 42, "002": 42, "110": 42, "30179": 42, "47k": 42, "8107": 42, "9k": 42, "92k": 42, "functool": [42, 773, 780, 789], "itertool": 42, "matplotlib": [42, 43, 44, 47], "pyplot": [42, 43, 44, 47], "plt": [42, 43, 44, 47], "preprocessor": 42, "vector": [42, 50, 54, 55, 58, 59, 77, 78, 81, 82, 94, 139, 355, 356, 358, 362, 367, 377, 403, 406, 412, 414, 417, 446, 448, 450, 468, 480, 498, 502, 519, 570, 585, 590, 592, 593, 616, 618, 621, 625, 626, 628, 631, 636, 641, 642, 646, 647, 648, 649, 731, 794, 802], "perceiverbackbon": 42, "input_preprocessor": 42, "_input_preprocessor": 42, "_encod": 42, "is_train": 42, "po": 42, "input_mask": 42, "network_input_is_1d": 42, "_input_is_1d": 42, "queri": [42, 43, 58, 71, 81, 197, 211, 512, 538, 587, 590, 592, 618, 619, 731, 767, 769, 789, 802], "decod": [42, 790], "cross": [42, 44, 59, 60, 82, 83, 593, 594, 650, 651, 652, 749, 768, 769], "attend": [42, 592, 618], "encoder_queri": 42, "latent": [42, 596, 671], "imagepreprocessor": 42, "deal": [42, 757, 770, 776, 778, 780, 795], "image_s": 42, "fourier_pos_config": 42, "position_encoding_typ": 42, "fourier": [42, 54, 77, 355, 377, 382, 383, 387, 388, 398, 506, 590], "fourier_position_encoding_kwarg": 42, "concat_po": 42, "max_resolut": 42, "num_band": [42, 55, 78, 506, 590], "sine_onli": 42, "prep_typ": 42, "spatial_downsampl": 42, "cross_attend_widening_factor": 42, "cross_attention_shape_for_attn": 42, "kv": 42, "dropout_prob": 42, "num_block": 42, "num_cross_attend_head": 42, "num_self_attend_head": 42, "num_self_attends_per_block": 42, "num_z_channel": 42, "self_attend_widening_factor": 42, "use_query_residu": 42, "z_index_dim": 42, "z_pos_enc_init_scal": 42, "02": [42, 50, 55, 56, 62, 63, 76, 79, 86, 138, 224, 225, 264, 355, 376, 386, 387, 548, 549, 571, 572, 577, 585, 588, 590, 591, 594, 598, 599, 650, 691, 694, 695, 781], "perceiver_backbon": [42, 749], "perceiverencod": 42, "At": [42, 752, 759, 760, 761, 763, 782, 783, 802], "almost": [42, 751, 758, 767, 781, 788, 790], "thankfulli": [42, 782], "perceiver_io": [42, 43], "imagenet_fourier_position_encod": 42, "pystat": 42, "imagenet_checkpoint": 42, "rb": 42, "ckpt": 42, "read": [42, 44, 54, 61, 71, 73, 77, 84, 134, 358, 436, 585, 595, 660, 759, 760, 766, 768, 782, 784, 785, 802], "173": [42, 59, 593, 628], "194": 42, "217": [42, 773], "125": [42, 54, 59, 82, 233, 328, 352, 357, 419, 588, 593, 646], "177": [42, 44], "193776248": 42, "185m": 42, "octet": 42, "184": 42, "80m": 42, "144mb": 42, "144": 42, "mean_rgb": 42, "stddev_rgb": 42, "im": 42, "denorm": 42, "resize_and_center_crop": 42, "crop": [42, 54, 77, 355, 383, 388, 398], "center": [42, 730], "image_height": [42, 44, 749], "image_width": [42, 749], "padded_center_crop_s": 42, "minimum": [42, 53, 54, 55, 61, 64, 67, 76, 77, 78, 84, 87, 90, 219, 247, 274, 317, 328, 349, 352, 358, 367, 446, 478, 482, 539, 540, 548, 549, 561, 562, 588, 590, 595, 600, 603, 653, 699, 714, 716, 784, 799, 805, 809], "offset_height": 42, "offset_width": 42, "crop_window": 42, "inter_cub": 42, "ye": [42, 795], "dummy_input": [42, 749], "transpili": 42, "torch_perceiver_backbon": 42, "quicker": 42, "perceiverioclassifi": [42, 749], "max_pool": [42, 749], "Of": [42, 764, 779, 780, 790, 807, 808], "cours": [42, 760, 761, 763, 764, 771, 779, 780, 785, 790, 795, 807, 808], "468": 42, "huggingface_hub": 42, "dill": 42, "multiprocess": [42, 71, 97, 590, 790, 795], "py39": 42, "132": [42, 77], "pyarrow": 42, "xxhash": 42, "212": [42, 54, 58, 77, 341, 352, 616], "panda": [42, 44, 752], "pyyaml": 42, "fsspec": 42, "2021": [42, 54, 77, 344, 352, 749], "aiohttp": 42, "tqdm": [42, 44, 749], "async": 42, "timeout": [42, 71, 97, 543, 565, 590, 784], "0a3": 42, "async_timeout": 42, "frozenlist": 42, "manylinux_2_5_x86_64": [42, 47], "manylinux1_x86_64": [42, 47], "158": 42, "attr": 42, "aiosign": 42, "charset": 42, "multidict": 42, "114": [42, 355, 376, 386], "yarl": 42, "264": 42, "extens": [42, 53, 59, 76, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 367, 480, 585, 586, 588, 593, 595, 600, 601, 602, 603, 604, 620, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 654, 656, 657, 658, 660, 661, 663, 664, 668, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 749, 755, 758, 760, 761, 772, 774, 782, 799, 802, 809], "filelock": 42, "certifi": 42, "2017": [42, 592, 618], "2022": [42, 43], "idna": 42, "urllib3": 42, "pytz": 42, "2020": [42, 763, 802], "dateutil": [42, 47], "six": [42, 47, 760, 785], "wikiart": 42, "paint": [42, 749, 751, 787], "n_sampl": [42, 54, 77, 358, 449], "10000": [42, 44, 50, 73, 138, 585], "huggan": 42, "split": [42, 43, 44, 48, 53, 54, 61, 70, 71, 76, 77, 84, 104, 106, 109, 112, 210, 211, 212, 290, 330, 337, 358, 432, 441, 458, 502, 529, 582, 587, 588, 590, 592, 595, 605, 612, 613, 665, 727, 731, 749, 754, 761, 768, 786, 787, 795, 809], "wiki_art": 42, "gib": 42, "unknown": 42, "total": [42, 44, 54, 67, 71, 77, 90, 97, 134, 214, 317, 318, 324, 349, 352, 585, 587, 600, 603, 701, 718, 720, 749, 753, 754, 761, 769, 770, 771, 782, 785, 790, 791, 795], "huggan___parquet": 42, "36ee951979f9b56c": 42, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 42, "parquet": 42, "subsequ": [42, 740, 760, 764, 768, 769, 771, 775, 776, 779, 782, 791, 803], "reus": [42, 50, 73, 77, 84, 123, 426, 427, 432, 434, 436, 437, 438, 445, 458, 656, 657, 658, 660, 662, 663, 665, 667, 773, 782, 807], "curl": [42, 760], "row": [42, 54, 77, 132, 146, 315, 349, 356, 358, 365, 367, 407, 416, 438, 444, 459, 473, 479, 480, 585, 593, 599, 600, 632, 640, 641, 646, 692, 701, 730], "2fwikiart": 42, "receiv": [42, 46, 94, 493, 529, 590, 596, 669, 670, 671, 731, 761, 769, 770, 782, 785], "xferd": 42, "averag": [42, 44, 54, 56, 60, 77, 79, 83, 355, 357, 367, 369, 370, 373, 374, 375, 420, 421, 422, 423, 480, 571, 572, 577, 591, 592, 594, 596, 618, 650, 669, 670, 730, 731], "dload": 42, "upload": [42, 782], "spent": [42, 753], "25936": 42, "278k": 42, "abstract_expression": 42, "action_paint": 42, "analytical_cub": 42, "art_nouveau": 42, "baroqu": 42, "color_field_paint": 42, "contemporary_r": 42, "cubism": 42, "early_renaiss": 42, "expression": 42, "fauvism": 42, "high_renaiss": 42, "impression": 42, "mannerism_late_renaiss": 42, "naive_art_primitiv": 42, "new_real": 42, "northern_renaiss": 42, "pointil": 42, "pop_art": 42, "post_impression": 42, "realism": 42, "rococo": 42, "romantic": 42, "symbol": [42, 743, 759, 760, 802, 803], "synthetic_cub": 42, "ukiyo_": 42, "custom": [42, 54, 77, 302, 346, 347, 354, 743, 752, 756, 768, 773, 777, 781, 782, 785, 791, 802, 806, 807, 808], "hugginfac": 42, "customdataset": 42, "__len__": [42, 767], "__getitem__": [42, 71, 767], "idx": [42, 43, 44, 492, 590, 749, 770, 789], "random_split": 42, "224x224": 42, "train_siz": 42, "val_siz": 42, "test_siz": 42, "dataset_train": 42, "dataset_v": 42, "dataset_test": 42, "dataloader_train": 42, "batch_siz": [42, 44, 47, 54, 58, 63, 77, 81, 86, 355, 357, 373, 374, 375, 391, 392, 393, 394, 423, 592, 599, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 618, 692, 749, 790], "dataloader_v": 42, "dataloader_test": 42, "batch": [42, 43, 44, 54, 55, 59, 71, 77, 78, 82, 210, 211, 355, 361, 369, 370, 371, 377, 390, 460, 461, 462, 506, 509, 510, 570, 587, 590, 592, 593, 596, 598, 616, 618, 630, 648, 669, 670, 671, 691, 731, 734, 749, 767, 776, 781, 790, 800], "train_featur": 42, "train_label": 42, "imshow": [42, 43], "crossentropyloss": [42, 732], "sgd": [42, 735, 802], "lr": [42, 56, 79, 493, 572, 575, 577, 578, 579, 590, 591, 735, 790, 791], "001": [42, 53, 54, 62, 74, 77, 79, 164, 262, 279, 322, 333, 352, 572, 586, 588, 591, 598, 691, 790, 791], "momentum": [42, 54, 77, 361, 460, 462, 734, 752], "train_step": 42, "running_loss": [42, 44, 749], "last_loss": 42, "training_load": 42, "intra": 42, "report": [42, 759, 782], "zero_grad": 42, "backward": [42, 54, 68, 77, 91, 281, 355, 377, 382, 383, 387, 388, 398, 588, 593, 604, 621, 647, 721, 722, 731, 783, 795], "adjust": [42, 67, 90, 356, 416, 603, 718, 720, 740], "999": [42, 56, 76, 79, 290, 571, 572, 577, 579, 588, 591, 735, 791], "epoch_numb": 42, "best_vloss": 42, "1_000_000": 42, "avg_loss": 42, "running_vloss": 42, "vdata": 42, "vinput": 42, "vlabel": 42, "voutput": 42, "vloss": 42, "avg_vloss": 42, "best": [42, 529, 590, 749, 754, 758, 759, 760, 761, 762, 768, 769, 773, 782, 783, 796, 805, 806], "model_path": 42, "model_": 42, "state_dict": 42, "highest": [42, 54, 63, 77, 86, 310, 349, 599, 693, 769], "energi": 42, "accuraci": [42, 44, 47, 769], "augment": 42, "mayb": [42, 43, 49, 749, 760, 768, 787, 789], "meta": [42, 669, 670, 671, 764, 783, 802], "finetun": 42, "present": [43, 54, 71, 77, 322, 352, 361, 460, 461, 462, 751, 759, 761, 767, 769, 770, 775, 779, 787, 799, 800, 809], "percieverio": 43, "ai": [43, 800, 804], "highli": [43, 749, 802], "invit": [43, 759, 780, 785], "g4ar9q7dtn": 43, "step1": 43, "printf": 43, "8packag": 43, "share": [43, 71, 185, 586, 749, 752, 765, 767, 771, 776, 778, 780, 781, 782, 785, 787, 800, 801, 808], "googledr": 43, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 43, "file_id": 43, "drive": [43, 44], "uc": 43, "export": [43, 768, 801, 808], "id": [43, 54, 77, 195, 317, 318, 349, 587, 732, 733, 749, 755, 758, 760, 764, 766, 767, 774, 778, 782, 796], "tee": [43, 760], "file_id_wget_cmd": 43, "perl": 43, "pe": 43, "g": [43, 45, 46, 54, 63, 65, 67, 69, 77, 86, 92, 94, 150, 179, 192, 239, 252, 272, 279, 282, 355, 356, 362, 367, 391, 393, 418, 466, 467, 468, 469, 470, 481, 482, 586, 587, 588, 593, 597, 599, 601, 603, 626, 627, 632, 639, 641, 642, 648, 675, 679, 681, 684, 689, 693, 694, 695, 703, 704, 705, 706, 711, 712, 714, 716, 717, 719, 730, 753, 754, 759, 760, 762, 763, 765, 766, 767, 778, 780, 782, 787, 795, 797, 798], "uuid": 43, "anywai": [43, 764, 777, 780], "bin": [43, 54, 77, 367, 478, 483, 755, 760, 761, 763, 767], "bash": [43, 760, 761, 763], "step2": 43, "interpret": [43, 50, 54, 73, 77, 122, 123, 134, 140, 367, 480, 585, 768, 803], "sudo": [43, 760], "apt": [43, 760], "yf": 43, "step3": 43, "delet": [43, 761, 768], "xvzf": 43, "rm": [43, 45, 755, 756, 761], "step4": 43, "symlink": 43, "unzip": [43, 44], "fr": 43, "l": [43, 59, 76, 82, 266, 356, 403, 593, 620, 625, 626, 627, 631, 645, 761, 762], "d": [43, 54, 55, 58, 59, 61, 73, 77, 78, 81, 82, 84, 110, 138, 146, 179, 222, 239, 240, 272, 275, 315, 349, 355, 356, 358, 362, 365, 373, 374, 375, 382, 387, 391, 392, 393, 394, 396, 401, 413, 428, 432, 434, 437, 441, 454, 458, 466, 472, 494, 505, 582, 585, 586, 588, 592, 593, 595, 597, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 623, 624, 628, 632, 636, 646, 662, 675, 679, 680, 681, 684, 689, 690, 749, 752, 753, 754, 760, 762, 765, 766, 767, 778, 782, 785, 790, 798], "ln": 43, "sf": 43, "la": 43, "step5": 43, "regular": [43, 77, 356, 367, 413, 484, 593, 630, 760, 780, 802], "step6": 43, "ipkykernel": 43, "step7": 43, "engbjapanpython3": 43, "separ": [43, 54, 55, 77, 361, 461, 592, 618, 761, 764, 767, 768, 782, 787, 789, 790, 803, 807], "ipykernel": 43, "reconnect": 43, "sy": 43, "oct": 43, "gcc": [43, 800, 807], "lf": 43, "upgrad": 43, "cuda11": 43, "cudnn805": 43, "cp38": [43, 47], "helper": [43, 749, 766, 769, 773, 790, 797], "feedforward": 43, "prenorm": 43, "perceiveriospec": 43, "fetch": [43, 761, 763, 768], "ogbanugot": 43, "xmartlab": 43, "caffeflow": 43, "fetch_class": 43, "class_label": 43, "append": [43, 44, 54, 59, 71, 77, 231, 325, 352, 588, 593, 595, 624, 631, 656, 749, 768, 782, 787, 790], "ground_truth": 43, "127": [43, 51, 54, 59, 74, 77, 167, 341, 352, 586, 593, 628], "path_to_imag": 43, "get_imag": 43, "ax": [43, 48, 54, 59, 61, 64, 67, 68, 70, 77, 82, 84, 87, 90, 91, 96, 100, 107, 111, 212, 324, 325, 338, 345, 352, 353, 355, 358, 361, 367, 383, 388, 398, 445, 446, 452, 463, 485, 486, 487, 488, 489, 502, 570, 587, 590, 593, 595, 600, 603, 604, 621, 632, 640, 643, 644, 648, 655, 657, 658, 661, 663, 665, 668, 698, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 769, 771, 782, 783, 787, 789], "fig": [43, 44], "subplot": [43, 44], "spine": 43, "set_vis": 43, "bottom": [43, 502, 590, 759, 760, 768, 808], "tick_param": 43, "set_xticklabel": 43, "set_yticklabel": 43, "show_result": 43, "plot": [43, 749, 802], "along": [43, 48, 50, 53, 54, 55, 59, 60, 61, 63, 64, 66, 67, 68, 70, 71, 73, 76, 77, 78, 82, 83, 84, 86, 87, 89, 90, 91, 94, 107, 111, 117, 137, 138, 212, 286, 289, 291, 317, 318, 324, 325, 338, 345, 349, 352, 353, 355, 356, 357, 358, 361, 367, 376, 382, 383, 386, 387, 388, 398, 415, 421, 431, 432, 433, 437, 438, 446, 451, 455, 463, 464, 465, 481, 482, 483, 485, 486, 487, 488, 489, 502, 509, 584, 585, 587, 588, 590, 593, 594, 595, 596, 599, 600, 602, 603, 604, 621, 636, 645, 647, 648, 650, 651, 652, 654, 657, 658, 659, 661, 662, 664, 666, 667, 669, 670, 671, 697, 698, 699, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 749, 759, 762, 771, 779, 783, 785, 787, 802], "figur": [43, 784], "figsiz": [43, 44], "listdir": [43, 44], "endswith": 43, "jpeg": [43, 44], "this_dir": 43, "dirnam": 43, "add_subplot": 43, "xtick": 43, "ytick": 43, "set_titl": [43, 44], "color": [43, 71, 97, 748], "green": [43, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 748, 759, 760, 761], "red": 43, "io": [43, 46, 760, 768], "perceiver_io_img_classif": 43, "normalize_imag": 43, "batch_shap": [43, 58, 63, 73, 81, 86, 132, 141, 585, 592, 593, 599, 617, 618, 619, 649, 692, 731, 785, 787, 789], "img_dim": 43, "queries_dim": 43, "learn_queri": 43, "load_weight": 43, "num_input_ax": 43, "network_depth": 43, "num_lat_att_per_lay": 43, "query_shap": 43, "num_fourier_freq_band": 43, "weight_fpath": 43, "pretrained_weight": 43, "isfil": 43, "noinspect": [43, 789], "pybroadexcept": 43, "from_disk_as_pickl": 43, "except": [43, 44, 47, 54, 55, 61, 63, 68, 71, 77, 78, 82, 86, 91, 153, 325, 342, 352, 362, 367, 467, 486, 487, 501, 519, 536, 551, 557, 586, 590, 593, 595, 599, 600, 604, 637, 654, 656, 664, 693, 694, 695, 701, 721, 722, 733, 749, 761, 762, 763, 764, 768, 769, 770, 772, 775, 779, 780, 783, 784, 785, 789, 795], "action": [43, 758, 768, 771, 774, 782], "fail": [43, 759, 760, 761, 763, 768, 769, 771, 774, 777, 779, 780, 781], "placehold": [43, 597, 679, 684, 689, 731, 761, 764, 775, 797], "pyunboundlocalvari": 43, "max_fourier_freq": 43, "random_uniform": [43, 47, 63, 86, 599, 770, 773, 782, 787, 791], "03": [43, 50, 53, 55, 56, 76, 79, 86, 138, 237, 262, 548, 549, 572, 577, 585, 588, 590, 591, 593, 594, 629, 650, 694], "817437": 43, "common_runtim": 43, "gpu_bfc_alloc": 43, "cc": 43, "orig_valu": 43, "tf_force_gpu_allow_growth": 43, "autograd": [43, 795], "declar": [43, 761], "_3r2_73j": 44, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 44, "1297564": 44, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 44, "le3bu3_v": 44, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 44, "third": [44, 94, 358, 433, 457, 593, 601, 641, 703, 766, 779, 795, 801, 802, 808], "parti": [44, 752, 766, 795, 801, 802, 808], "csv": [44, 749], "pd": 44, "mount": [44, 755, 756, 761], "mydriv": 44, "chdir": 44, "One": [44, 54, 55, 61, 63, 77, 78, 84, 86, 358, 426, 427, 428, 430, 446, 454, 503, 590, 595, 599, 660, 693, 764, 767, 769, 771, 776, 781, 782, 787, 789, 790], "kaggl": 44, "medium": 44, "articl": [44, 749, 774], "insert": [44, 54, 64, 77, 87, 358, 423, 431, 595, 597, 600, 602, 656, 676, 677, 698, 709, 768, 774], "www": 44, "your_kaggle_usernam": 44, "competit": 44, "digit": 44, "recogn": 44, "zip": [44, 787], "readabl": [44, 764, 767, 773, 774, 775, 782, 783, 789, 790], "chmod": [44, 760, 768], "600": [44, 78, 81, 355, 378, 379, 510, 768], "recent": [44, 746, 751, 752, 760, 761, 782], "modifi": [44, 54, 71, 77, 94, 358, 367, 443, 446, 451, 487, 759, 760, 761, 763, 765, 766, 769, 770, 772, 774, 776, 779, 781, 782, 783, 787], "forc": [44, 766, 768, 770], "archiv": [44, 760], "inflat": [44, 769], "sample_submiss": 44, "frame": [44, 54, 77, 310, 349, 752, 794, 802], "read_csv": 44, "later": [44, 71, 496, 590, 759, 774, 779, 782, 783, 802], "my": [44, 755, 768], "df": 44, "label_df": 44, "mod_train": 44, "drop": [44, 54, 77, 317, 349, 357, 358, 421, 454, 730, 731, 760, 795], "column": [44, 54, 59, 77, 82, 94, 132, 146, 315, 349, 356, 358, 365, 367, 403, 407, 416, 435, 437, 438, 442, 444, 473, 479, 480, 585, 593, 625, 626, 632, 638, 640, 641, 646, 730], "data_valu": 44, "test_data_valu": 44, "correct_label": 44, "train_path": 44, "makedir": 44, "valid_path": 44, "28x28": 44, "pic": 44, "pictur": [44, 749, 751, 759, 787], "int8": [44, 51, 63, 73, 74, 86, 134, 160, 165, 167, 168, 172, 300, 347, 585, 586, 693, 769, 782], "new_img": [44, 46], "builder": [44, 749, 756, 793, 795, 797], "batchwis": 44, "subset": [44, 764, 768, 772, 775, 778, 780, 782, 787, 802], "goe": [44, 358, 430, 762, 765, 774, 779, 785], "seed": [44, 45, 54, 58, 63, 65, 71, 77, 81, 86, 313, 314, 349, 356, 362, 406, 415, 418, 466, 467, 468, 469, 470, 592, 599, 601, 615, 692, 693, 694, 695, 697, 703, 728, 730, 777, 781, 782], "seed_valu": [44, 71, 599, 696], "randomize_dataset": 44, "shuffl": [44, 54, 63, 71, 77, 86, 468, 599], "create_dataset": 44, "num_examples_per_class": 44, "img_arrai": 44, "class_nam": 44, "dir": [44, 755, 790], "img_path": 44, "imread": [44, 46, 790], "imread_grayscal": 44, "generate_batch": [44, 749], "dataset_s": [44, 749], "y_train": [44, 749], "ivyerror": [44, 744, 749, 773], "smaller": [44, 54, 61, 67, 77, 84, 297, 320, 333, 347, 352, 355, 367, 383, 388, 398, 480, 481, 482, 502, 590, 595, 603, 653, 661, 711, 712, 717, 719, 749, 761, 773, 787], "yield": [44, 64, 311, 312, 349, 358, 446, 600, 702, 749, 768], "x_batch_inst": 44, "form": [44, 46, 49, 50, 54, 59, 71, 73, 82, 93, 94, 122, 123, 140, 144, 145, 303, 306, 316, 322, 349, 352, 356, 358, 403, 410, 433, 442, 446, 459, 492, 552, 554, 585, 590, 592, 593, 597, 620, 622, 624, 625, 626, 627, 629, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 645, 673, 684, 730, 752, 754, 759, 776, 782, 785, 791, 792, 802, 803, 808], "intialis": 44, "num_epoch": [44, 749], "inherit": [44, 764, 767, 773, 789, 795, 797], "inform": [44, 46, 51, 54, 56, 74, 79, 164, 167, 310, 349, 492, 580, 586, 590, 591, 596, 671, 749, 758, 759, 760, 761, 763, 767, 768, 773, 776, 777, 779, 781, 782, 805], "ivynet": [44, 749], "h_w": [44, 749], "input_channel": [44, 731, 749, 787, 791], "output_channel": [44, 731, 749, 791], "gelu": [44, 45, 48, 70, 582, 727, 749], "image_widht": 44, "start_dim": [44, 54, 77, 358, 436, 749], "end_dim": [44, 54, 77, 358, 436, 749], "gpu_is_avail": [44, 587, 749], "120": [44, 67, 90, 97, 593, 636, 711, 749], "model_nam": [44, 749], "__name__": [44, 45, 47, 557, 590, 749, 773], "lower": [44, 50, 53, 54, 59, 63, 76, 77, 82, 86, 132, 144, 270, 304, 310, 315, 316, 349, 367, 483, 484, 489, 585, 588, 593, 599, 620, 626, 627, 634, 695, 729, 730, 749, 761, 769, 771, 780, 782, 787, 795, 797, 798, 799, 800, 802, 803, 808, 809], "heavi": [44, 760, 780, 781, 785, 803], "lift": [44, 781, 803], "num_correct": [44, 749], "y_pred": [44, 749], "cross_entropi": [44, 60, 83, 594, 652, 749, 767, 776, 779], "epoch_loss": [44, 749], "field": [44, 59, 65, 82, 88, 356, 358, 403, 457, 593, 601, 625, 626, 638, 639, 641, 703, 704, 705, 749, 768, 794, 800, 808], "training_accuraci": [44, 749], "train_loss": [44, 749], "train_correct": [44, 749], "train_loop": [44, 749], "leav": [44, 49, 54, 72, 74, 76, 77, 78, 81, 82, 84, 90, 97, 164, 167, 239, 295, 296, 358, 431, 436, 448, 449, 450, 463, 464, 465, 481, 482, 487, 506, 553, 595, 597, 611, 619, 624, 641, 655, 659, 664, 666, 667, 672, 673, 682, 683, 684, 685, 711, 712, 743, 749, 759, 767, 768, 769, 771, 772, 775, 776, 779, 780, 782, 790, 791], "xbatch": [44, 749], "ybatch": [44, 749], "to_devic": [44, 52, 75, 195, 587, 749], "entropi": [44, 60, 83, 594, 650, 651, 652, 749], "hot": [44, 50, 73, 141, 585, 749], "ybatch_encod": [44, 749], "one_hot": [44, 50, 73, 585, 749, 792], "loss_prob": [44, 749], "ret_grad_idx": [44, 573, 591, 778], "xs_grad_idx": [44, 573, 591, 778], "batch_loss": [44, 749], "set_descript": [44, 749], "set_postfix": [44, 749], "accuracy_percentag": [44, 749], "naverag": [44, 749], "6f": [44, 749], "_train_summari": [44, 749], "writer": [44, 749], "writerow": [44, 749], "157it": 44, "01": [44, 50, 54, 55, 56, 77, 78, 79, 82, 86, 138, 264, 282, 283, 303, 309, 333, 349, 355, 376, 386, 387, 506, 548, 549, 571, 572, 577, 585, 588, 590, 591, 593, 596, 599, 627, 671, 694, 695, 765, 792], "06it": 44, "475401": 44, "11it": 44, "081436": 44, "13it": 44, "0187": 44, "029279": 44, "0324": 44, "008382": 44, "07it": 44, "00456": 44, "003816": 44, "82it": 44, "00277": 44, "002179": 44, "05it": 44, "00175": 44, "001569": 44, "00147": 44, "001235": 44, "09it": 44, "00128": 44, "001005": 44, "106": 44, "10it": 44, "00112": 44, "000837": 44, "129": 44, "12it": 44, "000989": 44, "000709": 44, "145": 44, "000873": 44, "000606": 44, "168": [44, 497, 590], "08it": 44, "000774": 44, "000524": 44, "000688": 44, "000455": 44, "000613": 44, "000398": 44, "05": [44, 50, 53, 54, 56, 62, 76, 77, 79, 85, 138, 264, 309, 320, 333, 349, 352, 361, 460, 461, 462, 517, 539, 561, 571, 572, 577, 585, 588, 590, 591, 593, 598, 632, 691, 730, 734, 781, 782], "000547": 44, "000350": 44, "205": 44, "000488": 44, "000308": 44, "218": 44, "000437": 44, "000273": 44, "000391": 44, "000243": 44, "238": [44, 246, 588], "98it": 44, "000351": 44, "000216": 44, "260": 44, "plot_summari": 44, "seaborn": 44, "whitegrid": 44, "ax1": 44, "ax2": 44, "nrow": 44, "ncol": 44, "legend": [44, 759], "fontweight": 44, "bold": 44, "set_xlabel": 44, "set_ylabel": 44, "tight_layout": 44, "savefig": 44, "summary_plot": 44, "png": [44, 46, 47, 790], "close": [44, 59, 244, 262, 282, 303, 349, 588, 593, 595, 641, 656, 759, 760, 761, 769, 772, 780, 785, 802], "save_weight": [44, 733], "model_param": 44, "ivynet_weight": 44, "hdf5": [44, 71, 733, 790], "deitimageprocessor": 45, "tfdeitforimageclassif": 45, "tfdeitforimageclassificationwithteach": 45, "head": [45, 46, 592, 618, 731, 749, 758, 760, 768, 780], "distillation_classifi": 45, "cls_classifi": 45, "randomli": [45, 355, 378, 379, 380, 592, 615, 731], "henc": [45, 65, 222, 322, 352, 588, 595, 601, 656, 703, 704, 705, 706, 740, 760, 767, 768, 769, 779, 782], "reproduc": [45, 58, 81, 592, 615, 757, 763], "set_random_se": 45, "facebook": 45, "distil": [45, 803], "patch16": 45, "outputs_from_original_model": 45, "predicted_class_idx": 45, "architectur": [45, 749, 760, 792, 795, 800, 801, 802, 805, 806, 807], "bertforsequenceclassif": 45, "bertforpretrain": 45, "NOT": [45, 267, 588, 743, 759], "probabl": [45, 54, 58, 60, 63, 77, 81, 83, 86, 355, 362, 367, 378, 379, 380, 466, 480, 483, 487, 592, 594, 599, 615, 618, 619, 650, 692, 730, 731, 749, 753, 782, 796], "ptarmigan": 45, "rf": [45, 761], "moduleconvert": [45, 728, 733], "mc": 45, "from_keras_modul": [45, 728], "compiled_func": 45, "return_graph": [45, 47], "compiled_output": 45, "diverg": [45, 246, 588], "_all_funct": [45, 47], "convert_to_tensor_v2_with_dispatch": 45, "transpose_v2": 45, "convolution_v2": 45, "bias_add": 45, "binary_op_wrapp": 45, "cast": [45, 51, 53, 54, 59, 67, 74, 76, 82, 151, 154, 179, 273, 367, 481, 482, 586, 588, 593, 603, 648, 711, 712, 717, 719, 776, 781, 787], "moments_v2": 45, "batch_norm": [45, 47, 54, 77, 361], "tensordot": [45, 59, 82, 593, 769], "softmax_v2": 45, "_slice_help": 45, "save_to_disk": [45, 47, 733], "12265048989200113": 45, "11038777417100028": 45, "1167045795539998": 45, "ivy_api_kei": 46, "combo": [46, 790], "permit": [46, 764, 775, 780, 782, 785], "usabl": [46, 749, 775, 783], "neither": [46, 222, 239, 246, 272, 588, 593, 643, 768, 780, 785], "nor": [46, 222, 239, 246, 272, 588, 768, 780, 806], "specifc": 46, "invoc": 46, "represent": [46, 54, 55, 71, 77, 78, 97, 149, 150, 164, 167, 192, 193, 219, 222, 229, 232, 234, 239, 246, 269, 272, 274, 289, 307, 330, 334, 339, 343, 349, 352, 492, 553, 583, 586, 587, 588, 590, 731, 794, 800, 801, 803, 807, 808], "opt": [46, 760, 765, 769, 779, 782, 785], "externally_link": 46, "logo": 46, "patch": [46, 290, 588, 769, 802], "cv2_imshow": 46, "envrion": 46, "canni": 46, "original_img": 46, "fn_arg": 46, "dilate_edg": 46, "morphologi": 46, "dilat": [46, 54, 58, 77, 81, 355, 358, 391, 392, 393, 396, 397, 446, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731], "hk_model": 46, "resnet18": [46, 47], "keras_model": 46, "count": [46, 54, 61, 65, 68, 73, 77, 84, 88, 91, 134, 205, 324, 352, 358, 367, 457, 478, 483, 585, 587, 593, 595, 601, 604, 621, 647, 654, 657, 703, 704, 721, 722, 766, 767, 771, 790], "odsc": 46, "talk": [46, 807], "networkx": 47, "228": 47, "352": [47, 81, 592, 616, 773], "nvidia_ml_py3": 47, "19190": 47, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 47, "b9": 47, "b1": 47, "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 47, "cycler": 47, "fonttool": 47, "965": 47, "pillow": 47, "kiwisolv": 47, "show_graph": [47, 733], "to_ivy_modul": [47, 728, 792], "image_dim": 47, "v0": [47, 791], "urlerror": 47, "dev_str": 47, "comp_network": 47, "time_chronolog": 47, "ret0_nc": 47, "ret1_nc": 47, "ret0_c": 47, "ret1_c": 47, "pytorch_vision_v0": 47, "distribut": [47, 54, 60, 63, 77, 83, 86, 355, 356, 357, 362, 378, 379, 380, 406, 415, 418, 421, 423, 466, 467, 468, 469, 470, 594, 599, 650, 651, 652, 692, 693, 694, 695, 697, 730, 731, 732, 733, 759, 760, 768, 770, 795, 802, 805], "distributed_c10d": 47, "262": 47, "reduce_op": 47, "deprec": 47, "reduceop": 47, "004645566477999864": 47, "0044566806820000695": 47, "attribut": [47, 71, 164, 165, 166, 167, 198, 199, 207, 507, 508, 586, 587, 590, 765, 766, 767, 769, 772, 773, 776, 777, 779, 780, 785, 788, 789, 790, 791], "max_pool2d": [47, 54, 77, 355, 374], "__iadd__": 47, "adaptive_avg_pool2d": [47, 54, 77, 355], "_arraywithactiv": [48, 96], "abc": [48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 100, 505, 590, 597, 690, 729, 730, 735, 743, 789], "_abc_impl": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 100, 101], "_abc": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 100, 101], "_abc_data": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 100, 101], "approxim": [48, 53, 54, 59, 70, 76, 77, 82, 94, 104, 220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 246, 260, 261, 262, 263, 277, 284, 285, 289, 290, 291, 331, 341, 352, 357, 421, 582, 588, 593, 634, 637, 727, 772, 780], "complex_mod": [48, 53, 70, 76, 104, 106, 109, 112, 290, 582, 588, 727, 777], "variant": [48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 148, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 571, 572, 575, 577, 578, 579, 580, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 634, 637, 638, 639, 641, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 764, 771, 772, 785], "docstr": [48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 122, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 367, 373, 374, 375, 376, 378, 379, 380, 382, 386, 387, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 523, 525, 526, 528, 533, 534, 548, 549, 550, 551, 553, 555, 556, 569, 570, 571, 572, 575, 577, 578, 579, 580, 585, 586, 588, 590, 593, 595, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 758, 759, 762, 766, 774, 775, 776, 777, 780, 783], "liter": [48, 53, 54, 59, 70, 76, 77, 82, 104, 106, 109, 112, 290, 355, 356, 358, 376, 386, 390, 406, 410, 415, 418, 446, 582, 588, 593, 602, 632, 648, 709, 727, 785], "magnitud": [48, 53, 70, 76, 104, 106, 109, 112, 219, 222, 239, 246, 272, 290, 582, 588, 593, 641, 642, 727], "handle_complex_input": [48, 53, 70, 76, 104, 106, 109, 112, 290, 582, 588, 727, 777], "element": [48, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 67, 70, 71, 73, 74, 76, 77, 78, 81, 82, 84, 86, 87, 88, 90, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 129, 135, 136, 144, 145, 146, 162, 164, 167, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 315, 316, 317, 318, 320, 321, 322, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 349, 352, 355, 356, 358, 367, 368, 378, 379, 380, 383, 388, 391, 392, 393, 397, 398, 402, 403, 404, 426, 427, 428, 436, 437, 438, 440, 443, 453, 455, 457, 478, 479, 481, 482, 483, 484, 485, 486, 488, 490, 494, 497, 498, 509, 510, 526, 528, 548, 549, 551, 555, 556, 582, 585, 588, 590, 592, 593, 595, 597, 599, 600, 601, 602, 603, 604, 615, 621, 623, 625, 626, 631, 636, 638, 639, 641, 645, 653, 656, 657, 658, 659, 660, 661, 662, 663, 672, 675, 681, 692, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 772, 781, 782, 785, 787, 806], "138": [48, 104, 582], "165": [48, 104, 582, 592, 616], "hardswish": [48, 70, 582, 727], "leaky_relu": [48, 70, 582], "alpha": [48, 53, 54, 70, 76, 77, 101, 106, 222, 288, 294, 305, 347, 349, 356, 362, 404, 467, 468, 469, 582, 588, 727, 775, 780, 781], "float": [48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 65, 67, 70, 73, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 90, 94, 96, 106, 112, 121, 122, 123, 130, 132, 134, 135, 136, 137, 138, 142, 143, 147, 151, 155, 159, 164, 168, 172, 178, 179, 182, 188, 197, 206, 210, 211, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 303, 304, 305, 306, 308, 309, 310, 320, 321, 327, 328, 333, 335, 336, 339, 340, 341, 344, 345, 347, 349, 352, 353, 355, 356, 357, 358, 361, 362, 367, 378, 379, 380, 397, 400, 403, 404, 415, 417, 418, 419, 422, 435, 453, 460, 461, 462, 465, 466, 467, 468, 469, 470, 480, 481, 482, 483, 488, 489, 496, 497, 498, 506, 515, 539, 540, 543, 548, 549, 569, 571, 572, 575, 577, 578, 579, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603, 615, 618, 619, 620, 622, 625, 626, 627, 629, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 645, 648, 650, 651, 652, 669, 670, 671, 678, 691, 694, 695, 701, 703, 704, 705, 706, 711, 712, 714, 715, 716, 717, 718, 719, 720, 727, 730, 731, 734, 735, 763, 767, 769, 772, 773, 775, 776, 778, 779, 781, 782, 783, 785, 787, 789, 791], "slope": [48, 54, 70, 77, 106, 294, 297, 347, 582, 727], "neg": [48, 53, 54, 59, 61, 63, 68, 70, 76, 77, 82, 84, 86, 91, 94, 106, 109, 112, 121, 132, 134, 146, 239, 246, 253, 254, 272, 273, 277, 281, 286, 304, 315, 317, 349, 356, 362, 401, 406, 410, 470, 582, 585, 588, 593, 595, 599, 604, 621, 623, 641, 645, 647, 648, 654, 656, 657, 661, 694, 721, 722, 727, 767, 779], "leaki": [48, 70, 106, 582, 727], "log_softmax": [48, 70, 582], "0719": [48, 70, 107], "221": [48, 107], "mish": [48, 70, 582, 727], "30340147": [48, 108, 582], "86509842": [48, 70, 108, 582], "269": [48, 110], "731": [48, 110], "881": [48, 53, 76, 110, 225, 238, 278, 588], "422": [48, 111, 582], "155": [48, 81, 111, 582, 592, 616], "softplu": [48, 70, 582, 727, 785], "beta": [48, 54, 62, 70, 77, 85, 112, 305, 308, 309, 349, 356, 357, 362, 404, 422, 468, 469, 582, 598, 691, 727, 785], "threshold": [48, 53, 54, 70, 76, 77, 112, 270, 271, 302, 321, 347, 352, 357, 358, 419, 422, 453, 582, 588, 727, 785], "3461": [48, 70, 112, 582], "6491": [48, 70, 112, 582], "535": [48, 70, 112, 582, 773], "_to_ivi": 49, "_to_n": 49, "to_ignor": [49, 69, 92, 597, 683, 684], "args_to_ivi": 49, "include_deriv": [49, 72, 597, 673, 684], "nest": [49, 71, 72, 97, 100, 242, 524, 553, 570, 573, 588, 590, 591, 596, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 729, 732, 733, 735, 764, 766, 767, 776, 778, 783, 790, 791, 795, 797, 802], "unchang": [49, 53, 355, 358, 398, 436, 592, 615], "deriv": [49, 50, 54, 56, 72, 73, 77, 79, 131, 136, 143, 148, 304, 308, 326, 349, 352, 571, 572, 575, 576, 577, 578, 579, 585, 591, 596, 597, 671, 673, 684, 733, 735, 736, 769, 770, 789, 791], "word": [49, 121, 358, 439, 585, 599, 695, 728, 731, 767, 779, 780, 797], "args_to_n": [49, 779], "cont_inplac": 49, "decid": [49, 71, 597, 672, 673, 682, 683, 684, 749, 759, 760, 769, 785], "to_ivi": [49, 72, 597, 685, 779], "leaf": [49, 71, 78, 90, 97, 505, 597, 682, 683, 685, 712, 767, 776, 790], "travers": [49, 72, 597, 676, 684, 767, 769, 773, 787], "lowest": [49, 54, 63, 72, 77, 86, 367, 483, 597, 599, 684, 693, 776, 795, 797, 799, 803, 807], "search": [49, 54, 72, 77, 698, 699, 751, 758, 760, 767, 771, 782, 783], "_arraywithcr": [50, 96], "boolean": [50, 51, 53, 54, 55, 61, 64, 67, 71, 73, 74, 76, 77, 78, 84, 87, 90, 96, 97, 118, 120, 122, 123, 129, 135, 151, 167, 169, 171, 172, 175, 191, 201, 209, 215, 229, 230, 231, 232, 233, 234, 266, 267, 268, 269, 333, 352, 356, 358, 406, 415, 418, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 491, 494, 505, 512, 515, 516, 520, 521, 522, 523, 524, 525, 526, 535, 538, 541, 542, 544, 545, 569, 584, 585, 586, 587, 588, 590, 595, 596, 597, 600, 603, 656, 657, 658, 660, 662, 663, 665, 667, 669, 670, 682, 700, 701, 702, 714, 716, 734, 767, 769, 776, 780, 782, 785], "never": [50, 54, 61, 73, 77, 84, 123, 358, 426, 427, 428, 432, 434, 436, 437, 438, 441, 445, 452, 458, 512, 590, 595, 656, 657, 658, 660, 662, 663, 665, 667, 761, 769, 779, 780, 782], "valueerror": [50, 61, 73, 77, 84, 88, 123, 355, 358, 388, 398, 426, 427, 432, 434, 436, 437, 438, 445, 451, 458, 595, 656, 657, 658, 660, 662, 663, 665, 667, 706, 744, 773], "buffer": [50, 73, 77, 84, 123, 134, 426, 427, 432, 434, 436, 437, 438, 445, 458, 585, 656, 657, 658, 660, 662, 663, 665, 667, 733, 779, 795], "nativedtyp": [50, 51, 54, 58, 59, 63, 64, 67, 73, 77, 82, 86, 87, 90, 121, 122, 123, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 147, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 173, 175, 177, 181, 191, 303, 304, 305, 306, 307, 308, 309, 319, 324, 338, 349, 352, 362, 367, 466, 467, 468, 469, 470, 480, 481, 482, 483, 486, 488, 585, 586, 592, 593, 599, 600, 602, 603, 615, 648, 693, 694, 695, 698, 699, 709, 711, 712, 717, 719, 730, 769, 770, 775, 783, 787], "nativedevic": [50, 52, 54, 63, 73, 75, 77, 86, 121, 122, 123, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 193, 194, 195, 196, 197, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 303, 304, 315, 349, 362, 466, 467, 469, 470, 585, 587, 599, 692, 693, 694, 695, 730, 735, 736, 769, 770, 773, 775, 783], "39999998": [50, 122, 123, 585, 601, 704], "5999999": [50, 81, 122, 123, 585, 592, 615, 619], "0999999": [50, 67, 122, 123, 335, 352, 585, 715], "10000038": [50, 122, 123, 585], "90786433e": [50, 122, 123, 585], "310": [50, 122, 123, 585], "copy_arrai": [50, 73, 585], "to_ivy_arrai": [50, 73, 129, 585], "empty_lik": [50, 54, 73, 77, 356, 402, 585], "deafult": [50, 64, 87, 131, 585, 698], "uniniti": [50, 130, 131, 585, 774], "from_dlpack": [50, 73, 585], "full_lik": [50, 73, 585, 783], "fill_valu": [50, 54, 64, 73, 77, 87, 135, 136, 251, 259, 362, 470, 585, 588, 600, 701, 737, 769, 781, 783], "scalar": [50, 53, 54, 55, 59, 70, 73, 76, 77, 78, 82, 94, 106, 136, 141, 222, 243, 288, 300, 322, 323, 325, 328, 331, 333, 335, 340, 347, 352, 356, 358, 404, 426, 427, 428, 440, 556, 569, 585, 588, 590, 593, 648, 769, 778, 780, 795, 802], "fill": [50, 53, 54, 63, 64, 71, 73, 76, 77, 86, 87, 130, 135, 136, 138, 141, 142, 143, 147, 148, 273, 304, 349, 356, 358, 362, 406, 410, 415, 418, 435, 454, 467, 469, 470, 585, 588, 599, 600, 693, 701, 730, 759, 781], "000123": [50, 136, 585], "stop": [50, 54, 56, 73, 77, 79, 121, 137, 138, 212, 356, 415, 418, 535, 572, 575, 577, 578, 579, 580, 585, 587, 590, 591, 596, 597, 669, 670, 671, 683, 735, 775, 778, 785, 787, 795, 802], "num": [50, 73, 137, 138, 585, 761, 775, 787], "endpoint": [50, 73, 137, 138, 585, 730, 775], "logspac": [50, 73, 585, 787], "log": [50, 53, 54, 59, 73, 76, 77, 82, 112, 138, 262, 264, 277, 295, 296, 336, 343, 347, 352, 357, 362, 421, 466, 582, 585, 588, 639, 727, 761, 767, 768, 771, 776, 779, 780, 781, 782, 784, 785, 787, 790], "sequenc": [50, 54, 58, 59, 61, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 132, 134, 136, 138, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 304, 307, 313, 314, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 347, 349, 353, 355, 356, 358, 362, 367, 368, 370, 371, 378, 379, 380, 382, 383, 387, 388, 390, 397, 398, 406, 407, 409, 413, 414, 415, 418, 419, 420, 422, 423, 424, 426, 427, 428, 431, 432, 433, 439, 441, 442, 444, 445, 447, 450, 452, 454, 455, 458, 459, 460, 462, 463, 464, 465, 467, 468, 480, 481, 482, 483, 489, 490, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 529, 533, 534, 548, 549, 551, 553, 555, 556, 569, 570, 573, 574, 575, 580, 585, 588, 590, 591, 592, 593, 595, 597, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 618, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 648, 650, 651, 652, 653, 654, 656, 657, 659, 660, 661, 662, 663, 664, 667, 668, 672, 679, 689, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 734, 736, 761, 768, 769, 770, 771, 773, 782, 783, 785, 787, 792, 794, 805], "on_valu": [50, 73, 138, 141, 585], "off_valu": [50, 73, 138, 141, 585], "evenli": [50, 53, 54, 58, 61, 71, 73, 76, 81, 84, 121, 137, 138, 291, 355, 397, 585, 588, 592, 595, 605, 606, 607, 608, 610, 612, 614, 662], "hint": [50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 446, 480, 483, 509, 513, 515, 517, 556, 580, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 759, 764, 772, 775, 776, 779, 780, 783], "simplic": [50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 446, 480, 483, 509, 513, 515, 517, 556, 580, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 772, 785, 791, 794], "nestabl": [50, 53, 54, 59, 76, 77, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 304, 315, 316, 322, 325, 349, 352, 355, 356, 358, 367, 373, 374, 375, 376, 378, 379, 380, 386, 391, 392, 393, 394, 404, 446, 480, 483, 487, 495, 503, 504, 509, 513, 515, 517, 519, 533, 551, 556, 580, 585, 586, 588, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 691, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 759, 762, 771, 772, 779, 782, 797], "464": [50, 53, 86, 138, 226, 227, 588], "15888336": [50, 138], "2154": [50, 138], "43469003": [50, 138], "meshgrid": [50, 73, 585], "spars": [50, 54, 60, 73, 77, 83, 139, 307, 349, 356, 406, 415, 418, 585, 594, 652], "xy": [50, 73, 139, 585], "dimension": [50, 53, 54, 59, 61, 64, 67, 68, 71, 73, 76, 77, 82, 84, 90, 91, 96, 121, 132, 134, 139, 146, 291, 315, 349, 355, 356, 358, 367, 382, 383, 387, 388, 398, 401, 426, 427, 428, 435, 436, 478, 489, 585, 588, 593, 595, 600, 603, 604, 621, 622, 628, 631, 634, 636, 637, 647, 648, 662, 698, 699, 701, 714, 715, 716, 717, 718, 719, 720, 721, 722, 776, 778, 782, 785, 787, 799, 802, 809], "repres": [50, 53, 54, 58, 59, 76, 77, 81, 82, 120, 139, 141, 163, 221, 222, 225, 228, 237, 239, 246, 272, 285, 289, 290, 307, 317, 318, 331, 349, 352, 355, 356, 358, 361, 362, 365, 397, 408, 446, 460, 461, 462, 466, 472, 479, 584, 585, 586, 588, 592, 593, 615, 616, 628, 636, 639, 640, 730, 734, 764, 785, 789, 799, 800, 803], "coordin": [50, 53, 64, 76, 77, 87, 139, 146, 227, 289, 311, 312, 315, 331, 349, 363, 471, 585, 588, 600, 701], "conserv": [50, 139, 585], "cartesian": [50, 139, 585], "matrix": [50, 54, 55, 58, 59, 77, 78, 81, 82, 94, 96, 139, 144, 145, 146, 315, 316, 349, 356, 358, 367, 400, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 444, 480, 491, 497, 585, 590, 592, 593, 616, 620, 622, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 645, 646, 649, 730, 731, 759, 769, 780, 800, 802], "ij": [50, 67, 139, 585, 603, 713], "respect": [50, 53, 54, 56, 59, 76, 77, 79, 82, 94, 139, 219, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 281, 285, 288, 289, 295, 331, 346, 347, 352, 354, 356, 358, 361, 417, 425, 460, 462, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 585, 588, 591, 592, 593, 596, 605, 612, 613, 621, 638, 641, 669, 670, 671, 730, 758, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 775, 776, 778, 779, 780, 782, 783, 784, 798, 808], "rank": [50, 54, 59, 61, 68, 77, 82, 84, 91, 94, 95, 100, 139, 313, 314, 349, 356, 358, 367, 406, 407, 415, 418, 446, 489, 585, 593, 595, 600, 604, 621, 623, 632, 634, 638, 640, 645, 647, 648, 655, 656, 664, 667, 668, 701, 721, 722], "ni": [50, 139, 585], "xi": [50, 139, 585], "scatter": [50, 55, 73, 78, 141, 533, 534, 585, 590, 766, 779, 785, 809], "dimens": [50, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 96, 97, 100, 107, 111, 141, 144, 145, 307, 314, 316, 317, 318, 324, 325, 331, 338, 345, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 367, 369, 370, 371, 373, 374, 375, 377, 382, 383, 387, 391, 392, 393, 394, 397, 399, 400, 403, 416, 421, 426, 427, 428, 436, 447, 448, 449, 450, 452, 460, 461, 462, 468, 470, 473, 483, 485, 486, 487, 488, 489, 502, 503, 504, 506, 513, 547, 550, 570, 582, 585, 590, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 648, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 669, 670, 671, 697, 698, 699, 701, 703, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 734, 771, 773, 778, 780, 781, 782, 785, 787, 790], "ones_lik": [50, 73, 585, 765, 792], "tril": [50, 73, 585], "whose": [50, 53, 54, 55, 59, 61, 65, 67, 73, 76, 77, 78, 82, 84, 88, 90, 96, 136, 144, 145, 221, 225, 228, 236, 237, 238, 277, 278, 284, 285, 289, 290, 291, 316, 330, 334, 335, 337, 341, 349, 356, 358, 403, 445, 457, 496, 551, 585, 588, 590, 593, 595, 601, 603, 620, 622, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 648, 657, 661, 703, 704, 705, 712, 713, 772, 782], "innermost": [50, 54, 59, 82, 144, 145, 316, 349, 356, 403, 585, 593, 620, 622, 624, 625, 626, 627, 629, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 645], "mxn": [50, 54, 59, 82, 144, 145, 316, 349, 585, 593, 624, 632, 634, 635, 637, 638, 642, 645], "matric": [50, 54, 59, 77, 82, 94, 96, 139, 144, 145, 316, 349, 356, 358, 403, 406, 407, 409, 413, 414, 417, 435, 585, 592, 593, 616, 620, 622, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 645, 646, 757, 794, 802], "diagon": [50, 54, 59, 77, 82, 132, 144, 145, 146, 304, 315, 316, 349, 356, 358, 401, 404, 410, 435, 585, 593, 623, 645], "triangular": [50, 54, 59, 82, 144, 145, 146, 315, 316, 349, 585, 593, 620, 626, 627, 634, 638], "alloc": [50, 51, 54, 74, 144, 145, 151, 316, 349, 585, 586, 759, 761, 795], "triu": [50, 73, 585], "upper": [50, 54, 59, 63, 77, 82, 86, 132, 145, 146, 304, 316, 349, 367, 483, 585, 593, 599, 620, 626, 627, 638, 695, 729, 779, 782], "zeros_lik": [50, 73, 151, 268, 571, 572, 575, 577, 579, 585, 586, 588, 591, 595, 653, 780, 785], "data_typ": [51, 54, 74, 77, 181, 586, 766, 769, 782, 783], "_arraywithdatatyp": [51, 96], "irrespect": [51, 59, 74, 82, 151, 586, 593, 641, 767, 779, 789, 809], "promot": [51, 53, 54, 59, 74, 76, 77, 82, 89, 96, 97, 151, 154, 177, 178, 179, 185, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 239, 242, 244, 246, 260, 261, 262, 263, 264, 269, 272, 277, 281, 284, 285, 286, 287, 288, 289, 290, 293, 328, 336, 341, 352, 367, 480, 542, 564, 586, 588, 590, 593, 595, 603, 620, 621, 628, 629, 631, 632, 633, 634, 636, 637, 639, 640, 647, 648, 654, 664, 707, 715, 718, 763, 772, 773, 776, 784], "nan": [51, 53, 54, 55, 65, 67, 74, 76, 77, 78, 151, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 273, 275, 277, 278, 281, 282, 283, 284, 285, 286, 289, 290, 292, 295, 320, 329, 333, 338, 341, 347, 352, 367, 478, 479, 486, 487, 488, 515, 569, 583, 586, 588, 590, 601, 603, 604, 703, 704, 705, 706, 714, 715, 716, 718, 719, 720, 721, 722, 763, 769, 772, 778, 783, 784], "infin": [51, 53, 55, 59, 74, 76, 82, 151, 219, 220, 221, 222, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 260, 261, 262, 263, 264, 267, 272, 273, 275, 277, 281, 282, 284, 285, 286, 289, 290, 292, 341, 352, 515, 583, 586, 588, 590, 593, 603, 604, 639, 648, 714, 716, 721, 722, 763, 772], "broadcast_arrai": [51, 74, 586], "mix": [51, 53, 74, 76, 77, 78, 83, 86, 96, 97, 152, 165, 166, 179, 198, 199, 229, 232, 233, 234, 239, 240, 246, 250, 258, 259, 269, 272, 275, 281, 357, 367, 422, 487, 505, 507, 508, 509, 510, 519, 553, 556, 586, 587, 588, 590, 592, 593, 594, 595, 598, 603, 606, 608, 611, 614, 616, 619, 620, 643, 650, 652, 653, 691, 713, 715, 718, 759, 762, 769, 770, 771, 779, 785, 787, 797, 802, 806, 808], "broadcast_to": [51, 74, 586, 769], "can_cast": [51, 74, 586, 769, 776, 780], "accord": [51, 54, 55, 61, 67, 74, 84, 90, 154, 164, 222, 233, 239, 246, 272, 283, 310, 349, 355, 358, 398, 446, 509, 512, 533, 534, 586, 588, 590, 593, 595, 603, 647, 655, 668, 718, 720, 737, 743, 759, 760, 763, 769, 774, 776, 780, 782], "finfo": [51, 74, 586, 782], "resolut": [51, 74, 164, 586, 761], "4028235e": [51, 164, 586], "iinfo": [51, 74, 586], "integ": [51, 53, 54, 58, 59, 61, 63, 67, 68, 71, 76, 77, 78, 81, 82, 84, 86, 90, 91, 96, 97, 121, 135, 167, 168, 174, 178, 179, 183, 219, 229, 230, 231, 232, 233, 234, 235, 245, 246, 257, 269, 274, 277, 281, 282, 292, 293, 317, 318, 324, 327, 328, 349, 352, 355, 358, 362, 365, 367, 382, 387, 397, 432, 441, 446, 458, 466, 467, 468, 469, 470, 472, 473, 478, 480, 481, 482, 487, 489, 512, 528, 538, 570, 585, 586, 588, 590, 592, 593, 595, 599, 602, 603, 604, 605, 606, 607, 608, 610, 612, 614, 621, 623, 633, 647, 648, 662, 692, 693, 694, 695, 696, 697, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 731, 761, 767, 769, 778, 781, 782, 787, 789], "119": [51, 167], "122": [51, 167, 237, 588], "1220": [51, 167], "int16": [51, 54, 63, 67, 74, 86, 154, 158, 160, 165, 167, 174, 189, 300, 347, 367, 481, 482, 586, 603, 693, 711, 712, 717, 719, 769, 780, 782, 787], "32768": [51, 74, 167, 549, 590], "32767": [51, 74, 167], "is_bool_dtyp": [51, 74, 586], "is_float_dtyp": [51, 74, 586, 783], "is_int_dtyp": [51, 74, 586, 781, 783], "is_uint_dtyp": [51, 74, 586, 781, 783], "result_typ": [51, 74, 586, 769], "arrays_and_dtyp": [51, 74, 179, 586], "_arraywithdevic": [52, 96], "move": [52, 54, 75, 77, 146, 209, 213, 217, 315, 349, 358, 445, 585, 587, 749, 761, 770, 783], "__dlpack__": [52, 75, 133, 213, 585, 587], "caveat": [52, 75, 213, 357, 421, 587], "portabl": [52, 75, 213, 587, 749, 800], "_arraywithelementwis": [53, 96], "ab": [53, 59, 69, 76, 92, 96, 97, 277, 320, 333, 352, 358, 453, 588, 593, 597, 632, 642, 648, 680, 683, 743, 757, 764, 769, 777, 780, 782], "absolut": [53, 54, 59, 69, 71, 76, 77, 82, 96, 219, 283, 320, 333, 336, 342, 352, 356, 357, 404, 416, 419, 420, 588, 593, 632, 633, 634, 639, 754, 760], "aco": [53, 76, 588], "invers": [53, 54, 59, 76, 77, 82, 220, 221, 224, 225, 226, 227, 228, 355, 365, 377, 386, 388, 472, 588, 593, 629, 633, 637, 737, 769, 794], "cosin": [53, 76, 220, 221, 236, 237, 303, 306, 349, 355, 376, 386, 588, 731], "acosh": [53, 76, 165, 166, 586, 588, 757], "area": [53, 54, 76, 77, 81, 221, 225, 228, 355, 390, 397, 588, 752, 779, 785, 793, 798], "hyperbol": [53, 76, 221, 225, 228, 237, 285, 289, 290, 588], "sector": [53, 76, 221, 225, 228, 588, 752], "second": [53, 54, 56, 59, 61, 65, 76, 77, 78, 79, 82, 84, 88, 96, 97, 118, 146, 177, 185, 222, 227, 229, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 272, 275, 277, 288, 310, 315, 320, 329, 331, 332, 333, 339, 343, 344, 349, 352, 356, 357, 358, 365, 367, 402, 403, 404, 408, 422, 452, 457, 467, 469, 473, 480, 483, 494, 543, 565, 571, 572, 577, 584, 585, 586, 588, 590, 591, 593, 595, 596, 597, 601, 621, 624, 625, 626, 628, 631, 636, 638, 639, 641, 643, 647, 664, 665, 670, 673, 703, 704, 705, 735, 753, 760, 763, 766, 769, 771, 774, 779, 780, 782, 784, 789, 807], "multipli": [53, 54, 58, 67, 76, 77, 81, 94, 222, 288, 334, 355, 356, 390, 412, 413, 481, 482, 588, 592, 603, 615, 711, 717, 761, 764, 765, 767, 771], "angl": [53, 76, 227, 237, 285, 290, 332, 352, 588, 794], "deg": [53, 76, 223, 588], "radian": [53, 54, 76, 77, 220, 223, 224, 226, 227, 236, 238, 278, 284, 289, 341, 352, 588, 772], "degre": [53, 54, 67, 76, 77, 90, 223, 238, 278, 358, 452, 588, 603, 718, 720, 801], "1j": [53, 76, 77, 223, 224, 236, 237, 242, 244, 256, 279, 284, 285, 289, 322, 548, 588, 590], "2j": [53, 54, 76, 77, 223, 252, 322, 355, 382, 387, 549, 588, 590], "3j": [53, 54, 76, 77, 223, 256, 279, 322, 352, 588], "35619449": [53, 223, 588], "78539816": [53, 223, 588], "135": [53, 223, 497, 588, 590], "asin": [53, 76, 588], "sine": [53, 76, 224, 225, 284, 285, 588], "927": [53, 76, 224], "asinh": [53, 76, 224, 588], "atan": [53, 76, 588], "tangent": [53, 76, 226, 227, 228, 289, 290, 588, 772], "785": [53, 76, 226, 227, 588], "atan2": [53, 76, 588], "quotient": [53, 76, 227, 239, 246, 588], "245": [53, 81, 227, 592, 615, 616], "588": [53, 227, 588], "inf": [53, 54, 55, 59, 76, 77, 78, 82, 227, 244, 253, 254, 255, 256, 260, 261, 273, 295, 336, 347, 352, 356, 367, 400, 483, 515, 569, 583, 588, 590, 593, 632, 648, 757, 769, 778], "719": [53, 227, 588], "197": [53, 227, 588], "atanh": [53, 76, 588], "549": [53, 76, 81, 228, 588, 592, 616], "bitwise_and": [53, 76, 588], "bitwise_invert": [53, 76, 588], "bitiwse_invert": [53, 230], "bitwise_left_shift": [53, 76, 588], "bitwise_or": [53, 76, 588], "bitwise_right_shift": [53, 76, 96, 588], "bitwise_xor": [53, 76, 96, 588], "ceil": [53, 54, 76, 77, 94, 121, 355, 373, 374, 375, 391, 392, 393, 396, 585, 588, 731, 779], "round": [53, 54, 76, 77, 94, 95, 222, 235, 239, 245, 246, 272, 286, 292, 293, 327, 352, 588, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794], "416": [53, 236, 588], "540": [53, 236], "990": [53, 236], "cosh": [53, 76, 236, 588], "deg2rad": [53, 76, 588], "convers": [53, 54, 77, 238, 278, 535, 545, 590, 753, 759, 765, 786, 788, 792, 794, 795, 797, 801, 808], "180": [53, 76, 238, 278, 588], "270": [53, 76, 238, 278, 588], "360": [53, 76, 238, 278, 588, 768], "dividend": [53, 76, 239, 246, 281, 293, 588], "divisor": [53, 54, 56, 67, 76, 77, 79, 90, 239, 246, 249, 250, 281, 293, 355, 358, 373, 374, 375, 432, 441, 458, 571, 572, 577, 588, 591, 603, 718, 720, 731, 735], "375": [53, 240, 275], "erf": [53, 76, 588], "exponenti": [53, 54, 76, 77, 241, 242, 244, 264, 277, 299, 347, 356, 411, 588], "gauss": [53, 76, 241, 588], "328": [53, 241, 289, 588], "677": [53, 241, 588], "842": [53, 241, 289, 588], "71828198": [53, 76, 242], "38905573": [53, 76, 242], "08553696": [53, 76, 242, 588], "exp2": [53, 76, 588], "expm1": [53, 76, 588, 769], "244": [53, 244, 749], "918": [53, 244], "147": [53, 244, 588], "floor": [53, 54, 76, 77, 94, 233, 246, 355, 373, 374, 375, 377, 391, 392, 393, 396, 588, 731, 779], "floor_divid": [53, 76, 588], "fmin": [53, 76, 588], "gcd": [53, 76, 588, 769], "greater": [53, 54, 58, 61, 63, 76, 77, 81, 86, 96, 97, 134, 220, 221, 224, 225, 227, 228, 231, 233, 239, 245, 246, 260, 262, 277, 281, 283, 285, 286, 290, 291, 292, 321, 352, 355, 377, 382, 387, 585, 588, 592, 593, 595, 599, 619, 621, 633, 663, 695, 761, 781], "greater_equ": [53, 76, 96, 97, 264, 588], "imaginari": [53, 76, 96, 106, 109, 112, 142, 143, 220, 221, 222, 237, 239, 240, 242, 244, 252, 272, 274, 275, 282, 285, 286, 290, 322, 352, 356, 404, 582, 585, 588, 600, 701, 771], "4j": [53, 76, 252, 549, 588, 590], "6j": [53, 54, 76, 252, 256, 322, 588], "isfinit": [53, 76, 588, 780], "out_i": [53, 76, 253, 254, 255, 256, 279, 588], "self_i": [53, 76, 253, 254, 255, 256, 279], "finit": [53, 76, 219, 220, 221, 222, 225, 227, 228, 237, 239, 240, 242, 244, 246, 253, 254, 260, 262, 272, 273, 275, 277, 281, 285, 286, 290, 588], "isinf": [53, 76, 588], "detect_posit": [53, 76, 254, 588], "detect_neg": [53, 76, 254, 588], "isnan": [53, 76, 588], "isreal": [53, 76, 588], "5j": [53, 76, 77, 256, 279, 322, 352, 588], "lcm": [53, 76, 588, 769], "less": [53, 54, 59, 63, 67, 76, 77, 82, 86, 96, 97, 220, 221, 224, 227, 228, 235, 239, 246, 260, 261, 262, 263, 277, 281, 283, 286, 340, 352, 355, 356, 367, 376, 377, 386, 415, 418, 480, 483, 588, 593, 599, 603, 632, 633, 634, 637, 648, 695, 718, 720, 731, 752, 760, 761, 767, 769, 771, 773, 775, 780, 782, 785, 786, 787, 802, 804], "less_equ": [53, 76, 96, 97, 588, 773], "log10": [53, 54, 76, 310, 349, 588], "logarithm": [53, 76, 242, 260, 261, 262, 263, 264, 326, 336, 352, 588, 593, 639], "602": [53, 261, 588], "699": [53, 261, 588], "log1p": [53, 76, 588, 778], "693": [53, 76, 111, 225, 262, 582, 588, 594, 652], "0953": [53, 76, 260, 262, 588], "log2": [53, 76, 265, 588], "logaddexp": [53, 76, 588], "logaddexp2": [53, 76, 588, 757], "169925": [53, 76, 265, 588], "logical_and": [53, 76, 588, 780, 785, 809], "logical_not": [53, 76, 588, 769], "logical_or": [53, 76, 588, 809], "conform": [53, 59, 76, 121, 122, 123, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 322, 352, 367, 480, 585, 586, 588, 593, 595, 600, 601, 602, 603, 604, 620, 621, 622, 623, 624, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 654, 656, 657, 658, 660, 661, 663, 664, 668, 698, 699, 701, 702, 703, 704, 705, 706, 707, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 772, 774], "api_specif": [53, 76, 154, 242, 252, 253, 268, 586, 588, 595, 603, 668, 718, 772], "array_api": [53, 76, 154, 242, 252, 253, 268, 586, 588, 593, 595, 603, 639, 668, 718, 772], "logical_xor": [53, 76, 588], "maximum": [53, 54, 55, 56, 61, 64, 67, 71, 76, 77, 78, 79, 84, 87, 90, 97, 212, 329, 342, 352, 355, 356, 358, 367, 371, 381, 415, 418, 446, 481, 483, 497, 498, 506, 577, 587, 588, 590, 591, 593, 595, 597, 600, 603, 632, 653, 684, 698, 699, 714, 716, 761, 771, 779, 790, 809], "use_wher": [53, 76, 270, 271, 588], "formula": [53, 54, 76, 239, 261, 263, 270, 271, 272, 310, 335, 349, 352, 361, 460, 462, 588], "exce": [53, 54, 77, 271, 358, 455, 588], "product": [53, 54, 58, 59, 67, 76, 77, 81, 82, 90, 94, 272, 356, 367, 402, 407, 408, 409, 412, 413, 414, 481, 482, 488, 588, 592, 593, 603, 618, 619, 621, 628, 631, 636, 643, 647, 711, 712, 713, 717, 718, 759, 787, 802, 804], "nan_to_num": [53, 76, 588], "posinf": [53, 76, 273, 588], "neginf": [53, 76, 273, 588], "5e": [53, 56, 76, 77, 273, 339, 577, 588, 591], "not_equ": [53, 76, 96, 97, 588], "pow": [53, 76, 96, 97, 588, 763], "expon": [53, 54, 55, 77, 78, 277, 328, 330, 334, 352, 549, 588, 590, 593, 633], "rad2deg": [53, 76, 588], "286": [53, 77, 278], "458": [53, 278], "573": [53, 278, 588], "reciproc": [53, 76, 588], "333": [53, 76, 239, 280, 498, 588, 590], "remaind": [53, 54, 61, 71, 76, 77, 84, 248, 588, 595, 662, 763, 779], "modulu": [53, 76, 281, 588, 779], "sign": [53, 54, 59, 65, 67, 76, 77, 82, 94, 121, 219, 220, 221, 222, 225, 227, 228, 233, 237, 239, 242, 244, 246, 272, 274, 281, 285, 286, 290, 323, 352, 356, 358, 367, 416, 453, 481, 482, 585, 588, 593, 601, 603, 639, 703, 704, 705, 706, 711, 712, 717, 719, 752, 760, 787, 792], "x2_i": [53, 76, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 588, 763], "decim": [53, 76, 282, 588, 784], "0001": [53, 54, 77, 282, 283, 356, 415, 418, 735], "678": [53, 282, 283], "np_variant": [53, 76, 283, 588], "841": [53, 70, 76, 104, 284, 582, 588], "909": [53, 76, 78, 284, 588], "141": [53, 76, 151, 284, 586, 588], "sinh": [53, 76, 284, 588], "232": [53, 76, 285, 588], "sqrt": [53, 54, 76, 77, 355, 377, 382, 383, 387, 388, 588, 730, 749], "squar": [53, 54, 59, 76, 77, 82, 286, 356, 357, 367, 403, 411, 419, 480, 573, 574, 576, 581, 588, 591, 593, 597, 620, 622, 623, 625, 626, 627, 629, 633, 639, 640, 641, 646, 678, 749], "tanh": [53, 76, 289, 588, 727, 787], "762": [53, 76, 290, 588], "964": [53, 76, 290, 588], "trapz": [53, 76, 588], "dx": [53, 76, 291, 588], "apart": [53, 76, 291, 588], "trapezoid": [53, 76, 291, 588], "trunc": [53, 76, 588], "025": [53, 292, 357, 422, 588, 596, 671], "trunc_divid": [53, 76, 588], "_arraywithactivationsexperiment": [54, 96], "elu": [54, 77, 347, 727], "scaler": [54, 77, 294, 347, 782], "ep": [54, 59, 62, 77, 82, 85, 164, 295, 347, 356, 361, 404, 460, 461, 462, 586, 593, 598, 634, 637, 691, 727, 734], "outpu": [54, 77, 295, 347], "19722438": [54, 77, 295, 347], "38629448": [54, 77, 295, 347], "38629436": [54, 77, 295, 347], "logsigmoid": [54, 77, 347, 727], "31326175": [54, 70, 296, 347], "126928": [54, 77, 296], "01814993": [54, 296], "00004578": [54, 296], "57888985": [54, 296], "31326169": [54, 77, 296, 347], "69314718": [54, 59, 70, 77, 82, 296, 336, 347, 352, 593, 639], "01104775": [54, 296], "prelu": [54, 77, 347, 727], "unidirect": [54, 297, 347], "relu6": [54, 77, 347, 727], "rectifi": [54, 70, 77, 106, 108, 109, 298, 301, 302, 347, 582], "selu": [54, 77, 347, 727], "11133075": [54, 299, 347], "05070102": [54, 77, 299, 347], "10140204": [54, 299, 347], "15210295": [54, 299, 347], "20280409": [54, 299, 347], "25350523": [54, 299, 347], "30420589": [54, 299, 347], "35490704": [54, 299, 347], "silu": [54, 77, 347, 727], "26894143": [54, 301], "73105854": [54, 77, 301], "thresholded_relu": [54, 77, 347], "_arraywithconversionsexperiment": [54, 96], "_arraywithcreationexperiment": [54, 96], "blackman_window": [54, 77, 349], "period": [54, 77, 285, 289, 303, 305, 306, 308, 309, 349, 355, 389, 588, 761], "window": [54, 58, 77, 81, 303, 305, 306, 308, 309, 319, 349, 355, 373, 374, 375, 377, 391, 392, 393, 394, 396, 397, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731, 755, 761, 807], "symmetr": [54, 59, 77, 82, 94, 303, 305, 306, 308, 309, 349, 356, 358, 403, 446, 593, 620, 625, 626, 627, 649, 767], "38777878e": [54, 77, 303, 349], "40000000e": [54, 303, 349], "00000000e": [54, 77, 78, 303, 349, 355, 376, 382, 386, 387, 757], "30000000e": [54, 77, 303, 349], "eye_lik": [54, 77, 349], "elsewher": [54, 77, 132, 304, 349, 585, 600, 702, 760], "mel_weight_matrix": [54, 77, 349], "num_mel_bin": [54, 77, 310, 349], "dft_length": [54, 77, 310, 349, 355, 377], "sample_r": [54, 77, 310, 349], "lower_edge_hertz": [54, 77, 310, 349], "upper_edge_hertz": [54, 77, 310, 349], "3000": [54, 77, 310, 349], "melweightmatrix": [54, 77, 310, 349], "linearli": [54, 55, 78, 310, 349, 506, 590, 593, 640], "frequenc": [54, 55, 77, 78, 310, 349, 367, 480, 506, 590, 761], "spectra": [54, 310, 349], "dft": [54, 77, 310, 349, 355], "stft": [54, 310, 349], "mel": [54, 77, 310, 349], "term": [54, 303, 310, 349, 357, 421, 592, 617, 731, 749, 751, 761, 767, 787, 797, 802], "hertz": [54, 310, 349], "2595": [54, 310, 349], "700": [54, 78, 310, 349, 510], "band": [54, 55, 77, 78, 310, 349, 506, 590], "spectrum": [54, 77, 310, 349], "n_fft": [54, 77, 310, 349, 355, 377], "signal": [54, 77, 310, 349, 355, 369, 370, 371, 376, 377, 386, 731, 801, 802], "bound": [54, 77, 310, 349, 358, 430, 451, 454, 773, 780, 782, 787, 808], "8000": [54, 77, 305, 310, 349], "75694758": [54, 310, 349], "trilu": [54, 77, 349], "retain": [54, 146, 315, 316, 349, 573, 585, 591, 778, 797], "unsorted_segment_min": [54, 77, 349], "segment_id": [54, 77, 317, 318, 349, 737], "num_seg": [54, 77, 317, 318, 349, 737], "th": [54, 77, 317, 318, 325, 349, 352, 356, 367, 401, 406, 489], "identifi": [54, 77, 317, 318, 349, 763, 768, 782, 785], "distinct": [54, 65, 77, 317, 318, 349, 601, 703, 704, 705, 706, 752, 760, 767, 772, 778, 779, 780, 786, 802], "unsorted_segment_sum": [54, 77, 349], "_arraywithdata_typeexperiment": [54, 96], "_arraywithdeviceexperiment": [54, 96], "_arraywithelementwiseexperiment": [54, 96], "equal_nan": [54, 77, 320, 333, 352], "rel": [54, 56, 59, 61, 66, 73, 77, 79, 82, 84, 89, 96, 136, 320, 333, 352, 357, 367, 421, 480, 572, 575, 577, 578, 579, 591, 593, 595, 602, 624, 634, 637, 645, 657, 661, 707, 710, 761, 768, 781, 785, 802, 804], "toler": [54, 59, 77, 82, 320, 333, 352, 356, 404, 415, 418, 593, 634, 637, 763, 781, 802], "1e10": [54, 320, 333, 352], "00001e10": [54, 320, 333, 352], "00001e": [54, 320, 352], "binar": [54, 77, 352], "outcom": [54, 77, 321, 331, 352], "conj": [54, 77, 237, 242, 244, 285, 286, 290, 352, 588], "conjug": [54, 59, 77, 82, 322, 352, 355, 356, 362, 377, 399, 404, 412, 414, 468, 593, 631, 635, 643], "copysign": [54, 77, 352], "unsign": [54, 67, 77, 323, 352, 367, 481, 482, 603, 711, 712, 717, 719, 769, 787], "count_nonzero": [54, 77, 352], "keepdim": [54, 59, 61, 64, 67, 68, 71, 77, 82, 84, 87, 90, 91, 324, 338, 345, 352, 353, 367, 485, 486, 487, 488, 489, 593, 595, 600, 603, 604, 632, 648, 667, 698, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 773, 780, 787], "diff": [54, 71, 77, 352, 771, 779], "prepend": [54, 77, 325, 352, 593, 595, 631, 656, 760], "differenc": [54, 77, 325, 352], "prior": [54, 77, 325, 352, 362, 468, 593, 643, 773, 783], "expand": [54, 55, 61, 77, 78, 325, 352, 358, 506, 590, 595, 656, 767], "discret": [54, 77, 325, 352, 355, 376, 377, 382, 383, 386, 387, 388, 398, 594, 651, 731], "digamma": [54, 77, 352], "7549271": [54, 326, 352], "92278427": [54, 77, 326, 352], "9988394": [54, 326, 352], "toward": [54, 61, 77, 84, 246, 293, 327, 339, 352, 358, 367, 452, 483, 588, 595, 661, 749, 755, 757, 760, 787, 798, 802], "float_pow": [54, 77, 352], "fmax": [54, 77, 352], "fmod": [54, 77, 588], "divis": [54, 55, 56, 77, 78, 79, 233, 239, 246, 248, 281, 283, 293, 358, 432, 540, 548, 562, 571, 572, 577, 588, 590, 591, 592, 605, 612, 613, 735, 776, 784], "frexp": [54, 77, 352], "edge_ord": [54, 77, 331, 352], "estim": [54, 77, 331, 352, 367, 480], "boundari": [54, 63, 77, 86, 331, 352, 355, 390, 599, 695, 802], "partial": [54, 71, 77, 165, 166, 198, 199, 331, 352, 356, 358, 367, 415, 447, 448, 449, 450, 487, 507, 508, 576, 586, 587, 590, 591, 593, 630, 732, 733, 761, 766, 785], "diment": [54, 331, 352], "33333333": [54, 77, 280, 331, 352, 588], "hypot": [54, 77, 352], "hypotenus": [54, 332, 352], "4031": [54, 332, 352], "8102": [54, 332, 352], "isclos": [54, 77, 352, 763], "ldexp": [54, 77, 352], "lerp": [54, 77, 352], "lgamma": [54, 352], "45373654": [54, 336, 352], "6477685": [54, 336, 352], "modf": [54, 77, 352], "fraction": [54, 77, 337, 352, 367, 489, 592, 615], "nansum": [54, 77, 352], "accumul": [54, 77, 338, 352], "nextaft": [54, 77, 352], "0e": [54, 56, 77, 79, 339, 352, 577, 591], "4013e": [54, 77, 339, 352], "4028e": [54, 77, 339, 352], "signbit": [54, 77, 352], "637": [54, 77, 341, 352], "0909": [54, 77, 341, 352], "sparsify_tensor": [54, 77, 352], "sparsifi": [54, 77, 342, 352], "arang": [54, 59, 67, 77, 82, 137, 342, 352, 355, 356, 373, 374, 375, 382, 387, 391, 392, 393, 394, 396, 400, 413, 438, 529, 570, 585, 590, 593, 596, 603, 632, 648, 671, 713, 749, 769, 779, 809], "xlogi": [54, 77, 352], "0986": [54, 77, 343, 352], "3863": [54, 77, 343, 352], "0000": [54, 77, 305, 306, 309, 343, 349, 352, 356, 358, 411, 440], "zeta": [54, 77, 352], "0369": [54, 77, 344, 352], "_arraywithgeneralexperiment": [54, 96], "init_valu": [54, 77, 81, 345, 353, 355, 397], "reduct": [54, 55, 60, 68, 71, 77, 78, 81, 83, 91, 345, 353, 355, 357, 397, 419, 420, 421, 422, 423, 503, 533, 534, 590, 594, 604, 650, 651, 652, 721, 722, 732, 769, 776, 779, 782, 789], "_arraywithgradientsexperiment": [54, 96], "_arraywithimageexperiment": [54, 96], "_arraywithlayersexperiment": [54, 96], "adaptive_avg_pool1d": [54, 77, 355], "1d": [54, 77, 94, 355, 356, 358, 367, 369, 376, 378, 380, 386, 412, 426, 430, 451, 454, 480, 731], "adapt": [54, 77, 79, 355, 369, 370, 371, 578, 591, 731, 735, 752], "pool": [54, 77, 81, 355, 369, 370, 371, 373, 374, 375, 391, 392, 393, 394, 397, 731, 760], "plane": [54, 77, 239, 242, 244, 272, 284, 285, 286, 289, 355, 358, 369, 370, 371, 452, 588], "l_in": [54, 77, 355, 369], "spatial": [54, 58, 77, 81, 355, 361, 369, 370, 371, 390, 397, 460, 461, 462, 592, 605, 606, 607, 608, 610, 612, 614, 734, 794], "Will": [54, 77, 355, 369, 370, 371, 729, 740, 795], "l_out": [54, 77, 355, 369], "h_in": [54, 77, 355, 370, 371], "w_in": [54, 77, 355, 370, 371], "s_0": [54, 77, 355, 370, 371], "s_1": [54, 77, 355, 370, 371], "adaptive_max_pool2d": [54, 77, 355], "avg_pool1d": [54, 77, 355], "kernel": [54, 58, 77, 81, 355, 373, 374, 375, 391, 392, 393, 394, 592, 617, 787, 795, 802, 805, 806], "stride": [54, 58, 77, 78, 81, 96, 355, 358, 373, 374, 375, 391, 392, 393, 394, 396, 397, 424, 590, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 731, 779, 783, 802], "nwc": [54, 58, 77, 81, 355, 373, 378, 391, 394, 592, 605, 606, 607, 612, 613, 731], "count_include_pad": [54, 77, 355, 373, 374, 375, 731], "ceil_mod": [54, 77, 355, 373, 374, 375, 391, 392, 393, 396, 731], "d_in": [54, 58, 77, 81, 355, 373, 374, 375, 377, 382, 383, 387, 391, 392, 393, 394, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614], "algorithm": [54, 58, 70, 77, 81, 104, 355, 356, 373, 374, 375, 390, 391, 392, 393, 394, 415, 416, 418, 593, 606, 608, 609, 610, 611, 614, 639, 727, 731, 769, 780, 785, 795, 802, 804, 806], "ncw": [54, 58, 77, 81, 355, 373, 378, 379, 391, 394, 592, 605, 606, 607, 612, 613, 731], "avg_pool2d": [54, 77, 355], "nhwc": [54, 58, 77, 81, 355, 374, 379, 392, 396, 592, 605, 608, 609, 612, 613, 614, 731], "divisor_overrid": [54, 77, 355, 374, 375, 731], "avg_pool3d": [54, 77, 355], "ndhwc": [54, 58, 77, 81, 355, 375, 380, 393, 592, 605, 610, 611, 612, 613, 731], "volum": [54, 58, 77, 81, 355, 375, 377, 382, 383, 387, 393, 592, 610, 611, 755], "ncdhw": [54, 58, 77, 81, 355, 375, 380, 393, 592, 605, 610, 611, 612, 613, 731], "dct": [54, 77, 355, 731, 790], "lenght": [54, 77, 305, 308, 309, 319, 355, 376, 731], "truncat": [54, 77, 355, 356, 376, 382, 386, 387, 388, 398, 417, 536, 590, 729, 731, 773, 790], "larger": [54, 61, 67, 77, 84, 90, 164, 355, 376, 383, 386, 388, 398, 586, 595, 603, 653, 661, 718, 720, 731, 782, 785, 809], "ortho": [54, 77, 355, 376, 377, 382, 383, 386, 387, 388, 398, 731], "onesid": [54, 77, 355, 377], "fft": [54, 77, 355, 377, 383, 398, 731, 759, 802], "symmetri": [54, 355, 377], "rfft": [54, 77, 355, 377, 398], "batch_idx": [54, 355, 377], "signal_dim1": [54, 355, 377], "signal_dim2": [54, 355, 377], "signal_dimn": [54, 355, 377], "signal_dim": [54, 355, 377], "embed": [54, 77, 355, 592, 618, 731, 802], "max_norm": [54, 55, 77, 78, 355, 381, 497, 498, 590, 731], "ifft": [54, 77, 355, 382, 388], "pi": [54, 77, 285, 289, 355, 382, 387, 583, 588], "44509285e": [54, 77, 355, 382], "14423775e": [54, 77, 355, 382], "17j": [54, 77, 355, 382, 387], "11483250e": [54, 77, 355, 382], "16j": [54, 77, 355, 382, 387], "33486982e": [54, 77, 355, 382], "22464680e": [54, 77, 355, 382], "95799250e": [54, 77, 355, 382], "66951701e": [54, 77, 355, 382], "fft2": [54, 355], "vari": [54, 65, 94, 290, 383, 502, 588, 590, 601, 704, 705, 706, 767, 771, 780, 782, 789], "20477401j": [54, 355, 383], "0614962j": [54, 355, 383], "idct": [54, 77, 355], "49862671": [54, 77, 355, 376, 386], "37691498": [54, 77, 355, 376, 386], "00390816": [54, 77, 355, 376, 386], "58938599": [54, 77, 355, 376, 386], "92713165": [54, 77, 355, 376, 386], "078475": [54, 77, 355, 376, 386], "19664812": [54, 77, 355, 376, 386], "95411837": [54, 77, 355, 376, 386], "30636606e": [54, 77, 355, 387], "43029718e": [54, 77, 355, 387], "18j": [54, 77, 355, 382, 387], "53080850e": [54, 77, 355, 387], "58689626e": [54, 77, 355, 387], "24474906e": [54, 77, 355, 387], "91858728e": [54, 77, 355, 387], "01435406e": [54, 77, 355, 387], "ifftn": [54, 77, 355], "24730653": [54, 77, 355, 388], "90832391j": [54, 77, 355, 388], "49495562": [54, 77, 355, 388], "9039565j": [54, 77, 355, 388], "98193269": [54, 77, 355, 388], "49560517j": [54, 77, 355, 388], "93280757": [54, 77, 355, 388], "48075343j": [54, 77, 355, 388], "28526384": [54, 77, 355, 388], "3351205j": [54, 77, 355, 388], "2343787": [54, 77, 355, 388], "83528011j": [54, 77, 355, 388], "18791352": [54, 77, 355, 388], "30690572j": [54, 77, 355, 388], "82115787": [54, 77, 355, 388], "96195183j": [54, 77, 355, 388], "44719226": [54, 77, 355, 388], "72654048j": [54, 77, 355, 388], "51476765": [54, 355, 388], "66160417j": [54, 355, 388], "04319742": [54, 355, 388], "05411636j": [54, 355, 388], "015561": [54, 355, 388], "04216015j": [54, 355, 388], "06310689": [54, 355, 388], "05347854j": [54, 355, 388], "13392983": [54, 355, 388], "16052352j": [54, 355, 388], "08371392": [54, 355, 388], "17252843j": [54, 355, 388], "0031429": [54, 355, 388], "05421245j": [54, 355, 388], "10446617": [54, 355, 388], "17747098j": [54, 355, 388], "05344324": [54, 355, 388], "07972424j": [54, 355, 388], "8344667": [54, 77, 355, 388], "98222595j": [54, 77, 355, 388], "48472244": [54, 77, 355, 388], "30233797j": [54, 77, 355, 388], "recompute_scale_factor": [54, 77, 355, 390, 785], "antialia": [54, 77, 355, 390, 785], "height": [54, 55, 58, 77, 78, 81, 355, 390, 502, 590, 592, 608, 609, 610, 611, 614, 729, 790], "width": [54, 55, 58, 77, 78, 81, 355, 356, 358, 367, 390, 404, 446, 483, 502, 590, 592, 606, 607, 608, 609, 610, 611, 614, 618], "trilinear": [54, 77, 355, 390, 785], "nearest_exact": [54, 77, 355, 390, 785], "tf_area": [54, 77, 355, 390, 785], "mitchellcub": [54, 77, 355, 390, 785], "lanczos3": [54, 77, 355, 390, 785], "lanczos5": [54, 77, 355, 390, 785], "gaussian": [54, 77, 104, 355, 390, 582, 785], "overwrit": [54, 71, 77, 212, 355, 390, 587, 761, 779, 780, 787], "align": [54, 71, 77, 355, 356, 390, 401, 760, 768, 780, 787, 789, 797, 808], "thu": [54, 77, 233, 246, 277, 281, 289, 290, 355, 356, 390, 403, 588, 593, 625, 626, 755, 759, 768, 773, 777, 780, 783], "antialias": [54, 77, 355, 390], "downsampl": [54, 77, 355, 390], "max_pool1d": [54, 77, 355, 394], "dilaton": [54, 77, 355, 391, 392, 393], "max_pool3d": [54, 77, 355], "reduce_window": [54, 81, 355], "window_dimens": [54, 81, 355, 397], "window_strid": [54, 81, 355, 397], "base_dil": [54, 81, 355, 397], "window_dil": [54, 81, 355, 397], "rfftn": [54, 77, 355], "linear_algebra": [54, 59, 77, 82, 593, 783], "_arraywithlinearalgebraexperiment": [54, 96], "adjoint": [54, 59, 77, 82, 356, 593, 629, 640, 641], "cond": [54, 77, 118, 356, 584, 795], "933034373659268": [54, 400], "diagflat": [54, 77, 356, 408, 411], "offset": [54, 59, 62, 73, 77, 82, 85, 134, 356, 361, 401, 460, 461, 462, 585, 593, 598, 624, 645, 691], "padding_valu": [54, 77, 356, 401], "right_left": [54, 77, 356, 401], "num_row": [54, 77, 356, 401], "num_col": [54, 77, 356, 401], "dot": [54, 58, 77, 81, 94, 356, 413, 592, 593, 618, 619, 647, 749, 760, 768], "eig": [54, 59, 77, 356, 593, 626, 627], "37228132": [54, 77, 356, 403, 405, 625], "82456484": [54, 403, 625], "41597356": [54, 403, 625], "56576746": [54, 403, 625], "90937671": [54, 403, 625], "eigh_tridiagon": [54, 77, 356], "eigvals_onli": [54, 77, 356, 404], "select_rang": [54, 77, 356, 404], "tol": [54, 77, 95, 356, 404, 415, 418], "eigenvalu": [54, 59, 77, 82, 94, 356, 403, 404, 405, 593, 625, 626, 627, 634], "eigenvector": [54, 77, 356, 403, 404, 593, 625, 626], "interv": [54, 63, 68, 77, 86, 91, 121, 137, 138, 144, 356, 367, 404, 483, 585, 593, 595, 599, 604, 621, 647, 653, 656, 664, 693, 695, 721, 722], "togeth": [54, 71, 77, 320, 333, 352, 356, 404, 736, 749, 752, 764, 767, 769, 779, 780, 782, 783, 785, 791, 792, 795, 800, 802, 803, 808], "cluster": [54, 77, 356, 404, 795, 802], "converg": [54, 77, 356, 404, 753], "li": [54, 77, 356, 367, 404, 489, 751], "_2": [54, 77, 356, 404], "precis": [54, 59, 77, 82, 164, 252, 272, 279, 286, 328, 352, 356, 367, 404, 480, 542, 564, 586, 588, 590, 593, 626, 627, 632, 639, 641, 642, 648, 768, 769, 780, 784, 785, 806], "eig_val": [54, 77, 356, 404], "decreas": [54, 77, 356, 404], "eig_vector": [54, 77, 356, 404], "38196": [54, 404], "61803": [54, 404], "eigval": [54, 77, 356], "initialize_tuck": [54, 77, 356], "svd": [54, 59, 77, 82, 356, 406, 410, 415, 416, 417, 418, 593, 642], "truncated_svd": [54, 77, 356, 406, 415, 418], "non_neg": [54, 77, 314, 349, 356, 406], "mask": [54, 58, 77, 81, 94, 356, 358, 406, 407, 415, 418, 453, 512, 590, 592, 615, 618, 619, 785], "svd_mask_repeat": [54, 77, 356, 406, 415, 418], "compon": [54, 77, 142, 143, 220, 221, 222, 225, 228, 237, 239, 240, 242, 244, 272, 274, 275, 282, 285, 286, 289, 290, 313, 314, 322, 349, 352, 356, 406, 415, 585, 588, 600, 701, 749, 752, 787, 798, 803, 805], "tuckertensor": [54, 77, 95, 314, 349, 356, 406, 415, 418], "scheme": [54, 77, 356, 406, 415, 763, 791, 802], "tucker": [54, 77, 314, 349, 356, 406, 415], "decomposit": [54, 59, 77, 82, 94, 313, 314, 349, 356, 406, 415, 418, 593, 620, 626, 630, 638, 641, 759, 809], "miss": [54, 77, 356, 358, 406, 415, 418, 453, 735, 759, 760, 764, 767, 768, 771, 780, 782, 785], "everywher": [54, 77, 356, 406, 415, 418], "imput": [54, 77, 356, 406, 415, 418], "kron": [54, 77, 356, 411, 809], "make_svd_non_neg": [54, 77, 356, 417], "nntype": [54, 77, 356, 410], "nndsvd": [54, 77, 356, 410], "singular": [54, 59, 77, 82, 356, 406, 410, 416, 417, 593, 632, 634, 637, 641, 642, 769], "nndsvda": [54, 77, 356, 410], "boutsidi": [54, 77, 356, 410], "gallopoulo": [54, 77, 356, 410], "pattern": [54, 55, 77, 78, 356, 410, 502, 503, 504, 590, 753, 769, 772], "recognit": [54, 77, 356, 410], "1362": [54, 77, 356, 410], "2008": [54, 77, 356, 410, 802], "matrix_exp": [54, 77, 356], "7183": [54, 77, 356, 411], "3891": [54, 77, 356, 411], "mode_dot": [54, 77, 93, 94, 95, 356], "matrix_or_vector": [54, 77, 94, 95, 356, 412], "i_1": [54, 77, 94, 356, 412], "i_k": [54, 77, 94, 356, 412], "i_n": [54, 77, 94, 356, 412], "i_": [54, 77, 94, 356, 367, 412, 483], "multi_dot": [54, 77, 356], "148": [54, 76, 77, 242, 356, 413], "multi_mode_dot": [54, 77, 356], "mat_or_vec_list": [54, 77, 356, 414], "times_0": [54, 356, 414], "vec": [54, 356, 414], "times_1": [54, 356, 414], "cdot": [54, 272, 356, 414, 588], "times_n": [54, 356, 414], "noqa": [54, 94, 219, 286, 355, 356, 391, 414, 588, 594, 650, 731, 740, 781], "partial_tuck": [54, 77, 356], "n_iter_max": [54, 77, 356, 415, 418], "verbos": [54, 77, 356, 415, 418, 782, 787], "return_error": [54, 77, 356, 415, 418], "variat": [54, 77, 356, 415, 418, 771, 780, 782], "reconstruct": [54, 59, 65, 77, 88, 356, 358, 415, 418, 457, 593, 601, 641, 703, 705, 781], "return_erro": [54, 356, 415, 418], "svd_flip": [54, 77, 356], "u_based_decis": [54, 77, 356, 416], "basi": [54, 77, 356, 416, 761, 763, 790], "flip": [54, 61, 77, 84, 94, 230, 356, 358, 416, 437, 438, 588, 595, 779, 789, 790, 792], "decis": [54, 77, 356, 416, 763, 769, 785, 787, 789, 802], "u_adjust": [54, 77, 356, 416], "v_adjust": [54, 77, 356, 416], "compute_uv": [54, 59, 77, 82, 356, 417, 593, 641], "n_eigenvec": [54, 77, 356, 417], "returnedv": [54, 417], "vh": [54, 59, 77, 82, 356, 417, 593, 641], "eigen": [54, 77, 356, 417], "namedtupl": [54, 59, 65, 77, 82, 88, 356, 358, 403, 417, 457, 593, 601, 625, 626, 638, 639, 641, 703, 704, 705], "fixed_factor": [54, 77, 356, 418], "tl": [54, 77, 356, 418], "kolda": [54, 77, 356, 418], "bader": [54, 77, 356, 418], "siam": [54, 77, 356, 418], "review": [54, 77, 356, 418, 759, 761, 768, 771, 780, 783], "vol": [54, 77, 356, 418], "pp": [54, 77, 356, 418], "455": [54, 77, 356, 418], "500": [54, 77, 78, 81, 355, 356, 378, 379, 418, 510, 590], "2009": [54, 77, 356, 418], "_arraywithlossesexperiment": [54, 96], "huber_loss": [54, 77, 357], "delta": [54, 56, 77, 79, 357, 419, 571, 591], "truth": [54, 240, 250, 251, 258, 259, 275, 357, 419, 588, 757, 780, 782], "transit": [54, 77, 357, 419, 802], "huber": [54, 77, 357, 419], "l1_loss": [54, 77, 357], "l1": [54, 59, 77, 82, 357, 361, 419, 420, 422, 463, 593, 648, 767, 790], "targetict": [54, 77, 357, 420, 422, 423], "20000000000000004": [54, 420], "smooth_l1_loss": [54, 77, 357], "smooth": [54, 60, 77, 83, 357, 419, 422, 594, 650, 651, 652, 778], "8125": [54, 422], "soft_margin_loss": [54, 77, 357], "soft": [54, 77, 357, 358, 423, 453, 770], "margin": [54, 77, 357, 423, 780], "35667497": [54, 423, 594, 651], "22314353": [54, 423], "60943791": [54, 423], "manipul": [54, 77, 751, 779, 780, 783, 785, 787, 792, 794, 802], "_arraywithmanipulationexperiment": [54, 96], "as_strid": [54, 77, 358], "nativeshap": [54, 58, 61, 63, 77, 84, 86, 122, 123, 130, 135, 142, 147, 358, 362, 424, 434, 439, 447, 450, 466, 467, 468, 469, 470, 534, 547, 552, 554, 585, 590, 592, 595, 599, 605, 607, 609, 611, 613, 660, 693, 694, 695, 775, 777], "byte": [54, 55, 73, 77, 78, 96, 134, 358, 424, 528, 585, 590, 807, 808], "associative_scan": [54, 77, 358], "revers": [54, 55, 59, 67, 77, 82, 90, 96, 97, 356, 358, 367, 409, 425, 437, 438, 481, 482, 501, 590, 593, 595, 603, 646, 657, 711, 712, 759, 767, 768, 769, 771, 772, 779, 780, 785, 792, 795], "scan": [54, 77, 358, 425, 795], "atleast_1d": [54, 77, 358], "ari": [54, 77, 358, 426, 427, 428, 432, 441, 458], "a1": [54, 78, 426, 427, 428, 494], "a2": [54, 426, 427, 428], "atleast_2d": [54, 77, 358], "atleast_3d": [54, 77, 358], "concat_from_sequ": [54, 77, 358], "input_sequ": [54, 77, 358, 431], "new_axi": [54, 77, 358, 431, 792], "dsplit": [54, 77, 358], "indices_or_sect": [54, 77, 358, 432, 441, 458], "3rd": [54, 77, 358, 432], "dstack": [54, 77, 358], "fill_diagon": [54, 77, 358], "fill_diag": [54, 435], "fortran": [54, 61, 77, 84, 358, 436, 595, 660, 802, 806], "layout": [54, 61, 77, 84, 358, 436, 595, 660, 765, 779, 780, 785], "fliplr": [54, 77, 358, 779], "diag": [54, 59, 77, 82, 358, 437, 438, 593, 626, 787], "flipud": [54, 77, 358, 779], "fold": [54, 77, 358, 447, 448, 768], "unfold": [54, 77, 94, 356, 358, 406, 439, 447, 449], "folded_tensor": [54, 358, 439], "heavisid": [54, 77, 358], "5000": [54, 358, 440, 593, 629], "hsplit": [54, 77, 358], "horizont": [54, 77, 358, 441, 502, 590], "hstack": [54, 77, 358], "vstack": [54, 77, 358, 442], "i0": [54, 77, 358, 367, 483], "bessel": [54, 67, 77, 90, 308, 349, 358, 443, 603, 718, 720], "kind": [54, 67, 77, 164, 167, 168, 277, 367, 443, 481, 482, 487, 586, 588, 603, 711, 712, 717, 719, 758, 780, 782, 785, 787, 795], "26606588": [54, 77, 358, 443], "2795853": [54, 77, 358, 443], "88079259": [54, 77, 358, 443], "row_mod": [54, 77, 358, 444], "column_mod": [54, 77, 358, 444], "ascend": [54, 66, 77, 89, 358, 365, 444, 473, 602, 707, 709], "prod": [54, 55, 67, 78, 90, 356, 358, 407, 409, 444, 488, 503, 590, 603, 769, 771, 787], "moveaxi": [54, 77, 358], "destin": [54, 77, 358, 445], "unstack": [54, 61, 71, 84, 445, 595, 767, 787, 790, 809], "reorder": [54, 61, 77, 84, 358, 445, 502, 590, 595, 657], "stat_length": [54, 77, 358, 446], "constant_valu": [54, 77, 358, 446], "end_valu": [54, 77, 358, 446], "reflect_typ": [54, 77, 358, 446], "partial_fold": [54, 77, 358], "skip_begin": [54, 77, 358, 447, 448, 449, 450], "untouch": [54, 77, 358, 447, 448, 449, 450], "partial_tensor_to_vec": [54, 77, 358], "skip_end": [54, 77, 358, 448, 449], "vectoris": [54, 77, 94, 358, 448, 450], "partial_unfold": [54, 77, 358], "ravel_tensor": [54, 77, 358, 449], "n_1": [54, 77, 358, 449], "n_2": [54, 77, 358, 449], "n_i": [54, 77, 356, 358, 407, 449], "partial_vec_to_tensor": [54, 77, 358], "rot90": [54, 77, 358, 779], "rotat": [54, 77, 358, 452, 794], "soft_threshold": [54, 77, 358], "take_along_axi": [54, 77, 358], "arr": [54, 55, 74, 77, 172, 358, 430, 451, 454, 534, 586, 765, 769, 770], "top_k": [54, 77, 358], "largest": [54, 71, 77, 164, 167, 356, 358, 416, 455, 586, 593, 632, 641, 794], "sort": [54, 65, 71, 77, 88, 97, 291, 356, 358, 367, 403, 455, 473, 487, 588, 593, 601, 625, 626, 641, 642, 703, 707, 708, 709, 749, 758, 768, 783], "retun": [54, 77, 358, 455], "smallest": [54, 71, 77, 164, 167, 235, 358, 455, 586, 588, 593, 632], "unfolded_tensor": [54, 358, 456], "unique_consecut": [54, 77, 358], "vsplit": [54, 77, 358], "vertic": [54, 77, 358, 458, 459, 502, 590, 761], "_arraywithnormsexperiment": [54, 96], "varianc": [54, 67, 77, 90, 361, 460, 462, 603, 720, 730, 734], "nsc": [54, 77, 361, 460, 461, 462, 734], "braodcast": [54, 77, 361, 460], "running_mean": [54, 77, 361, 460, 462, 734], "running_var": [54, 77, 361, 460, 462, 734], "nc": [54, 77, 361, 460, 461, 462, 734], "group_norm": [54, 77, 361], "num_group": [54, 77, 361, 461], "group": [54, 77, 358, 361, 457, 461, 592, 597, 605, 612, 613, 674, 763, 767, 769, 776, 780, 781, 798, 801, 807], "instance_norm": [54, 77, 361], "l1_normal": [54, 77, 361], "33333334": [54, 361, 463, 465, 573, 591, 592, 593, 614, 648], "33333337": [54, 137, 361, 463, 573, 585, 591], "28571439": [54, 361, 463], "l2_normal": [54, 77, 361, 465], "l2": [54, 59, 82, 93, 94, 361, 464, 465, 593, 648, 731, 767], "44721359": [54, 77, 361, 464, 465], "89442718": [54, 77, 361, 464, 465], "60000002": [54, 90, 97, 361, 464, 465, 715], "80000001": [54, 361, 464, 465], "lp_normal": [54, 77, 361], "lp": [54, 361, 465], "_arraywithrandomexperiment": [54, 96], "bernoulli": [54, 77, 355, 362, 378, 379, 380], "event": [54, 77, 362, 466, 782], "entri": [54, 61, 71, 77, 84, 88, 137, 358, 362, 437, 438, 466, 585, 595, 597, 662, 685, 703, 760, 768, 782, 802], "parameter": [54, 63, 77, 86, 362, 466, 467, 469, 470, 599, 692, 694, 695], "odd": [54, 77, 277, 358, 362, 446, 466, 588, 758, 763], "drawn": [54, 63, 77, 86, 362, 466, 467, 468, 469, 470, 599, 692, 693, 694, 695, 730, 782], "dirichlet": [54, 77, 362], "10598304": [54, 362, 468], "21537054": [54, 362, 468], "67864642": [54, 362, 468], "48006698": [54, 362, 468], "07472073": [54, 362, 468], "44521229": [54, 362, 468], "55479872": [54, 362, 468], "05426367": [54, 362, 468], "39093761": [54, 362, 468], "19531053": [54, 362, 468], "51675832": [54, 362, 468], "28793114": [54, 362, 468], "12315625": [54, 362, 468], "29823365": [54, 362, 468], "5786101": [54, 362, 468], "15564976": [54, 362, 468], "50542368": [54, 362, 468], "33892656": [54, 362, 468], "1325352": [54, 362, 468], "44439589": [54, 362, 468], "42306891": [54, 362, 468], "gamma": [54, 62, 77, 85, 326, 336, 352, 362, 367, 484, 598, 691], "poisson": [54, 77, 357, 362, 421], "rate": [54, 56, 77, 79, 355, 362, 396, 470, 572, 575, 577, 578, 579, 591, 596, 669, 670, 671, 735, 768], "paramt": [54, 470, 597, 679, 689], "lam": [54, 77, 362, 470], "_arraywithsearchingexperiment": [54, 96], "unravel_index": [54, 77, 363], "unravel": [54, 77, 363, 471], "_arraywithsetexperiment": [54, 96], "_arraywithsortingexperiment": [54, 96], "lexsort": [54, 77, 365], "indirectli": [54, 77, 365, 473], "statist": [54, 77, 92, 358, 446, 734, 747, 759, 769, 782, 783, 802], "_arraywithstatisticalexperiment": [54, 96], "bincount": [54, 77, 367], "minlength": [54, 77, 367, 478], "corrcoef": [54, 77, 367], "rowvar": [54, 77, 367, 479, 480], "relationship": [54, 77, 479, 730], "cov": [54, 77, 367], "bia": [54, 58, 77, 81, 85, 367, 480, 529, 590, 592, 598, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 691, 731, 776, 782, 787, 791], "ddof": [54, 77, 367, 480], "fweight": [54, 77, 367, 480], "aweight": [54, 77, 367, 480], "overridden": [54, 77, 367, 480, 735, 764], "unbias": [54, 67, 77, 90, 367, 480, 603, 720], "typic": [54, 77, 320, 333, 352, 367, 480, 602, 709, 731, 763, 776, 801, 809], "assign": [54, 77, 94, 367, 480, 759, 761, 765, 769, 779, 789], "covari": [54, 77, 367, 480], "cummax": [54, 77, 367], "exclus": [54, 55, 67, 71, 77, 78, 90, 121, 356, 367, 415, 481, 482, 521, 522, 525, 585, 590, 599, 603, 693, 711, 712, 767, 769, 776, 792, 806, 808], "cumul": [54, 67, 77, 90, 367, 481, 482, 603, 711, 712, 794], "uint64": [54, 67, 161, 166, 168, 169, 179, 181, 184, 300, 347, 367, 481, 482, 586, 603, 711, 712, 717, 719, 769, 782, 787], "uint16": [54, 67, 156, 161, 166, 167, 176, 300, 347, 367, 481, 482, 586, 603, 711, 712, 717, 719, 769, 780, 782, 787], "bit": [54, 67, 163, 164, 167, 230, 231, 233, 367, 481, 482, 586, 588, 603, 711, 712, 717, 719, 758, 759, 760, 767, 768, 769, 771, 776, 787, 789, 808], "uint32": [54, 67, 161, 166, 167, 168, 190, 300, 347, 367, 481, 482, 586, 603, 711, 712, 717, 719, 769, 782, 787], "cummin": [54, 77, 367], "histogram": [54, 77, 367], "extend_lower_interv": [54, 77, 367, 483], "extend_upper_interv": [54, 77, 367, 483], "densiti": [54, 77, 367, 483], "monoton": [54, 77, 367, 483], "rightmost": [54, 77, 367, 483], "c1": [54, 77, 367, 483, 767], "ff": [54, 77, 367, 483], "c_": [54, 77, 367, 483], "igamma": [54, 77, 367], "incomplet": [54, 77, 367, 484, 761], "3614": [54, 77, 367, 484], "2085": [54, 77, 367, 484], "median": [54, 77, 358, 367, 446, 487], "nanmean": [54, 77, 367], "6666666666666665": [54, 77, 367, 486], "nanmedian": [54, 77, 367], "overwrite_input": [54, 77, 367, 487], "treat": [54, 71, 77, 97, 277, 338, 352, 358, 367, 454, 487, 488, 588, 778, 782, 788, 792], "undefin": [54, 77, 358, 367, 368, 446, 487, 490, 773, 778], "nanprod": [54, 77, 367], "Not": [54, 77, 338, 352, 356, 367, 405, 488, 583, 765, 773, 781, 790, 791, 795], "quantil": [54, 77, 367], "inclus": [54, 77, 121, 367, 489, 585, 599, 693, 754, 765, 779, 785], "higher": [54, 77, 356, 358, 367, 415, 418, 426, 427, 428, 489, 730, 769, 779, 786, 787, 792, 795, 799, 802, 803, 806, 808, 809], "midpoint": [54, 77, 367, 489], "surround": [54, 77, 367, 489, 785], "whichev": [54, 77, 367, 489], "_arraywithutilityexperiment": [54, 96], "optional_get_el": [54, 77, 368], "empti": [54, 55, 71, 78, 121, 300, 347, 358, 368, 446, 490, 497, 534, 585, 590, 593, 597, 603, 604, 645, 648, 686, 717, 719, 721, 722, 759, 760, 764, 766, 769, 770, 779], "_arraywithgener": [55, 96], "all_equ": [55, 78, 590], "equality_matrix": [55, 78, 491, 590], "array_equ": [55, 78, 590], "assert_supports_inplac": [55, 78, 590], "ivybackendexcept": [55, 78, 495, 519, 590, 744, 764, 770, 773], "clip_matrix_norm": [55, 78, 590], "894": [55, 78, 497, 498, 590, 598, 691], "clip_vector_norm": [55, 78, 590], "default_v": [55, 501, 590], "catch_except": [55, 501, 590], "rev": [55, 501, 590], "with_cal": [55, 501, 590], "catch": [55, 501, 590, 777, 782], "einops_rearrang": [55, 78, 590], "axes_length": [55, 78, 502, 503, 504, 590], "arrang": [55, 502, 590], "rearrang": [55, 78, 502, 504, 590], "einops_reduc": [55, 78, 590], "einops_repeat": [55, 78, 590], "fourier_encod": [55, 78, 590], "max_freq": [55, 78, 506, 590], "oppos": [55, 78, 506, 590, 769], "geometr": [55, 78, 506, 590, 593, 646], "seper": [55, 506, 590, 771, 781], "0000000e": [55, 78, 506, 590], "2246468e": [55, 78, 506, 590], "4492936e": [55, 506, 590], "6739404e": [55, 78, 506, 590], "batch_dim": [55, 78, 509, 510, 590, 737], "gather_nd": [55, 78, 590], "get_num_dim": [55, 78, 590], "as_arrai": [55, 78, 513, 547, 590, 737], "has_nan": [55, 78, 590], "include_inf": [55, 78, 515, 569, 590], "inplace_decr": [55, 78, 590], "val": [55, 71, 76, 78, 252, 517, 518, 519, 538, 539, 540, 588, 590, 769, 779, 789], "decrement": [55, 78, 517, 590], "inplace_incr": [55, 78, 590], "increment": [55, 78, 518, 590, 761, 802], "inplace_upd": [55, 78, 537, 590, 728, 779], "ensure_in_backend": [55, 78, 519, 590, 779], "keep_input_dtyp": [55, 78, 519, 590, 779], "is_arrai": [55, 78, 590, 779, 780], "is_ivy_arrai": [55, 78, 590, 779, 789], "is_ivy_contain": [55, 590], "is_native_arrai": [55, 78, 175, 522, 586, 590, 789], "isin": [55, 78, 590], "test_el": [55, 78, 526, 590], "assume_uniqu": [55, 78, 526, 590], "invert": [55, 78, 230, 526, 588, 590, 593, 633], "scatter_flat": [55, 78, 590], "occupi": [55, 164, 167, 533, 534, 586, 590], "scatter_nd": [55, 78, 590, 785, 789], "stable_divid": [55, 78, 590, 776], "denomin": [55, 62, 78, 85, 540, 548, 562, 590, 598, 691, 734, 776, 784, 795, 799], "min_denomin": [55, 78, 540, 548, 562, 590, 784], "_min_denomin": [55, 548, 590], "stable_pow": [55, 78, 590], "min_bas": [55, 78, 539, 549, 561, 590, 734, 784], "stabl": [55, 66, 78, 89, 146, 315, 349, 365, 473, 539, 540, 548, 549, 561, 562, 585, 590, 602, 707, 710, 760, 765, 769, 780, 784, 787, 795], "00004": [55, 78, 549, 590], "00008": [55, 78, 549, 590], "00004000e": [55, 549], "56002560e": [55, 549], "60001200e": [55, 549], "09602048e": [55, 549], "supports_inplace_upd": [55, 78, 590], "to_fil": 55, "fid": 55, "sep": 55, "format_": 55, "binari": [55, 58, 60, 81, 83, 229, 232, 234, 269, 289, 357, 421, 423, 588, 592, 594, 615, 650], "recov": [55, 773, 780], "to_scalar": [55, 78, 590], "value_is_nan": [55, 78, 590], "_arraywithgradi": [56, 96], "adam_step": [56, 79, 591], "mw": [56, 79, 571, 572, 591, 791], "vw": [56, 79, 571, 572, 591, 791], "beta1": [56, 79, 493, 571, 572, 577, 590, 591, 735, 791], "beta2": [56, 79, 493, 571, 572, 577, 590, 591, 735, 791], "epsilon": [56, 59, 60, 79, 82, 83, 493, 571, 572, 577, 590, 591, 593, 594, 634, 637, 650, 651, 652, 732, 734, 735, 767, 776, 779, 791], "dc": [56, 79, 571, 572, 575, 577, 578, 579, 591], "dw": [56, 79, 571, 572, 575, 577, 578, 579, 591], "forget": [56, 79, 571, 572, 577, 591, 735, 749, 769], "prevent": [56, 79, 571, 572, 577, 591, 592, 603, 615, 719, 730, 735, 759, 761, 768, 769, 773, 779, 780, 783], "dcdw": [56, 79, 571, 572, 575, 577, 578, 591], "adam_step_delta": [56, 79, 571, 591], "2020105": [56, 571, 591], "22187898": [56, 571, 591], "24144873": [56, 571, 591], "10000002": [56, 90, 294, 347, 571, 715], "20000005": [56, 294, 347, 571], "00300002": [56, 571], "00800002": [56, 571], "adam_upd": [56, 79, 591, 791], "mw_tm1": [56, 79, 572, 577, 591], "vw_tm1": [56, 79, 572, 577, 591], "stop_gradi": [56, 79, 212, 493, 572, 575, 577, 578, 579, 587, 590, 591, 596, 669, 670, 671, 735, 791], "ws_new": [56, 79, 572, 577, 578, 579, 591], "updated_weight": [56, 79, 572, 591], "92558753": [56, 572], "92558873": [56, 572, 591], "92558718": [56, 572, 591], "00000063e": [56, 79, 572, 591], "00000016e": [56, 79, 572, 591], "00000086e": [56, 79, 572, 591], "gradient_descent_upd": [56, 79, 591, 596, 669, 670, 671], "descent": [56, 79, 575, 591, 735, 791, 802], "new_weight": [56, 79, 575, 577, 591, 790], "lamb_upd": [56, 79, 591], "max_trust_ratio": [56, 79, 577, 591, 735], "decay_lambda": [56, 79, 577, 578, 591, 735], "trust": [56, 79, 577, 591, 735], "ratio": [56, 79, 577, 591, 735], "decai": [56, 79, 577, 578, 591, 735], "lamb": [56, 79, 577, 591, 735, 791], "784": [56, 577, 591], "lars_upd": [56, 79, 591], "lar": [56, 79, 578, 591, 735, 791], "optimizer_upd": [56, 79, 591], "effective_grad": [56, 79, 579, 591], "3e": [56, 79, 579, 591], "preserve_typ": [56, 79, 580, 591], "_arraywithimag": [57, 96], "_arraywithlay": [58, 96], "conv1d": [58, 81, 592, 731], "filter_format": [58, 81, 592, 605, 606, 608, 609, 610, 612], "channel_last": [58, 81, 592, 605, 606, 608, 609, 610, 612, 613], "x_dilat": [58, 81, 592, 605, 606, 608, 609, 610, 612], "fw": [58, 81, 367, 480, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 760, 782], "d_out": [58, 81, 592, 605, 606, 607, 608, 609, 610, 611, 612, 613], "channel_first": [58, 81, 592, 605, 606, 608, 609, 610, 612, 613], "wio": [58, 592, 605, 606, 607, 612], "conv1d_transpos": [58, 81, 592], "output_shap": [58, 81, 592, 605, 607, 609, 611, 613, 731], "fh": [58, 81, 592, 597, 605, 608, 609, 610, 611, 612, 613, 614, 684], "hwio": [58, 592, 605, 606, 608, 612], "conv2d_transpos": [58, 81, 592], "conv3d": [58, 81, 592, 611, 731], "fd": [58, 81, 592, 605, 610, 611, 612, 613], "conv3d_transpos": [58, 81, 592], "depthwise_conv2d": [58, 81, 592], "noise_shap": [58, 81, 592, 615], "droput": [58, 615], "42857146": [58, 592, 615], "85714293": [58, 592, 615], "28571415": [58, 81, 592, 615], "71428585": [58, 81, 592, 615], "14285755": [58, 81, 592, 615], "5714283": [58, 592, 615], "4285717": [58, 81, 592, 615], "8571434": [58, 81, 592, 615], "2857151": [58, 592, 615], "dropout1d": [58, 81, 355], "droput1d": [58, 378, 379], "dropout2d": [58, 81, 355], "dropout3d": [58, 81, 355], "droput3d": [58, 380], "outer_batch_shap": [58, 81, 592, 616], "inner_batch_shap": [58, 81, 592, 616], "in_featur": [58, 81, 592, 616, 782], "out_featur": [58, 81, 592, 616, 782], "134": [58, 593, 616, 633], "lstm_updat": [58, 81, 592, 787], "init_h": [58, 81, 592, 617, 787], "init_c": [58, 81, 592, 617, 787], "recurrent_kernel": [58, 81, 592, 617, 787], "recurrent_bia": [58, 81, 592, 617, 787], "hidden": [58, 81, 592, 617, 731, 766, 773, 787, 791], "recurr": [58, 81, 592, 617, 787, 802, 806], "timestep": [58, 81, 592, 617, 618, 731, 787], "h_i": [58, 81, 617], "c_i": [58, 81, 617], "rc": [58, 81, 617], "multi_head_attent": [58, 81, 592, 779], "num_head": [58, 81, 592, 618, 731], "in_proj_weight": [58, 81, 592, 618], "q_proj_weight": [58, 81, 592, 618], "k_proj_weight": [58, 81, 592, 618], "v_proj_weight": [58, 81, 592, 618], "out_proj_weight": [58, 81, 592, 618], "in_proj_bia": [58, 81, 592, 618], "out_proj_bia": [58, 81, 592, 618], "is_caus": [58, 81, 592, 618, 619], "return_attention_weight": [58, 81, 592, 618], "average_attention_weight": [58, 81, 592, 618], "scaled_dot_product_attent": [58, 81, 592], "dropout_p": [58, 81, 592, 619], "num_queri": [58, 81, 592, 618, 619], "feat_dim": [58, 81, 592, 619], "num_kei": [58, 81, 592, 618, 619], "causal": [58, 81, 592, 618, 619], "attent": [58, 81, 592, 618, 619, 731, 752, 761, 764], "score": [58, 81, 357, 423, 592, 619, 749], "40000001": [58, 70, 96, 97, 106, 109, 294, 347, 582, 592, 601, 619, 704], "29999995": [58, 294, 347, 592, 601, 619, 704], "19994521": [58, 592, 619], "09994531": [58, 592, 619], "30000019": [58, 592, 619], "_arraywithlinearalgebra": [59, 96], "choleski": [59, 82, 593, 779], "625": [59, 77, 330, 593, 620], "vif": [59, 82, 621], "det": [59, 82, 593, 639, 768], "axis1": [59, 61, 82, 84, 593, 595, 624, 645, 665], "axis2": [59, 82, 593, 624, 645], "eigh": [59, 82, 356, 403, 593, 625], "uplo": [59, 82, 593, 626, 627], "eigvalsh": [59, 82, 593], "inner": [59, 73, 82, 100, 141, 356, 403, 585, 593, 596, 625, 626, 631, 669, 670, 671, 759, 779], "array_lik": [59, 82, 355, 357, 358, 398, 419, 422, 423, 451, 593, 628, 636], "3d": [59, 77, 355, 378, 379, 428, 593, 628, 731, 785, 794], "105": [59, 81, 592, 593, 594, 615, 616, 628, 636, 650], "149": [59, 593, 628], "171": [59, 593, 628], "143": [59, 76, 97, 289, 588, 593, 628, 771], "203": [59, 76, 228, 593, 598, 628, 691], "233": [59, 593, 628], "inv": [59, 82, 593], "transpose_a": [59, 82, 593, 631], "transpose_b": [59, 82, 593, 631], "adjoint_a": [59, 82, 593, 631], "adjoint_b": [59, 82, 593, 631], "matrix_norm": [59, 82, 593], "ord": [59, 82, 593, 632, 648], "fro": [59, 82, 357, 419, 593, 632], "nuc": [59, 82, 593, 632], "matrix_pow": [59, 82, 593], "matrix_rank": [59, 82, 593], "hermitian": [59, 82, 356, 403, 404, 593, 625, 626, 627, 634, 641], "largest_singular_valu": [59, 82, 593, 634, 637], "defici": [59, 593, 634], "matrix_transpos": [59, 82, 593, 789], "outer": [59, 82, 94, 593, 596, 669, 670, 671, 759], "pinv": [59, 82, 593], "pseudo": [59, 82, 593, 637, 778], "99999988": [59, 82, 593, 637], "qr": [59, 82, 593, 781], "orthonorm": [59, 82, 593, 638, 641], "complet": [59, 71, 82, 593, 638, 752, 759, 760, 761, 763, 764, 767, 768, 771, 773, 776, 780, 781, 782, 785, 789, 790, 800], "slogdet": [59, 82, 593], "logabsdet": [59, 82, 593, 639], "natur": [59, 82, 242, 260, 261, 262, 263, 282, 336, 352, 588, 593, 639, 752, 764, 771, 773, 781, 794], "098611": [59, 593, 639], "solv": [59, 82, 356, 410, 593, 749, 760, 763, 780, 788, 794, 804], "full_matric": [59, 82, 593, 641], "svf": [59, 641], "reconstructed_x": [59, 593, 641], "svdval": [59, 82, 593], "tensorsolv": [59, 82, 593], "vander": [59, 82, 593], "vandermond": [59, 82, 593, 646], "vecdot": [59, 82, 593], "vector_norm": [59, 82, 593], "singleton": [59, 64, 67, 68, 82, 87, 90, 91, 593, 595, 600, 603, 604, 648, 656, 663, 699, 714, 715, 716, 717, 718, 719, 720, 721, 722, 787], "mathemat": [59, 82, 222, 227, 239, 244, 246, 262, 272, 583, 588, 593, 632, 648, 769, 780, 785, 802, 808], "manhattan": [59, 82, 593, 648], "euclidean": [59, 82, 94, 593, 648], "7416575": [59, 82, 593, 648], "vector_to_skew_symmetric_matrix": [59, 82, 593], "_arraywithloss": [60, 96], "binary_cross_entropi": [60, 83, 594, 768], "from_logit": [60, 83, 594, 650, 732], "pos_weight": [60, 83, 594, 650], "amount": [60, 83, 214, 587, 594, 650, 651, 652, 760, 768, 770, 781], "crossentropi": [60, 83, 594, 650], "357": [60, 83, 594, 650, 652], "223": [60, 83, 594, 650, 652], "3862944": [60, 594, 651], "sparse_cross_entropi": [60, 83, 594], "_arraywithmanipul": [61, 96], "x_min": [61, 84, 595, 653, 792], "x_max": [61, 84, 595, 653, 792], "before_1": [61, 84, 358, 446, 595, 655, 668], "after_1": [61, 84, 358, 446, 595, 655, 668], "before_n": [61, 84, 358, 446, 595, 655, 668], "after_n": [61, 84, 358, 446, 595, 655, 668], "repetit": [61, 84, 595, 659, 666, 785], "fit": [61, 84, 595, 659, 759, 780, 787, 798, 799, 802], "flat": [61, 71, 84, 363, 471, 533, 590, 595, 659, 729], "allowzero": [61, 84, 595, 660], "remain": [61, 64, 77, 84, 87, 222, 239, 240, 246, 254, 255, 272, 275, 281, 283, 355, 378, 379, 380, 398, 588, 595, 597, 600, 660, 678, 701, 760, 761, 768, 771, 773, 776, 783, 785, 795], "roll": [61, 84, 595, 775], "shift": [61, 73, 84, 97, 136, 146, 231, 233, 315, 349, 585, 588, 595, 661, 760, 761, 770, 771, 775], "restor": [61, 84, 595, 661, 774], "num_or_size_split": [61, 71, 84, 595, 662, 787], "with_remaind": [61, 71, 84, 595, 662], "squeezabl": [61, 595, 663], "swapax": [61, 84, 595], "axis0": [61, 84, 595, 665], "swap_ax": [61, 665], "tile": [61, 78, 84, 504, 595], "unpack": [61, 84, 595, 667, 781, 782], "zero_pad": [61, 84, 595], "_arraywithnorm": [62, 96], "layer_norm": [62, 85, 598], "normalized_idx": [62, 85, 598, 691], "new_std": [62, 85, 598, 691, 734], "learnabl": [62, 85, 596, 598, 671, 691, 731, 734, 792], "deviat": [62, 63, 67, 85, 86, 90, 598, 599, 603, 691, 694, 718, 730, 734, 753, 763], "0976": [62, 598, 691], "3452": [62, 598, 691], "2740": [62, 598, 691], "1047": [62, 598, 691], "5886": [62, 598, 691], "2732": [62, 598, 691], "7696": [62, 598, 691], "7024": [62, 598, 691], "2518": [62, 598, 691], "826": [62, 598, 691], "178": [62, 598, 691], "981": [62, 598, 691], "831": [62, 598, 691], "421": [62, 598, 691], "_arraywithrandom": [63, 96], "multinomi": [63, 86, 362, 468, 599], "population_s": [63, 86, 599, 692], "num_sampl": [63, 86, 599, 692], "unnorm": [63, 86, 599, 692, 782], "popul": [63, 67, 71, 86, 90, 599, 603, 692, 718, 720, 769, 770, 779, 782, 787, 808], "draw": [63, 86, 362, 466, 468, 470, 599, 692, 694, 695, 730, 759, 763, 781, 782], "half": [63, 86, 121, 286, 585, 588, 599, 693, 695, 757, 785], "235": [63, 694], "float16": [63, 74, 86, 134, 156, 158, 159, 164, 166, 300, 328, 347, 352, 585, 586, 593, 648, 694, 695, 757, 769, 780, 782], "807": [63, 694], "_arraywithsearch": [64, 96], "select_last_index": [64, 87, 600, 698, 699], "occurr": [64, 358, 367, 457, 478, 600, 601, 698, 699, 703], "argmin": [64, 87, 600], "output_dtyp": [64, 87, 600, 699], "argwher": [64, 87, 600], "nonzero": [64, 87, 220, 221, 222, 225, 228, 237, 239, 242, 244, 246, 272, 285, 290, 588, 600], "as_tupl": [64, 87, 600, 701], "fewer": [64, 87, 600, 701], "_arraywithset": [65, 96], "unique_al": [65, 88, 601], "by_valu": [65, 88, 601, 703], "inverse_indic": [65, 88, 358, 457, 601, 703, 705], "unique_count": [65, 88, 601], "unique_invers": [65, 88, 601], "unique_valu": [65, 88, 601], "admonit": [65, 706], "dask": [65, 601, 703, 704, 705, 706, 752], "difficult": [65, 601, 703, 704, 705, 706, 761, 763, 769, 782, 795], "omit": [65, 282, 588, 601, 703, 704, 705, 706, 775, 779, 780], "x_i": [65, 67, 76, 219, 220, 221, 224, 225, 226, 228, 230, 235, 236, 237, 242, 244, 245, 252, 253, 254, 255, 256, 260, 261, 262, 263, 267, 274, 279, 282, 283, 284, 285, 286, 287, 289, 290, 292, 322, 341, 352, 588, 601, 603, 703, 704, 705, 706, 714, 715, 716, 718, 719, 720, 730, 772], "x_j": [65, 601, 703, 704, 705, 706], "impli": [65, 601, 703, 704, 705, 706, 782], "typeerror": [65, 88, 601, 706, 789], "_arraywithsort": [66, 96], "stabil": [66, 89, 548, 549, 590, 602, 707, 710, 769, 778, 783, 785], "maintain": [66, 89, 602, 707, 710, 751, 761, 763, 774, 779, 781, 782, 801], "msort": [66, 89, 602], "searchsort": [66, 89, 602], "side": [66, 89, 332, 352, 602, 709, 731, 743, 760, 761, 766], "sorter": [66, 89, 602, 709], "ret_dtyp": [66, 89, 602, 709], "_arraywithstatist": [67, 96], "cumprod": [67, 90, 603, 780, 792], "cumsum": [67, 90, 603, 769], "einsum": [67, 90, 603], "equat": [67, 77, 90, 305, 349, 593, 603, 640, 713, 743, 768, 802], "operand": [67, 77, 81, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 341, 345, 352, 353, 355, 397, 588, 593, 603, 639, 645, 713, 714, 716, 717, 719, 743, 764, 767, 772, 780], "describ": [67, 77, 222, 239, 240, 272, 275, 277, 362, 365, 470, 473, 588, 592, 603, 618, 713, 717, 719, 756, 759, 760, 761, 766, 768, 779, 780, 782, 787, 792, 802], "contract": [67, 593, 603, 643, 713], "seq": [67, 603, 713], "ii": [67, 90, 603, 713, 761], "jk": [67, 603, 713], "ik": [67, 603, 713], "126": [67, 104, 278, 582, 588, 593, 603, 633, 713], "510": [67, 603, 713], "special": [67, 82, 94, 96, 97, 219, 220, 221, 222, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 341, 352, 588, 593, 603, 639, 645, 714, 715, 716, 717, 718, 719, 720, 730, 759, 763, 764, 766, 768, 771, 772, 773, 775, 779, 781, 782, 783, 785, 802, 803, 804], "arithmet": [67, 90, 233, 239, 272, 588, 603, 715, 780], "propag": [67, 233, 588, 603, 714, 715, 716, 718, 719, 720, 778], "04999995": [67, 715], "freedom": [67, 90, 603, 718, 720, 765], "constitut": [67, 90, 603, 718, 720, 776, 787, 803], "commonli": [67, 90, 603, 718, 720, 773, 776, 778], "81649661": [67, 603, 718], "6666665": [67, 720, 790], "667": [67, 78, 239, 498, 548, 588, 590, 720], "_arraywithutil": [68, 96], "AND": [68, 91, 229, 240, 266, 588, 604, 721], "invalid": [68, 91, 593, 595, 604, 647, 656, 721, 722, 760, 769], "OR": [68, 91, 232, 268, 275, 588, 604, 722, 760, 761, 778], "_wrap_funct": [69, 92, 766, 776, 777], "function_nam": [69, 92, 759, 783], "new_funct": [69, 92, 766], "add_ivy_array_instance_method": 69, "cl": [69, 92], "toi": [69, 92], "arrayexampl": 69, "hasattr": [69, 92], "_containerwithactiv": [70, 97], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 543, 565, 590, 784, 790], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "queue_timeout": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 543, 565, 590, 784], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "dynamic_backend": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 733, 765, 784], "build_cal": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97], "containerbas": [70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 767], "_static_gelu": 70, "key_chain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 431, 433, 442, 444, 446, 447, 448, 450, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 472, 473, 480, 481, 482, 483, 489, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "to_appli": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 431, 433, 442, 444, 446, 447, 448, 450, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 472, 473, 480, 481, 482, 483, 489, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 597, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "prune_unappli": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 431, 433, 442, 444, 446, 447, 448, 450, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 472, 473, 480, 481, 482, 483, 489, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 597, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 685, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "map_sequ": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 123, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 315, 316, 319, 320, 321, 322, 324, 326, 332, 333, 339, 341, 342, 343, 344, 345, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 397, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 431, 433, 442, 444, 446, 447, 448, 450, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 472, 473, 480, 481, 482, 483, 489, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "formul": [70, 104, 727], "prune": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 136, 141, 143, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 298, 299, 301, 302, 304, 320, 321, 322, 324, 326, 332, 333, 339, 341, 343, 344, 345, 378, 379, 380, 419, 420, 422, 423, 426, 427, 428, 431, 452, 454, 455, 460, 462, 463, 464, 465, 467, 480, 481, 482, 483, 491, 494, 495, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 515, 517, 518, 519, 521, 522, 525, 533, 534, 548, 549, 551, 553, 555, 556, 569, 575, 580, 597, 606, 607, 608, 609, 615, 616, 619, 620, 621, 626, 627, 628, 629, 631, 632, 634, 636, 638, 639, 645, 650, 651, 652, 653, 657, 660, 661, 662, 663, 664, 667, 668, 685, 686, 687, 688, 692, 693, 694, 695, 697, 700, 703, 704, 705, 706, 707, 711, 712, 715, 717, 718, 720, 721, 722, 768], "static_gelu": 70, "046": 70, "_static_hardswish": 70, "_static_leaky_relu": 70, "static_leaky_relu": 70, "38999999": [70, 77, 106, 294, 347], "_static_log_softmax": 70, "static_log_softmax": 70, "371": [70, 107], "_static_mish": 70, "static_mish": 70, "30883577": [70, 108, 582], "28903052": [70, 108, 582], "10714479": [70, 108, 582], "_static_relu": 70, "static_relu": 70, "_static_sigmoid": 70, "static_sigmoid": 70, "2689414": [70, 110, 111, 582], "7310586": [70, 110, 111, 582], "88079703": [70, 110, 582], "62245935": [70, 110], "4750208": [70, 110], "_static_softmax": 70, "static_softmax": 70, "72844321": [70, 111], "19852395": [70, 111], "07303288": [70, 111], "_static_softplu": 70, "revert": [70, 112, 582], "static_softplu": 70, "53499615": 70, "42036411": 70, "948": [70, 112], "166": [70, 104, 582], "159": [70, 104, 582, 592, 616], "slice": [71, 78, 146, 315, 349, 358, 430, 451, 454, 509, 510, 512, 538, 585, 590, 597, 681, 802], "dictionari": [71, 88, 97, 211, 573, 587, 591, 706, 764, 768, 769, 776, 780, 781, 790, 795], "asynchron": [71, 97, 802], "wait": [71, 97, 543, 590, 749, 759, 761, 768, 780], "arriv": [71, 97, 543, 590, 785], "cont_list_join": [71, 97], "limit": [71, 97, 164, 167, 497, 498, 586, 590, 595, 653, 730, 737, 749, 760, 761, 766, 768, 771, 773, 780, 782, 785, 790, 795, 801, 802, 803], "whitespac": [71, 97], "indent": [71, 97, 790], "newlin": [71, 97, 772], "termin": [71, 97, 760, 761, 767, 774, 787, 790], "rebuild": [71, 97, 755], "constructor": [71, 97, 493, 590, 728, 736, 769, 770, 772, 789], "kept": [71, 97, 596, 669, 670, 761, 779, 783], "encount": [71, 97, 731, 757, 759, 769, 773, 782], "instruct": [71, 97, 749, 759, 760, 763, 773, 774, 781, 782, 796, 800, 803, 806, 808], "alphabet": [71, 97], "__setitem__": [71, 764, 767, 789], "_cont_at_key_chains_input_as_dict": 71, "current_chain": 71, "ignore_key_error": 71, "_cont_at_key_chains_input_as_seq": 71, "_cont_call_static_method_with_flexible_arg": 71, "static_method": 71, "kw": 71, "self_idx": 71, "_cont_concat_unifi": 71, "_cont_get_dev": 71, "_cont_get_shap": 71, "properti": [71, 94, 95, 96, 100, 733, 735, 763, 767, 776, 781, 782, 789, 790, 791, 808], "_cont_ivi": 71, "_cont_mean_unifi": 71, "_1": 71, "_cont_prune_key_chains_input_as_dict": 71, "return_cont": 71, "_cont_prune_key_chains_input_as_seq": 71, "_cont_slice_kei": 71, "key_slic": 71, "_cont_sum_unifi": 71, "_get_queue_item": 71, "cont_all_fals": 71, "assert_is_bool": 71, "cont_all_key_chain": 71, "include_empti": 71, "cont_all_tru": [71, 767, 790], "cont_as_bool": 71, "cont_assert_contains_sub_contain": 71, "sub_cont": 71, "screen": [71, 759, 760, 790], "cont_assert_contains_sub_structur": 71, "check_shap": [71, 737], "cont_assert_ident": 71, "check_typ": 71, "same_arrai": [71, 790], "arrays_equ": 71, "cont_assert_identical_structur": 71, "assert_and_assign": 71, "strucutr": 71, "congruent": 71, "cont_at_key_chain": 71, "ignore_non": 71, "cont_at_kei": 71, "substr": 71, "cont_combin": 71, "duplic": [71, 597, 674, 765, 772, 777, 778, 781, 791, 808], "configur": [71, 211, 587, 597, 685, 755, 760, 761, 766, 768, 769, 774], "container_rightmost": 71, "cont_common_key_chain": 71, "cont_config": 71, "cont_contains_sub_contain": 71, "cont_contains_sub_structur": 71, "cont_copi": [71, 790], "cont_create_if_abs": 71, "noth": [71, 785, 808], "cont_cutoff_at_depth": 71, "depth_cutoff": 71, "summari": [71, 168, 499, 514, 586, 590, 760, 761, 782], "cont_cutoff_at_height": 71, "height_cutoff": 71, "cont_dev": 71, "belong": [71, 759, 763, 791], "cont_dev_str": 71, "cont_diff": [71, 790], "diff_kei": 71, "detect_key_diff": 71, "detect_value_diff": 71, "detect_shape_diff": 71, "among": [71, 753, 767, 768, 782, 785, 802], "container0": 71, "cont_duplicate_array_keychain": 71, "cont_find_sub_contain": 71, "sub_cont_to_find": 71, "exsit": 71, "cont_find_sub_structur": 71, "sub_struc_to_find": 71, "cont_flatten_key_chain": [71, 790], "above_height": [71, 790], "below_depth": [71, 790], "cont_format_key_chain": 71, "format_fn": 71, "cont_from_disk_as_hdf5": [71, 790], "h5_obj_or_filepath": 71, "slice_obj": 71, "disk": [71, 733, 790, 801], "h5py": 71, "filepath": [71, 604, 723, 724, 761, 763], "cont_from_disk_as_json": [71, 790], "json_filepath": 71, "cont_from_disk_as_pickl": [71, 790], "pickle_filepath": 71, "cont_from_flat_list": 71, "flat_list": 71, "hierarchi": [71, 759, 790, 798, 808], "cont_handle_inplac": 71, "prime": [71, 769], "overwritten": [71, 764, 765], "cont_has_kei": 71, "query_kei": 71, "somewher": [71, 768], "cont_has_key_chain": 71, "cont_ident": [71, 790], "cont_identical_array_shap": 71, "cont_identical_config": 71, "cont_identical_structur": 71, "cont_if_exist": 71, "cont_inplace_upd": 71, "cont_ivi": 71, "cont_key_chains_contain": 71, "sub_str": 71, "cont_list_stack": [71, 790], "cont_load": 71, "cont_map": [71, 767, 790], "func": [71, 94, 212, 346, 354, 496, 570, 573, 574, 576, 581, 587, 590, 591, 597, 685, 759, 763, 764, 771, 773, 778, 779], "cont_map_sub_cont": 71, "include_self": 71, "possibi": 71, "cont_max_depth": 71, "cont_multi_map": 71, "map_nest": 71, "assert_ident": 71, "leftmost": [71, 597, 685], "cont_multi_map_in_funct": 71, "cont_num_arrai": 71, "cont_overwrite_at_key_chain": 71, "target_dict": 71, "return_dict": 71, "cont_prune_empti": 71, "keep_non": 71, "cont_prune_key_chain": 71, "key1": [71, 749, 791], "key2": [71, 749], "key3": 71, "cont_prune_key_from_key_chain": 71, "cont_prune_kei": 71, "cont_prune_keys_from_key_chain": 71, "cont_reduc": 71, "cont_remove_key_length_limit": 71, "cont_remove_print_limit": 71, "cont_reshape_lik": 71, "leading_shap": 71, "cont_restructur": 71, "keep_orig": 71, "old": [71, 760, 765, 779], "cont_restructure_key_chain": 71, "keychain_map": 71, "cont_sav": 71, "cont_set_at_key_chain": 71, "cont_set_at_kei": 71, "cont_shap": [71, 592, 610], "cont_show": 71, "cont_show_sub_contain": 71, "sub_cont_or_keychain": 71, "cont_size_ordered_arrai": 71, "keychain": [71, 77, 321, 426, 427, 428, 454], "cont_slice_kei": 71, "all_depth": 71, "cont_slice_via_kei": 71, "slice_kei": 71, "cont_sort_by_kei": 71, "cont_structural_diff": 71, "cont_to_dict": 71, "cont_to_disk_as_hdf5": [71, 790], "starting_index": 71, "max_batch_s": 71, "cont_to_disk_as_json": [71, 790], "cont_to_disk_as_pickl": [71, 790], "cont_to_flat_list": 71, "cont_to_iter": [71, 767], "leaf_keys_onli": 71, "cont_to_iterator_kei": 71, "cont_to_iterator_valu": 71, "cont_to_json": 71, "cont_to_nested_list": 71, "cont_to_raw": 71, "cont_trim_kei": 71, "trim": 71, "cont_try_kc": 71, "cont_unifi": 71, "concatten": [71, 212, 587], "cont_unstack_cont": 71, "dim_siz": 71, "cont_update_config": 71, "cont_with_default_key_color": 71, "cont_with_entries_as_list": 71, "cont_with_ivy_backend": 71, "ivy_backend": [71, 781], "cont_with_key_length_limit": [71, 790], "cont_with_print_ind": [71, 790], "cont_with_print_limit": [71, 790], "cont_with_print_line_spac": 71, "h5_file_s": 71, "shuffle_h5_fil": 71, "split_cont": 71, "_is_json": 71, "_repr": 71, "_containerwithconvers": [72, 97], "_static_to_ivi": 72, "_static_to_n": 72, "_containerwithcr": [73, 97], "_static_arang": 73, "_static_asarrai": 73, "_static_copy_arrai": 73, "_static_empti": 73, "_static_empty_lik": 73, "_static_ey": 73, "n_row": [73, 77, 132, 146, 315, 349, 356, 409, 585], "n_col": [73, 77, 132, 146, 315, 349, 585], "_static_from_dlpack": 73, "_static_ful": 73, "_static_full_lik": 73, "static_full_lik": 73, "2324": [73, 136, 585], "234": [73, 76, 136, 158, 241, 292, 585, 586, 588, 592, 616], "123": [73, 74, 136, 167, 505, 585, 590, 782], "_static_linspac": 73, "_static_logspac": 73, "static_logspac": 73, "15443469": [73, 138], "64158883": [73, 138], "_static_meshgrid": 73, "_static_native_arrai": 73, "_static_one_hot": 73, "static_one_hot": 73, "_static_on": 73, "_static_ones_lik": 73, "_static_tril": 73, "_static_triu": 73, "_static_zero": 73, "_static_zeros_lik": 73, "frombuff": [73, 585], "expos": [73, 134, 499, 585, 590, 749, 751, 768, 787, 791], "x00": [73, 134, 585], "xf0": [73, 134, 585], "x01": [73, 134, 585], "x02": [73, 134, 585], "x03": [73, 134, 585], "x04": [73, 134, 585], "x05": [73, 134], "5443469": [73, 138, 585], "static_frombuff": 73, "static_triu_indic": 73, "triu_indic": [73, 585], "_containerwithdatatyp": [74, 97], "_static_astyp": 74, "718": [74, 76, 151, 268, 586], "618": [74, 76, 151, 268, 586], "static_astyp": 74, "_static_broadcast_arrai": 74, "static_broadcast_arrai": 74, "_static_broadcast_to": 74, "static_broadcast_to": 74, "_static_can_cast": 74, "from_": [74, 154, 586], "static_can_cast": 74, "_static_default_complex_dtyp": 74, "complex_dtyp": [74, 157, 180, 586], "_static_default_float_dtyp": 74, "float_dtyp": [74, 159, 182, 586], "_static_dtyp": 74, "_static_finfo": 74, "inquir": [74, 164, 167], "static_finfo": 74, "55040e": [74, 164, 586], "7976931348623157e": [74, 164, 586], "308": [74, 164, 586, 782], "_static_function_supported_dtyp": 74, "_static_function_unsupported_dtyp": 74, "_static_iinfo": 74, "1800": [74, 167, 586], "1084": 74, "40000": 74, "static_iinfo": 74, "2147483648": [74, 167, 586], "2147483647": [74, 167, 586], "_static_is_bool_dtyp": 74, "dtype_in": [74, 149, 150, 163, 169, 170, 171, 172, 173, 174, 175, 176, 191, 586], "_static_is_complex_dtyp": 74, "is_complex_dtyp": [74, 586, 783], "roughli": [74, 760, 763, 805], "static_is_complex_dtyp": 74, "complex64": [74, 157, 171, 180, 186, 252, 279, 300, 347, 586, 588, 593, 639, 641, 642, 769], "_static_is_float_dtyp": 74, "static_is_float_dtyp": 74, "_static_is_int_dtyp": 74, "_static_is_uint_dtyp": 74, "_static_result_typ": 74, "static_result_typ": 74, "broadcats": [74, 152], "_containerwithdevic": [75, 97], "_static_dev": 75, "static_dev": 75, "_static_to_devic": 75, "static_to_devic": 75, "contaion": [75, 196], "_containerwithelementwis": [76, 97], "_static_ab": 76, "static_ab": 76, "_static_aco": 76, "static_aco": 76, "_static_acosh": 76, "static_acosh": 76, "_static_add": 76, "static_add": [76, 101], "_static_asin": 76, "static_asin": 76, "524": [76, 224, 588], "412": [76, 81, 224, 588], "201": [76, 77, 224, 376, 588], "_static_asinh": 76, "static_asinh": 76, "_static_atan": 76, "static_atan": 76, "_static_atan2": 76, "static_atan2": 76, "915": [76, 227, 588], "983": [76, 227, 588], "978": [76, 227, 588], "696": [76, 86, 227, 588, 694], "993": [76, 227, 588], "_static_atanh": 76, "static_atanh": 76, "_static_bitwise_and": 76, "static_bitwise_and": 76, "_static_bitwise_invert": 76, "static_bitwise_invert": 76, "_static_bitwise_left_shift": 76, "_static_bitwise_or": 76, "static_bitwise_or": 76, "_static_bitwise_right_shift": 76, "static_bitwise_right_shift": 76, "_static_bitwise_xor": 76, "static_bitwise_xor": 76, "_static_ceil": 76, "static_ceil": 76, "_static_co": 76, "static_co": 76, "_static_cosh": 76, "static_cosh": 76, "_static_deg2rad": 76, "static_deg2rad": 76, "0262": [76, 238, 278, 588], "873": [76, 238, 278, 588], "_static_divid": 76, "static_divid": 76, "_static_equ": 76, "static_equ": 76, "_static_erf": 76, "static_erf": 76, "27632612": [76, 241], "934008": [76, 241], "99999928": [76, 241], "91903949": [76, 241], "_static_exp": 76, "static_exp": 76, "59814835": [76, 242, 588], "4131622": [76, 242], "_static_expm1": 76, "thefunct": [76, 241], "areal": 76, "static_expm1": 76, "71828175": [76, 242, 588], "38905621": [76, 242, 588], "59815216": 76, "_static_floor": 76, "static_floor": 76, "_static_floor_divid": 76, "static_floor_divid": 76, "_static_great": 76, "static_great": 76, "_static_greater_equ": 76, "static_greater_equ": 76, "_static_isfinit": 76, "999999999999": [76, 253, 588], "static_isfinit": 76, "_static_isinf": 76, "static_isinf": 76, "_static_isnan": 76, "static_isnan": 76, "_static_isr": 76, "0j": [76, 77, 142, 143, 220, 221, 222, 225, 228, 237, 242, 244, 256, 260, 262, 279, 283, 285, 286, 290, 322, 352, 585, 588, 593, 639], "23j": [76, 77], "9j": [76, 77], "static_isr": 76, "_static_lcm": 76, "1080": [76, 257], "1550": [76, 257], "130": [76, 257], "_static_less": 76, "static_less": 76, "_static_less_equ": 76, "static_less_equ": 76, "_static_log": 76, "static_log": 76, "_static_log10": 76, "static_log10": 76, "898": [76, 261, 588], "0414": [76, 261, 588], "_static_log1p": 76, "static_log1p": 76, "_static_log2": 76, "_static_logaddexp": 76, "static_logaddexp": 76, "_static_logical_and": 76, "static_logical_and": 76, "_static_logical_not": 76, "static_logical_not": 76, "_static_logical_or": 76, "static_logical_or": 76, "_static_logical_xor": 76, "static_logical_xor": 76, "_static_maximum": 76, "static_maximum": 76, "_static_minimum": 76, "static_minimum": 76, "_static_multipli": 76, "static_multipli": 76, "_static_neg": 76, "static_neg": 76, "_static_not_equ": 76, "static_not_equ": 76, "_static_posit": 76, "static_posit": 76, "_static_pow": 76, "static_pow": 76, "_static_rad2deg": 76, "static_rad2deg": 76, "5160": 76, "10300": [76, 278, 588], "15500": 76, "20600": 76, "2860": [76, 278], "_static_reciproc": 76, "recirpoc": [76, 280], "static_reciproc": 76, "_static_remaind": 76, "static_remaind": 76, "_static_round": 76, "thevfunct": 76, "300": [76, 78, 81, 282, 355, 378, 379, 510, 534, 588, 590, 593, 629, 782], "527": [76, 282, 588], "static_round": 76, "301": [76, 282, 588], "_static_sign": 76, "static_sign": 76, "_static_sin": 76, "static_sin": 76, "757": [76, 284, 588], "959": [76, 244, 284, 588], "279": [76, 284, 355, 376, 386, 497, 588, 590], "_static_sinh": 76, "static_sinh": 76, "835": [76, 285], "347": [76, 285], "721": [76, 285], "_static_sqrt": 76, "static_sqrt": 76, "_static_squar": 76, "static_squar": 76, "_static_subtract": 76, "static_subtract": 76, "_static_tan": 76, "static_tan": 76, "_static_tanh": 76, "static_tanh": 76, "995": [76, 290, 588], "9999": 76, "_static_trapz": 76, "static_trapz": 76, "_static_trunc": 76, "static_trunc": 76, "_static_trunc_divid": 76, "75j": [76, 223, 252], "01317055": [76, 223], "05634501": [76, 223], "115": [76, 223, 278, 588], "3461759": [76, 223], "524111": [76, 223], "644": [76, 224, 588, 791], "305": [76, 81, 224, 588], "351": [76, 238, 278], "00613": [76, 238], "0154": [76, 238], "403": [76, 242], "428772": [76, 242], "649": [76, 244], "220": [76, 244], "865": [76, 244], "metho": [76, 251, 263], "7j": [76, 77, 256, 279, 322, 352, 588], "956": [76, 262], "08746284": [76, 265], "32192809": [76, 265], "nuner": [76, 272], "413": [76, 278], "335": [76, 77, 279, 322], "345j": [76, 77, 279, 322], "static_angl": 76, "static_exp2": 76, "static_fmin": 76, "static_gcd": 76, "static_imag": 76, "static_logaddexp2": 76, "static_nan_to_num": 76, "static_r": 76, "_containerwithactivationexperiment": [77, 97], "_static_elu": 77, "static_elu": 77, "_static_silu": 77, "static_silu": 77, "27777028": [77, 301], "23947507": [77, 301], "0900332": [77, 301], "contan": [77, 295], "19722462": [77, 295], "84729779": [77, 295], "31326163": [77, 296], "46328258": [77, 296], "51301527": [77, 296], "79813886": [77, 296], "22856998": [77, 299], "42028043": [77, 299], "31868932": [77, 299], "static_logit": 77, "static_logsigmoid": 77, "34115386": 77, "64439666": 77, "24115384": 77, "55435526": 77, "07888974": 77, "00741899": 77, "26328245": 77, "00012302": 77, "static_prelu": 77, "static_relu6": 77, "static_selu": 77, "static_thresholded_relu": 77, "_containerwithconversionexperiment": [77, 97], "_containerwithcreationexperiment": [77, 97], "_static_trilu": 77, "blackman": [77, 303, 349], "00770143e": [77, 303], "49229857e": [77, 303], "hamming_window": [77, 349], "coeffici": [77, 305, 349, 593, 640], "ham": [77, 305, 349], "4180": [77, 305], "8180": [77, 305], "hann_window": [77, 349], "hann": [77, 306, 349], "7500": [77, 306], "3455": [77, 306], "9045": [77, 306], "kaiser_bessel_derived_window": [77, 349], "suitabl": [77, 308, 309, 349, 602, 709, 760, 761, 767, 783, 802], "spectral": [77, 308, 309, 349], "analysi": [77, 308, 309, 349, 802, 803], "kaiser": [77, 303, 308, 309, 349], "70710677": [77, 308, 464, 465], "18493208": [77, 308, 349], "9827513": [77, 308, 349], "kaiser_window": [77, 349], "static_kaiser_window": [77, 309], "2049": [77, 309], "8712": [77, 309], "0367": [77, 309, 349], "7753": [77, 309], "static_blackman_window": 77, "window_length": [77, 303, 305, 308, 309, 319, 349], "static_eye_lik": 77, "static_hamming_window": 77, "static_hann_window": 77, "static_hann": 77, "static_kaiser_bessel_derived_window": 77, "static_mel_weight_matrix": 77, "static_tril_indic": 77, "static_unsorted_segment_min": 77, "static_unsorted_segment_sum": 77, "static_vorbis_window": 77, "vorbis_window": [77, 349], "vorbi": [77, 319, 349], "38268343": [77, 319], "92387953": [77, 319], "14943586": [77, 319, 349], "51644717": [77, 319], "85631905": [77, 319], "98877142": [77, 319], "tril_indic": [77, 349], "_containerwithdata_typeexperiment": [77, 97], "_containerwithdeviceexperiment": [77, 97], "_containerwithelementwiseexperiment": [77, 97], "0003": [77, 320, 593, 629], "0006": [77, 320, 344], "2345j": [77, 322], "5772": [77, 326], "9635": [77, 326], "4228": [77, 326], "9228": [77, 326], "mantissa": [77, 330, 352], "frist": [77, 331, 352], "coord": [77, 331], "6055": [77, 332], "160": [77, 334], "10240": [77, 334], "60000038": [77, 335, 352], "0707": [77, 341, 352], "0579": [77, 341, 352], "static_allclos": 77, "static_binar": 77, "static_conj": 77, "static_copysign": 77, "static_count_nonzero": 77, "static_diff": 77, "static_digamma": 77, "57721537": 77, "96351004": 77, "static_fix": 77, "static_float_pow": 77, "static_fmax": 77, "static_fmod": 77, "static_frexp": 77, "static_gradi": 77, "static_hypot": 77, "static_isclos": 77, "static_ldexp": 77, "static_lerp": 77, "90000057": [77, 335, 352], "80000019": [77, 335, 352], "70000076": [77, 335, 352], "55000019": [77, 335, 352], "05000019": [77, 335, 352], "static_modf": 77, "static_nansum": 77, "static_nextaft": 77, "static_signbit": 77, "static_sinc": 77, "636": 77, "090": 77, "070": 77, "057": 77, "static_sparsify_tensor": 77, "static_xlogi": 77, "static_zeta": 77, "0244": [77, 344], "_containerwithgeneralexperiment": [77, 97], "_static_reduc": 77, "static_reduc": 77, "_containerwithgradientsexperiment": [77, 97], "_containerwithimageexperiment": [77, 97], "_containerwithlayersexperiment": [77, 97], "_static_fft": 77, "static_fft": 77, "673": [77, 376], "0507": [77, 376], "79711437": [77, 355, 376, 386], "94867325": [77, 355, 376, 386], "74089146": [77, 355, 376, 386], "25980937": [77, 355, 376, 386], "64958102": [77, 355, 376, 386], "2442648": [77, 355, 376, 386], "247306": [77, 388], "908323j": [77, 388], "494955": [77, 388], "90395j": [77, 388], "static_adaptive_avg_pool1d": 77, "static_adaptive_avg_pool2d": 77, "static_adaptive_max_pool2d": 77, "static_avg_pool1d": 77, "static_avg_pool2d": 77, "static_avg_pool3d": 77, "static_dct": 77, "182": 77, "253": [77, 285, 588], "515": [77, 599, 694], "467": 77, "static_dft": 77, "static_embed": 77, "static_idct": 77, "93732834": [77, 355, 376], "75048852": [77, 355, 376], "29723358": [77, 355, 386], "6950531": 77, "93914509": 77, "88008738": 77, "18951225": 77, "06697273": [77, 355, 386], "57439804": 77, "68861485": [77, 355, 386], "41308832": [77, 355, 386], "0700836": 77, "2449036": 77, "6711426": 77, "514": 77, "501709": 77, "4924011": 77, "static_ifft": 77, "static_ifftn": 77, "static_interpol": 77, "static_max_pool1d": 77, "static_max_pool2d": 77, "max_pool2dd": 77, "static_max_pool3d": 77, "static_rfftn": 77, "_containerwithlinearalgebraexperiment": [77, 97], "933034": [77, 356, 400], "eigenvealu": [77, 403, 625], "xx": [77, 403, 405, 625], "37228107": [77, 403, 625], "3722816": [77, 403, 625], "8245648": [77, 403, 625], "41597357": [77, 403, 625], "56576747": [77, 403, 625], "9093767": [77, 403, 625], "56155": [77, 404], "82842": [77, 404], "450": [77, 408], "static_adjoint": 77, "static_cond": 77, "static_diagflat": 77, "static_dot": 77, "static_eig": 77, "static_eigh_tridiagon": 77, "static_eigv": 77, "static_initialize_tuck": 77, "static_kron": 77, "kroneck": [77, 356, 407, 408], "static_make_svd_non_neg": 77, "static_matrix_exp": 77, "static_mode_dot": 77, "static_multi_dot": 77, "static_multi_mode_dot": 77, "static_partial_tuck": 77, "static_svd_flip": 77, "static_truncated_svd": 77, "static_tuck": 77, "_containerwithlossesexperiment": [77, 97], "_static_huber_loss": 77, "static_huber_loss": 77, "0575": [77, 419], "_static_l1_loss": 77, "static_l1_loss": 77, "_static_smooth_l1_loss": 77, "static_smooth_l1_loss": 77, "_static_soft_margin_loss": 77, "_containerwithmanipulationexperiment": [77, 97], "_static_fill_diagon": 77, "_static_unique_consecut": 77, "atleast": [77, 358, 426, 427, 428, 770], "ary1": [77, 358, 426, 427, 428], "ary2": [77, 358, 426, 427, 428], "broadcast_shap": [77, 100, 358], "static_concat_from_sequ": [77, 431], "30192195": [77, 443], "static_as_strid": 77, "static_atleast_1d": 77, "static_atleast_2d": 77, "static_atleast_3d": 77, "static_broadcast_shap": 77, "static_dsplit": 77, "static_dstack": 77, "static_expand": 77, "static_flatten": 77, "static_fliplr": 77, "static_flipud": 77, "static_fold": 77, "static_heavisid": 77, "static_hsplit": 77, "static_hstack": 77, "static_i0": 77, "static_matric": 77, "static_moveaxi": 77, "static_pad": 77, "static_partial_fold": 77, "static_partial_tensor_to_vec": 77, "static_partial_unfold": 77, "static_partial_vec_to_tensor": 77, "static_rot90": 77, "static_soft_threshold": 77, "static_take_along_axi": 77, "static_top_k": 77, "static_unfold": 77, "static_vsplit": 77, "static_vstack": 77, "_containerwithnormsexperiment": [77, 97], "16903085": [77, 464, 465], "50709254": [77, 464, 465], "84515423": [77, 464, 465], "44183609": [77, 464, 465], "56807494": [77, 464, 465], "69431382": [77, 464, 465], "static_batch_norm": 77, "static_group_norm": 77, "static_instance_norm": 77, "static_l1_norm": 77, "static_l2_norm": 77, "static_lp_norm": 77, "12500000": 77, "37500000": 77, "62500000": 77, "27500000": 77, "35000000": 77, "42500000": 77, "0000000": 77, "5000000": 77, "2500000": 77, "_containerwithrandomexperiment": [77, 97], "43643127": [77, 468], "32325703": [77, 468], "24031169": [77, 468], "34251311": [77, 468], "31692529": [77, 468], "3405616": [77, 468], "5319725": [77, 468], "22458365": [77, 468], "24344385": [77, 468], "26588406": [77, 468], "61075421": [77, 468], "12336174": [77, 468], "51142915": [77, 468], "25041268": [77, 468], "23815817": [77, 468], "64042903": [77, 468], "25763214": [77, 468], "10193883": [77, 468], "31624692": [77, 468], "46567987": [77, 468], "21807321": [77, 468], "37677699": [77, 468], "39914594": [77, 468], "22407707": [77, 468], "static_bernoulli": 77, "static_beta": 77, "static_dirichlet": 77, "static_gamma": 77, "static_poisson": 77, "_containerwithsearchingexperiment": [77, 97], "static_unravel_index": 77, "_containerwithsetexperiment": [77, 97], "_containerwithsortingexperiment": [77, 97], "invert_permut": [77, 365], "static_invert_permut": 77, "static_lexsort": [77, 89], "_containerwithstatisticalexperiment": [77, 97], "_static_cummax": 77, "static_cummax": 77, "_static_cummin": 77, "static_cummin": 77, "func_nam": [77, 483, 759, 771, 772, 776, 780], "static_bincount": 77, "static_corrcoef": 77, "static_cov": [77, 367, 480], "static_histogram": 77, "static_igamma": 77, "static_median": 77, "static_nanmean": 77, "static_nanmedian": 77, "static_nanprod": 77, "static_quantil": 77, "_containerwithutilityexperiment": [77, 97], "static_optional_get_el": 77, "_containerwithgener": [78, 97], "_static_all_equ": 78, "static_all_equ": 78, "_static_array_equ": 78, "a0": [78, 494], "static_array_equ": 78, "_static_assert_supports_inplac": 78, "_static_clip_matrix_norm": 78, "static_clip_matrix_norm": 78, "849": [78, 497, 498, 590], "_static_clip_vector_norm": 78, "static_clip_vector_norm": 78, "_static_einops_rearrang": 78, "static_einops_rearrang": 78, "_static_einops_reduc": 78, "static_einops_reduc": 78, "29333329": [78, 503, 590], "53000069": [78, 503, 590], "39666676": [78, 503, 590], "20666695": [78, 503, 590], "_static_einops_repeat": 78, "static_einops_repeat": 78, "_static_exist": 78, "detal": [78, 505], "_static_fourier_encod": 78, "static_fourier_encod": 78, "classivi": [78, 595, 601, 662, 704], "89858720e": 78, "79717439e": 78, "_static_gath": 78, "static_gath": 78, "_static_gather_nd": 78, "400": [78, 81, 355, 378, 379, 510, 534, 590, 593, 629], "static_gather_nd": 78, "_static_get_num_dim": 78, "static_get_num_dim": 78, "_static_has_nan": 78, "leafwis": 78, "static_has_nan": 78, "_static_inplace_decr": 78, "_static_inplace_incr": 78, "_static_inplace_upd": 78, "_static_is_arrai": 78, "static_is_arrai": 78, "_static_is_ivy_arrai": 78, "static_is_ivy_arrai": 78, "_static_is_native_arrai": 78, "static_is_native_arrai": 78, "_static_scatter_flat": 78, "_static_scatter_nd": 78, "static_scatter_nd": 78, "_static_stable_divid": 78, "22222222": 78, "11111111": 78, "857": [78, 548, 590], "444": 78, "_static_stable_pow": 78, "00012": [78, 549, 590], "00016": [78, 79, 549, 577, 590, 591], "00001": [78, 549, 590], "00032": [78, 549], "00256": [78, 549], "1679638": [78, 549], "395": [78, 549], "16777383": [78, 549], "_static_supports_inplace_upd": 78, "_static_to_list": 78, "static_to_list": 78, "_static_to_numpi": 78, "static_to_numpi": 78, "_static_to_scalar": 78, "static_to_scalar": 78, "_static_value_is_nan": 78, "452": 78, "static_value_is_nan": 78, "833": [78, 498], "items": [78, 96, 590], "static_isin": 78, "static_items": 78, "complex128": [78, 157, 158, 171, 180, 186, 300, 347, 528, 586, 590, 593, 626, 627, 632, 648, 757, 769], "static_strid": 78, "425": [78, 569], "_containerwithgradi": [79, 97], "_static_stop_gradi": 79, "static_stop_gradi": 79, "976": [79, 290, 571, 588, 591], "49e": [79, 571, 591], "74e": [79, 571, 591], "95e": [79, 571, 591], "024": [79, 571, 591], "096": [79, 571, 591], "216": [79, 82, 571, 591, 646], "626": [79, 571, 591], "en": [79, 571, 572, 591, 768], "wikipedia": [79, 571, 572, 591], "wiki": [79, 571, 572, 591], "stochastic_gradient_desc": [79, 571, 572, 591], "01099": [79, 572], "01003": [79, 572, 591], "01015": [79, 572, 591], "99936122": [79, 572, 591], "99936116": [79, 572, 591], "99936128": [79, 572, 591], "99936104": [79, 572, 591], "w_new": [79, 575, 591], "708": [79, 577, 591], "445": [79, 577, 591], "6e": [79, 577, 591], "00036": [79, 577, 591], "00049": [79, 577, 591], "layerwis": [79, 578, 591], "_containerwithimag": [80, 97], "_containerwithlay": [81, 97], "_static_conv1d": 81, "static_conv1d": 81, "_static_conv1d_transpos": 81, "static_conv1d_transpos": 81, "112": [81, 593, 603, 607, 636, 713], "_static_conv2d": 81, "ey": [81, 585, 592, 608, 614, 785, 792], "static_conv2d": 81, "_static_conv2d_transpos": 81, "static_conv2d_transpos": 81, "_static_conv3d": 81, "fdfh": [81, 610], "static_conv3d": 81, "_static_conv3d_transpos": 81, "static_conv3d_transpos": 81, "_static_depthwise_conv2d": 81, "inp": [81, 592, 614], "static_depthwise_conv2d": 81, "_static_dropout": 81, "static_dropout": 81, "_static_dropout1d": 81, "static_dropout1d": 81, "_static_dropout2d": 81, "_static_dropout3d": 81, "_static_linear": 81, "278": [81, 592, 615, 616], "static_linear": 81, "195": 81, "_static_lstm_upd": 81, "_static_multi_head_attent": 81, "_static_reduce_window": 81, "_static_scaled_dot_product_attent": 81, "static_scaled_dot_product_attent": 81, "39999962": [81, 592, 615, 616], "19999695": [81, 616], "11600018": [81, 616], "88399887": [81, 616], "196": [81, 592, 616], "306": [81, 592, 616], "19999981": [81, 592, 615, 619], "59249449": [81, 592, 619], "68226194": [81, 592, 619], "4000001": [81, 592, 615, 619], "19603825": [81, 592, 619], "9960382": [81, 592, 619], "26894283": [81, 592, 619], "40236187": [81, 592, 619], "39999437": [81, 592, 619], "59999037": [81, 592, 619], "35046196": [81, 592, 619], "54282808": [81, 592, 619], "39989519": [81, 592, 619], "5998764": [81, 592, 619], "_containerwithlinearalgebra": [82, 97], "_static_choleski": 82, "static_choleski": 82, "577": [82, 593, 620], "707": [82, 593, 620], "static_rol": [82, 84], "_static_cross": 82, "static_cross": 82, "_static_det": 82, "_static_diag": 82, "_static_diagon": 82, "static_diagon": 82, "_static_eigh": 82, "_static_eigvalsh": 82, "static_eigvalsh": 82, "51572949": [82, 593, 627], "17091519": [82, 593, 627], "3448143": [82, 593, 627], "88178420e": [82, 593, 627], "35898387e": [82, 593, 627], "46410179e": [82, 593, 627], "_static_inn": 82, "static_inn": 82, "_static_inv": 82, "static_inv": 82, "_static_matmul": 82, "matul": 82, "static_matmul": 82, "_static_matrix_norm": 82, "deimens": 82, "static_matrix_norm": 82, "_static_matrix_pow": 82, "_static_matrix_rank": 82, "static_matrix_rank": 82, "_static_matrix_transpos": 82, "static_matrix_transpos": 82, "_static_out": 82, "n1": [82, 139, 585], "n2": [82, 139, 585], "static_out": [82, 636], "_static_pinv": 82, "static_pinv": 82, "0426": 82, "0964": 82, "0605": 82, "1368": 82, "_static_qr": 82, "_static_slogdet": 82, "static_slogdet": 82, "6931472": 82, "0986123": 82, "_static_solv": 82, "_static_svd": 82, "static_svd": 82, "au": 82, "aS": 82, "avh": 82, "bu": [82, 752], "bvh": 82, "_static_svdv": 82, "_static_tensordot": 82, "_static_tensorsolv": 82, "_static_trac": 82, "static_trac": 82, "_static_vand": 82, "static_vand": 82, "343": [82, 282, 588, 646], "729": [82, 646, 791], "_static_vecdot": 82, "_static_vector_norm": 82, "static_vector_norm": 82, "77359247": [82, 648], "_static_vector_to_skew_symmetric_matrix": 82, "09861231": [82, 593, 639], "3475602": [82, 641], "93765765": [82, 641], "58776021": [82, 641], "10416126": [82, 641], "80644298": [82, 641], "87024701": [82, 641], "48127627": [82, 641], "79101127": [82, 641], "98288572": [82, 641], "68917423": [82, 641], "_containerwithloss": [83, 97], "_static_binary_cross_entropi": 83, "static_binary_cross_entropi": 83, "511": [83, 594, 650, 652], "_static_cross_entropi": 83, "static_cross_entropi": 83, "20397282": 83, "83258148": 83, "60943794": [83, 593, 639], "_static_sparse_cross_entropi": 83, "static_sparse_cross_entropi": 83, "5108256": [83, 651], "609438": [83, 651], "_containerwithmanipul": [84, 97], "_static_clip": 84, "static_clip": 84, "_static_concat": 84, "_static_constant_pad": 84, "static_constant_pad": 84, "_static_expand_dim": 84, "static_expand_dim": 84, "container_axi": [84, 595, 656], "_static_flip": 84, "static_flip": 84, "_static_permute_dim": 84, "static_permute_dim": 84, "_static_repeat": 84, "static_repeat": 84, "_static_reshap": 84, "static_reshap": 84, "_static_rol": 84, "positivclip": 84, "_static_split": 84, "static_split": 84, "_static_squeez": 84, "static_squeez": 84, "_static_stack": 84, "leavv": 84, "static_stack": 84, "_static_swapax": 84, "_static_til": 84, "static_til": 84, "_static_unstack": 84, "static_unstack": 84, "_static_zero_pad": 84, "repreat": [84, 659], "_containerwithnorm": [85, 97], "34198591": [85, 598, 691], "04274819": [85, 598, 691], "29923761": [85, 598, 691], "24053511": [85, 598, 691], "62221265": [85, 691], "20277636": [85, 691], "41943574": [85, 691], "83710337": [85, 691], "_containerwithrandom": [86, 97], "_static_multinomi": 86, "_static_randint": 86, "static_randint": 86, "_static_random_norm": 86, "static_random_norm": 86, "651": 86, "_static_random_uniform": 86, "static_random_uniform": 86, "481": 86, "0999": 86, "_static_shuffl": 86, "static_shuffl": 86, "431": [86, 694], "274": [86, 694], "_containerwithsearch": [87, 97], "_static_argmax": 87, "static_argmax": 87, "_static_argmin": 87, "static_argmin": 87, "_static_argwher": 87, "static_argwher": 87, "_static_nonzero": 87, "_static_wher": 87, "static_wher": 87, "_containerwithset": [88, 97], "_static_unique_al": 88, "static_unique_al": 88, "_static_unique_count": 88, "static_unique_count": 88, "_static_unique_invers": 88, "static_unique_invers": 88, "_static_unique_valu": 88, "_containerwithsort": [89, 97], "_static_argsort": 89, "static_argsort": 89, "_static_searchsort": 89, "_static_sort": 89, "static_sort": 89, "static_msort": 89, "_containerwithstatist": [90, 97], "_static_cumprod": 90, "static_cumprod": 90, "_static_cumsum": 90, "static_cumsum": 90, "_static_prod": 90, "static_prod": 90, "11000001": [90, 717], "23100001": [90, 717], "30800003": [90, 603, 717], "_static_sum": 90, "_static_var": 90, "static_var": 90, "12666667": [90, 603, 720], "11555555": [90, 603, 720], "rtype": [90, 713, 743], "respectv": [90, 718], "81649649": [90, 718], "94280904": [90, 718], "509902": [90, 603, 718], "2472192": [90, 718], "44948983": [90, 718], "41421354": [90, 718], "contian": [90, 720], "6666667": [90, 720], "_containerwithutil": [91, 97], "_static_al": 91, "static_al": 91, "_static_ani": 91, "static_ani": 91, "add_ivy_container_instance_method": 92, "containerexampl": 92, "factorized_tensor": [93, 94, 95], "factorizedtensor": [93, 94, 95], "matrix_or_tensor": 93, "to_tensor": [93, 94, 95], "to_unfold": [93, 94, 95], "to_vec": [93, 94, 95], "cp_tensor": 94, "cptensor": [94, 313, 349], "cp_copi": 94, "cp_flip_sign": 94, "s_i": 94, "normalisation_weight": 94, "normalised_factor": 94, "cp_lstsq_grad": 94, "return_loss": 94, "nabla": 94, "mathcal": 94, "mathbf": 94, "factor_matric": 94, "cp_gradient": 94, "quantiti": 94, "cp_mode_dot": 94, "keep_dim": [94, 95], "cp_multi_mode_dot": 94, "cp_n_param": 94, "tensor_shap": [94, 95], "n_param": [94, 95], "cp_norm": 94, "cp_to_tensor": 94, "khatria": 94, "rao": [94, 356, 407], "khatri": [94, 356, 407], "cp_normal": 94, "normalis": 94, "u_1": 94, "u_n": 94, "v_1": 94, "v_n": 94, "v_k": 94, "u_k": 94, "absorb": 94, "refold": [94, 358, 439, 450], "cp_to_unfold": 94, "ie": 94, "s_u_i": 94, "exploit": [94, 805], "khatri_rao": [94, 356], "cp_to_vec": 94, "ravel": [94, 785], "unfolding_dot_khatri_rao": 94, "mttkrp": 94, "validate_cp_rank": 94, "percent": 94, "validate_cp_tensor": 94, "tucker_tensor": 95, "tucker_copi": 95, "tucker_mode_dot": [95, 809], "tucker_n_param": 95, "tucker_norm": 95, "tucker_to_tensor": 95, "skip_factor": 95, "transpose_factor": 95, "tucker_to_unfold": 95, "tucker_to_vec": 95, "validate_tucker_rank": 95, "fixed_mod": 95, "validate_tucker_tensor": 95, "_bisection_root_find": 95, "fun": [95, 570, 590, 597, 683, 768], "max_it": 95, "__abs__": [96, 97], "__add__": [96, 97, 764, 767, 771, 772, 775, 780, 781, 789], "__eq__": [96, 97], "__ge__": [96, 97], "__gt__": [96, 97, 785], "__le__": [96, 97], "__lt__": [96, 97], "__ne__": [96, 97], "__pow__": [96, 97, 789], "69678056": 96, "59876156": 96, "82660675": 96, "__radd__": [96, 97, 771, 772, 780], "__rrshift__": [96, 97], "__rshift__": [96, 97], "__rsub__": [96, 97], "__sub__": [96, 97, 764, 767, 771, 775, 789], "__truediv__": [96, 97, 764, 767, 771], "__xor__": [96, 97], "referenc": [96, 773, 779], "resid": [96, 100, 595, 656, 780, 787, 791], "mt": [96, 789], "hopefulli": [96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 751, 752, 753, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794], "overview": [96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 727, 728, 730, 731, 733, 734, 735, 736, 766, 768, 782, 786, 794], "reach": [96, 97, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 684, 727, 728, 730, 731, 733, 734, 735, 736, 751, 752, 753, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 794, 801, 802], "eq": 97, "ge": 97, "le": 97, "ne": 97, "75979435": 97, "52153397": 97, "13532257": 97, "rshift": 97, "truediv": 97, "66666669": [97, 361, 465, 573, 591], "nested_arrai": [99, 100, 101, 766], "nestedarrai": 99, "nested_rank": [99, 100, 101], "inner_shap": [99, 100, 101], "nestedarraybas": [99, 100, 101], "classmethod": [99, 100], "from_row_length": 99, "row_length": 99, "from_row_split": 99, "row_split": 99, "ragged_map": 100, "ragged_multi_map": 100, "ragged_arrai": 100, "ragged_multi_map_in_funct": 100, "replace_ivy_arrai": 100, "unbind": 100, "nestedarrayelementwis": 101, "strictli": [106, 109, 112, 246, 582, 588, 775, 779], "behaviour": [106, 109, 273, 582, 588, 758, 761, 762, 763, 764, 767, 769, 770, 772, 773, 775, 776, 777, 779, 780, 782, 783, 789], "24000001": [106, 582], "703": [107, 582], "683": [107, 582], "408": [107, 582], "313": [107, 582], "437": [107, 582], "40337825": [108, 582], "56114835": [108, 582], "20788449": [108, 582], "231": [111, 582], "\u03b2": [112, 582], "66666667": [113, 367, 480, 582], "body_fn": [117, 118, 120, 584], "bodi": [117, 120, 584, 763, 782], "lst": [117, 584], "orelse_fn": [118, 584], "body1": [119, 584], "body2": [119, 584], "repeatedli": [120, 584, 597, 681, 768, 782], "ml_framework": [121, 585], "distanc": [121, 585], "adjac": [121, 585], "nestedsequ": [122, 123, 585], "typevar": [122, 123, 585], "supportsbufferprotocol": [122, 123, 585], "static_copy_arrai": [129, 585], "intdtyp": [132, 143, 148, 160, 171, 176, 183, 189, 300, 347, 585, 586], "interchang": [133, 585, 595, 665], "plu": [134, 585], "x00b": [134, 585], "x00d": [134, 585], "x00e": [134, 585], "66666663": [137, 585], "41588834": [138, 585], "7827941": [138, 585], "6227766": [138, 585], "23413252": [138, 585], "n3": [139, 585], "xv": [139, 585], "yv": [139, 585], "x_nativ": [140, 585, 779], "y_nativ": [140, 585], "z_nativ": [140, 585], "d_type": [142, 585], "col": [146, 315, 349, 585], "primari": [146, 165, 166, 198, 199, 315, 349, 365, 473, 507, 508, 585, 586, 587, 590, 759, 762, 765, 769, 777, 779, 780, 782, 785, 795, 797], "upward": [146, 315, 349, 585], "downward": [146, 315, 349, 585], "2xn": [146, 315, 349, 585], "subarrai": [146, 315, 349, 585], "incompat": [153, 586], "closest": [156, 235, 245, 246, 282, 292, 358, 451, 586, 588, 782, 785], "xtype": [156, 586], "ytype": [156, 586], "native_uint16": [156, 586], "complexdtyp": [157, 171, 180, 586], "set_default_complex_dtyp": [157, 186, 586], "4294": [157, 159, 586], "967346": [157, 159, 586], "set_default_dtyp": [158, 187, 586, 769, 776], "floatdtyp": [159, 182, 586], "set_default_float_dtyp": [159, 168, 180, 188, 586, 769], "int_dtyp": [160, 183, 586], "set_default_int_dtyp": [160, 168, 189, 586, 769], "4294967346": [160, 161, 586], "uint_dtyp": [161, 184, 586], "uint": [161, 176, 184, 190, 586, 769, 781], "uintdtyp": [161, 176, 184, 190, 586], "set_default_uint_dtyp": [161, 168, 190, 586], "native_bool": [163, 586], "followng": [164, 586], "ieee": [164, 222, 239, 244, 262, 272, 281, 286, 289, 583, 586, 588, 752], "754": [164, 222, 239, 244, 262, 272, 281, 286, 289, 583, 586, 588, 752], "smallest_norm": [164, 586], "bfloat16": [165, 586, 769, 780, 782, 783], "unsupport": [166, 199, 508, 586, 587, 590, 760, 780], "encapsul": [167, 586, 768], "314": [167, 279, 322, 352, 586, 588], "9223372036854775808": [167, 586], "9223372036854775807": [167, 586], "65535": [167, 586], "4294967295": [167, 586], "native_uint8": [169, 586], "hashabl": [173, 586], "type1": [177, 586], "type2": [177, 586], "array_api_promot": [177, 178, 586], "unexpect": [178, 246, 586, 588, 769], "default_complex_dtyp": [180, 586], "default_dtype_stack": [181, 187, 586], "unset_default_dtyp": [181, 586], "native_uint64": [181, 586], "default_float_dtyp": [182, 586, 769], "default_int_dtyp": [183, 189, 586, 769], "default_uint_dtyp": [184, 190, 586], "ret1": [185, 586], "ret2": [185, 586], "reset": [186, 187, 188, 189, 190, 216, 217, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 587, 590, 770], "default_complex_dtype_stack": [186, 586], "default_float_dtype_stack": [188, 586], "native_float16": [191, 586], "unmodifi": [193, 587, 765, 769], "clear": [194, 587, 749, 751, 752, 753, 759, 761, 765, 769, 770, 771, 780, 785, 787, 789, 802], "aliv": [200, 205, 207, 511, 531, 532, 587, 590, 770], "139740789224448": [200, 587], "physic": [203, 587], "process_specif": [206, 218, 587], "percentag": [206, 587], "ram": [206, 214, 218, 587], "alon": [206, 218, 587, 749, 755, 774, 782], "036902561555": [206, 587], "7024003467681645": [206, 587], "as_native_dev": [206, 587], "7095597456708771": [206, 587], "attr_onli": [207, 587], "soft_device_mod": [209, 217, 587], "chunk": [210, 211, 212, 587], "split_factor": [210, 587, 773], "max_chunk_s": [212, 587], "chunk_siz": [212, 587], "input_ax": [212, 587], "output_ax": [212, 587], "usag": [212, 587, 752, 769, 776, 779, 782, 787, 795, 805], "fed": [212, 587, 791], "fist": [212, 587], "gb": [214, 218, 587, 760], "66700032": [214, 587], "589934592": [214, 587], "set_default_devic": [216, 587, 770], "set_soft_device_mod": [217, 587, 770], "219563008": [218, 587], "902400346": [218, 587], "525205504": [218, 587], "na": [219, 588, 782], "princip": [220, 224, 226, 341, 352, 588], "domain": [220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 260, 261, 263, 284, 285, 286, 289, 290, 341, 352, 588, 772, 800, 802], "codomain": [220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 260, 261, 263, 284, 285, 286, 289, 290, 341, 352, 588, 772], "\u03c0": [220, 224, 226, 227, 583, 588], "3\u03c0": [220, 227, 588], "unspecifi": [220, 221, 225, 228, 237, 242, 244, 246, 277, 281, 285, 286, 290, 356, 403, 588, 593, 595, 625, 626, 664, 779], "\u03c0j": [221, 225, 228, 260, 262, 588], "3\u03c0j": [221, 260, 262, 588], "x1_i": [222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 588, 763], "2019": [222, 239, 244, 262, 272, 588, 802, 805], "overflow": [222, 239, 246, 588, 593, 603, 639, 719, 758, 769], "commut": [222, 588], "tabl": [222, 239, 272, 542, 564, 588, 590, 731, 769, 780, 784, 802], "dj": [222, 239, 272, 588], "bj": [222, 239, 272, 322, 352, 588], "invlov": [222, 588], "z1": [222, 588], "z2": [222, 588], "yj": [223, 588], "nanj": [225, 588], "809": [225, 588], "569": [225, 588], "733": [225, 588], "notat": [227, 588, 603, 713, 768], "denot": [227, 588, 733], "quadrant": [227, 588], "rai": [227, 588, 752], "bitwis": [229, 232, 234, 269, 588], "170": [233, 588], "243": [233, 588], "xor": [234, 269, 588], "654": [236, 588], "ci": [237, 242, 244, 285, 588, 763, 769, 774, 781, 782, 795], "368": [237, 588], "670": [237, 588], "202": [237, 588, 763], "548": [237, 588], "1490": [237, 588], "57079633": [238, 588], "14159265": [238, 588], "71238898": [238, 588], "28318531": [238, 588], "02617994": [238, 588], "87266463": [238, 588], "01919862": [238, 588], "03839725": [238, 588], "05759586": [238, 588], "07679449": [238, 588], "09599311": [238, 588], "11519173": [238, 588], "35081118": [238, 588], "88139129": [238, 588], "underflow": [239, 246, 588, 593, 639, 769], "textbook": [239, 272, 588], "frac": [239, 261, 263, 283, 285, 289, 355, 361, 382, 383, 387, 388, 460, 462, 588], "ac": [239, 272, 588, 743], "bd": [239, 272, 588], "bc": [239, 272, 588, 743], "versu": [239, 272, 277, 588], "riemann": [239, 272, 588], "sphere": [239, 272, 588], "c99": [239, 272, 588], "infinit": [239, 272, 286, 588], "unlik": [239, 272, 588, 752, 763, 768, 771, 807, 809], "698": [239, 588], "cut": [242, 244, 284, 285, 286, 289, 588, 751, 808], "08553692": [242, 588], "567": [242, 588], "00344786": [242, 588], "76297021": [242, 588], "197948": [242, 588], "53253174": [242, 588], "accur": [244, 262, 588, 593, 639, 777], "fdlibm": [244, 262, 588], "compliant": [244, 262, 267, 268, 588, 603, 714, 715, 716, 718], "potenti": [244, 262, 588, 749, 759, 760, 768, 769, 780, 786, 805], "632": [244, 588], "20e": [244, 588], "72e": [244, 588], "greatest": [245, 246, 249, 588], "pep": [246, 588, 775], "disambigu": [246, 588, 778], "former": [246, 588, 769, 772, 780], "latter": [246, 588, 763, 765, 769, 772, 780], "overload": [246, 588, 782], "led": [246, 588, 763, 804], "subtl": [246, 588, 769, 808], "ambigu": [246, 588], "semant": [246, 281, 588, 751, 787, 792, 803], "ill": [246, 588], "surpris": [246, 588, 795], "arrau": [252, 588], "log_": [261, 263, 588], "742": [262, 588], "hanl": [263, 588], "negat": [274, 322, 352, 588], "omplex": [275, 588], "52095687": [277, 588], "92457771": [277, 588], "49372482": [277, 588], "22738838": [277, 588], "156": [277, 588], "5877228": [277, 588], "189": [278, 588], "252": [278, 588], "315": [278, 588], "378": [278, 588], "1150": [278, 588], "2890": [278, 588], "172": [278, 588], "487": [278, 588, 592, 616], "344": [278, 588], "355j": [279, 322, 352, 588], "55j": [279, 322, 352, 588], "primarili": [281, 588, 759, 767, 802], "reason": [281, 290, 588, 752, 759, 761, 763, 764, 767, 768, 769, 771, 776, 779, 780, 782, 783, 785, 787, 789, 808], "counterpart": [282, 588, 767, 777], "deliber": [282, 588, 785], "imprecis": [282, 588], "5654": [282, 588], "034": [282, 588], "433": [282, 574, 576, 588, 591], "known": [283, 588, 730, 763, 768, 769, 780, 782], "signum": [283, 588], "operatornam": [283, 285, 588, 593, 626], "textrm": [283, 588], "932": [284, 588], "746": [284, 588], "657": [284, 498, 588, 590], "indistinguish": [286, 588], "convent": [286, 588, 593, 603, 631, 713, 751, 761, 765, 775, 783, 794, 808], "infti": [286, 588], "32455532": [286, 588], "89897949": [286, 588], "169": [286, 588], "analyt": [289, 588, 802, 804, 808], "pole": [289, 588], "546": [289, 588, 592, 616], "916": [289, 588, 594, 650], "996": [289, 588], "histor": [290, 588], "stem": [290, 588, 779], "older": [290, 588], "advis": [290, 588, 780], "462": [290, 588], "604": [290, 588], "984": [290, 588], "997": [290, 588], "0375": [292, 588], "032": [292, 588], "57258511": [294, 347], "69999999": [294, 347, 581, 591], "90928203": [294, 347], "98772264": [294, 347], "99591321": [294, 347], "99863964": [294, 347], "69880581": [294, 347], "18126924": [294, 347], "20141329": [296, 347], "40318608": [296, 347], "48683619": [296, 347], "46328247": [296, 347], "59813893": [296, 347], "43748799": [296, 347], "parametr": [297, 347, 763, 782, 802], "6705687": [299, 347], "52016652": [299, 347], "40560818": [299, 347], "45630932": [299, 347], "2689": [301, 347], "7310": [301, 347], "7615": [301, 347], "2784": [301, 347], "7168": [301, 347], "8708": [301, 347], "4374": [301, 347], "1379": [301, 347], "0089": [301, 347], "taper": [303, 306, 349], "summat": [303, 349, 603, 713, 743], "leakag": [303, 349], "slightli": [303, 349, 755, 767, 780, 782, 787, 791], "wors": [303, 349, 752], "y1": [304, 349], "0800": [305, 349], "3979": [305, 349], "9121": [305, 349], "5400": [305, 349], "han": [306, 349], "ith": [307, 349], "00726415": [308, 349], "9999736": [308, 349], "2773e": [309, 349], "0172e": [309, 349], "9294e": [309, 349], "4149": [309, 349], "9138": [309, 349], "5529": [309, 349], "multidimension": [311, 312, 349, 802], "orthogon": [313, 314, 349, 356, 403, 415, 418, 593, 625, 626], "normalise_factor": [313, 349], "cp": [313, 349, 761], "complementari": [319, 349, 800, 808], "38268346": [319, 349], "38268352": [319, 349], "8563191": [319, 349], "14943568": [319, 349], "arrrai": [322, 352], "position": [328, 352], "inexact": [328, 352], "triangl": [332, 352], "999999e": [333, 352], "65999985": [335, 352], "52000046": [335, 352], "1500001": [335, 352, 503, 590], "11259177": [336, 352], "3574118": [336, 352], "20097363": [336, 352], "suppli": [340, 352, 358, 446, 743, 764, 766, 782], "217234": [341, 352], "hurwitz": [344, 352], "custom_grad_func": [346, 354], "bind": [346, 354, 759, 778, 801, 802], "upstream": [346, 354, 760, 761, 763, 778], "sequence_length": 347, "ndenumer": 349, "ndindex": 349, "random_cp": 349, "random_tuck": 349, "bind_custom_gradient_funct": [354, 778], "area_interpol": 355, "division_overrid": [355, 373], "avg": [355, 373, 375, 396], "dimensio": [355, 374], "tranform": [355, 376, 386], "01823380e": [355, 376, 386], "15385818e": [355, 376, 386], "36371466e": [355, 376, 386], "38763905e": [355, 376, 386], "60722279e": [355, 376, 386], "80319249e": [355, 376, 386], "05617893e": [355, 376, 386], "21500000e": [355, 376, 386], "24000015e": [355, 376, 386], "90734863e": [355, 376, 386], "10000420e": [355, 376, 386], "15899994e": [355, 376, 386], "24000053e": [355, 376, 386], "81469727e": [355, 376, 386], "09999847e": [355, 376, 386], "4135742": [355, 376, 386], "6779785": [355, 376, 386], "3770599": [355, 376, 386], "8719864": [355, 376, 386], "72109985": [355, 376, 386], "52869415": [355, 376, 386], "79182434": [355, 376, 386], "72489166": [355, 376, 386], "container_n": [355, 376, 386], "container_typ": [355, 376, 386, 590], "container_norm": [355, 376, 386], "1580677": [355, 376], "89422607": [355, 376], "86190414": [355, 376], "00041008": [355, 376], "75149155": [355, 376], "97056389": [355, 376], "87819386": [355, 376], "89381361": [355, 376], "50000000e": [355, 376, 386], "22044605e": [355, 376, 386], "ed": [355, 378, 379, 380], "rest": [355, 358, 378, 379, 380, 432, 760, 766, 768, 782, 792, 804], "4d": [355, 379, 380], "5d": [355, 380, 731], "emb": [355, 381], "51285338": [355, 381], "87183261": [355, 381], "2308116": [355, 381], "02733949e": [355, 382], "00j": [355, 382], "49660576e": [355, 382], "68178638e": [355, 382], "01j": [355, 382, 387], "98912367e": [355, 382], "21802426e": [355, 382, 387], "04549134e": [355, 382, 387], "82842712e": [355, 382, 387], "86902654e": [355, 382, 387], "25501143e": [355, 382, 387], "32978028e": [355, 382, 387], "52068201e": [355, 382, 387], "71158374e": [355, 382, 387], "generate_einsum_equ": 355, "get_interpolate_kernel": 355, "27279224e": [355, 386], "44232273e": [355, 386], "70464332e": [355, 386], "73454881e": [355, 386], "00902849e": [355, 386], "10039906e": [355, 386], "07022366e": [355, 386], "69506073": [355, 386], "93914604": [355, 386], "88008881": [355, 386], "18951607": [355, 386], "57439613": [355, 386], "15318303e": [355, 387], "15148591e": [355, 387], "19j": [355, 387], "25000000e": [355, 387], "35378602e": [355, 387], "02j": [355, 387], "65404249e": [355, 387], "17611649e": [355, 387], "24320230e": [355, 387], "79344813e": [355, 387], "22374531e": [355, 387], "45929364e": [355, 387], "14208718e": [355, 387], "07177031e": [355, 387], "indexerror": [355, 388, 398, 595, 656, 744, 773], "interp": [355, 785], "xp": [355, 389, 763], "fp": [355, 389], "nd": [355, 390], "bicubic_tensorflow": [355, 390, 785], "max_unpool1d": 355, "unpool": [355, 394], "pool_result": [355, 394], "unpool_result": [355, 394], "nearest_interpol": 355, "window_shap": [355, 396], "pool_typ": [355, 396], "99038106j": [355, 398], "33012702": [355, 398], "23205081j": [355, 398], "33012702j": [355, 398], "superdiagon": [356, 401, 593, 623], "subdiagon": [356, 401, 593, 623], "eigendecomposit": [356, 403, 593, 625, 626], "qlq\u1d40": [356, 403, 593, 625, 626], "behav": [356, 403, 593, 625, 763, 773, 777, 779, 780, 781, 789, 803], "tridiagon": [356, 404], "38196602": [356, 404], "61803389": [356, 404], "35048741": [356, 404], "56710052": [356, 404], "06693714": [356, 404], "74234426": [356, 404], "56155282": [356, 404], "56155276": [356, 404], "82842714": [356, 404], "82842731": [356, 404], "necessarili": [356, 405, 764, 767], "random_st": [356, 406], "skip_matrix": [356, 407, 409], "khatri_rao_product": [356, 407], "kronecker_product": [356, 409], "n_column": [356, 409], "nnmf": [356, 410], "hoi": [356, 415, 418], "determinist": [356, 416], "borrow": [356, 416, 762], "scikit": [356, 416, 752], "extmath": [356, 416], "mae": [357, 420], "log_poisson_loss": 357, "compute_full_loss": [357, 421, 732], "likelihood": [357, 421], "assumpt": [357, 421], "minu": [357, 421], "factori": [357, 421], "stirl": [357, 421], "favor": [357, 421], "28402555": [357, 421], "03402555": [357, 421], "1573164": [357, 421], "3467": [357, 422], "0133": [357, 422], "0250": [357, 422], "0056": [357, 422], "0025": [357, 422], "0675": [357, 422], "hing": [357, 423], "6987": [357, 423], "1606": [357, 423], "3711": [357, 423], "4032": [357, 423], "6931": [357, 423], "whilst": [358, 426, 427, 428, 792, 797, 802], "ary3": [358, 428], "mod": [358, 430, 763], "tall": [358, 435], "horizot": [358, 442], "shortcut": [358, 446, 760], "linear_ramp": [358, 446], "reflect": [358, 446, 755, 761, 764, 779, 782], "ramp": [358, 446], "mirror": [358, 446, 759, 802], "padding_func": [358, 446], "iaxis_pad_width": [358, 446], "iaxi": [358, 446], "unalt": [358, 446], "put_along_axi": 358, "put": [358, 451, 749, 759, 782, 795, 808], "shrinkag": [358, 453], "elimin": [358, 457, 760], "consecut": [358, 457], "batch_mean": [361, 460, 462], "batch_var": [361, 460, 462], "running_vari": [361, 460, 462], "42857143": [361, 465], "5714286": [361, 465], "distrubut": [362, 466], "paramter": [362, 466], "multivari": [362, 468], "bayesian": [362, 468], "supposedli": [365, 472], "indirect": [365, 473], "secondari": [365, 473], "is_ivy_sparse_arrai": 366, "is_native_sparse_arrai": 366, "native_sparse_arrai": 366, "coo_indic": [366, 476], "crow_indic": [366, 476], "col_indic": [366, 476], "ccol_indic": [366, 476], "row_indic": [366, 476], "dense_shap": [366, 476], "native_sparse_array_to_indices_values_and_shap": 366, "nativesparsearrai": 366, "sparsearrai": 366, "linalg": [367, 480, 593, 639, 759, 779, 781], "aw": [367, 480, 752], "48447205": [367, 480], "c0": [367, 483], "ck": [367, 483], "i1": [367, 483], "c2": [367, 483], "nearest_jax": [367, 489], "compile_on_next_step": [493, 590, 732, 733, 735, 791], "recalcul": [496, 590], "my_sum": [496, 590], "val1": [496, 590], "val2": [496, 590], "cached_sum": [496, 590], "line_eq": [496, 590], "slp": [496, 590], "itc": [496, 590], "cached_line_eq": [496, 590], "0353": [497, 590], "424": [497, 590], "176": [497, 590], "339": [497, 590], "271": [497, 590], "391": [497, 590], "417": [498, 590], "583": [498, 590], "0667": [498, 590], "267": [498, 590], "131": [498, 590], "263": [498, 590], "394": [498, 590, 599, 697], "526": [498, 590], "788": [498, 590], "default_str": [501, 590], "46999979": [502, 590], "66000009": [502, 590], "93000001": [502, 590], "29000092": [502, 590], "33999991": [502, 590], "6400001": [502, 590], "96000004": [502, 590], "36000013": [502, 590], "51999998": [502, 590], "67000008": [502, 590], "30000001": [502, 590, 601, 704], "suppos": [502, 590, 769, 782], "960": [502, 590], "3600": [502, 590], "h1": [502, 590], "w1": [502, 590], "40499985": [503, 590], "61000061": [503, 590], "incas": [507, 508, 590], "max_depth": [514, 590, 597, 684], "seen_set": [514, 590], "local_set": [514, 590], "ivyexcept": [519, 551, 590, 744, 770, 773, 777, 779, 780, 783], "allow_dupl": [529, 590], "context": [530, 590, 760, 761, 765, 769, 770, 771], "fork": [530, 590, 754, 763, 768], "forkserv": [530, 590], "spawn": [530, 590], "consol": [532, 590, 761, 774, 782, 789], "garbag": [532, 590], "collector": [532, 590], "get_all_arrays_in_memori": [532, 590], "exept": [536, 590], "exception_trace_mod": [536, 559, 590, 784], "lenient": [537, 560, 590], "inplace_mod": [537, 560, 590], "break": [537, 590, 749, 765, 769, 775, 783, 795], "strict": [537, 560, 590], "infus": [538, 590], "nestable_mod": [541, 563, 590, 784], "effeci": [542, 564, 590, 784], "promtion": [542, 590], "precise_mod": [542, 564, 590, 784], "shape_array_mod": [544, 566, 590, 784], "show_func_wrapper_trace_mod": [545, 567, 590, 784], "tmp_dr": [546, 590], "tmp_dir": [546, 568, 590, 784], "my_tmp": [546, 590], "49999999999975": [548, 590], "5015015015010504": [548, 590], "000444502911705e": [548, 590], "9999999999995j": [548, 590], "00000262": [549, 590], "15605032": [549, 590], "01208451j": [549, 590], "00048": [549, 590], "1296": [549, 590], "00864": [549, 590], "2048": [549, 590], "isn": [551, 590, 761, 777, 779, 790, 795, 804], "possibli": [553, 590, 782, 795], "100000023841858": [553, 590], "200000047683716": [553, 590], "299999952316284": [553, 590], "400000095367432": [553, 590], "599999904632568": [553, 590], "dictionai": [557, 590], "hemant": [557, 590], "unset_shape_array_mod": [558, 590], "set_exception_trace_mod": [559, 590, 773], "set_inplace_mod": [560, 590], "set_min_bas": [561, 590], "set_min_denomin": [562, 590], "set_nestable_mod": [563, 590], "set_precise_mod": [564, 590], "set_queue_timeout": [565, 590], "set_shape_array_mod": [566, 590], "set_show_func_wrapper_trace_mod": [567, 590, 773], "set_tmp_dir": [568, 590], "my_dir": [568, 590], "451": [569, 590], "in_ax": [570, 590], "out_ax": [570, 590], "thereof": [570, 590], "summaris": [570, 590], "99999998": [571, 591], "09999998": [571, 591], "19999998": [571, 591], "00000001": [571, 591], "00300001": [571, 591], "00800001": [571, 591], "0125": [571, 591], "17294501": [571, 591], "15770318": [571, 591], "20863818": [571, 591], "90000075": [572, 591], "90000164": [572, 591], "9000032": [572, 591], "50000012e": [572, 591], "92558754": [572, 591], "92558694": [572, 591], "92558682": [572, 591], "92558861": [572, 591], "60000025e": [572, 591], "01024": [572, 591], "retain_grad": [573, 591], "func_ret": [573, 591, 778], "666666": [573, 591], "333332": [573, 591], "66666675": [573, 581, 591], "argnum": [574, 591], "933": [574, 576, 591], "jacobian": [576, 591, 795, 802], "jac_fn": [576, 591], "639": [577, 591], "361": [577, 591], "value_grad": [581, 591], "42333412": [581, 591], "5333333": [581, 591], "93333334": [581, 591], "43333334": [581, 591], "0666666": [581, 591], "softsign": 582, "718281828459045": 583, "euler": [583, 794], "141592653589793": 583, "cast_bool": 584, "cmp_i": 584, "cmp_isnot": 584, "for_loop": 584, "if_els": 584, "try_except": 584, "while_loop": 584, "asarray_handle_nest": 585, "asarray_infer_devic": 585, "asarray_infer_dtyp": 585, "asarray_inputs_to_native_shap": 585, "asarray_to_native_arrays_and_back": 585, "as_ivy_dtyp": [586, 780], "as_native_dtyp": 586, "check_float": 586, "closest_valid_dtyp": 586, "default_dtyp": [586, 769, 776], "dtype_bit": 586, "function_supported_dtyp": [586, 769, 782], "function_unsupported_dtyp": [586, 769], "infer_default_dtyp": 586, "invalid_dtyp": [586, 769], "is_hashable_dtyp": 586, "is_native_dtyp": 586, "promote_typ": [586, 769], "promote_types_of_input": [586, 769, 779], "type_promote_arrai": [586, 769], "unset_default_complex_dtyp": 586, "unset_default_float_dtyp": 586, "unset_default_int_dtyp": 586, "unset_default_uint_dtyp": 586, "valid_dtyp": 586, "defaultcomplexdtyp": 586, "defaultdtyp": 586, "defaultfloatdtyp": 586, "defaultintdtyp": 586, "defaultuintdtyp": 586, "as_ivy_dev": [587, 789], "clear_cached_mem_on_dev": 587, "dev_util": [587, 770], "function_supported_devic": 587, "function_unsupported_devic": 587, "get_all_ivy_arrays_on_dev": [587, 770], "handle_soft_device_vari": [587, 770], "num_cpu_cor": [587, 770], "num_gpu": [587, 770, 782], "num_ivy_arrays_on_dev": 587, "percent_used_mem_on_dev": 587, "print_all_ivy_arrays_on_dev": 587, "set_split_factor": [587, 773], "split_func_cal": 587, "total_mem_on_dev": [587, 770], "tpu_is_avail": 587, "unset_default_devic": [587, 770], "unset_soft_device_mod": [587, 770], "used_mem_on_dev": 587, "defaultdevic": [587, 770], "profil": 587, "save_dir": 587, "arg_info": 590, "arg_nam": 590, "cache_fn": [590, 776], "current_backend_str": [590, 782, 787, 789], "function_supported_devices_and_dtyp": 590, "function_unsupported_devices_and_dtyp": 590, "get_item": [590, 779], "get_referrers_recurs": 590, "inplace_arrays_support": 590, "inplace_variables_support": 590, "is_ivy_nested_arrai": 590, "isscalar": 590, "match_kwarg": 590, "num_arrays_in_memori": 590, "print_all_arrays_in_memori": 590, "set_item": 590, "to_ivy_shap": 590, "to_native_shap": 590, "try_else_non": 590, "unset_array_mod": [590, 784], "unset_exception_trace_mod": 590, "unset_inplace_mod": 590, "unset_min_bas": 590, "unset_min_denomin": 590, "unset_nestable_mod": 590, "unset_precise_mod": 590, "unset_queue_timeout": 590, "unset_show_func_wrapper_trace_mod": 590, "unset_tmp_dir": 590, "vmap": [590, 795, 802], "arraymod": 590, "precisemod": 590, "jac": 591, "value_and_grad": [591, 778], "feature_group_count": [592, 605, 612, 613], "oiw": [592, 605, 606, 612], "oihw": [592, 605, 608, 612], "oidhw": [592, 605, 609, 610, 612], "dhwio": [592, 605, 606, 609, 610, 612], "conv_general_dil": [592, 780], "conv_general_transpos": 592, "depthwis": [592, 614, 731], "overfit": [592, 615], "1428566": [592, 615], "49000001": [592, 615], "55599999": [592, 615], "21000004": [592, 615], "incom": [592, 616], "666": [592, 593, 616, 632], "4269": [592, 616], "911": [592, 616, 773], "157": [592, 616], "753": [592, 616], "545": [592, 599, 616, 695], "547": [592, 616, 770], "124": [592, 616], "852": [592, 616], "963": [592, 616], "98495483": [592, 616], "0293808": [592, 616], "0159359": [592, 616], "74752808": [592, 616], "20942307": [592, 616], "3205719": [592, 616], "long": [592, 617, 760, 761, 768, 769, 771, 773, 780, 787, 802], "unrol": [592, 617, 787, 790], "lstm": [592, 617, 731, 787, 802], "multi": [592, 593, 618, 621, 731, 771, 786, 795, 798, 800, 802, 806], "paper": [592, 618, 749, 753], "vaswani": [592, 618], "al": [592, 618], "num_attention_head": [592, 618], "key_dim": [592, 618, 731], "value_dim": [592, 618, 731], "query_dim": [592, 618], "measur": [592, 618, 731], "new_": [592, 618], "attention_weight": [592, 618], "attenion_weight": [592, 618], "out_feat_dim": [592, 618], "23333359": [592, 619], "03946018": [592, 619], "0280633": [592, 619], "29981947": [592, 619], "29981089": [592, 619], "06345534": [592, 619], "9634552": [592, 619], "19336844": [592, 619], "09336829": [592, 619], "axisa": [593, 621], "axisb": [593, 621], "axisc": [593, 621], "293": [593, 622], "46997": [593, 622], "45033181e": [593, 627], "02829754e": [593, 627], "54220343e": [593, 627], "12647155e": [593, 627], "38447177e": [593, 627], "56155300e": [593, 627], "26794919": [593, 627], "7320509": [593, 627], "0012": [593, 629], "00342": [593, 629], "000565": [593, 629], "0104": [593, 629], "000981": [593, 629], "00282": [593, 629], "000766": [593, 629], "0322": [593, 629], "00237": [593, 629], "000151": [593, 629], "00101": [593, 629], "00019": [593, 629], "0214": [593, 629], "00171": [593, 629], "0107": [593, 629], "0167": [593, 629], "0472": [593, 629], "0536": [593, 629], "0177": [593, 629], "000429": [593, 629], "00762": [593, 629], "lu_factor": 593, "pivot": [593, 630], "lu": [593, 630], "frobeniu": [593, 632], "nuclear": [593, 632], "induc": [593, 632], "ranl": [593, 632], "47722558": [593, 632], "776": [593, 632], "6000004": [593, 632], "118": [593, 633], "moor": [593, 637], "penros": [593, 637], "deteremin": [593, 639], "logsabsdet": [593, 639], "although": [593, 639, 764, 767, 780, 785, 800, 802], "subject": [593, 639], "solut": [593, 640, 749, 760, 761, 767, 769, 781, 782, 785, 800, 804], "ordin": [593, 640, 794], "usvh": [593, 641], "cetera": [593, 641], "86217213": [593, 642], "31816804": [593, 642], "615": [593, 642], "ss": [593, 642], "25994301": [593, 642], "16403675": [593, 642], "61529762": [593, 642], "51231241": [593, 642], "39777088": [593, 642], "15413129": [593, 642], "1029852": [593, 642], "01383495": [593, 642], "86647356": [593, 642], "7786541": [593, 642], "55970621": [593, 642], "16857576": [593, 642], "86412698": [593, 642], "37566757": [593, 642], "88477993": [593, 642], "95925522": [593, 642], "6444726": [593, 642], "54687881": [593, 642], "16134834": [593, 642], "35037804": [593, 642], "31025076": [593, 642], "35769391": [593, 642], "transposit": [593, 643], "success": [593, 603, 645, 717, 719, 752, 768], "0x": [593, 646], "Such": [593, 646, 776, 782], "progress": [593, 646, 760, 761, 792], "alexandr": [593, 646], "theophil": [593, 646], "9000001": [593, 648], "64158917": [593, 648], "skew": [593, 649], "6666193": [594, 650], "67164493e": [594, 650], "05471958e": [594, 650], "32684899e": [594, 650], "30496836e": [594, 650], "e501": [594, 650, 731], "05393649": [594, 650], "49992943": [594, 650], "83330965": [594, 650], "35667494": [594, 652], "79329094": [594, 652], "512926": [594, 652], "outsid": [595, 653, 664, 770, 776, 789, 807], "honor": [595, 660], "beyond": [595, 661, 772, 780, 808], "famili": [595, 664], "intxx": [595, 664], "floatxx": [595, 664], "construct": [595, 666, 731, 734, 735, 736, 787, 791, 792, 800, 802, 809], "rep": [595, 666], "fomaml_step": 596, "inner_cost_fn": [596, 669, 670, 671], "outer_cost_fn": [596, 669, 670], "inner_grad_step": [596, 669, 670, 671], "inner_learning_r": [596, 669, 670, 671], "inner_optimization_step": [596, 669, 670, 671], "inner_batch_fn": [596, 669, 670], "outer_batch_fn": [596, 669, 670], "average_across_step": [596, 669, 670], "inner_v": [596, 669, 670], "keep_inner_v": [596, 669, 670], "outer_v": [596, 669, 670], "keep_outer_v": [596, 669, 670], "return_inner_v": [596, 669, 670, 671], "num_task": [596, 669, 670, 671], "maml": [596, 669, 670], "0x7f05bb1409d0": [596, 669, 670, 671], "maml_step": 596, "vanilla": [596, 670, 791, 802], "recev": [596, 670], "reptile_step": 596, "cost_fn": [596, 671], "reptil": [596, 671], "_variabl": [596, 671], "batch_in": [596, 671], "4485182": [596, 671], "139": [596, 671], "9569855": [596, 671], "9880483": [596, 671], "01766968": [596, 671], "02197957": [596, 671], "02197981": [596, 671], "all_nested_indic": 597, "include_nest": [597, 672], "_index": [597, 672, 683], "_base": [597, 672, 682, 683, 779], "extra_nest_typ": [597, 672, 673, 682, 683, 684], "themselv": [597, 672, 767, 769, 770, 772, 776, 780, 791, 799, 808], "copy_nest": 597, "to_mut": [597, 673, 684], "deepli": [597, 673, 795, 802], "mutabl": [597, 673, 679, 680, 684, 689, 690, 765], "copied_nest": [597, 673], "1337": [597, 673, 684], "duplicate_array_index_chain": 597, "index_nest": [597, 776], "insert_into_nest_at_index": 597, "insert_into_nest_at_indic": 597, "onto": [597, 678, 684, 750, 751, 802], "special_squar": [597, 678], "6666666666666667": [597, 678], "special_pow": [597, 678], "linear_model": [597, 678], "map_nest_at_index": 597, "shallow": [597, 679, 680, 684, 689, 690], "_result": [597, 679, 689], "hh": [597, 679, 684], "map_nest_at_indic": 597, "ub": [597, 680], "tb": [597, 680], "multi_index_nest": 597, "nested_ani": 597, "check_nest": [597, 682, 683], "conditon": [597, 682, 683], "nested_argwher": 597, "stop_after_n_found": [597, 683], "nested_indic": [597, 683], "nested_map": [597, 770, 776], "_depth": [597, 684], "_tuple_check_fn": [597, 684], "_list_check_fn": [597, 684], "_dict_check_fn": [597, 684], "wherebi": [597, 684, 759, 799], "ah": [597, 684], "bh": [597, 684], "ch": [597, 684], "dh": [597, 684, 763], "eh": [597, 684], "gh": [597, 684, 760], "ih": [597, 684], "1338": [597, 684], "nested_multi_map": 597, "index_chain": [597, 685], "nest0": [597, 685], "ivy_arrai": [597, 685, 764, 780], "unappli": [597, 685], "prune_empti": 597, "prune_nest_at_index": 597, "prune_nest_at_indic": 597, "set_nest_at_index": 597, "set_nest_at_indic": 597, "xyz": [597, 690], "pqr": [597, 690], "mini": [598, 691, 731, 734], "uniformli": [599, 693, 695], "22346112": [599, 694], "0922": [599, 694], "49671414": [599, 694], "1382643": [599, 694], "64768857": [599, 694], "5230298": [599, 694], "23415337": [599, 694], "23413695": [599, 694], "9213753": [599, 694], "12818667": [599, 694], "799": [599, 694], "469": [599, 694], "287": [599, 694], "0366": [599, 694], "26431865": [599, 695], "475": [599, 695], "878": [599, 695], "861": [599, 695], "929": [599, 695], "789": [599, 695], "519": [599, 695], "0435": [599, 695], "381": [599, 695], "4608004": [599, 695], "8458502": [599, 695], "67270088": [599, 695], "31128597": [599, 695], "zeroel": [600, 701], "guarante": [601, 703, 705, 753, 764, 769, 779, 795], "aggreg": [601, 703, 768], "fourth": [601, 703], "1141": [601, 703], "8101": [601, 703], "9298": [601, 703], "8460": [601, 703], "2119": [601, 703], "3519": [601, 703], "6252": [601, 703], "4033": [601, 703], "7443": [601, 703], "2577": [601, 703], "3707": [601, 703], "0545": [601, 703], "3238": [601, 703], "5944": [601, 703], "0775": [601, 703], "4327": [601, 703], "62519997": [601, 703], "40329999": [601, 703], "59439999": [601, 703], "74430001": [601, 703], "81010002": [601, 703], "84600002": [601, 703], "92979997": [601, 703], "einstein": [603, 713, 743], "117": [603, 713], "sentinel": [603, 714, 716], "90000004": [603, 715], "intend": [603, 719, 730, 763, 775, 778, 800, 802, 806, 807], "07472222": [603, 720], "00666667": [603, 720], "08966666": [603, 720], "simplicit": [604, 721, 722], "geglu": 727, "leakyrelu": 727, "logsoftmax": 727, "from_flax_modul": 728, "native_modul": 728, "params_fx": 728, "rng_seed": 728, "constructor_arg": 728, "constructor_kwarg": 728, "instance_arg": 728, "instance_kwarg": 728, "flax": [728, 753, 792, 795, 802], "from_haiku_modul": 728, "params_hk": 728, "from_paddle_modul": 728, "paddl": [728, 740, 759, 760, 769], "from_torch_modul": 728, "dedic": [728, 775, 785, 789, 791], "native_module_class": 728, "modulehelp": [729, 733], "check_submod_ret": 729, "expected_submod_ret": [729, 733], "get_mod_kei": 729, "top_mod": 729, "explicit": [729, 760, 767, 769, 778, 779, 780, 787, 795, 802], "mod_depth": 729, "mod_height": 729, "mod_with_top_mod_key_chain": 729, "flatten_key_chain": 729, "iimedi": 729, "parent": [729, 759, 768, 789], "show_mod_in_top_mod": 729, "upper_depth": 729, "lower_depth": 729, "coverag": [729, 769, 782], "prompt": [729, 759, 761], "show_structur": 729, "this_repr": 729, "show_v_in_top_v": 729, "perspect": 729, "top_v": 729, "sub_mod": 729, "show_v": 729, "comopos": 729, "track_submod_call_ord": [729, 733], "track_submod_ret": [729, 733], "v_with_top_v_key_chain": 729, "create_vari": [730, 791], "var_shap": [730, 791], "fan_out": [730, 791], "fan_in": [730, 791], "rectangular": 730, "firstlayersiren": 730, "siren": 730, "distribt": 730, "glorotuniform": [730, 731, 791], "glorot": 730, "xavier": 730, "neuron": 730, "w_1x_1": 730, "w_2x_2": 730, "w_nx_n": 730, "w_i": 730, "vanish": 730, "explod": [730, 750, 751], "kaimingnorm": 730, "fan_mod": [730, 791], "kaim": 730, "he": 730, "negative_slop": 730, "fan": 730, "propog": 730, "fan_sum": [730, 791], "proport": 730, "Ones": 730, "randomnorm": 730, "stddev": 730, "w0": 730, "gain": [730, 761, 763, 786, 791, 802], "wlim": 730, "predefin": 730, "initialz": 730, "fan_avg": 730, "adaptiveavgpool1d": 731, "avgpool1d": 731, "implicit": [731, 767, 772, 780, 782, 787, 802], "avgpool2d": 731, "avgpool3d": 731, "filter_s": 731, "weight_initi": [731, 791], "bias_initi": [731, 791], "0x7f05bafd56c0": 731, "0x7f05bafd56f0": 731, "conv1dtranspos": 731, "0x7f05bafd5a80": 731, "0x7f05bafd5ab0": 731, "filter_shap": 731, "0x7f05bafd7be0": 731, "0x7f05bafd7bb0": 731, "0x7f05bafd73d0": 731, "0x7f05bafd7010": 731, "0x7f05bafd7730": 731, "0x7f05bafd7760": 731, "conv3dtranspos": 731, "0x7f05bafd6bf0": 731, "0x7f05bafd6bc0": 731, "depthwiseconv2d": 731, "num_channel": 731, "0x7f05bafd7430": 731, "0x7f05bafd6fe0": 731, "bernoul": 731, "num_embed": 731, "embedding_dim": 731, "padding_idx": 731, "lookup": 731, "num_embeddingss": 731, "whenev": [731, 761, 765, 768, 769, 773, 779, 782, 784, 790], "renorm": 731, "insensit": 731, "num_lay": 731, "return_sequ": 731, "return_st": 731, "0x7f05bafd6aa0": 731, "get_initial_st": 731, "0x7f05bafd7e20": 731, "0x7f05bafd7e80": 731, "maxpool1d": 731, "maxpool3d": 731, "multiheadattent": 731, "embed_dim": 731, "head_dim": 731, "dropout_r": 731, "use_proj_bia": 731, "attention_ax": 731, "build_mod": [731, 732, 733], "on_init": [731, 733], "parallel": [731, 766, 802, 806, 807], "binarycrossentropyloss": 732, "store_var": [732, 733], "fallback_to_non_compil": [732, 733, 735], "with_partial_v": [732, 733], "logpoissonloss": 732, "modulemeta": 733, "submod_depth": 733, "submods_to_track": 733, "varibl": 733, "temporarili": [733, 757, 763], "from_cal": 733, "built_": 733, "compile_kwarg": 733, "_unified_ivy_graph": 733, "_call": 733, "register_buff": 733, "var_nam": 733, "weights_path": 733, "randomness_factor": 733, "with_edge_label": 733, "with_arg_label": 733, "with_output_label": 733, "output_connected_onli": 733, "highlight_subgraph": 733, "num_featur": 734, "affin": 734, "track_running_stat": 734, "trail": 734, "layernorm": 734, "normalized_shap": 734, "elementwise_affin": 734, "set_stat": [735, 791], "init_on_first_step": 735, "ignore_miss": 735, "privat": [735, 780, 782], "_step": [735, 791], "stochast": [735, 802], "sub_modul": 736, "check_al": 737, "messag": [737, 744, 748, 752, 760, 761, 768, 771, 773, 774, 780, 787, 789], "check_all_or_any_fn": 737, "check_ani": 737, "check_dev_correct_format": 737, "check_dimens": 737, "check_elem_in_list": [737, 776, 779, 780], "elem": 737, "check_equ": [737, 780], "check_exist": 737, "check_fals": 737, "check_fill_value_and_dtype_are_compat": [737, 783], "check_gather_input_valid": 737, "check_gather_nd_input_valid": 737, "check_great": 737, "allow_equ": [737, 773], "check_inplace_sizes_valid": [737, 779], "check_isinst": 737, "allowed_typ": 737, "check_kernel_padding_s": 737, "padding_s": 737, "check_less": [737, 773], "check_one_way_broadcast": 737, "check_same_dtyp": 737, "check_shapes_broadcast": 737, "check_tru": 737, "check_unsorted_segment_min_valid_param": 737, "ast_help": 739, "importtransform": 739, "nodetransform": 739, "impersonate_import": 739, "tree": [739, 755, 769], "local_ivy_id": 739, "visit_import": 739, "visit_importfrom": 739, "ivyload": 739, "loader": [739, 749, 790, 795], "exec_modul": 739, "ivypathfind": 739, "metapathfind": 739, "find_spec": 739, "fullnam": 739, "contextmanag": 740, "choose_random_backend": 740, "convert_from_numpy_to_target_backend": 740, "variable_id": 740, "numpy_obj": 740, "convert_from_source_backend_to_numpi": 740, "current_backend": [740, 759, 773, 776, 781, 783, 787], "global_backend": 740, "fn_name_from_version_specific_fn_nam": 740, "prevent_access_loc": 740, "previous_backend": [740, 765], "unset": [740, 765, 787], "Or": [740, 749, 756, 779, 790], "set_backend_to_specific_vers": 740, "set_jax_backend": 740, "set_mxnet_backend": 740, "mxnet": [740, 752, 759, 760, 809], "mx": 740, "set_numpy_backend": 740, "set_paddle_backend": 740, "set_tensorflow_backend": 740, "set_torch_backend": 740, "unset_backend": [740, 765], "with_backend": 740, "sub_backend_handl": 741, "available_sub_backend": 741, "clear_sub_backend": 741, "find_available_sub_backend": 741, "sub_backends_loc": 741, "set_sub_backend": 741, "sub_backend_str": 741, "unset_sub_backend": 741, "dynamic_import": 742, "import_modul": [742, 787], "einsum_pars": 743, "convert_interleaved_input": 743, "interleav": 743, "convert_subscript": 743, "old_sub": 743, "symbol_map": 743, "subscript": 743, "oe": 743, "ellipsi": 743, "find_output_shap": 743, "find_output_str": 743, "canon": 743, "gen_unused_symbol": 743, "abd": 743, "get_symbol": 743, "letter": 743, "resort": 743, "unicod": 743, "charact": [743, 752, 780], "chr": 743, "surrog": 743, "\u0155": 743, "20000": 743, "\u4eac": 743, "has_valid_einsum_chars_onli": 743, "einsum_str": 743, "abaz": 743, "\u00f6ver": 743, "is_valid_einsum_char": 743, "\u01f5": 743, "legalise_einsum_expr": 743, "reproduct": 743, "pars": [743, 766, 771, 795], "intak": 743, "contract_path": 743, "parse_einsum_input": 743, "einsum_eqn": 743, "legalis": 743, "legalise_einsum_eqn": 743, "za": 743, "xza": 743, "xz": 743, "possibly_convert_to_numpi": 743, "myshap": 743, "__main__": 743, "0x10f850710": 743, "inplaceupdateexcept": 744, "include_backend": [744, 773], "invalidbackendexcept": 744, "ivyattributeerror": [744, 773], "attributeerror": [744, 773, 789], "ivybroadcastshapeerror": [744, 773], "ivydeviceerror": 744, "ivydtypepromotionerror": [744, 773], "ivyindexerror": [744, 773], "ivynotimplementedexcept": [744, 773], "notimplementederror": 744, "ivyvalueerror": [744, 773], "handle_except": [744, 775, 777], "add_array_spec": 745, "fn_array_spec": 745, "set_logging_mod": 746, "debug": [746, 760, 761, 767, 768, 778, 782, 785, 790, 802], "unset_logging_mod": 746, "print_stat": 747, "viz": 747, "snakeviz": 747, "bonu": 747, "cprofil": 747, "cprint": [748, 787], "awai": [749, 800, 802], "grow": [749, 802], "essenti": [749, 751, 752, 759, 765, 767, 770, 771, 776, 779, 780, 781, 808], "mainli": [749, 759, 762, 778, 780, 782, 788, 790, 797, 802], "handler": [749, 786, 788, 792, 797], "scene": [749, 750, 751, 762, 786, 788, 802], "facilit": 749, "mse_loss": 749, "jax_ms": 749, "tf_mse": 749, "np_mse": 749, "torch_ms": 749, "favorit": 749, "mechan": [749, 768, 793, 795], "robot": [749, 793], "reinforc": [749, 794], "gym": 749, "trainer": [749, 753, 793, 795, 809], "flexibl": [749, 767, 769, 775, 778, 783, 785, 802], "everyon": [749, 753, 754, 759, 760, 761, 795], "plan": [749, 794, 796], "interoper": [749, 752, 799, 800, 802, 805], "pull": [749, 753, 754, 755, 759, 760, 763, 771, 774, 783, 785, 795, 796], "sweat_smil": 749, "video": [749, 754, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 796, 800], "quit": [749, 757, 761, 764, 771, 772, 776, 777, 782, 785, 802, 808], "jax_fn": 749, "jax_x": 749, "torch_x": 749, "torch_fn": 749, "focus": [749, 783, 794, 800, 801, 802, 808, 809], "orient": [749, 794], "contributor": [749, 754, 757, 759, 760, 761, 780, 786, 802], "nuanc": 749, "background": [749, 760, 766, 802, 804], "contextualis": 749, "problem": [749, 752, 761, 763, 764, 765, 770, 780, 789, 798, 804, 808], "explos": [749, 750, 752], "adher": [749, 751, 752, 763, 769, 772, 775, 785, 787, 792, 798, 799, 808], "shorter": [749, 789], "ensp": 749, "customiz": [749, 766], "deepmind_perceiver_io": 749, "sm_framework": 749, "segmentation_model": 749, "sm": 749, "torch_sm": 749, "metric": [749, 795], "iou_scor": 749, "rax": 749, "torch_rax": 749, "poly1_softmax_loss": 749, "madmom": 749, "madmon": 749, "torch_madmom": 749, "freq": 749, "audio": 749, "hz2midi": 749, "torch_loss": 749, "maxpooling1d": 749, "pool_siz": 749, "tf_kornia": 749, "tf_rax": 749, "tf_madmom": 749, "tf_loss": 749, "hk_eff_encod": 749, "dummy_x": 749, "jax_sm": 749, "jax_madmom": 749, "jax_loss": 749, "np_kornia": 749, "np_sm": 749, "np_rax": 749, "np_loss": 749, "yourself": [749, 759, 761, 774, 782, 785, 794], "favourit": [749, 760], "hyperparam": 749, "believ": [749, 752, 761], "feedback": [749, 768], "appreci": 749, "amaz": 749, "journei": [749, 754], "ambiti": 749, "season": 749, "perfect": [749, 794], "idea": [749, 753, 755, 759, 783, 788, 794, 801], "fellow": 749, "twitter": 749, "sneak": 749, "peek": 749, "stai": [749, 768], "credit": 749, "accompani": 749, "lenton2021ivi": 749, "inter": 749, "author": [749, 759, 761, 800, 804], "lenton": 749, "daniel": 749, "pardo": 749, "fabio": 749, "falck": 749, "fabian": 749, "jame": 749, "stephen": 749, "clark": 749, "ronald": 749, "journal": 749, "arxiv": 749, "preprint": 749, "2102": 749, "02886": 749, "year": [749, 751, 753, 763, 795, 802], "huge": [750, 752, 768, 790, 802, 808], "collabor": [750, 751, 752], "consortium": [750, 752], "grown": 751, "especi": [751, 760, 765, 774, 802], "rapidli": 751, "wonder": [751, 753, 789], "evolv": [751, 802], "shareabl": 751, "hinder": [751, 775], "outdat": 751, "month": [751, 760], "rigor": [751, 782], "newest": 751, "softwar": [751, 752, 760, 761, 800, 805, 806, 807], "rapid": [751, 752, 760, 802], "prototyp": [751, 802], "vital": [751, 792], "signific": [751, 752, 784, 795, 802], "bottleneck": 751, "quickli": [751, 753, 760, 761, 768, 790, 791, 802, 809], "obsolet": [751, 753], "constantli": [751, 785], "invent": 751, "simultan": [751, 753], "modern": [751, 752, 778, 807], "scalabl": [751, 787, 807, 808], "univers": [751, 780], "languag": [751, 753, 780, 787, 797, 800, 803, 805, 806, 807, 808], "front": [751, 780, 786, 787, 790, 800, 802], "runner": 751, "littl": [751, 789, 804], "principl": [751, 800, 802, 805], "syntax": [751, 752, 769, 802], "unsurprisingli": [751, 771], "2006": 751, "cloth": 751, "central": [752, 759, 774, 785, 808], "forgiven": 752, "eyebrow": 752, "somehow": 752, "strong": [752, 795, 802], "industri": [752, 802, 804], "funni": 752, "comic": 752, "charger": 752, "instant": 752, "mandat": [752, 769, 779, 782, 783], "adopt": [752, 761, 764, 775, 785, 801, 802, 807], "despit": [752, 767, 769, 770, 781, 787, 799, 802], "unrel": [752, 761], "contrari": 752, "bumpi": 752, "road": 752, "allud": [752, 790], "technologi": [752, 800, 804], "bio": [752, 760], "pcie": 752, "motherboard": 752, "raid": 752, "virtual": [752, 755, 761, 780, 805, 806], "bluetooth": 752, "wireless": 752, "exchang": [752, 758, 798, 800], "btx": 752, "sata": 752, "host": [752, 756, 768, 795, 807], "tcp": 752, "ip": 752, "smtp": 752, "send": [752, 807], "gmail": [752, 768], "outlook": 752, "pop": [752, 760], "email": [752, 768], "live": [752, 753, 765, 766, 769, 798, 800], "aris": [752, 769, 774, 795], "substanti": [752, 761, 764, 769, 782, 802], "innov": 752, "growth": [752, 805], "necess": 752, "engag": [752, 754, 761], "regard": [752, 758, 767, 780, 781, 785], "2015": [752, 802], "matur": [752, 795, 802], "preced": [752, 791], "aros": 752, "effort": [752, 754, 759, 795, 798, 802, 808], "stage": [752, 754, 761, 762, 763, 766, 782, 802], "mission": [752, 804], "ourselv": [752, 808], "quansight": [752, 808], "compani": [752, 798], "scipi": [752, 759, 804, 809], "conda": [752, 760, 804], "apach": [752, 804, 808], "onnx": [752, 800, 808], "cupi": [752, 802, 809], "sympi": 752, "modin": 752, "spyder": 752, "octoml": [752, 808], "sponsor": 752, "lg": 752, "electron": 752, "shaw": 752, "intel": [752, 760, 800, 807], "pursuit": 752, "clearli": [752, 759, 761, 771, 781, 782, 806], "care": [752, 761, 770, 780, 785, 792], "gone": [752, 786], "excit": [752, 754, 762], "complianc": 752, "suit": [752, 760, 762, 763, 768, 782, 790, 794, 797, 802, 808], "motiv": [752, 789], "convinc": 752, "celebr": 752, "encourag": [752, 774, 794, 795], "perfectli": 753, "happi": [753, 760, 795], "abund": 753, "streamlin": [753, 805], "week": [753, 761], "awesom": 753, "love": 753, "slew": 753, "inevit": [753, 803], "erron": 753, "poor": 753, "confus": [753, 769, 773, 779, 785, 797], "hour": [753, 768], "spin": 753, "sake": 753, "few": [753, 758, 759, 761, 767, 769, 770, 775, 776, 778, 779, 781, 782, 785, 787, 788, 789, 790, 791, 793, 802, 804], "wouldn": 753, "frantic": 753, "port": 753, "lucid": 753, "honk": 753, "hasn": 753, "spend": [753, 802], "sonnet": 753, "statu": [753, 759, 768, 774], "quo": 753, "dopamin": 753, "ignit": 753, "catalyst": 753, "lightn": 753, "fastai": 753, "trax": [753, 792], "objax": [753, 792], "offer": [753, 780, 791, 802, 808, 809], "strongli": [754, 760, 780, 808, 809], "skill": [754, 804], "veteran": 754, "board": [754, 766], "mech": [755, 756], "grasp": [755, 780], "mutual": [755, 767, 776], "venv": 755, "ivy_dev": [755, 760, 761], "bat": [755, 760, 761], "mac": [755, 760, 761], "linux": [755, 760, 761, 805, 807], "ivy_robot": [755, 794], "docker": [755, 757, 758], "desktop": [755, 760], "pwd": [755, 756], "pycharm": [755, 757, 782], "vscode": [755, 760], "devcontain": [755, 760], "remot": [755, 760, 763, 774], "codespac": 755, "make_doc": 756, "sh": [756, 760, 761, 763, 768], "ssh": [756, 768], "make_docs_without_dock": [756, 766], "assist": 757, "navig": [757, 760, 761, 762], "runtimeerror": 757, "logaddexp2_cpu": 757, "falsifi": [757, 763, 782], "test_logaddexp2": 757, "backend_fw": [757, 781], "on_devic": [757, 781], "dtype_and_x": [757, 781, 782], "test_flag": [757, 781, 782], "functiontestflag": 757, "ground_truth_backend": [757, 781], "num_positional_arg": [757, 781, 782], "with_out": [757, 781, 782], "instance_method": [757, 782], "test_gradi": [757, 782], "test_compil": 757, "as_vari": [757, 781, 782], "fn_name": [757, 765, 781, 782], "reproduce_failur": [757, 763, 777, 782], "axicy2bkaamobaar2waaaacvaai": 757, "assertionerror": [757, 763, 773, 781, 782], "25830078125": 757, "258544921875": 757, "test_acosh": 757, "axicy2baabyqwqgiaabdaai": 757, "instabl": [757, 769], "41421356": 757, "41421356e": 757, "34078079e": 757, "154": 757, "test_ab": [757, 760, 782], "000j": 757, "154j": 757, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 757, "experiment": [757, 761, 769, 780, 783, 787, 802], "climb": 758, "steep": 758, "curv": 758, "realpython": 758, "pyn": 758, "stuck": [758, 759], "spell": 758, "sound": [758, 768, 786], "peopl": [758, 760, 761, 762, 802, 804], "frequent": [759, 761, 765, 802], "outlin": [759, 760, 761, 762, 767, 769, 772, 776, 779, 780, 782], "broad": [759, 804], "individu": [759, 761, 763, 765, 769, 776, 780, 802, 805, 808, 809], "hypothesi": [759, 761, 763, 768, 777], "aforement": 759, "arraywithelementwis": [759, 764, 789], "containerwithmanipul": 759, "thorough": [759, 772, 775, 782], "comment": [759, 760, 761, 763, 769, 774, 780, 785], "add_reformatting_checklist_": 759, "category_nam": [759, 769, 770, 772, 775, 776], "pr": [759, 761, 763, 774, 780, 781, 782], "autom": [759, 768, 774, 782, 797, 804], "bot": [759, 774], "markdown": [759, 766], "patient": [759, 760], "mark": [759, 761, 763, 782, 787], "checkbox": [759, 760], "proce": [759, 760], "elabor": 759, "struggl": 759, "assigne": 759, "status": 759, "refrain": 759, "mindspor": 759, "merg": [759, 761, 763, 768, 780, 802], "composition": 759, "pend": 759, "helpfulli": [759, 785, 800], "problemat": [759, 760], "unimpl": 759, "issue_link": 759, "alias": [759, 780, 781], "alias_nam": 759, "push": [759, 761, 763, 781, 782, 808], "liner": 759, "meanwhil": [759, 768], "reselect": 759, "placement": 759, "categoris": [759, 763, 780], "faithfulli": 759, "creation_routin": [759, 781], "indexing_routin": 759, "ma": 759, "manipulation_routin": 759, "mathematical_funct": [759, 780], "sorting_searching_count": 759, "ufunc": [759, 780], "matrix_and_vector_product": 759, "matrix_eigenvalu": 759, "norms_and_other_numb": 759, "solving_equations_and_inverting_matric": 759, "seem": [759, 760, 785, 791, 792, 795, 802], "namespac": [759, 769, 777, 780, 781, 783, 787, 792], "gleam": 759, "uncom": 759, "test_numpy_inn": 759, "ivy_test": [759, 760, 761, 763, 766, 768, 781], "test_ivi": [759, 760, 761, 766, 768, 781, 782], "test_frontend": [759, 768, 781], "unsur": [759, 782], "analyz": [759, 797], "relevant_submodul": 759, "strategi": [759, 781], "roadmap": [759, 768], "deem": [759, 780], "subtask": 759, "clearer": [759, 773, 781, 790], "backend_nam": [759, 765, 769, 770, 772, 775, 776, 777], "sometim": [759, 760, 761, 763, 769, 776, 780, 782, 785], "rare": [759, 770, 795, 807], "button": [759, 760, 761], "centr": 759, "predetermin": 759, "superset": [759, 762, 776, 779, 795], "reserv": 759, "submit": [759, 774], "your_usernam": 760, "your_fold": 760, "enter": [760, 761, 764, 769, 770, 775, 777], "sync": [760, 763], "nutshel": [760, 775], "hook": [760, 774], "lint": 760, "properli": [760, 762, 773, 774, 780, 782], "whatev": [760, 767, 795], "elig": 760, "student": 760, "licens": [760, 805], "remind": 760, "expir": 760, "profession": 760, "trial": 760, "jetbrain": 760, "bui": [760, 808], "paid": 760, "pace": 760, "person": [760, 761], "abil": [760, 785, 788, 795, 802], "perhap": [760, 789, 790, 791, 795, 808], "icon": [760, 761], "panel": 760, "palett": 760, "ctrl": [760, 761], "m1": 760, "optional_apple_silicon_1": 760, "optional_apple_silicon_2": 760, "builtin": [760, 789, 791], "cmd": 760, "virtualenv": 760, "tick": [760, 761, 768], "paddlepaddl": 760, "nz2": 760, "openssl": 760, "libssl1": 760, "1_1": 760, "1f": 760, "1ubuntu2": 760, "19_amd64": 760, "deb": 760, "dpkg": 760, "array_api_test": [760, 761, 763], "test_array_api": [760, 761, 763, 782], "mitig": [760, 808], "powershel": 760, "admin": 760, "menu": 760, "introspect": 760, "dialog": 760, "persist": 760, "caus": [760, 761, 763, 765, 767, 768, 769, 771, 779, 781, 782, 795], "earlier": [760, 761, 769, 783], "virtualis": 760, "dropdown": [760, 768], "dockerfil": 760, "ca": 760, "certif": 760, "gnupg": 760, "lsb": 760, "keyr": 760, "fssl": 760, "gpg": 760, "dearmor": 760, "arch": 760, "lsb_releas": 760, "null": 760, "ce": 760, "cli": 760, "containerd": 760, "plugin": 760, "systemctl": 760, "permiss": [760, 768], "press": [760, 761, 790], "successful": 760, "4a": 760, "socket": 760, "rwx": 760, "sock": 760, "pid": 760, "coupl": [760, 764, 789, 791, 802], "editor": 760, "pytest": [760, 761, 763, 768, 777, 782], "keyboard": 760, "screenshot": 760, "test_elementwis": 760, "bar": 760, "shell": [760, 761], "run_tests_cli": [760, 763], "run_ivy_core_test": 760, "run_ivy_nn_test": 760, "run_ivy_stateful_test": 760, "run_test": [760, 768], "test_depend": 760, "test_ivy_cor": 760, "test_ivy_nn": 760, "test_ivy_st": 760, "unix": 760, "test_": [760, 781], "test_funct": [760, 761, 768, 781, 782], "test_cor": [760, 761, 781], "offici": [760, 769, 787], "wish": [760, 780], "ivy_nn": 760, "ivy_st": 760, "header": [760, 761], "arrow": 760, "test_stat": 760, "test_submodule_nam": 760, "test_function_nam": 760, "debugg": 760, "studio": [760, 782], "afterward": [760, 790], "overlap": [760, 768, 783, 785, 803], "test_file_path": 760, "test_fn_nam": 760, "engin": [760, 802, 804, 805], "comma": 760, "postcreatecommand": 760, "post_create_command": 760, "poststartcommand": 760, "safe": [760, 780], "containerworkspacefold": 760, "reopen": 760, "test_fle_path": 760, "slash": 760, "computation": 760, "comfort": [760, 773], "isol": [760, 761, 803, 808], "container": 760, "intens": 760, "headach": 760, "arm": [760, 761], "vm": [760, 768], "azur": 760, "cloud": [760, 768, 794, 804], "longer": [760, 769, 779, 782, 802], "theme": [760, 766], "ipad": 760, "browser": [760, 766], "quota": 760, "requisit": 760, "pane": [760, 761, 768], "dockerfilegpu": 760, "ivv": 760, "multiv": 760, "multivers": [760, 783], "dockerfilemultivers": 760, "dockerhub": 760, "region": 760, "box": 760, "upto": [760, 761], "minut": [760, 768], "launch": 760, "kindli": 760, "guidelin": 760, "conatin": 760, "colour": 760, "chanc": 760, "troubleshoot": 760, "ever": 760, "flask": 760, "toolbar": [760, 761], "_array_modul": [760, 763], "refresh": 760, "workspac": 760, "pytestarg": 760, "unittesten": 760, "pytesten": 760, "autotestdiscoveronsaveen": 760, "conftest": 760, "tendenc": 761, "land": 761, "fly": [761, 802], "hard": [761, 789, 802], "internship": 761, "serv": [761, 764, 767, 775, 776, 780, 781, 782, 785, 786, 797, 800], "suspect": 761, "iii": 761, "reformat": [761, 774], "issue_numb": 761, "12345": 761, "clean": [761, 783, 787, 788, 790], "rememb": 761, "respond": 761, "dai": [761, 774], "freed": 761, "situat": [761, 768, 792], "unabl": [761, 785], "obvious": [761, 768], "qualiti": 761, "hypothet": 761, "frustrat": 761, "busi": 761, "inact": 761, "unfairli": 761, "investig": 761, "name_of_your_branch": 761, "date": [761, 763], "complic": [761, 781, 787], "merge_with_upstream": 761, "abort": 761, "tediou": [761, 771, 785], "stash": [761, 774], "reinstat": 761, "uncommit": 761, "unstag": [761, 774], "untrack": 761, "atlassian": 761, "wrote": 761, "blame": 761, "eg": 761, "grep": 761, "commit_id": 761, "handi": 761, "histori": 761, "toggl": 761, "highlight": [761, 768, 771, 780], "approv": 761, "someon": [761, 795], "hash": [761, 790], "cancel": 761, "speedup": 761, "unavail": 761, "tickbox": 761, "span": [761, 800, 808], "intent": [761, 779], "discourag": 761, "philosophi": 761, "valuabl": 761, "infrequ": 761, "earli": [761, 802], "wast": [761, 768], "spot": [761, 771, 776], "mistak": 761, "propos": [761, 780, 785, 802], "mountain": 761, "advoc": [761, 795], "session": [761, 802], "beauti": 761, "concern": [761, 762, 767, 769, 771, 779, 785, 786, 808], "undo": 761, "stress": 761, "nifti": 761, "reassur": 761, "local_path_to_ivi": 761, "subfold": [761, 781, 782, 783], "dep": 761, "fresh": 761, "arsen": 761, "exec": 761, "ivy_contain": 761, "test_imag": 761, "test_random_crop": 761, "test_creation_funct": 761, "test_arang": 761, "cursor": 761, "alt": 761, "blog": 761, "breakpoint": 761, "gutter": 761, "caret": 761, "f8": 761, "f9": 761, "Into": 761, "f7": 761, "smart": 761, "fragment": [761, 798, 800, 804], "wherein": [761, 776, 782], "failur": [761, 768, 781, 782], "weed": [762, 786], "tour": 762, "conjunct": 763, "establish": [763, 804], "popular": [763, 802], "sens": [763, 771, 780, 789], "unconnect": 763, "initialis": [763, 780, 782], "everytim": [763, 769], "strang": [763, 789], "thoroughli": 763, "test_linalg": [763, 781], "test_set_funct": 763, "test_signatur": 763, "excess": [763, 765, 771], "array_modul": 763, "vv": 763, "test_manipulation_funct": 763, "test_concat": [763, 782], "nb": 763, "liber": 763, "______________________": 763, "test_remaind": 763, "_______________________": 763, "test_operators_and_elementwise_funct": 763, "1264": 763, "1277": 763, "binary_param_assert_against_refimpl": 763, "ctx": 763, "620": 763, "binary_assert_against_refimpl": 763, "324": 763, "scalar_o": 763, "17304064": 763, "binaryparamcontext": 763, "axic42baaowcnp": 763, "rumwmabaear0": 763, "make_binary_param": 763, "numeric_dtyp": 763, "left_strat": 763, "left_sym": 763, "right_strat": 763, "right_sym": 763, "right_is_scalar": 763, "binary_param_assert_dtyp": 763, "binary_param_assert_shap": 763, "recreat": 763, "unexpectedli": 763, "discrep": [763, 781], "test_asarray_arrai": 763, "test_floor_divid": 763, "health": 763, "test_iop": 763, "__imod__": 763, "isequ": 763, "test_matrix_norm": 763, "alter": 763, "tweak": 763, "array_api_methods_to_test": 763, "test_trac": 763, "test_special_cas": 763, "__ipow__": 763, "is_integ": 763, "easier": [763, 764, 765, 769, 781, 783, 797, 802, 804], "revisit": [763, 775], "_data": [764, 779, 780, 789], "organiz": [764, 767, 780], "bear": [764, 767, 769, 780], "underpin": [764, 767, 787], "programmat": [764, 767, 803], "backup": [764, 766, 767], "accident": [764, 767, 780], "absent": [764, 767], "auto": [764, 766, 767, 774, 790], "__mul__": [764, 767, 771, 775, 785, 789], "throw": [764, 769, 770, 773, 789, 802], "imposs": 764, "inputs_to_native_arrai": [764, 776, 777], "outputs_to_ivy_arrai": [764, 769, 770, 775, 776, 777], "secondli": [764, 769], "dictat": [764, 771, 775, 779], "__ivy_array_function__": 764, "inspir": [764, 794], "__torch_function__": 764, "myarrai": 764, "handled_funct": 764, "notimpl": 764, "issubclass": 764, "four": [764, 769, 771, 775, 776, 782, 785, 790], "enough": [764, 768, 770, 782, 789, 790, 791], "ivy_funct": 764, "my_ab": 764, "my_arrai": 764, "implicit_backend": [765, 787], "__dict__": [765, 779, 787], "ivy_original_dict": [765, 787], "get_backend": [765, 776], "fallback": 765, "challeng": [765, 808], "scope": [765, 803, 807], "intermediari": 765, "set_dynamic_backend": 765, "unset_dynamic_backend": 765, "dynamic_backend_a": 765, "set_": 765, "unset_": 765, "technic": [765, 775, 779, 795, 802, 804], "setter": 765, "backend_handl": 765, "requires_grad": 765, "memory_format": 765, "preserve_format": 765, "weren": 765, "vast": [765, 769, 802], "minor": [765, 785, 795], "fn_name_v_1p12_and_abov": 765, "fn_name_v_1p01_to_1p1": 765, "heavili": [766, 777, 795], "characterist": 766, "conf": 766, "cleanup": 766, "readm": [766, 795], "maxdepth": 766, "caption": 766, "related_work": 766, "deep_div": 766, "faq": 766, "glossari": 766, "autosummari": 766, "top_functional_toc": 766, "restructuredtext": 766, "inlin": 766, "discov": [766, 769], "ivy_toctree_caption_map": 766, "stub": 766, "unfortun": [766, 774], "linker": 766, "foo": 766, "discussion_channel_map": 766, "1000043690254946374": 766, "1000043749088436315": 766, "seri": [766, 780, 782, 802, 804], "discussion_paragraph": 766, "discord_link": 766, "channel_link": 766, "gg": 766, "zvqdvbznqj": 766, "799879767196958751": 766, "channel_id": 766, "autoskippablemethod": 766, "skippable_method_attribut": 766, "__qualname__": 766, "autodoc": 766, "atribut": 766, "__doc__": 766, "autoivydata": 766, "containerwithelementwis": 767, "__repr__": 767, "__contains__": 767, "__getstate__": 767, "__setstate__": 767, "unpickl": 767, "num_dim": [767, 792], "enforc": [767, 789], "extern": [767, 775, 780, 782, 783], "lefthand": 767, "righthand": 767, "handle_nest": [767, 775, 776, 777, 787], "presenc": [767, 779], "absenc": [767, 775, 802], "implicitli": [767, 778, 782, 787], "log_pr": [767, 776, 779], "intuit": [767, 782, 790, 791, 798], "chronolog": 767, "concurr": [767, 768, 776, 802], "__list__": 767, "whatsoev": [767, 776, 797, 808], "children": 767, "shallowest": 767, "deepest": 767, "regularli": 768, "rollback": 768, "incorpor": [768, 781, 790, 802], "techniqu": 768, "triplet": 768, "test_torch": [768, 781], "test_tensor": [768, 781], "test_torch_instance_arctan_": 768, "12500": 768, "daili": 768, "shoot": 768, "impact": [768, 782, 791, 804], "_reduce_loss": [768, 776, 779], "test_nn": 768, "test_loss": 768, "test_binary_cross_entropy_with_logit": 768, "test_cross_entropi": 768, "test_binary_cross_entropi": 768, "test_sparse_cross_entropi": 768, "test_loss_funct": 768, "test_torch_binary_cross_entropi": 768, "test_torch_cross_entropi": 768, "binary_cross_entropy_with_logit": 768, "torch_binary_cross_entropi": 768, "torch_cross_entropi": 768, "magic": 768, "readthedoc": 768, "pedagog": 768, "f_1": 768, "t_1": 768, "t_3": 768, "t_7": 768, "t_": 768, "f_m": 768, "cyclic": 768, "intellig": [768, 782, 804], "tests_fil": 768, "file_nam": [768, 782, 783], "intersect": [768, 782, 794], "tests_lin": 768, "correspondingli": 768, "tests_to_run": 768, "determine_tests_lin": 768, "mongodb": 768, "databas": [768, 782], "secret": 768, "db": 768, "ssh_deploy_kei": 768, "suffic": [768, 777, 782], "massiv": 768, "constraint": [768, 769, 778], "yml": 768, "felicit": 768, "clone_map": 768, "home": 768, "deploy_kei": 768, "user_email": 768, "rashul": 768, "chutani": 768, "user_nam": 768, "target_branch": 768, "github_serv": 768, "deploy_key_fil": 768, "ssh_known_hosts_fil": 768, "known_host": 768, "keyscan": 768, "git_ssh_command": 768, "userknownhostsfil": 768, "methodologi": 768, "master1": 768, "restructur": 768, "_map": 768, "t_2": 768, "t_n": 768, "index_map": 768, "test_map": 768, "snowbal": 768, "recalibr": 768, "workflow_dispatch": 768, "schedul": [768, 795, 802, 809], "cron": 768, "saturdai": 768, "night": 768, "pm": 768, "gut": 768, "lesser": [768, 773], "lol": 768, "cater": 768, "master2": 768, "master32": 768, "synchron": 768, "runner2": 768, "corrupt": 768, "discard": 768, "decoupl": [768, 791], "150": 768, "cycl": [768, 782], "rashulchutani": 768, "yellow": 768, "queu": 768, "redirect": 768, "book": 768, "onrend": 768, "jo": 768, "ran": 768, "badg": 768, "clickabl": 768, "all_dtyp": 769, "all_numeric_dtyp": 769, "all_int_dtyp": 769, "all_float_dtyp": 769, "replic": [769, 778, 779, 780], "thirdli": 769, "native_float32": 769, "importantli": [769, 789, 792, 794], "arguabl": [769, 770, 780], "jaxarrai": [769, 770, 773, 775, 779, 783, 787], "_handle_0_dim_output": 769, "subtli": [769, 779], "promote_types_frontend_nam": 769, "promote_types_of_frontend_name_input": 769, "frontend_nam": 769, "upcast": 769, "nearli": [769, 775, 777, 802], "downcast": 769, "footprint": 769, "concret": 769, "compound": 769, "infer_dtyp": [769, 770, 775, 777], "settabl": [769, 770], "handle_out_argu": [769, 770, 775, 776, 777, 779, 787], "infer_devic": [769, 770, 775, 777], "deleg": [769, 809], "shape_to_tupl": 769, "with_supported_dtyp": 769, "with_unsupported_dtyp": [769, 780], "unment": 769, "backend_vers": 769, "_cast_for_unary_op": [769, 776, 779], "target_typ": 769, "unsupported_dtyp": 769, "supported_dtypes_and_devic": 769, "with_unsupported_device_and_dtyp": 769, "globals_getter_func": 769, "f1": 769, "f2": 769, "lack": [769, 779, 802, 809], "inconsist": [769, 773, 778], "84530": 769, "unwarr": 769, "risk": [769, 808], "needlessli": 769, "bloat": 769, "undergo": [769, 795], "supported_dtyp": 769, "unsupported_devic": 769, "supported_devic": 769, "downsid": 769, "undesir": 769, "accomplish": 769, "upcast_data_typ": 769, "downcast_data_typ": 769, "crosscast_data_typ": 769, "cast_data_typ": 769, "downcast_data_dtyp": 769, "tri": 769, "vice": 769, "versa": 769, "till": 769, "crosscast": 769, "exmp1": 769, "watch": [769, 780], "handle_numpy_arrays_in_specific_backend": [769, 775], "cate": 769, "understood": 769, "consumpt": [769, 806], "dual": 770, "categor": [770, 776, 780], "210": 770, "_handle_except": [770, 773], "1013": 770, "_handle_nest": [770, 773], "905": 770, "_handle_out_argu": [770, 773], "441": 770, "_inputs_to_native_arrai": [770, 773], "new_arg": [770, 773], "new_kwarg": [770, 773], "_outputs_to_ivy_arrai": [770, 773], "358": 770, "_handle_array_funct": [770, 773], "863": 770, "_handle_device_shift": 770, "handle_device_shift": [770, 777], "crucial": [770, 778], "device_shifting_dev": 770, "__enter__": 770, "__exit__": 770, "mostli": [770, 779, 782], "soft_devic": 770, "eight": [771, 786], "op_nam": 771, "__r": 771, "recap": [771, 791], "combinatori": 771, "okai": [771, 785, 787], "meant": [771, 779], "spec": [771, 772], "my_func": [771, 783], "some_flag": 771, "another_flag": 771, "jointli": 771, "5574077": 771, "1850398": 771, "5463025": 771, "8422884": 771, "91601413": 771, "9647598": 771, "3738229": 771, "1597457": 771, "0963247": 771, "9955841": 771, "3278579": 771, "asid": [771, 794], "14254655": 771, "1578213": 771, "380515": 771, "trivial": [771, 779], "exlud": 771, "failing_fn_nam": 771, "onlin": [771, 772], "minutest": 771, "suffici": [771, 780, 782], "fault": [771, 802], "contrast": [772, 775, 780, 808], "preview": 772, "needless": [772, 781], "renam": [772, 780], "judgment": 772, "operator_nam": 772, "succinct": 772, "docst": 772, "native_error": 773, "_combine_messag": 773, "truli": [773, 789], "wrong": [773, 774, 777, 780, 785], "198": 773, "392": 773, "_handle_array_like_without_promot": 773, "805": 773, "432": 773, "349": 773, "other_test": 773, "523": 773, "_handle_numpy_out": 773, "396": [773, 791], "_outputs_to_numpy_arrai": 773, "_inputs_to_ivy_arrays_np": 773, "ivy_arg": 773, "ivy_kwarg": 773, "453": 773, "_from_zero_dim_arrays_to_scalar": 773, "truth_value_test": 773, "visibl": 773, "unwieldi": 773, "awar": [773, 774], "squash": 773, "cleaner": [773, 790], "caught": [773, 774], "rethrow": 773, "_print_traceback_histori": 773, "error_stack": 773, "axiserror": 773, "polici": [773, 777, 782, 784, 794], "moreov": 773, "met": 773, "black": 774, "flake8": 774, "formatt": 774, "linter": 774, "autoflak": 774, "docformatt": 774, "pydocstyl": 774, "yaml": 774, "patch1687898304": 774, "8072": 774, "3516aed563": 774, "akshai": 774, "jain": 774, "gui": 774, "cryptic": 774, "garden": 774, "utc": 774, "didn": 774, "human": 774, "intervent": 774, "typo": 774, "ui": 774, "handle_array_like_without_promot": [775, 777], "to_native_arrays_and_back": [775, 777, 787], "handle_array_funct": [775, 777], "inputs_to_native_shap": [775, 777], "rational": [775, 779, 785], "__div__": [775, 785], "484": 775, "annot": 775, "brittl": 775, "freeli": 775, "inde": [775, 785, 795, 800], "original_typ": 775, "cumbersom": 775, "venn": 776, "diagram": [776, 808], "light": [776, 783, 795, 797, 803, 808], "maximis": 776, "array_arg": 776, "encompass": 776, "partial_mixed_handl": [776, 777, 785], "handle_partial_mixed_funct": [776, 777, 785], "fn_decor": 776, "mixed_backend_wrapp": [776, 779], "to_add": 776, "to_skip": 776, "inputs_to_ivy_arrai": [776, 777], "modif": [776, 802], "briefli": [776, 782, 790], "get_all_arrays_on_dev": 776, "outputs_to_ivy_shap": 777, "outputs_to_native_arrai": 777, "handle_view_index": [777, 779], "handle_view": [777, 779], "handle_rag": 777, "handle_backend_invalid": 777, "handle_nan": 777, "to_native_shapes_and_back": 777, "inter_func": 778, "custom_grad_fn": 778, "args1": 778, "eas": [778, 802], "captur": [778, 782, 792, 803], "program": [779, 799, 800, 802, 805, 806, 809], "speak": 779, "val_n": 779, "base_idx": 779, "_manipulation_stack": 779, "base_flat": 779, "_view_ref": 779, "_update_view": 779, "contigu": 779, "c_contigu": 779, "ascontiguousarrai": 779, "copyto": 779, "_is_vari": 779, "tensor_scatter_nd_upd": 779, "is_vari": 779, "_update_torch_view": 779, "predominantli": [779, 783, 794], "support_native_out": [779, 787], "_scalar_output_to_0d_arrai": 779, "_wrap_fn": 779, "dim0": 779, "dim1": 779, "res_floor": 779, "mul": [779, 789], "extent": [779, 780], "to_out_fn": 779, "add_wrapp": 779, "paradigm": [779, 795, 802], "expans": 779, "brief": [779, 782], "weak": 779, "_torch_bas": 779, "_torch_view_ref": 779, "_torch_manipul": 779, "weakli": 779, "adequ": 779, "exhaust": [779, 782, 799, 808], "tf_frontend": 780, "lax": [780, 781, 785, 792, 795], "fn_tree": [780, 781, 782], "torch_frontend": [780, 781], "numpy_frontend": 780, "jax_frontend": 780, "to_ivy_arrays_and_back": [780, 781], "fidel": 780, "algebra": [780, 800, 801, 802, 805, 809], "xla": [780, 795, 797, 802], "dynamic": 780, "mimic": 780, "arithmetic_oper": 780, "handle_numpy_out": 780, "handle_numpy_dtyp": 780, "handle_numpy_cast": 780, "from_zero_dim_arrays_to_scalar": 780, "_add": 780, "same_kind": 780, "subok": [780, 781, 785], "promote_types_of_numpy_input": 780, "underscor": 780, "unhandl": 780, "trigonometric_funct": 780, "_tan": 780, "check_tensorflow_cast": 780, "raw_op": [780, 781], "tackl": 780, "map_raw_ops_alia": 780, "output_typ": 780, "kwargs_to_upd": 780, "pointwise_op": 780, "sensibl": 780, "ahead": [780, 783, 802], "reduce_logsumexp": 780, "input_tensor": 780, "logsumexp": 780, "trick": 780, "max_input_tensor": 780, "meet": 780, "preferred_element_typ": 780, "finer": 780, "logicaland": 780, "np_frontend": 780, "_ivy_arrai": 780, "radd": 780, "_init_data": 780, "_process_str_data": 780, "_dtype": [780, 781, 789], "_shape": [780, 789], "govern": 780, "promote_types_of_": 780, "_input": 780, "promote_types_of_torch_input": [780, 781], "handle_numpy_casting_speci": 780, "new_fn": 780, "equiv": 780, "unsaf": 780, "array_type_test": 780, "_isfinit": 780, "organis": 780, "youtub": 780, "knowledg": 781, "handle_frontend_test": [781, 782], "handle_frontend_method": [781, 782], "test_frontend_funct": 781, "get_dtyp": [781, 782], "dtype_and_valu": [781, 782], "get_shap": [781, 782], "np_frontend_help": 781, "test_jax": 781, "test_lax": 781, "test_oper": 781, "available_dtyp": [781, 782], "test_with_out": [781, 782], "test_jax_tan": 781, "input_dtyp": [781, 782], "backend_to_test": 781, "test_numpi": 781, "test_mathematical_funct": 781, "test_trigonometric_funct": 781, "dtypes_values_cast": 781, "dtypes_values_casting_dtyp": 781, "arr_func": 781, "number_positional_arg": 781, "get_num_positional_args_ufunc": 781, "test_numpy_tan": 781, "handle_where_and_array_bool": 781, "test_tensorflow": 781, "test_math": 781, "test_tensorflow_tan": 781, "test_pointwise_op": 781, "test_torch_tan": 781, "_fill_valu": 781, "update_backend": 781, "test_glob": 781, "min_valu": [781, 782], "max_valu": [781, 782], "allow_non": [781, 782], "min_num_dim": [781, 782], "max_num_dim": [781, 782], "min_dim_s": [781, 782], "max_dim_s": 781, "test_jax_ful": 781, "test_from_shape_or_valu": 781, "_input_fill_and_dtyp": 781, "dtype_and_input": 781, "large_abs_safety_factor": [781, 782], "small_abs_safety_factor": 781, "safety_factor_scal": [781, 782], "dtype_to_cast": 781, "input_fill_dtyp": 781, "test_numpy_ful": 781, "test_raw_op": 781, "test_tensorflow_fil": 781, "test_creation_op": 781, "with_arrai": 781, "sampled_from": [781, 782], "test_torch_ful": 781, "test_valu": [781, 782], "add_nois": 781, "all_clos": 781, "_get_dtype_and_matrix": 781, "test_torch_qr": 781, "frontend_ret": 781, "frontend_q": 781, "frontend_r": 781, "assert_all_clos": 781, "ret_np": 781, "ret_from_gt_np": 781, "walkthrough": 781, "comparison_op": 781, "test_comparison_op": 781, "num_arrai": [781, 782], "allow_inf": [781, 782], "shared_dtyp": 781, "test_torch_great": 781, "all_alias": 781, "class_tre": 781, "init_tre": 781, "method_nam": 781, "test_frontend_method": 781, "init_input_dtyp": 781, "init_all_as_kwargs_np": 781, "intial": 781, "method_input_dtyp": 781, "method_all_as_kwargs_np": 781, "test_ndarrai": 781, "test_numpy_instance_add__": 781, "frontend_method_data": 781, "init_flag": [781, 782], "method_flag": [781, 782], "test_tensorflow_instance_add": 781, "method_tre": [781, 782], "1e04": 781, "allow_infin": 781, "test_torch_instance_add": 781, "atol_": 781, "_arrays_idx_n_dtyp": 781, "test_manipul": [781, 782], "surprisingli": 781, "closest_relevant_group": 781, "strive": [781, 782, 785, 795, 804], "fixtur": 782, "eleg": [782, 802], "unexplor": 782, "artifact": 782, "bespok": 782, "_array_or_typ": 782, "test_default_int_dtyp": 782, "clariti": [782, 785, 802], "print_hypothesis_exampl": 782, "searchstrategi": 782, "custom_strategi": 782, "randomis": 782, "simplist": 782, "intricaci": 782, "glanc": 782, "one_of": 782, "datum": 782, "pipe": 782, "array_or_scal": 782, "len_of_arrai": 782, "test_add": 782, "gradient_test": 782, "test_gpu_is_avail": 782, "handle_test": 782, "pretest": 782, "handle_method": 782, "as_variable_flag": 782, "min_siz": 782, "max_siz": 782, "native_array_flag": 782, "container_flag": 782, "test_instance_method": 782, "test_inplac": 782, "criterion": 782, "array_valu": 782, "valid_ax": 782, "craft": 782, "hoc": 782, "44758124e": 782, "11228": 782, "268": 782, "wherev": 782, "dtype_values_axi": 782, "9622": 782, "28136": 782, "6375": 782, "12720": 782, "21354": 782, "900e": 782, "955e": 782, "exclude_min": 782, "57384": 782, "25687": 782, "248": 782, "array_dtyp": 782, "array_bool": 782, "test_devic": 782, "array_shap": 782, "common_shap": 782, "test_lay": 782, "size_bound": 782, "reshape_shap": 782, "stand": 782, "some_sequ": 782, "allow_nan": 782, "allow_subnorm": 782, "get_bound": 782, "arrays_valu": 782, "36418": 782, "213": 782, "21716926": 782, "none_or_list_of_float": 782, "get_prob": 782, "103515625e": 782, "099609375": 782, "probabilist": 782, "get_axi": 782, "number_positional_argu": 782, "unreproduc": 782, "x_and_linear": 782, "mixed_fn_compo": 782, "is_torch_backend": 782, "x_shape": [782, 787], "weight_shap": 782, "bias_shap": 782, "ivy_np": 782, "valid_float_dtyp": 782, "test_demo": 782, "failing_test": 782, "traceback": 782, "shrink": 782, "prescrib": 782, "scratch": 782, "therebi": 782, "test_gelu": 782, "test_fil": 782, "phase": [782, 795, 802], "notabl": [782, 802], "newer": 782, "max_exampl": 782, "deadlin": 782, "weird": 782, "systemat": 782, "safeguard": 782, "inabl": 782, "test_result_typ": 782, "9090909090909091": 782, "judgement": 783, "some_namespac": 783, "some_backend": 783, "another_backend": 783, "refactor": 783, "ongo": 783, "_assert_fill_value_and_dtype_are_compat": 783, "_to_devic": 783, "pin": 783, "unpinn": 783, "culmin": 783, "unsett": 784, "array_significant_figur": 784, "array_decimal_valu": 784, "warning_level": 784, "nan_polici": 784, "stablest": 784, "answer": [785, 789, 795], "contradict": 785, "entail": 785, "sacrif": 785, "jacfwd": 785, "jacrev": 785, "banner": 785, "expens": 785, "incredibli": [785, 790, 795, 805], "price": 785, "pai": 785, "intrus": 785, "x_beta": 785, "equip": 785, "priorit": 785, "simplif": 785, "allevi": 785, "ineffici": [785, 795, 802], "fuse": 785, "hybrid": 785, "workaround": 785, "slip": 785, "radar": 785, "stumbl": 785, "fulfil": 786, "syntact": [787, 792], "power_seq": 787, "backend_stack": 787, "_determine_backend_from_arg": 787, "importlib": 787, "_backend_dict": 787, "x_flat": 787, "wi": 787, "wi_x": 787, "wii_x": 787, "wif_x": 787, "wig_x": 787, "wio_x": 787, "wh": 787, "ht": 787, "ct": 787, "hts_list": 787, "wii_xt": 787, "wif_xt": 787, "wig_xt": 787, "wio_xt": 787, "htm1": 787, "ctm1": 787, "wh_htm1": 787, "whi_htm1": 787, "whf_htm1": 787, "whg_htm1": 787, "who_htm1": 787, "ft": 787, "ot": 787, "reliabl": 787, "sacrific": 787, "hear": 787, "virtu": [787, 799], "pure_ivi": 787, "pure_torch": 787, "unclean": 787, "wx": 787, "temp": 787, "ivy_func": 787, "emphas": 787, "torchscript": [787, 797, 809], "example_input": 787, "primit": [788, 795, 800, 802], "upcom": 788, "hierarch": [788, 790, 791, 802], "arraywithactiv": 789, "arraywithcr": 789, "arraywithdatatyp": 789, "arraywithdevic": 789, "arraywithgener": 789, "arraywithgradi": 789, "arraywithimag": 789, "arraywithlay": 789, "arraywithlinearalgebra": 789, "arraywithloss": 789, "arraywithmanipul": 789, "arraywithnorm": 789, "arraywithrandom": 789, "arraywithsearch": 789, "arraywithset": 789, "arraywithsort": 789, "arraywithstatist": 789, "arraywithutil": 789, "_init": 789, "_size": 789, "_devic": 789, "_dev_str": 789, "_pre_repr": 789, "_post_repr": 789, "framework_str": 789, "pypep8nam": 789, "immut": 789, "claim": 789, "_native_wrapp": 789, "genuin": 789, "some_method": 789, "rewritten": 789, "compartment": 789, "newshap": 789, "new_shap": 789, "tidi": 789, "crystal": 789, "ton": 790, "ado": [790, 791], "arbitrarili": 790, "soup": 790, "walk": [790, 791], "cnt": 790, "3333335": 790, "delimit": 790, "autocomplet": 790, "midwai": 790, "agent": 790, "total_spe": 790, "total_height": 790, "total_width": 790, "ag": 790, "tot": 790, "total_": 790, "total_h": 790, "cnt0": 790, "cnt1": 790, "diff_0": 790, "diff_1": 790, "config0": 790, "config1": 790, "l0": 790, "decoder__l0": 790, "decoder__l1": 790, "encoder__l0": 790, "encoder__l1": 790, "l0__b": 790, "l0__w": 790, "l1__b": 790, "l1__w": 790, "printabl": 790, "obviou": [790, 802], "foresight": 790, "untidili": 790, "update_ag": 790, "normalize_img": 790, "img_max": 790, "reduce_max": 790, "img_min": 790, "reduce_min": 790, "img_rang": 790, "agent_posit": 790, "agent_veloc": 790, "agent_cam_front_rgb": 790, "agent_cam_front_depth": 790, "agent_cam_rear_rgb": 790, "agent_cam_rear_depth": 790, "agent_cam_lidar": 790, "camera": 790, "front_rgb": 790, "front_depth": 790, "rear_rgb": 790, "rear_depth": 790, "lidar": 790, "rgb": 790, "rear": 790, "veloc": 790, "cam": 790, "cam_max": 790, "cam_min": 790, "cam_rang": 790, "five": 790, "perman": 790, "thread": [790, 802], "straightforward": 790, "dataload": [790, 793], "_cnt": 790, "img_": 790, "_dataset_s": 790, "_batch_siz": 790, "_count": [790, 791], "__next__": 790, "img_fnam": 790, "loaded_img": 790, "batch_slic": 790, "0145": 790, "addbackward0": 790, "_create_vari": 791, "_input_channel": 791, "_output_channel": 791, "_w_shape": 791, "_b_shape": 791, "_with_bia": 791, "764": 791, "872": 791, "211": 791, "439": 791, "nightmar": 791, "overcom": 791, "v1": 791, "key0": 791, "linear3": 791, "v2": 791, "counter": 791, "_w_init": 791, "_b_init": 791, "misnom": 791, "saw": 791, "_beta1": 791, "_beta2": 791, "_epsilon": 791, "_mw": 791, "_vw": 791, "_first_pass": 791, "_should_compil": 791, "new_v": 791, "_lr": 791, "_inplac": 791, "_stop_gradi": 791, "sparse_funct": 792, "_linear": 792, "jax_graph": 792, "to_backend": 792, "thinli": 792, "to_haiku_modul": 792, "loss_fn_t": 792, "without_apply_rng": 792, "update_rul": 792, "tree_multimap": 792, "pose": 794, "quaternion": 794, "ivy_mech": 794, "target_facing_rotation_matrix": 794, "polar_to_cartesian_coord": 794, "warp": 794, "optic": 794, "voxel": 794, "ivy_vis": 794, "coords_to_voxel_grid": 794, "render_pixel_coord": 794, "radianc": 794, "nerf": 794, "trajectori": 794, "motion": 794, "mobil": [794, 802], "sample_spline_path": 794, "rigidmobil": 794, "sample_bodi": 794, "drone": 794, "sample_link": 794, "openai": 794, "swimmer": 794, "reward": 794, "supervis": 794, "door": [794, 795], "cartpol": 794, "mountain_car": 794, "pendulum": 794, "reacher": 794, "ture": 794, "ntm": 794, "egospher": 794, "esm": 794, "ivy_memori": 794, "egocentr": 794, "room": 794, "doubt": 795, "grate": 795, "probe": 795, "remark": 795, "lock": 795, "gold": 795, "dex": 795, "tricki": [795, 797], "predictor": 795, "tight": 795, "driver": 795, "dispatch": [795, 802, 805], "ast": 795, "autodiff": 795, "shine": 795, "merci": 795, "compet": [795, 802], "parallelis": 795, "spmd": 795, "mixtur": 795, "expert": 795, "sophist": 795, "depart": 795, "hundr": 795, "thousand": 795, "broadli": [795, 808], "supplementari": 795, "reusabl": [795, 800, 802], "fanci": [795, 802], "fusion": [795, 806], "lose": 795, "pmap": 795, "eventu": 795, "supplement": 795, "backdoor": 795, "callback": 795, "record": [795, 803], "somewhat": [795, 802], "outsourc": 795, "nail": 797, "scientist": 797, "correl": 797, "conceptu": [798, 803], "broken": [798, 802], "tracer": 798, "vendor": [798, 804], "complimentari": [798, 808], "acycl": [798, 803], "insert_numb": 799, "insert_t": 799, "scaffold": [800, 808], "heart": 800, "toolchain": [800, 805], "ir": [800, 803, 808], "assembli": [800, 807, 808], "idl": 800, "middl": 800, "emit": 800, "gnu": [800, 805], "broader": 800, "heterogen": 800, "aid": 800, "coprocessor": 800, "programm": [800, 807], "gate": 800, "onednn": 800, "sit": [800, 803, 808], "tandem": 800, "possess": 800, "khrono": [801, 807], "appl": 801, "coremltool": 801, "albeit": 801, "promin": 802, "abbrevi": 802, "laboratori": 802, "proprietari": [802, 806, 807], "mathwork": 802, "commerci": 802, "1984": 802, "toolbox": 802, "mupad": 802, "simulink": 802, "graphic": [802, 806, 807], "simul": 802, "million": [802, 805], "worldwid": 802, "scienc": [802, 804], "econom": 802, "2001": 802, "scientif": 802, "od": 802, "solver": 802, "cython": 802, "friendli": 802, "2002": 802, "lua": 802, "luajit": 802, "idiap": 802, "epfl": 802, "2005": 802, "numarrai": 802, "cpython": 802, "partli": 802, "2007": 802, "forest": 802, "boost": 802, "dbscan": 802, "inbuilt": 802, "esqu": 802, "aesara": 802, "datafram": 802, "2012": 802, "Its": 802, "polymorph": 802, "mpi": 802, "openmp": 802, "glue": 802, "jaot": 802, "nasa": 802, "cern": 802, "climat": 802, "allianc": 802, "influenti": 802, "2014": 802, "scala": 802, "ship": 802, "forgiv": 802, "decemb": 802, "announc": 802, "mainten": 802, "v7": 802, "meaning": 802, "2016": 802, "imper": 802, "amazon": 802, "traction": 802, "cognit": [802, 809], "toolkit": [802, 803, 809], "grade": 802, "realiz": 802, "dnn": 802, "rnn": 802, "backpropag": 802, "succumb": 802, "came": 802, "monitor": 802, "practition": [802, 806, 807, 808], "hobbyist": 802, "tremend": 802, "ecosystem": 802, "gear": 802, "batteri": 802, "zygot": 802, "jl": 802, "workload": 802, "daggerflux": 802, "frontier": 802, "hessian": 802, "2018": 802, "lightweight": [802, 809], "shortcom": 802, "barrier": 802, "inexperienc": 802, "underdevelop": 802, "fanat": 802, "ounc": 802, "infanc": 802, "emerg": 802, "nich": 802, "lite": 802, "enterpris": 802, "reinvent": [802, 804], "inertia": 802, "creator": [802, 804], "paszk": 802, "hi": 802, "safeti": 802, "bulk": 802, "haskel": 802, "dataflow": 803, "enclos": 803, "trace_modul": 803, "scriptfunct": 803, "scriptmodul": 803, "fake": 803, "proxi": 803, "site": 803, "graphmodul": 803, "travi": 804, "oliph": 804, "leader": 804, "cornerston": 804, "numba": 804, "numfocu": 804, "pydata": 804, "confer": 804, "consult": 804, "servic": 804, "expertis": 804, "devop": 804, "mlop": 804, "dashboard": 804, "startup": 804, "mlir": [804, 805, 808], "Their": 804, "held": 804, "privileg": 804, "presum": 804, "llvm": [804, 807], "founder": 804, "tvm": [804, 808], "sustain": 804, "empow": 804, "har": 804, "burden": 804, "benchmark": 804, "convention": 805, "precompil": 805, "executor": 805, "julia": [805, 808], "fsf": 805, "gpl": 805, "biggest": [805, 808], "conduct": 806, "throughput": 806, "autotun": 806, "gpgpu": 806, "classic": 807, "sycl": 807, "dpc": 807, "processor": 807, "maco": 807, "x86": 807, "oneapi": 807, "ia": 807, "aka": 807, "xeon": 807, "gen9": 807, "xe": 807, "arria": 807, "gx": 807, "fpga": 807, "lofti": 808, "ambit": 808, "realm": 808, "bedrock": 808, "flux": 808, "bite": 808, "chew": 808, "eagerpi": 808, "tensorli": 808, "thinc": 808, "neuropod": 808, "emploi": 808, "fx": 808, "retrain": 808, "closer": 808, "greatli": 808, "modular": 808, "anywher": 808, "theano": 809, "plaidml": 809, "partial_svd": 809, "excel": 809, "subsystem": 809}, "objects": {"ivy.Array": [[219, 0, 1, "", "abs"], [220, 0, 1, "", "acos"], [221, 0, 1, "", "acosh"], [571, 0, 1, "", "adam_step"], [572, 0, 1, "", "adam_update"], [369, 0, 1, "", "adaptive_avg_pool1d"], [370, 0, 1, "", "adaptive_avg_pool2d"], [371, 0, 1, "", "adaptive_max_pool2d"], [222, 0, 1, "", "add"], [399, 0, 1, "", "adjoint"], [721, 0, 1, "", "all"], [491, 0, 1, "", "all_equal"], [320, 0, 1, "", "allclose"], [223, 0, 1, "", "angle"], [722, 0, 1, "", "any"], [698, 0, 1, "", "argmax"], [699, 0, 1, "", "argmin"], [707, 0, 1, "", "argsort"], [700, 0, 1, "", "argwhere"], [494, 0, 1, "", "array_equal"], [424, 0, 1, "", "as_strided"], [123, 0, 1, "", "asarray"], [224, 0, 1, "", "asin"], [225, 0, 1, "", "asinh"], [495, 0, 1, "", "assert_supports_inplace"], [425, 0, 1, "", "associative_scan"], [151, 0, 1, "", "astype"], [226, 0, 1, "", "atan"], [227, 0, 1, "", "atan2"], [228, 0, 1, "", "atanh"], [426, 0, 1, "", "atleast_1d"], [427, 0, 1, "", "atleast_2d"], [428, 0, 1, "", "atleast_3d"], [373, 0, 1, "", "avg_pool1d"], [374, 0, 1, "", "avg_pool2d"], [375, 0, 1, "", "avg_pool3d"], [460, 0, 1, "", "batch_norm"], [466, 0, 1, "", "bernoulli"], [467, 0, 1, "", "beta"], [321, 0, 1, "", "binarizer"], [650, 0, 1, "", "binary_cross_entropy"], [478, 0, 1, "", "bincount"], [229, 0, 1, "", "bitwise_and"], [230, 0, 1, "", "bitwise_invert"], [231, 0, 1, "", "bitwise_left_shift"], [232, 0, 1, "", "bitwise_or"], [233, 0, 1, "", "bitwise_right_shift"], [234, 0, 1, "", "bitwise_xor"], [303, 0, 1, "", "blackman_window"], [152, 0, 1, "", "broadcast_arrays"], [153, 0, 1, "", "broadcast_to"], [154, 0, 1, "", "can_cast"], [235, 0, 1, "", "ceil"], [620, 0, 1, "", "cholesky"], [653, 0, 1, "", "clip"], [497, 0, 1, "", "clip_matrix_norm"], [498, 0, 1, "", "clip_vector_norm"], [654, 0, 1, "", "concat"], [431, 0, 1, "", "concat_from_sequence"], [400, 0, 1, "", "cond"], [322, 0, 1, "", "conj"], [655, 0, 1, "", "constant_pad"], [606, 0, 1, "", "conv1d"], [607, 0, 1, "", "conv1d_transpose"], [608, 0, 1, "", "conv2d"], [609, 0, 1, "", "conv2d_transpose"], [610, 0, 1, "", "conv3d"], [611, 0, 1, "", "conv3d_transpose"], [129, 0, 1, "", "copy_array"], [323, 0, 1, "", "copysign"], [479, 0, 1, "", "corrcoef"], [236, 0, 1, "", "cos"], [237, 0, 1, "", "cosh"], [324, 0, 1, "", "count_nonzero"], [480, 0, 1, "", "cov"], [621, 0, 1, "", "cross"], [651, 0, 1, "", "cross_entropy"], [481, 0, 1, "", "cummax"], [482, 0, 1, "", "cummin"], [711, 0, 1, "", "cumprod"], [712, 0, 1, "", "cumsum"], [376, 0, 1, "", "dct"], [501, 0, 1, "", "default"], [238, 0, 1, "", "deg2rad"], [614, 0, 1, "", "depthwise_conv2d"], [622, 0, 1, "", "det"], [196, 0, 1, "", "dev"], [377, 0, 1, "", "dft"], [623, 0, 1, "", "diag"], [401, 0, 1, "", "diagflat"], [624, 0, 1, "", "diagonal"], [325, 0, 1, "", "diff"], [326, 0, 1, "", "digamma"], [468, 0, 1, "", "dirichlet"], [239, 0, 1, "", "divide"], [402, 0, 1, "", "dot"], [615, 0, 1, "", "dropout"], [378, 0, 1, "", "dropout1d"], [379, 0, 1, "", "dropout2d"], [380, 0, 1, "", "dropout3d"], [432, 0, 1, "", "dsplit"], [433, 0, 1, "", "dstack"], [162, 0, 1, "", "dtype"], [625, 0, 1, "", "eig"], [626, 0, 1, "", "eigh"], [404, 0, 1, "", "eigh_tridiagonal"], [405, 0, 1, "", "eigvals"], [627, 0, 1, "", "eigvalsh"], [502, 0, 1, "", "einops_rearrange"], [503, 0, 1, "", "einops_reduce"], [504, 0, 1, "", "einops_repeat"], [713, 0, 1, "", "einsum"], [294, 0, 1, "", "elu"], [381, 0, 1, "", "embedding"], [131, 0, 1, "", "empty_like"], [240, 0, 1, "", "equal"], [241, 0, 1, "", "erf"], [505, 0, 1, "", "exists"], [242, 0, 1, "", "exp"], [243, 0, 1, "", "exp2"], [434, 0, 1, "", "expand"], [656, 0, 1, "", "expand_dims"], [244, 0, 1, "", "expm1"], [304, 0, 1, "", "eye_like"], [382, 0, 1, "", "fft"], [383, 0, 1, "", "fft2"], [435, 0, 1, "", "fill_diagonal"], [164, 0, 1, "", "finfo"], [327, 0, 1, "", "fix"], [436, 0, 1, "", "flatten"], [657, 0, 1, "", "flip"], [437, 0, 1, "", "fliplr"], [438, 0, 1, "", "flipud"], [328, 0, 1, "", "float_power"], [245, 0, 1, "", "floor"], [246, 0, 1, "", "floor_divide"], [329, 0, 1, "", "fmax"], [247, 0, 1, "", "fmin"], [248, 0, 1, "", "fmod"], [439, 0, 1, "", "fold"], [506, 0, 1, "", "fourier_encode"], [330, 0, 1, "", "frexp"], [133, 0, 1, "", "from_dlpack"], [136, 0, 1, "", "full_like"], [469, 0, 1, "", "gamma"], [509, 0, 1, "", "gather"], [510, 0, 1, "", "gather_nd"], [249, 0, 1, "", "gcd"], [104, 0, 1, "", "gelu"], [513, 0, 1, "", "get_num_dims"], [331, 0, 1, "", "gradient"], [575, 0, 1, "", "gradient_descent_update"], [250, 0, 1, "", "greater"], [251, 0, 1, "", "greater_equal"], [461, 0, 1, "", "group_norm"], [105, 0, 1, "", "hardswish"], [515, 0, 1, "", "has_nans"], [440, 0, 1, "", "heaviside"], [483, 0, 1, "", "histogram"], [441, 0, 1, "", "hsplit"], [442, 0, 1, "", "hstack"], [419, 0, 1, "", "huber_loss"], [332, 0, 1, "", "hypot"], [443, 0, 1, "", "i0"], [386, 0, 1, "", "idct"], [387, 0, 1, "", "ifft"], [388, 0, 1, "", "ifftn"], [484, 0, 1, "", "igamma"], [167, 0, 1, "", "iinfo"], [252, 0, 1, "", "imag"], [406, 0, 1, "", "initialize_tucker"], [628, 0, 1, "", "inner"], [517, 0, 1, "", "inplace_decrement"], [518, 0, 1, "", "inplace_increment"], [519, 0, 1, "", "inplace_update"], [462, 0, 1, "", "instance_norm"], [390, 0, 1, "", "interpolate"], [629, 0, 1, "", "inv"], [521, 0, 1, "", "is_array"], [170, 0, 1, "", "is_bool_dtype"], [172, 0, 1, "", "is_float_dtype"], [174, 0, 1, "", "is_int_dtype"], [522, 0, 1, "", "is_ivy_array"], [523, 0, 1, "", "is_ivy_container"], [525, 0, 1, "", "is_native_array"], [176, 0, 1, "", "is_uint_dtype"], [333, 0, 1, "", "isclose"], [253, 0, 1, "", "isfinite"], [526, 0, 1, "", "isin"], [254, 0, 1, "", "isinf"], [255, 0, 1, "", "isnan"], [256, 0, 1, "", "isreal"], [528, 0, 1, "", "itemsize"], [408, 0, 1, "", "kron"], [420, 0, 1, "", "l1_loss"], [463, 0, 1, "", "l1_normalize"], [464, 0, 1, "", "l2_normalize"], [577, 0, 1, "", "lamb_update"], [578, 0, 1, "", "lars_update"], [691, 0, 1, "", "layer_norm"], [257, 0, 1, "", "lcm"], [334, 0, 1, "", "ldexp"], [106, 0, 1, "", "leaky_relu"], [335, 0, 1, "", "lerp"], [258, 0, 1, "", "less"], [259, 0, 1, "", "less_equal"], [473, 0, 1, "", "lexsort"], [336, 0, 1, "", "lgamma"], [616, 0, 1, "", "linear"], [137, 0, 1, "", "linspace"], [260, 0, 1, "", "log"], [261, 0, 1, "", "log10"], [262, 0, 1, "", "log1p"], [263, 0, 1, "", "log2"], [107, 0, 1, "", "log_softmax"], [264, 0, 1, "", "logaddexp"], [265, 0, 1, "", "logaddexp2"], [266, 0, 1, "", "logical_and"], [267, 0, 1, "", "logical_not"], [268, 0, 1, "", "logical_or"], [269, 0, 1, "", "logical_xor"], [295, 0, 1, "", "logit"], [296, 0, 1, "", "logsigmoid"], [138, 0, 1, "", "logspace"], [465, 0, 1, "", "lp_normalize"], [617, 0, 1, "", "lstm_update"], [410, 0, 1, "", "make_svd_non_negative"], [631, 0, 1, "", "matmul"], [444, 0, 1, "", "matricize"], [411, 0, 1, "", "matrix_exp"], [632, 0, 1, "", "matrix_norm"], [633, 0, 1, "", "matrix_power"], [634, 0, 1, "", "matrix_rank"], [635, 0, 1, "", "matrix_transpose"], [714, 0, 1, "", "max"], [391, 0, 1, "", "max_pool1d"], [392, 0, 1, "", "max_pool2d"], [393, 0, 1, "", "max_pool3d"], [270, 0, 1, "", "maximum"], [715, 0, 1, "", "mean"], [485, 0, 1, "", "median"], [310, 0, 1, "", "mel_weight_matrix"], [139, 0, 1, "", "meshgrid"], [716, 0, 1, "", "min"], [271, 0, 1, "", "minimum"], [108, 0, 1, "", "mish"], [412, 0, 1, "", "mode_dot"], [337, 0, 1, "", "modf"], [445, 0, 1, "", "moveaxis"], [708, 0, 1, "", "msort"], [413, 0, 1, "", "multi_dot"], [618, 0, 1, "", "multi_head_attention"], [414, 0, 1, "", "multi_mode_dot"], [692, 0, 1, "", "multinomial"], [272, 0, 1, "", "multiply"], [273, 0, 1, "", "nan_to_num"], [486, 0, 1, "", "nanmean"], [487, 0, 1, "", "nanmedian"], [488, 0, 1, "", "nanprod"], [338, 0, 1, "", "nansum"], [140, 0, 1, "", "native_array"], [274, 0, 1, "", "negative"], [339, 0, 1, "", "nextafter"], [701, 0, 1, "", "nonzero"], [275, 0, 1, "", "not_equal"], [141, 0, 1, "", "one_hot"], [143, 0, 1, "", "ones_like"], [579, 0, 1, "", "optimizer_update"], [490, 0, 1, "", "optional_get_element"], [636, 0, 1, "", "outer"], [446, 0, 1, "", "pad"], [447, 0, 1, "", "partial_fold"], [448, 0, 1, "", "partial_tensor_to_vec"], [415, 0, 1, "", "partial_tucker"], [449, 0, 1, "", "partial_unfold"], [450, 0, 1, "", "partial_vec_to_tensor"], [658, 0, 1, "", "permute_dims"], [637, 0, 1, "", "pinv"], [470, 0, 1, "", "poisson"], [276, 0, 1, "", "positive"], [277, 0, 1, "", "pow"], [297, 0, 1, "", "prelu"], [717, 0, 1, "", "prod"], [638, 0, 1, "", "qr"], [489, 0, 1, "", "quantile"], [278, 0, 1, "", "rad2deg"], [693, 0, 1, "", "randint"], [694, 0, 1, "", "random_normal"], [695, 0, 1, "", "random_uniform"], [279, 0, 1, "", "real"], [280, 0, 1, "", "reciprocal"], [345, 0, 1, "", "reduce"], [397, 0, 1, "", "reduce_window"], [109, 0, 1, "", "relu"], [298, 0, 1, "", "relu6"], [281, 0, 1, "", "remainder"], [659, 0, 1, "", "repeat"], [660, 0, 1, "", "reshape"], [179, 0, 1, "", "result_type"], [398, 0, 1, "", "rfftn"], [661, 0, 1, "", "roll"], [452, 0, 1, "", "rot90"], [282, 0, 1, "", "round"], [619, 0, 1, "", "scaled_dot_product_attention"], [533, 0, 1, "", "scatter_flat"], [534, 0, 1, "", "scatter_nd"], [709, 0, 1, "", "searchsorted"], [299, 0, 1, "", "selu"], [547, 0, 1, "", "shape"], [697, 0, 1, "", "shuffle"], [110, 0, 1, "", "sigmoid"], [283, 0, 1, "", "sign"], [340, 0, 1, "", "signbit"], [301, 0, 1, "", "silu"], [284, 0, 1, "", "sin"], [341, 0, 1, "", "sinc"], [285, 0, 1, "", "sinh"], [639, 0, 1, "", "slogdet"], [422, 0, 1, "", "smooth_l1_loss"], [423, 0, 1, "", "soft_margin_loss"], [453, 0, 1, "", "soft_thresholding"], [111, 0, 1, "", "softmax"], [112, 0, 1, "", "softplus"], [640, 0, 1, "", "solve"], [710, 0, 1, "", "sort"], [652, 0, 1, "", "sparse_cross_entropy"], [342, 0, 1, "", "sparsify_tensor"], [662, 0, 1, "", "split"], [286, 0, 1, "", "sqrt"], [287, 0, 1, "", "square"], [663, 0, 1, "", "squeeze"], [548, 0, 1, "", "stable_divide"], [549, 0, 1, "", "stable_pow"], [664, 0, 1, "", "stack"], [718, 0, 1, "", "std"], [580, 0, 1, "", "stop_gradient"], [550, 0, 1, "", "strides"], [288, 0, 1, "", "subtract"], [719, 0, 1, "", "sum"], [551, 0, 1, "", "supports_inplace_updates"], [641, 0, 1, "", "svd"], [416, 0, 1, "", "svd_flip"], [642, 0, 1, "", "svdvals"], [665, 0, 1, "", "swapaxes"], [454, 0, 1, "", "take_along_axis"], [289, 0, 1, "", "tan"], [290, 0, 1, "", "tanh"], [643, 0, 1, "", "tensordot"], [644, 0, 1, "", "tensorsolve"], [302, 0, 1, "", "thresholded_relu"], [666, 0, 1, "", "tile"], [213, 0, 1, "", "to_device"], [553, 0, 1, "", "to_list"], [555, 0, 1, "", "to_numpy"], [556, 0, 1, "", "to_scalar"], [455, 0, 1, "", "top_k"], [645, 0, 1, "", "trace"], [291, 0, 1, "", "trapz"], [144, 0, 1, "", "tril"], [316, 0, 1, "", "trilu"], [145, 0, 1, "", "triu"], [292, 0, 1, "", "trunc"], [293, 0, 1, "", "trunc_divide"], [417, 0, 1, "", "truncated_svd"], [418, 0, 1, "", "tucker"], [456, 0, 1, "", "unfold"], [703, 0, 1, "", "unique_all"], [457, 0, 1, "", "unique_consecutive"], [704, 0, 1, "", "unique_counts"], [705, 0, 1, "", "unique_inverse"], [706, 0, 1, "", "unique_values"], [471, 0, 1, "", "unravel_index"], [317, 0, 1, "", "unsorted_segment_min"], [318, 0, 1, "", "unsorted_segment_sum"], [667, 0, 1, "", "unstack"], [569, 0, 1, "", "value_is_nan"], [646, 0, 1, "", "vander"], [720, 0, 1, "", "var"], [647, 0, 1, "", "vecdot"], [648, 0, 1, "", "vector_norm"], [649, 0, 1, "", "vector_to_skew_symmetric_matrix"], [458, 0, 1, "", "vsplit"], [459, 0, 1, "", "vstack"], [702, 0, 1, "", "where"], [343, 0, 1, "", "xlogy"], [668, 0, 1, "", "zero_pad"], [148, 0, 1, "", "zeros_like"], [344, 0, 1, "", "zeta"]], "ivy": [[590, 1, 1, "", "ArrayMode"], [586, 1, 1, "", "DefaultComplexDtype"], [587, 1, 1, "", "DefaultDevice"], [586, 1, 1, "", "DefaultDtype"], [586, 1, 1, "", "DefaultFloatDtype"], [586, 1, 1, "", "DefaultIntDtype"], [586, 1, 1, "", "DefaultUintDtype"], [366, 1, 1, "", "NativeSparseArray"], [585, 1, 1, "", "NestedSequence"], [590, 1, 1, "", "PreciseMode"], [587, 1, 1, "", "Profiler"], [366, 1, 1, "", "SparseArray"], [219, 2, 1, "", "abs"], [220, 2, 1, "", "acos"], [221, 2, 1, "", "acosh"], [591, 2, 1, "", "adam_step"], [591, 2, 1, "", "adam_update"], [369, 2, 1, "", "adaptive_avg_pool1d"], [370, 2, 1, "", "adaptive_avg_pool2d"], [371, 2, 1, "", "adaptive_max_pool2d"], [222, 2, 1, "", "add"], [356, 2, 1, "", "adjoint"], [604, 2, 1, "", "all"], [590, 2, 1, "", "all_equal"], [597, 2, 1, "", "all_nested_indices"], [352, 2, 1, "", "allclose"], [223, 2, 1, "", "angle"], [604, 2, 1, "", "any"], [585, 2, 1, "", "arange"], [372, 2, 1, "", "area_interpolate"], [590, 2, 1, "", "arg_info"], [590, 2, 1, "", "arg_names"], [600, 2, 1, "", "argmax"], [600, 2, 1, "", "argmin"], [602, 2, 1, "", "argsort"], [600, 2, 1, "", "argwhere"], [585, 2, 1, "", "array"], [590, 2, 1, "", "array_equal"], [192, 2, 1, "", "as_ivy_dev"], [149, 2, 1, "", "as_ivy_dtype"], [193, 2, 1, "", "as_native_dev"], [150, 2, 1, "", "as_native_dtype"], [358, 2, 1, "", "as_strided"], [585, 2, 1, "", "asarray"], [585, 2, 1, "", "asarray_handle_nestable"], [585, 2, 1, "", "asarray_infer_device"], [126, 2, 1, "", "asarray_infer_dtype"], [127, 2, 1, "", "asarray_inputs_to_native_shapes"], [128, 2, 1, "", "asarray_to_native_arrays_and_back"], [224, 2, 1, "", "asin"], [225, 2, 1, "", "asinh"], [590, 2, 1, "", "assert_supports_inplace"], [358, 2, 1, "", "associative_scan"], [151, 2, 1, "", "astype"], [226, 2, 1, "", "atan"], [227, 2, 1, "", "atan2"], [228, 2, 1, "", "atanh"], [358, 2, 1, "", "atleast_1d"], [358, 2, 1, "", "atleast_2d"], [358, 2, 1, "", "atleast_3d"], [373, 2, 1, "", "avg_pool1d"], [374, 2, 1, "", "avg_pool2d"], [375, 2, 1, "", "avg_pool3d"], [361, 2, 1, "", "batch_norm"], [362, 2, 1, "", "bernoulli"], [362, 2, 1, "", "beta"], [352, 2, 1, "", "binarizer"], [594, 2, 1, "", "binary_cross_entropy"], [367, 2, 1, "", "bincount"], [354, 2, 1, "", "bind_custom_gradient_function"], [229, 2, 1, "", "bitwise_and"], [230, 2, 1, "", "bitwise_invert"], [231, 2, 1, "", "bitwise_left_shift"], [232, 2, 1, "", "bitwise_or"], [233, 2, 1, "", "bitwise_right_shift"], [234, 2, 1, "", "bitwise_xor"], [349, 2, 1, "", "blackman_window"], [152, 2, 1, "", "broadcast_arrays"], [358, 2, 1, "", "broadcast_shapes"], [153, 2, 1, "", "broadcast_to"], [590, 2, 1, "", "cache_fn"], [154, 2, 1, "", "can_cast"], [584, 2, 1, "", "cast_bool"], [235, 2, 1, "", "ceil"], [155, 2, 1, "", "check_float"], [620, 2, 1, "", "cholesky"], [358, 2, 1, "", "choose"], [194, 2, 1, "", "clear_cached_mem_on_dev"], [595, 2, 1, "", "clip"], [590, 2, 1, "", "clip_matrix_norm"], [590, 2, 1, "", "clip_vector_norm"], [156, 2, 1, "", "closest_valid_dtype"], [584, 2, 1, "", "cmp_is"], [584, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [595, 2, 1, "", "concat"], [358, 2, 1, "", "concat_from_sequence"], [356, 2, 1, "", "cond"], [352, 2, 1, "", "conj"], [595, 2, 1, "", "constant_pad"], [590, 2, 1, "", "container_types"], [605, 2, 1, "", "conv"], [606, 2, 1, "", "conv1d"], [607, 2, 1, "", "conv1d_transpose"], [608, 2, 1, "", "conv2d"], [609, 2, 1, "", "conv2d_transpose"], [610, 2, 1, "", "conv3d"], [611, 2, 1, "", "conv3d_transpose"], [612, 2, 1, "", "conv_general_dilated"], [613, 2, 1, "", "conv_general_transpose"], [129, 2, 1, "", "copy_array"], [597, 2, 1, "", "copy_nest"], [352, 2, 1, "", "copysign"], [367, 2, 1, "", "corrcoef"], [236, 2, 1, "", "cos"], [237, 2, 1, "", "cosh"], [352, 2, 1, "", "count_nonzero"], [367, 2, 1, "", "cov"], [621, 2, 1, "", "cross"], [594, 2, 1, "", "cross_entropy"], [367, 2, 1, "", "cummax"], [367, 2, 1, "", "cummin"], [603, 2, 1, "", "cumprod"], [603, 2, 1, "", "cumsum"], [590, 2, 1, "", "current_backend_str"], [376, 2, 1, "", "dct"], [590, 2, 1, "", "default"], [157, 2, 1, "", "default_complex_dtype"], [195, 2, 1, "", "default_device"], [158, 2, 1, "", "default_dtype"], [159, 2, 1, "", "default_float_dtype"], [160, 2, 1, "", "default_int_dtype"], [161, 2, 1, "", "default_uint_dtype"], [238, 2, 1, "", "deg2rad"], [614, 2, 1, "", "depthwise_conv2d"], [622, 2, 1, "", "det"], [196, 2, 1, "", "dev"], [197, 2, 1, "", "dev_util"], [377, 2, 1, "", "dft"], [623, 2, 1, "", "diag"], [356, 2, 1, "", "diagflat"], [624, 2, 1, "", "diagonal"], [352, 2, 1, "", "diff"], [352, 2, 1, "", "digamma"], [362, 2, 1, "", "dirichlet"], [239, 2, 1, "", "divide"], [356, 2, 1, "", "dot"], [615, 2, 1, "", "dropout"], [355, 2, 1, "", "dropout1d"], [355, 2, 1, "", "dropout2d"], [355, 2, 1, "", "dropout3d"], [358, 2, 1, "", "dsplit"], [358, 2, 1, "", "dstack"], [162, 2, 1, "", "dtype"], [163, 2, 1, "", "dtype_bits"], [597, 2, 1, "", "duplicate_array_index_chains"], [583, 6, 1, "", "e"], [356, 2, 1, "", "eig"], [626, 2, 1, "", "eigh"], [356, 2, 1, "", "eigh_tridiagonal"], [356, 2, 1, "", "eigvals"], [627, 2, 1, "", "eigvalsh"], [590, 2, 1, "", "einops_rearrange"], [590, 2, 1, "", "einops_reduce"], [590, 2, 1, "", "einops_repeat"], [603, 2, 1, "", "einsum"], [347, 2, 1, "", "elu"], [355, 2, 1, "", "embedding"], [130, 2, 1, "", "empty"], [131, 2, 1, "", "empty_like"], [240, 2, 1, "", "equal"], [241, 2, 1, "", "erf"], [591, 2, 1, "", "execute_with_gradients"], [590, 2, 1, "", "exists"], [242, 2, 1, "", "exp"], [243, 2, 1, "", "exp2"], [358, 2, 1, "", "expand"], [595, 2, 1, "", "expand_dims"], [244, 2, 1, "", "expm1"], [132, 2, 1, "", "eye"], [349, 2, 1, "", "eye_like"], [355, 2, 1, "", "fft"], [355, 2, 1, "", "fft2"], [358, 2, 1, "", "fill_diagonal"], [164, 2, 1, "", "finfo"], [352, 2, 1, "", "fix"], [358, 2, 1, "", "flatten"], [595, 2, 1, "", "flip"], [358, 2, 1, "", "fliplr"], [358, 2, 1, "", "flipud"], [352, 2, 1, "", "float_power"], [245, 2, 1, "", "floor"], [246, 2, 1, "", "floor_divide"], [352, 2, 1, "", "fmax"], [247, 2, 1, "", "fmin"], [248, 2, 1, "", "fmod"], [358, 2, 1, "", "fold"], [596, 2, 1, "", "fomaml_step"], [584, 2, 1, "", "for_loop"], [590, 2, 1, "", "fourier_encode"], [352, 2, 1, "", "frexp"], [133, 2, 1, "", "from_dlpack"], [134, 2, 1, "", "frombuffer"], [135, 2, 1, "", "full"], [136, 2, 1, "", "full_like"], [198, 2, 1, "", "function_supported_devices"], [590, 2, 1, "", "function_supported_devices_and_dtypes"], [165, 2, 1, "", "function_supported_dtypes"], [199, 2, 1, "", "function_unsupported_devices"], [590, 2, 1, "", "function_unsupported_devices_and_dtypes"], [166, 2, 1, "", "function_unsupported_dtypes"], [362, 2, 1, "", "gamma"], [590, 2, 1, "", "gather"], [590, 2, 1, "", "gather_nd"], [249, 2, 1, "", "gcd"], [582, 2, 1, "", "gelu"], [355, 2, 1, "", "generate_einsum_equation"], [590, 2, 1, "", "get_all_arrays_in_memory"], [200, 2, 1, "", "get_all_ivy_arrays_on_dev"], [355, 2, 1, "", "get_interpolate_kernel"], [590, 2, 1, "", "get_item"], [590, 2, 1, "", "get_num_dims"], [590, 2, 1, "", "get_referrers_recursive"], [201, 2, 1, "", "gpu_is_available"], [591, 2, 1, "", "grad"], [352, 2, 1, "", "gradient"], [591, 2, 1, "", "gradient_descent_update"], [250, 2, 1, "", "greater"], [251, 2, 1, "", "greater_equal"], [361, 2, 1, "", "group_norm"], [349, 2, 1, "", "hamming_window"], [202, 2, 1, "", "handle_soft_device_variable"], [349, 2, 1, "", "hann_window"], [582, 2, 1, "", "hardswish"], [590, 2, 1, "", "has_nans"], [358, 2, 1, "", "heaviside"], [367, 2, 1, "", "histogram"], [358, 2, 1, "", "hsplit"], [358, 2, 1, "", "hstack"], [357, 2, 1, "", "huber_loss"], [352, 2, 1, "", "hypot"], [358, 2, 1, "", "i0"], [355, 2, 1, "", "idct"], [584, 2, 1, "", "if_else"], [355, 2, 1, "", "ifft"], [355, 2, 1, "", "ifftn"], [367, 2, 1, "", "igamma"], [167, 2, 1, "", "iinfo"], [252, 2, 1, "", "imag"], [597, 2, 1, "", "index_nest"], [349, 2, 1, "", "indices"], [583, 6, 1, "", "inf"], [168, 2, 1, "", "infer_default_dtype"], [356, 2, 1, "", "initialize_tucker"], [628, 2, 1, "", "inner"], [590, 2, 1, "", "inplace_arrays_supported"], [590, 2, 1, "", "inplace_decrement"], [590, 2, 1, "", "inplace_increment"], [590, 2, 1, "", "inplace_update"], [590, 2, 1, "", "inplace_variables_supported"], [597, 2, 1, "", "insert_into_nest_at_index"], [597, 2, 1, "", "insert_into_nest_at_indices"], [361, 2, 1, "", "instance_norm"], [355, 2, 1, "", "interp"], [355, 2, 1, "", "interpolate"], [629, 2, 1, "", "inv"], [169, 2, 1, "", "invalid_dtype"], [365, 2, 1, "", "invert_permutation"], [590, 2, 1, "", "is_array"], [170, 2, 1, "", "is_bool_dtype"], [171, 2, 1, "", "is_complex_dtype"], [172, 2, 1, "", "is_float_dtype"], [173, 2, 1, "", "is_hashable_dtype"], [174, 2, 1, "", "is_int_dtype"], [590, 2, 1, "", "is_ivy_array"], [590, 2, 1, "", "is_ivy_container"], [590, 2, 1, "", "is_ivy_nested_array"], [366, 2, 1, "", "is_ivy_sparse_array"], [590, 2, 1, "", "is_native_array"], [175, 2, 1, "", "is_native_dtype"], [366, 2, 1, "", "is_native_sparse_array"], [176, 2, 1, "", "is_uint_dtype"], [352, 2, 1, "", "isclose"], [253, 2, 1, "", "isfinite"], [590, 2, 1, "", "isin"], [254, 2, 1, "", "isinf"], [255, 2, 1, "", "isnan"], [256, 2, 1, "", "isreal"], [590, 2, 1, "", "isscalar"], [590, 2, 1, "", "itemsize"], [591, 2, 1, "", "jac"], [349, 2, 1, "", "kaiser_bessel_derived_window"], [349, 2, 1, "", "kaiser_window"], [356, 2, 1, "", "khatri_rao"], [356, 2, 1, "", "kron"], [356, 2, 1, "", "kronecker"], [357, 2, 1, "", "l1_loss"], [361, 2, 1, "", "l1_normalize"], [361, 2, 1, "", "l2_normalize"], [591, 2, 1, "", "lamb_update"], [591, 2, 1, "", "lars_update"], [598, 2, 1, "", "layer_norm"], [257, 2, 1, "", "lcm"], [352, 2, 1, "", "ldexp"], [582, 2, 1, "", "leaky_relu"], [352, 2, 1, "", "lerp"], [258, 2, 1, "", "less"], [259, 2, 1, "", "less_equal"], [365, 2, 1, "", "lexsort"], [352, 2, 1, "", "lgamma"], [616, 2, 1, "", "linear"], [137, 2, 1, "", "linspace"], [604, 2, 1, "", "load"], [260, 2, 1, "", "log"], [261, 2, 1, "", "log10"], [262, 2, 1, "", "log1p"], [263, 2, 1, "", "log2"], [357, 2, 1, "", "log_poisson_loss"], [582, 2, 1, "", "log_softmax"], [264, 2, 1, "", "logaddexp"], [265, 2, 1, "", "logaddexp2"], [266, 2, 1, "", "logical_and"], [267, 2, 1, "", "logical_not"], [268, 2, 1, "", "logical_or"], [269, 2, 1, "", "logical_xor"], [347, 2, 1, "", "logit"], [347, 2, 1, "", "logsigmoid"], [138, 2, 1, "", "logspace"], [361, 2, 1, "", "lp_normalize"], [617, 2, 1, "", "lstm_update"], [593, 2, 1, "", "lu_factor"], [356, 2, 1, "", "make_svd_non_negative"], [596, 2, 1, "", "maml_step"], [597, 2, 1, "", "map"], [597, 2, 1, "", "map_nest_at_index"], [597, 2, 1, "", "map_nest_at_indices"], [590, 2, 1, "", "match_kwargs"], [593, 2, 1, "", "matmul"], [358, 2, 1, "", "matricize"], [356, 2, 1, "", "matrix_exp"], [593, 2, 1, "", "matrix_norm"], [593, 2, 1, "", "matrix_power"], [593, 2, 1, "", "matrix_rank"], [593, 2, 1, "", "matrix_transpose"], [603, 2, 1, "", "max"], [355, 2, 1, "", "max_pool1d"], [355, 2, 1, "", "max_pool2d"], [355, 2, 1, "", "max_pool3d"], [355, 2, 1, "", "max_unpool1d"], [270, 2, 1, "", "maximum"], [603, 2, 1, "", "mean"], [367, 2, 1, "", "median"], [349, 2, 1, "", "mel_weight_matrix"], [139, 2, 1, "", "meshgrid"], [603, 2, 1, "", "min"], [271, 2, 1, "", "minimum"], [582, 2, 1, "", "mish"], [356, 2, 1, "", "mode_dot"], [352, 2, 1, "", "modf"], [358, 2, 1, "", "moveaxis"], [602, 2, 1, "", "msort"], [356, 2, 1, "", "multi_dot"], [618, 2, 1, "", "multi_head_attention"], [597, 2, 1, "", "multi_index_nest"], [356, 2, 1, "", "multi_mode_dot"], [599, 2, 1, "", "multinomial"], [272, 2, 1, "", "multiply"], [590, 2, 1, "", "multiprocessing"], [583, 6, 1, "", "nan"], [273, 2, 1, "", "nan_to_num"], [367, 2, 1, "", "nanmean"], [367, 2, 1, "", "nanmedian"], [367, 2, 1, "", "nanprod"], [352, 2, 1, "", "nansum"], [140, 2, 1, "", "native_array"], [366, 2, 1, "", "native_sparse_array"], [366, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [349, 2, 1, "", "ndenumerate"], [349, 2, 1, "", "ndindex"], [355, 2, 1, "", "nearest_interpolate"], [274, 2, 1, "", "negative"], [597, 2, 1, "", "nested_any"], [597, 2, 1, "", "nested_argwhere"], [597, 2, 1, "", "nested_map"], [597, 2, 1, "", "nested_multi_map"], [583, 6, 1, "", "newaxis"], [352, 2, 1, "", "nextafter"], [600, 2, 1, "", "nonzero"], [275, 2, 1, "", "not_equal"], [590, 2, 1, "", "num_arrays_in_memory"], [203, 2, 1, "", "num_cpu_cores"], [204, 2, 1, "", "num_gpus"], [205, 2, 1, "", "num_ivy_arrays_on_dev"], [141, 2, 1, "", "one_hot"], [142, 2, 1, "", "ones"], [143, 2, 1, "", "ones_like"], [591, 2, 1, "", "optimizer_update"], [368, 2, 1, "", "optional_get_element"], [593, 2, 1, "", "outer"], [358, 2, 1, "", "pad"], [358, 2, 1, "", "partial_fold"], [358, 2, 1, "", "partial_tensor_to_vec"], [356, 2, 1, "", "partial_tucker"], [358, 2, 1, "", "partial_unfold"], [358, 2, 1, "", "partial_vec_to_tensor"], [206, 2, 1, "", "percent_used_mem_on_dev"], [595, 2, 1, "", "permute_dims"], [583, 6, 1, "", "pi"], [593, 2, 1, "", "pinv"], [362, 2, 1, "", "poisson"], [355, 2, 1, "", "pool"], [276, 2, 1, "", "positive"], [277, 2, 1, "", "pow"], [347, 2, 1, "", "prelu"], [590, 2, 1, "", "print_all_arrays_in_memory"], [207, 2, 1, "", "print_all_ivy_arrays_on_dev"], [603, 2, 1, "", "prod"], [177, 2, 1, "", "promote_types"], [178, 2, 1, "", "promote_types_of_inputs"], [597, 2, 1, "", "prune_empty"], [597, 2, 1, "", "prune_nest_at_index"], [597, 2, 1, "", "prune_nest_at_indices"], [358, 2, 1, "", "put_along_axis"], [593, 2, 1, "", "qr"], [367, 2, 1, "", "quantile"], [278, 2, 1, "", "rad2deg"], [599, 2, 1, "", "randint"], [349, 2, 1, "", "random_cp"], [599, 2, 1, "", "random_normal"], [349, 2, 1, "", "random_tucker"], [599, 2, 1, "", "random_uniform"], [279, 2, 1, "", "real"], [280, 2, 1, "", "reciprocal"], [353, 2, 1, "", "reduce"], [355, 2, 1, "", "reduce_window"], [582, 2, 1, "", "relu"], [347, 2, 1, "", "relu6"], [281, 2, 1, "", "remainder"], [595, 2, 1, "", "repeat"], [596, 2, 1, "", "reptile_step"], [595, 2, 1, "", "reshape"], [179, 2, 1, "", "result_type"], [355, 2, 1, "", "rfftn"], [595, 2, 1, "", "roll"], [358, 2, 1, "", "rot90"], [282, 2, 1, "", "round"], [604, 2, 1, "", "save"], [619, 2, 1, "", "scaled_dot_product_attention"], [590, 2, 1, "", "scatter_flat"], [590, 2, 1, "", "scatter_nd"], [602, 2, 1, "", "searchsorted"], [599, 2, 1, "", "seed"], [347, 2, 1, "", "selu"], [347, 2, 1, "", "sequence_length"], [590, 2, 1, "", "set_array_mode"], [180, 2, 1, "", "set_default_complex_dtype"], [208, 2, 1, "", "set_default_device"], [181, 2, 1, "", "set_default_dtype"], [182, 2, 1, "", "set_default_float_dtype"], [183, 2, 1, "", "set_default_int_dtype"], [184, 2, 1, "", "set_default_uint_dtype"], [590, 2, 1, "", "set_exception_trace_mode"], [590, 2, 1, "", "set_inplace_mode"], [590, 2, 1, "", "set_item"], [590, 2, 1, "", "set_min_base"], [590, 2, 1, "", "set_min_denominator"], [597, 2, 1, "", "set_nest_at_index"], [597, 2, 1, "", "set_nest_at_indices"], [590, 2, 1, "", "set_nestable_mode"], [590, 2, 1, "", "set_precise_mode"], [590, 2, 1, "", "set_queue_timeout"], [590, 2, 1, "", "set_shape_array_mode"], [590, 2, 1, "", "set_show_func_wrapper_trace_mode"], [209, 2, 1, "", "set_soft_device_mode"], [210, 2, 1, "", "set_split_factor"], [590, 2, 1, "", "set_tmp_dir"], [590, 2, 1, "", "shape"], [599, 2, 1, "", "shuffle"], [582, 2, 1, "", "sigmoid"], [283, 2, 1, "", "sign"], [352, 2, 1, "", "signbit"], [347, 2, 1, "", "silu"], [284, 2, 1, "", "sin"], [352, 2, 1, "", "sinc"], [285, 2, 1, "", "sinh"], [593, 2, 1, "", "slogdet"], [357, 2, 1, "", "smooth_l1_loss"], [357, 2, 1, "", "soft_margin_loss"], [358, 2, 1, "", "soft_thresholding"], [582, 2, 1, "", "softmax"], [582, 2, 1, "", "softplus"], [582, 2, 1, "", "softsign"], [593, 2, 1, "", "solve"], [602, 2, 1, "", "sort"], [594, 2, 1, "", "sparse_cross_entropy"], [352, 2, 1, "", "sparsify_tensor"], [595, 2, 1, "", "split"], [211, 2, 1, "", "split_factor"], [212, 2, 1, "", "split_func_call"], [286, 2, 1, "", "sqrt"], [287, 2, 1, "", "square"], [595, 2, 1, "", "squeeze"], [590, 2, 1, "", "stable_divide"], [590, 2, 1, "", "stable_pow"], [595, 2, 1, "", "stack"], [603, 2, 1, "", "std"], [591, 2, 1, "", "stop_gradient"], [590, 2, 1, "", "strides"], [288, 2, 1, "", "subtract"], [603, 2, 1, "", "sum"], [590, 2, 1, "", "supports_inplace_updates"], [593, 2, 1, "", "svd"], [356, 2, 1, "", "svd_flip"], [593, 2, 1, "", "svdvals"], [595, 2, 1, "", "swapaxes"], [358, 2, 1, "", "take_along_axis"], [289, 2, 1, "", "tan"], [290, 2, 1, "", "tanh"], [593, 2, 1, "", "tensordot"], [593, 2, 1, "", "tensorsolve"], [347, 2, 1, "", "thresholded_relu"], [595, 2, 1, "", "tile"], [213, 2, 1, "", "to_device"], [590, 2, 1, "", "to_ivy_shape"], [590, 2, 1, "", "to_list"], [590, 2, 1, "", "to_native_shape"], [590, 2, 1, "", "to_numpy"], [590, 2, 1, "", "to_scalar"], [358, 2, 1, "", "top_k"], [214, 2, 1, "", "total_mem_on_dev"], [215, 2, 1, "", "tpu_is_available"], [593, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [291, 2, 1, "", "trapz"], [144, 2, 1, "", "tril"], [349, 2, 1, "", "tril_indices"], [349, 2, 1, "", "trilu"], [145, 2, 1, "", "triu"], [146, 2, 1, "", "triu_indices"], [292, 2, 1, "", "trunc"], [293, 2, 1, "", "trunc_divide"], [356, 2, 1, "", "truncated_svd"], [590, 2, 1, "", "try_else_none"], [584, 2, 1, "", "try_except"], [356, 2, 1, "", "tucker"], [185, 2, 1, "", "type_promote_arrays"], [358, 2, 1, "", "unfold"], [2, 2, 1, "", "unify"], [601, 2, 1, "", "unique_all"], [358, 2, 1, "", "unique_consecutive"], [601, 2, 1, "", "unique_counts"], [601, 2, 1, "", "unique_inverse"], [601, 2, 1, "", "unique_values"], [363, 2, 1, "", "unravel_index"], [590, 2, 1, "", "unset_array_mode"], [186, 2, 1, "", "unset_default_complex_dtype"], [216, 2, 1, "", "unset_default_device"], [187, 2, 1, "", "unset_default_dtype"], [188, 2, 1, "", "unset_default_float_dtype"], [189, 2, 1, "", "unset_default_int_dtype"], [190, 2, 1, "", "unset_default_uint_dtype"], [590, 2, 1, "", "unset_exception_trace_mode"], [590, 2, 1, "", "unset_inplace_mode"], [590, 2, 1, "", "unset_min_base"], [590, 2, 1, "", "unset_min_denominator"], [590, 2, 1, "", "unset_nestable_mode"], [590, 2, 1, "", "unset_precise_mode"], [590, 2, 1, "", "unset_queue_timeout"], [590, 2, 1, "", "unset_shape_array_mode"], [590, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [217, 2, 1, "", "unset_soft_device_mode"], [590, 2, 1, "", "unset_tmp_dir"], [349, 2, 1, "", "unsorted_segment_min"], [349, 2, 1, "", "unsorted_segment_sum"], [595, 2, 1, "", "unstack"], [218, 2, 1, "", "used_mem_on_dev"], [191, 2, 1, "", "valid_dtype"], [591, 2, 1, "", "value_and_grad"], [590, 2, 1, "", "value_is_nan"], [593, 2, 1, "", "vander"], [603, 2, 1, "", "var"], [593, 2, 1, "", "vecdot"], [593, 2, 1, "", "vector_norm"], [593, 2, 1, "", "vector_to_skew_symmetric_matrix"], [590, 2, 1, "", "vmap"], [349, 2, 1, "", "vorbis_window"], [358, 2, 1, "", "vsplit"], [358, 2, 1, "", "vstack"], [600, 2, 1, "", "where"], [584, 2, 1, "", "while_loop"], [352, 2, 1, "", "xlogy"], [595, 2, 1, "", "zero_pad"], [147, 2, 1, "", "zeros"], [148, 2, 1, "", "zeros_like"], [352, 2, 1, "", "zeta"]], "ivy.Container": [[219, 0, 1, "", "abs"], [220, 0, 1, "", "acos"], [221, 0, 1, "", "acosh"], [571, 0, 1, "", "adam_step"], [572, 0, 1, "", "adam_update"], [369, 0, 1, "", "adaptive_avg_pool1d"], [370, 0, 1, "", "adaptive_avg_pool2d"], [371, 0, 1, "", "adaptive_max_pool2d"], [222, 0, 1, "", "add"], [399, 0, 1, "", "adjoint"], [721, 0, 1, "", "all"], [491, 0, 1, "", "all_equal"], [320, 0, 1, "", "allclose"], [223, 0, 1, "", "angle"], [722, 0, 1, "", "any"], [698, 0, 1, "", "argmax"], [699, 0, 1, "", "argmin"], [707, 0, 1, "", "argsort"], [700, 0, 1, "", "argwhere"], [494, 0, 1, "", "array_equal"], [424, 0, 1, "", "as_strided"], [123, 0, 1, "", "asarray"], [224, 0, 1, "", "asin"], [225, 0, 1, "", "asinh"], [495, 0, 1, "", "assert_supports_inplace"], [425, 0, 1, "", "associative_scan"], [151, 0, 1, "", "astype"], [226, 0, 1, "", "atan"], [227, 0, 1, "", "atan2"], [228, 0, 1, "", "atanh"], [426, 0, 1, "", "atleast_1d"], [427, 0, 1, "", "atleast_2d"], [428, 0, 1, "", "atleast_3d"], [373, 0, 1, "", "avg_pool1d"], [374, 0, 1, "", "avg_pool2d"], [375, 0, 1, "", "avg_pool3d"], [460, 0, 1, "", "batch_norm"], [466, 0, 1, "", "bernoulli"], [467, 0, 1, "", "beta"], [321, 0, 1, "", "binarizer"], [650, 0, 1, "", "binary_cross_entropy"], [478, 0, 1, "", "bincount"], [229, 0, 1, "", "bitwise_and"], [230, 0, 1, "", "bitwise_invert"], [231, 0, 1, "", "bitwise_left_shift"], [232, 0, 1, "", "bitwise_or"], [233, 0, 1, "", "bitwise_right_shift"], [234, 0, 1, "", "bitwise_xor"], [303, 0, 1, "", "blackman_window"], [152, 0, 1, "", "broadcast_arrays"], [429, 0, 1, "", "broadcast_shapes"], [153, 0, 1, "", "broadcast_to"], [154, 0, 1, "", "can_cast"], [235, 0, 1, "", "ceil"], [620, 0, 1, "", "cholesky"], [653, 0, 1, "", "clip"], [497, 0, 1, "", "clip_matrix_norm"], [498, 0, 1, "", "clip_vector_norm"], [654, 0, 1, "", "concat"], [431, 0, 1, "", "concat_from_sequence"], [400, 0, 1, "", "cond"], [322, 0, 1, "", "conj"], [655, 0, 1, "", "constant_pad"], [606, 0, 1, "", "conv1d"], [607, 0, 1, "", "conv1d_transpose"], [608, 0, 1, "", "conv2d"], [609, 0, 1, "", "conv2d_transpose"], [610, 0, 1, "", "conv3d"], [611, 0, 1, "", "conv3d_transpose"], [129, 0, 1, "", "copy_array"], [323, 0, 1, "", "copysign"], [479, 0, 1, "", "corrcoef"], [236, 0, 1, "", "cos"], [237, 0, 1, "", "cosh"], [324, 0, 1, "", "count_nonzero"], [480, 0, 1, "", "cov"], [621, 0, 1, "", "cross"], [651, 0, 1, "", "cross_entropy"], [481, 0, 1, "", "cummax"], [482, 0, 1, "", "cummin"], [711, 0, 1, "", "cumprod"], [712, 0, 1, "", "cumsum"], [376, 0, 1, "", "dct"], [238, 0, 1, "", "deg2rad"], [614, 0, 1, "", "depthwise_conv2d"], [622, 0, 1, "", "det"], [196, 0, 1, "", "dev"], [377, 0, 1, "", "dft"], [623, 0, 1, "", "diag"], [401, 0, 1, "", "diagflat"], [624, 0, 1, "", "diagonal"], [325, 0, 1, "", "diff"], [326, 0, 1, "", "digamma"], [468, 0, 1, "", "dirichlet"], [239, 0, 1, "", "divide"], [402, 0, 1, "", "dot"], [615, 0, 1, "", "dropout"], [378, 0, 1, "", "dropout1d"], [379, 0, 1, "", "dropout2d"], [380, 0, 1, "", "dropout3d"], [432, 0, 1, "", "dsplit"], [433, 0, 1, "", "dstack"], [162, 0, 1, "", "dtype"], [625, 0, 1, "", "eig"], [626, 0, 1, "", "eigh"], [404, 0, 1, "", "eigh_tridiagonal"], [405, 0, 1, "", "eigvals"], [627, 0, 1, "", "eigvalsh"], [502, 0, 1, "", "einops_rearrange"], [503, 0, 1, "", "einops_reduce"], [504, 0, 1, "", "einops_repeat"], [713, 0, 1, "", "einsum"], [294, 0, 1, "", "elu"], [381, 0, 1, "", "embedding"], [131, 0, 1, "", "empty_like"], [240, 0, 1, "", "equal"], [241, 0, 1, "", "erf"], [505, 0, 1, "", "exists"], [242, 0, 1, "", "exp"], [243, 0, 1, "", "exp2"], [434, 0, 1, "", "expand"], [656, 0, 1, "", "expand_dims"], [244, 0, 1, "", "expm1"], [304, 0, 1, "", "eye_like"], [382, 0, 1, "", "fft"], [435, 0, 1, "", "fill_diagonal"], [164, 0, 1, "", "finfo"], [327, 0, 1, "", "fix"], [436, 0, 1, "", "flatten"], [657, 0, 1, "", "flip"], [437, 0, 1, "", "fliplr"], [438, 0, 1, "", "flipud"], [328, 0, 1, "", "float_power"], [245, 0, 1, "", "floor"], [246, 0, 1, "", "floor_divide"], [329, 0, 1, "", "fmax"], [247, 0, 1, "", "fmin"], [248, 0, 1, "", "fmod"], [439, 0, 1, "", "fold"], [506, 0, 1, "", "fourier_encode"], [330, 0, 1, "", "frexp"], [133, 0, 1, "", "from_dlpack"], [134, 0, 1, "", "frombuffer"], [136, 0, 1, "", "full_like"], [469, 0, 1, "", "gamma"], [509, 0, 1, "", "gather"], [510, 0, 1, "", "gather_nd"], [249, 0, 1, "", "gcd"], [104, 0, 1, "", "gelu"], [513, 0, 1, "", "get_num_dims"], [331, 0, 1, "", "gradient"], [575, 0, 1, "", "gradient_descent_update"], [250, 0, 1, "", "greater"], [251, 0, 1, "", "greater_equal"], [461, 0, 1, "", "group_norm"], [305, 0, 1, "", "hamming_window"], [306, 0, 1, "", "hann_window"], [105, 0, 1, "", "hardswish"], [515, 0, 1, "", "has_nans"], [440, 0, 1, "", "heaviside"], [483, 0, 1, "", "histogram"], [441, 0, 1, "", "hsplit"], [442, 0, 1, "", "hstack"], [419, 0, 1, "", "huber_loss"], [332, 0, 1, "", "hypot"], [443, 0, 1, "", "i0"], [386, 0, 1, "", "idct"], [387, 0, 1, "", "ifft"], [388, 0, 1, "", "ifftn"], [484, 0, 1, "", "igamma"], [167, 0, 1, "", "iinfo"], [252, 0, 1, "", "imag"], [406, 0, 1, "", "initialize_tucker"], [628, 0, 1, "", "inner"], [517, 0, 1, "", "inplace_decrement"], [518, 0, 1, "", "inplace_increment"], [519, 0, 1, "", "inplace_update"], [462, 0, 1, "", "instance_norm"], [390, 0, 1, "", "interpolate"], [629, 0, 1, "", "inv"], [472, 0, 1, "", "invert_permutation"], [521, 0, 1, "", "is_array"], [170, 0, 1, "", "is_bool_dtype"], [171, 0, 1, "", "is_complex_dtype"], [172, 0, 1, "", "is_float_dtype"], [174, 0, 1, "", "is_int_dtype"], [522, 0, 1, "", "is_ivy_array"], [525, 0, 1, "", "is_native_array"], [176, 0, 1, "", "is_uint_dtype"], [333, 0, 1, "", "isclose"], [253, 0, 1, "", "isfinite"], [526, 0, 1, "", "isin"], [254, 0, 1, "", "isinf"], [255, 0, 1, "", "isnan"], [256, 0, 1, "", "isreal"], [528, 0, 1, "", "itemsize"], [308, 0, 1, "", "kaiser_bessel_derived_window"], [309, 0, 1, "", "kaiser_window"], [408, 0, 1, "", "kron"], [420, 0, 1, "", "l1_loss"], [463, 0, 1, "", "l1_normalize"], [464, 0, 1, "", "l2_normalize"], [577, 0, 1, "", "lamb_update"], [578, 0, 1, "", "lars_update"], [691, 0, 1, "", "layer_norm"], [257, 0, 1, "", "lcm"], [334, 0, 1, "", "ldexp"], [106, 0, 1, "", "leaky_relu"], [335, 0, 1, "", "lerp"], [258, 0, 1, "", "less"], [259, 0, 1, "", "less_equal"], [473, 0, 1, "", "lexsort"], [616, 0, 1, "", "linear"], [137, 0, 1, "", "linspace"], [260, 0, 1, "", "log"], [261, 0, 1, "", "log10"], [262, 0, 1, "", "log1p"], [263, 0, 1, "", "log2"], [107, 0, 1, "", "log_softmax"], [264, 0, 1, "", "logaddexp"], [265, 0, 1, "", "logaddexp2"], [266, 0, 1, "", "logical_and"], [267, 0, 1, "", "logical_not"], [268, 0, 1, "", "logical_or"], [269, 0, 1, "", "logical_xor"], [295, 0, 1, "", "logit"], [296, 0, 1, "", "logsigmoid"], [138, 0, 1, "", "logspace"], [465, 0, 1, "", "lp_normalize"], [617, 0, 1, "", "lstm_update"], [410, 0, 1, "", "make_svd_non_negative"], [631, 0, 1, "", "matmul"], [444, 0, 1, "", "matricize"], [411, 0, 1, "", "matrix_exp"], [632, 0, 1, "", "matrix_norm"], [633, 0, 1, "", "matrix_power"], [634, 0, 1, "", "matrix_rank"], [635, 0, 1, "", "matrix_transpose"], [714, 0, 1, "", "max"], [391, 0, 1, "", "max_pool1d"], [392, 0, 1, "", "max_pool2d"], [393, 0, 1, "", "max_pool3d"], [270, 0, 1, "", "maximum"], [715, 0, 1, "", "mean"], [485, 0, 1, "", "median"], [310, 0, 1, "", "mel_weight_matrix"], [139, 0, 1, "", "meshgrid"], [716, 0, 1, "", "min"], [271, 0, 1, "", "minimum"], [108, 0, 1, "", "mish"], [412, 0, 1, "", "mode_dot"], [337, 0, 1, "", "modf"], [445, 0, 1, "", "moveaxis"], [708, 0, 1, "", "msort"], [413, 0, 1, "", "multi_dot"], [618, 0, 1, "", "multi_head_attention"], [414, 0, 1, "", "multi_mode_dot"], [692, 0, 1, "", "multinomial"], [272, 0, 1, "", "multiply"], [273, 0, 1, "", "nan_to_num"], [486, 0, 1, "", "nanmean"], [487, 0, 1, "", "nanmedian"], [488, 0, 1, "", "nanprod"], [338, 0, 1, "", "nansum"], [140, 0, 1, "", "native_array"], [274, 0, 1, "", "negative"], [339, 0, 1, "", "nextafter"], [701, 0, 1, "", "nonzero"], [275, 0, 1, "", "not_equal"], [141, 0, 1, "", "one_hot"], [143, 0, 1, "", "ones_like"], [579, 0, 1, "", "optimizer_update"], [490, 0, 1, "", "optional_get_element"], [636, 0, 1, "", "outer"], [446, 0, 1, "", "pad"], [447, 0, 1, "", "partial_fold"], [448, 0, 1, "", "partial_tensor_to_vec"], [415, 0, 1, "", "partial_tucker"], [449, 0, 1, "", "partial_unfold"], [450, 0, 1, "", "partial_vec_to_tensor"], [658, 0, 1, "", "permute_dims"], [637, 0, 1, "", "pinv"], [470, 0, 1, "", "poisson"], [276, 0, 1, "", "positive"], [277, 0, 1, "", "pow"], [297, 0, 1, "", "prelu"], [717, 0, 1, "", "prod"], [638, 0, 1, "", "qr"], [489, 0, 1, "", "quantile"], [278, 0, 1, "", "rad2deg"], [693, 0, 1, "", "randint"], [694, 0, 1, "", "random_normal"], [695, 0, 1, "", "random_uniform"], [279, 0, 1, "", "real"], [280, 0, 1, "", "reciprocal"], [345, 0, 1, "", "reduce"], [397, 0, 1, "", "reduce_window"], [109, 0, 1, "", "relu"], [298, 0, 1, "", "relu6"], [281, 0, 1, "", "remainder"], [659, 0, 1, "", "repeat"], [660, 0, 1, "", "reshape"], [179, 0, 1, "", "result_type"], [398, 0, 1, "", "rfftn"], [661, 0, 1, "", "roll"], [452, 0, 1, "", "rot90"], [282, 0, 1, "", "round"], [619, 0, 1, "", "scaled_dot_product_attention"], [533, 0, 1, "", "scatter_flat"], [534, 0, 1, "", "scatter_nd"], [709, 0, 1, "", "searchsorted"], [299, 0, 1, "", "selu"], [697, 0, 1, "", "shuffle"], [110, 0, 1, "", "sigmoid"], [283, 0, 1, "", "sign"], [340, 0, 1, "", "signbit"], [301, 0, 1, "", "silu"], [284, 0, 1, "", "sin"], [341, 0, 1, "", "sinc"], [285, 0, 1, "", "sinh"], [639, 0, 1, "", "slogdet"], [422, 0, 1, "", "smooth_l1_loss"], [423, 0, 1, "", "soft_margin_loss"], [453, 0, 1, "", "soft_thresholding"], [111, 0, 1, "", "softmax"], [112, 0, 1, "", "softplus"], [640, 0, 1, "", "solve"], [710, 0, 1, "", "sort"], [652, 0, 1, "", "sparse_cross_entropy"], [342, 0, 1, "", "sparsify_tensor"], [662, 0, 1, "", "split"], [286, 0, 1, "", "sqrt"], [287, 0, 1, "", "square"], [663, 0, 1, "", "squeeze"], [548, 0, 1, "", "stable_divide"], [549, 0, 1, "", "stable_pow"], [664, 0, 1, "", "stack"], [718, 0, 1, "", "std"], [580, 0, 1, "", "stop_gradient"], [550, 0, 1, "", "strides"], [288, 0, 1, "", "subtract"], [719, 0, 1, "", "sum"], [551, 0, 1, "", "supports_inplace_updates"], [641, 0, 1, "", "svd"], [416, 0, 1, "", "svd_flip"], [642, 0, 1, "", "svdvals"], [665, 0, 1, "", "swapaxes"], [454, 0, 1, "", "take_along_axis"], [289, 0, 1, "", "tan"], [290, 0, 1, "", "tanh"], [643, 0, 1, "", "tensordot"], [644, 0, 1, "", "tensorsolve"], [302, 0, 1, "", "thresholded_relu"], [666, 0, 1, "", "tile"], [213, 0, 1, "", "to_device"], [553, 0, 1, "", "to_list"], [555, 0, 1, "", "to_numpy"], [556, 0, 1, "", "to_scalar"], [455, 0, 1, "", "top_k"], [645, 0, 1, "", "trace"], [291, 0, 1, "", "trapz"], [144, 0, 1, "", "tril"], [315, 0, 1, "", "tril_indices"], [316, 0, 1, "", "trilu"], [145, 0, 1, "", "triu"], [146, 0, 1, "", "triu_indices"], [292, 0, 1, "", "trunc"], [293, 0, 1, "", "trunc_divide"], [417, 0, 1, "", "truncated_svd"], [418, 0, 1, "", "tucker"], [456, 0, 1, "", "unfold"], [703, 0, 1, "", "unique_all"], [457, 0, 1, "", "unique_consecutive"], [704, 0, 1, "", "unique_counts"], [705, 0, 1, "", "unique_inverse"], [706, 0, 1, "", "unique_values"], [471, 0, 1, "", "unravel_index"], [317, 0, 1, "", "unsorted_segment_min"], [318, 0, 1, "", "unsorted_segment_sum"], [667, 0, 1, "", "unstack"], [569, 0, 1, "", "value_is_nan"], [646, 0, 1, "", "vander"], [720, 0, 1, "", "var"], [647, 0, 1, "", "vecdot"], [648, 0, 1, "", "vector_norm"], [649, 0, 1, "", "vector_to_skew_symmetric_matrix"], [319, 0, 1, "", "vorbis_window"], [458, 0, 1, "", "vsplit"], [459, 0, 1, "", "vstack"], [702, 0, 1, "", "where"], [343, 0, 1, "", "xlogy"], [668, 0, 1, "", "zero_pad"], [148, 0, 1, "", "zeros_like"], [344, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[48, 3, 0, "-", "activations"], [96, 3, 0, "-", "array"], [49, 3, 0, "-", "conversions"], [50, 3, 0, "-", "creation"], [51, 3, 0, "-", "data_type"], [52, 3, 0, "-", "device"], [53, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "experimental"], [55, 3, 0, "-", "general"], [56, 3, 0, "-", "gradients"], [57, 3, 0, "-", "image"], [58, 3, 0, "-", "layers"], [59, 3, 0, "-", "linear_algebra"], [60, 3, 0, "-", "losses"], [61, 3, 0, "-", "manipulation"], [62, 3, 0, "-", "norms"], [63, 3, 0, "-", "random"], [64, 3, 0, "-", "searching"], [65, 3, 0, "-", "set"], [66, 3, 0, "-", "sorting"], [67, 3, 0, "-", "statistical"], [68, 3, 0, "-", "utility"], [69, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[48, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "gelu"], [48, 0, 1, "", "hardswish"], [48, 0, 1, "", "leaky_relu"], [48, 0, 1, "", "log_softmax"], [48, 0, 1, "", "mish"], [48, 0, 1, "", "relu"], [48, 0, 1, "", "sigmoid"], [48, 0, 1, "", "softmax"], [48, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[96, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[96, 5, 1, "", "T"], [96, 0, 1, "", "__abs__"], [96, 0, 1, "", "__add__"], [96, 0, 1, "", "__eq__"], [96, 0, 1, "", "__ge__"], [96, 0, 1, "", "__gt__"], [96, 0, 1, "", "__init__"], [96, 0, 1, "", "__le__"], [96, 0, 1, "", "__lt__"], [96, 0, 1, "", "__ne__"], [96, 0, 1, "", "__pow__"], [96, 0, 1, "", "__radd__"], [96, 0, 1, "", "__rrshift__"], [96, 0, 1, "", "__rshift__"], [96, 0, 1, "", "__rsub__"], [96, 0, 1, "", "__sub__"], [96, 0, 1, "", "__truediv__"], [96, 0, 1, "", "__xor__"], [96, 5, 1, "", "backend"], [96, 5, 1, "", "base"], [96, 5, 1, "", "data"], [96, 5, 1, "", "device"], [96, 5, 1, "", "dtype"], [96, 5, 1, "", "dynamic_backend"], [96, 5, 1, "", "imag"], [96, 5, 1, "", "itemsize"], [96, 5, 1, "", "mT"], [96, 5, 1, "", "ndim"], [96, 5, 1, "", "real"], [96, 5, 1, "", "shape"], [96, 5, 1, "", "size"], [96, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[49, 2, 1, "", "_to_ivy"], [49, 2, 1, "", "_to_native"], [49, 2, 1, "", "args_to_ivy"], [49, 2, 1, "", "args_to_native"], [49, 2, 1, "", "to_ivy"], [49, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[50, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "asarray"], [50, 0, 1, "", "copy_array"], [50, 0, 1, "", "empty_like"], [50, 0, 1, "", "from_dlpack"], [50, 0, 1, "", "full_like"], [50, 0, 1, "", "linspace"], [50, 0, 1, "", "logspace"], [50, 0, 1, "", "meshgrid"], [50, 0, 1, "", "native_array"], [50, 0, 1, "", "one_hot"], [50, 0, 1, "", "ones_like"], [50, 0, 1, "", "tril"], [50, 0, 1, "", "triu"], [50, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[51, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "astype"], [51, 0, 1, "", "broadcast_arrays"], [51, 0, 1, "", "broadcast_to"], [51, 0, 1, "", "can_cast"], [51, 0, 1, "", "dtype"], [51, 0, 1, "", "finfo"], [51, 0, 1, "", "iinfo"], [51, 0, 1, "", "is_bool_dtype"], [51, 0, 1, "", "is_float_dtype"], [51, 0, 1, "", "is_int_dtype"], [51, 0, 1, "", "is_uint_dtype"], [51, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[52, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "dev"], [52, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[53, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "abs"], [53, 0, 1, "", "acos"], [53, 0, 1, "", "acosh"], [53, 0, 1, "", "add"], [53, 0, 1, "", "angle"], [53, 0, 1, "", "asin"], [53, 0, 1, "", "asinh"], [53, 0, 1, "", "atan"], [53, 0, 1, "", "atan2"], [53, 0, 1, "", "atanh"], [53, 0, 1, "", "bitwise_and"], [53, 0, 1, "", "bitwise_invert"], [53, 0, 1, "", "bitwise_left_shift"], [53, 0, 1, "", "bitwise_or"], [53, 0, 1, "", "bitwise_right_shift"], [53, 0, 1, "", "bitwise_xor"], [53, 0, 1, "", "ceil"], [53, 0, 1, "", "cos"], [53, 0, 1, "", "cosh"], [53, 0, 1, "", "deg2rad"], [53, 0, 1, "", "divide"], [53, 0, 1, "", "equal"], [53, 0, 1, "", "erf"], [53, 0, 1, "", "exp"], [53, 0, 1, "", "exp2"], [53, 0, 1, "", "expm1"], [53, 0, 1, "", "floor"], [53, 0, 1, "", "floor_divide"], [53, 0, 1, "", "fmin"], [53, 0, 1, "", "gcd"], [53, 0, 1, "", "greater"], [53, 0, 1, "", "greater_equal"], [53, 0, 1, "", "imag"], [53, 0, 1, "", "isfinite"], [53, 0, 1, "", "isinf"], [53, 0, 1, "", "isnan"], [53, 0, 1, "", "isreal"], [53, 0, 1, "", "lcm"], [53, 0, 1, "", "less"], [53, 0, 1, "", "less_equal"], [53, 0, 1, "", "log"], [53, 0, 1, "", "log10"], [53, 0, 1, "", "log1p"], [53, 0, 1, "", "log2"], [53, 0, 1, "", "logaddexp"], [53, 0, 1, "", "logaddexp2"], [53, 0, 1, "", "logical_and"], [53, 0, 1, "", "logical_not"], [53, 0, 1, "", "logical_or"], [53, 0, 1, "", "logical_xor"], [53, 0, 1, "", "maximum"], [53, 0, 1, "", "minimum"], [53, 0, 1, "", "multiply"], [53, 0, 1, "", "nan_to_num"], [53, 0, 1, "", "negative"], [53, 0, 1, "", "not_equal"], [53, 0, 1, "", "positive"], [53, 0, 1, "", "pow"], [53, 0, 1, "", "rad2deg"], [53, 0, 1, "", "real"], [53, 0, 1, "", "reciprocal"], [53, 0, 1, "", "remainder"], [53, 0, 1, "", "round"], [53, 0, 1, "", "sign"], [53, 0, 1, "", "sin"], [53, 0, 1, "", "sinh"], [53, 0, 1, "", "sqrt"], [53, 0, 1, "", "square"], [53, 0, 1, "", "subtract"], [53, 0, 1, "", "tan"], [53, 0, 1, "", "tanh"], [53, 0, 1, "", "trapz"], [53, 0, 1, "", "trunc"], [53, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[54, 3, 0, "-", "activations"], [54, 3, 0, "-", "conversions"], [54, 3, 0, "-", "creation"], [54, 3, 0, "-", "data_type"], [54, 3, 0, "-", "device"], [54, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "general"], [54, 3, 0, "-", "gradients"], [54, 3, 0, "-", "image"], [54, 3, 0, "-", "layers"], [54, 3, 0, "-", "linear_algebra"], [54, 3, 0, "-", "losses"], [54, 3, 0, "-", "manipulation"], [54, 3, 0, "-", "norms"], [54, 3, 0, "-", "random"], [54, 3, 0, "-", "searching"], [54, 3, 0, "-", "set"], [54, 3, 0, "-", "sorting"], [54, 3, 0, "-", "statistical"], [54, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[54, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "elu"], [54, 0, 1, "", "logit"], [54, 0, 1, "", "logsigmoid"], [54, 0, 1, "", "prelu"], [54, 0, 1, "", "relu6"], [54, 0, 1, "", "selu"], [54, 0, 1, "", "silu"], [54, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[54, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[54, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "blackman_window"], [54, 0, 1, "", "eye_like"], [54, 0, 1, "", "mel_weight_matrix"], [54, 0, 1, "", "trilu"], [54, 0, 1, "", "unsorted_segment_min"], [54, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[54, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[54, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[54, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "allclose"], [54, 0, 1, "", "binarizer"], [54, 0, 1, "", "conj"], [54, 0, 1, "", "copysign"], [54, 0, 1, "", "count_nonzero"], [54, 0, 1, "", "diff"], [54, 0, 1, "", "digamma"], [54, 0, 1, "", "fix"], [54, 0, 1, "", "float_power"], [54, 0, 1, "", "fmax"], [54, 0, 1, "", "fmod"], [54, 0, 1, "", "frexp"], [54, 0, 1, "", "gradient"], [54, 0, 1, "", "hypot"], [54, 0, 1, "", "isclose"], [54, 0, 1, "", "ldexp"], [54, 0, 1, "", "lerp"], [54, 0, 1, "", "lgamma"], [54, 0, 1, "", "modf"], [54, 0, 1, "", "nansum"], [54, 0, 1, "", "nextafter"], [54, 0, 1, "", "signbit"], [54, 0, 1, "", "sinc"], [54, 0, 1, "", "sparsify_tensor"], [54, 0, 1, "", "xlogy"], [54, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[54, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[54, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[54, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[54, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adaptive_avg_pool1d"], [54, 0, 1, "", "adaptive_avg_pool2d"], [54, 0, 1, "", "adaptive_max_pool2d"], [54, 0, 1, "", "avg_pool1d"], [54, 0, 1, "", "avg_pool2d"], [54, 0, 1, "", "avg_pool3d"], [54, 0, 1, "", "dct"], [54, 0, 1, "", "dft"], [54, 0, 1, "", "embedding"], [54, 0, 1, "", "fft"], [54, 0, 1, "", "fft2"], [54, 0, 1, "", "idct"], [54, 0, 1, "", "ifft"], [54, 0, 1, "", "ifftn"], [54, 0, 1, "", "interpolate"], [54, 0, 1, "", "max_pool1d"], [54, 0, 1, "", "max_pool2d"], [54, 0, 1, "", "max_pool3d"], [54, 0, 1, "", "reduce_window"], [54, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[54, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adjoint"], [54, 0, 1, "", "cond"], [54, 0, 1, "", "diagflat"], [54, 0, 1, "", "dot"], [54, 0, 1, "", "eig"], [54, 0, 1, "", "eigh_tridiagonal"], [54, 0, 1, "", "eigvals"], [54, 0, 1, "", "initialize_tucker"], [54, 0, 1, "", "kron"], [54, 0, 1, "", "make_svd_non_negative"], [54, 0, 1, "", "matrix_exp"], [54, 0, 1, "", "mode_dot"], [54, 0, 1, "", "multi_dot"], [54, 0, 1, "", "multi_mode_dot"], [54, 0, 1, "", "partial_tucker"], [54, 0, 1, "", "svd_flip"], [54, 0, 1, "", "truncated_svd"], [54, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[54, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "huber_loss"], [54, 0, 1, "", "l1_loss"], [54, 0, 1, "", "smooth_l1_loss"], [54, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[54, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "as_strided"], [54, 0, 1, "", "associative_scan"], [54, 0, 1, "", "atleast_1d"], [54, 0, 1, "", "atleast_2d"], [54, 0, 1, "", "atleast_3d"], [54, 0, 1, "", "concat_from_sequence"], [54, 0, 1, "", "dsplit"], [54, 0, 1, "", "dstack"], [54, 0, 1, "", "expand"], [54, 0, 1, "", "fill_diagonal"], [54, 0, 1, "", "flatten"], [54, 0, 1, "", "fliplr"], [54, 0, 1, "", "flipud"], [54, 0, 1, "", "fold"], [54, 0, 1, "", "heaviside"], [54, 0, 1, "", "hsplit"], [54, 0, 1, "", "hstack"], [54, 0, 1, "", "i0"], [54, 0, 1, "", "matricize"], [54, 0, 1, "", "moveaxis"], [54, 0, 1, "", "pad"], [54, 0, 1, "", "partial_fold"], [54, 0, 1, "", "partial_tensor_to_vec"], [54, 0, 1, "", "partial_unfold"], [54, 0, 1, "", "partial_vec_to_tensor"], [54, 0, 1, "", "rot90"], [54, 0, 1, "", "soft_thresholding"], [54, 0, 1, "", "take_along_axis"], [54, 0, 1, "", "top_k"], [54, 0, 1, "", "unfold"], [54, 0, 1, "", "unique_consecutive"], [54, 0, 1, "", "vsplit"], [54, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[54, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "batch_norm"], [54, 0, 1, "", "group_norm"], [54, 0, 1, "", "instance_norm"], [54, 0, 1, "", "l1_normalize"], [54, 0, 1, "", "l2_normalize"], [54, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[54, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "bernoulli"], [54, 0, 1, "", "beta"], [54, 0, 1, "", "dirichlet"], [54, 0, 1, "", "gamma"], [54, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[54, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[54, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[54, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[54, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "bincount"], [54, 0, 1, "", "corrcoef"], [54, 0, 1, "", "cov"], [54, 0, 1, "", "cummax"], [54, 0, 1, "", "cummin"], [54, 0, 1, "", "histogram"], [54, 0, 1, "", "igamma"], [54, 0, 1, "", "median"], [54, 0, 1, "", "nanmean"], [54, 0, 1, "", "nanmedian"], [54, 0, 1, "", "nanprod"], [54, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[54, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[55, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "all_equal"], [55, 0, 1, "", "array_equal"], [55, 0, 1, "", "assert_supports_inplace"], [55, 0, 1, "", "clip_matrix_norm"], [55, 0, 1, "", "clip_vector_norm"], [55, 0, 1, "", "default"], [55, 0, 1, "", "einops_rearrange"], [55, 0, 1, "", "einops_reduce"], [55, 0, 1, "", "einops_repeat"], [55, 0, 1, "", "exists"], [55, 0, 1, "", "fourier_encode"], [55, 0, 1, "", "gather"], [55, 0, 1, "", "gather_nd"], [55, 0, 1, "", "get_num_dims"], [55, 0, 1, "", "has_nans"], [55, 0, 1, "", "inplace_decrement"], [55, 0, 1, "", "inplace_increment"], [55, 0, 1, "", "inplace_update"], [55, 0, 1, "", "is_array"], [55, 0, 1, "", "is_ivy_array"], [55, 0, 1, "", "is_ivy_container"], [55, 0, 1, "", "is_native_array"], [55, 0, 1, "", "isin"], [55, 0, 1, "", "scatter_flat"], [55, 0, 1, "", "scatter_nd"], [55, 0, 1, "", "stable_divide"], [55, 0, 1, "", "stable_pow"], [55, 0, 1, "", "supports_inplace_updates"], [55, 0, 1, "", "to_file"], [55, 0, 1, "", "to_list"], [55, 0, 1, "", "to_numpy"], [55, 0, 1, "", "to_scalar"], [55, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[56, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "adam_step"], [56, 0, 1, "", "adam_update"], [56, 0, 1, "", "gradient_descent_update"], [56, 0, 1, "", "lamb_update"], [56, 0, 1, "", "lars_update"], [56, 0, 1, "", "optimizer_update"], [56, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[57, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[58, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "conv1d"], [58, 0, 1, "", "conv1d_transpose"], [58, 0, 1, "", "conv2d"], [58, 0, 1, "", "conv2d_transpose"], [58, 0, 1, "", "conv3d"], [58, 0, 1, "", "conv3d_transpose"], [58, 0, 1, "", "depthwise_conv2d"], [58, 0, 1, "", "dropout"], [58, 0, 1, "", "dropout1d"], [58, 0, 1, "", "dropout2d"], [58, 0, 1, "", "dropout3d"], [58, 0, 1, "", "linear"], [58, 0, 1, "", "lstm_update"], [58, 0, 1, "", "multi_head_attention"], [58, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[59, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "cholesky"], [59, 0, 1, "", "cross"], [59, 0, 1, "", "det"], [59, 0, 1, "", "diag"], [59, 0, 1, "", "diagonal"], [59, 0, 1, "", "eig"], [59, 0, 1, "", "eigh"], [59, 0, 1, "", "eigvalsh"], [59, 0, 1, "", "inner"], [59, 0, 1, "", "inv"], [59, 0, 1, "", "matmul"], [59, 0, 1, "", "matrix_norm"], [59, 0, 1, "", "matrix_power"], [59, 0, 1, "", "matrix_rank"], [59, 0, 1, "", "matrix_transpose"], [59, 0, 1, "", "outer"], [59, 0, 1, "", "pinv"], [59, 0, 1, "", "qr"], [59, 0, 1, "", "slogdet"], [59, 0, 1, "", "solve"], [59, 0, 1, "", "svd"], [59, 0, 1, "", "svdvals"], [59, 0, 1, "", "tensordot"], [59, 0, 1, "", "tensorsolve"], [59, 0, 1, "", "trace"], [59, 0, 1, "", "vander"], [59, 0, 1, "", "vecdot"], [59, 0, 1, "", "vector_norm"], [59, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[60, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "binary_cross_entropy"], [60, 0, 1, "", "cross_entropy"], [60, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[61, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "clip"], [61, 0, 1, "", "concat"], [61, 0, 1, "", "constant_pad"], [61, 0, 1, "", "expand_dims"], [61, 0, 1, "", "flip"], [61, 0, 1, "", "permute_dims"], [61, 0, 1, "", "repeat"], [61, 0, 1, "", "reshape"], [61, 0, 1, "", "roll"], [61, 0, 1, "", "split"], [61, 0, 1, "", "squeeze"], [61, 0, 1, "", "stack"], [61, 0, 1, "", "swapaxes"], [61, 0, 1, "", "tile"], [61, 0, 1, "", "unstack"], [61, 0, 1, "", "view"], [61, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[62, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[63, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "multinomial"], [63, 0, 1, "", "randint"], [63, 0, 1, "", "random_normal"], [63, 0, 1, "", "random_uniform"], [63, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[64, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "argmax"], [64, 0, 1, "", "argmin"], [64, 0, 1, "", "argwhere"], [64, 0, 1, "", "nonzero"], [64, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[65, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "unique_all"], [65, 0, 1, "", "unique_counts"], [65, 0, 1, "", "unique_inverse"], [65, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[66, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "argsort"], [66, 0, 1, "", "msort"], [66, 0, 1, "", "searchsorted"], [66, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[67, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "cumprod"], [67, 0, 1, "", "cumsum"], [67, 0, 1, "", "einsum"], [67, 0, 1, "", "max"], [67, 0, 1, "", "mean"], [67, 0, 1, "", "min"], [67, 0, 1, "", "prod"], [67, 0, 1, "", "std"], [67, 0, 1, "", "sum"], [67, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[68, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "all"], [68, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[69, 2, 1, "", "_wrap_function"], [69, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[70, 3, 0, "-", "activations"], [71, 3, 0, "-", "base"], [97, 3, 0, "-", "container"], [72, 3, 0, "-", "conversions"], [73, 3, 0, "-", "creation"], [74, 3, 0, "-", "data_type"], [75, 3, 0, "-", "device"], [76, 3, 0, "-", "elementwise"], [77, 3, 0, "-", "experimental"], [78, 3, 0, "-", "general"], [79, 3, 0, "-", "gradients"], [80, 3, 0, "-", "image"], [81, 3, 0, "-", "layers"], [82, 3, 0, "-", "linear_algebra"], [83, 3, 0, "-", "losses"], [84, 3, 0, "-", "manipulation"], [85, 3, 0, "-", "norms"], [86, 3, 0, "-", "random"], [87, 3, 0, "-", "searching"], [88, 3, 0, "-", "set"], [89, 3, 0, "-", "sorting"], [90, 3, 0, "-", "statistical"], [91, 3, 0, "-", "utility"], [92, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[70, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_gelu"], [70, 0, 1, "", "_static_hardswish"], [70, 0, 1, "", "_static_leaky_relu"], [70, 0, 1, "", "_static_log_softmax"], [70, 0, 1, "", "_static_mish"], [70, 0, 1, "", "_static_relu"], [70, 0, 1, "", "_static_sigmoid"], [70, 0, 1, "", "_static_softmax"], [70, 0, 1, "", "_static_softplus"], [70, 0, 1, "", "gelu"], [70, 0, 1, "", "hardswish"], [70, 0, 1, "", "leaky_relu"], [70, 0, 1, "", "log_softmax"], [70, 0, 1, "", "mish"], [70, 0, 1, "", "relu"], [70, 0, 1, "", "sigmoid"], [70, 0, 1, "", "softmax"], [70, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[71, 1, 1, "", "ContainerBase"], [71, 2, 1, "", "_is_jsonable"], [71, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[71, 0, 1, "", "__getitem__"], [71, 0, 1, "", "__init__"], [71, 0, 1, "", "__setitem__"], [71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [71, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [71, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [71, 0, 1, "", "_cont_concat_unify"], [71, 0, 1, "", "_cont_get_dev"], [71, 0, 1, "", "_cont_get_shape"], [71, 0, 1, "", "_cont_get_shapes"], [71, 5, 1, "", "_cont_ivy"], [71, 0, 1, "", "_cont_mean_unify"], [71, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [71, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [71, 0, 1, "", "_cont_slice_keys"], [71, 0, 1, "", "_cont_sum_unify"], [71, 0, 1, "", "_get_queue_item"], [71, 0, 1, "", "cont_all_false"], [71, 0, 1, "", "cont_all_key_chains"], [71, 0, 1, "", "cont_all_true"], [71, 0, 1, "", "cont_as_bools"], [71, 0, 1, "", "cont_assert_contains_sub_container"], [71, 0, 1, "", "cont_assert_contains_sub_structure"], [71, 0, 1, "", "cont_assert_identical"], [71, 0, 1, "", "cont_assert_identical_structure"], [71, 0, 1, "", "cont_at_key_chain"], [71, 0, 1, "", "cont_at_key_chains"], [71, 0, 1, "", "cont_at_keys"], [71, 0, 1, "", "cont_combine"], [71, 0, 1, "", "cont_common_key_chains"], [71, 5, 1, "", "cont_config"], [71, 0, 1, "", "cont_contains_sub_container"], [71, 0, 1, "", "cont_contains_sub_structure"], [71, 0, 1, "", "cont_copy"], [71, 0, 1, "", "cont_create_if_absent"], [71, 0, 1, "", "cont_cutoff_at_depth"], [71, 0, 1, "", "cont_cutoff_at_height"], [71, 0, 1, "", "cont_deep_copy"], [71, 5, 1, "", "cont_dev"], [71, 5, 1, "", "cont_dev_str"], [71, 0, 1, "", "cont_diff"], [71, 0, 1, "", "cont_duplicate_array_keychains"], [71, 0, 1, "", "cont_find_sub_container"], [71, 0, 1, "", "cont_find_sub_structure"], [71, 0, 1, "", "cont_flatten_key_chain"], [71, 0, 1, "", "cont_flatten_key_chains"], [71, 0, 1, "", "cont_format_key_chains"], [71, 0, 1, "", "cont_from_disk_as_hdf5"], [71, 0, 1, "", "cont_from_disk_as_json"], [71, 0, 1, "", "cont_from_disk_as_pickled"], [71, 0, 1, "", "cont_from_flat_list"], [71, 0, 1, "", "cont_handle_inplace"], [71, 0, 1, "", "cont_has_key"], [71, 0, 1, "", "cont_has_key_chain"], [71, 0, 1, "", "cont_identical"], [71, 0, 1, "", "cont_identical_array_shapes"], [71, 0, 1, "", "cont_identical_configs"], [71, 0, 1, "", "cont_identical_structure"], [71, 0, 1, "", "cont_if_exists"], [71, 0, 1, "", "cont_inplace_update"], [71, 5, 1, "", "cont_ivy"], [71, 0, 1, "", "cont_key_chains_containing"], [71, 0, 1, "", "cont_list_join"], [71, 0, 1, "", "cont_list_stack"], [71, 0, 1, "", "cont_load"], [71, 0, 1, "", "cont_map"], [71, 0, 1, "", "cont_map_sub_conts"], [71, 5, 1, "", "cont_max_depth"], [71, 0, 1, "", "cont_multi_map"], [71, 0, 1, "", "cont_multi_map_in_function"], [71, 0, 1, "", "cont_num_arrays"], [71, 0, 1, "", "cont_overwrite_at_key_chain"], [71, 0, 1, "", "cont_overwrite_at_key_chains"], [71, 0, 1, "", "cont_prune_empty"], [71, 0, 1, "", "cont_prune_key_chain"], [71, 0, 1, "", "cont_prune_key_chains"], [71, 0, 1, "", "cont_prune_key_from_key_chains"], [71, 0, 1, "", "cont_prune_keys"], [71, 0, 1, "", "cont_prune_keys_from_key_chains"], [71, 0, 1, "", "cont_reduce"], [71, 0, 1, "", "cont_remove_key_length_limit"], [71, 0, 1, "", "cont_remove_print_limit"], [71, 0, 1, "", "cont_reshape_like"], [71, 0, 1, "", "cont_restructure"], [71, 0, 1, "", "cont_restructure_key_chains"], [71, 0, 1, "", "cont_save"], [71, 0, 1, "", "cont_set_at_key_chain"], [71, 0, 1, "", "cont_set_at_key_chains"], [71, 0, 1, "", "cont_set_at_keys"], [71, 5, 1, "", "cont_shape"], [71, 5, 1, "", "cont_shapes"], [71, 0, 1, "", "cont_show"], [71, 0, 1, "", "cont_show_sub_container"], [71, 0, 1, "", "cont_size_ordered_arrays"], [71, 0, 1, "", "cont_slice_keys"], [71, 0, 1, "", "cont_slice_via_key"], [71, 0, 1, "", "cont_sort_by_key"], [71, 0, 1, "", "cont_structural_diff"], [71, 0, 1, "", "cont_to_dict"], [71, 0, 1, "", "cont_to_disk_as_hdf5"], [71, 0, 1, "", "cont_to_disk_as_json"], [71, 0, 1, "", "cont_to_disk_as_pickled"], [71, 0, 1, "", "cont_to_flat_list"], [71, 0, 1, "", "cont_to_iterator"], [71, 0, 1, "", "cont_to_iterator_keys"], [71, 0, 1, "", "cont_to_iterator_values"], [71, 0, 1, "", "cont_to_jsonable"], [71, 0, 1, "", "cont_to_nested_list"], [71, 0, 1, "", "cont_to_raw"], [71, 0, 1, "", "cont_trim_key"], [71, 0, 1, "", "cont_try_kc"], [71, 0, 1, "", "cont_unify"], [71, 0, 1, "", "cont_unstack_conts"], [71, 0, 1, "", "cont_update_config"], [71, 0, 1, "", "cont_with_default_key_color"], [71, 0, 1, "", "cont_with_entries_as_lists"], [71, 0, 1, "", "cont_with_ivy_backend"], [71, 0, 1, "", "cont_with_key_length_limit"], [71, 0, 1, "", "cont_with_print_indent"], [71, 0, 1, "", "cont_with_print_limit"], [71, 0, 1, "", "cont_with_print_line_spacing"], [71, 5, 1, "", "dynamic_backend"], [71, 0, 1, "", "h5_file_size"], [71, 0, 1, "", "shuffle_h5_file"], [71, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[97, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[97, 0, 1, "", "__abs__"], [97, 0, 1, "", "__add__"], [97, 0, 1, "", "__eq__"], [97, 0, 1, "", "__ge__"], [97, 0, 1, "", "__gt__"], [97, 0, 1, "", "__init__"], [97, 0, 1, "", "__le__"], [97, 0, 1, "", "__lt__"], [97, 0, 1, "", "__ne__"], [97, 0, 1, "", "__pow__"], [97, 0, 1, "", "__radd__"], [97, 0, 1, "", "__rrshift__"], [97, 0, 1, "", "__rshift__"], [97, 0, 1, "", "__rsub__"], [97, 0, 1, "", "__sub__"], [97, 0, 1, "", "__truediv__"], [97, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[72, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_to_ivy"], [72, 0, 1, "", "_static_to_native"], [72, 0, 1, "", "to_ivy"], [72, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[73, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_arange"], [73, 0, 1, "", "_static_asarray"], [73, 0, 1, "", "_static_copy_array"], [73, 0, 1, "", "_static_empty"], [73, 0, 1, "", "_static_empty_like"], [73, 0, 1, "", "_static_eye"], [73, 0, 1, "", "_static_from_dlpack"], [73, 0, 1, "", "_static_full"], [73, 0, 1, "", "_static_full_like"], [73, 0, 1, "", "_static_linspace"], [73, 0, 1, "", "_static_logspace"], [73, 0, 1, "", "_static_meshgrid"], [73, 0, 1, "", "_static_native_array"], [73, 0, 1, "", "_static_one_hot"], [73, 0, 1, "", "_static_ones"], [73, 0, 1, "", "_static_ones_like"], [73, 0, 1, "", "_static_tril"], [73, 0, 1, "", "_static_triu"], [73, 0, 1, "", "_static_zeros"], [73, 0, 1, "", "_static_zeros_like"], [73, 0, 1, "", "asarray"], [73, 0, 1, "", "copy_array"], [73, 0, 1, "", "empty_like"], [73, 0, 1, "", "from_dlpack"], [73, 0, 1, "", "frombuffer"], [73, 0, 1, "", "full_like"], [73, 0, 1, "", "linspace"], [73, 0, 1, "", "logspace"], [73, 0, 1, "", "meshgrid"], [73, 0, 1, "", "native_array"], [73, 0, 1, "", "one_hot"], [73, 0, 1, "", "ones_like"], [73, 0, 1, "", "static_frombuffer"], [73, 0, 1, "", "static_triu_indices"], [73, 0, 1, "", "tril"], [73, 0, 1, "", "triu"], [73, 0, 1, "", "triu_indices"], [73, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[74, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_astype"], [74, 0, 1, "", "_static_broadcast_arrays"], [74, 0, 1, "", "_static_broadcast_to"], [74, 0, 1, "", "_static_can_cast"], [74, 0, 1, "", "_static_default_complex_dtype"], [74, 0, 1, "", "_static_default_float_dtype"], [74, 0, 1, "", "_static_dtype"], [74, 0, 1, "", "_static_finfo"], [74, 0, 1, "", "_static_function_supported_dtypes"], [74, 0, 1, "", "_static_function_unsupported_dtypes"], [74, 0, 1, "", "_static_iinfo"], [74, 0, 1, "", "_static_is_bool_dtype"], [74, 0, 1, "", "_static_is_complex_dtype"], [74, 0, 1, "", "_static_is_float_dtype"], [74, 0, 1, "", "_static_is_int_dtype"], [74, 0, 1, "", "_static_is_uint_dtype"], [74, 0, 1, "", "_static_result_type"], [74, 0, 1, "", "astype"], [74, 0, 1, "", "broadcast_arrays"], [74, 0, 1, "", "broadcast_to"], [74, 0, 1, "", "can_cast"], [74, 0, 1, "", "dtype"], [74, 0, 1, "", "finfo"], [74, 0, 1, "", "iinfo"], [74, 0, 1, "", "is_bool_dtype"], [74, 0, 1, "", "is_complex_dtype"], [74, 0, 1, "", "is_float_dtype"], [74, 0, 1, "", "is_int_dtype"], [74, 0, 1, "", "is_uint_dtype"], [74, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[75, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_dev"], [75, 0, 1, "", "_static_to_device"], [75, 0, 1, "", "dev"], [75, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[76, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_abs"], [76, 0, 1, "", "_static_acos"], [76, 0, 1, "", "_static_acosh"], [76, 0, 1, "", "_static_add"], [76, 0, 1, "", "_static_asin"], [76, 0, 1, "", "_static_asinh"], [76, 0, 1, "", "_static_atan"], [76, 0, 1, "", "_static_atan2"], [76, 0, 1, "", "_static_atanh"], [76, 0, 1, "", "_static_bitwise_and"], [76, 0, 1, "", "_static_bitwise_invert"], [76, 0, 1, "", "_static_bitwise_left_shift"], [76, 0, 1, "", "_static_bitwise_or"], [76, 0, 1, "", "_static_bitwise_right_shift"], [76, 0, 1, "", "_static_bitwise_xor"], [76, 0, 1, "", "_static_ceil"], [76, 0, 1, "", "_static_cos"], [76, 0, 1, "", "_static_cosh"], [76, 0, 1, "", "_static_deg2rad"], [76, 0, 1, "", "_static_divide"], [76, 0, 1, "", "_static_equal"], [76, 0, 1, "", "_static_erf"], [76, 0, 1, "", "_static_exp"], [76, 0, 1, "", "_static_expm1"], [76, 0, 1, "", "_static_floor"], [76, 0, 1, "", "_static_floor_divide"], [76, 0, 1, "", "_static_greater"], [76, 0, 1, "", "_static_greater_equal"], [76, 0, 1, "", "_static_isfinite"], [76, 0, 1, "", "_static_isinf"], [76, 0, 1, "", "_static_isnan"], [76, 0, 1, "", "_static_isreal"], [76, 0, 1, "", "_static_lcm"], [76, 0, 1, "", "_static_less"], [76, 0, 1, "", "_static_less_equal"], [76, 0, 1, "", "_static_log"], [76, 0, 1, "", "_static_log10"], [76, 0, 1, "", "_static_log1p"], [76, 0, 1, "", "_static_log2"], [76, 0, 1, "", "_static_logaddexp"], [76, 0, 1, "", "_static_logical_and"], [76, 0, 1, "", "_static_logical_not"], [76, 0, 1, "", "_static_logical_or"], [76, 0, 1, "", "_static_logical_xor"], [76, 0, 1, "", "_static_maximum"], [76, 0, 1, "", "_static_minimum"], [76, 0, 1, "", "_static_multiply"], [76, 0, 1, "", "_static_negative"], [76, 0, 1, "", "_static_not_equal"], [76, 0, 1, "", "_static_positive"], [76, 0, 1, "", "_static_pow"], [76, 0, 1, "", "_static_rad2deg"], [76, 0, 1, "", "_static_reciprocal"], [76, 0, 1, "", "_static_remainder"], [76, 0, 1, "", "_static_round"], [76, 0, 1, "", "_static_sign"], [76, 0, 1, "", "_static_sin"], [76, 0, 1, "", "_static_sinh"], [76, 0, 1, "", "_static_sqrt"], [76, 0, 1, "", "_static_square"], [76, 0, 1, "", "_static_subtract"], [76, 0, 1, "", "_static_tan"], [76, 0, 1, "", "_static_tanh"], [76, 0, 1, "", "_static_trapz"], [76, 0, 1, "", "_static_trunc"], [76, 0, 1, "", "_static_trunc_divide"], [76, 0, 1, "", "abs"], [76, 0, 1, "", "acos"], [76, 0, 1, "", "acosh"], [76, 0, 1, "", "add"], [76, 0, 1, "", "angle"], [76, 0, 1, "", "asin"], [76, 0, 1, "", "asinh"], [76, 0, 1, "", "atan"], [76, 0, 1, "", "atan2"], [76, 0, 1, "", "atanh"], [76, 0, 1, "", "bitwise_and"], [76, 0, 1, "", "bitwise_invert"], [76, 0, 1, "", "bitwise_left_shift"], [76, 0, 1, "", "bitwise_or"], [76, 0, 1, "", "bitwise_right_shift"], [76, 0, 1, "", "bitwise_xor"], [76, 0, 1, "", "ceil"], [76, 0, 1, "", "cos"], [76, 0, 1, "", "cosh"], [76, 0, 1, "", "deg2rad"], [76, 0, 1, "", "divide"], [76, 0, 1, "", "equal"], [76, 0, 1, "", "erf"], [76, 0, 1, "", "exp"], [76, 0, 1, "", "exp2"], [76, 0, 1, "", "expm1"], [76, 0, 1, "", "floor"], [76, 0, 1, "", "floor_divide"], [76, 0, 1, "", "fmin"], [76, 0, 1, "", "gcd"], [76, 0, 1, "", "greater"], [76, 0, 1, "", "greater_equal"], [76, 0, 1, "", "imag"], [76, 0, 1, "", "isfinite"], [76, 0, 1, "", "isinf"], [76, 0, 1, "", "isnan"], [76, 0, 1, "", "isreal"], [76, 0, 1, "", "lcm"], [76, 0, 1, "", "less"], [76, 0, 1, "", "less_equal"], [76, 0, 1, "", "log"], [76, 0, 1, "", "log10"], [76, 0, 1, "", "log1p"], [76, 0, 1, "", "log2"], [76, 0, 1, "", "logaddexp"], [76, 0, 1, "", "logaddexp2"], [76, 0, 1, "", "logical_and"], [76, 0, 1, "", "logical_not"], [76, 0, 1, "", "logical_or"], [76, 0, 1, "", "logical_xor"], [76, 0, 1, "", "maximum"], [76, 0, 1, "", "minimum"], [76, 0, 1, "", "multiply"], [76, 0, 1, "", "nan_to_num"], [76, 0, 1, "", "negative"], [76, 0, 1, "", "not_equal"], [76, 0, 1, "", "positive"], [76, 0, 1, "", "pow"], [76, 0, 1, "", "rad2deg"], [76, 0, 1, "", "real"], [76, 0, 1, "", "reciprocal"], [76, 0, 1, "", "remainder"], [76, 0, 1, "", "round"], [76, 0, 1, "", "sign"], [76, 0, 1, "", "sin"], [76, 0, 1, "", "sinh"], [76, 0, 1, "", "sqrt"], [76, 0, 1, "", "square"], [76, 0, 1, "", "static_angle"], [76, 0, 1, "", "static_exp2"], [76, 0, 1, "", "static_fmin"], [76, 0, 1, "", "static_gcd"], [76, 0, 1, "", "static_imag"], [76, 0, 1, "", "static_logaddexp2"], [76, 0, 1, "", "static_nan_to_num"], [76, 0, 1, "", "static_real"], [76, 0, 1, "", "subtract"], [76, 0, 1, "", "tan"], [76, 0, 1, "", "tanh"], [76, 0, 1, "", "trapz"], [76, 0, 1, "", "trunc"], [76, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[77, 3, 0, "-", "activations"], [77, 3, 0, "-", "conversions"], [77, 3, 0, "-", "creation"], [77, 3, 0, "-", "data_type"], [77, 3, 0, "-", "device"], [77, 3, 0, "-", "elementwise"], [77, 3, 0, "-", "general"], [77, 3, 0, "-", "gradients"], [77, 3, 0, "-", "image"], [77, 3, 0, "-", "layers"], [77, 3, 0, "-", "linear_algebra"], [77, 3, 0, "-", "losses"], [77, 3, 0, "-", "manipulation"], [77, 3, 0, "-", "norms"], [77, 3, 0, "-", "random"], [77, 3, 0, "-", "searching"], [77, 3, 0, "-", "set"], [77, 3, 0, "-", "sorting"], [77, 3, 0, "-", "statistical"], [77, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[77, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_elu"], [77, 0, 1, "", "_static_silu"], [77, 0, 1, "", "elu"], [77, 0, 1, "", "logit"], [77, 0, 1, "", "logsigmoid"], [77, 0, 1, "", "prelu"], [77, 0, 1, "", "relu6"], [77, 0, 1, "", "selu"], [77, 0, 1, "", "silu"], [77, 0, 1, "", "static_logit"], [77, 0, 1, "", "static_logsigmoid"], [77, 0, 1, "", "static_prelu"], [77, 0, 1, "", "static_relu6"], [77, 0, 1, "", "static_selu"], [77, 0, 1, "", "static_thresholded_relu"], [77, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[77, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[77, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_trilu"], [77, 0, 1, "", "blackman_window"], [77, 0, 1, "", "eye_like"], [77, 0, 1, "", "hamming_window"], [77, 0, 1, "", "hann_window"], [77, 0, 1, "", "kaiser_bessel_derived_window"], [77, 0, 1, "", "kaiser_window"], [77, 0, 1, "", "mel_weight_matrix"], [77, 0, 1, "", "static_blackman_window"], [77, 0, 1, "", "static_eye_like"], [77, 0, 1, "", "static_hamming_window"], [77, 0, 1, "", "static_hann_window"], [77, 0, 1, "", "static_kaiser_bessel_derived_window"], [77, 0, 1, "", "static_kaiser_window"], [77, 0, 1, "", "static_mel_weight_matrix"], [77, 0, 1, "", "static_tril_indices"], [77, 0, 1, "", "static_unsorted_segment_min"], [77, 0, 1, "", "static_unsorted_segment_sum"], [77, 0, 1, "", "static_vorbis_window"], [77, 0, 1, "", "tril_indices"], [77, 0, 1, "", "trilu"], [77, 0, 1, "", "unsorted_segment_min"], [77, 0, 1, "", "unsorted_segment_sum"], [77, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[77, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[77, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[77, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "allclose"], [77, 0, 1, "", "binarizer"], [77, 0, 1, "", "conj"], [77, 0, 1, "", "copysign"], [77, 0, 1, "", "count_nonzero"], [77, 0, 1, "", "diff"], [77, 0, 1, "", "digamma"], [77, 0, 1, "", "fix"], [77, 0, 1, "", "float_power"], [77, 0, 1, "", "fmax"], [77, 0, 1, "", "fmod"], [77, 0, 1, "", "frexp"], [77, 0, 1, "", "gradient"], [77, 0, 1, "", "hypot"], [77, 0, 1, "", "isclose"], [77, 0, 1, "", "ldexp"], [77, 0, 1, "", "lerp"], [77, 0, 1, "", "modf"], [77, 0, 1, "", "nansum"], [77, 0, 1, "", "nextafter"], [77, 0, 1, "", "signbit"], [77, 0, 1, "", "sinc"], [77, 0, 1, "", "sparsify_tensor"], [77, 0, 1, "", "static_allclose"], [77, 0, 1, "", "static_binarizer"], [77, 0, 1, "", "static_conj"], [77, 0, 1, "", "static_copysign"], [77, 0, 1, "", "static_count_nonzero"], [77, 0, 1, "", "static_diff"], [77, 0, 1, "", "static_digamma"], [77, 0, 1, "", "static_fix"], [77, 0, 1, "", "static_float_power"], [77, 0, 1, "", "static_fmax"], [77, 0, 1, "", "static_fmod"], [77, 0, 1, "", "static_frexp"], [77, 0, 1, "", "static_gradient"], [77, 0, 1, "", "static_hypot"], [77, 0, 1, "", "static_isclose"], [77, 0, 1, "", "static_ldexp"], [77, 0, 1, "", "static_lerp"], [77, 0, 1, "", "static_modf"], [77, 0, 1, "", "static_nansum"], [77, 0, 1, "", "static_nextafter"], [77, 0, 1, "", "static_signbit"], [77, 0, 1, "", "static_sinc"], [77, 0, 1, "", "static_sparsify_tensor"], [77, 0, 1, "", "static_xlogy"], [77, 0, 1, "", "static_zeta"], [77, 0, 1, "", "xlogy"], [77, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[77, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_reduce"], [77, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[77, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[77, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[77, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_fft"], [77, 0, 1, "", "adaptive_avg_pool1d"], [77, 0, 1, "", "adaptive_avg_pool2d"], [77, 0, 1, "", "adaptive_max_pool2d"], [77, 0, 1, "", "avg_pool1d"], [77, 0, 1, "", "avg_pool2d"], [77, 0, 1, "", "avg_pool3d"], [77, 0, 1, "", "dct"], [77, 0, 1, "", "dft"], [77, 0, 1, "", "embedding"], [77, 0, 1, "", "fft"], [77, 0, 1, "", "idct"], [77, 0, 1, "", "ifft"], [77, 0, 1, "", "ifftn"], [77, 0, 1, "", "interpolate"], [77, 0, 1, "", "max_pool1d"], [77, 0, 1, "", "max_pool2d"], [77, 0, 1, "", "max_pool3d"], [77, 0, 1, "", "rfftn"], [77, 0, 1, "", "static_adaptive_avg_pool1d"], [77, 0, 1, "", "static_adaptive_avg_pool2d"], [77, 0, 1, "", "static_adaptive_max_pool2d"], [77, 0, 1, "", "static_avg_pool1d"], [77, 0, 1, "", "static_avg_pool2d"], [77, 0, 1, "", "static_avg_pool3d"], [77, 0, 1, "", "static_dct"], [77, 0, 1, "", "static_dft"], [77, 0, 1, "", "static_embedding"], [77, 0, 1, "", "static_idct"], [77, 0, 1, "", "static_ifft"], [77, 0, 1, "", "static_ifftn"], [77, 0, 1, "", "static_interpolate"], [77, 0, 1, "", "static_max_pool1d"], [77, 0, 1, "", "static_max_pool2d"], [77, 0, 1, "", "static_max_pool3d"], [77, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[77, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "adjoint"], [77, 0, 1, "", "cond"], [77, 0, 1, "", "diagflat"], [77, 0, 1, "", "dot"], [77, 0, 1, "", "eig"], [77, 0, 1, "", "eigh_tridiagonal"], [77, 0, 1, "", "eigvals"], [77, 0, 1, "", "initialize_tucker"], [77, 0, 1, "", "kron"], [77, 0, 1, "", "make_svd_non_negative"], [77, 0, 1, "", "matrix_exp"], [77, 0, 1, "", "mode_dot"], [77, 0, 1, "", "multi_dot"], [77, 0, 1, "", "multi_mode_dot"], [77, 0, 1, "", "partial_tucker"], [77, 0, 1, "", "static_adjoint"], [77, 0, 1, "", "static_cond"], [77, 0, 1, "", "static_diagflat"], [77, 0, 1, "", "static_dot"], [77, 0, 1, "", "static_eig"], [77, 0, 1, "", "static_eigh_tridiagonal"], [77, 0, 1, "", "static_eigvals"], [77, 0, 1, "", "static_initialize_tucker"], [77, 0, 1, "", "static_kron"], [77, 0, 1, "", "static_make_svd_non_negative"], [77, 0, 1, "", "static_matrix_exp"], [77, 0, 1, "", "static_mode_dot"], [77, 0, 1, "", "static_multi_dot"], [77, 0, 1, "", "static_multi_mode_dot"], [77, 0, 1, "", "static_partial_tucker"], [77, 0, 1, "", "static_svd_flip"], [77, 0, 1, "", "static_truncated_svd"], [77, 0, 1, "", "static_tucker"], [77, 0, 1, "", "svd_flip"], [77, 0, 1, "", "truncated_svd"], [77, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[77, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_huber_loss"], [77, 0, 1, "", "_static_l1_loss"], [77, 0, 1, "", "_static_smooth_l1_loss"], [77, 0, 1, "", "_static_soft_margin_loss"], [77, 0, 1, "", "huber_loss"], [77, 0, 1, "", "l1_loss"], [77, 0, 1, "", "smooth_l1_loss"], [77, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[77, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_fill_diagonal"], [77, 0, 1, "", "_static_unique_consecutive"], [77, 0, 1, "", "as_strided"], [77, 0, 1, "", "associative_scan"], [77, 0, 1, "", "atleast_1d"], [77, 0, 1, "", "atleast_2d"], [77, 0, 1, "", "atleast_3d"], [77, 0, 1, "", "broadcast_shapes"], [77, 0, 1, "", "concat_from_sequence"], [77, 0, 1, "", "dsplit"], [77, 0, 1, "", "dstack"], [77, 0, 1, "", "expand"], [77, 0, 1, "", "fill_diagonal"], [77, 0, 1, "", "flatten"], [77, 0, 1, "", "fliplr"], [77, 0, 1, "", "flipud"], [77, 0, 1, "", "fold"], [77, 0, 1, "", "heaviside"], [77, 0, 1, "", "hsplit"], [77, 0, 1, "", "hstack"], [77, 0, 1, "", "i0"], [77, 0, 1, "", "matricize"], [77, 0, 1, "", "moveaxis"], [77, 0, 1, "", "pad"], [77, 0, 1, "", "partial_fold"], [77, 0, 1, "", "partial_tensor_to_vec"], [77, 0, 1, "", "partial_unfold"], [77, 0, 1, "", "partial_vec_to_tensor"], [77, 0, 1, "", "rot90"], [77, 0, 1, "", "soft_thresholding"], [77, 0, 1, "", "static_as_strided"], [77, 0, 1, "", "static_atleast_1d"], [77, 0, 1, "", "static_atleast_2d"], [77, 0, 1, "", "static_atleast_3d"], [77, 0, 1, "", "static_broadcast_shapes"], [77, 0, 1, "", "static_concat_from_sequence"], [77, 0, 1, "", "static_dsplit"], [77, 0, 1, "", "static_dstack"], [77, 0, 1, "", "static_expand"], [77, 0, 1, "", "static_flatten"], [77, 0, 1, "", "static_fliplr"], [77, 0, 1, "", "static_flipud"], [77, 0, 1, "", "static_fold"], [77, 0, 1, "", "static_heaviside"], [77, 0, 1, "", "static_hsplit"], [77, 0, 1, "", "static_hstack"], [77, 0, 1, "", "static_i0"], [77, 0, 1, "", "static_matricize"], [77, 0, 1, "", "static_moveaxis"], [77, 0, 1, "", "static_pad"], [77, 0, 1, "", "static_partial_fold"], [77, 0, 1, "", "static_partial_tensor_to_vec"], [77, 0, 1, "", "static_partial_unfold"], [77, 0, 1, "", "static_partial_vec_to_tensor"], [77, 0, 1, "", "static_rot90"], [77, 0, 1, "", "static_soft_thresholding"], [77, 0, 1, "", "static_take_along_axis"], [77, 0, 1, "", "static_top_k"], [77, 0, 1, "", "static_unfold"], [77, 0, 1, "", "static_vsplit"], [77, 0, 1, "", "static_vstack"], [77, 0, 1, "", "take_along_axis"], [77, 0, 1, "", "top_k"], [77, 0, 1, "", "unfold"], [77, 0, 1, "", "unique_consecutive"], [77, 0, 1, "", "vsplit"], [77, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[77, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "batch_norm"], [77, 0, 1, "", "group_norm"], [77, 0, 1, "", "instance_norm"], [77, 0, 1, "", "l1_normalize"], [77, 0, 1, "", "l2_normalize"], [77, 0, 1, "", "lp_normalize"], [77, 0, 1, "", "static_batch_norm"], [77, 0, 1, "", "static_group_norm"], [77, 0, 1, "", "static_instance_norm"], [77, 0, 1, "", "static_l1_normalize"], [77, 0, 1, "", "static_l2_normalize"], [77, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[77, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "bernoulli"], [77, 0, 1, "", "beta"], [77, 0, 1, "", "dirichlet"], [77, 0, 1, "", "gamma"], [77, 0, 1, "", "poisson"], [77, 0, 1, "", "static_bernoulli"], [77, 0, 1, "", "static_beta"], [77, 0, 1, "", "static_dirichlet"], [77, 0, 1, "", "static_gamma"], [77, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[77, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "static_unravel_index"], [77, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[77, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[77, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "invert_permutation"], [77, 0, 1, "", "lexsort"], [77, 0, 1, "", "static_invert_permutation"], [77, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[77, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_cummax"], [77, 0, 1, "", "_static_cummin"], [77, 0, 1, "", "bincount"], [77, 0, 1, "", "corrcoef"], [77, 0, 1, "", "cov"], [77, 0, 1, "", "cummax"], [77, 0, 1, "", "cummin"], [77, 0, 1, "", "histogram"], [77, 0, 1, "", "igamma"], [77, 0, 1, "", "median"], [77, 0, 1, "", "nanmean"], [77, 0, 1, "", "nanmedian"], [77, 0, 1, "", "nanprod"], [77, 0, 1, "", "quantile"], [77, 0, 1, "", "static_bincount"], [77, 0, 1, "", "static_corrcoef"], [77, 0, 1, "", "static_cov"], [77, 0, 1, "", "static_histogram"], [77, 0, 1, "", "static_igamma"], [77, 0, 1, "", "static_median"], [77, 0, 1, "", "static_nanmean"], [77, 0, 1, "", "static_nanmedian"], [77, 0, 1, "", "static_nanprod"], [77, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[77, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "optional_get_element"], [77, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[78, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_all_equal"], [78, 0, 1, "", "_static_array_equal"], [78, 0, 1, "", "_static_assert_supports_inplace"], [78, 0, 1, "", "_static_clip_matrix_norm"], [78, 0, 1, "", "_static_clip_vector_norm"], [78, 0, 1, "", "_static_einops_rearrange"], [78, 0, 1, "", "_static_einops_reduce"], [78, 0, 1, "", "_static_einops_repeat"], [78, 0, 1, "", "_static_exists"], [78, 0, 1, "", "_static_fourier_encode"], [78, 0, 1, "", "_static_gather"], [78, 0, 1, "", "_static_gather_nd"], [78, 0, 1, "", "_static_get_num_dims"], [78, 0, 1, "", "_static_has_nans"], [78, 0, 1, "", "_static_inplace_decrement"], [78, 0, 1, "", "_static_inplace_increment"], [78, 0, 1, "", "_static_inplace_update"], [78, 0, 1, "", "_static_is_array"], [78, 0, 1, "", "_static_is_ivy_array"], [78, 0, 1, "", "_static_is_native_array"], [78, 0, 1, "", "_static_scatter_flat"], [78, 0, 1, "", "_static_scatter_nd"], [78, 0, 1, "", "_static_stable_divide"], [78, 0, 1, "", "_static_stable_pow"], [78, 0, 1, "", "_static_supports_inplace_updates"], [78, 0, 1, "", "_static_to_list"], [78, 0, 1, "", "_static_to_numpy"], [78, 0, 1, "", "_static_to_scalar"], [78, 0, 1, "", "_static_value_is_nan"], [78, 0, 1, "", "all_equal"], [78, 0, 1, "", "array_equal"], [78, 0, 1, "", "assert_supports_inplace"], [78, 0, 1, "", "clip_matrix_norm"], [78, 0, 1, "", "clip_vector_norm"], [78, 0, 1, "", "einops_rearrange"], [78, 0, 1, "", "einops_reduce"], [78, 0, 1, "", "einops_repeat"], [78, 0, 1, "", "exists"], [78, 0, 1, "", "fourier_encode"], [78, 0, 1, "", "gather"], [78, 0, 1, "", "gather_nd"], [78, 0, 1, "", "get_num_dims"], [78, 0, 1, "", "has_nans"], [78, 0, 1, "", "inplace_decrement"], [78, 0, 1, "", "inplace_increment"], [78, 0, 1, "", "inplace_update"], [78, 0, 1, "", "is_array"], [78, 0, 1, "", "is_ivy_array"], [78, 0, 1, "", "is_native_array"], [78, 0, 1, "", "isin"], [78, 0, 1, "", "itemsize"], [78, 0, 1, "", "scatter_flat"], [78, 0, 1, "", "scatter_nd"], [78, 0, 1, "", "stable_divide"], [78, 0, 1, "", "stable_pow"], [78, 0, 1, "", "static_isin"], [78, 0, 1, "", "static_itemsize"], [78, 0, 1, "", "static_strides"], [78, 0, 1, "", "strides"], [78, 0, 1, "", "supports_inplace_updates"], [78, 0, 1, "", "to_list"], [78, 0, 1, "", "to_numpy"], [78, 0, 1, "", "to_scalar"], [78, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[79, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_stop_gradient"], [79, 0, 1, "", "adam_step"], [79, 0, 1, "", "adam_update"], [79, 0, 1, "", "gradient_descent_update"], [79, 0, 1, "", "lamb_update"], [79, 0, 1, "", "lars_update"], [79, 0, 1, "", "optimizer_update"], [79, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[80, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[81, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_conv1d"], [81, 0, 1, "", "_static_conv1d_transpose"], [81, 0, 1, "", "_static_conv2d"], [81, 0, 1, "", "_static_conv2d_transpose"], [81, 0, 1, "", "_static_conv3d"], [81, 0, 1, "", "_static_conv3d_transpose"], [81, 0, 1, "", "_static_depthwise_conv2d"], [81, 0, 1, "", "_static_dropout"], [81, 0, 1, "", "_static_dropout1d"], [81, 0, 1, "", "_static_dropout2d"], [81, 0, 1, "", "_static_dropout3d"], [81, 0, 1, "", "_static_linear"], [81, 0, 1, "", "_static_lstm_update"], [81, 0, 1, "", "_static_multi_head_attention"], [81, 0, 1, "", "_static_reduce_window"], [81, 0, 1, "", "_static_scaled_dot_product_attention"], [81, 0, 1, "", "conv1d"], [81, 0, 1, "", "conv1d_transpose"], [81, 0, 1, "", "conv2d"], [81, 0, 1, "", "conv2d_transpose"], [81, 0, 1, "", "conv3d"], [81, 0, 1, "", "conv3d_transpose"], [81, 0, 1, "", "depthwise_conv2d"], [81, 0, 1, "", "dropout"], [81, 0, 1, "", "dropout1d"], [81, 0, 1, "", "dropout2d"], [81, 0, 1, "", "dropout3d"], [81, 0, 1, "", "linear"], [81, 0, 1, "", "lstm_update"], [81, 0, 1, "", "multi_head_attention"], [81, 0, 1, "", "reduce_window"], [81, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[82, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_cholesky"], [82, 0, 1, "", "_static_cross"], [82, 0, 1, "", "_static_det"], [82, 0, 1, "", "_static_diag"], [82, 0, 1, "", "_static_diagonal"], [82, 0, 1, "", "_static_eigh"], [82, 0, 1, "", "_static_eigvalsh"], [82, 0, 1, "", "_static_inner"], [82, 0, 1, "", "_static_inv"], [82, 0, 1, "", "_static_matmul"], [82, 0, 1, "", "_static_matrix_norm"], [82, 0, 1, "", "_static_matrix_power"], [82, 0, 1, "", "_static_matrix_rank"], [82, 0, 1, "", "_static_matrix_transpose"], [82, 0, 1, "", "_static_outer"], [82, 0, 1, "", "_static_pinv"], [82, 0, 1, "", "_static_qr"], [82, 0, 1, "", "_static_slogdet"], [82, 0, 1, "", "_static_solve"], [82, 0, 1, "", "_static_svd"], [82, 0, 1, "", "_static_svdvals"], [82, 0, 1, "", "_static_tensordot"], [82, 0, 1, "", "_static_tensorsolve"], [82, 0, 1, "", "_static_trace"], [82, 0, 1, "", "_static_vander"], [82, 0, 1, "", "_static_vecdot"], [82, 0, 1, "", "_static_vector_norm"], [82, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [82, 0, 1, "", "cholesky"], [82, 0, 1, "", "cross"], [82, 0, 1, "", "det"], [82, 0, 1, "", "diag"], [82, 0, 1, "", "diagonal"], [82, 0, 1, "", "eigh"], [82, 0, 1, "", "eigvalsh"], [82, 0, 1, "", "inner"], [82, 0, 1, "", "inv"], [82, 0, 1, "", "matmul"], [82, 0, 1, "", "matrix_norm"], [82, 0, 1, "", "matrix_power"], [82, 0, 1, "", "matrix_rank"], [82, 0, 1, "", "matrix_transpose"], [82, 0, 1, "", "outer"], [82, 0, 1, "", "pinv"], [82, 0, 1, "", "qr"], [82, 0, 1, "", "slogdet"], [82, 0, 1, "", "solve"], [82, 0, 1, "", "svd"], [82, 0, 1, "", "svdvals"], [82, 0, 1, "", "tensordot"], [82, 0, 1, "", "tensorsolve"], [82, 0, 1, "", "trace"], [82, 0, 1, "", "vander"], [82, 0, 1, "", "vecdot"], [82, 0, 1, "", "vector_norm"], [82, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[83, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_binary_cross_entropy"], [83, 0, 1, "", "_static_cross_entropy"], [83, 0, 1, "", "_static_sparse_cross_entropy"], [83, 0, 1, "", "binary_cross_entropy"], [83, 0, 1, "", "cross_entropy"], [83, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[84, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_clip"], [84, 0, 1, "", "_static_concat"], [84, 0, 1, "", "_static_constant_pad"], [84, 0, 1, "", "_static_expand_dims"], [84, 0, 1, "", "_static_flip"], [84, 0, 1, "", "_static_permute_dims"], [84, 0, 1, "", "_static_repeat"], [84, 0, 1, "", "_static_reshape"], [84, 0, 1, "", "_static_roll"], [84, 0, 1, "", "_static_split"], [84, 0, 1, "", "_static_squeeze"], [84, 0, 1, "", "_static_stack"], [84, 0, 1, "", "_static_swapaxes"], [84, 0, 1, "", "_static_tile"], [84, 0, 1, "", "_static_unstack"], [84, 0, 1, "", "_static_zero_pad"], [84, 0, 1, "", "clip"], [84, 0, 1, "", "concat"], [84, 0, 1, "", "constant_pad"], [84, 0, 1, "", "expand_dims"], [84, 0, 1, "", "flip"], [84, 0, 1, "", "permute_dims"], [84, 0, 1, "", "repeat"], [84, 0, 1, "", "reshape"], [84, 0, 1, "", "roll"], [84, 0, 1, "", "split"], [84, 0, 1, "", "squeeze"], [84, 0, 1, "", "stack"], [84, 0, 1, "", "swapaxes"], [84, 0, 1, "", "tile"], [84, 0, 1, "", "unstack"], [84, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[85, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[86, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_multinomial"], [86, 0, 1, "", "_static_randint"], [86, 0, 1, "", "_static_random_normal"], [86, 0, 1, "", "_static_random_uniform"], [86, 0, 1, "", "_static_shuffle"], [86, 0, 1, "", "multinomial"], [86, 0, 1, "", "randint"], [86, 0, 1, "", "random_normal"], [86, 0, 1, "", "random_uniform"], [86, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[87, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_argmax"], [87, 0, 1, "", "_static_argmin"], [87, 0, 1, "", "_static_argwhere"], [87, 0, 1, "", "_static_nonzero"], [87, 0, 1, "", "_static_where"], [87, 0, 1, "", "argmax"], [87, 0, 1, "", "argmin"], [87, 0, 1, "", "argwhere"], [87, 0, 1, "", "nonzero"], [87, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[88, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_unique_all"], [88, 0, 1, "", "_static_unique_counts"], [88, 0, 1, "", "_static_unique_inverse"], [88, 0, 1, "", "_static_unique_values"], [88, 0, 1, "", "unique_all"], [88, 0, 1, "", "unique_counts"], [88, 0, 1, "", "unique_inverse"], [88, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[89, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_argsort"], [89, 0, 1, "", "_static_searchsorted"], [89, 0, 1, "", "_static_sort"], [89, 0, 1, "", "argsort"], [89, 0, 1, "", "msort"], [89, 0, 1, "", "searchsorted"], [89, 0, 1, "", "sort"], [89, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[90, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_cumprod"], [90, 0, 1, "", "_static_cumsum"], [90, 0, 1, "", "_static_prod"], [90, 0, 1, "", "_static_sum"], [90, 0, 1, "", "_static_var"], [90, 0, 1, "", "cumprod"], [90, 0, 1, "", "cumsum"], [90, 0, 1, "", "einsum"], [90, 0, 1, "", "max"], [90, 0, 1, "", "mean"], [90, 0, 1, "", "min"], [90, 0, 1, "", "prod"], [90, 0, 1, "", "std"], [90, 0, 1, "", "sum"], [90, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[91, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_all"], [91, 0, 1, "", "_static_any"], [91, 0, 1, "", "all"], [91, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[92, 2, 1, "", "_wrap_function"], [92, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[93, 3, 0, "-", "base"], [94, 3, 0, "-", "cp_tensor"], [95, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[93, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "mode_dot"], [93, 0, 1, "", "norm"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[94, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "cp_copy"], [94, 0, 1, "", "cp_flip_sign"], [94, 0, 1, "", "cp_lstsq_grad"], [94, 0, 1, "", "cp_mode_dot"], [94, 0, 1, "", "cp_n_param"], [94, 0, 1, "", "cp_norm"], [94, 0, 1, "", "cp_normalize"], [94, 0, 1, "", "cp_to_tensor"], [94, 0, 1, "", "cp_to_unfolded"], [94, 0, 1, "", "cp_to_vec"], [94, 0, 1, "", "mode_dot"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "norm"], [94, 0, 1, "", "normalize"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolded"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "unfolding_dot_khatri_rao"], [94, 0, 1, "", "validate_cp_rank"], [94, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[95, 1, 1, "", "TuckerTensor"], [95, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "mode_dot"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "tucker_copy"], [95, 0, 1, "", "tucker_mode_dot"], [95, 0, 1, "", "tucker_n_param"], [95, 0, 1, "", "tucker_normalize"], [95, 0, 1, "", "tucker_to_tensor"], [95, 0, 1, "", "tucker_to_unfolded"], [95, 0, 1, "", "tucker_to_vec"], [95, 0, 1, "", "validate_tucker_rank"], [95, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[100, 3, 0, "-", "base"], [101, 3, 0, "-", "elementwise"], [99, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[100, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[100, 0, 1, "", "__init__"], [100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "broadcast_shapes"], [100, 5, 1, "", "data"], [100, 5, 1, "", "device"], [100, 5, 1, "", "dtype"], [100, 5, 1, "", "inner_shape"], [100, 5, 1, "", "ndim"], [100, 0, 1, "", "nested_array"], [100, 5, 1, "", "nested_rank"], [100, 0, 1, "", "ragged_map"], [100, 0, 1, "", "ragged_multi_map"], [100, 0, 1, "", "ragged_multi_map_in_function"], [100, 0, 1, "", "replace_ivy_arrays"], [100, 5, 1, "", "shape"], [100, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[101, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[99, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[99, 0, 1, "", "__init__"], [99, 0, 1, "", "from_row_lengths"], [99, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[582, 3, 0, "-", "activations"], [583, 3, 0, "-", "constants"], [584, 3, 0, "-", "control_flow_ops"], [585, 3, 0, "-", "creation"], [586, 3, 0, "-", "data_type"], [587, 3, 0, "-", "device"], [588, 3, 0, "-", "elementwise"], [589, 3, 0, "-", "experimental"], [590, 3, 0, "-", "general"], [591, 3, 0, "-", "gradients"], [592, 3, 0, "-", "layers"], [593, 3, 0, "-", "linear_algebra"], [594, 3, 0, "-", "losses"], [595, 3, 0, "-", "manipulation"], [596, 3, 0, "-", "meta"], [597, 3, 0, "-", "nest"], [598, 3, 0, "-", "norms"], [599, 3, 0, "-", "random"], [600, 3, 0, "-", "searching"], [601, 3, 0, "-", "set"], [602, 3, 0, "-", "sorting"], [603, 3, 0, "-", "statistical"], [604, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[347, 3, 0, "-", "activations"], [348, 3, 0, "-", "constants"], [349, 3, 0, "-", "creation"], [350, 3, 0, "-", "data_type"], [351, 3, 0, "-", "device"], [352, 3, 0, "-", "elementwise"], [353, 3, 0, "-", "general"], [354, 3, 0, "-", "gradients"], [355, 3, 0, "-", "layers"], [356, 3, 0, "-", "linear_algebra"], [357, 3, 0, "-", "losses"], [358, 3, 0, "-", "manipulation"], [359, 3, 0, "-", "meta"], [360, 3, 0, "-", "nest"], [361, 3, 0, "-", "norms"], [362, 3, 0, "-", "random"], [363, 3, 0, "-", "searching"], [364, 3, 0, "-", "set"], [365, 3, 0, "-", "sorting"], [366, 3, 0, "-", "sparse_array"], [367, 3, 0, "-", "statistical"], [368, 3, 0, "-", "utility"]], "ivy.stateful": [[727, 3, 0, "-", "activations"], [728, 3, 0, "-", "converters"], [729, 3, 0, "-", "helpers"], [730, 3, 0, "-", "initializers"], [731, 3, 0, "-", "layers"], [732, 3, 0, "-", "losses"], [733, 3, 0, "-", "module"], [734, 3, 0, "-", "norms"], [735, 3, 0, "-", "optimizers"], [736, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[727, 1, 1, "", "ELU"], [727, 1, 1, "", "GEGLU"], [727, 1, 1, "", "GELU"], [727, 1, 1, "", "Hardswish"], [727, 1, 1, "", "LeakyReLU"], [727, 1, 1, "", "LogSigmoid"], [727, 1, 1, "", "LogSoftmax"], [727, 1, 1, "", "Logit"], [727, 1, 1, "", "Mish"], [727, 1, 1, "", "PReLU"], [727, 1, 1, "", "ReLU"], [727, 1, 1, "", "ReLU6"], [727, 1, 1, "", "SeLU"], [727, 1, 1, "", "SiLU"], [727, 1, 1, "", "Sigmoid"], [727, 1, 1, "", "Softmax"], [727, 1, 1, "", "Softplus"], [727, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[727, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[727, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[728, 1, 1, "", "ModuleConverters"], [728, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[728, 0, 1, "", "from_flax_module"], [728, 0, 1, "", "from_haiku_module"], [728, 0, 1, "", "from_keras_module"], [728, 0, 1, "", "from_paddle_module"], [728, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[729, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[729, 0, 1, "", "check_submod_rets"], [729, 0, 1, "", "get_mod_key"], [729, 0, 1, "", "mod_depth"], [729, 0, 1, "", "mod_height"], [729, 0, 1, "", "mod_with_top_mod_key_chain"], [729, 0, 1, "", "show_mod_in_top_mod"], [729, 0, 1, "", "show_structure"], [729, 0, 1, "", "show_v_in_top_v"], [729, 0, 1, "", "sub_mods"], [729, 0, 1, "", "track_submod_call_order"], [729, 0, 1, "", "track_submod_rets"], [729, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[730, 1, 1, "", "Constant"], [730, 1, 1, "", "FirstLayerSiren"], [730, 1, 1, "", "GlorotUniform"], [730, 1, 1, "", "Initializer"], [730, 1, 1, "", "KaimingNormal"], [730, 1, 1, "", "Ones"], [730, 1, 1, "", "RandomNormal"], [730, 1, 1, "", "Siren"], [730, 1, 1, "", "Uniform"], [730, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[730, 0, 1, "", "__init__"], [730, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[730, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[730, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[730, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[730, 0, 1, "", "__init__"], [730, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[730, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[730, 0, 1, "", "__init__"], [730, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[730, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[730, 0, 1, "", "__init__"], [730, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[730, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[731, 1, 1, "", "AdaptiveAvgPool1d"], [731, 1, 1, "", "AdaptiveAvgPool2d"], [731, 1, 1, "", "AvgPool1D"], [731, 1, 1, "", "AvgPool2D"], [731, 1, 1, "", "AvgPool3D"], [731, 1, 1, "", "Conv1D"], [731, 1, 1, "", "Conv1DTranspose"], [731, 1, 1, "", "Conv2D"], [731, 1, 1, "", "Conv2DTranspose"], [731, 1, 1, "", "Conv3D"], [731, 1, 1, "", "Conv3DTranspose"], [731, 1, 1, "", "Dct"], [731, 1, 1, "", "DepthwiseConv2D"], [731, 1, 1, "", "Dropout"], [731, 1, 1, "", "Embedding"], [731, 1, 1, "", "FFT"], [731, 1, 1, "", "Identity"], [731, 1, 1, "", "LSTM"], [731, 1, 1, "", "Linear"], [731, 1, 1, "", "MaxPool1D"], [731, 1, 1, "", "MaxPool2D"], [731, 1, 1, "", "MaxPool3D"], [731, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[731, 0, 1, "", "__init__"], [731, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[731, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[731, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[732, 1, 1, "", "BinaryCrossEntropyLoss"], [732, 1, 1, "", "CrossEntropyLoss"], [732, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[732, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[732, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[732, 0, 1, "", "__init__"]], "ivy.stateful.module": [[733, 1, 1, "", "Module"], [733, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[733, 0, 1, "", "__call__"], [733, 0, 1, "", "__init__"], [733, 0, 1, "", "build"], [733, 5, 1, "", "build_mode"], [733, 5, 1, "", "built_"], [733, 0, 1, "", "compile"], [733, 0, 1, "", "eval"], [733, 0, 1, "", "load"], [733, 0, 1, "", "register_buffer"], [733, 0, 1, "", "save"], [733, 0, 1, "", "save_weights"], [733, 0, 1, "", "show_graph"], [733, 0, 1, "", "train"]], "ivy.stateful.norms": [[734, 1, 1, "", "BatchNorm2D"], [734, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[734, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[734, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[735, 1, 1, "", "Adam"], [735, 1, 1, "", "LAMB"], [735, 1, 1, "", "LARS"], [735, 1, 1, "", "Optimizer"], [735, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[735, 0, 1, "", "__init__"], [735, 0, 1, "", "set_state"], [735, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[735, 0, 1, "", "__init__"], [735, 0, 1, "", "set_state"], [735, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[735, 0, 1, "", "__init__"], [735, 0, 1, "", "set_state"], [735, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[735, 0, 1, "", "__init__"], [735, 0, 1, "", "set_state"], [735, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[735, 0, 1, "", "__init__"], [735, 0, 1, "", "set_state"], [735, 5, 1, "", "state"]], "ivy.stateful.sequential": [[736, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[736, 0, 1, "", "__init__"]], "ivy.utils": [[737, 3, 0, "-", "assertions"], [738, 3, 0, "-", "backend"], [742, 3, 0, "-", "dynamic_import"], [743, 3, 0, "-", "einsum_parser"], [744, 3, 0, "-", "exceptions"], [745, 3, 0, "-", "inspection"], [746, 3, 0, "-", "logging"], [747, 3, 0, "-", "profiler"], [748, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[737, 2, 1, "", "check_all"], [737, 2, 1, "", "check_all_or_any_fn"], [737, 2, 1, "", "check_any"], [737, 2, 1, "", "check_dev_correct_formatting"], [737, 2, 1, "", "check_dimensions"], [737, 2, 1, "", "check_elem_in_list"], [737, 2, 1, "", "check_equal"], [737, 2, 1, "", "check_exists"], [737, 2, 1, "", "check_false"], [737, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [737, 2, 1, "", "check_gather_input_valid"], [737, 2, 1, "", "check_gather_nd_input_valid"], [737, 2, 1, "", "check_greater"], [737, 2, 1, "", "check_inplace_sizes_valid"], [737, 2, 1, "", "check_isinstance"], [737, 2, 1, "", "check_kernel_padding_size"], [737, 2, 1, "", "check_less"], [737, 2, 1, "", "check_one_way_broadcastable"], [737, 2, 1, "", "check_same_dtype"], [737, 2, 1, "", "check_shape"], [737, 2, 1, "", "check_shapes_broadcastable"], [737, 2, 1, "", "check_true"], [737, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[739, 3, 0, "-", "ast_helpers"], [740, 3, 0, "-", "handler"], [741, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[739, 1, 1, "", "ImportTransformer"], [739, 1, 1, "", "IvyLoader"], [739, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[739, 0, 1, "", "__init__"], [739, 0, 1, "", "impersonate_import"], [739, 0, 1, "", "visit_Import"], [739, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[739, 0, 1, "", "__init__"], [739, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[739, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[740, 1, 1, "", "ContextManager"], [740, 2, 1, "", "choose_random_backend"], [740, 2, 1, "", "convert_from_numpy_to_target_backend"], [740, 2, 1, "", "convert_from_source_backend_to_numpy"], [740, 2, 1, "", "current_backend"], [740, 2, 1, "", "fn_name_from_version_specific_fn_name"], [740, 2, 1, "", "prevent_access_locally"], [740, 2, 1, "", "previous_backend"], [740, 2, 1, "", "set_backend"], [740, 2, 1, "", "set_backend_to_specific_version"], [740, 2, 1, "", "set_jax_backend"], [740, 2, 1, "", "set_mxnet_backend"], [740, 2, 1, "", "set_numpy_backend"], [740, 2, 1, "", "set_paddle_backend"], [740, 2, 1, "", "set_tensorflow_backend"], [740, 2, 1, "", "set_torch_backend"], [740, 2, 1, "", "unset_backend"], [740, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[740, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[741, 2, 1, "", "available_sub_backends"], [741, 2, 1, "", "clear_sub_backends"], [741, 2, 1, "", "find_available_sub_backends"], [741, 2, 1, "", "set_sub_backend"], [741, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[742, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[743, 2, 1, "", "convert_interleaved_input"], [743, 2, 1, "", "convert_subscripts"], [743, 2, 1, "", "find_output_shape"], [743, 2, 1, "", "find_output_str"], [743, 2, 1, "", "gen_unused_symbols"], [743, 2, 1, "", "get_symbol"], [743, 2, 1, "", "has_valid_einsum_chars_only"], [743, 2, 1, "", "is_valid_einsum_char"], [743, 2, 1, "", "legalise_einsum_expr"], [743, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[744, 7, 1, "", "InplaceUpdateException"], [744, 7, 1, "", "InvalidBackendException"], [744, 7, 1, "", "IvyAttributeError"], [744, 7, 1, "", "IvyBackendException"], [744, 7, 1, "", "IvyBroadcastShapeError"], [744, 7, 1, "", "IvyDeviceError"], [744, 7, 1, "", "IvyDtypePromotionError"], [744, 7, 1, "", "IvyError"], [744, 7, 1, "", "IvyException"], [744, 7, 1, "", "IvyIndexError"], [744, 7, 1, "", "IvyNotImplementedException"], [744, 7, 1, "", "IvyValueError"], [744, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[744, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[744, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[745, 2, 1, "", "add_array_specs"], [745, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[746, 2, 1, "", "set_logging_mode"], [746, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[747, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[747, 0, 1, "", "__init__"], [747, 4, 1, "", "print_stats"], [747, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[748, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 28, 45, 787, 792, 803, 808], "compil": [0, 21, 23, 24, 28, 29, 31, 33, 34, 35, 41, 787, 792, 800, 805, 807, 808], "api": [0, 1, 2, 19, 28, 29, 749, 752, 759, 763, 767, 768, 778, 783, 787, 789, 791, 792, 799, 806, 808], "us": [0, 2, 8, 10, 16, 24, 27, 44, 46, 749, 756, 759, 760, 763, 778, 781, 790, 796], "eager": [0, 23, 33], "v": [0, 23, 33, 36, 752, 774, 795], "lazi": [0, 23, 33], "arrai": [0, 96, 99, 122, 366, 752, 763, 764, 768, 775, 789, 799], "cach": 0, "gener": [0, 55, 78, 353, 590, 778, 782, 785], "state": [0, 19, 28, 29, 791, 795], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 5, 8, 10, 17, 36, 749, 755, 771, 775, 778, 781, 785], "set": [1, 10, 36, 40, 41, 65, 88, 364, 601, 749, 760, 765, 784], "up": [1, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 42, 749, 760], "ivi": [1, 2, 6, 7, 8, 10, 16, 19, 27, 28, 29, 40, 41, 43, 44, 46, 749, 755, 759, 761, 764, 766, 768, 771, 773, 778, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 794, 808], "folder": 1, "kei": 1, "issu": [1, 759, 761, 774], "question": 1, "transpil": [2, 13, 14, 15, 22, 23, 24, 25, 26, 28, 29, 32, 33, 34, 35, 36, 42, 46, 749, 792], "function": [2, 8, 19, 28, 29, 40, 41, 42, 44, 46, 103, 759, 767, 769, 770, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 792, 795], "librari": [2, 25, 28, 29, 44, 46, 755, 794], "modul": [2, 7, 733, 769, 770, 791], "unifi": [2, 20, 23, 24, 30, 33, 34, 35, 40, 749, 753, 789, 804, 808], "demo": [3, 5, 6, 7, 17, 28, 42, 43], "creat": [3, 40, 41, 759], "notebook": 3, "TO": 4, "replac": 4, "titl": 4, "alexnet": 6, "instal": [6, 7, 10, 19, 40, 41, 43, 749, 796], "data": [6, 7, 8, 10, 19, 28, 40, 51, 74, 102, 350, 586, 601, 703, 704, 705, 706, 769, 780, 782, 790, 795], "prepar": [6, 7, 8, 10], "infer": [6, 7, 8, 10, 777], "torch": [6, 7, 8, 10, 36, 43, 802, 803], "tensorflow": [6, 7, 8, 15, 36, 43, 44, 45, 802], "jax": [6, 7, 8, 9, 11, 36, 43, 802], "appendix": [6, 8], "code": [6, 19, 20, 21, 22, 29, 40, 774, 783], "implement": [6, 8, 753, 768, 778, 780], "bert": 7, "dependeci": 7, "import": [7, 8, 10, 19, 40, 41, 44, 742], "sequenc": [7, 775], "classif": 7, "model": [7, 8, 9, 10, 11, 13, 14, 15, 26, 27, 28, 29, 40, 41, 42, 43, 44, 46, 792, 795], "imag": [8, 10, 57, 80, 252, 756, 766], "segment": 8, "unet": 8, "custom": [8, 764, 766, 778, 790, 795], "preprocess": 8, "load": [8, 10, 723, 790], "visualis": [8, 10], "initi": [8, 10, 730, 791], "nativ": [8, 10, 764, 785], "pretrain": [8, 10], "weight": [8, 10, 790], "mask": 8, "your": [8, 10, 761, 782], "backend": [8, 19, 28, 40, 41, 43, 44, 738, 741, 749, 759, 765, 769, 778, 783, 787, 795], "acceler": [9, 11], "mmpretrain": 9, "resnet": [10, 47], "label": 10, "resnet34": 10, "classifi": 10, "resnet50": 10, "pytorch": [11, 13, 42, 802], "guid": [12, 17], "build": [13, 14, 15, 44, 756, 766, 787], "top": [13, 14, 15, 768], "round": [13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 42, 282], "haiku": 14, "develop": 16, "convolut": 16, "network": [16, 41, 44, 790, 792], "tutori": [17, 44], "And": 17, "learn": [17, 18, 802], "basic": [17, 18, 40, 41, 761, 780], "write": [19, 27, 780, 782], "content": [19, 42], "handler": [19, 28, 740, 741, 787], "structur": [19, 28, 766, 778, 795], "how": [24, 766, 782], "decor": [24, 35, 773, 777, 782], "ani": [25, 26, 28, 29, 722], "odsc": 28, "framework": [28, 34, 40, 725, 749, 778, 781, 788, 802, 805, 808, 809], "quickstart": 29, "get": [29, 761, 796], "familiar": 29, "0": [30, 31, 32, 33, 37, 38], "1": [31, 33, 34, 35, 36, 39, 46, 802], "2": [32, 35, 37, 46, 802], "select": 34, "As": 35, "3": [36, 38, 39, 46], "dynam": [36, 44, 742, 765, 795], "static": 36, "todo": [36, 761], "explain": 36, "via": 36, "why": [36, 753, 782], "mode": [36, 769, 773, 784], "i": [36, 749, 766, 785], "true": 36, "default": [36, 501], "when": [36, 749], "from": [36, 43, 749, 796], "numpi": [36, 43, 780, 802], "fals": 36, "kornia": 37, "perceiv": 38, "stabl": 39, "diffus": 39, "oper": [40, 775, 784, 789, 795], "ml": [40, 751, 804, 808], "chang": 40, "one": 40, "line": [40, 761], "No": [40, 753, 760], "need": [40, 782], "worri": 40, "about": 40, "type": [40, 51, 74, 350, 586, 769, 776, 780, 795], "differ": 40, "them": 40, "all": [40, 721], "standalon": [40, 776], "defin": [40, 41, 42, 44], "optim": [40, 735, 791], "input": [40, 41, 775], "target": 40, "loss": [40, 60, 83, 357, 594, 732], "train": [40, 42, 44], "loop": [40, 44], "sampl": 41, "check": [41, 774, 795], "result": 41, "simpl": 41, "neural": 41, "deepmind": [42, 43], "": [42, 44, 759, 766], "perceiverio": [42, 43], "tabl": [42, 766], "construct": [42, 790], "some": 42, "helper": [42, 729, 739, 781, 782, 783], "pipelin": [42, 44, 766, 768, 782, 795], "dataset": [42, 44], "download": 42, "dataload": 42, "test": [42, 760, 761, 763, 768, 781, 782], "gpu": [43, 795], "introduct": [43, 46, 755, 780, 781], "python3": 43, "8": 43, "setup": [43, 774], "kernel": 43, "clone": [43, 760, 768], "repo": [43, 760], "ivy_model": 43, "run": [43, 761, 763, 766, 782], "end": 44, "let": 44, "we": [44, 782], "ar": 44, "mnist": 44, "thi": 44, "temporari": 44, "loader": 44, "util": [44, 68, 91, 368, 604, 726], "plot": 44, "metric": 44, "save": [44, 724, 790], "huggingfac": 45, "deit": 45, "can": 45, "visual": 45, "displai": 45, "html": 45, "file": 45, "browser": [45, 761], "To": [46, 761], "interfac": 46, "telemetri": 46, "18": 47, "activ": [48, 70, 347, 582, 727], "convers": [49, 72, 777], "creation": [50, 73, 349, 585], "devic": [52, 75, 351, 587, 770, 775, 780], "elementwis": [53, 76, 101, 352, 588], "experiment": [54, 77, 589, 759], "gradient": [56, 79, 331, 354, 591, 778], "layer": [58, 81, 355, 592, 731], "linear": [59, 82, 356, 593, 616], "algebra": [59, 82, 356, 593], "manipul": [61, 84, 358, 595], "norm": [62, 85, 361, 598, 734], "random": [63, 86, 362, 599], "search": [64, 87, 363, 600], "sort": [66, 89, 365, 602, 710], "statist": [67, 90, 367, 603], "wrap": [69, 92, 777], "base": [71, 93, 100], "cp": 94, "tensor": [94, 95, 98], "tucker": [95, 418], "contain": [97, 761, 767, 790], "factor": 98, "nest": [99, 360, 597], "class": [102, 725, 764, 773, 780, 789], "gelu": 104, "hardswish": 105, "leaky_relu": 106, "log_softmax": 107, "mish": 108, "relu": 109, "sigmoid": 110, "softmax": 111, "softplu": 112, "softsign": 113, "cast_bool": 114, "cmp_i": 115, "cmp_isnot": 116, "for_loop": 117, "if_els": 118, "try_except": 119, "while_loop": 120, "arang": 121, "asarrai": 123, "asarray_handle_nest": 124, "asarray_infer_devic": 125, "asarray_infer_dtyp": 126, "asarray_inputs_to_native_shap": 127, "asarray_to_native_arrays_and_back": 128, "copy_arrai": 129, "empti": 130, "empty_lik": 131, "ey": 132, "from_dlpack": 133, "note": [133, 585], "frombuff": 134, "full": [135, 781], "full_lik": 136, "linspac": 137, "logspac": 138, "meshgrid": 139, "native_arrai": 140, "one_hot": 141, "ones": 142, "ones_lik": 143, "tril": 144, "triu": 145, "triu_indic": 146, "zero": 147, "zeros_lik": 148, "as_ivy_dtyp": 149, "as_native_dtyp": 150, "astyp": 151, "broadcast_arrai": 152, "broadcast_to": 153, "can_cast": 154, "check_float": 155, "closest_valid_dtyp": 156, "default_complex_dtyp": 157, "default_dtyp": 158, "default_float_dtyp": 159, "default_int_dtyp": 160, "default_uint_dtyp": 161, "dtype": [162, 775], "dtype_bit": 163, "finfo": 164, "function_supported_dtyp": 165, "function_unsupported_dtyp": 166, "iinfo": 167, "infer_default_dtyp": 168, "invalid_dtyp": 169, "is_bool_dtyp": 170, "is_complex_dtyp": 171, "is_float_dtyp": 172, "is_hashable_dtyp": 173, "is_int_dtyp": 174, "is_native_dtyp": 175, "is_uint_dtyp": 176, "promote_typ": 177, "promote_types_of_input": 178, "result_typ": 179, "set_default_complex_dtyp": 180, "set_default_dtyp": 181, "set_default_float_dtyp": 182, "set_default_int_dtyp": 183, "set_default_uint_dtyp": 184, "type_promote_arrai": 185, "unset_default_complex_dtyp": 186, "unset_default_dtyp": 187, "unset_default_float_dtyp": 188, "unset_default_int_dtyp": 189, "unset_default_uint_dtyp": 190, "valid_dtyp": 191, "as_ivy_dev": 192, "as_native_dev": 193, "clear_cached_mem_on_dev": 194, "default_devic": 195, "dev": 196, "dev_util": 197, "function_supported_devic": 198, "function_unsupported_devic": 199, "get_all_ivy_arrays_on_dev": 200, "gpu_is_avail": 201, "handle_soft_device_vari": 202, "num_cpu_cor": 203, "num_gpu": 204, "num_ivy_arrays_on_dev": 205, "percent_used_mem_on_dev": 206, "print_all_ivy_arrays_on_dev": 207, "set_default_devic": 208, "set_soft_device_mod": 209, "paramet": [209, 535, 536, 541, 542, 544, 545, 587, 590, 784], "set_split_factor": 210, "split_factor": 211, "split_func_cal": 212, "to_devic": 213, "total_mem_on_dev": 214, "tpu_is_avail": 215, "unset_default_devic": 216, "unset_soft_device_mod": 217, "used_mem_on_dev": 218, "ab": 219, "aco": 220, "acosh": 221, "add": [222, 771, 781, 808], "angl": 223, "asin": 224, "asinh": 225, "atan": 226, "atan2": 227, "atanh": 228, "bitwise_and": 229, "bitwise_invert": 230, "bitwise_left_shift": 231, "bitwise_or": 232, "bitwise_right_shift": 233, "bitwise_xor": 234, "ceil": 235, "co": 236, "cosh": 237, "deg2rad": 238, "divid": 239, "equal": 240, "erf": 241, "exp": 242, "exp2": 243, "expm1": 244, "floor": 245, "floor_divid": 246, "fmin": 247, "fmod": 248, "gcd": 249, "greater": 250, "greater_equ": 251, "isfinit": 253, "isinf": 254, "isnan": 255, "isreal": 256, "lcm": 257, "less": 258, "less_equ": 259, "log": [260, 746, 760], "log10": 261, "log1p": 262, "log2": 263, "logaddexp": 264, "logaddexp2": 265, "logical_and": 266, "logical_not": 267, "logical_or": 268, "logical_xor": 269, "maximum": 270, "minimum": 271, "multipli": 272, "nan_to_num": 273, "neg": 274, "not_equ": 275, "posit": [276, 775], "pow": 277, "rad2deg": 278, "real": 279, "reciproc": 280, "remaind": 281, "sign": 283, "sin": 284, "sinh": 285, "sqrt": 286, "squar": 287, "subtract": 288, "tan": [289, 771, 781], "tanh": 290, "trapz": 291, "trunc": 292, "trunc_divid": 293, "elu": 294, "logit": 295, "logsigmoid": 296, "prelu": 297, "relu6": 298, "selu": 299, "sequence_length": 300, "silu": 301, "thresholded_relu": 302, "blackman_window": 303, "eye_lik": 304, "hamming_window": 305, "hann_window": 306, "indic": 307, "kaiser_bessel_derived_window": 308, "kaiser_window": 309, "mel_weight_matrix": 310, "ndenumer": 311, "ndindex": 312, "random_cp": 313, "random_tuck": 314, "tril_indic": 315, "trilu": 316, "unsorted_segment_min": 317, "unsorted_segment_sum": 318, "vorbis_window": 319, "allclos": 320, "binar": 321, "conj": 322, "copysign": 323, "count_nonzero": 324, "diff": 325, "digamma": 326, "fix": 327, "float_pow": 328, "fmax": 329, "frexp": 330, "hypot": 332, "isclos": 333, "ldexp": 334, "lerp": 335, "lgamma": 336, "modf": 337, "nansum": 338, "nextaft": 339, "signbit": 340, "sinc": 341, "sparsify_tensor": 342, "xlogi": 343, "zeta": 344, "reduc": 345, "bind_custom_gradient_funct": 346, "constant": [348, 583], "meta": [359, 596], "spars": 366, "adaptive_avg_pool1d": 369, "adaptive_avg_pool2d": 370, "adaptive_max_pool2d": 371, "area_interpol": 372, "avg_pool1d": 373, "avg_pool2d": 374, "avg_pool3d": 375, "dct": 376, "dft": 377, "dropout1d": 378, "dropout2d": 379, "dropout3d": 380, "embed": 381, "fft": 382, "fft2": 383, "generate_einsum_equ": 384, "get_interpolate_kernel": 385, "idct": 386, "ifft": 387, "ifftn": 388, "interp": 389, "interpol": 390, "max_pool1d": 391, "max_pool2d": 392, "max_pool3d": 393, "max_unpool1d": 394, "nearest_interpol": 395, "pool": 396, "reduce_window": 397, "rfftn": 398, "adjoint": 399, "cond": 400, "diagflat": 401, "dot": 402, "eig": [403, 625], "eigh_tridiagon": 404, "eigval": 405, "initialize_tuck": 406, "khatri_rao": 407, "kron": 408, "kroneck": 409, "make_svd_non_neg": 410, "matrix_exp": 411, "mode_dot": 412, "multi_dot": 413, "multi_mode_dot": 414, "partial_tuck": 415, "svd_flip": 416, "truncated_svd": 417, "huber_loss": 419, "l1_loss": 420, "log_poisson_loss": 421, "smooth_l1_loss": 422, "soft_margin_loss": 423, "as_strid": 424, "associative_scan": 425, "atleast_1d": 426, "atleast_2d": 427, "atleast_3d": 428, "broadcast_shap": 429, "choos": 430, "concat_from_sequ": 431, "dsplit": 432, "dstack": 433, "expand": 434, "fill_diagon": 435, "flatten": 436, "fliplr": 437, "flipud": 438, "fold": 439, "heavisid": 440, "hsplit": 441, "hstack": 442, "i0": 443, "matric": 444, "moveaxi": 445, "pad": 446, "partial_fold": 447, "partial_tensor_to_vec": 448, "partial_unfold": 449, "partial_vec_to_tensor": 450, "put_along_axi": 451, "rot90": 452, "soft_threshold": 453, "take_along_axi": 454, "top_k": 455, "unfold": 456, "unique_consecut": 457, "vsplit": 458, "vstack": 459, "batch_norm": 460, "group_norm": 461, "instance_norm": 462, "l1_normal": 463, "l2_normal": 464, "lp_normal": 465, "bernoulli": 466, "beta": 467, "dirichlet": 468, "gamma": 469, "poisson": 470, "unravel_index": 471, "invert_permut": 472, "lexsort": 473, "is_ivy_sparse_arrai": 474, "is_native_sparse_arrai": 475, "native_sparse_arrai": 476, "native_sparse_array_to_indices_values_and_shap": 477, "bincount": 478, "corrcoef": 479, "cov": 480, "cummax": 481, "cummin": 482, "histogram": 483, "igamma": 484, "median": 485, "nanmean": 486, "nanmedian": 487, "nanprod": 488, "quantil": 489, "optional_get_el": 490, "all_equ": 491, "arg_info": 492, "arg_nam": 493, "array_equ": 494, "assert_supports_inplac": 495, "cache_fn": 496, "clip_matrix_norm": 497, "clip_vector_norm": 498, "container_typ": 499, "current_backend_str": 500, "einops_rearrang": 502, "einops_reduc": 503, "einops_repeat": 504, "exist": [505, 756], "fourier_encod": 506, "function_supported_devices_and_dtyp": 507, "function_unsupported_devices_and_dtyp": 508, "gather": 509, "gather_nd": 510, "get_all_arrays_in_memori": 511, "get_item": 512, "get_num_dim": 513, "get_referrers_recurs": 514, "has_nan": 515, "inplace_arrays_support": 516, "inplace_decr": 517, "inplace_incr": 518, "inplace_upd": 519, "inplace_variables_support": 520, "is_arrai": 521, "is_ivy_arrai": 522, "is_ivy_contain": 523, "is_ivy_nested_arrai": 524, "is_native_arrai": 525, "isin": 526, "isscalar": 527, "items": 528, "match_kwarg": 529, "multiprocess": 530, "num_arrays_in_memori": 531, "print_all_arrays_in_memori": 532, "scatter_flat": 533, "scatter_nd": 534, "set_array_mod": 535, "set_exception_trace_mod": 536, "set_inplace_mod": 537, "set_item": 538, "set_min_bas": 539, "set_min_denomin": 540, "set_nestable_mod": 541, "set_precise_mod": 542, "set_queue_timeout": 543, "set_shape_array_mod": 544, "set_show_func_wrapper_trace_mod": 545, "set_tmp_dir": 546, "shape": [547, 601, 703, 704, 705, 706, 777, 795], "stable_divid": 548, "stable_pow": 549, "stride": 550, "supports_inplace_upd": 551, "to_ivy_shap": 552, "to_list": 553, "to_native_shap": 554, "to_numpi": 555, "to_scalar": 556, "try_else_non": 557, "unset_array_mod": 558, "unset_exception_trace_mod": 559, "unset_inplace_mod": 560, "unset_min_bas": 561, "unset_min_denomin": 562, "unset_nestable_mod": 563, "unset_precise_mod": 564, "unset_queue_timeout": 565, "unset_shape_array_mod": 566, "unset_show_func_wrapper_trace_mod": 567, "unset_tmp_dir": 568, "value_is_nan": 569, "vmap": 570, "adam_step": 571, "adam_upd": 572, "execute_with_gradi": [573, 778], "grad": 574, "gradient_descent_upd": 575, "jac": 576, "lamb_upd": 577, "lars_upd": 578, "optimizer_upd": 579, "stop_gradi": 580, "value_and_grad": 581, "control": [584, 795], "flow": [584, 795], "op": 584, "depend": [601, 703, 704, 705, 706], "output": [601, 703, 704, 705, 706], "conv": 605, "conv1d": 606, "conv1d_transpos": 607, "conv2d": 608, "conv2d_transpos": 609, "conv3d": 610, "conv3d_transpos": 611, "conv_general_dil": 612, "conv_general_transpos": 613, "depthwise_conv2d": 614, "dropout": 615, "lstm_updat": 617, "multi_head_attent": 618, "scaled_dot_product_attent": 619, "choleski": 620, "cross": 621, "det": 622, "diag": 623, "diagon": 624, "eigh": 626, "eigvalsh": 627, "inner": 628, "inv": 629, "lu_factor": 630, "matmul": 631, "matrix_norm": 632, "matrix_pow": 633, "matrix_rank": 634, "matrix_transpos": 635, "outer": 636, "pinv": 637, "qr": 638, "slogdet": 639, "solv": 640, "svd": 641, "svdval": 642, "tensordot": 643, "tensorsolv": 644, "trace": [645, 773], "vander": 646, "vecdot": 647, "vector_norm": 648, "vector_to_skew_symmetric_matrix": 649, "binary_cross_entropi": 650, "cross_entropi": 651, "sparse_cross_entropi": 652, "clip": 653, "concat": 654, "constant_pad": 655, "expand_dim": 656, "flip": 657, "permute_dim": 658, "repeat": 659, "reshap": 660, "roll": [661, 771], "split": 662, "squeez": 663, "stack": [664, 773], "swapax": 665, "tile": 666, "unstack": 667, "zero_pad": 668, "fomaml_step": 669, "maml_step": 670, "reptile_step": 671, "all_nested_indic": 672, "copy_nest": 673, "duplicate_array_index_chain": 674, "index_nest": 675, "insert_into_nest_at_index": 676, "insert_into_nest_at_indic": 677, "map": [678, 768], "map_nest_at_index": 679, "map_nest_at_indic": 680, "multi_index_nest": 681, "nested_ani": 682, "nested_argwher": 683, "nested_map": 684, "nested_multi_map": 685, "prune_empti": 686, "prune_nest_at_index": 687, "prune_nest_at_indic": 688, "set_nest_at_index": 689, "set_nest_at_indic": 690, "layer_norm": 691, "multinomi": 692, "randint": 693, "random_norm": 694, "random_uniform": 695, "seed": 696, "shuffl": 697, "argmax": 698, "argmin": 699, "argwher": 700, "nonzero": 701, "where": [702, 759], "unique_al": 703, "unique_count": 704, "unique_invers": 705, "unique_valu": 706, "argsort": 707, "msort": 708, "searchsort": 709, "cumprod": 711, "cumsum": 712, "einsum": [713, 743], "max": 714, "mean": 715, "min": 716, "prod": 717, "std": 718, "sum": 719, "var": 720, "convert": [728, 792], "sequenti": 736, "assert": [737, 773], "ast": 739, "sub": 741, "parser": 743, "except": [744, 773, 777], "inspect": 745, "profil": 747, "verbos": 748, "statu": 749, "ai": 749, "should": 749, "pip": [749, 796], "docker": [749, 756, 760, 761, 766, 796], "sourc": [749, 796], "multi": [749, 805, 808], "support": [749, 765, 769, 777, 780, 795], "document": 749, "contribut": [749, 754], "commun": 749, "citat": 749, "background": 750, "explos": 751, "standard": [752, 785, 799, 808], "skeptic": 752, "complimentari": 752, "competit": 752, "do": [752, 782], "work": [752, 798], "The": [752, 761, 766, 778, 780, 789, 795], "more": [753, 760, 785], "re": [753, 782], "infinit": 753, "shelf": 753, "life": 753, "appli": [755, 794], "robot": [755, 794], "doc": [756, 766], "conveni": [756, 766, 776], "script": [756, 766], "hub": 756, "local": [756, 761, 774], "without": [756, 781], "error": [757, 773], "handl": [757, 764, 770, 773, 777, 795], "help": [758, 761], "resourc": 758, "open": 759, "task": 759, "format": [759, 774, 801, 808], "checklist": 759, "frontend": [759, 765, 780, 781, 792], "place": 759, "extend": [759, 782, 785], "an": [759, 778], "github": [759, 760], "templat": 759, "fork": [760, 761], "pre": [760, 774], "commit": [760, 761, 768, 774], "pycharm": [760, 761, 774], "virtual": 760, "environ": 760, "miniconda": 760, "venv": 760, "interpret": 760, "window": 760, "maco": 760, "ubuntu": 760, "detail": 760, "hypothesi": [760, 781, 782], "free": 760, "wsl": 760, "codespac": 760, "list": 761, "manag": 761, "who": 761, "ask": 761, "With": 761, "command": 761, "pull": [761, 768], "request": [761, 768], "small": 761, "often": 761, "interact": 761, "most": 761, "out": [761, 775, 777, 779], "id": [761, 763], "deep": 762, "dive": 762, "termin": 763, "regener": 763, "failur": 763, "skip": 763, "integr": [764, 768, 774, 782], "version": [765, 783, 795], "builder": 766, "being": 766, "option": 766, "index": 766, "rst": 766, "partial_conf": 766, "py": 766, "prebuild": 766, "sh": 766, "extens": [766, 793], "custom_autosummari": 766, "hide": 766, "discussion_link": 766, "skippable_funct": 766, "ivy_data": 766, "instanc": [767, 780, 781, 789], "method": [767, 780, 781, 789, 790], "special": [767, 780], "nestabl": [767, 775, 776, 777], "continu": [768, 774], "push": 768, "pr": 768, "trigger": 768, "A": [768, 785], "down": 768, "view": [768, 777, 779], "store": 768, "retriev": 768, "repositori": 768, "nitti": 768, "gritti": 768, "storag": 768, "space": 768, "unifyai": 768, "determin": 768, "coverag": 768, "workflow": 768, "multipl": 768, "runner": 768, "race": 768, "condit": 768, "period": 768, "manual": 768, "dispatch": 768, "ci": 768, "dashboard": 768, "promot": [769, 780], "argument": [769, 770, 775, 777, 779, 780], "other": [769, 770], "unsupport": 769, "bug": 769, "cast": [769, 780], "superset": [769, 785], "docstr": [771, 772], "configur": [773, 781, 790], "func_wrapp": 773, "prune": 773, "handle_except": 773, "consist": [773, 782], "lint": 774, "common": 774, "keyword": 775, "number": 775, "integ": 775, "primari": 776, "composit": 776, "mix": [776, 777, 782], "partial": [776, 777, 782], "order": 777, "wrapper": [777, 808, 809], "miscellan": 777, "overview": 778, "usag": [778, 785], "signatur": 778, "design": [778, 783, 786], "our": 778, "polici": [778, 780], "specif": [778, 806, 807, 808], "consider": 778, "inplac": 779, "updat": 779, "copi": 779, "short": 780, "unus": 780, "rule": 780, "duplic": [780, 785], "valu": 781, "alia": 781, "own": 782, "strategi": 782, "effect": 782, "bonu": 782, "featur": 782, "self": 782, "explicit": 782, "test_array_funct": 782, "fail": 782, "navig": 783, "categor": 783, "submodul": 783, "unpin": 783, "global": 784, "properti": 784, "getter": 784, "attribut": 784, "setter": 784, "set_": 784, "unset_": 784, "behaviour": 785, "what": [785, 808], "non": 785, "balanc": 785, "effici": 785, "maxim": 785, "block": 787, "monkei": 789, "patch": 789, "represent": 790, "recurs": 790, "built": 790, "ins": 790, "access": 790, "comparison": 790, "case": 790, "compartment": 790, "role": 792, "mechan": 794, "vision": 794, "gym": 794, "memori": 794, "faq": 795, "maintain": 795, "size": 795, "deploy": 795, "auto": 795, "differenti": 795, "replica": 795, "parallel": 795, "altern": 795, "start": 796, "glossari": 797, "relat": 798, "infrastructur": [800, 808], "llvm": 800, "mlir": 800, "oneapi": 800, "exchang": [801, 808], "onnx": 801, "nnef": 801, "coreml": 801, "matlab": 802, "scipi": 802, "scikit": 802, "theano": 802, "panda": 802, "julia": 802, "apach": [802, 805], "spark": 802, "mllib": 802, "caff": 802, "chainer": 802, "mxnet": 802, "cntk": 802, "flux": 802, "dex": 802, "languag": 802, "tracer": [803, 808], "tf": 803, "jaxpr": 803, "jit": 803, "fx": 803, "compani": [804, 808], "quansight": 804, "modular": 804, "octoml": 804, "vendor": [805, 806, 807, 808], "tvm": 805, "xla": 805, "gcc": 805, "tensorrt": 806, "cuda": 806, "icc": 807, "icx": 807, "nvcc": 807, "doe": 808, "eagerpi": 809, "kera": 809, "thinc": 809, "tensorli": 809, "neuropod": 809}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"Tucker tensor": [[95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Cp tensor": [[94, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "relu": [[109, "relu"]], "softsign": [[113, "softsign"]], "arange": [[121, "arange"]], "Losses": [[83, "module-ivy.data_classes.container.losses"], [732, "module-ivy.stateful.losses"], [60, "module-ivy.data_classes.array.losses"], [594, "losses"], [357, "losses"]], "Utility": [[91, "module-ivy.data_classes.container.utility"], [68, "module-ivy.data_classes.array.utility"], [604, "utility"], [368, "utility"]], "Wrapping": [[92, "module-ivy.data_classes.container.wrapping"], [69, "module-ivy.data_classes.array.wrapping"]], "if_else": [[118, "if-else"]], "Sorting": [[66, "module-ivy.data_classes.array.sorting"], [89, "module-ivy.data_classes.container.sorting"], [602, "sorting"], [365, "sorting"]], "Layers": [[81, "module-ivy.data_classes.container.layers"], [731, "module-ivy.stateful.layers"], [58, "module-ivy.data_classes.array.layers"], [592, "layers"], [355, "layers"]], "Nested array": [[99, "nested-array"]], "Data classes": [[102, "data-classes"]], "gelu": [[104, "gelu"]], "asarray": [[123, "asarray"]], "Norms": [[85, "module-ivy.data_classes.container.norms"], [734, "module-ivy.stateful.norms"], [62, "module-ivy.data_classes.array.norms"], [598, "norms"], [361, "norms"]], "Statistical": [[67, "module-ivy.data_classes.array.statistical"], [90, "module-ivy.data_classes.container.statistical"], [603, "statistical"], [367, "statistical"]], "Gradients": [[79, "module-ivy.data_classes.container.gradients"], [778, "gradients"], [56, "module-ivy.data_classes.array.gradients"], [591, "gradients"], [354, "gradients"]], "Set": [[88, "module-ivy.data_classes.container.set"], [65, "module-ivy.data_classes.array.set"], [601, "set"], [364, "module-ivy.functional.ivy.experimental.set"]], "log_softmax": [[107, "log-softmax"]], "softmax": [[111, "softmax"]], "while_loop": [[120, "while-loop"]], "Random": [[63, "module-ivy.data_classes.array.random"], [86, "module-ivy.data_classes.container.random"], [599, "random"], [362, "random"]], "Factorized tensor": [[98, "factorized-tensor"]], "array": [[122, "array"]], "Image": [[80, "module-ivy.data_classes.container.image"], [57, "module-ivy.data_classes.array.image"]], "Functions": [[103, "functions"]], "leaky_relu": [[106, "leaky-relu"]], "Linear algebra": [[82, "module-ivy.data_classes.container.linear_algebra"], [59, "module-ivy.data_classes.array.linear_algebra"], [593, "linear-algebra"], [356, "linear-algebra"]], "Manipulation": [[84, "module-ivy.data_classes.container.manipulation"], [61, "module-ivy.data_classes.array.manipulation"], [595, "manipulation"], [358, "manipulation"]], "General": [[78, "module-ivy.data_classes.container.general"], [55, "module-ivy.data_classes.array.general"], [590, "general"], [353, "general"]], "Experimental": [[77, "module-ivy.data_classes.container.experimental"], [54, "module-ivy.data_classes.array.experimental"], [589, "experimental"]], "try_except": [[119, "try-except"]], "Searching": [[64, "module-ivy.data_classes.array.searching"], [87, "module-ivy.data_classes.container.searching"], [600, "searching"], [363, "searching"]], "hardswish": [[105, "hardswish"]], "Elementwise": [[76, "module-ivy.data_classes.container.elementwise"], [101, "module-ivy.data_classes.nested_array.elementwise"], [53, "module-ivy.data_classes.array.elementwise"], [588, "elementwise"], [352, "elementwise"]], "for_loop": [[117, "for-loop"]], "Activations": [[70, "module-ivy.data_classes.container.activations"], [727, "module-ivy.stateful.activations"], [48, "module-ivy.data_classes.array.activations"], [582, "activations"], [347, "activations"]], "softplus": [[112, "softplus"]], "Array": [[96, "array"]], "sigmoid": [[110, "sigmoid"]], "Base": [[93, "module-ivy.data_classes.factorized_tensor.base"], [100, "module-ivy.data_classes.nested_array.base"], [71, "module-ivy.data_classes.container.base"]], "Device": [[75, "module-ivy.data_classes.container.device"], [52, "module-ivy.data_classes.array.device"], [587, "device"], [351, "module-ivy.functional.ivy.experimental.device"]], "asarray_handle_nestable": [[124, "asarray-handle-nestable"]], "mish": [[108, "mish"]], "asarray_infer_device": [[125, "asarray-infer-device"]], "cmp_is": [[115, "cmp-is"]], "cmp_isnot": [[116, "cmp-isnot"]], "Data type": [[74, "module-ivy.data_classes.container.data_type"], [51, "module-ivy.data_classes.array.data_type"], [586, "data-type"], [350, "module-ivy.functional.ivy.experimental.data_type"]], "Container": [[97, "container"]], "Conversions": [[72, "module-ivy.data_classes.container.conversions"], [49, "module-ivy.data_classes.array.conversions"]], "cast_bool": [[114, "cast-bool"]], "Creation": [[73, "module-ivy.data_classes.container.creation"], [50, "module-ivy.data_classes.array.creation"], [585, "creation"], [349, "creation"]], "Data Types": [[769, "data-types"]], "Data Type Module": [[769, "data-type-module"]], "Data Type Promotion": [[769, "data-type-promotion"]], "Arguments in other Functions": [[769, "arguments-in-other-functions"], [770, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[769, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[769, "backend-data-type-bugs"]], "Data Type Casting Modes": [[769, "data-type-casting-modes"]], "Superset Data Type Support": [[769, "superset-data-type-support"]], "FAQ": [[795, "faq"]], "Maintaining Backend Versions": [[795, "maintaining-backend-versions"]], "Dynamic Sizes": [[795, "dynamic-sizes"]], "Type and Shape Checking": [[795, "type-and-shape-checking"]], "GPU handling": [[795, "gpu-handling"]], "Model Deployment": [[795, "model-deployment"]], "Dynamic Control Flow": [[795, "dynamic-control-flow"]], "Auto-Differentiation": [[795, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[795, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[795, "support-for-functions"]], "Alternative Data Structures": [[795, "alternative-data-structures"]], "Custom Operations": [[795, "custom-operations"]], "The Pipeline": [[795, "the-pipeline"]], "State": [[795, "state"]], "Ivy Frontend Tests": [[781, "ivy-frontend-tests"]], "Introduction": [[781, "introduction"], [780, "introduction"], [755, "introduction"], [43, "Introduction"]], "Frontend Test Examples": [[781, "frontend-test-examples"]], "ivy.tan()": [[781, "ivy-tan"]], "ivy.full()": [[781, "ivy-full"]], "Testing Without Using Tests Values": [[781, "testing-without-using-tests-values"]], "Alias functions": [[781, "alias-functions"]], "Frontend Instance Method Tests": [[781, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[781, "frontend-instance-method-test-examples"]], "ivy.add()": [[781, "ivy-add"]], "Hypothesis Helpers": [[781, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[781, "frontend-framework-testing-configuration"]], "Continuous Integration": [[768, "continuous-integration"], [774, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[768, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[768, "ivy-tests"], [782, "ivy-tests"]], "Implementation": [[768, "implementation"]], "A Top-Down View": [[768, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[768, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[768, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[768, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[768, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[768, "determine-test-coverage-workflow"]], "Multiple Runners": [[768, "multiple-runners"]], "Race Condition": [[768, "race-condition"]], "Array API Tests": [[768, "array-api-tests"], [763, "array-api-tests"]], "Periodic Testing": [[768, "periodic-testing"]], "Manually Dispatched Workflows": [[768, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[768, "ci-pipeline"]], "Push": [[768, "push"]], "Pull Request": [[768, "pull-request"]], "Dashboard": [[768, "dashboard"]], "Ivy Container": [[790, "ivy-container"]], "Construction": [[790, "construction"]], "Representation": [[790, "representation"]], "Recursive Methods": [[790, "recursive-methods"]], "Built-ins": [[790, "built-ins"]], "Access": [[790, "access"]], "Saving and Loading": [[790, "saving-and-loading"]], "Comparisons": [[790, "comparisons"]], "Customized Representations": [[790, "customized-representations"]], "Use Cases": [[790, "use-cases"]], "Compartmentalization": [[790, "compartmentalization"]], "Configuration": [[790, "configuration"]], "Data loading": [[790, "data-loading"]], "Network weights": [[790, "network-weights"]], "Deep Dive": [[762, "deep-dive"]], "Running the Tests": [[763, "running-the-tests"]], "Using Terminal": [[763, "using-terminal"]], "Using the IDE": [[763, "using-the-ide"]], "Regenerating Test Failures": [[763, "regenerating-test-failures"]], "Test Skipping": [[763, "test-skipping"]], "Compiler Infrastructure": [[800, "compiler-infrastructure"], [808, "compiler-infrastructure"]], "LLVM": [[800, "id1"]], "MLIR": [[800, "id2"]], "OneAPI": [[800, "id3"]], "Exchange Formats": [[801, "exchange-formats"], [808, "exchange-formats"]], "ONNX onnx": [[801, "onnx-onnx"]], "NNEF nnef": [[801, "nnef-nnef"]], "CoreML coreml": [[801, "coreml-coreml"]], "API Standards": [[799, "api-standards"], [808, "api-standards"]], "Array API Standard": [[799, "id1"]], "Get Started": [[796, "get-started"]], "Installing using pip": [[796, "installing-using-pip"], [749, "installing-using-pip"]], "Docker": [[796, "docker"], [749, "docker"]], "Installing from source": [[796, "installing-from-source"], [749, "installing-from-source"]], "Ivy as a Transpiler": [[792, "ivy-as-a-transpiler"], [29, "Ivy-as-a-Transpiler"], [28, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[792, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[792, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[792, "converting-network-models"]], "Applied Libraries": [[794, "applied-libraries"], [755, "applied-libraries"]], "Ivy Mechanics": [[794, "ivy-mechanics"]], "Ivy Vision": [[794, "ivy-vision"]], "Ivy Robot": [[794, "ivy-robot"]], "Ivy Gym": [[794, "ivy-gym"]], "Ivy Memory": [[794, "ivy-memory"]], "Inplace Updates": [[779, "inplace-updates"]], "out argument": [[779, "out-argument"]], "copy argument": [[779, "copy-argument"]], "Views": [[779, "views"]], "Wrapper Frameworks": [[809, "wrapper-frameworks"], [808, "wrapper-frameworks"]], "EagerPy eagerpy": [[809, "eagerpy-eagerpy"]], "Keras keras": [[809, "keras-keras"]], "Thinc thinc": [[809, "thinc-thinc"]], "TensorLy tensorly": [[809, "tensorly-tensorly"]], "NeuroPod": [[809, "id1"]], "Overview": [[778, "overview"]], "Example Usage of the Gradient API": [[778, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[778, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[778, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[778, "custom-gradient-functions"]], "Design of the Gradient API": [[778, "design-of-the-gradient-api"]], "Our policy on gradients": [[778, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[778, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[778, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[778, "framework-specific-considerations"]], "Function Types": [[776, "function-types"]], "Primary Functions": [[776, "primary-functions"]], "Compositional Functions": [[776, "compositional-functions"]], "Mixed Functions": [[776, "mixed-functions"]], "Partial Mixed Functions": [[776, "partial-mixed-functions"]], "Standalone Functions": [[776, "standalone-functions"]], "Nestable Functions": [[776, "nestable-functions"], [767, "nestable-functions"], [775, "nestable-functions"]], "Convenience Functions": [[776, "convenience-functions"]], "Ivy as a Framework": [[788, "ivy-as-a-framework"], [28, "Ivy-as-a-Framework"]], "Frameworks": [[802, "frameworks"], [808, "frameworks"]], "MATLAB matlab": [[802, "matlab-matlab"]], "SciPy scipy": [[802, "scipy-scipy"]], "Torch torch": [[802, "torch-torch"]], "NumPy numpy": [[802, "numpy-numpy"]], "SciKit Learn scikit-learn": [[802, "scikit-learn-scikit-learn"]], "Theano theano": [[802, "theano-theano"]], "Pandas pandas": [[802, "pandas-pandas"]], "Julia julia": [[802, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[802, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[802, "caffe-caffe"]], "Chainer chainer": [[802, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[802, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[802, "mxnet-mxnet"]], "CNTK cntk": [[802, "cntk-cntk"]], "PyTorch pytorch": [[802, "pytorch-pytorch"]], "Flux flux": [[802, "flux-flux"]], "JAX jax": [[802, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[802, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[802, "dex-language-dex-language"]], "Building the Docs Pipeline": [[766, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[766, "how-the-doc-builder-is-being-run"]], "The convenience script": [[766, "the-convenience-script"]], "Options": [[766, "options"]], "The Docker image": [[766, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[766, "how-ivy-s-docs-is-structured"]], "index.rst": [[766, "index-rst"]], "partial_conf.py": [[766, "partial-conf-py"]], "prebuild.sh": [[766, "prebuild-sh"]], "Custom Extensions": [[766, "custom-extensions"]], "custom_autosummary": [[766, "custom-autosummary"]], ":hide-table:": [[766, "hide-table"]], "discussion_linker": [[766, "discussion-linker"]], "skippable_function": [[766, "skippable-function"]], "ivy_data": [[766, "ivy-data"]], "Helpful Resources": [[758, "helpful-resources"]], "Related Work": [[798, "related-work"]], "Graph Tracers": [[803, "graph-tracers"], [808, "graph-tracers"]], "tf.Graph": [[803, "tf-graph"]], "Jaxpr": [[803, "jaxpr"]], "torch.jit": [[803, "torch-jit"]], "torch.fx": [[803, "torch-fx"]], "Devices": [[770, "devices"]], "Device Module": [[770, "device-module"]], "Device handling": [[770, "device-handling"]], "Multi-Vendor Compiler Frameworks": [[805, "multi-vendor-compiler-frameworks"], [808, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[805, "apache-tvm"]], "XLA": [[805, "xla"]], "GCC": [[805, "gcc"]], "Formatting": [[774, "formatting"]], "Lint Checks": [[774, "lint-checks"], [774, "id2"]], "Setup Formatting Locally": [[774, "setup-formatting-locally"]], "Pre-commit": [[774, "pre-commit"]], "VS Code": [[774, "vs-code"]], "PyCharm": [[774, "pycharm"], [760, "pycharm"]], "Common Issues with Pre-Commit": [[774, "common-issues-with-pre-commit"]], "Lint Formatting": [[774, "lint-formatting"]], "Ivy Array": [[789, "ivy-array"], [764, "ivy-array"]], "The Array Class": [[789, "the-array-class"]], "Unifying Operators": [[789, "unifying-operators"]], "API Monkey Patching": [[789, "api-monkey-patching"]], "Instance Methods": [[789, "instance-methods"]], "Vendor-Specific APIs": [[806, "vendor-specific-apis"], [808, "vendor-specific-apis"]], "TensorRT tensorrt": [[806, "tensorrt-tensorrt"]], "CUDA cuda": [[806, "cuda-cuda"]], "Arrays": [[764, "arrays"]], "Native Array": [[764, "native-array"]], "Array Handling": [[764, "array-handling"]], "Integrating custom classes with Ivy": [[764, "integrating-custom-classes-with-ivy"]], "Vendor-Specific Compilers": [[807, "vendor-specific-compilers"], [808, "vendor-specific-compilers"]], "ICC": [[807, "id1"]], "ICX": [[807, "icx"]], "NVCC": [[807, "nvcc"]], "Error Handling": [[757, "error-handling"]], "Function Wrapping": [[777, "function-wrapping"]], "Decorator order": [[777, "decorator-order"]], "Conversion Wrappers": [[777, "conversion-wrappers"]], "Inference Wrappers": [[777, "inference-wrappers"]], "Out Argument Support": [[777, "out-argument-support"]], "Nestable Support": [[777, "nestable-support"]], "Partial Mixed Function Support": [[777, "partial-mixed-function-support"]], "Shape Conversion": [[777, "shape-conversion"]], "View Handling": [[777, "view-handling"]], "Exception Handling": [[777, "exception-handling"], [773, "exception-handling"]], "Miscellaneous Wrappers": [[777, "miscellaneous-wrappers"]], "Glossary": [[797, "glossary"]], "What does Ivy Add?": [[808, "what-does-ivy-add"]], "ML-Unifying Companies": [[808, "ml-unifying-companies"], [804, "ml-unifying-companies"]], "Setting Up": [[760, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[760, "forking-and-cloning-the-repo"]], "Pre-Commit": [[760, "pre-commit"]], "Virtual environments - No Docker": [[760, "virtual-environments-no-docker"]], "Using miniconda": [[760, "using-miniconda"]], "Using venv": [[760, "using-venv"]], "Docker Interpreter with PyCharm": [[760, "docker-interpreter-with-pycharm"]], "Windows": [[760, "windows"], [760, "id6"]], "MacOS": [[760, "macos"]], "Ubuntu": [[760, "ubuntu"], [760, "id8"]], "Setting Up Testing in PyCharm": [[760, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[760, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[760, "setting-up-for-free"]], "WSL": [[760, "wsl"]], "GitHub Codespaces": [[760, "github-codespaces"]], "Extensions": [[793, "extensions"]], "The Basics": [[761, "the-basics"]], "Getting Help": [[761, "getting-help"]], "ToDo List Issues": [[761, "todo-list-issues"]], "Managing Your Fork": [[761, "managing-your-fork"]], "Who To Ask": [[761, "who-to-ask"]], "With Command Line:": [[761, "with-command-line"]], "With Browser:": [[761, "with-browser"]], "Pull Requests": [[761, "pull-requests"]], "Small Commits Often": [[761, "small-commits-often"]], "Interactive Ivy Docker Container": [[761, "interactive-ivy-docker-container"]], "Running Tests Locally": [[761, "running-tests-locally"]], "With Docker": [[761, "with-docker"]], "Getting the most out of IDE": [[761, "getting-the-most-out-of-ide"]], "with PyCharm": [[761, "with-pycharm"]], "Containers": [[767, "containers"]], "Container Instance Methods": [[767, "container-instance-methods"]], "API Instance Methods": [[767, "api-instance-methods"]], "API Special Methods": [[767, "api-special-methods"]], "Quansight": [[804, "id1"]], "Modular": [[804, "id2"]], "OctoML": [[804, "id3"]], "Docstring Examples": [[771, "docstring-examples"]], "ivy.tan": [[771, "ivy-tan"]], "ivy.roll": [[771, "ivy-roll"]], "ivy.add": [[771, "ivy-add"]], "Function Arguments": [[775, "function-arguments"]], "Examples": [[775, "examples"], [749, "examples"], [0, "examples"], [2, "examples"]], "Positional and Keyword Arguments": [[775, "positional-and-keyword-arguments"]], "Input Arrays": [[775, "input-arrays"]], "out Argument": [[775, "out-argument"]], "dtype and device arguments": [[775, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[775, "numbers-in-operator-functions"]], "Integer Sequences": [[775, "integer-sequences"]], "Open Tasks": [[759, "open-tasks"]], "Function Formatting": [[759, "function-formatting"]], "Formatting checklist": [[759, "formatting-checklist"]], "Frontend APIs": [[759, "frontend-apis"]], "Where to place a frontend function": [[759, "where-to-place-a-frontend-function"]], "Frontend checklist": [[759, "frontend-checklist"]], "Ivy Experimental API": [[759, "ivy-experimental-api"]], "Extending the Ivy API": [[759, "extending-the-ivy-api"]], "Where to place a backend function": [[759, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[759, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Building the Docs": [[756, "building-the-docs"]], "Building the Docs using Docker": [[756, "building-the-docs-using-docker"]], "Using convenience script": [[756, "using-convenience-script"]], "Using existing image on Docker Hub": [[756, "using-existing-image-on-docker-hub"]], "Building the image locally": [[756, "building-the-image-locally"]], "Building the Docs without Docker": [[756, "building-the-docs-without-docker"]], "Ivy Frontends": [[780, "ivy-frontends"]], "The Frontend Basics": [[780, "the-frontend-basics"]], "Writing Frontend Functions": [[780, "writing-frontend-functions"]], "Short Frontend Implementations": [[780, "short-frontend-implementations"]], "Unused Arguments": [[780, "unused-arguments"]], "Supported Data Types and Devices": [[780, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[780, "id6"]], "Frontend Data Type Promotion Rules": [[780, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[780, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[780, "frontends-duplicate-policy"]], "Superset Behaviour": [[785, "superset-behaviour"]], "Extending the Standard": [[785, "extending-the-standard"]], "What is the Superset?": [[785, "what-is-the-superset"]], "A Non-Duplicate Superset": [[785, "a-non-duplicate-superset"]], "What is not the Superset?": [[785, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[785, "balancing-generalization-with-efficiency"]], "More Examples": [[785, "more-examples"]], "Maximizing Usage of Native Functionality": [[785, "maximizing-usage-of-native-functionality"]], "Design": [[786, "design"]], "Docstrings": [[772, "docstrings"]], "Building Blocks": [[787, "building-blocks"]], "Backend Functional APIs \u2705": [[787, "backend-functional-apis"]], "Ivy Functional API \u2705": [[787, "ivy-functional-api"]], "Backend Handler \u2705": [[787, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[787, "graph-compiler"]], "Operating Modes": [[784, "operating-modes"]], "Global Parameter Properties": [[784, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[784, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[784, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Testing Pipeline": [[782, "testing-pipeline"]], "Hypothesis": [[782, "id1"]], "Data Generation": [[782, "id2"]], "Writing your own strategy": [[782, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[782, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[782, "ivy-test-decorators"]], "Writing Ivy Tests": [[782, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[782, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[782, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[782, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[782, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[782, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[782, "self-consistent-and-explicit-testing"]], "test_array_function": [[782, "id5"]], "Running Ivy Tests": [[782, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[782, "re-running-failed-ivy-tests"]], "Backend Setting": [[765, "backend-setting"]], "Dynamic Backend Setting": [[765, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[765, "backend-and-frontend-version-support"]], "Ivy Stateful API": [[791, "ivy-stateful-api"], [19, "Ivy-Stateful-API"], [28, "Ivy-Stateful-API"]], "Modules": [[791, "modules"]], "Initializers": [[791, "initializers"], [730, "module-ivy.stateful.initializers"]], "Optimizers": [[791, "optimizers"], [735, "module-ivy.stateful.optimizers"]], "Ivy Exception Class": [[773, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[773, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[773, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[773, "handle-exceptions-decorator"]], "Consistency in Errors": [[773, "consistency-in-errors"]], "Assertion Function": [[773, "assertion-function"]], "Navigating the Code": [[783, "navigating-the-code"]], "Categorization": [[783, "categorization"]], "Submodule Design": [[783, "submodule-design"]], "Ivy API": [[783, "ivy-api"]], "Backend API": [[783, "backend-api"]], "Submodule Helper Functions": [[783, "submodule-helper-functions"]], "Version Unpinning": [[783, "version-unpinning"]], "Sub backend handler": [[741, "module-ivy.utils.backend.sub_backend_handler"]], "argsort": [[707, "argsort"]], "std": [[718, "std"]], "Utils": [[726, "utils"]], "Logging": [[746, "module-ivy.utils.logging"]], "Helpers": [[729, "module-ivy.stateful.helpers"]], "nonzero": [[701, "nonzero"]], "unique_values": [[706, "unique-values"]], "Data-dependent output shape": [[706, null], [704, null], [703, null], [705, null], [601, null], [601, null], [601, null], [601, null]], "Example - Ivy Robot": [[755, "example-ivy-robot"]], "searchsorted": [[709, "searchsorted"]], "Assertions": [[737, "module-ivy.utils.assertions"]], "Dynamic import": [[742, "module-ivy.utils.dynamic_import"]], "min": [[716, "min"]], "argmin": [[699, "argmin"]], "argwhere": [[700, "argwhere"]], "prod": [[717, "prod"]], "Einsum parser": [[743, "module-ivy.utils.einsum_parser"]], "unique_counts": [[704, "unique-counts"]], "var": [[720, "var"]], "sum": [[719, "sum"]], "load": [[723, "load"]], "Exceptions": [[744, "module-ivy.utils.exceptions"]], "Verbosity": [[748, "module-ivy.utils.verbosity"]], "einsum": [[713, "einsum"]], "Standardization": [[752, "standardization"]], "Skepticism": [[752, "skepticism"]], "Complimentary vs Competitive": [[752, "complimentary-vs-competitive"]], "Do Standards Work?": [[752, "do-standards-work"]], "The Array API Standard": [[752, "the-array-api-standard"]], "any": [[722, "any"]], "Contributing": [[754, "contributing"], [749, "contributing"]], "cumsum": [[712, "cumsum"]], "save": [[724, "save"]], "unique_all": [[703, "unique-all"]], "seed": [[696, "seed"]], "ML Explosion": [[751, "ml-explosion"]], "random_normal": [[694, "random-normal"]], "Sequential": [[736, "module-ivy.stateful.sequential"]], "Ast helpers": [[739, "module-ivy.utils.backend.ast_helpers"]], "mean": [[715, "mean"]], "Inspection": [[745, "module-ivy.utils.inspection"]], "argmax": [[698, "argmax"]], "Converters": [[728, "module-ivy.stateful.converters"]], "where": [[702, "where"]], "cumprod": [[711, "cumprod"]], "Handler": [[740, "module-ivy.utils.backend.handler"]], "all": [[721, "all"]], "shuffle": [[697, "shuffle"]], "randint": [[693, "randint"]], "max": [[714, "max"]], "Status": [[749, "status"]], "Unified AI": [[749, "unified-ai"]], "Ivy as a transpiler": [[749, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[749, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[749, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[749, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[749, "setting-up-ivy"]], "Using Ivy": [[749, "using-ivy"]], "Multi-backend Support": [[749, "multi-backend-support"]], "Transpilation API": [[749, "transpilation-api"]], "Documentation": [[749, "documentation"]], "Community": [[749, "community"]], "Citation": [[749, "citation"]], "Background": [[750, "background"]], "Module": [[733, "module-ivy.stateful.module"]], "unique_inverse": [[705, "unique-inverse"]], "sort": [[710, "sort"]], "msort": [[708, "msort"]], "Framework classes": [[725, "framework-classes"]], "Backend": [[738, "backend"]], "Profiler": [[747, "module-ivy.utils.profiler"]], "Why Unify?": [[753, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[753, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[753, "infinite-shelf-life"]], "random_uniform": [[695, "random-uniform"]], "duplicate_array_index_chains": [[674, "duplicate-array-index-chains"]], "multinomial": [[692, "multinomial"]], "stack": [[664, "stack"]], "trace": [[645, "trace"]], "tensordot": [[643, "tensordot"]], "flip": [[657, "flip"]], "matrix_transpose": [[635, "matrix-transpose"]], "maml_step": [[670, "maml-step"]], "repeat": [[659, "repeat"]], "nested_map": [[684, "nested-map"]], "vecdot": [[647, "vecdot"]], "sparse_cross_entropy": [[652, "sparse-cross-entropy"]], "nested_argwhere": [[683, "nested-argwhere"]], "svd": [[641, "svd"]], "index_nest": [[675, "index-nest"]], "split": [[662, "split"]], "cross_entropy": [[651, "cross-entropy"]], "fomaml_step": [[669, "fomaml-step"]], "reptile_step": [[671, "reptile-step"]], "permute_dims": [[658, "permute-dims"]], "matrix_norm": [[632, "matrix-norm"]], "swapaxes": [[665, "swapaxes"]], "matrix_power": [[633, "matrix-power"]], "multi_index_nest": [[681, "multi-index-nest"]], "reshape": [[660, "reshape"]], "binary_cross_entropy": [[650, "binary-cross-entropy"]], "roll": [[661, "roll"]], "unstack": [[667, "unstack"]], "insert_into_nest_at_indices": [[677, "insert-into-nest-at-indices"]], "vector_norm": [[648, "vector-norm"]], "prune_nest_at_indices": [[688, "prune-nest-at-indices"]], "nested_multi_map": [[685, "nested-multi-map"]], "lu_factor": [[630, "lu-factor"]], "vector_to_skew_symmetric_matrix": [[649, "vector-to-skew-symmetric-matrix"]], "clip": [[653, "clip"]], "pinv": [[637, "pinv"]], "all_nested_indices": [[672, "all-nested-indices"]], "tensorsolve": [[644, "tensorsolve"]], "layer_norm": [[691, "layer-norm"]], "vander": [[646, "vander"]], "matrix_rank": [[634, "matrix-rank"]], "solve": [[640, "solve"]], "nested_any": [[682, "nested-any"]], "expand_dims": [[656, "expand-dims"]], "prune_empty": [[686, "prune-empty"]], "zero_pad": [[668, "zero-pad"]], "insert_into_nest_at_index": [[676, "insert-into-nest-at-index"]], "prune_nest_at_index": [[687, "prune-nest-at-index"]], "set_nest_at_indices": [[690, "set-nest-at-indices"]], "concat": [[654, "concat"]], "squeeze": [[663, "squeeze"]], "slogdet": [[639, "slogdet"]], "tile": [[666, "tile"]], "map": [[678, "map"]], "svdvals": [[642, "svdvals"]], "copy_nest": [[673, "copy-nest"]], "matmul": [[631, "matmul"]], "constant_pad": [[655, "constant-pad"]], "qr": [[638, "qr"]], "outer": [[636, "outer"]], "map_nest_at_index": [[679, "map-nest-at-index"]], "set_nest_at_index": [[689, "set-nest-at-index"]], "map_nest_at_indices": [[680, "map-nest-at-indices"]], "1.2: As a Decorator": [[35, "1.2:-As-a-Decorator"]], "Unify": [[35, "Unify"], [34, "Unify"], [33, "Unify"], [23, "Unify"], [24, "Unify"]], "Compile": [[35, "Compile"], [34, "Compile"], [33, "Compile"], [23, "Compile"], [24, "Compile"]], "Transpile": [[35, "Transpile"], [34, "Transpile"], [33, "Transpile"], [23, "Transpile"], [24, "Transpile"]], "Round Up": [[35, "Round-Up"], [15, "Round-Up"], [19, "Round-Up"], [25, "Round-Up"], [32, "Round-Up"], [20, "Round-Up"], [21, "Round-Up"], [30, "Round-Up"], [34, "Round-Up"], [42, "Round-Up"], [33, "Round-Up"], [13, "Round-Up"], [23, "Round-Up"], [29, "Round-Up"], [31, "Round-Up"], [24, "Round-Up"], [22, "Round-Up"]], "Graph Compiler": [[0, "graph-compiler"], [28, "Graph-Compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Sharp bits": [[0, "sharp-bits"], [2, "sharp-bits"]], "End-to-End Training Pipeline in Ivy": [[44, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[44, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[44, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[44, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[44, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[44, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[44, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[44, "Plotting-the-training-metrics"]], "Save the trained Model": [[44, "Save-the-trained-Model"]], "Transpiling a Tensorflow model to build on top": [[15, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Write Ivy code": [[19, "Write-Ivy-code"]], "Contents": [[19, "Contents"]], "Installing Ivy": [[19, "Installing-Ivy"]], "Importing Ivy": [[19, "Importing-Ivy"]], "Ivy Backend Handler": [[19, "Ivy-Backend-Handler"], [28, "Ivy-Backend-Handler"]], "Data Structures": [[19, "Data-Structures"], [28, "Data-Structures"]], "Ivy Functional API": [[19, "Ivy-Functional-API"], [28, "Ivy-Functional-API"]], "Tutorials And Examples": [[17, "tutorials-and-examples"]], "Learn the basics": [[17, "learn-the-basics"], [18, "learn-the-basics"]], "Guides": [[17, "guides"], [12, "guides"]], "Examples and Demos": [[17, "examples-and-demos"], [5, "examples-and-demos"]], "Transpile any library": [[25, "Transpile-any-library"]], "0.2: Transpile": [[32, "0.2:-Transpile"]], "Transpiling a haiku model to build on top": [[14, "Transpiling-a-haiku-model-to-build-on-top"]], "# Ivy Bert Demo": [[7, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[7, "Install-the-dependecies"]], "Import the modules": [[7, "Import-the-modules"]], "Data Preparation": [[7, "Data-Preparation"], [8, "Data-Preparation"], [6, "Data-Preparation"], [10, "Data-Preparation"]], "Ivy inference with Sequence Classification": [[7, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[7, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[7, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[7, "Ivy-model-inference-with-torch"]], "3.0: Perceiver": [[38, "3.0:-Perceiver"]], "Unify code": [[20, "Unify-code"]], "Compile code": [[21, "Compile-code"]], "1.3: Dynamic vs Static": [[36, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[36, "Dynamic"]], "Static": [[36, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[36, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Developing a convolutional network using Ivy": [[16, "Developing-a-convolutional-network-using-Ivy"]], "Demos": [[3, "demos"]], "Creating a Notebook for Demo": [[3, "creating-a-notebook-for-demo"]], "0.0: Unify": [[30, "0.0:-Unify"]], "Image Segmentation with Ivy UNet": [[8, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[8, "Imports"], [10, "Imports"]], "Custom Preprocessing": [[8, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[8, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [10, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[8, "Visualise-image"], [10, "Visualise-image"]], "Model Inference": [[8, "Model-Inference"]], "Initializing Native Torch UNet": [[8, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[8, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[8, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[8, "TensorFlow-backend"]], "JAX": [[8, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[8, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Compilation of a Basic Function": [[41, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[41, "Installs-\ud83d\udcbe"], [40, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[41, "Imports-\ud83d\udec3"], [40, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[41, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[41, "Function-compilation-\ud83d\udee0"]], "Set backend": [[41, "Set-backend"]], "Sample input": [[41, "Sample-input"]], "Define function to compile": [[41, "Define-function-to-compile"]], "Compile the function": [[41, "Compile-the-function"]], "Check results": [[41, "Check-results"], [41, "id1"]], "Compiling simple neural network \ud83e\udde0": [[41, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[41, "Define-Model"], [40, "Define-Model"]], "Create model": [[41, "Create-model"]], "Define input": [[41, "Define-input"]], "Compile network": [[41, "Compile-network"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "Write a model using Ivy": [[27, "Write-a-model-using-Ivy"]], "1.1: Framework Selection": [[34, "1.1:-Framework-Selection"]], "TO REPLACE: Title": [[4, "TO-REPLACE:-Title"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[42, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[42, "Table-of-Contents"]], "Defining the model": [[42, "Defining-the-model"]], "Model construction": [[42, "Model-construction"]], "Some helper functions": [[42, "Some-helper-functions"]], "Transpiling the model": [[42, "Transpiling-the-model"]], "PyTorch pipeline": [[42, "PyTorch-pipeline"]], "Dataset download": [[42, "Dataset-download"]], "DataLoader": [[42, "DataLoader"]], "Training": [[42, "Training"]], "Testing": [[42, "Testing"]], "Ivy as a Transpiler Introduction": [[46, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[46, "To-use-the-transpiler:"]], "Transpiler Interface": [[46, "Transpiler-Interface"]], "Telemetry": [[46, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[46, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[46, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[46, "3.-Transpile-Models-\ud83c\udf10"]], "Ivy AlexNet demo": [[6, "Ivy-AlexNet-demo"]], "Installation": [[6, "Installation"], [10, "Installation"]], "Ivy AlexNet inference in Torch": [[6, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[6, "TensorFlow-inference"]], "JAX inference": [[6, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[6, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "1.0: Lazy vs Eager": [[33, "1.0:-Lazy-vs-Eager"]], "HuggingFace Tensorflow DeiT": [[45, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[45, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Deepmind PerceiverIO on GPU": [[43, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[43, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[43, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[43, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[43, "Run-the-demo..."]], "\u2026with torch backend": [[43, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[43, "....with-tensorflow-backend"]], "\u2026with jax backend": [[43, "...with-jax-backend"]], "\u2026with numpy backend": [[43, "...with-numpy-backend"]], "Transpile any model": [[26, "Transpile-any-model"]], "Round up": [[26, "Round-up"]], "Transpiling a PyTorch model to build on top": [[13, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Lazy vs Eager": [[23, "Lazy-vs-Eager"]], "3.1: Stable Diffusion": [[39, "3.1:-Stable-Diffusion"]], "Using Ivy ResNet": [[10, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[10, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[10, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[10, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[10, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[10, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [10, "id1"]], "Model Inference ResNet50": [[10, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[10, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[10, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Quickstart": [[29, "Quickstart"]], "Get familiar with Ivy": [[29, "Get-familiar-with-Ivy"]], "Functional API": [[29, "Functional-API"]], "Stateful API": [[29, "Stateful-API"]], "Compiling code": [[29, "Compiling-code"]], "Any function": [[29, "Any-function"], [28, "Any-function"]], "Any library": [[29, "Any-library"], [28, "Any-library"]], "Any model": [[29, "Any-model"], [28, "Any-model"]], "Resnet 18": [[47, "Resnet-18"]], "Basic Operations with Ivy": [[40, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[40, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[40, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[40, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[40, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[40, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[40, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[40, "Set-Backend-Framework"]], "Create Model": [[40, "Create-Model"]], "Create Optimizer": [[40, "Create-Optimizer"]], "Input and Target": [[40, "Input-and-Target"]], "Loss Function": [[40, "Loss-Function"]], "Training Loop": [[40, "Training-Loop"]], "ODSC Ivy Demo": [[28, "ODSC-Ivy-Demo"]], "0.1: Compile": [[31, "0.1:-Compile"]], "Accelerating PyTorch models with JAX": [[11, "Accelerating-PyTorch-models-with-JAX"]], "How to use decorators": [[24, "How-to-use-decorators"]], "Transpile code": [[22, "Transpile-code"]], "Accelerating MMPreTrain models with JAX": [[9, "Accelerating-MMPreTrain-models-with-JAX"]], "2.0: Kornia": [[37, "2.0:-Kornia"]], "strides": [[550, "strides"]], "supports_inplace_updates": [[551, "supports-inplace-updates"]], "inplace_arrays_supported": [[516, "inplace-arrays-supported"]], "to_ivy_shape": [[552, "to-ivy-shape"]], "inplace_decrement": [[517, "inplace-decrement"]], "itemsize": [[528, "itemsize"]], "set_shape_array_mode": [[544, "set-shape-array-mode"]], "Parameter": [[544, "parameter"], [545, "parameter"], [541, "parameter"], [535, "parameter"], [536, "parameter"], [542, "parameter"], [590, "parameter"], [590, "id1"], [590, "id2"], [590, "id3"], [590, "id4"], [590, "id5"], [587, "parameter"], [209, "parameter"]], "einops_repeat": [[504, "einops-repeat"]], "unset_precise_mode": [[564, "unset-precise-mode"]], "inplace_variables_supported": [[520, "inplace-variables-supported"]], "has_nans": [[515, "has-nans"]], "exists": [[505, "exists"]], "function_unsupported_devices_and_dtypes": [[508, "function-unsupported-devices-and-dtypes"]], "set_show_func_wrapper_trace_mode": [[545, "set-show-func-wrapper-trace-mode"]], "unset_min_base": [[561, "unset-min-base"]], "unset_queue_timeout": [[565, "unset-queue-timeout"]], "is_ivy_nested_array": [[524, "is-ivy-nested-array"]], "set_nestable_mode": [[541, "set-nestable-mode"]], "is_native_array": [[525, "is-native-array"]], "inplace_update": [[519, "inplace-update"]], "set_min_base": [[539, "set-min-base"]], "is_ivy_array": [[522, "is-ivy-array"]], "is_ivy_container": [[523, "is-ivy-container"]], "inplace_increment": [[518, "inplace-increment"]], "set_array_mode": [[535, "set-array-mode"]], "set_exception_trace_mode": [[536, "set-exception-trace-mode"]], "is_array": [[521, "is-array"]], "multiprocessing": [[530, "multiprocessing"]], "isin": [[526, "isin"]], "get_item": [[512, "get-item"]], "stable_divide": [[548, "stable-divide"]], "set_precise_mode": [[542, "set-precise-mode"]], "shape": [[547, "shape"]], "to_scalar": [[556, "to-scalar"]], "gather_nd": [[510, "gather-nd"]], "to_numpy": [[555, "to-numpy"]], "get_all_arrays_in_memory": [[511, "get-all-arrays-in-memory"]], "set_tmp_dir": [[546, "set-tmp-dir"]], "set_min_denominator": [[540, "set-min-denominator"]], "try_else_none": [[557, "try-else-none"]], "get_referrers_recursive": [[514, "get-referrers-recursive"]], "print_all_arrays_in_memory": [[532, "print-all-arrays-in-memory"]], "unset_array_mode": [[558, "unset-array-mode"]], "unset_exception_trace_mode": [[559, "unset-exception-trace-mode"]], "set_item": [[538, "set-item"]], "set_queue_timeout": [[543, "set-queue-timeout"]], "unset_inplace_mode": [[560, "unset-inplace-mode"]], "fourier_encode": [[506, "fourier-encode"]], "scatter_nd": [[534, "scatter-nd"]], "gather": [[509, "gather"]], "match_kwargs": [[529, "match-kwargs"]], "stable_pow": [[549, "stable-pow"]], "get_num_dims": [[513, "get-num-dims"]], "to_native_shape": [[554, "to-native-shape"]], "unset_min_denominator": [[562, "unset-min-denominator"]], "unset_shape_array_mode": [[566, "unset-shape-array-mode"]], "function_supported_devices_and_dtypes": [[507, "function-supported-devices-and-dtypes"]], "num_arrays_in_memory": [[531, "num-arrays-in-memory"]], "scatter_flat": [[533, "scatter-flat"]], "isscalar": [[527, "isscalar"]], "to_list": [[553, "to-list"]], "set_inplace_mode": [[537, "set-inplace-mode"]], "unset_nestable_mode": [[563, "unset-nestable-mode"]], "unfold": [[456, "unfold"]], "lexsort": [[473, "lexsort"]], "soft_thresholding": [[453, "soft-thresholding"]], "native_sparse_array": [[476, "native-sparse-array"]], "quantile": [[489, "quantile"]], "i0": [[443, "i0"]], "put_along_axis": [[451, "put-along-axis"]], "group_norm": [[461, "group-norm"]], "bincount": [[478, "bincount"]], "bernoulli": [[466, "bernoulli"]], "array_equal": [[494, "array-equal"]], "cache_fn": [[496, "cache-fn"]], "partial_fold": [[447, "partial-fold"]], "take_along_axis": [[454, "take-along-axis"]], "current_backend_str": [[500, "current-backend-str"]], "nanprod": [[488, "nanprod"]], "median": [[485, "median"]], "einops_reduce": [[503, "einops-reduce"]], "optional_get_element": [[490, "optional-get-element"]], "l1_normalize": [[463, "l1-normalize"]], "is_native_sparse_array": [[475, "is-native-sparse-array"]], "nanmedian": [[487, "nanmedian"]], "hsplit": [[441, "hsplit"]], "partial_vec_to_tensor": [[450, "partial-vec-to-tensor"]], "lp_normalize": [[465, "lp-normalize"]], "moveaxis": [[445, "moveaxis"]], "arg_info": [[492, "arg-info"]], "unravel_index": [[471, "unravel-index"]], "assert_supports_inplace": [[495, "assert-supports-inplace"]], "beta": [[467, "beta"]], "vstack": [[459, "vstack"]], "histogram": [[483, "histogram"]], "partial_unfold": [[449, "partial-unfold"]], "dirichlet": [[468, "dirichlet"]], "all_equal": [[491, "all-equal"]], "igamma": [[484, "igamma"]], "partial_tensor_to_vec": [[448, "partial-tensor-to-vec"]], "is_ivy_sparse_array": [[474, "is-ivy-sparse-array"]], "einops_rearrange": [[502, "einops-rearrange"]], "unique_consecutive": [[457, "unique-consecutive"]], "gamma": [[469, "gamma"]], "native_sparse_array_to_indices_values_and_shape": [[477, "native-sparse-array-to-indices-values-and-shape"]], "arg_names": [[493, "arg-names"]], "corrcoef": [[479, "corrcoef"]], "nanmean": [[486, "nanmean"]], "default": [[501, "default"]], "clip_matrix_norm": [[497, "clip-matrix-norm"]], "pad": [[446, "pad"]], "vsplit": [[458, "vsplit"]], "cov": [[480, "cov"]], "instance_norm": [[462, "instance-norm"]], "l2_normalize": [[464, "l2-normalize"]], "matricize": [[444, "matricize"]], "hstack": [[442, "hstack"]], "container_types": [[499, "container-types"]], "cummin": [[482, "cummin"]], "invert_permutation": [[472, "invert-permutation"]], "rot90": [[452, "rot90"]], "top_k": [[455, "top-k"]], "cummax": [[481, "cummax"]], "batch_norm": [[460, "batch-norm"]], "clip_vector_norm": [[498, "clip-vector-norm"]], "poisson": [[470, "poisson"]], "broadcast_shapes": [[429, "broadcast-shapes"]], "fft2": [[383, "fft2"]], "partial_tucker": [[415, "partial-tucker"]], "cond": [[400, "cond"]], "kronecker": [[409, "kronecker"]], "log_poisson_loss": [[421, "log-poisson-loss"]], "make_svd_non_negative": [[410, "make-svd-non-negative"]], "soft_margin_loss": [[423, "soft-margin-loss"]], "get_interpolate_kernel": [[385, "get-interpolate-kernel"]], "interp": [[389, "interp"]], "truncated_svd": [[417, "truncated-svd"]], "reduce_window": [[397, "reduce-window"]], "max_unpool1d": [[394, "max-unpool1d"]], "smooth_l1_loss": [[422, "smooth-l1-loss"]], "diagflat": [[401, "diagflat"]], "ifftn": [[388, "ifftn"]], "dropout2d": [[379, "dropout2d"]], "flatten": [[436, "flatten"]], "adjoint": [[399, "adjoint"]], "as_strided": [[424, "as-strided"]], "heaviside": [[440, "heaviside"]], "fft": [[382, "fft"]], "dsplit": [[432, "dsplit"]], "concat_from_sequence": [[431, "concat-from-sequence"]], "initialize_tucker": [[406, "initialize-tucker"]], "eigvals": [[405, "eigvals"]], "max_pool1d": [[391, "max-pool1d"]], "flipud": [[438, "flipud"]], "expand": [[434, "expand"]], "kron": [[408, "kron"]], "rfftn": [[398, "rfftn"]], "ifft": [[387, "ifft"]], "fill_diagonal": [[435, "fill-diagonal"]], "l1_loss": [[420, "l1-loss"]], "mode_dot": [[412, "mode-dot"]], "fliplr": [[437, "fliplr"]], "atleast_3d": [[428, "atleast-3d"]], "svd_flip": [[416, "svd-flip"]], "eigh_tridiagonal": [[404, "eigh-tridiagonal"]], "max_pool2d": [[392, "max-pool2d"]], "nearest_interpolate": [[395, "nearest-interpolate"]], "eig": [[403, "eig"], [625, "eig"]], "atleast_1d": [[426, "atleast-1d"]], "choose": [[430, "choose"]], "dot": [[402, "dot"]], "tucker": [[418, "tucker"]], "huber_loss": [[419, "huber-loss"]], "multi_dot": [[413, "multi-dot"]], "fold": [[439, "fold"]], "interpolate": [[390, "interpolate"]], "embedding": [[381, "embedding"]], "idct": [[386, "idct"]], "max_pool3d": [[393, "max-pool3d"]], "generate_einsum_equation": [[384, "generate-einsum-equation"]], "khatri_rao": [[407, "khatri-rao"]], "matrix_exp": [[411, "matrix-exp"]], "dstack": [[433, "dstack"]], "dropout3d": [[380, "dropout3d"]], "dropout1d": [[378, "dropout1d"]], "pool": [[396, "pool"]], "associative_scan": [[425, "associative-scan"]], "multi_mode_dot": [[414, "multi-mode-dot"]], "atleast_2d": [[427, "atleast-2d"]], "conv_general_transpose": [[613, "conv-general-transpose"]], "eigh": [[626, "eigh"]], "value_and_grad": [[581, "value-and-grad"]], "conv": [[605, "conv"]], "conv1d": [[606, "conv1d"]], "unset_tmp_dir": [[568, "unset-tmp-dir"]], "multi_head_attention": [[618, "multi-head-attention"]], "Note": [[585, null], [133, null]], "Meta": [[596, "meta"], [359, "module-ivy.functional.ivy.experimental.meta"]], "lars_update": [[578, "lars-update"]], "dropout": [[615, "dropout"]], "value_is_nan": [[569, "value-is-nan"]], "inner": [[628, "inner"]], "depthwise_conv2d": [[614, "depthwise-conv2d"]], "adam_update": [[572, "adam-update"]], "adam_step": [[571, "adam-step"]], "gradient_descent_update": [[575, "gradient-descent-update"]], "diag": [[623, "diag"]], "inv": [[629, "inv"]], "lstm_update": [[617, "lstm-update"]], "unset_show_func_wrapper_trace_mode": [[567, "unset-show-func-wrapper-trace-mode"]], "scaled_dot_product_attention": [[619, "scaled-dot-product-attention"]], "jac": [[576, "jac"]], "Nest": [[597, "nest"], [360, "module-ivy.functional.ivy.experimental.nest"]], "conv3d_transpose": [[611, "conv3d-transpose"]], "conv2d": [[608, "conv2d"]], "conv1d_transpose": [[607, "conv1d-transpose"]], "stop_gradient": [[580, "stop-gradient"]], "eigvalsh": [[627, "eigvalsh"]], "lamb_update": [[577, "lamb-update"]], "vmap": [[570, "vmap"]], "linear": [[616, "linear"]], "cross": [[621, "cross"]], "diagonal": [[624, "diagonal"]], "conv_general_dilated": [[612, "conv-general-dilated"]], "grad": [[574, "grad"]], "Control flow ops": [[584, "control-flow-ops"]], "conv2d_transpose": [[609, "conv2d-transpose"]], "cholesky": [[620, "cholesky"]], "det": [[622, "det"]], "conv3d": [[610, "conv3d"]], "execute_with_gradients": [[573, "execute-with-gradients"]], "Constants": [[583, "module-ivy.functional.ivy.constants"], [348, "module-ivy.functional.ivy.experimental.constants"]], "optimizer_update": [[579, "optimizer-update"]], "log": [[260, "log"]], "remainder": [[281, "remainder"]], "logaddexp2": [[265, "logaddexp2"]], "less": [[258, "less"]], "pow": [[277, "pow"]], "lcm": [[257, "lcm"]], "rad2deg": [[278, "rad2deg"]], "not_equal": [[275, "not-equal"]], "isfinite": [[253, "isfinite"]], "reciprocal": [[280, "reciprocal"]], "sign": [[283, "sign"]], "tan": [[289, "tan"]], "blackman_window": [[303, "blackman-window"]], "logical_not": [[267, "logical-not"]], "sqrt": [[286, "sqrt"]], "thresholded_relu": [[302, "thresholded-relu"]], "indices": [[307, "indices"]], "logical_xor": [[269, "logical-xor"]], "trunc": [[292, "trunc"]], "nan_to_num": [[273, "nan-to-num"]], "logaddexp": [[264, "logaddexp"]], "sin": [[284, "sin"]], "log2": [[263, "log2"]], "tanh": [[290, "tanh"]], "kaiser_bessel_derived_window": [[308, "kaiser-bessel-derived-window"]], "less_equal": [[259, "less-equal"]], "positive": [[276, "positive"]], "isreal": [[256, "isreal"]], "silu": [[301, "silu"]], "trapz": [[291, "trapz"]], "logsigmoid": [[296, "logsigmoid"]], "logical_or": [[268, "logical-or"]], "logit": [[295, "logit"]], "random_tucker": [[314, "random-tucker"]], "log10": [[261, "log10"]], "isnan": [[255, "isnan"]], "hamming_window": [[305, "hamming-window"]], "sequence_length": [[300, "sequence-length"]], "sinh": [[285, "sinh"]], "subtract": [[288, "subtract"]], "kaiser_window": [[309, "kaiser-window"]], "eye_like": [[304, "eye-like"]], "elu": [[294, "elu"]], "mel_weight_matrix": [[310, "mel-weight-matrix"]], "negative": [[274, "negative"]], "real": [[279, "real"]], "prelu": [[297, "prelu"]], "ndindex": [[312, "ndindex"]], "isinf": [[254, "isinf"]], "multiply": [[272, "multiply"]], "round": [[282, "round"]], "random_cp": [[313, "random-cp"]], "hann_window": [[306, "hann-window"]], "imag": [[252, "imag"]], "minimum": [[271, "minimum"]], "ndenumerate": [[311, "ndenumerate"]], "square": [[287, "square"]], "log1p": [[262, "log1p"]], "trunc_divide": [[293, "trunc-divide"]], "selu": [[299, "selu"]], "maximum": [[270, "maximum"]], "logical_and": [[266, "logical-and"]], "relu6": [[298, "relu6"]], "sparsify_tensor": [[342, "sparsify-tensor"]], "avg_pool1d": [[373, "avg-pool1d"]], "zeta": [[344, "zeta"]], "avg_pool3d": [[375, "avg-pool3d"]], "Sparse array": [[366, "sparse-array"]], "unsorted_segment_sum": [[318, "unsorted-segment-sum"]], "fix": [[327, "fix"]], "bind_custom_gradient_function": [[346, "bind-custom-gradient-function"]], "binarizer": [[321, "binarizer"]], "modf": [[337, "modf"]], "nansum": [[338, "nansum"]], "adaptive_max_pool2d": [[371, "adaptive-max-pool2d"]], "signbit": [[340, "signbit"]], "sinc": [[341, "sinc"]], "count_nonzero": [[324, "count-nonzero"]], "adaptive_avg_pool1d": [[369, "adaptive-avg-pool1d"]], "dft": [[377, "dft"]], "frexp": [[330, "frexp"]], "tril_indices": [[315, "tril-indices"]], "float_power": [[328, "float-power"]], "xlogy": [[343, "xlogy"]], "trilu": [[316, "trilu"]], "hypot": [[332, "hypot"]], "adaptive_avg_pool2d": [[370, "adaptive-avg-pool2d"]], "avg_pool2d": [[374, "avg-pool2d"]], "unsorted_segment_min": [[317, "unsorted-segment-min"]], "fmax": [[329, "fmax"]], "nextafter": [[339, "nextafter"]], "allclose": [[320, "allclose"]], "reduce": [[345, "reduce"]], "digamma": [[326, "digamma"]], "lgamma": [[336, "lgamma"]], "vorbis_window": [[319, "vorbis-window"]], "lerp": [[335, "lerp"]], "dct": [[376, "dct"]], "gradient": [[331, "gradient"]], "conj": [[322, "conj"]], "ldexp": [[334, "ldexp"]], "isclose": [[333, "isclose"]], "area_interpolate": [[372, "area-interpolate"]], "copysign": [[323, "copysign"]], "diff": [[325, "diff"]], "split_func_call": [[212, "split-func-call"]], "unset_soft_device_mode": [[217, "unset-soft-device-mode"]], "percent_used_mem_on_dev": [[206, "percent-used-mem-on-dev"]], "bitwise_or": [[232, "bitwise-or"]], "used_mem_on_dev": [[218, "used-mem-on-dev"]], "unset_default_uint_dtype": [[190, "unset-default-uint-dtype"]], "get_all_ivy_arrays_on_dev": [[200, "get-all-ivy-arrays-on-dev"]], "valid_dtype": [[191, "valid-dtype"]], "cos": [[236, "cos"]], "dev_util": [[197, "dev-util"]], "atan2": [[227, "atan2"]], "greater": [[250, "greater"]], "deg2rad": [[238, "deg2rad"]], "cosh": [[237, "cosh"]], "asin": [[224, "asin"]], "add": [[222, "add"]], "floor_divide": [[246, "floor-divide"]], "num_ivy_arrays_on_dev": [[205, "num-ivy-arrays-on-dev"]], "expm1": [[244, "expm1"]], "set_split_factor": [[210, "set-split-factor"]], "fmin": [[247, "fmin"]], "default_device": [[195, "default-device"]], "fmod": [[248, "fmod"]], "gcd": [[249, "gcd"]], "num_cpu_cores": [[203, "num-cpu-cores"]], "clear_cached_mem_on_dev": [[194, "clear-cached-mem-on-dev"]], "floor": [[245, "floor"]], "atan": [[226, "atan"]], "acos": [[220, "acos"]], "set_soft_device_mode": [[209, "set-soft-device-mode"]], "tpu_is_available": [[215, "tpu-is-available"]], "angle": [[223, "angle"]], "dev": [[196, "dev"]], "acosh": [[221, "acosh"]], "abs": [[219, "abs"]], "exp2": [[243, "exp2"]], "bitwise_right_shift": [[233, "bitwise-right-shift"]], "unset_default_device": [[216, "unset-default-device"]], "bitwise_and": [[229, "bitwise-and"]], "bitwise_xor": [[234, "bitwise-xor"]], "asinh": [[225, "asinh"]], "print_all_ivy_arrays_on_dev": [[207, "print-all-ivy-arrays-on-dev"]], "handle_soft_device_variable": [[202, "handle-soft-device-variable"]], "total_mem_on_dev": [[214, "total-mem-on-dev"]], "function_supported_devices": [[198, "function-supported-devices"]], "unset_default_int_dtype": [[189, "unset-default-int-dtype"]], "to_device": [[213, "to-device"]], "bitwise_invert": [[230, "bitwise-invert"]], "gpu_is_available": [[201, "gpu-is-available"]], "num_gpus": [[204, "num-gpus"]], "bitwise_left_shift": [[231, "bitwise-left-shift"]], "as_ivy_dev": [[192, "as-ivy-dev"]], "atanh": [[228, "atanh"]], "erf": [[241, "erf"]], "function_unsupported_devices": [[199, "function-unsupported-devices"]], "greater_equal": [[251, "greater-equal"]], "set_default_device": [[208, "set-default-device"]], "as_native_dev": [[193, "as-native-dev"]], "ceil": [[235, "ceil"]], "equal": [[240, "equal"]], "divide": [[239, "divide"]], "exp": [[242, "exp"]], "split_factor": [[211, "split-factor"]], "zeros": [[147, "zeros"]], "invalid_dtype": [[169, "invalid-dtype"]], "promote_types": [[177, "promote-types"]], "zeros_like": [[148, "zeros-like"]], "is_complex_dtype": [[171, "is-complex-dtype"]], "promote_types_of_inputs": [[178, "promote-types-of-inputs"]], "set_default_complex_dtype": [[180, "set-default-complex-dtype"]], "asarray_to_native_arrays_and_back": [[128, "asarray-to-native-arrays-and-back"]], "logspace": [[138, "logspace"]], "dtype_bits": [[163, "dtype-bits"]], "set_default_dtype": [[181, "set-default-dtype"]], "unset_default_float_dtype": [[188, "unset-default-float-dtype"]], "default_float_dtype": [[159, "default-float-dtype"]], "set_default_uint_dtype": [[184, "set-default-uint-dtype"]], "unset_default_complex_dtype": [[186, "unset-default-complex-dtype"]], "is_native_dtype": [[175, "is-native-dtype"]], "ones_like": [[143, "ones-like"]], "triu": [[145, "triu"]], "frombuffer": [[134, "frombuffer"]], "astype": [[151, "astype"]], "iinfo": [[167, "iinfo"]], "empty_like": [[131, "empty-like"]], "can_cast": [[154, "can-cast"]], "finfo": [[164, "finfo"]], "infer_default_dtype": [[168, "infer-default-dtype"]], "unset_default_dtype": [[187, "unset-default-dtype"]], "asarray_inputs_to_native_shapes": [[127, "asarray-inputs-to-native-shapes"]], "check_float": [[155, "check-float"]], "full_like": [[136, "full-like"]], "one_hot": [[141, "one-hot"]], "broadcast_to": [[153, "broadcast-to"]], "is_bool_dtype": [[170, "is-bool-dtype"]], "full": [[135, "full"]], "dtype": [[162, "dtype"]], "meshgrid": [[139, "meshgrid"]], "linspace": [[137, "linspace"]], "as_native_dtype": [[150, "as-native-dtype"]], "is_hashable_dtype": [[173, "is-hashable-dtype"]], "is_uint_dtype": [[176, "is-uint-dtype"]], "set_default_float_dtype": [[182, "set-default-float-dtype"]], "asarray_infer_dtype": [[126, "asarray-infer-dtype"]], "default_dtype": [[158, "default-dtype"]], "ones": [[142, "ones"]], "as_ivy_dtype": [[149, "as-ivy-dtype"]], "default_int_dtype": [[160, "default-int-dtype"]], "result_type": [[179, "result-type"]], "set_default_int_dtype": [[183, "set-default-int-dtype"]], "copy_array": [[129, "copy-array"]], "default_uint_dtype": [[161, "default-uint-dtype"]], "function_unsupported_dtypes": [[166, "function-unsupported-dtypes"]], "function_supported_dtypes": [[165, "function-supported-dtypes"]], "eye": [[132, "eye"]], "broadcast_arrays": [[152, "broadcast-arrays"]], "default_complex_dtype": [[157, "default-complex-dtype"]], "type_promote_arrays": [[185, "type-promote-arrays"]], "tril": [[144, "tril"]], "native_array": [[140, "native-array"]], "is_int_dtype": [[174, "is-int-dtype"]], "closest_valid_dtype": [[156, "closest-valid-dtype"]], "empty": [[130, "empty"]], "triu_indices": [[146, "triu-indices"]], "from_dlpack": [[133, "from-dlpack"]], "is_float_dtype": [[172, "is-float-dtype"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[48, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[48, "module-ivy.data_classes.array.activations"], [49, "module-ivy.data_classes.array.conversions"], [50, "module-ivy.data_classes.array.creation"], [51, "module-ivy.data_classes.array.data_type"], [52, "module-ivy.data_classes.array.device"], [53, "module-ivy.data_classes.array.elementwise"], [54, "module-ivy.data_classes.array.experimental"], [54, "module-ivy.data_classes.array.experimental.activations"], [54, "module-ivy.data_classes.array.experimental.conversions"], [54, "module-ivy.data_classes.array.experimental.creation"], [54, "module-ivy.data_classes.array.experimental.data_type"], [54, "module-ivy.data_classes.array.experimental.device"], [54, "module-ivy.data_classes.array.experimental.elementwise"], [54, "module-ivy.data_classes.array.experimental.general"], [54, "module-ivy.data_classes.array.experimental.gradients"], [54, "module-ivy.data_classes.array.experimental.image"], [54, "module-ivy.data_classes.array.experimental.layers"], [54, "module-ivy.data_classes.array.experimental.linear_algebra"], [54, "module-ivy.data_classes.array.experimental.losses"], [54, "module-ivy.data_classes.array.experimental.manipulation"], [54, "module-ivy.data_classes.array.experimental.norms"], [54, "module-ivy.data_classes.array.experimental.random"], [54, "module-ivy.data_classes.array.experimental.searching"], [54, "module-ivy.data_classes.array.experimental.set"], [54, "module-ivy.data_classes.array.experimental.sorting"], [54, "module-ivy.data_classes.array.experimental.statistical"], [54, "module-ivy.data_classes.array.experimental.utility"], [55, "module-ivy.data_classes.array.general"], [56, "module-ivy.data_classes.array.gradients"], [57, "module-ivy.data_classes.array.image"], [58, "module-ivy.data_classes.array.layers"], [59, "module-ivy.data_classes.array.linear_algebra"], [60, "module-ivy.data_classes.array.losses"], [61, "module-ivy.data_classes.array.manipulation"], [62, "module-ivy.data_classes.array.norms"], [63, "module-ivy.data_classes.array.random"], [64, "module-ivy.data_classes.array.searching"], [65, "module-ivy.data_classes.array.set"], [66, "module-ivy.data_classes.array.sorting"], [67, "module-ivy.data_classes.array.statistical"], [68, "module-ivy.data_classes.array.utility"], [69, "module-ivy.data_classes.array.wrapping"], [70, "module-ivy.data_classes.container.activations"], [71, "module-ivy.data_classes.container.base"], [72, "module-ivy.data_classes.container.conversions"], [73, "module-ivy.data_classes.container.creation"], [74, "module-ivy.data_classes.container.data_type"], [75, "module-ivy.data_classes.container.device"], [76, "module-ivy.data_classes.container.elementwise"], [77, "module-ivy.data_classes.container.experimental"], [77, "module-ivy.data_classes.container.experimental.activations"], [77, "module-ivy.data_classes.container.experimental.conversions"], [77, "module-ivy.data_classes.container.experimental.creation"], [77, "module-ivy.data_classes.container.experimental.data_type"], [77, "module-ivy.data_classes.container.experimental.device"], [77, "module-ivy.data_classes.container.experimental.elementwise"], [77, "module-ivy.data_classes.container.experimental.general"], [77, "module-ivy.data_classes.container.experimental.gradients"], [77, "module-ivy.data_classes.container.experimental.image"], [77, "module-ivy.data_classes.container.experimental.layers"], [77, "module-ivy.data_classes.container.experimental.linear_algebra"], [77, "module-ivy.data_classes.container.experimental.losses"], [77, "module-ivy.data_classes.container.experimental.manipulation"], [77, "module-ivy.data_classes.container.experimental.norms"], [77, "module-ivy.data_classes.container.experimental.random"], [77, "module-ivy.data_classes.container.experimental.searching"], [77, "module-ivy.data_classes.container.experimental.set"], [77, "module-ivy.data_classes.container.experimental.sorting"], [77, "module-ivy.data_classes.container.experimental.statistical"], [77, "module-ivy.data_classes.container.experimental.utility"], [78, "module-ivy.data_classes.container.general"], [79, "module-ivy.data_classes.container.gradients"], [80, "module-ivy.data_classes.container.image"], [81, "module-ivy.data_classes.container.layers"], [82, "module-ivy.data_classes.container.linear_algebra"], [83, "module-ivy.data_classes.container.losses"], [84, "module-ivy.data_classes.container.manipulation"], [85, "module-ivy.data_classes.container.norms"], [86, "module-ivy.data_classes.container.random"], [87, "module-ivy.data_classes.container.searching"], [88, "module-ivy.data_classes.container.set"], [89, "module-ivy.data_classes.container.sorting"], [90, "module-ivy.data_classes.container.statistical"], [91, "module-ivy.data_classes.container.utility"], [92, "module-ivy.data_classes.container.wrapping"], [93, "module-ivy.data_classes.factorized_tensor.base"], [94, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [96, "module-ivy.data_classes.array.array"], [97, "module-ivy.data_classes.container.container"], [99, "module-ivy.data_classes.nested_array.nested_array"], [100, "module-ivy.data_classes.nested_array.base"], [101, "module-ivy.data_classes.nested_array.elementwise"], [347, "module-ivy.functional.ivy.experimental.activations"], [348, "module-ivy.functional.ivy.experimental.constants"], [349, "module-ivy.functional.ivy.experimental.creation"], [350, "module-ivy.functional.ivy.experimental.data_type"], [351, "module-ivy.functional.ivy.experimental.device"], [352, "module-ivy.functional.ivy.experimental.elementwise"], [353, "module-ivy.functional.ivy.experimental.general"], [354, "module-ivy.functional.ivy.experimental.gradients"], [355, "module-ivy.functional.ivy.experimental.layers"], [356, "module-ivy.functional.ivy.experimental.linear_algebra"], [357, "module-ivy.functional.ivy.experimental.losses"], [358, "module-ivy.functional.ivy.experimental.manipulation"], [359, "module-ivy.functional.ivy.experimental.meta"], [360, "module-ivy.functional.ivy.experimental.nest"], [361, "module-ivy.functional.ivy.experimental.norms"], [362, "module-ivy.functional.ivy.experimental.random"], [363, "module-ivy.functional.ivy.experimental.searching"], [364, "module-ivy.functional.ivy.experimental.set"], [365, "module-ivy.functional.ivy.experimental.sorting"], [366, "module-ivy.functional.ivy.experimental.sparse_array"], [367, "module-ivy.functional.ivy.experimental.statistical"], [368, "module-ivy.functional.ivy.experimental.utility"], [582, "module-ivy.functional.ivy.activations"], [583, "module-ivy.functional.ivy.constants"], [584, "module-ivy.functional.ivy.control_flow_ops"], [585, "module-ivy.functional.ivy.creation"], [586, "module-ivy.functional.ivy.data_type"], [587, "module-ivy.functional.ivy.device"], [588, "module-ivy.functional.ivy.elementwise"], [589, "module-ivy.functional.ivy.experimental"], [590, "module-ivy.functional.ivy.general"], [591, "module-ivy.functional.ivy.gradients"], [592, "module-ivy.functional.ivy.layers"], [593, "module-ivy.functional.ivy.linear_algebra"], [594, "module-ivy.functional.ivy.losses"], [595, "module-ivy.functional.ivy.manipulation"], [596, "module-ivy.functional.ivy.meta"], [597, "module-ivy.functional.ivy.nest"], [598, "module-ivy.functional.ivy.norms"], [599, "module-ivy.functional.ivy.random"], [600, "module-ivy.functional.ivy.searching"], [601, "module-ivy.functional.ivy.set"], [602, "module-ivy.functional.ivy.sorting"], [603, "module-ivy.functional.ivy.statistical"], [604, "module-ivy.functional.ivy.utility"], [727, "module-ivy.stateful.activations"], [728, "module-ivy.stateful.converters"], [729, "module-ivy.stateful.helpers"], [730, "module-ivy.stateful.initializers"], [731, "module-ivy.stateful.layers"], [732, "module-ivy.stateful.losses"], [733, "module-ivy.stateful.module"], [734, "module-ivy.stateful.norms"], [735, "module-ivy.stateful.optimizers"], [736, "module-ivy.stateful.sequential"], [737, "module-ivy.utils.assertions"], [738, "module-ivy.utils.backend"], [739, "module-ivy.utils.backend.ast_helpers"], [740, "module-ivy.utils.backend.handler"], [741, "module-ivy.utils.backend.sub_backend_handler"], [742, "module-ivy.utils.dynamic_import"], [743, "module-ivy.utils.einsum_parser"], [744, "module-ivy.utils.exceptions"], [745, "module-ivy.utils.inspection"], [746, "module-ivy.utils.logging"], [747, "module-ivy.utils.profiler"], [748, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[49, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[50, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[51, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[52, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[52, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[52, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[52, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[52, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[53, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[54, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[54, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[54, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[54, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[54, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[54, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[54, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[54, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[54, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[54, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[54, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[54, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[54, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[54, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[54, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[54, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[54, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[54, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[54, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[54, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[54, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[54, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[54, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[54, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[54, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[54, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[54, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[54, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[54, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[54, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[54, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[55, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[56, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[57, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[57, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[57, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[58, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[59, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[60, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[61, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[62, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[63, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[63, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[63, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[64, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[65, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[65, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[65, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[66, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[67, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[68, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[69, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[69, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[69, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[70, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[71, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[71, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[72, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[73, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[74, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[75, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[75, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[76, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[77, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[77, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[77, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[77, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[77, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[77, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[77, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[77, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[77, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[77, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[77, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[77, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[77, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[77, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[77, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[77, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[77, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[77, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[77, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[77, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[77, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[77, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[77, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[77, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[77, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[77, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[77, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[77, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[77, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[77, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[77, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[77, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[77, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[78, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[79, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[80, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[80, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[80, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[81, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[82, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[83, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[84, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[85, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[86, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[86, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[87, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[88, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[88, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[88, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[89, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[90, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[91, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[92, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[92, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[92, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[93, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[94, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[95, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[95, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[96, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[96, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[96, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[96, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[97, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[97, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[97, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[99, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[99, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[100, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[100, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[101, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[101, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[104, "ivy.gelu"], [582, "ivy.gelu"]], "gelu() (ivy.array method)": [[104, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[104, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[105, "ivy.hardswish"], [582, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[105, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[105, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[106, "ivy.leaky_relu"], [582, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[106, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[106, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[107, "ivy.log_softmax"], [582, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[107, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[107, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[108, "ivy.mish"], [582, "ivy.mish"]], "mish() (ivy.array method)": [[108, "ivy.Array.mish"]], "mish() (ivy.container method)": [[108, "ivy.Container.mish"]], "relu() (in module ivy)": [[109, "ivy.relu"], [582, "ivy.relu"]], "relu() (ivy.array method)": [[109, "ivy.Array.relu"]], "relu() (ivy.container method)": [[109, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[110, "ivy.sigmoid"], [582, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[110, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[110, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[111, "ivy.softmax"], [582, "ivy.softmax"]], "softmax() (ivy.array method)": [[111, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[111, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[112, "ivy.softplus"], [582, "ivy.softplus"]], "softplus() (ivy.array method)": [[112, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[112, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[113, "ivy.softsign"], [582, "ivy.softsign"]], "cast_bool() (in module ivy)": [[114, "ivy.cast_bool"], [584, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[115, "ivy.cmp_is"], [584, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[116, "ivy.cmp_isnot"], [584, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[117, "ivy.for_loop"], [584, "ivy.for_loop"]], "if_else() (in module ivy)": [[118, "ivy.if_else"], [584, "ivy.if_else"]], "try_except() (in module ivy)": [[119, "ivy.try_except"], [584, "ivy.try_except"]], "while_loop() (in module ivy)": [[120, "ivy.while_loop"], [584, "ivy.while_loop"]], "arange() (in module ivy)": [[121, "ivy.arange"], [585, "ivy.arange"]], "array() (in module ivy)": [[122, "ivy.array"], [585, "ivy.array"]], "asarray() (in module ivy)": [[123, "ivy.asarray"], [585, "ivy.asarray"]], "asarray() (ivy.array method)": [[123, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[123, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[124, "ivy.asarray_handle_nestable"], [585, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[125, "ivy.asarray_infer_device"], [585, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[126, "ivy.asarray_infer_dtype"], [585, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[127, "ivy.asarray_inputs_to_native_shapes"], [585, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[128, "ivy.asarray_to_native_arrays_and_back"], [585, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[129, "ivy.copy_array"], [585, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[129, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[129, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[130, "ivy.empty"], [585, "ivy.empty"]], "empty_like() (in module ivy)": [[131, "ivy.empty_like"], [585, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[131, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[131, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[132, "ivy.eye"], [585, "ivy.eye"]], "from_dlpack() (in module ivy)": [[133, "ivy.from_dlpack"], [585, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[133, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[133, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[134, "ivy.frombuffer"], [585, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[134, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[135, "ivy.full"], [585, "ivy.full"]], "full_like() (in module ivy)": [[136, "ivy.full_like"], [585, "ivy.full_like"]], "full_like() (ivy.array method)": [[136, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[136, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[137, "ivy.linspace"], [585, "ivy.linspace"]], "linspace() (ivy.array method)": [[137, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[137, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[138, "ivy.logspace"], [585, "ivy.logspace"]], "logspace() (ivy.array method)": [[138, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[138, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[139, "ivy.meshgrid"], [585, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[139, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[139, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[140, "ivy.native_array"], [585, "ivy.native_array"]], "native_array() (ivy.array method)": [[140, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[140, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[141, "ivy.one_hot"], [585, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[141, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[141, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[142, "ivy.ones"], [585, "ivy.ones"]], "ones_like() (in module ivy)": [[143, "ivy.ones_like"], [585, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[143, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[143, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[144, "ivy.tril"], [585, "ivy.tril"]], "tril() (ivy.array method)": [[144, "ivy.Array.tril"]], "tril() (ivy.container method)": [[144, "ivy.Container.tril"]], "triu() (in module ivy)": [[145, "ivy.triu"], [585, "ivy.triu"]], "triu() (ivy.array method)": [[145, "ivy.Array.triu"]], "triu() (ivy.container method)": [[145, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[146, "ivy.triu_indices"], [585, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[146, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[147, "ivy.zeros"], [585, "ivy.zeros"]], "zeros_like() (in module ivy)": [[148, "ivy.zeros_like"], [585, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[148, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[148, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[149, "ivy.as_ivy_dtype"], [586, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[150, "ivy.as_native_dtype"], [586, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[151, "ivy.astype"], [586, "ivy.astype"]], "astype() (ivy.array method)": [[151, "ivy.Array.astype"]], "astype() (ivy.container method)": [[151, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[152, "ivy.broadcast_arrays"], [586, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[152, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[152, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[153, "ivy.broadcast_to"], [586, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[153, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[153, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[154, "ivy.can_cast"], [586, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[154, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[154, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[155, "ivy.check_float"], [586, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[156, "ivy.closest_valid_dtype"], [586, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[157, "ivy.default_complex_dtype"], [586, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[158, "ivy.default_dtype"], [586, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[159, "ivy.default_float_dtype"], [586, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[160, "ivy.default_int_dtype"], [586, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[161, "ivy.default_uint_dtype"], [586, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[162, "ivy.dtype"], [586, "ivy.dtype"]], "dtype() (ivy.array method)": [[162, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[162, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[163, "ivy.dtype_bits"], [586, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[164, "ivy.finfo"], [586, "ivy.finfo"]], "finfo() (ivy.array method)": [[164, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[164, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[165, "ivy.function_supported_dtypes"], [586, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[166, "ivy.function_unsupported_dtypes"], [586, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[167, "ivy.iinfo"], [586, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[167, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[167, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[168, "ivy.infer_default_dtype"], [586, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[169, "ivy.invalid_dtype"], [586, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[170, "ivy.is_bool_dtype"], [586, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[170, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[170, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[171, "ivy.is_complex_dtype"], [586, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[171, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[172, "ivy.is_float_dtype"], [586, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[172, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[172, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[173, "ivy.is_hashable_dtype"], [586, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[174, "ivy.is_int_dtype"], [586, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[174, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[174, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[175, "ivy.is_native_dtype"], [586, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[176, "ivy.is_uint_dtype"], [586, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[176, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[176, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[177, "ivy.promote_types"], [586, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[178, "ivy.promote_types_of_inputs"], [586, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[179, "ivy.result_type"], [586, "ivy.result_type"]], "result_type() (ivy.array method)": [[179, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[179, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[180, "ivy.set_default_complex_dtype"], [586, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[181, "ivy.set_default_dtype"], [586, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[182, "ivy.set_default_float_dtype"], [586, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[183, "ivy.set_default_int_dtype"], [586, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[184, "ivy.set_default_uint_dtype"], [586, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[185, "ivy.type_promote_arrays"], [586, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[186, "ivy.unset_default_complex_dtype"], [586, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[187, "ivy.unset_default_dtype"], [586, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[188, "ivy.unset_default_float_dtype"], [586, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[189, "ivy.unset_default_int_dtype"], [586, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[190, "ivy.unset_default_uint_dtype"], [586, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[191, "ivy.valid_dtype"], [586, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[192, "ivy.as_ivy_dev"], [587, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[193, "ivy.as_native_dev"], [587, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[194, "ivy.clear_cached_mem_on_dev"], [587, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[195, "ivy.default_device"], [587, "ivy.default_device"]], "dev() (in module ivy)": [[196, "ivy.dev"], [587, "ivy.dev"]], "dev() (ivy.array method)": [[196, "ivy.Array.dev"]], "dev() (ivy.container method)": [[196, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[197, "ivy.dev_util"], [587, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[198, "ivy.function_supported_devices"], [587, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[199, "ivy.function_unsupported_devices"], [587, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[200, "ivy.get_all_ivy_arrays_on_dev"], [587, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[201, "ivy.gpu_is_available"], [587, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[202, "ivy.handle_soft_device_variable"], [587, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[203, "ivy.num_cpu_cores"], [587, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[204, "ivy.num_gpus"], [587, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[205, "ivy.num_ivy_arrays_on_dev"], [587, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[206, "ivy.percent_used_mem_on_dev"], [587, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[207, "ivy.print_all_ivy_arrays_on_dev"], [587, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[208, "ivy.set_default_device"], [587, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[209, "ivy.set_soft_device_mode"], [587, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[210, "ivy.set_split_factor"], [587, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[211, "ivy.split_factor"], [587, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[212, "ivy.split_func_call"], [587, "ivy.split_func_call"]], "to_device() (in module ivy)": [[213, "ivy.to_device"], [587, "ivy.to_device"]], "to_device() (ivy.array method)": [[213, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[213, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[214, "ivy.total_mem_on_dev"], [587, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[215, "ivy.tpu_is_available"], [587, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[216, "ivy.unset_default_device"], [587, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[217, "ivy.unset_soft_device_mode"], [587, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[218, "ivy.used_mem_on_dev"], [587, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[219, "ivy.abs"], [588, "ivy.abs"]], "abs() (ivy.array method)": [[219, "ivy.Array.abs"]], "abs() (ivy.container method)": [[219, "ivy.Container.abs"]], "acos() (in module ivy)": [[220, "ivy.acos"], [588, "ivy.acos"]], "acos() (ivy.array method)": [[220, "ivy.Array.acos"]], "acos() (ivy.container method)": [[220, "ivy.Container.acos"]], "acosh() (in module ivy)": [[221, "ivy.acosh"], [588, "ivy.acosh"]], "acosh() (ivy.array method)": [[221, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[221, "ivy.Container.acosh"]], "add() (in module ivy)": [[222, "ivy.add"], [588, "ivy.add"]], "add() (ivy.array method)": [[222, "ivy.Array.add"]], "add() (ivy.container method)": [[222, "ivy.Container.add"]], "angle() (in module ivy)": [[223, "ivy.angle"], [588, "ivy.angle"]], "angle() (ivy.array method)": [[223, "ivy.Array.angle"]], "angle() (ivy.container method)": [[223, "ivy.Container.angle"]], "asin() (in module ivy)": [[224, "ivy.asin"], [588, "ivy.asin"]], "asin() (ivy.array method)": [[224, "ivy.Array.asin"]], "asin() (ivy.container method)": [[224, "ivy.Container.asin"]], "asinh() (in module ivy)": [[225, "ivy.asinh"], [588, "ivy.asinh"]], "asinh() (ivy.array method)": [[225, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[225, "ivy.Container.asinh"]], "atan() (in module ivy)": [[226, "ivy.atan"], [588, "ivy.atan"]], "atan() (ivy.array method)": [[226, "ivy.Array.atan"]], "atan() (ivy.container method)": [[226, "ivy.Container.atan"]], "atan2() (in module ivy)": [[227, "ivy.atan2"], [588, "ivy.atan2"]], "atan2() (ivy.array method)": [[227, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[227, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[228, "ivy.atanh"], [588, "ivy.atanh"]], "atanh() (ivy.array method)": [[228, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[228, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[229, "ivy.bitwise_and"], [588, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[229, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[229, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[230, "ivy.bitwise_invert"], [588, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[230, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[230, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[231, "ivy.bitwise_left_shift"], [588, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[231, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[231, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[232, "ivy.bitwise_or"], [588, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[232, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[232, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[233, "ivy.bitwise_right_shift"], [588, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[233, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[233, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[234, "ivy.bitwise_xor"], [588, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[234, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[234, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[235, "ivy.ceil"], [588, "ivy.ceil"]], "ceil() (ivy.array method)": [[235, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[235, "ivy.Container.ceil"]], "cos() (in module ivy)": [[236, "ivy.cos"], [588, "ivy.cos"]], "cos() (ivy.array method)": [[236, "ivy.Array.cos"]], "cos() (ivy.container method)": [[236, "ivy.Container.cos"]], "cosh() (in module ivy)": [[237, "ivy.cosh"], [588, "ivy.cosh"]], "cosh() (ivy.array method)": [[237, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[237, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[238, "ivy.deg2rad"], [588, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[238, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[238, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[239, "ivy.divide"], [588, "ivy.divide"]], "divide() (ivy.array method)": [[239, "ivy.Array.divide"]], "divide() (ivy.container method)": [[239, "ivy.Container.divide"]], "equal() (in module ivy)": [[240, "ivy.equal"], [588, "ivy.equal"]], "equal() (ivy.array method)": [[240, "ivy.Array.equal"]], "equal() (ivy.container method)": [[240, "ivy.Container.equal"]], "erf() (in module ivy)": [[241, "ivy.erf"], [588, "ivy.erf"]], "erf() (ivy.array method)": [[241, "ivy.Array.erf"]], "erf() (ivy.container method)": [[241, "ivy.Container.erf"]], "exp() (in module ivy)": [[242, "ivy.exp"], [588, "ivy.exp"]], "exp() (ivy.array method)": [[242, "ivy.Array.exp"]], "exp() (ivy.container method)": [[242, "ivy.Container.exp"]], "exp2() (in module ivy)": [[243, "ivy.exp2"], [588, "ivy.exp2"]], "exp2() (ivy.array method)": [[243, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[243, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[244, "ivy.expm1"], [588, "ivy.expm1"]], "expm1() (ivy.array method)": [[244, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[244, "ivy.Container.expm1"]], "floor() (in module ivy)": [[245, "ivy.floor"], [588, "ivy.floor"]], "floor() (ivy.array method)": [[245, "ivy.Array.floor"]], "floor() (ivy.container method)": [[245, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[246, "ivy.floor_divide"], [588, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[246, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[246, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[247, "ivy.fmin"], [588, "ivy.fmin"]], "fmin() (ivy.array method)": [[247, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[247, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[248, "ivy.fmod"], [588, "ivy.fmod"]], "fmod() (ivy.array method)": [[248, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[248, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[249, "ivy.gcd"], [588, "ivy.gcd"]], "gcd() (ivy.array method)": [[249, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[249, "ivy.Container.gcd"]], "greater() (in module ivy)": [[250, "ivy.greater"], [588, "ivy.greater"]], "greater() (ivy.array method)": [[250, "ivy.Array.greater"]], "greater() (ivy.container method)": [[250, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[251, "ivy.greater_equal"], [588, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[251, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[251, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[252, "ivy.imag"], [588, "ivy.imag"]], "imag() (ivy.array method)": [[252, "ivy.Array.imag"]], "imag() (ivy.container method)": [[252, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[253, "ivy.isfinite"], [588, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[253, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[253, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[254, "ivy.isinf"], [588, "ivy.isinf"]], "isinf() (ivy.array method)": [[254, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[254, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[255, "ivy.isnan"], [588, "ivy.isnan"]], "isnan() (ivy.array method)": [[255, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[255, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[256, "ivy.isreal"], [588, "ivy.isreal"]], "isreal() (ivy.array method)": [[256, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[256, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[257, "ivy.lcm"], [588, "ivy.lcm"]], "lcm() (ivy.array method)": [[257, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[257, "ivy.Container.lcm"]], "less() (in module ivy)": [[258, "ivy.less"], [588, "ivy.less"]], "less() (ivy.array method)": [[258, "ivy.Array.less"]], "less() (ivy.container method)": [[258, "ivy.Container.less"]], "less_equal() (in module ivy)": [[259, "ivy.less_equal"], [588, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[259, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[259, "ivy.Container.less_equal"]], "log() (in module ivy)": [[260, "ivy.log"], [588, "ivy.log"]], "log() (ivy.array method)": [[260, "ivy.Array.log"]], "log() (ivy.container method)": [[260, "ivy.Container.log"]], "log10() (in module ivy)": [[261, "ivy.log10"], [588, "ivy.log10"]], "log10() (ivy.array method)": [[261, "ivy.Array.log10"]], "log10() (ivy.container method)": [[261, "ivy.Container.log10"]], "log1p() (in module ivy)": [[262, "ivy.log1p"], [588, "ivy.log1p"]], "log1p() (ivy.array method)": [[262, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[262, "ivy.Container.log1p"]], "log2() (in module ivy)": [[263, "ivy.log2"], [588, "ivy.log2"]], "log2() (ivy.array method)": [[263, "ivy.Array.log2"]], "log2() (ivy.container method)": [[263, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[264, "ivy.logaddexp"], [588, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[264, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[264, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[265, "ivy.logaddexp2"], [588, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[265, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[265, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[266, "ivy.logical_and"], [588, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[266, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[266, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[267, "ivy.logical_not"], [588, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[267, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[267, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[268, "ivy.logical_or"], [588, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[268, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[268, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[269, "ivy.logical_xor"], [588, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[269, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[269, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[270, "ivy.maximum"], [588, "ivy.maximum"]], "maximum() (ivy.array method)": [[270, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[270, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[271, "ivy.minimum"], [588, "ivy.minimum"]], "minimum() (ivy.array method)": [[271, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[271, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[272, "ivy.multiply"], [588, "ivy.multiply"]], "multiply() (ivy.array method)": [[272, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[272, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[273, "ivy.nan_to_num"], [588, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[273, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[273, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[274, "ivy.negative"], [588, "ivy.negative"]], "negative() (ivy.array method)": [[274, "ivy.Array.negative"]], "negative() (ivy.container method)": [[274, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[275, "ivy.not_equal"], [588, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[275, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[275, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[276, "ivy.positive"], [588, "ivy.positive"]], "positive() (ivy.array method)": [[276, "ivy.Array.positive"]], "positive() (ivy.container method)": [[276, "ivy.Container.positive"]], "pow() (in module ivy)": [[277, "ivy.pow"], [588, "ivy.pow"]], "pow() (ivy.array method)": [[277, "ivy.Array.pow"]], "pow() (ivy.container method)": [[277, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[278, "ivy.rad2deg"], [588, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[278, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[278, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[279, "ivy.real"], [588, "ivy.real"]], "real() (ivy.array method)": [[279, "ivy.Array.real"]], "real() (ivy.container method)": [[279, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[280, "ivy.reciprocal"], [588, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[280, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[280, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[281, "ivy.remainder"], [588, "ivy.remainder"]], "remainder() (ivy.array method)": [[281, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[281, "ivy.Container.remainder"]], "round() (in module ivy)": [[282, "ivy.round"], [588, "ivy.round"]], "round() (ivy.array method)": [[282, "ivy.Array.round"]], "round() (ivy.container method)": [[282, "ivy.Container.round"]], "sign() (in module ivy)": [[283, "ivy.sign"], [588, "ivy.sign"]], "sign() (ivy.array method)": [[283, "ivy.Array.sign"]], "sign() (ivy.container method)": [[283, "ivy.Container.sign"]], "sin() (in module ivy)": [[284, "ivy.sin"], [588, "ivy.sin"]], "sin() (ivy.array method)": [[284, "ivy.Array.sin"]], "sin() (ivy.container method)": [[284, "ivy.Container.sin"]], "sinh() (in module ivy)": [[285, "ivy.sinh"], [588, "ivy.sinh"]], "sinh() (ivy.array method)": [[285, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[285, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[286, "ivy.sqrt"], [588, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[286, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[286, "ivy.Container.sqrt"]], "square() (in module ivy)": [[287, "ivy.square"], [588, "ivy.square"]], "square() (ivy.array method)": [[287, "ivy.Array.square"]], "square() (ivy.container method)": [[287, "ivy.Container.square"]], "subtract() (in module ivy)": [[288, "ivy.subtract"], [588, "ivy.subtract"]], "subtract() (ivy.array method)": [[288, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[288, "ivy.Container.subtract"]], "tan() (in module ivy)": [[289, "ivy.tan"], [588, "ivy.tan"]], "tan() (ivy.array method)": [[289, "ivy.Array.tan"]], "tan() (ivy.container method)": [[289, "ivy.Container.tan"]], "tanh() (in module ivy)": [[290, "ivy.tanh"], [588, "ivy.tanh"]], "tanh() (ivy.array method)": [[290, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[290, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[291, "ivy.trapz"], [588, "ivy.trapz"]], "trapz() (ivy.array method)": [[291, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[291, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[292, "ivy.trunc"], [588, "ivy.trunc"]], "trunc() (ivy.array method)": [[292, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[292, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[293, "ivy.trunc_divide"], [588, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[293, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[293, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[294, "ivy.elu"], [347, "ivy.elu"]], "elu() (ivy.array method)": [[294, "ivy.Array.elu"]], "elu() (ivy.container method)": [[294, "ivy.Container.elu"]], "logit() (in module ivy)": [[295, "ivy.logit"], [347, "ivy.logit"]], "logit() (ivy.array method)": [[295, "ivy.Array.logit"]], "logit() (ivy.container method)": [[295, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[296, "ivy.logsigmoid"], [347, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[296, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[296, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[297, "ivy.prelu"], [347, "ivy.prelu"]], "prelu() (ivy.array method)": [[297, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[297, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[298, "ivy.relu6"], [347, "ivy.relu6"]], "relu6() (ivy.array method)": [[298, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[298, "ivy.Container.relu6"]], "selu() (in module ivy)": [[299, "ivy.selu"], [347, "ivy.selu"]], "selu() (ivy.array method)": [[299, "ivy.Array.selu"]], "selu() (ivy.container method)": [[299, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[300, "ivy.sequence_length"], [347, "ivy.sequence_length"]], "silu() (in module ivy)": [[301, "ivy.silu"], [347, "ivy.silu"]], "silu() (ivy.array method)": [[301, "ivy.Array.silu"]], "silu() (ivy.container method)": [[301, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[302, "ivy.thresholded_relu"], [347, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[302, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[302, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[303, "ivy.blackman_window"], [349, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[303, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[303, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[304, "ivy.eye_like"], [349, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[304, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[304, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[305, "ivy.hamming_window"], [349, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[305, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[306, "ivy.hann_window"], [349, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[306, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[307, "ivy.indices"], [349, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[308, "ivy.kaiser_bessel_derived_window"], [349, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[308, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[309, "ivy.kaiser_window"], [349, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[309, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[310, "ivy.mel_weight_matrix"], [349, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[310, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[310, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[311, "ivy.ndenumerate"], [349, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[312, "ivy.ndindex"], [349, "ivy.ndindex"]], "random_cp() (in module ivy)": [[313, "ivy.random_cp"], [349, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[314, "ivy.random_tucker"], [349, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[315, "ivy.tril_indices"], [349, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[315, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[316, "ivy.trilu"], [349, "ivy.trilu"]], "trilu() (ivy.array method)": [[316, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[316, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[317, "ivy.unsorted_segment_min"], [349, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[317, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[317, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[318, "ivy.unsorted_segment_sum"], [349, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[318, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[318, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[319, "ivy.vorbis_window"], [349, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[319, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[320, "ivy.allclose"], [352, "ivy.allclose"]], "allclose() (ivy.array method)": [[320, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[320, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[321, "ivy.binarizer"], [352, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[321, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[321, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[322, "ivy.conj"], [352, "ivy.conj"]], "conj() (ivy.array method)": [[322, "ivy.Array.conj"]], "conj() (ivy.container method)": [[322, "ivy.Container.conj"]], "copysign() (in module ivy)": [[323, "ivy.copysign"], [352, "ivy.copysign"]], "copysign() (ivy.array method)": [[323, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[323, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[324, "ivy.count_nonzero"], [352, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[324, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[324, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[325, "ivy.diff"], [352, "ivy.diff"]], "diff() (ivy.array method)": [[325, "ivy.Array.diff"]], "diff() (ivy.container method)": [[325, "ivy.Container.diff"]], "digamma() (in module ivy)": [[326, "ivy.digamma"], [352, "ivy.digamma"]], "digamma() (ivy.array method)": [[326, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[326, "ivy.Container.digamma"]], "fix() (in module ivy)": [[327, "ivy.fix"], [352, "ivy.fix"]], "fix() (ivy.array method)": [[327, "ivy.Array.fix"]], "fix() (ivy.container method)": [[327, "ivy.Container.fix"]], "float_power() (in module ivy)": [[328, "ivy.float_power"], [352, "ivy.float_power"]], "float_power() (ivy.array method)": [[328, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[328, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[329, "ivy.fmax"], [352, "ivy.fmax"]], "fmax() (ivy.array method)": [[329, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[329, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[330, "ivy.frexp"], [352, "ivy.frexp"]], "frexp() (ivy.array method)": [[330, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[330, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[331, "ivy.gradient"], [352, "ivy.gradient"]], "gradient() (ivy.array method)": [[331, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[331, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[332, "ivy.hypot"], [352, "ivy.hypot"]], "hypot() (ivy.array method)": [[332, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[332, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[333, "ivy.isclose"], [352, "ivy.isclose"]], "isclose() (ivy.array method)": [[333, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[333, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[334, "ivy.ldexp"], [352, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[334, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[334, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[335, "ivy.lerp"], [352, "ivy.lerp"]], "lerp() (ivy.array method)": [[335, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[335, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[336, "ivy.lgamma"], [352, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[336, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[337, "ivy.modf"], [352, "ivy.modf"]], "modf() (ivy.array method)": [[337, "ivy.Array.modf"]], "modf() (ivy.container method)": [[337, "ivy.Container.modf"]], "nansum() (in module ivy)": [[338, "ivy.nansum"], [352, "ivy.nansum"]], "nansum() (ivy.array method)": [[338, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[338, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[339, "ivy.nextafter"], [352, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[339, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[339, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[340, "ivy.signbit"], [352, "ivy.signbit"]], "signbit() (ivy.array method)": [[340, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[340, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[341, "ivy.sinc"], [352, "ivy.sinc"]], "sinc() (ivy.array method)": [[341, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[341, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[342, "ivy.sparsify_tensor"], [352, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[342, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[342, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[343, "ivy.xlogy"], [352, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[343, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[343, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[344, "ivy.zeta"], [352, "ivy.zeta"]], "zeta() (ivy.array method)": [[344, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[344, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[345, "ivy.reduce"], [353, "ivy.reduce"]], "reduce() (ivy.array method)": [[345, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[345, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[346, "ivy.bind_custom_gradient_function"], [354, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[347, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[348, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[349, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[350, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[351, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[352, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[353, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[354, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[355, "ivy.adaptive_avg_pool1d"], [369, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[355, "ivy.adaptive_avg_pool2d"], [370, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[355, "ivy.adaptive_max_pool2d"], [371, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[355, "ivy.area_interpolate"], [372, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[355, "ivy.avg_pool1d"], [373, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[355, "ivy.avg_pool2d"], [374, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[355, "ivy.avg_pool3d"], [375, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[355, "ivy.dct"], [376, "ivy.dct"]], "dft() (in module ivy)": [[355, "ivy.dft"], [377, "ivy.dft"]], "dropout1d() (in module ivy)": [[355, "ivy.dropout1d"], [378, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[355, "ivy.dropout2d"], [379, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[355, "ivy.dropout3d"], [380, "ivy.dropout3d"]], "embedding() (in module ivy)": [[355, "ivy.embedding"], [381, "ivy.embedding"]], "fft() (in module ivy)": [[355, "ivy.fft"], [382, "ivy.fft"]], "fft2() (in module ivy)": [[355, "ivy.fft2"], [383, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[355, "ivy.generate_einsum_equation"], [384, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[355, "ivy.get_interpolate_kernel"], [385, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[355, "ivy.idct"], [386, "ivy.idct"]], "ifft() (in module ivy)": [[355, "ivy.ifft"], [387, "ivy.ifft"]], "ifftn() (in module ivy)": [[355, "ivy.ifftn"], [388, "ivy.ifftn"]], "interp() (in module ivy)": [[355, "ivy.interp"], [389, "ivy.interp"]], "interpolate() (in module ivy)": [[355, "ivy.interpolate"], [390, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[355, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[355, "ivy.max_pool1d"], [391, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[355, "ivy.max_pool2d"], [392, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[355, "ivy.max_pool3d"], [393, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[355, "ivy.max_unpool1d"], [394, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[355, "ivy.nearest_interpolate"], [395, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[355, "ivy.pool"], [396, "ivy.pool"]], "reduce_window() (in module ivy)": [[355, "ivy.reduce_window"], [397, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[355, "ivy.rfftn"], [398, "ivy.rfftn"]], "adjoint() (in module ivy)": [[356, "ivy.adjoint"], [399, "ivy.adjoint"]], "cond() (in module ivy)": [[356, "ivy.cond"], [400, "ivy.cond"]], "diagflat() (in module ivy)": [[356, "ivy.diagflat"], [401, "ivy.diagflat"]], "dot() (in module ivy)": [[356, "ivy.dot"], [402, "ivy.dot"]], "eig() (in module ivy)": [[356, "ivy.eig"], [403, "ivy.eig"], [593, "ivy.eig"], [625, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[356, "ivy.eigh_tridiagonal"], [404, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[356, "ivy.eigvals"], [405, "ivy.eigvals"]], "initialize_tucker() (in module ivy)": [[356, "ivy.initialize_tucker"], [406, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[356, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[356, "ivy.khatri_rao"], [407, "ivy.khatri_rao"]], "kron() (in module ivy)": [[356, "ivy.kron"], [408, "ivy.kron"]], "kronecker() (in module ivy)": [[356, "ivy.kronecker"], [409, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[356, "ivy.make_svd_non_negative"], [410, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[356, "ivy.matrix_exp"], [411, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[356, "ivy.mode_dot"], [412, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[356, "ivy.multi_dot"], [413, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[356, "ivy.multi_mode_dot"], [414, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[356, "ivy.partial_tucker"], [415, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[356, "ivy.svd_flip"], [416, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[356, "ivy.truncated_svd"], [417, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[356, "ivy.tucker"], [418, "ivy.tucker"]], "huber_loss() (in module ivy)": [[357, "ivy.huber_loss"], [419, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[357, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[357, "ivy.l1_loss"], [420, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[357, "ivy.log_poisson_loss"], [421, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[357, "ivy.smooth_l1_loss"], [422, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[357, "ivy.soft_margin_loss"], [423, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[358, "ivy.as_strided"], [424, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[358, "ivy.associative_scan"], [425, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[358, "ivy.atleast_1d"], [426, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[358, "ivy.atleast_2d"], [427, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[358, "ivy.atleast_3d"], [428, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[358, "ivy.broadcast_shapes"], [429, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[358, "ivy.choose"], [430, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[358, "ivy.concat_from_sequence"], [431, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[358, "ivy.dsplit"], [432, "ivy.dsplit"]], "dstack() (in module ivy)": [[358, "ivy.dstack"], [433, "ivy.dstack"]], "expand() (in module ivy)": [[358, "ivy.expand"], [434, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[358, "ivy.fill_diagonal"], [435, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[358, "ivy.flatten"], [436, "ivy.flatten"]], "fliplr() (in module ivy)": [[358, "ivy.fliplr"], [437, "ivy.fliplr"]], "flipud() (in module ivy)": [[358, "ivy.flipud"], [438, "ivy.flipud"]], "fold() (in module ivy)": [[358, "ivy.fold"], [439, "ivy.fold"]], "heaviside() (in module ivy)": [[358, "ivy.heaviside"], [440, "ivy.heaviside"]], "hsplit() (in module ivy)": [[358, "ivy.hsplit"], [441, "ivy.hsplit"]], "hstack() (in module ivy)": [[358, "ivy.hstack"], [442, "ivy.hstack"]], "i0() (in module ivy)": [[358, "ivy.i0"], [443, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[358, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[358, "ivy.matricize"], [444, "ivy.matricize"]], "moveaxis() (in module ivy)": [[358, "ivy.moveaxis"], [445, "ivy.moveaxis"]], "pad() (in module ivy)": [[358, "ivy.pad"], [446, "ivy.pad"]], "partial_fold() (in module ivy)": [[358, "ivy.partial_fold"], [447, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[358, "ivy.partial_tensor_to_vec"], [448, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[358, "ivy.partial_unfold"], [449, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[358, "ivy.partial_vec_to_tensor"], [450, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[358, "ivy.put_along_axis"], [451, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[358, "ivy.rot90"], [452, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[358, "ivy.soft_thresholding"], [453, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[358, "ivy.take_along_axis"], [454, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[358, "ivy.top_k"], [455, "ivy.top_k"]], "unfold() (in module ivy)": [[358, "ivy.unfold"], [456, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[358, "ivy.unique_consecutive"], [457, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[358, "ivy.vsplit"], [458, "ivy.vsplit"]], "vstack() (in module ivy)": [[358, "ivy.vstack"], [459, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[359, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[360, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[361, "ivy.batch_norm"], [460, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[361, "ivy.group_norm"], [461, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[361, "ivy.instance_norm"], [462, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[361, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[361, "ivy.l1_normalize"], [463, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[361, "ivy.l2_normalize"], [464, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[361, "ivy.lp_normalize"], [465, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[362, "ivy.bernoulli"], [466, "ivy.bernoulli"]], "beta() (in module ivy)": [[362, "ivy.beta"], [467, "ivy.beta"]], "dirichlet() (in module ivy)": [[362, "ivy.dirichlet"], [468, "ivy.dirichlet"]], "gamma() (in module ivy)": [[362, "ivy.gamma"], [469, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[362, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[362, "ivy.poisson"], [470, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[363, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[363, "ivy.unravel_index"], [471, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[364, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[365, "ivy.invert_permutation"], [472, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[365, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[365, "ivy.lexsort"], [473, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[366, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[366, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[366, "ivy.is_ivy_sparse_array"], [474, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[366, "ivy.is_native_sparse_array"], [475, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[366, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[366, "ivy.native_sparse_array"], [476, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[366, "ivy.native_sparse_array_to_indices_values_and_shape"], [477, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[367, "ivy.bincount"], [478, "ivy.bincount"]], "corrcoef() (in module ivy)": [[367, "ivy.corrcoef"], [479, "ivy.corrcoef"]], "cov() (in module ivy)": [[367, "ivy.cov"], [480, "ivy.cov"]], "cummax() (in module ivy)": [[367, "ivy.cummax"], [481, "ivy.cummax"]], "cummin() (in module ivy)": [[367, "ivy.cummin"], [482, "ivy.cummin"]], "histogram() (in module ivy)": [[367, "ivy.histogram"], [483, "ivy.histogram"]], "igamma() (in module ivy)": [[367, "ivy.igamma"], [484, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[367, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[367, "ivy.median"], [485, "ivy.median"]], "nanmean() (in module ivy)": [[367, "ivy.nanmean"], [486, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[367, "ivy.nanmedian"], [487, "ivy.nanmedian"]], "nanprod() (in module ivy)": [[367, "ivy.nanprod"], [488, "ivy.nanprod"]], "quantile() (in module ivy)": [[367, "ivy.quantile"], [489, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[368, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[368, "ivy.optional_get_element"], [490, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[369, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[369, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[370, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[370, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[371, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[371, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[373, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[373, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[374, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[374, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[375, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[375, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[376, "ivy.Array.dct"]], "dct() (ivy.container method)": [[376, "ivy.Container.dct"]], "dft() (ivy.array method)": [[377, "ivy.Array.dft"]], "dft() (ivy.container method)": [[377, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[378, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[378, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[379, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[379, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[380, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[380, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[381, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[381, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[382, "ivy.Array.fft"]], "fft() (ivy.container method)": [[382, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[383, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[386, "ivy.Array.idct"]], "idct() (ivy.container method)": [[386, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[387, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[387, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[388, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[388, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[390, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[390, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[391, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[391, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[392, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[392, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[393, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[393, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[397, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[397, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[398, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[398, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[399, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[399, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[400, "ivy.Array.cond"]], "cond() (ivy.container method)": [[400, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[401, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[401, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[402, "ivy.Array.dot"]], "dot() (ivy.container method)": [[402, "ivy.Container.dot"]], "eig() (ivy.array method)": [[403, "ivy.Array.eig"], [625, "ivy.Array.eig"]], "eig() (ivy.container method)": [[403, "ivy.Container.eig"], [625, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[404, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[404, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[405, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[405, "ivy.Container.eigvals"]], "initialize_tucker() (ivy.array method)": [[406, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[406, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[408, "ivy.Array.kron"]], "kron() (ivy.container method)": [[408, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[410, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[410, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[411, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[411, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[412, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[412, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[413, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[413, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[414, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[414, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[415, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[415, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[416, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[416, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[417, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[417, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[418, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[418, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[419, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[419, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[420, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[420, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[422, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[422, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[423, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[423, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[424, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[424, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[425, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[425, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[426, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[426, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[427, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[427, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[428, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[428, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[429, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[431, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[431, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[432, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[432, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[433, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[433, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[434, "ivy.Array.expand"]], "expand() (ivy.container method)": [[434, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[435, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[435, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[436, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[436, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[437, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[437, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[438, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[438, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[439, "ivy.Array.fold"]], "fold() (ivy.container method)": [[439, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[440, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[440, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[441, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[441, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[442, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[442, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[443, "ivy.Array.i0"]], "i0() (ivy.container method)": [[443, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[444, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[444, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[445, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[445, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[446, "ivy.Array.pad"]], "pad() (ivy.container method)": [[446, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[447, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[447, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[448, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[448, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[449, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[449, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[450, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[450, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[452, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[452, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[453, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[453, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[454, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[454, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[455, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[455, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[456, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[456, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[457, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[457, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[458, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[458, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[459, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[459, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[460, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[460, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[461, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[461, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[462, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[462, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[463, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[463, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[464, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[464, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[465, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[465, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[466, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[466, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[467, "ivy.Array.beta"]], "beta() (ivy.container method)": [[467, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[468, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[468, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[469, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[469, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[470, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[470, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[471, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[471, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[472, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[473, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[473, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[478, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[478, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[479, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[479, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[480, "ivy.Array.cov"]], "cov() (ivy.container method)": [[480, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[481, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[481, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[482, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[482, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[483, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[483, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[484, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[484, "ivy.Container.igamma"]], "median() (ivy.array method)": [[485, "ivy.Array.median"]], "median() (ivy.container method)": [[485, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[486, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[486, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[487, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[487, "ivy.Container.nanmedian"]], "nanprod() (ivy.array method)": [[488, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[488, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[489, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[489, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[490, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[490, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[491, "ivy.all_equal"], [590, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[491, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[491, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[492, "ivy.arg_info"], [590, "ivy.arg_info"]], "arg_names() (in module ivy)": [[493, "ivy.arg_names"], [590, "ivy.arg_names"]], "array_equal() (in module ivy)": [[494, "ivy.array_equal"], [590, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[494, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[494, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[495, "ivy.assert_supports_inplace"], [590, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[495, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[495, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[496, "ivy.cache_fn"], [590, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[497, "ivy.clip_matrix_norm"], [590, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[497, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[497, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[498, "ivy.clip_vector_norm"], [590, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[498, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[498, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[499, "ivy.container_types"], [590, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[500, "ivy.current_backend_str"], [590, "ivy.current_backend_str"]], "default() (in module ivy)": [[501, "ivy.default"], [590, "ivy.default"]], "default() (ivy.array method)": [[501, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[502, "ivy.einops_rearrange"], [590, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[502, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[502, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[503, "ivy.einops_reduce"], [590, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[503, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[503, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[504, "ivy.einops_repeat"], [590, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[504, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[504, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[505, "ivy.exists"], [590, "ivy.exists"]], "exists() (ivy.array method)": [[505, "ivy.Array.exists"]], "exists() (ivy.container method)": [[505, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[506, "ivy.fourier_encode"], [590, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[506, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[506, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[507, "ivy.function_supported_devices_and_dtypes"], [590, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[508, "ivy.function_unsupported_devices_and_dtypes"], [590, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[509, "ivy.gather"], [590, "ivy.gather"]], "gather() (ivy.array method)": [[509, "ivy.Array.gather"]], "gather() (ivy.container method)": [[509, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[510, "ivy.gather_nd"], [590, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[510, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[510, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[511, "ivy.get_all_arrays_in_memory"], [590, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[512, "ivy.get_item"], [590, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[513, "ivy.get_num_dims"], [590, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[513, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[513, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[514, "ivy.get_referrers_recursive"], [590, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[515, "ivy.has_nans"], [590, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[515, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[515, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[516, "ivy.inplace_arrays_supported"], [590, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[517, "ivy.inplace_decrement"], [590, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[517, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[517, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[518, "ivy.inplace_increment"], [590, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[518, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[518, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[519, "ivy.inplace_update"], [590, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[519, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[519, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[520, "ivy.inplace_variables_supported"], [590, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[521, "ivy.is_array"], [590, "ivy.is_array"]], "is_array() (ivy.array method)": [[521, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[521, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[522, "ivy.is_ivy_array"], [590, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[522, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[522, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[523, "ivy.is_ivy_container"], [590, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[523, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[524, "ivy.is_ivy_nested_array"], [590, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[525, "ivy.is_native_array"], [590, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[525, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[525, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[526, "ivy.isin"], [590, "ivy.isin"]], "isin() (ivy.array method)": [[526, "ivy.Array.isin"]], "isin() (ivy.container method)": [[526, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[527, "ivy.isscalar"], [590, "ivy.isscalar"]], "itemsize() (in module ivy)": [[528, "ivy.itemsize"], [590, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[528, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[528, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[529, "ivy.match_kwargs"], [590, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[530, "ivy.multiprocessing"], [590, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[531, "ivy.num_arrays_in_memory"], [590, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[532, "ivy.print_all_arrays_in_memory"], [590, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[533, "ivy.scatter_flat"], [590, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[533, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[533, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[534, "ivy.scatter_nd"], [590, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[534, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[534, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[535, "ivy.set_array_mode"], [590, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[536, "ivy.set_exception_trace_mode"], [590, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[537, "ivy.set_inplace_mode"], [590, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[538, "ivy.set_item"], [590, "ivy.set_item"]], "set_min_base() (in module ivy)": [[539, "ivy.set_min_base"], [590, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[540, "ivy.set_min_denominator"], [590, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[541, "ivy.set_nestable_mode"], [590, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[542, "ivy.set_precise_mode"], [590, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[543, "ivy.set_queue_timeout"], [590, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[544, "ivy.set_shape_array_mode"], [590, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[545, "ivy.set_show_func_wrapper_trace_mode"], [590, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[546, "ivy.set_tmp_dir"], [590, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[547, "ivy.shape"], [590, "ivy.shape"]], "shape() (ivy.array method)": [[547, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[548, "ivy.stable_divide"], [590, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[548, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[548, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[549, "ivy.stable_pow"], [590, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[549, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[549, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[550, "ivy.strides"], [590, "ivy.strides"]], "strides() (ivy.array method)": [[550, "ivy.Array.strides"]], "strides() (ivy.container method)": [[550, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[551, "ivy.supports_inplace_updates"], [590, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[551, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[551, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[552, "ivy.to_ivy_shape"], [590, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[553, "ivy.to_list"], [590, "ivy.to_list"]], "to_list() (ivy.array method)": [[553, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[553, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[554, "ivy.to_native_shape"], [590, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[555, "ivy.to_numpy"], [590, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[555, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[555, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[556, "ivy.to_scalar"], [590, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[556, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[556, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[557, "ivy.try_else_none"], [590, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[558, "ivy.unset_array_mode"], [590, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[559, "ivy.unset_exception_trace_mode"], [590, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[560, "ivy.unset_inplace_mode"], [590, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[561, "ivy.unset_min_base"], [590, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[562, "ivy.unset_min_denominator"], [590, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[563, "ivy.unset_nestable_mode"], [590, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[564, "ivy.unset_precise_mode"], [590, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[565, "ivy.unset_queue_timeout"], [590, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[566, "ivy.unset_shape_array_mode"], [590, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[567, "ivy.unset_show_func_wrapper_trace_mode"], [590, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[568, "ivy.unset_tmp_dir"], [590, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[569, "ivy.value_is_nan"], [590, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[569, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[569, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[570, "ivy.vmap"], [590, "ivy.vmap"]], "adam_step() (in module ivy)": [[571, "ivy.adam_step"], [591, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[571, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[571, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[572, "ivy.adam_update"], [591, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[572, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[572, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[573, "ivy.execute_with_gradients"], [591, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[574, "ivy.grad"], [591, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[575, "ivy.gradient_descent_update"], [591, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[575, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[575, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[576, "ivy.jac"], [591, "ivy.jac"]], "lamb_update() (in module ivy)": [[577, "ivy.lamb_update"], [591, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[577, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[577, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[578, "ivy.lars_update"], [591, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[578, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[578, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[579, "ivy.optimizer_update"], [591, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[579, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[579, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[580, "ivy.stop_gradient"], [591, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[580, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[580, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[581, "ivy.value_and_grad"], [591, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[582, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[583, "ivy.e"]], "inf (in module ivy)": [[583, "ivy.inf"]], "ivy.functional.ivy.constants": [[583, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[583, "ivy.nan"]], "newaxis (in module ivy)": [[583, "ivy.newaxis"]], "pi (in module ivy)": [[583, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[584, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[585, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[585, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[586, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[586, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[586, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[586, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[586, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[586, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[587, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[587, "ivy.Profiler"]], "ivy.functional.ivy.device": [[587, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[588, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[589, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[590, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[590, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[590, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[591, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[592, "ivy.conv"], [605, "ivy.conv"]], "conv1d() (in module ivy)": [[592, "ivy.conv1d"], [606, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[592, "ivy.conv1d_transpose"], [607, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[592, "ivy.conv2d"], [608, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[592, "ivy.conv2d_transpose"], [609, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[592, "ivy.conv3d"], [610, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[592, "ivy.conv3d_transpose"], [611, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[592, "ivy.conv_general_dilated"], [612, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[592, "ivy.conv_general_transpose"], [613, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[592, "ivy.depthwise_conv2d"], [614, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[592, "ivy.dropout"], [615, "ivy.dropout"]], "ivy.functional.ivy.layers": [[592, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[592, "ivy.linear"], [616, "ivy.linear"]], "lstm_update() (in module ivy)": [[592, "ivy.lstm_update"], [617, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[592, "ivy.multi_head_attention"], [618, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[592, "ivy.scaled_dot_product_attention"], [619, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[593, "ivy.cholesky"], [620, "ivy.cholesky"]], "cross() (in module ivy)": [[593, "ivy.cross"], [621, "ivy.cross"]], "det() (in module ivy)": [[593, "ivy.det"], [622, "ivy.det"]], "diag() (in module ivy)": [[593, "ivy.diag"], [623, "ivy.diag"]], "diagonal() (in module ivy)": [[593, "ivy.diagonal"], [624, "ivy.diagonal"]], "eigh() (in module ivy)": [[593, "ivy.eigh"], [626, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[593, "ivy.eigvalsh"], [627, "ivy.eigvalsh"]], "inner() (in module ivy)": [[593, "ivy.inner"], [628, "ivy.inner"]], "inv() (in module ivy)": [[593, "ivy.inv"], [629, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[593, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[593, "ivy.lu_factor"], [630, "ivy.lu_factor"]], "matmul() (in module ivy)": [[593, "ivy.matmul"], [631, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[593, "ivy.matrix_norm"], [632, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[593, "ivy.matrix_power"], [633, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[593, "ivy.matrix_rank"], [634, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[593, "ivy.matrix_transpose"], [635, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[593, "ivy.outer"], [636, "ivy.outer"]], "pinv() (in module ivy)": [[593, "ivy.pinv"], [637, "ivy.pinv"]], "qr() (in module ivy)": [[593, "ivy.qr"], [638, "ivy.qr"]], "slogdet() (in module ivy)": [[593, "ivy.slogdet"], [639, "ivy.slogdet"]], "solve() (in module ivy)": [[593, "ivy.solve"], [640, "ivy.solve"]], "svd() (in module ivy)": [[593, "ivy.svd"], [641, "ivy.svd"]], "svdvals() (in module ivy)": [[593, "ivy.svdvals"], [642, "ivy.svdvals"]], "tensordot() (in module ivy)": [[593, "ivy.tensordot"], [643, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[593, "ivy.tensorsolve"], [644, "ivy.tensorsolve"]], "trace() (in module ivy)": [[593, "ivy.trace"], [645, "ivy.trace"]], "vander() (in module ivy)": [[593, "ivy.vander"], [646, "ivy.vander"]], "vecdot() (in module ivy)": [[593, "ivy.vecdot"], [647, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[593, "ivy.vector_norm"], [648, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[593, "ivy.vector_to_skew_symmetric_matrix"], [649, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[594, "ivy.binary_cross_entropy"], [650, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[594, "ivy.cross_entropy"], [651, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[594, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[594, "ivy.sparse_cross_entropy"], [652, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[595, "ivy.clip"], [653, "ivy.clip"]], "concat() (in module ivy)": [[595, "ivy.concat"], [654, "ivy.concat"]], "constant_pad() (in module ivy)": [[595, "ivy.constant_pad"], [655, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[595, "ivy.expand_dims"], [656, "ivy.expand_dims"]], "flip() (in module ivy)": [[595, "ivy.flip"], [657, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[595, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[595, "ivy.permute_dims"], [658, "ivy.permute_dims"]], "repeat() (in module ivy)": [[595, "ivy.repeat"], [659, "ivy.repeat"]], "reshape() (in module ivy)": [[595, "ivy.reshape"], [660, "ivy.reshape"]], "roll() (in module ivy)": [[595, "ivy.roll"], [661, "ivy.roll"]], "split() (in module ivy)": [[595, "ivy.split"], [662, "ivy.split"]], "squeeze() (in module ivy)": [[595, "ivy.squeeze"], [663, "ivy.squeeze"]], "stack() (in module ivy)": [[595, "ivy.stack"], [664, "ivy.stack"]], "swapaxes() (in module ivy)": [[595, "ivy.swapaxes"], [665, "ivy.swapaxes"]], "tile() (in module ivy)": [[595, "ivy.tile"], [666, "ivy.tile"]], "unstack() (in module ivy)": [[595, "ivy.unstack"], [667, "ivy.unstack"]], "zero_pad() (in module ivy)": [[595, "ivy.zero_pad"], [668, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[596, "ivy.fomaml_step"], [669, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[596, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[596, "ivy.maml_step"], [670, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[596, "ivy.reptile_step"], [671, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[597, "ivy.all_nested_indices"], [672, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[597, "ivy.copy_nest"], [673, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[597, "ivy.duplicate_array_index_chains"], [674, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[597, "ivy.index_nest"], [675, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[597, "ivy.insert_into_nest_at_index"], [676, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[597, "ivy.insert_into_nest_at_indices"], [677, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[597, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[597, "ivy.map"], [678, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[597, "ivy.map_nest_at_index"], [679, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[597, "ivy.map_nest_at_indices"], [680, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[597, "ivy.multi_index_nest"], [681, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[597, "ivy.nested_any"], [682, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[597, "ivy.nested_argwhere"], [683, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[597, "ivy.nested_map"], [684, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[597, "ivy.nested_multi_map"], [685, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[597, "ivy.prune_empty"], [686, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[597, "ivy.prune_nest_at_index"], [687, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[597, "ivy.prune_nest_at_indices"], [688, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[597, "ivy.set_nest_at_index"], [689, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[597, "ivy.set_nest_at_indices"], [690, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[598, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[598, "ivy.layer_norm"], [691, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[599, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[599, "ivy.multinomial"], [692, "ivy.multinomial"]], "randint() (in module ivy)": [[599, "ivy.randint"], [693, "ivy.randint"]], "random_normal() (in module ivy)": [[599, "ivy.random_normal"], [694, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[599, "ivy.random_uniform"], [695, "ivy.random_uniform"]], "seed() (in module ivy)": [[599, "ivy.seed"], [696, "ivy.seed"]], "shuffle() (in module ivy)": [[599, "ivy.shuffle"], [697, "ivy.shuffle"]], "argmax() (in module ivy)": [[600, "ivy.argmax"], [698, "ivy.argmax"]], "argmin() (in module ivy)": [[600, "ivy.argmin"], [699, "ivy.argmin"]], "argwhere() (in module ivy)": [[600, "ivy.argwhere"], [700, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[600, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[600, "ivy.nonzero"], [701, "ivy.nonzero"]], "where() (in module ivy)": [[600, "ivy.where"], [702, "ivy.where"]], "ivy.functional.ivy.set": [[601, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[601, "ivy.unique_all"], [703, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[601, "ivy.unique_counts"], [704, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[601, "ivy.unique_inverse"], [705, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[601, "ivy.unique_values"], [706, "ivy.unique_values"]], "argsort() (in module ivy)": [[602, "ivy.argsort"], [707, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[602, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[602, "ivy.msort"], [708, "ivy.msort"]], "searchsorted() (in module ivy)": [[602, "ivy.searchsorted"], [709, "ivy.searchsorted"]], "sort() (in module ivy)": [[602, "ivy.sort"], [710, "ivy.sort"]], "cumprod() (in module ivy)": [[603, "ivy.cumprod"], [711, "ivy.cumprod"]], "cumsum() (in module ivy)": [[603, "ivy.cumsum"], [712, "ivy.cumsum"]], "einsum() (in module ivy)": [[603, "ivy.einsum"], [713, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[603, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[603, "ivy.max"], [714, "ivy.max"]], "mean() (in module ivy)": [[603, "ivy.mean"], [715, "ivy.mean"]], "min() (in module ivy)": [[603, "ivy.min"], [716, "ivy.min"]], "prod() (in module ivy)": [[603, "ivy.prod"], [717, "ivy.prod"]], "std() (in module ivy)": [[603, "ivy.std"], [718, "ivy.std"]], "sum() (in module ivy)": [[603, "ivy.sum"], [719, "ivy.sum"]], "var() (in module ivy)": [[603, "ivy.var"], [720, "ivy.var"]], "all() (in module ivy)": [[604, "ivy.all"], [721, "ivy.all"]], "any() (in module ivy)": [[604, "ivy.any"], [722, "ivy.any"]], "ivy.functional.ivy.utility": [[604, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[604, "ivy.load"], [723, "ivy.load"]], "save() (in module ivy)": [[604, "ivy.save"], [724, "ivy.save"]], "conv1d() (ivy.array method)": [[606, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[606, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[607, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[607, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[608, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[608, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[609, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[609, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[610, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[610, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[611, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[611, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[614, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[614, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[615, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[615, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[616, "ivy.Array.linear"]], "linear() (ivy.container method)": [[616, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[617, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[617, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[618, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[618, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[619, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[619, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[620, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[620, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[621, "ivy.Array.cross"]], "cross() (ivy.container method)": [[621, "ivy.Container.cross"]], "det() (ivy.array method)": [[622, "ivy.Array.det"]], "det() (ivy.container method)": [[622, "ivy.Container.det"]], "diag() (ivy.array method)": [[623, "ivy.Array.diag"]], "diag() (ivy.container method)": [[623, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[624, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[624, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[626, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[626, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[627, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[627, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[628, "ivy.Array.inner"]], "inner() (ivy.container method)": [[628, "ivy.Container.inner"]], "inv() (ivy.array method)": [[629, "ivy.Array.inv"]], "inv() (ivy.container method)": [[629, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[631, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[631, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[632, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[632, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[633, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[633, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[634, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[634, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[635, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[635, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[636, "ivy.Array.outer"]], "outer() (ivy.container method)": [[636, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[637, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[637, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[638, "ivy.Array.qr"]], "qr() (ivy.container method)": [[638, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[639, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[639, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[640, "ivy.Array.solve"]], "solve() (ivy.container method)": [[640, "ivy.Container.solve"]], "svd() (ivy.array method)": [[641, "ivy.Array.svd"]], "svd() (ivy.container method)": [[641, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[642, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[642, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[643, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[643, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[644, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[644, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[645, "ivy.Array.trace"]], "trace() (ivy.container method)": [[645, "ivy.Container.trace"]], "vander() (ivy.array method)": [[646, "ivy.Array.vander"]], "vander() (ivy.container method)": [[646, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[647, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[647, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[648, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[648, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[649, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[649, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[650, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[650, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[651, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[651, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[652, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[652, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[653, "ivy.Array.clip"]], "clip() (ivy.container method)": [[653, "ivy.Container.clip"]], "concat() (ivy.array method)": [[654, "ivy.Array.concat"]], "concat() (ivy.container method)": [[654, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[655, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[655, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[656, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[656, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[657, "ivy.Array.flip"]], "flip() (ivy.container method)": [[657, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[658, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[658, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[659, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[659, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[660, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[660, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[661, "ivy.Array.roll"]], "roll() (ivy.container method)": [[661, "ivy.Container.roll"]], "split() (ivy.array method)": [[662, "ivy.Array.split"]], "split() (ivy.container method)": [[662, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[663, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[663, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[664, "ivy.Array.stack"]], "stack() (ivy.container method)": [[664, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[665, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[665, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[666, "ivy.Array.tile"]], "tile() (ivy.container method)": [[666, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[667, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[667, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[668, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[668, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[691, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[691, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[692, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[692, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[693, "ivy.Array.randint"]], "randint() (ivy.container method)": [[693, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[694, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[694, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[695, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[695, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[697, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[697, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[698, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[698, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[699, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[699, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[700, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[700, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[701, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[701, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[702, "ivy.Array.where"]], "where() (ivy.container method)": [[702, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[703, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[703, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[704, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[704, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[705, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[705, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[706, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[706, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[707, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[707, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[708, "ivy.Array.msort"]], "msort() (ivy.container method)": [[708, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[709, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[709, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[710, "ivy.Array.sort"]], "sort() (ivy.container method)": [[710, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[711, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[711, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[712, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[712, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[713, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[713, "ivy.Container.einsum"]], "max() (ivy.array method)": [[714, "ivy.Array.max"]], "max() (ivy.container method)": [[714, "ivy.Container.max"]], "mean() (ivy.array method)": [[715, "ivy.Array.mean"]], "mean() (ivy.container method)": [[715, "ivy.Container.mean"]], "min() (ivy.array method)": [[716, "ivy.Array.min"]], "min() (ivy.container method)": [[716, "ivy.Container.min"]], "prod() (ivy.array method)": [[717, "ivy.Array.prod"]], "prod() (ivy.container method)": [[717, "ivy.Container.prod"]], "std() (ivy.array method)": [[718, "ivy.Array.std"]], "std() (ivy.container method)": [[718, "ivy.Container.std"]], "sum() (ivy.array method)": [[719, "ivy.Array.sum"]], "sum() (ivy.container method)": [[719, "ivy.Container.sum"]], "var() (ivy.array method)": [[720, "ivy.Array.var"]], "var() (ivy.container method)": [[720, "ivy.Container.var"]], "all() (ivy.array method)": [[721, "ivy.Array.all"]], "all() (ivy.container method)": [[721, "ivy.Container.all"]], "any() (ivy.array method)": [[722, "ivy.Array.any"]], "any() (ivy.container method)": [[722, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[727, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[727, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[727, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[727, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[727, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[727, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[727, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[727, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[727, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[727, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[727, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[727, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[727, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[727, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[727, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[727, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[727, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[727, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[727, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[727, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[728, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[728, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[728, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[728, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[728, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[728, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[728, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[728, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[729, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[729, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[729, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[730, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[730, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[730, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[730, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[730, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[730, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[730, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[730, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[730, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[730, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[730, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[730, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[730, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[730, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[730, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[730, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[731, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[731, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[731, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[731, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[731, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[731, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[731, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[731, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[731, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[731, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[731, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[731, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[731, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[731, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[731, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[731, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[731, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[731, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[731, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[731, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[731, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[731, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[731, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[731, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[731, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[731, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[732, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[732, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[732, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[732, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[732, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[732, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[732, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[733, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[733, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[733, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[733, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[733, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[733, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[733, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[734, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[734, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[734, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[734, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[734, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[735, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[735, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[735, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[735, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[735, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[735, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[735, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[735, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[735, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[735, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[735, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[735, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[735, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[735, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[735, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[735, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[735, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[735, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[735, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[735, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[735, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[736, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[736, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[736, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[737, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[737, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[738, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[739, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[739, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[739, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[739, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[739, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[739, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[739, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[739, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[739, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[739, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[739, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[740, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[740, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[740, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[741, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[741, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[741, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[741, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[741, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[741, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[742, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[742, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[743, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[743, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[744, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[744, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[744, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[744, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[744, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[744, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[744, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[744, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[744, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[744, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[744, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[744, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[744, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[744, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[744, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[744, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[744, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[744, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[744, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[744, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[744, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[744, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[744, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[744, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[744, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[744, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[745, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[745, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[745, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[746, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[746, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[746, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[747, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[747, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[747, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[747, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[747, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[748, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[748, "module-ivy.utils.verbosity"]], "applied libraries": [[797, "term-Applied-Libraries"]], "automatic code conversions": [[797, "term-Automatic-Code-Conversions"]], "backend handler": [[797, "term-Backend-Handler"]], "compositional functions": [[797, "term-Compositional-Functions"]], "convenience functions": [[797, "term-Convenience-Functions"]], "framework": [[797, "term-Framework"]], "framework handler": [[797, "term-Framework-Handler"]], "graph compiler": [[797, "term-Graph-Compiler"]], "ivy array": [[797, "term-Ivy-Array"]], "ivy backends": [[797, "term-Ivy-Backends"]], "ivy builder": [[797, "term-Ivy-Builder"]], "ivy compiler": [[797, "term-Ivy-Compiler"]], "ivy container": [[797, "term-Ivy-Container"]], "ivy frontends": [[797, "term-Ivy-Frontends"]], "ivy functional api": [[797, "term-Ivy-Functional-API"]], "ivy graph compiler": [[797, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[797, "term-Ivy-Transpiler"]], "mixed functions": [[797, "term-Mixed-Functions"]], "native array": [[797, "term-Native-Array"]], "nestable functions": [[797, "term-Nestable-Functions"]], "pipeline": [[797, "term-Pipeline"]], "primary functions": [[797, "term-Primary-Functions"]], "standalone functions": [[797, "term-Standalone-Functions"]], "submodule helper functions": [[797, "term-Submodule-Helper-Functions"]]}})