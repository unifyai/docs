Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_compile_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/compile", "overview/one_liners/transpile", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_compile_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/compile.rst", "overview/one_liners/transpile.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Compile code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.compile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 156, 159, 162, 163, 164, 166, 170, 171, 185, 188, 198, 204, 205, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 383, 384, 385, 386, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 530, 536, 541, 542, 543, 544, 546, 548, 549, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 667, 669, 671, 672, 677, 678, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 723, 724, 726, 727, 728, 729, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802], "repo": [0, 10, 39, 746, 749, 751, 754, 756, 757, 769, 770, 785], "hold": [0, 51, 52, 56, 64, 74, 79, 87, 91, 312, 325, 330, 344, 359, 425, 451, 474, 475, 480, 526, 527, 583, 586, 596, 625, 705, 742, 778, 796], "all": [0, 1, 3, 4, 5, 7, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 38, 39, 41, 42, 44, 46, 47, 51, 52, 55, 56, 58, 60, 65, 66, 68, 69, 70, 73, 74, 75, 78, 79, 81, 83, 88, 89, 91, 118, 126, 133, 136, 137, 138, 192, 199, 231, 235, 263, 264, 307, 308, 317, 334, 341, 344, 347, 348, 350, 359, 380, 389, 390, 396, 400, 408, 411, 439, 450, 479, 484, 487, 504, 524, 525, 541, 548, 549, 563, 566, 578, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 593, 597, 608, 610, 611, 614, 627, 632, 633, 636, 641, 650, 654, 656, 662, 663, 664, 665, 666, 667, 676, 677, 678, 679, 685, 688, 693, 722, 723, 724, 730, 733, 738, 742, 743, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 802], "jupyt": [0, 786, 797], "exampl": [0, 6, 8, 16, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378, 379, 380, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 406, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 438, 439, 444, 445, 446, 447, 448, 450, 451, 452, 456, 457, 458, 461, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 733, 736, 740, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 775, 777, 778, 779, 780, 781, 787, 792, 793, 796, 798, 801, 802], "tab": [0, 747, 748, 756, 778], "ivi": [0, 1, 2, 6, 8, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 750, 751, 753, 755, 757, 758, 760, 762, 763, 764, 765, 767, 773, 774, 781, 783, 786, 787, 788, 791, 802], "": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 40, 42, 43, 44, 47, 51, 52, 53, 56, 64, 74, 76, 79, 87, 114, 131, 136, 137, 157, 158, 187, 190, 191, 203, 238, 273, 308, 312, 314, 323, 325, 331, 335, 337, 341, 344, 345, 347, 348, 349, 350, 353, 354, 359, 362, 363, 369, 375, 380, 390, 394, 398, 403, 410, 414, 430, 431, 439, 453, 454, 455, 463, 473, 482, 500, 501, 521, 543, 544, 565, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 590, 596, 600, 602, 604, 606, 616, 627, 634, 635, 641, 677, 711, 713, 722, 723, 724, 725, 726, 727, 728, 729, 733, 742, 743, 745, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 783, 786, 787, 788, 789, 790, 791, 794, 795, 796, 798, 799, 800, 801], "web": 0, "relev": [0, 47, 70, 130, 578, 728, 742, 747, 748, 749, 752, 755, 756, 757, 759, 765, 766, 769, 770, 778, 782, 786, 793, 800, 801], "link": [0, 16, 25, 26, 40, 742, 747, 748, 749, 754, 756, 757, 762, 768, 790, 791, 793], "list": [0, 4, 5, 6, 7, 41, 46, 47, 48, 50, 51, 52, 55, 58, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 126, 128, 131, 132, 133, 135, 140, 144, 146, 159, 163, 164, 171, 187, 204, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 293, 294, 296, 312, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 331, 332, 333, 335, 336, 337, 344, 347, 348, 350, 357, 365, 366, 367, 369, 370, 371, 372, 383, 384, 385, 386, 396, 399, 402, 407, 408, 411, 412, 413, 415, 416, 419, 420, 421, 422, 424, 425, 434, 445, 447, 448, 451, 453, 455, 456, 457, 458, 460, 465, 473, 474, 475, 476, 484, 486, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 504, 506, 508, 510, 511, 512, 514, 515, 518, 522, 526, 527, 541, 542, 544, 546, 547, 548, 549, 550, 562, 563, 568, 573, 578, 579, 580, 581, 583, 585, 586, 588, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 636, 638, 643, 644, 645, 646, 647, 650, 653, 654, 655, 656, 657, 660, 661, 665, 666, 667, 668, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 701, 702, 704, 705, 708, 710, 711, 713, 714, 715, 721, 722, 724, 730, 736, 746, 747, 748, 751, 752, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 767, 768, 769, 770, 771, 775, 778, 779, 780, 781, 789, 795, 796, 801], "open": [0, 3, 5, 6, 7, 8, 22, 25, 26, 39, 40, 41, 42, 52, 60, 83, 118, 578, 592, 686, 688, 742, 743, 748, 749, 754, 757, 760, 768, 769, 773, 782, 785, 786, 787, 789, 790, 793, 794, 795, 797, 798], "task": [0, 42, 589, 662, 663, 664, 742, 743, 749, 768, 769, 795, 801, 802], "avil": 0, "discuss": [0, 747, 749, 754, 757, 758, 767, 768, 770, 773, 776, 777, 778, 781, 787, 791, 796], "suggest": [0, 747, 748, 749, 754, 757, 762, 766, 768, 770, 771, 772, 782], "new": [0, 6, 8, 9, 10, 12, 14, 17, 23, 25, 26, 27, 41, 43, 51, 52, 53, 58, 59, 68, 70, 74, 75, 76, 79, 81, 82, 122, 125, 127, 128, 133, 134, 135, 139, 140, 177, 220, 266, 268, 272, 312, 315, 325, 330, 344, 350, 359, 417, 424, 438, 444, 480, 495, 496, 497, 499, 502, 503, 505, 526, 527, 530, 532, 539, 541, 542, 548, 565, 568, 570, 571, 572, 578, 579, 581, 583, 584, 588, 590, 591, 621, 629, 649, 653, 657, 670, 682, 683, 684, 721, 724, 727, 728, 733, 742, 743, 747, 748, 749, 750, 752, 753, 755, 756, 757, 759, 760, 762, 765, 767, 768, 769, 770, 771, 773, 774, 777, 780, 782, 783, 785, 786, 787, 789, 793, 797, 801, 802], "should": [0, 4, 42, 45, 47, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 67, 68, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 86, 87, 89, 91, 93, 94, 104, 108, 117, 131, 133, 136, 137, 145, 170, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 296, 308, 322, 326, 327, 328, 329, 333, 338, 339, 341, 344, 346, 347, 348, 349, 350, 354, 359, 370, 371, 372, 374, 379, 399, 408, 411, 415, 438, 439, 459, 460, 473, 474, 475, 489, 512, 563, 565, 568, 570, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 611, 612, 613, 614, 615, 617, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 653, 669, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 710, 712, 713, 720, 721, 722, 723, 724, 726, 727, 728, 729, 736, 744, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 784, 786, 790, 791, 792, 795, 797, 802], "comprehens": [0, 14, 749, 751], "possibl": [0, 3, 31, 47, 51, 70, 74, 81, 91, 120, 238, 281, 295, 341, 347, 349, 350, 369, 412, 419, 420, 421, 425, 427, 429, 430, 431, 438, 451, 522, 581, 583, 585, 596, 608, 649, 650, 651, 653, 655, 656, 658, 660, 707, 709, 739, 742, 743, 747, 748, 749, 751, 754, 755, 757, 759, 760, 762, 764, 766, 767, 768, 769, 770, 773, 775, 778, 781, 786, 793, 795, 801], "us": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 89, 91, 94, 101, 130, 133, 143, 155, 157, 158, 169, 170, 190, 191, 193, 198, 202, 203, 204, 205, 207, 210, 216, 224, 252, 253, 255, 256, 258, 259, 260, 262, 263, 265, 274, 278, 283, 295, 297, 298, 300, 301, 302, 306, 323, 326, 327, 330, 341, 344, 347, 348, 350, 353, 354, 355, 357, 359, 365, 366, 367, 369, 370, 371, 372, 373, 375, 380, 382, 383, 384, 385, 388, 390, 394, 396, 399, 403, 405, 407, 408, 409, 410, 411, 429, 433, 437, 439, 453, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 473, 480, 482, 500, 501, 510, 511, 522, 530, 532, 533, 535, 541, 542, 554, 555, 557, 564, 565, 570, 571, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 596, 609, 611, 612, 617, 619, 627, 635, 641, 643, 652, 653, 654, 658, 662, 663, 664, 665, 667, 668, 674, 675, 676, 678, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 706, 720, 721, 722, 723, 724, 725, 726, 727, 728, 733, 736, 740, 743, 746, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 787, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802], "easi": [0, 25, 26, 39, 748, 749, 752, 753, 755, 764, 766, 769, 770, 773, 786, 793, 795, 801, 802], "follow": [0, 19, 20, 25, 26, 29, 30, 31, 37, 40, 41, 51, 52, 53, 55, 56, 62, 68, 74, 75, 76, 78, 79, 126, 159, 204, 214, 231, 238, 264, 266, 273, 274, 302, 341, 347, 350, 353, 369, 382, 427, 439, 444, 453, 455, 510, 511, 512, 541, 542, 565, 568, 570, 571, 572, 578, 579, 580, 581, 583, 584, 585, 586, 590, 594, 611, 612, 625, 631, 641, 671, 677, 696, 697, 698, 699, 724, 728, 742, 744, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 789, 792, 795, 798], "attract": 0, "visual": [0, 43, 740, 742, 748, 768, 770, 781, 795, 797, 800], "graph": [0, 3, 5, 14, 15, 18, 22, 23, 26, 32, 33, 38, 43, 44, 62, 594, 696, 697, 698, 699, 725, 726, 742, 755, 764, 768, 773, 776, 781, 783, 787, 788, 789, 790, 791, 795, 798], "nice": [0, 770, 787, 795], "format": [0, 22, 23, 25, 26, 37, 39, 40, 41, 49, 52, 64, 67, 68, 69, 72, 109, 154, 188, 347, 358, 388, 469, 495, 575, 579, 580, 583, 585, 596, 597, 598, 599, 601, 602, 603, 605, 606, 706, 716, 717, 742, 749, 750, 756, 757, 758, 759, 760, 761, 768, 771, 775, 777, 778, 790, 791, 793, 795, 796], "result": [0, 3, 5, 6, 7, 8, 10, 12, 25, 26, 37, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 143, 145, 170, 171, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 400, 401, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 418, 424, 427, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 495, 496, 497, 502, 503, 512, 519, 526, 527, 564, 565, 566, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 668, 671, 672, 674, 678, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 730, 740, 742, 745, 747, 749, 751, 752, 754, 755, 756, 757, 759, 760, 763, 764, 766, 767, 768, 769, 770, 771, 775, 778, 781, 789, 790, 796, 798], "etc": [0, 28, 33, 40, 47, 51, 60, 62, 66, 70, 74, 83, 89, 121, 129, 130, 133, 347, 354, 375, 380, 390, 459, 460, 462, 463, 578, 592, 594, 685, 686, 687, 688, 696, 697, 698, 699, 723, 724, 725, 726, 727, 728, 729, 747, 748, 749, 751, 752, 753, 754, 755, 757, 759, 761, 763, 768, 769, 770, 771, 775, 777, 778, 781, 783, 787, 789, 793, 795, 801], "gener": [0, 5, 14, 18, 25, 26, 28, 31, 39, 41, 43, 44, 47, 50, 51, 55, 60, 66, 70, 73, 74, 78, 83, 89, 118, 129, 130, 138, 146, 231, 234, 244, 245, 260, 264, 273, 295, 298, 302, 303, 304, 305, 306, 307, 341, 348, 354, 359, 409, 461, 473, 578, 579, 581, 585, 586, 588, 592, 596, 608, 632, 636, 639, 661, 685, 686, 688, 689, 711, 728, 736, 747, 748, 749, 750, 751, 752, 754, 757, 758, 759, 760, 761, 763, 764, 767, 768, 769, 771, 774, 775, 777, 779, 780, 781, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801], "tone": [0, 4], "feel": [0, 40, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 782, 789], "free": [0, 5, 39, 40, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 742, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 782, 789, 796, 798], "includ": [0, 14, 18, 28, 33, 47, 50, 51, 52, 56, 61, 64, 65, 68, 70, 73, 74, 75, 79, 84, 87, 88, 118, 119, 120, 129, 130, 132, 138, 211, 235, 239, 240, 241, 244, 246, 249, 257, 265, 278, 283, 297, 300, 301, 302, 307, 309, 311, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 329, 330, 331, 332, 335, 336, 341, 347, 350, 359, 365, 366, 367, 392, 395, 397, 430, 431, 433, 436, 438, 440, 443, 461, 463, 464, 472, 476, 478, 479, 481, 482, 508, 562, 578, 581, 583, 586, 590, 592, 593, 596, 597, 618, 639, 641, 665, 688, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 727, 738, 742, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 767, 768, 769, 770, 771, 773, 775, 786, 789, 790, 792, 793, 795, 797, 800, 801, 802], "emoji": [0, 747], "don": [0, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 39, 41, 66, 89, 742, 747, 748, 749, 756, 757, 758, 762, 766, 770, 773, 779, 781, 787, 789], "t": [0, 4, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 37, 39, 40, 41, 51, 55, 66, 74, 78, 89, 91, 93, 323, 338, 344, 346, 348, 396, 512, 530, 544, 566, 583, 584, 585, 590, 609, 610, 673, 724, 742, 744, 747, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 762, 764, 765, 766, 767, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 786, 787, 789, 790, 793, 795, 797], "keep": [0, 1, 10, 12, 16, 22, 23, 25, 51, 58, 68, 74, 81, 91, 334, 348, 411, 588, 660, 746, 747, 748, 749, 751, 753, 754, 755, 756, 761, 767, 768, 770, 771, 773, 778, 780, 782, 790], "thing": [0, 23, 37, 39, 736, 746, 747, 748, 749, 753, 768, 770, 773, 777, 778, 785, 786, 787, 795], "super": [0, 3, 5, 10, 12, 25, 26, 39, 51, 74, 348, 396, 742, 761, 775, 778, 779, 780, 790], "seriou": 0, "given": [0, 3, 16, 25, 38, 51, 52, 57, 58, 60, 68, 74, 75, 76, 80, 81, 83, 91, 93, 94, 118, 122, 129, 130, 149, 150, 151, 152, 153, 165, 170, 189, 198, 200, 202, 203, 204, 206, 210, 283, 309, 312, 316, 317, 323, 324, 325, 327, 330, 341, 344, 347, 348, 349, 350, 353, 354, 359, 365, 366, 367, 368, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 390, 396, 400, 413, 414, 415, 416, 417, 418, 426, 427, 428, 435, 437, 448, 452, 456, 457, 458, 459, 460, 461, 462, 463, 473, 474, 475, 476, 481, 503, 526, 527, 537, 564, 565, 568, 570, 571, 572, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 642, 643, 644, 645, 646, 649, 650, 651, 652, 654, 655, 659, 660, 672, 673, 682, 683, 686, 687, 688, 690, 702, 703, 704, 705, 720, 721, 723, 724, 726, 727, 728, 729, 730, 736, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 776, 777, 779, 786, 787, 792, 797, 798, 801, 802], "an": [0, 2, 3, 14, 15, 16, 18, 21, 23, 25, 26, 31, 37, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 156, 159, 162, 166, 170, 171, 201, 205, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 296, 297, 299, 300, 301, 303, 304, 307, 308, 309, 310, 311, 314, 317, 319, 324, 328, 333, 339, 341, 344, 347, 348, 349, 350, 353, 354, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 378, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 396, 397, 414, 418, 419, 420, 421, 424, 425, 427, 434, 438, 439, 444, 445, 450, 451, 453, 454, 455, 459, 460, 462, 465, 466, 471, 472, 473, 474, 475, 476, 477, 480, 483, 488, 490, 491, 499, 502, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 521, 527, 530, 531, 540, 544, 548, 549, 550, 563, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 671, 684, 686, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 742, 745, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 801, 802], "intern": [0, 68, 96, 97, 98, 590, 665, 675, 676, 723, 724, 725, 726, 727, 729, 752, 755, 758, 760, 767, 769, 770, 772], "releas": [0, 40, 747, 748, 757, 771, 773, 781, 787, 795, 801], "compil": [0, 3, 4, 5, 6, 7, 8, 14, 15, 19, 23, 29, 33, 42, 44, 282, 581, 725, 726, 728, 742, 755, 768, 771, 773, 774, 776, 781, 783, 788, 790, 791, 794, 795, 796, 799, 802], "i": [0, 3, 4, 5, 6, 7, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 171, 183, 185, 187, 188, 190, 191, 193, 195, 198, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 299, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 380, 382, 383, 384, 385, 386, 389, 390, 393, 394, 395, 396, 398, 399, 400, 402, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 427, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 522, 523, 526, 527, 528, 530, 536, 540, 541, 542, 544, 546, 548, 549, 550, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 722, 723, 724, 725, 726, 727, 728, 730, 733, 736, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802], "around": [0, 9, 10, 12, 14, 68, 94, 350, 439, 444, 749, 751, 752, 754, 758, 763, 764, 768, 771, 777, 781, 783, 789, 793, 795, 802], "corner": [0, 51, 74, 347, 382, 748, 749, 768], "anybodi": 0, "abl": [0, 3, 5, 27, 31, 42, 44, 68, 91, 748, 749, 751, 757, 764, 767, 768, 771, 775, 780, 789, 798, 801], "start": [0, 1, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 40, 41, 47, 51, 68, 70, 74, 78, 118, 126, 129, 130, 327, 337, 344, 345, 347, 350, 359, 389, 429, 432, 440, 442, 449, 481, 578, 722, 736, 742, 743, 747, 748, 749, 750, 756, 757, 759, 760, 762, 763, 768, 770, 773, 774, 775, 777, 778, 779, 781, 789, 790, 795, 801], "work": [0, 23, 25, 26, 37, 38, 40, 44, 51, 74, 91, 359, 482, 590, 672, 673, 677, 682, 683, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 767, 768, 769, 770, 771, 774, 775, 777, 779, 780, 782, 787, 789, 790, 793, 795, 797, 799, 802], "shortli": 0, "so": [0, 1, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 37, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 344, 357, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 585, 590, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 630, 631, 632, 634, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 676, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 789, 790, 795, 796, 797, 799], "worri": [0, 25, 26, 747, 748, 762], "about": [0, 14, 15, 16, 19, 21, 23, 25, 26, 29, 40, 41, 48, 71, 156, 159, 579, 742, 744, 746, 747, 748, 749, 750, 751, 754, 756, 757, 758, 762, 763, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 787, 796, 797, 800], "have": [0, 1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 37, 39, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 156, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 295, 296, 308, 313, 314, 322, 324, 326, 327, 328, 329, 333, 336, 339, 341, 344, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 384, 385, 388, 390, 391, 392, 393, 395, 396, 400, 401, 404, 405, 406, 407, 410, 412, 413, 414, 415, 416, 420, 421, 424, 425, 427, 432, 440, 441, 442, 443, 445, 448, 449, 456, 457, 458, 459, 460, 462, 463, 464, 466, 473, 474, 475, 476, 480, 483, 490, 491, 495, 496, 497, 502, 503, 512, 526, 527, 530, 564, 565, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 726, 727, 728, 729, 736, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 797, 801, 802], "access": [0, 22, 25, 26, 68, 742, 747, 748, 749, 756, 757, 762, 767, 768, 782, 790, 795, 797, 799], "transpil": [0, 6, 8, 9, 14, 15, 18, 28, 747, 761, 768, 774, 775, 776, 783, 788, 789, 795, 801, 802], "code": [0, 4, 6, 8, 14, 15, 22, 23, 25, 27, 28, 29, 30, 31, 32, 39, 40, 49, 50, 68, 72, 73, 94, 205, 251, 359, 480, 488, 496, 497, 512, 526, 530, 544, 580, 583, 585, 586, 588, 607, 626, 627, 628, 657, 740, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 765, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 802], "now": [0, 4, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 41, 724, 725, 726, 742, 748, 751, 752, 753, 754, 755, 756, 757, 758, 763, 765, 768, 769, 770, 771, 773, 777, 778, 780, 781, 787, 789, 790, 795], "you": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 74, 75, 91, 93, 94, 350, 359, 427, 480, 502, 503, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 611, 720, 721, 723, 724, 726, 727, 728, 729, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 795], "can": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 44, 47, 48, 51, 52, 56, 58, 60, 62, 70, 71, 74, 75, 79, 81, 83, 85, 91, 103, 106, 119, 120, 130, 132, 146, 185, 202, 203, 204, 289, 292, 302, 339, 341, 347, 348, 353, 354, 357, 359, 369, 382, 400, 405, 407, 410, 424, 453, 460, 461, 466, 473, 519, 530, 563, 566, 575, 578, 579, 580, 583, 584, 585, 586, 588, 592, 611, 617, 624, 634, 638, 653, 657, 686, 687, 688, 696, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 792, 793, 794, 795, 796, 798, 799, 801, 802], "style": [0, 39, 41, 350, 439, 593, 694, 749, 762, 795], "stori": 0, "If": [0, 1, 3, 4, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 40, 43, 44, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 171, 187, 203, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 308, 309, 312, 313, 314, 316, 317, 318, 320, 324, 325, 330, 331, 333, 335, 336, 337, 341, 344, 345, 347, 348, 349, 350, 353, 354, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 380, 382, 383, 384, 385, 390, 394, 396, 398, 399, 400, 405, 407, 409, 410, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 427, 429, 430, 431, 434, 438, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 518, 519, 526, 527, 531, 541, 542, 544, 546, 548, 549, 562, 563, 566, 568, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 608, 609, 611, 612, 613, 614, 616, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 677, 678, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 722, 723, 724, 726, 727, 733, 742, 743, 744, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 777, 778, 780, 781, 782, 785, 789, 790], "anyon": [0, 742, 743, 749, 756, 781, 786, 801], "ha": [0, 3, 5, 7, 10, 12, 16, 18, 22, 25, 26, 28, 31, 33, 37, 44, 47, 51, 56, 58, 62, 64, 68, 71, 74, 75, 79, 81, 85, 87, 91, 131, 187, 211, 231, 234, 236, 238, 248, 264, 266, 269, 271, 274, 276, 277, 281, 309, 310, 341, 347, 349, 350, 359, 382, 414, 423, 446, 447, 450, 472, 474, 475, 477, 508, 578, 580, 581, 585, 586, 588, 593, 594, 596, 611, 624, 625, 633, 634, 636, 638, 641, 649, 656, 694, 697, 698, 699, 704, 705, 708, 710, 711, 712, 713, 722, 733, 747, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 785, 786, 787, 789, 791, 794, 795, 797, 798, 801], "ani": [0, 5, 10, 12, 14, 15, 16, 17, 18, 27, 28, 31, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 52, 56, 65, 66, 70, 72, 73, 74, 75, 88, 89, 91, 93, 94, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 146, 147, 162, 166, 170, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 292, 296, 307, 308, 314, 317, 339, 341, 344, 347, 348, 350, 353, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 390, 396, 400, 428, 439, 453, 454, 455, 473, 476, 479, 480, 484, 494, 495, 496, 497, 498, 502, 506, 508, 510, 514, 516, 517, 535, 542, 549, 550, 557, 563, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 671, 672, 674, 675, 682, 684, 688, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 723, 724, 726, 727, 728, 729, 733, 736, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 793, 794, 795, 796, 798, 801, 802], "question": [0, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787], "ping": 0, "me": [0, 749], "guillermo": 0, "commun": [0, 40, 743, 747, 748, 749, 781, 786, 794, 795, 797], "ux": 0, "team": [0, 742, 743, 747, 748, 749, 768, 782, 797], "discord": [0, 40, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 782, 785, 786, 787], "channel": [0, 23, 41, 51, 52, 55, 74, 75, 78, 93, 94, 347, 353, 370, 371, 372, 382, 453, 454, 455, 495, 499, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 720, 721, 723, 724, 726, 727, 728, 729, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773], "To": [0, 7, 10, 12, 16, 25, 26, 37, 40, 41, 42, 238, 349, 414, 536, 581, 583, 723, 747, 748, 751, 752, 753, 754, 757, 759, 761, 762, 764, 765, 768, 769, 770, 771, 778, 779, 780, 782, 789, 790], "ensur": [0, 10, 12, 23, 51, 52, 74, 75, 347, 348, 383, 384, 385, 409, 512, 583, 742, 747, 748, 749, 752, 757, 758, 759, 761, 762, 763, 765, 767, 768, 769, 770, 771, 782, 795], "similar": [0, 16, 25, 26, 273, 581, 585, 611, 724, 745, 747, 748, 755, 756, 757, 758, 761, 762, 764, 765, 766, 768, 769, 770, 771, 778, 781, 785, 790, 791, 792, 793, 794, 801], "ar": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 43, 46, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 68, 70, 73, 74, 75, 78, 79, 81, 83, 84, 85, 91, 93, 94, 118, 128, 130, 133, 138, 192, 197, 199, 204, 228, 230, 231, 234, 238, 259, 260, 264, 269, 270, 274, 276, 281, 282, 283, 307, 309, 310, 312, 313, 315, 316, 317, 319, 320, 325, 330, 333, 337, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 362, 363, 369, 370, 371, 372, 375, 380, 382, 390, 395, 396, 399, 407, 408, 409, 411, 412, 415, 419, 420, 421, 429, 430, 431, 433, 439, 442, 444, 446, 453, 455, 459, 460, 461, 462, 463, 473, 478, 479, 480, 481, 482, 484, 487, 488, 489, 498, 504, 509, 513, 524, 525, 534, 544, 556, 566, 578, 580, 581, 583, 584, 585, 586, 588, 590, 592, 593, 594, 608, 609, 611, 612, 614, 618, 619, 620, 624, 625, 627, 630, 634, 635, 639, 640, 641, 646, 647, 650, 654, 656, 666, 671, 676, 677, 678, 686, 687, 688, 691, 692, 693, 694, 696, 698, 722, 723, 726, 729, 730, 736, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802], "across": [0, 37, 61, 68, 75, 84, 93, 202, 203, 231, 238, 264, 282, 353, 455, 487, 508, 543, 580, 581, 583, 585, 590, 593, 608, 611, 671, 691, 692, 724, 747, 751, 757, 759, 761, 763, 764, 766, 770, 773, 793, 795, 800], "templat": [0, 742, 754, 760, 770], "help": [0, 14, 41, 43, 485, 530, 583, 596, 712, 723, 742, 743, 747, 748, 752, 753, 754, 755, 756, 757, 759, 762, 764, 765, 767, 768, 770, 771, 777, 778, 779, 782, 783, 791, 795, 797, 801], "get": [0, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 39, 40, 42, 49, 56, 68, 72, 79, 93, 154, 155, 156, 159, 187, 188, 189, 192, 198, 203, 206, 210, 486, 504, 525, 543, 579, 580, 583, 586, 590, 641, 667, 722, 723, 724, 736, 742, 743, 746, 747, 748, 750, 751, 756, 757, 758, 764, 765, 766, 767, 768, 769, 770, 775, 776, 777, 778, 779, 783, 787, 790, 795, 801], "It": [0, 3, 17, 25, 26, 27, 28, 37, 38, 39, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 143, 145, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 295, 296, 308, 313, 314, 322, 324, 326, 327, 328, 329, 333, 339, 341, 344, 347, 348, 349, 350, 353, 354, 359, 360, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 384, 385, 388, 391, 392, 393, 400, 401, 404, 405, 406, 407, 412, 413, 414, 415, 416, 424, 427, 432, 440, 441, 442, 443, 445, 449, 453, 456, 457, 458, 459, 460, 462, 463, 473, 474, 475, 476, 483, 490, 491, 495, 496, 497, 502, 503, 512, 526, 527, 528, 564, 565, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 633, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 664, 665, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 699, 700, 703, 704, 705, 708, 710, 711, 713, 714, 715, 723, 724, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 765, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 788, 790, 793, 795, 796, 798, 799, 800, 801, 802], "locat": [0, 41, 133, 359, 474, 578, 590, 592, 595, 669, 685, 702, 747, 749, 753, 754, 758, 768, 769, 770, 771, 782, 793], "asset": [0, 783], "01_templat": 0, "ipynb": 0, "pleas": [0, 31, 40, 44, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 782, 785, 786, 787], "make": [0, 3, 5, 6, 7, 8, 17, 25, 26, 27, 39, 43, 733, 742, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 780, 782, 786, 787, 790, 793, 795, 796, 797, 798, 801, 802], "copi": [0, 41, 44, 47, 48, 49, 50, 51, 52, 58, 68, 70, 71, 72, 73, 74, 75, 81, 91, 92, 119, 120, 121, 125, 143, 205, 265, 350, 417, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 505, 531, 541, 548, 549, 578, 579, 580, 581, 583, 588, 590, 595, 649, 650, 651, 653, 655, 656, 658, 660, 666, 701, 703, 748, 749, 751, 753, 756, 757, 760, 768, 769, 775, 781, 789, 790], "firstli": [0, 17, 18, 21, 27, 28, 32, 37, 752, 757, 759, 760, 761, 764, 765, 767, 773, 778, 791, 801], "updat": [0, 4, 5, 6, 8, 19, 25, 26, 39, 41, 46, 52, 53, 68, 75, 76, 91, 512, 526, 527, 530, 531, 553, 564, 565, 568, 570, 571, 572, 583, 584, 585, 589, 590, 608, 610, 662, 663, 664, 672, 673, 677, 682, 683, 721, 727, 728, 733, 742, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 759, 763, 765, 766, 768, 769, 770, 773, 775, 777, 778, 780, 781], "file": [0, 39, 40, 41, 52, 68, 539, 561, 583, 726, 747, 748, 749, 751, 752, 753, 754, 755, 756, 758, 760, 761, 762, 764, 768, 769, 770, 771, 775, 778, 782, 791, 794, 795, 796], "name": [0, 6, 25, 26, 37, 39, 40, 41, 51, 56, 62, 66, 79, 85, 89, 238, 348, 350, 395, 448, 450, 485, 486, 581, 583, 586, 594, 618, 619, 623, 631, 632, 634, 639, 696, 697, 698, 726, 733, 735, 747, 748, 749, 753, 754, 755, 756, 759, 760, 761, 763, 768, 769, 770, 771, 772, 773, 775, 778, 780, 795], "match": [0, 48, 51, 68, 71, 74, 143, 238, 273, 315, 317, 344, 347, 350, 390, 423, 444, 447, 522, 579, 581, 583, 586, 619, 620, 625, 641, 745, 747, 752, 754, 755, 759, 769, 796, 801], "topic": [0, 14, 17, 18, 19, 27, 28, 29, 30, 31, 32, 765, 777, 795], "your": [0, 2, 3, 4, 6, 8, 10, 12, 14, 15, 16, 18, 19, 22, 25, 26, 29, 37, 39, 41, 43, 742, 743, 745, 746, 747, 748, 751, 753, 754, 756, 760, 762, 766, 768, 771, 773, 778, 779, 781, 782, 786, 787, 789, 790, 795], "Then": [0, 44, 585, 611, 744, 747, 748, 749, 753, 754, 756, 762, 765, 767, 770, 771, 781], "place": [0, 39, 46, 47, 50, 51, 52, 56, 58, 68, 70, 72, 73, 74, 75, 79, 81, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 146, 162, 166, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 295, 296, 299, 307, 308, 312, 314, 317, 318, 322, 324, 325, 326, 327, 329, 330, 331, 335, 336, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 429, 439, 444, 460, 473, 476, 480, 488, 496, 497, 502, 506, 508, 510, 511, 512, 526, 530, 544, 549, 553, 573, 578, 579, 580, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 726, 728, 742, 746, 749, 750, 751, 754, 755, 756, 758, 759, 760, 763, 764, 768, 769, 770, 771, 773, 780, 783, 797], "its": [0, 8, 16, 18, 25, 26, 28, 31, 38, 39, 41, 46, 48, 51, 58, 68, 71, 74, 75, 81, 103, 106, 109, 115, 144, 149, 150, 151, 152, 153, 204, 231, 264, 283, 289, 339, 347, 350, 359, 386, 450, 476, 499, 547, 575, 577, 579, 580, 581, 583, 586, 588, 590, 624, 649, 653, 654, 658, 671, 722, 742, 747, 748, 752, 755, 756, 757, 758, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 780, 781, 783, 789, 794, 795, 801], "folder": [0, 41, 742, 748, 749, 751, 754, 756, 764, 768, 770, 771, 772], "next": [0, 5, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 39, 41, 51, 74, 156, 322, 326, 331, 335, 344, 579, 723, 725, 726, 728, 747, 748, 749, 753, 757, 759, 760, 762, 765, 776, 777, 778, 787, 795, 797], "edit": [0, 747, 748, 749, 762], "titl": [0, 11, 13, 24, 40, 43, 742, 747, 749, 754], "descript": [0, 1, 34, 35, 36, 41, 44, 47, 50, 51, 56, 73, 74, 79, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 308, 314, 317, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 439, 473, 476, 502, 506, 508, 510, 549, 573, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 747, 749, 760, 766, 767], "accordingli": [0, 56, 61, 62, 64, 65, 79, 84, 87, 88, 131, 231, 236, 238, 254, 264, 278, 578, 581, 586, 593, 594, 596, 597, 641, 692, 696, 697, 698, 699, 707, 708, 709, 710, 711, 712, 713, 714, 715, 768, 775, 782], "thei": [0, 32, 37, 42, 51, 56, 60, 62, 68, 79, 83, 85, 169, 283, 320, 344, 579, 581, 586, 589, 592, 594, 639, 662, 663, 685, 696, 729, 742, 746, 747, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 775, 777, 778, 779, 780, 781, 789, 792, 795, 797, 798, 801, 802], "render": [0, 754, 760], "correctli": [0, 22, 25, 26, 39, 51, 56, 61, 74, 79, 84, 316, 344, 359, 479, 480, 481, 482, 586, 593, 625, 691, 747, 748, 749, 752, 755, 757, 759, 761, 762, 763, 769, 770, 773, 779, 781, 789, 790], "webpag": [0, 14], "content": [0, 1, 11, 13, 24, 25, 40, 41, 51, 68, 74, 359, 480, 747, 749, 754, 758, 767, 775, 778, 782], "behind": [0, 16, 25, 742, 750, 763, 770, 774, 776], "exist": [0, 16, 25, 26, 39, 40, 41, 44, 47, 51, 52, 68, 70, 74, 75, 81, 120, 350, 419, 420, 424, 425, 427, 429, 430, 431, 438, 451, 494, 530, 583, 588, 647, 649, 650, 651, 653, 655, 656, 658, 660, 728, 730, 742, 747, 748, 751, 753, 758, 759, 760, 764, 765, 767, 768, 770, 773, 775, 781, 783, 785, 786, 793, 795, 798, 801], "cell": [0, 1, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 40, 55, 78, 585, 610, 724, 756, 775], "where": [0, 6, 18, 22, 28, 29, 33, 41, 47, 50, 51, 52, 56, 58, 60, 61, 64, 65, 68, 70, 73, 74, 75, 79, 81, 83, 84, 87, 88, 91, 127, 128, 131, 133, 138, 219, 229, 231, 234, 236, 238, 239, 248, 253, 254, 255, 262, 263, 264, 269, 271, 275, 277, 281, 287, 289, 307, 309, 310, 321, 325, 332, 339, 341, 344, 347, 348, 349, 350, 353, 354, 359, 361, 362, 363, 369, 374, 375, 379, 395, 396, 399, 400, 402, 408, 411, 412, 419, 420, 421, 433, 439, 453, 454, 455, 459, 460, 462, 463, 473, 481, 482, 512, 526, 563, 578, 581, 583, 585, 586, 588, 590, 592, 593, 596, 597, 611, 614, 618, 619, 623, 625, 627, 629, 630, 631, 634, 635, 638, 640, 646, 648, 649, 651, 657, 661, 669, 676, 685, 686, 687, 688, 693, 694, 711, 713, 714, 715, 723, 727, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 757, 758, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 778, 779, 780, 781, 782, 785, 786, 787, 789, 793, 802], "The": [0, 3, 5, 6, 7, 8, 14, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 125, 126, 128, 130, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 163, 164, 165, 168, 169, 171, 172, 174, 175, 176, 177, 183, 184, 185, 186, 187, 189, 190, 191, 192, 197, 198, 199, 200, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 435, 438, 439, 444, 445, 447, 448, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 464, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 521, 523, 526, 527, 530, 532, 533, 536, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 733, 736, 742, 743, 744, 745, 747, 748, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 771, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 787, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802], "h2": [0, 1, 11, 13, 24], "tag": [0, 1, 11, 13, 24, 748, 749], "section": [0, 1, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 45, 51, 62, 74, 103, 347, 350, 380, 390, 425, 434, 451, 594, 696, 697, 698, 699, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 778, 779, 791, 798, 801], "h3": [0, 1, 11, 13, 24], "subsect": [0, 1, 11, 13, 24, 747, 748, 749, 751, 756], "step": [0, 1, 11, 12, 13, 24, 25, 26, 37, 39, 40, 41, 51, 53, 70, 74, 76, 118, 129, 350, 433, 564, 565, 568, 570, 571, 572, 578, 584, 589, 662, 663, 664, 722, 728, 742, 747, 748, 749, 752, 753, 755, 756, 757, 758, 759, 766, 768, 770, 775, 778, 779, 780, 787, 795], "explan": [0, 1, 11, 13, 24, 747, 748, 749, 755, 760, 763, 768, 771, 777], "go": [0, 4, 10, 12, 16, 23, 26, 31, 46, 51, 78, 347, 389, 590, 665, 666, 675, 676, 677, 742, 743, 745, 747, 748, 749, 750, 753, 754, 756, 757, 759, 762, 768, 769, 770, 771, 774, 778, 781, 791, 795, 796, 800, 802], "default": [0, 3, 5, 25, 26, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 163, 164, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 187, 188, 190, 191, 195, 198, 199, 200, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 512, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 536, 540, 541, 542, 544, 546, 548, 549, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 672, 673, 675, 676, 677, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 736, 747, 748, 749, 753, 754, 757, 758, 759, 760, 761, 763, 764, 768, 770, 773, 775, 779, 783, 789, 795], "which": [0, 3, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 146, 148, 154, 156, 159, 161, 164, 171, 183, 188, 192, 197, 199, 202, 203, 204, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 295, 296, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 322, 324, 325, 326, 327, 329, 330, 331, 333, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 357, 359, 369, 370, 371, 372, 374, 375, 379, 380, 389, 390, 393, 396, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 424, 444, 445, 446, 447, 448, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 485, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 518, 519, 524, 525, 526, 527, 541, 542, 544, 546, 548, 549, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 608, 609, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 631, 632, 633, 634, 638, 640, 641, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 660, 661, 670, 671, 672, 673, 678, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 738, 742, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 802], "text": [0, 4, 39, 51, 52, 348, 407, 747, 749, 754, 759, 760], "paragraph": [0, 1, 11, 13, 24, 754], "p": [0, 1, 11, 13, 24, 37, 51, 52, 56, 74, 75, 79, 131, 235, 348, 353, 392, 458, 490, 491, 578, 581, 583, 586, 590, 625, 641, 673, 724, 742, 748, 749, 750], "without": [0, 3, 28, 37, 41, 44, 62, 68, 536, 550, 583, 588, 590, 594, 653, 666, 696, 697, 698, 699, 736, 749, 752, 753, 755, 756, 757, 758, 759, 761, 763, 764, 768, 770, 771, 773, 777, 778, 779, 781, 789, 792, 795, 796, 797, 801], "path": [0, 40, 41, 732, 748, 754, 767, 768, 769, 782, 795], "correspond": [0, 3, 6, 8, 12, 25, 26, 40, 48, 50, 51, 52, 55, 58, 61, 62, 64, 68, 71, 73, 74, 78, 81, 87, 91, 94, 144, 156, 159, 219, 269, 283, 309, 319, 320, 341, 344, 347, 348, 350, 353, 359, 369, 375, 386, 390, 392, 395, 396, 397, 430, 431, 444, 453, 454, 455, 474, 475, 541, 563, 579, 581, 583, 585, 586, 588, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 614, 618, 619, 625, 632, 633, 653, 654, 685, 691, 692, 696, 697, 698, 699, 704, 705, 710, 711, 712, 713, 736, 742, 747, 749, 752, 753, 755, 756, 757, 759, 760, 761, 763, 764, 766, 768, 770, 773, 775, 789, 790, 795], "toctre": [0, 754], "index": [0, 39, 40, 41, 44, 47, 51, 52, 58, 61, 62, 63, 68, 70, 74, 75, 81, 84, 85, 86, 124, 131, 200, 296, 303, 304, 309, 310, 341, 347, 348, 350, 355, 357, 359, 369, 375, 400, 402, 407, 423, 429, 432, 440, 442, 444, 447, 449, 464, 465, 474, 482, 485, 503, 505, 526, 527, 531, 576, 578, 580, 583, 588, 590, 593, 594, 595, 653, 657, 667, 668, 669, 672, 673, 674, 680, 682, 691, 692, 694, 696, 697, 698, 700, 702, 724, 738, 755, 756, 761, 764, 765, 766, 767, 769, 770, 777, 795], "rst": [0, 764], "left": [0, 18, 28, 39, 40, 51, 56, 61, 63, 74, 79, 84, 86, 112, 113, 223, 238, 316, 330, 337, 344, 345, 347, 348, 350, 359, 381, 395, 399, 403, 409, 410, 430, 440, 478, 479, 480, 481, 482, 495, 577, 581, 583, 586, 593, 595, 618, 619, 625, 634, 639, 691, 702, 748, 749, 751, 754, 756, 757, 759], "mai": [0, 49, 50, 51, 56, 62, 63, 72, 73, 79, 86, 93, 94, 118, 125, 205, 231, 232, 238, 243, 251, 259, 260, 264, 265, 267, 282, 375, 494, 530, 578, 580, 581, 583, 586, 594, 595, 596, 632, 641, 696, 697, 698, 699, 700, 703, 707, 708, 709, 711, 746, 747, 748, 749, 751, 755, 756, 757, 761, 764, 765, 766, 768, 769, 770, 773, 776, 777, 779, 787, 802], "need": [0, 3, 6, 8, 14, 16, 22, 23, 25, 26, 39, 40, 41, 51, 52, 58, 74, 75, 81, 347, 348, 359, 369, 374, 375, 379, 395, 480, 490, 491, 512, 583, 585, 586, 588, 590, 611, 618, 646, 649, 676, 742, 744, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 773, 775, 777, 778, 781, 782, 787, 789, 790, 791, 795, 796, 797, 801], "add": [0, 18, 28, 41, 43, 50, 51, 59, 66, 68, 73, 74, 82, 89, 93, 94, 337, 345, 347, 389, 522, 550, 581, 583, 586, 591, 596, 638, 684, 712, 724, 727, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764, 765, 767, 768, 770, 771, 773, 775, 777, 781, 782, 791, 793, 795], "grid": [0, 41, 47, 131, 299, 341, 578, 759, 770], "item": [0, 4, 25, 26, 37, 39, 41, 46, 52, 66, 68, 70, 73, 74, 75, 126, 150, 187, 241, 257, 265, 317, 319, 332, 492, 502, 503, 507, 541, 542, 578, 579, 580, 583, 590, 597, 670, 671, 672, 673, 677, 682, 683, 717, 725, 726, 742, 747, 755, 757, 775, 777, 778, 780, 789], "card": [0, 51, 74, 334, 344, 800], "refer": [0, 5, 51, 58, 64, 65, 74, 76, 81, 87, 88, 124, 138, 236, 254, 296, 307, 332, 341, 344, 347, 348, 350, 375, 380, 390, 393, 411, 429, 564, 565, 578, 581, 584, 586, 588, 596, 597, 614, 616, 640, 653, 711, 713, 714, 715, 724, 742, 746, 747, 748, 749, 751, 752, 754, 756, 757, 763, 764, 765, 766, 767, 768, 769, 770, 781, 782, 783, 795], "also": [0, 3, 4, 6, 8, 10, 12, 16, 18, 20, 21, 23, 25, 26, 28, 30, 31, 32, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 159, 162, 163, 164, 166, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 347, 348, 350, 357, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 386, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 578, 579, 581, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 675, 676, 677, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 733, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 778, 779, 780, 781, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 801, 802], "look": [0, 5, 16, 25, 26, 39, 41, 44, 742, 747, 748, 749, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 775, 777, 779, 780, 782, 785, 789, 791, 795], "document": [0, 16, 25, 58, 238, 563, 581, 583, 657, 743, 744, 746, 749, 754, 756, 757, 759, 767, 768, 769, 770, 778, 780], "sphinx": [0, 744, 754], "design": [0, 16, 25, 74, 238, 295, 300, 301, 341, 581, 742, 750, 754, 756, 757, 767, 768, 769, 773, 775, 777, 781, 785, 786, 791, 793, 795, 798, 799, 800], "websit": [0, 43, 748, 751, 786], "alreadi": [1, 17, 21, 23, 25, 26, 31, 39, 41, 44, 51, 56, 68, 74, 79, 227, 237, 264, 274, 284, 350, 359, 420, 421, 439, 471, 480, 581, 586, 621, 629, 736, 742, 747, 748, 749, 753, 755, 757, 758, 763, 767, 768, 773, 781, 782, 795, 797, 802], "instal": [1, 5, 6, 8, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 39, 41, 42, 43, 44, 744, 748, 749, 753, 754, 762], "skip": [1, 4, 41, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 348, 350, 370, 371, 372, 400, 402, 407, 412, 413, 415, 416, 419, 420, 421, 424, 440, 443, 445, 447, 448, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 590, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 736, 754, 764, 770], "colab": [1, 4, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 39, 41, 43, 44], "manual": [1, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 590, 665, 675, 676, 747, 748, 749, 757, 762, 770, 779, 782], "do": [1, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 37, 39, 41, 51, 52, 68, 74, 75, 231, 264, 273, 350, 359, 424, 480, 482, 512, 581, 583, 590, 665, 672, 675, 676, 677, 682, 742, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 775, 777, 778, 779, 780, 781, 783, 787, 796, 801, 802], "run": [1, 3, 4, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 39, 41, 42, 43, 51, 53, 74, 76, 353, 453, 455, 564, 565, 570, 584, 589, 662, 663, 664, 724, 725, 726, 727, 736, 742, 744, 747, 748, 750, 752, 753, 756, 758, 759, 761, 762, 763, 765, 768, 769, 775, 776, 777, 778, 779, 780, 781, 782, 789, 790, 793, 795, 796, 797, 798, 800, 801, 802], "below": [1, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 32, 37, 40, 41, 42, 47, 51, 56, 79, 87, 136, 137, 138, 238, 248, 271, 307, 308, 314, 341, 344, 578, 581, 586, 617, 638, 713, 742, 743, 747, 748, 750, 751, 755, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 789, 790, 791, 793, 798, 800], "mind": [1, 10, 12, 16, 22, 25, 29, 747, 752, 753, 755, 770, 782, 790], "packag": [1, 3, 5, 7, 10, 26, 39, 40, 41, 44, 735, 742, 745, 748, 756, 768, 781, 782, 795, 797], "avail": [1, 3, 5, 7, 25, 26, 41, 52, 75, 187, 193, 195, 196, 207, 350, 444, 496, 580, 583, 742, 748, 749, 755, 756, 757, 758, 760, 761, 768, 770, 773, 781, 782, 785, 789, 790, 800, 801], "click": [1, 3, 41, 747, 748, 749, 756, 760, 762, 776], "runtim": [1, 3, 4, 5, 6, 7, 8, 18, 25, 28, 39, 40, 750, 764, 770, 773, 795], "restart": [1, 3, 4, 5, 7, 39, 40, 748], "pip": [1, 3, 4, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 43, 44, 745, 748, 754, 762], "q": [1, 3, 4, 5, 6, 7, 8, 39, 40, 41, 51, 55, 56, 74, 78, 79, 336, 344, 348, 359, 395, 482, 585, 586, 590, 612, 618, 619, 631, 673, 748, 749, 750, 769, 781], "git": [1, 3, 4, 5, 7, 25, 39, 40, 41, 42, 742, 744, 746, 748, 749, 751, 754, 756, 762, 770, 782], "clone": [1, 3, 5, 7, 25, 39, 41, 42, 742, 744, 749, 782], "http": [1, 3, 4, 5, 6, 7, 8, 12, 22, 25, 26, 39, 40, 41, 42, 43, 44, 50, 73, 76, 138, 146, 234, 244, 245, 260, 307, 341, 359, 473, 564, 565, 578, 579, 581, 584, 586, 588, 596, 632, 661, 711, 742, 744, 748, 749, 751, 754, 756, 757, 760, 782, 790], "github": [1, 3, 4, 5, 7, 25, 39, 40, 41, 42, 43, 742, 744, 746, 749, 751, 756, 757, 759, 760, 762, 770, 782, 785], "com": [1, 3, 4, 5, 7, 12, 25, 39, 40, 41, 42, 43, 742, 744, 748, 749, 751, 754, 756, 757, 782], "unifyai": [1, 3, 5, 7, 25, 39, 40, 41, 42, 43, 742, 744, 748, 749, 754, 782], "model": [1, 2, 3, 9, 14, 15, 16, 42, 44, 51, 231, 264, 349, 412, 581, 742, 778, 779, 783, 789, 790, 793, 794, 795, 796, 797, 798, 799, 801, 802], "depth": [1, 3, 5, 7, 40, 47, 51, 55, 70, 74, 78, 133, 347, 350, 382, 426, 495, 507, 578, 583, 585, 590, 603, 604, 677, 722, 726, 749, 756, 778, 779, 780, 782], "1": [1, 3, 4, 5, 6, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 143, 144, 145, 146, 150, 154, 155, 156, 159, 164, 166, 171, 187, 188, 192, 196, 197, 199, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 524, 526, 527, 531, 540, 541, 542, 543, 544, 546, 548, 549, 550, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 722, 723, 724, 725, 726, 727, 728, 729, 733, 736, 742, 745, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 770, 773, 774, 775, 777, 778, 779, 780, 781, 786, 787, 789, 790], "from": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 91, 94, 118, 120, 123, 125, 126, 127, 128, 131, 132, 135, 138, 140, 146, 164, 170, 171, 187, 192, 197, 203, 204, 230, 238, 239, 266, 270, 271, 278, 282, 295, 296, 302, 307, 309, 310, 315, 318, 320, 321, 323, 324, 336, 341, 344, 347, 348, 350, 354, 359, 370, 371, 372, 386, 390, 403, 409, 412, 423, 425, 434, 439, 445, 447, 450, 451, 459, 460, 461, 462, 463, 474, 475, 494, 502, 503, 505, 525, 536, 546, 563, 565, 566, 570, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 596, 597, 599, 607, 608, 614, 617, 634, 638, 639, 640, 647, 650, 653, 656, 662, 663, 664, 666, 677, 678, 679, 685, 686, 687, 688, 692, 695, 696, 698, 704, 705, 710, 711, 712, 713, 714, 715, 721, 722, 723, 724, 726, 728, 733, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802], "repositori": [1, 3, 5, 7, 744, 748, 749, 750, 751, 754, 787], "cd": [1, 3, 5, 7, 25, 42, 742, 744, 748, 749, 782], "here": [1, 3, 11, 13, 16, 21, 24, 25, 26, 37, 39, 40, 41, 42, 44, 74, 274, 416, 581, 742, 745, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 759, 762, 763, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 789, 790, 795, 796], "normal": [1, 3, 7, 10, 11, 12, 13, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 51, 59, 60, 74, 82, 83, 91, 333, 344, 347, 353, 359, 368, 369, 374, 375, 378, 379, 380, 390, 453, 454, 455, 456, 457, 458, 473, 476, 588, 591, 592, 647, 657, 684, 685, 687, 723, 724, 727, 742, 747, 767, 768, 773, 778, 789, 793], "resnet": [2, 8, 14, 25, 789, 790], "imag": [2, 3, 6, 8, 10, 14, 22, 25, 26, 39, 40, 41, 42, 43, 44, 50, 51, 55, 73, 74, 78, 93, 211, 212, 213, 214, 217, 220, 229, 232, 234, 236, 245, 246, 247, 252, 254, 267, 274, 275, 277, 278, 282, 347, 365, 366, 382, 383, 384, 386, 495, 581, 583, 585, 598, 599, 600, 601, 602, 605, 606, 607, 724, 742, 748, 773, 775, 776, 778, 780, 782, 789, 790, 795], "classif": [2, 3, 7, 14, 39, 742, 795], "acceler": [2, 14, 742, 757, 768, 793, 797, 798, 799, 800], "pytorch": [2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 23, 25, 26, 37, 44, 274, 581, 728, 742, 746, 747, 752, 757, 758, 761, 763, 764, 767, 768, 769, 773, 775, 780, 781, 783, 786, 787, 789, 790, 796, 798, 799, 801, 802], "jax": [2, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 31, 37, 39, 43, 45, 50, 51, 52, 62, 67, 73, 75, 101, 103, 106, 108, 109, 282, 323, 344, 359, 482, 512, 544, 563, 575, 581, 583, 594, 696, 697, 698, 699, 720, 733, 742, 745, 746, 747, 748, 749, 751, 753, 757, 758, 761, 763, 766, 767, 768, 769, 770, 771, 773, 775, 777, 780, 781, 786, 787, 789, 790, 796, 798, 801, 802], "convert": [2, 5, 6, 8, 10, 12, 14, 15, 17, 19, 22, 23, 25, 26, 27, 29, 31, 39, 42, 44, 46, 47, 50, 68, 69, 70, 73, 91, 119, 120, 132, 141, 142, 184, 185, 186, 187, 198, 206, 210, 230, 270, 350, 355, 419, 420, 421, 464, 528, 545, 547, 548, 549, 551, 578, 579, 580, 581, 583, 586, 590, 642, 666, 677, 678, 733, 736, 742, 747, 752, 753, 765, 766, 768, 770, 772, 775, 781, 783, 787, 790, 793, 794, 801], "them": [2, 3, 6, 8, 10, 12, 14, 25, 26, 31, 489, 525, 583, 724, 742, 744, 747, 749, 751, 752, 753, 754, 755, 756, 757, 761, 762, 765, 767, 768, 769, 770, 772, 775, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 797, 801], "faster": [2, 3, 6, 8, 14, 25, 26, 42, 44, 51, 56, 74, 79, 348, 410, 586, 634, 746, 783, 797, 800], "infer": [2, 6, 8, 14, 18, 28, 30, 31, 40, 42, 44, 47, 51, 52, 55, 58, 70, 74, 75, 78, 81, 118, 120, 123, 127, 128, 132, 135, 140, 149, 150, 151, 152, 153, 295, 296, 354, 461, 506, 540, 578, 579, 583, 585, 588, 608, 653, 733, 750, 753, 757, 758, 770, 775, 780, 790, 793, 794, 797, 799], "mmpretrain": [2, 14], "segment": [2, 14, 51, 74, 309, 310, 341, 754, 759], "unet": [2, 14], "alexnet": [2, 14], "In": [2, 3, 4, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 44, 49, 51, 52, 58, 72, 75, 81, 91, 198, 205, 206, 210, 214, 231, 232, 238, 246, 247, 264, 267, 273, 275, 347, 350, 353, 370, 371, 372, 419, 420, 421, 425, 427, 429, 430, 431, 432, 434, 438, 445, 451, 453, 455, 485, 505, 512, 530, 580, 581, 583, 586, 588, 592, 632, 649, 650, 651, 653, 655, 656, 658, 660, 688, 742, 747, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 785, 787, 789, 790, 791, 793, 795, 796, 798, 801], "we": [2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 42, 43, 44, 51, 56, 57, 58, 66, 74, 79, 80, 89, 91, 109, 338, 346, 350, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 448, 451, 495, 505, 544, 566, 567, 569, 574, 575, 583, 584, 586, 587, 588, 627, 643, 649, 650, 651, 653, 655, 656, 658, 660, 720, 722, 726, 733, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 795, 796, 800, 801], "show": [2, 3, 4, 7, 14, 20, 25, 26, 27, 28, 30, 37, 39, 41, 42, 529, 538, 560, 583, 722, 742, 747, 748, 749, 754, 756, 759, 762, 767, 768, 770, 772, 781, 789, 795], "how": [2, 3, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 37, 40, 43, 44, 45, 50, 51, 67, 73, 74, 101, 103, 106, 108, 109, 231, 264, 282, 350, 423, 444, 447, 575, 581, 720, 722, 723, 724, 725, 726, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 785, 787, 791, 795], "written": [2, 3, 4, 14, 16, 25, 26, 39, 52, 742, 748, 751, 752, 760, 762, 763, 767, 768, 771, 775, 777, 780, 781, 785, 790, 793, 795, 799, 801, 802], "nativ": [3, 4, 16, 25, 26, 46, 47, 49, 52, 69, 72, 75, 93, 97, 132, 141, 142, 148, 149, 150, 151, 152, 153, 167, 170, 185, 186, 187, 188, 198, 206, 210, 512, 514, 518, 525, 530, 547, 578, 579, 580, 583, 721, 733, 742, 745, 747, 753, 757, 758, 761, 764, 765, 767, 768, 769, 770, 775, 777, 778, 783, 789, 790, 793, 802], "integr": [3, 4, 10, 12, 19, 26, 29, 48, 50, 51, 71, 73, 74, 143, 283, 329, 344, 359, 476, 579, 581, 742, 746, 748, 750, 765, 790, 793, 795, 797, 798, 799], "three": [3, 4, 14, 20, 30, 31, 41, 51, 131, 295, 341, 350, 421, 578, 748, 749, 755, 756, 757, 759, 768, 770, 773, 774, 775, 796, 801], "major": [3, 4, 593, 694, 757, 758, 769, 770, 781, 786, 792, 795], "ml": [3, 4, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 44, 742, 743, 746, 768, 774, 775, 776, 778, 779, 780, 784, 786, 787, 790, 791, 792, 793, 794, 795, 798, 800, 802], "framework": [3, 4, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 39, 41, 43, 46, 52, 161, 183, 193, 196, 207, 493, 509, 513, 544, 547, 579, 580, 583, 590, 667, 721, 728, 733, 745, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 763, 764, 765, 767, 768, 770, 771, 773, 774, 775, 777, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 799], "sinc": [3, 5, 7, 22, 23, 25, 26, 39, 41, 51, 74, 344, 742, 748, 749, 751, 752, 753, 755, 756, 757, 758, 761, 767, 768, 781, 786, 795, 801], "want": [3, 5, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 38, 39, 41, 51, 66, 74, 89, 231, 264, 350, 427, 581, 722, 726, 742, 743, 744, 747, 748, 749, 754, 756, 758, 761, 762, 764, 765, 766, 767, 770, 773, 778, 779, 780, 781, 782, 786, 790], "after": [3, 4, 5, 6, 7, 8, 25, 26, 40, 51, 52, 53, 55, 59, 68, 74, 75, 76, 78, 82, 177, 278, 331, 344, 347, 348, 350, 369, 370, 371, 372, 389, 406, 428, 439, 512, 565, 568, 570, 571, 572, 579, 581, 583, 584, 585, 590, 591, 598, 599, 600, 601, 603, 605, 607, 608, 676, 684, 728, 733, 742, 747, 748, 749, 751, 753, 754, 756, 757, 759, 761, 763, 766, 769, 770, 774, 782, 789, 790, 795], "first": [3, 4, 5, 7, 10, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 39, 42, 43, 44, 47, 50, 51, 56, 58, 60, 61, 62, 64, 70, 73, 74, 75, 79, 81, 83, 85, 87, 91, 93, 94, 114, 115, 129, 130, 138, 169, 177, 187, 214, 219, 221, 223, 224, 225, 226, 232, 238, 239, 240, 241, 242, 243, 249, 250, 251, 256, 257, 258, 260, 261, 264, 267, 269, 280, 281, 289, 295, 296, 307, 309, 310, 312, 321, 323, 324, 325, 331, 335, 336, 339, 341, 344, 347, 348, 349, 350, 357, 359, 369, 394, 395, 396, 398, 401, 415, 425, 429, 436, 439, 441, 442, 445, 450, 460, 462, 466, 474, 475, 476, 482, 487, 577, 578, 579, 580, 581, 583, 585, 586, 588, 589, 590, 593, 594, 595, 596, 611, 614, 617, 618, 619, 621, 624, 629, 631, 632, 634, 636, 640, 653, 654, 657, 658, 662, 663, 664, 665, 666, 675, 676, 678, 690, 691, 692, 696, 697, 698, 701, 702, 704, 705, 723, 724, 725, 726, 728, 733, 742, 744, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 759, 762, 763, 764, 765, 767, 768, 770, 773, 775, 777, 778, 780, 782, 785, 786, 789, 790, 793, 795, 796, 800], "notebook": [3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31, 40, 726], "automat": [3, 5, 7, 25, 26, 31, 747, 748, 749, 750, 753, 754, 756, 757, 762, 764, 767, 770, 773, 774, 776, 779, 780, 782, 783, 787, 795, 798, 802], "sure": [3, 5, 6, 7, 8, 25, 39, 747, 748, 749, 751, 756, 761, 768, 769, 770, 773, 782], "gpu": [3, 4, 5, 6, 7, 8, 39, 41, 43, 44, 187, 189, 190, 193, 196, 198, 200, 202, 203, 206, 208, 210, 580, 742, 748, 749, 756, 758, 777, 782, 793, 795, 798, 799, 800], "enabl": [3, 4, 5, 6, 7, 8, 23, 40, 51, 56, 68, 79, 94, 347, 349, 369, 414, 530, 583, 586, 627, 742, 748, 749, 752, 755, 757, 764, 765, 766, 767, 768, 770, 771, 774, 776, 778, 780, 781, 783, 786, 789, 793, 794, 795, 796, 797, 798, 801, 802], "dm": [3, 4, 5, 6, 8, 25, 26, 37, 39], "haiku": [3, 4, 5, 6, 8, 23, 25, 26, 37, 39, 43, 721, 742, 780, 787, 790, 795], "exit": [3, 5, 7, 22, 25, 26, 758], "download": [3, 7, 10, 12, 25, 26, 40, 41, 44, 748, 770, 789, 790], "imagenet": [3, 12, 40, 42, 742], "class": [3, 5, 7, 10, 12, 16, 25, 26, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 126, 135, 140, 156, 159, 172, 174, 175, 234, 271, 314, 334, 344, 358, 359, 366, 367, 395, 479, 480, 486, 495, 499, 512, 522, 544, 578, 579, 580, 581, 583, 585, 587, 590, 591, 610, 612, 618, 629, 634, 643, 659, 665, 666, 677, 684, 699, 706, 710, 711, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 736, 740, 742, 747, 753, 754, 755, 757, 758, 759, 760, 763, 765, 766, 769, 770, 773, 775, 776, 778, 779, 780, 783, 789, 790, 793, 795, 796, 802], "preprocess": [3, 7, 25, 26, 39, 42, 789], "wget": [3, 5, 7, 39, 40, 43, 748], "raw": [3, 5, 6, 7, 8, 22, 25, 26, 39, 42, 43, 68, 742, 760, 790, 796], "githubusercont": [3, 5, 7, 39, 43], "hub": [3, 5, 7, 39, 42, 44], "master": [3, 5, 7, 17, 18, 19, 27, 28, 29, 30, 31, 32, 39, 41, 42, 43, 756, 795], "imagenet_class": [3, 7], "txt": [3, 7, 40, 52, 748, 751, 754], "r": [3, 7, 39, 40, 51, 56, 68, 74, 79, 91, 323, 338, 344, 346, 566, 584, 586, 588, 631, 660, 748, 749, 750, 766, 769], "f": [3, 4, 6, 7, 25, 26, 38, 39, 41, 51, 58, 74, 81, 289, 302, 339, 341, 350, 429, 588, 590, 653, 668, 672, 673, 674, 677, 682, 683, 742, 743, 749, 750, 755, 756, 775, 778, 787, 791], "categori": [3, 7, 747, 751, 752, 755, 757, 761, 768, 771, 774], "strip": [3, 7, 18, 28, 786], "readlin": [3, 7, 40], "cat": [3, 7, 40, 769, 773, 775, 780, 789, 790], "jpg": [3, 5, 6, 7, 8, 22, 25, 26, 41, 42, 742, 790], "filenam": [3, 5, 7, 25, 26, 39, 41, 44, 52, 726, 732, 778], "3": [3, 5, 6, 7, 10, 12, 16, 19, 21, 22, 23, 25, 26, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 124, 126, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 150, 154, 156, 164, 166, 171, 185, 187, 188, 199, 202, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 365, 366, 367, 368, 370, 373, 374, 375, 378, 379, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 406, 411, 412, 413, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 438, 439, 444, 445, 446, 447, 448, 450, 451, 452, 456, 457, 458, 461, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 526, 527, 540, 541, 542, 546, 549, 550, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 736, 742, 747, 748, 751, 752, 753, 755, 756, 757, 759, 761, 764, 766, 769, 770, 775, 777, 778, 779, 780, 789, 790, 802], "import": [3, 6, 8, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 42, 43, 44, 51, 62, 66, 70, 74, 89, 185, 186, 190, 200, 202, 359, 473, 580, 589, 594, 664, 699, 733, 742, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 775, 777, 778, 780, 781, 782, 786, 789, 790, 791, 793, 795, 798, 799, 801], "torchvis": [3, 6, 7, 39, 787], "transform": [3, 4, 6, 7, 8, 22, 25, 26, 39, 40, 42, 51, 55, 74, 78, 347, 348, 368, 369, 374, 375, 378, 379, 380, 390, 403, 585, 609, 724, 742, 765, 770, 780, 783, 789, 790, 793, 795, 796, 797], "pil": [3, 5, 6, 7, 8, 22, 25, 26, 40, 41, 42, 742, 790], "numpi": [3, 4, 5, 6, 8, 10, 12, 17, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 41, 42, 43, 44, 50, 51, 52, 64, 73, 74, 75, 138, 167, 185, 215, 275, 307, 341, 359, 473, 480, 488, 512, 541, 544, 548, 578, 579, 580, 581, 583, 596, 706, 733, 736, 742, 746, 747, 748, 749, 751, 752, 753, 756, 757, 758, 761, 763, 767, 769, 770, 771, 773, 775, 777, 780, 782, 783, 785, 786, 789, 790, 797, 802], "np": [3, 4, 5, 6, 8, 10, 12, 17, 20, 21, 22, 23, 25, 26, 27, 30, 31, 32, 37, 38, 39, 40, 41, 42, 44, 47, 50, 51, 73, 74, 75, 119, 120, 121, 132, 167, 244, 248, 347, 348, 374, 379, 391, 541, 578, 579, 581, 583, 590, 671, 733, 736, 742, 747, 752, 757, 758, 761, 763, 767, 768, 769, 770, 771, 773, 775, 777, 778, 780, 783], "warn": [3, 4, 5, 39, 40, 41, 44, 739, 749, 772, 789, 790], "time": [3, 4, 6, 8, 23, 25, 26, 31, 39, 41, 42, 43, 51, 53, 56, 62, 74, 76, 85, 91, 126, 317, 344, 347, 348, 350, 359, 375, 380, 407, 411, 439, 445, 473, 565, 570, 578, 584, 585, 586, 588, 589, 593, 594, 608, 610, 624, 659, 662, 663, 664, 691, 692, 696, 697, 724, 725, 726, 747, 748, 749, 753, 755, 756, 757, 759, 763, 764, 765, 767, 768, 770, 771, 775, 778, 780, 781, 782, 785, 786, 787, 789, 790, 793, 795, 796, 799, 800, 801], "filterwarn": [3, 4], "ignor": [3, 4, 38, 46, 47, 51, 68, 74, 131, 347, 348, 350, 370, 371, 372, 396, 441, 442, 446, 578, 585, 586, 590, 611, 623, 676, 677, 728, 754, 756, 759, 770, 781, 801], "compos": [3, 6, 7, 25, 26, 39, 51, 74, 347, 361, 362, 363, 722, 748, 755, 768, 770, 789, 795, 802], "resiz": [3, 5, 6, 7, 39, 40, 51, 74, 347, 382, 773], "256": [3, 5, 7, 50, 75, 274, 275, 542, 585, 600, 602, 604], "centercrop": [3, 7], "224": [3, 7, 10, 12, 25, 26, 39, 40, 42, 742, 790], "totensor": [3, 6, 7, 39], "mean": [3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 51, 52, 55, 57, 58, 60, 64, 66, 68, 70, 74, 75, 78, 80, 81, 83, 87, 89, 91, 126, 204, 316, 344, 347, 348, 349, 350, 353, 354, 359, 375, 380, 393, 403, 412, 413, 414, 415, 416, 424, 429, 439, 453, 455, 460, 479, 480, 496, 566, 567, 569, 574, 578, 580, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 600, 602, 603, 604, 607, 608, 616, 643, 653, 662, 663, 664, 671, 686, 687, 723, 724, 727, 742, 748, 749, 750, 751, 753, 755, 757, 758, 759, 764, 766, 767, 768, 770, 771, 773, 775, 777, 778, 779, 780, 781, 783, 790, 792, 795], "0": [3, 4, 5, 6, 7, 10, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 121, 124, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 154, 156, 159, 160, 164, 166, 171, 184, 187, 189, 192, 197, 198, 199, 200, 202, 203, 204, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 357, 359, 365, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 383, 384, 385, 386, 389, 390, 392, 393, 395, 396, 397, 399, 400, 402, 403, 404, 407, 408, 411, 412, 413, 414, 415, 416, 418, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 489, 490, 491, 494, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 522, 524, 526, 527, 531, 536, 540, 541, 542, 544, 546, 548, 549, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 624, 625, 626, 627, 628, 630, 632, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 736, 742, 745, 748, 749, 751, 753, 755, 756, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 775, 777, 778, 779, 780, 781, 789, 790], "485": [3, 7, 39], "456": [3, 7, 39, 770], "406": [3, 7, 39, 51, 74, 368, 490, 583], "std": [3, 6, 7, 8, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 40, 55, 60, 64, 78, 83, 87, 354, 460, 585, 592, 596, 600, 602, 603, 604, 607, 686, 687, 742, 759], "229": [3, 7, 39, 270, 581], "225": [3, 7, 39, 41, 225, 581], "torch_img": [3, 5, 7], "unsqueez": [3, 5, 6, 7], "img": [3, 5, 7, 22, 25, 26, 39, 40, 41, 43, 742, 778, 790], "4": [3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 23, 25, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 108, 109, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 138, 140, 144, 145, 146, 154, 156, 159, 164, 166, 171, 188, 189, 197, 202, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 298, 303, 304, 307, 314, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378, 379, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 403, 412, 413, 415, 417, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 434, 435, 436, 438, 439, 444, 445, 446, 447, 448, 450, 451, 452, 456, 457, 458, 461, 463, 464, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 505, 508, 510, 511, 512, 519, 526, 527, 541, 542, 543, 544, 546, 550, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 638, 639, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 728, 736, 742, 745, 747, 748, 753, 754, 755, 756, 757, 759, 766, 769, 770, 773, 775, 777, 778, 779, 780, 787, 789, 795, 801, 802], "ipython": [3, 5, 7, 25, 26, 44], "displai": [3, 5, 7, 22, 25, 26, 39, 40, 41, 43, 44, 748, 754, 756, 761, 770, 778], "end": [3, 5, 39, 40, 51, 74, 118, 219, 275, 327, 344, 350, 429, 439, 441, 442, 444, 578, 581, 722, 742, 748, 749, 753, 756, 767, 771, 773, 774, 781, 793, 798], "see": [3, 4, 6, 8, 17, 18, 23, 25, 26, 27, 28, 32, 37, 38, 44, 45, 48, 50, 56, 61, 62, 64, 65, 67, 73, 74, 79, 84, 87, 88, 91, 93, 94, 101, 103, 106, 108, 109, 118, 125, 129, 138, 145, 164, 171, 214, 219, 221, 223, 224, 225, 226, 231, 232, 236, 238, 242, 243, 250, 251, 254, 256, 258, 260, 261, 264, 267, 269, 273, 280, 282, 285, 307, 341, 348, 392, 575, 578, 579, 581, 586, 593, 594, 596, 597, 614, 627, 630, 633, 640, 641, 692, 696, 697, 698, 699, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 742, 743, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 762, 763, 764, 768, 769, 770, 773, 775, 777, 778, 781, 785, 791], "5": [3, 4, 5, 6, 7, 10, 18, 21, 22, 23, 25, 26, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 118, 119, 120, 126, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 144, 145, 146, 150, 154, 156, 164, 166, 171, 188, 197, 202, 205, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 311, 314, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 355, 357, 359, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378, 379, 383, 384, 385, 386, 388, 389, 390, 394, 395, 397, 398, 399, 408, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 429, 430, 433, 434, 435, 438, 439, 444, 445, 446, 447, 448, 451, 452, 457, 458, 461, 463, 464, 466, 471, 473, 474, 475, 476, 477, 478, 480, 482, 488, 489, 490, 491, 494, 495, 496, 497, 499, 502, 503, 505, 508, 510, 511, 512, 526, 527, 531, 541, 542, 543, 544, 546, 550, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 628, 629, 630, 632, 634, 635, 636, 638, 639, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 736, 742, 747, 748, 749, 751, 753, 755, 756, 757, 759, 761, 763, 766, 769, 770, 777, 778, 779, 790], "set_backend": [3, 4, 5, 7, 16, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 38, 40, 41, 42, 50, 52, 66, 73, 75, 158, 167, 185, 186, 200, 202, 215, 488, 512, 579, 580, 583, 589, 664, 733, 742, 751, 753, 757, 758, 764, 765, 766, 775, 777, 780, 789, 790], "ivy_model": [3, 4, 5, 7, 42], "ivy_alexnet": 3, "order": [3, 19, 29, 31, 39, 42, 44, 47, 51, 52, 55, 56, 58, 62, 63, 68, 74, 78, 79, 81, 85, 86, 91, 93, 94, 119, 120, 131, 138, 219, 238, 281, 307, 323, 341, 344, 348, 350, 353, 357, 392, 395, 396, 397, 398, 402, 406, 408, 411, 429, 430, 431, 436, 437, 448, 453, 454, 455, 466, 578, 581, 585, 586, 588, 589, 593, 594, 595, 599, 600, 601, 602, 603, 604, 607, 618, 619, 625, 634, 635, 639, 641, 650, 653, 662, 663, 694, 696, 697, 698, 699, 700, 702, 703, 722, 726, 727, 729, 742, 747, 748, 749, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 778, 780, 781, 785, 791, 794, 795, 796, 798, 801], "quick": [3, 14, 26, 749, 750, 769, 779], "call": [3, 6, 10, 12, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 39, 43, 51, 66, 71, 74, 89, 91, 94, 114, 163, 164, 204, 348, 359, 406, 480, 530, 536, 550, 566, 567, 569, 577, 580, 583, 584, 586, 590, 632, 665, 671, 675, 676, 722, 724, 725, 726, 728, 733, 742, 747, 749, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 781, 786, 789, 790, 795, 796, 799], "take": [3, 7, 16, 23, 25, 26, 31, 37, 39, 42, 51, 56, 58, 64, 74, 81, 91, 114, 115, 117, 133, 226, 271, 278, 289, 339, 347, 348, 350, 366, 374, 379, 384, 398, 423, 429, 447, 474, 475, 577, 578, 581, 585, 586, 588, 589, 611, 624, 628, 653, 664, 704, 723, 724, 736, 742, 743, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 767, 768, 769, 770, 773, 775, 777, 779, 780, 781, 782, 787, 789, 790, 792, 793, 801], "moment": [3, 53, 76, 564, 565, 570, 584, 728, 747, 753, 781, 789, 790], "one": [3, 6, 8, 10, 12, 14, 15, 18, 19, 22, 23, 25, 26, 28, 29, 41, 42, 43, 47, 51, 52, 55, 56, 58, 61, 62, 64, 68, 70, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 91, 118, 121, 131, 133, 134, 135, 144, 146, 204, 225, 231, 238, 239, 256, 262, 263, 264, 283, 289, 295, 298, 299, 312, 316, 321, 322, 325, 326, 327, 329, 330, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 359, 368, 370, 374, 375, 378, 379, 382, 391, 392, 400, 407, 415, 419, 420, 421, 429, 430, 431, 436, 438, 443, 446, 453, 454, 455, 459, 464, 474, 475, 478, 479, 480, 481, 482, 484, 522, 526, 527, 529, 546, 548, 549, 562, 564, 565, 568, 570, 572, 573, 578, 579, 580, 581, 583, 584, 585, 586, 588, 591, 593, 594, 596, 599, 600, 601, 602, 603, 604, 607, 621, 624, 625, 629, 631, 640, 641, 649, 650, 651, 654, 656, 660, 684, 691, 694, 696, 697, 698, 699, 704, 706, 727, 730, 733, 739, 742, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 777, 778, 780, 781, 782, 783, 786, 787, 790, 795, 796, 798, 801], "cost": [3, 53, 76, 564, 565, 568, 570, 571, 572, 584, 589, 662, 663, 664, 757, 773, 793], "arg": [3, 5, 6, 7, 10, 12, 20, 21, 23, 25, 26, 30, 31, 32, 43, 46, 68, 90, 97, 114, 194, 204, 550, 577, 578, 580, 583, 720, 721, 724, 726, 730, 733, 736, 740, 742, 752, 757, 758, 761, 766, 767, 768, 773, 775, 779, 789, 790], "asarrai": [3, 4, 5, 6, 7, 40, 47, 51, 52, 63, 70, 74, 75, 86, 119, 357, 465, 466, 495, 506, 510, 511, 541, 542, 578, 583, 585, 594, 595, 599, 697, 701, 761, 765, 768, 769], "cuda": [3, 4, 5, 6, 7, 8, 16, 25, 40, 41, 44, 47, 51, 60, 70, 74, 83, 129, 130, 133, 184, 185, 186, 200, 202, 354, 459, 460, 462, 463, 578, 580, 592, 685, 686, 687, 688, 723, 724, 725, 726, 727, 728, 729, 742, 775, 781, 783, 800], "7": [3, 5, 6, 8, 10, 12, 17, 18, 20, 21, 23, 37, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 103, 104, 105, 106, 118, 119, 120, 129, 132, 133, 150, 156, 159, 189, 211, 214, 217, 221, 222, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 237, 238, 241, 242, 243, 248, 249, 250, 251, 252, 253, 254, 256, 259, 261, 262, 263, 264, 266, 267, 268, 270, 271, 274, 275, 276, 278, 281, 282, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 298, 301, 302, 312, 314, 316, 317, 323, 324, 325, 327, 329, 330, 337, 339, 341, 344, 345, 347, 348, 349, 350, 355, 359, 365, 366, 367, 368, 373, 374, 378, 379, 383, 386, 388, 389, 390, 394, 404, 412, 413, 414, 415, 416, 419, 420, 421, 425, 429, 434, 435, 438, 439, 444, 445, 447, 451, 452, 461, 463, 464, 471, 474, 475, 477, 478, 482, 488, 490, 491, 495, 496, 499, 510, 511, 512, 519, 526, 527, 541, 544, 564, 565, 567, 568, 569, 570, 572, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 604, 607, 608, 609, 612, 614, 615, 616, 617, 620, 621, 624, 626, 629, 632, 634, 635, 636, 638, 639, 643, 644, 645, 646, 649, 650, 655, 657, 658, 660, 665, 666, 673, 677, 684, 685, 686, 687, 688, 690, 695, 696, 698, 700, 701, 703, 704, 705, 706, 708, 710, 712, 713, 748, 749, 753, 755, 756, 759, 764, 767, 770], "output": [3, 4, 5, 7, 16, 22, 23, 25, 26, 38, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 145, 170, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 344, 346, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 396, 398, 400, 401, 404, 405, 406, 407, 409, 412, 413, 414, 415, 416, 417, 423, 424, 427, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 496, 497, 499, 503, 512, 519, 526, 527, 528, 551, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 678, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 736, 742, 744, 748, 749, 750, 751, 752, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 777, 779, 780, 781, 783, 789, 790, 796], "softmax": [3, 7, 10, 23, 25, 26, 41, 45, 55, 66, 67, 78, 575, 585, 611, 612, 720, 742], "pass": [3, 5, 6, 7, 8, 10, 12, 16, 23, 25, 26, 32, 38, 39, 41, 43, 44, 50, 51, 66, 68, 73, 74, 89, 94, 114, 115, 117, 148, 170, 185, 204, 219, 265, 350, 353, 354, 359, 429, 453, 455, 459, 479, 480, 512, 577, 579, 580, 581, 583, 589, 662, 663, 721, 725, 726, 728, 729, 733, 736, 740, 742, 745, 747, 749, 751, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 781, 789, 790, 793], "argsort": [3, 7, 63, 86, 595, 702, 768], "descend": [3, 7, 63, 86, 586, 595, 634, 635, 700, 703], "true": [3, 4, 5, 6, 7, 8, 10, 12, 16, 19, 20, 22, 23, 25, 26, 30, 31, 32, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 117, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 171, 183, 187, 188, 190, 191, 195, 198, 199, 200, 201, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 311, 312, 313, 314, 316, 318, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 382, 383, 384, 385, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 465, 466, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 526, 527, 528, 531, 534, 535, 537, 538, 540, 541, 542, 544, 546, 548, 549, 551, 556, 557, 559, 560, 562, 565, 566, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 672, 673, 675, 676, 677, 678, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 722, 724, 725, 726, 727, 728, 730, 733, 736, 740, 742, 745, 748, 753, 755, 756, 757, 758, 759, 761, 763, 764, 765, 767, 768, 769, 770, 772, 773, 775, 778, 779, 780, 789, 790], "top": [3, 7, 9, 14, 23, 25, 26, 39, 40, 51, 58, 74, 302, 341, 350, 448, 495, 583, 647, 722, 742, 748, 749, 757, 768, 770, 773, 778, 779, 795, 799], "logit": [3, 4, 5, 7, 39, 40, 41, 42, 51, 57, 74, 80, 339, 354, 459, 462, 587, 643, 645, 720, 742, 789], "gather": [3, 7, 39, 51, 52, 74, 75, 309, 310, 341, 503, 505, 583, 802], "print": [3, 4, 6, 7, 10, 12, 16, 17, 19, 23, 25, 26, 27, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 148, 154, 155, 156, 157, 158, 161, 163, 164, 166, 171, 183, 184, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 303, 304, 307, 312, 314, 327, 328, 333, 337, 339, 341, 344, 347, 348, 349, 350, 353, 359, 365, 366, 367, 368, 370, 371, 373, 375, 378, 380, 383, 384, 385, 386, 388, 390, 394, 396, 398, 406, 412, 413, 414, 415, 416, 422, 423, 424, 435, 439, 444, 445, 447, 448, 452, 456, 457, 458, 473, 474, 475, 476, 482, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 522, 525, 526, 527, 531, 532, 533, 536, 539, 540, 541, 542, 544, 546, 548, 549, 550, 554, 555, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 612, 613, 614, 615, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 632, 634, 635, 636, 638, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 722, 733, 736, 740, 742, 748, 749, 755, 757, 759, 769, 770, 772, 775, 777, 778, 779, 789], "indic": [3, 7, 47, 51, 52, 55, 56, 58, 59, 61, 62, 63, 68, 70, 71, 74, 75, 78, 79, 81, 82, 84, 85, 86, 91, 119, 120, 133, 136, 138, 159, 163, 164, 275, 307, 308, 323, 341, 344, 347, 348, 350, 355, 357, 365, 366, 367, 369, 373, 374, 375, 379, 380, 383, 384, 385, 386, 390, 396, 411, 419, 420, 421, 423, 425, 427, 429, 430, 431, 434, 438, 444, 445, 447, 448, 450, 451, 464, 465, 466, 487, 502, 503, 505, 526, 527, 531, 563, 566, 567, 578, 581, 583, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 599, 601, 602, 603, 604, 607, 611, 627, 641, 649, 650, 651, 653, 654, 655, 656, 658, 660, 665, 668, 670, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 691, 692, 693, 694, 696, 698, 700, 702, 703, 722, 724, 725, 726, 730, 736, 738, 756, 763, 766, 768, 780, 789], "to_list": [3, 7, 52, 75, 583], "arrai": [3, 4, 7, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 156, 159, 160, 162, 163, 164, 166, 168, 169, 170, 171, 177, 187, 188, 192, 197, 199, 201, 204, 205, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 530, 531, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 677, 678, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 729, 733, 736, 738, 742, 745, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 783, 790, 793, 794, 795, 797, 801, 802], "282": [3, 7], "281": [3, 7, 39, 41], "285": [3, 7, 74], "dev": [3, 6, 7, 8, 18, 39, 41, 44, 49, 68, 72, 192, 199, 580, 748, 758, 764, 777, 779], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 7, 10, 12, 16, 37, 39, 40, 41, 42, 44, 45, 50, 51, 56, 60, 67, 73, 74, 76, 79, 83, 103, 217, 252, 254, 256, 286, 339, 347, 359, 366, 368, 385, 388, 474, 564, 575, 581, 584, 586, 596, 621, 629, 687, 706], "tiger": [3, 7], "tabbi": [3, 7], "egyptian": [3, 7], "check": [3, 4, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 42, 44, 46, 48, 52, 56, 68, 71, 75, 79, 109, 147, 148, 157, 158, 161, 163, 164, 165, 168, 183, 190, 191, 198, 210, 488, 498, 500, 501, 508, 514, 515, 516, 517, 518, 534, 544, 556, 562, 575, 579, 580, 583, 586, 590, 619, 620, 627, 665, 666, 675, 676, 677, 722, 736, 742, 744, 746, 747, 748, 749, 751, 755, 756, 758, 759, 761, 765, 767, 768, 769, 770, 771, 772, 774, 775, 777, 778, 779, 782, 789], "confirm": [3, 40, 747], "same": [3, 4, 5, 6, 8, 12, 18, 20, 25, 28, 30, 32, 37, 38, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 83, 85, 87, 91, 92, 93, 107, 118, 123, 128, 130, 131, 133, 135, 136, 137, 138, 140, 143, 144, 145, 156, 159, 204, 211, 212, 213, 214, 216, 218, 222, 224, 227, 231, 237, 238, 244, 264, 266, 268, 271, 273, 274, 275, 284, 288, 296, 306, 307, 308, 309, 310, 314, 320, 336, 339, 341, 344, 347, 348, 350, 353, 355, 357, 359, 365, 366, 367, 383, 384, 385, 386, 388, 389, 390, 395, 399, 400, 408, 409, 410, 411, 423, 424, 439, 447, 453, 455, 464, 466, 471, 472, 473, 474, 475, 476, 477, 482, 519, 573, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 647, 650, 651, 653, 654, 656, 657, 662, 663, 678, 688, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 724, 736, 742, 748, 749, 752, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 779, 780, 781, 785, 787, 789, 790, 792, 794, 801, 802], "8": [3, 6, 17, 18, 20, 37, 39, 41, 44, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 93, 94, 101, 127, 128, 132, 135, 140, 149, 151, 152, 153, 156, 189, 206, 214, 216, 217, 221, 222, 225, 227, 229, 235, 238, 242, 243, 249, 250, 251, 256, 259, 260, 262, 263, 264, 269, 270, 273, 274, 275, 278, 279, 282, 283, 284, 290, 291, 293, 295, 296, 312, 320, 323, 325, 326, 327, 330, 337, 339, 341, 344, 347, 348, 349, 350, 359, 365, 366, 367, 368, 373, 374, 378, 379, 383, 384, 386, 388, 389, 394, 401, 412, 413, 415, 416, 417, 419, 420, 421, 425, 429, 434, 435, 444, 445, 447, 448, 451, 452, 461, 463, 475, 478, 479, 482, 488, 489, 491, 495, 496, 499, 502, 506, 510, 511, 512, 514, 515, 518, 521, 526, 527, 531, 541, 542, 543, 544, 564, 567, 569, 572, 574, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 599, 603, 604, 607, 608, 609, 611, 615, 616, 617, 620, 621, 624, 625, 626, 629, 632, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 650, 657, 658, 660, 666, 673, 677, 685, 686, 687, 688, 690, 695, 696, 698, 700, 701, 703, 705, 706, 708, 710, 712, 713, 724, 748, 755, 756, 759, 770, 774, 778], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 10, 12, 25, 26, 39, 40, 51, 53, 55, 57, 74, 76, 78, 80, 91, 298, 302, 327, 341, 344, 347, 348, 359, 373, 400, 471, 473, 476, 564, 565, 568, 570, 571, 572, 584, 585, 587, 589, 609, 610, 611, 612, 643, 664, 723, 724, 726, 728, 742, 755, 764, 770, 775, 779, 780, 794], "imagenet1k_v1": [3, 7], "dropout": [3, 55, 78, 347, 370, 371, 372, 585, 611, 612, 724, 778], "9": [3, 4, 5, 6, 7, 8, 17, 18, 20, 37, 39, 41, 44, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 62, 63, 64, 67, 71, 73, 74, 75, 76, 78, 79, 81, 83, 85, 86, 87, 93, 94, 101, 118, 119, 120, 132, 149, 150, 151, 152, 153, 156, 159, 212, 214, 216, 217, 220, 221, 222, 225, 231, 232, 238, 245, 251, 252, 253, 259, 260, 262, 263, 264, 267, 269, 270, 274, 275, 278, 279, 280, 285, 287, 290, 291, 318, 319, 323, 329, 330, 337, 339, 344, 345, 347, 349, 350, 357, 359, 365, 366, 367, 368, 373, 374, 378, 379, 383, 384, 386, 388, 389, 401, 412, 413, 415, 419, 420, 421, 425, 429, 434, 444, 445, 446, 448, 451, 461, 463, 466, 475, 491, 495, 496, 497, 499, 502, 510, 511, 514, 515, 518, 526, 527, 541, 543, 564, 565, 566, 570, 575, 578, 579, 581, 583, 584, 585, 586, 588, 590, 592, 593, 594, 595, 596, 599, 600, 601, 604, 607, 608, 609, 614, 615, 617, 620, 621, 624, 625, 626, 629, 632, 634, 635, 636, 638, 639, 646, 650, 654, 655, 657, 658, 660, 665, 666, 671, 673, 676, 677, 685, 686, 687, 688, 690, 695, 696, 698, 700, 701, 703, 705, 706, 708, 710, 712, 713, 728, 755, 757, 759, 766, 770, 778, 779, 791], "torch_output": [3, 5, 7], "dim": [3, 7, 41, 51, 68, 70, 74, 133, 296, 341, 347, 350, 364, 374, 375, 376, 379, 387, 429, 578, 585, 598, 605, 606, 724, 742, 757, 768, 769, 773], "torch_class": [3, 7], "torch_logit": [3, 7], "tensor": [3, 4, 6, 7, 8, 10, 12, 16, 17, 20, 21, 23, 25, 26, 27, 31, 37, 39, 47, 50, 51, 52, 55, 57, 58, 60, 68, 70, 73, 74, 75, 78, 79, 80, 81, 83, 90, 121, 129, 130, 133, 138, 154, 170, 262, 263, 289, 292, 302, 305, 306, 307, 313, 334, 339, 341, 344, 347, 348, 349, 350, 359, 360, 365, 366, 369, 373, 382, 383, 384, 385, 398, 399, 400, 403, 405, 407, 408, 411, 415, 429, 432, 437, 440, 441, 442, 443, 446, 449, 479, 483, 526, 527, 578, 579, 581, 583, 585, 586, 587, 588, 592, 608, 610, 611, 623, 636, 643, 653, 655, 685, 724, 733, 742, 752, 753, 757, 758, 763, 764, 767, 768, 769, 770, 771, 773, 775, 777, 778, 780, 781, 783, 785, 789, 790, 792, 793, 796, 798, 799, 802], "devic": [3, 5, 6, 7, 40, 41, 44, 47, 51, 60, 68, 70, 74, 83, 93, 96, 97, 98, 118, 119, 120, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 210, 295, 296, 307, 308, 341, 354, 427, 459, 460, 462, 463, 486, 500, 501, 578, 583, 592, 685, 686, 687, 688, 721, 723, 724, 725, 726, 727, 728, 729, 730, 733, 742, 749, 750, 753, 757, 761, 764, 765, 769, 770, 771, 773, 775, 780, 781, 782, 783, 786, 794, 795, 797, 798, 799, 800], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 7, 23, 37, 567, 574, 584, 778], "lt": [3, 7, 10, 12, 16, 20, 21, 23, 37, 39, 41, 94], "takebackward0": [3, 7], "gt": [3, 7, 10, 12, 16, 20, 21, 23, 37, 39, 41, 44, 94, 769, 775], "great": [3, 5, 742, 749, 770, 775, 777, 786, 787, 801], "With": [3, 18, 28, 37, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 61, 64, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 143, 144, 145, 146, 148, 154, 155, 156, 159, 166, 171, 172, 173, 174, 175, 185, 188, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 295, 296, 298, 314, 316, 322, 325, 326, 327, 329, 330, 333, 339, 341, 344, 347, 348, 349, 350, 359, 368, 370, 371, 378, 392, 393, 394, 396, 397, 398, 406, 415, 429, 430, 431, 433, 436, 438, 439, 445, 448, 450, 464, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 494, 495, 496, 497, 498, 502, 503, 506, 508, 510, 511, 512, 526, 527, 541, 542, 544, 546, 548, 549, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573, 574, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 612, 613, 614, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 632, 634, 635, 636, 638, 639, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 748, 759, 768, 770, 773, 775, 786, 787, 789, 795, 798], "simpl": [3, 10, 14, 15, 17, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 37, 39, 41, 44, 51, 74, 359, 473, 724, 742, 747, 748, 749, 752, 754, 755, 757, 758, 759, 760, 764, 767, 768, 770, 771, 773, 777, 779, 780, 781, 783, 785, 789, 790, 794, 795, 796, 797], "chang": [3, 4, 16, 26, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 350, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 575, 581, 588, 590, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 630, 631, 632, 634, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 677, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 742, 747, 748, 749, 751, 753, 754, 755, 756, 757, 759, 760, 762, 768, 769, 770, 771, 772, 773, 775, 779, 781, 782, 787, 789, 798, 801], "backend": [3, 17, 18, 19, 26, 28, 29, 31, 46, 47, 51, 52, 56, 68, 74, 75, 79, 93, 121, 157, 158, 161, 183, 190, 191, 193, 196, 207, 348, 394, 396, 480, 488, 500, 501, 509, 512, 513, 523, 530, 544, 547, 578, 579, 580, 583, 586, 634, 721, 726, 728, 732, 733, 745, 746, 748, 749, 750, 751, 752, 756, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 776, 777, 780, 783, 785, 789, 790, 795, 798, 801, 802], "let": [3, 4, 5, 6, 8, 10, 12, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 39, 40, 42, 44, 52, 64, 75, 211, 212, 213, 214, 217, 220, 229, 232, 234, 236, 245, 246, 247, 252, 254, 267, 275, 277, 278, 282, 502, 503, 581, 583, 586, 596, 638, 708, 710, 711, 712, 713, 742, 747, 752, 754, 755, 757, 758, 759, 760, 761, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 787, 789, 790, 802], "u": [3, 6, 39, 41, 43, 44, 51, 56, 70, 74, 79, 91, 130, 348, 403, 409, 410, 586, 590, 613, 620, 634, 673, 742, 743, 748, 749, 750, 755, 756, 762, 765, 767, 768, 769, 770, 771, 773, 779, 781, 786], "differ": [3, 4, 6, 8, 10, 14, 15, 19, 20, 21, 25, 26, 29, 30, 31, 32, 50, 51, 52, 56, 64, 68, 74, 75, 87, 93, 94, 103, 106, 156, 214, 231, 238, 239, 264, 280, 312, 317, 320, 321, 325, 344, 347, 348, 350, 359, 380, 390, 408, 411, 430, 431, 445, 474, 475, 482, 502, 503, 575, 579, 581, 583, 585, 586, 588, 596, 608, 609, 621, 632, 647, 657, 704, 705, 710, 712, 713, 726, 742, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 789, 790, 792, 793, 794, 795, 798, 801, 802], "ll": [3, 5, 6, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 40, 742, 743, 745, 747, 748, 749, 754, 759, 762, 766, 767, 778, 782, 787, 789, 790], "try": [3, 17, 27, 37, 40, 44, 68, 550, 583, 723, 733, 742, 747, 748, 749, 751, 752, 755, 756, 757, 761, 762, 767, 769, 775, 777, 781, 784, 786, 787], "10": [3, 5, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 39, 41, 43, 44, 47, 50, 51, 52, 53, 55, 56, 60, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 118, 128, 129, 130, 213, 221, 222, 225, 229, 236, 241, 243, 249, 251, 253, 264, 270, 277, 278, 283, 288, 312, 315, 320, 322, 323, 325, 326, 327, 329, 330, 334, 337, 344, 347, 350, 359, 365, 366, 367, 368, 378, 383, 384, 386, 388, 389, 390, 421, 423, 425, 429, 434, 445, 451, 471, 474, 475, 478, 480, 482, 495, 496, 497, 499, 502, 503, 505, 510, 511, 519, 527, 531, 536, 541, 543, 555, 558, 570, 578, 581, 583, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 608, 615, 617, 621, 622, 624, 625, 626, 629, 634, 635, 636, 650, 655, 656, 657, 658, 660, 671, 673, 676, 677, 684, 685, 686, 687, 688, 694, 696, 702, 704, 705, 706, 707, 709, 710, 712, 713, 728, 742, 748, 751, 755, 756, 757, 759, 766, 769, 770, 775, 777, 778, 786, 800], "tf": [3, 5, 10, 12, 17, 20, 21, 23, 25, 26, 27, 28, 30, 32, 37, 42, 43, 742, 752, 753, 757, 758, 763, 767, 768, 770, 771, 773, 775, 780, 781, 783, 789, 790, 795], "onc": [3, 5, 25, 26, 37, 39, 56, 60, 79, 83, 204, 348, 395, 580, 586, 592, 618, 619, 620, 634, 685, 747, 748, 749, 755, 756, 757, 758, 759, 762, 767, 768, 770, 773, 775, 778, 781, 782, 787, 789], "set": [3, 10, 12, 18, 25, 26, 28, 31, 39, 40, 41, 42, 43, 46, 51, 52, 55, 56, 61, 63, 64, 68, 74, 75, 78, 79, 84, 86, 87, 106, 109, 117, 136, 138, 172, 173, 174, 175, 176, 187, 200, 201, 202, 203, 204, 219, 307, 316, 330, 332, 337, 341, 344, 345, 347, 348, 350, 359, 369, 393, 397, 399, 415, 429, 439, 442, 448, 473, 478, 479, 480, 481, 482, 484, 488, 495, 512, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 544, 552, 575, 577, 578, 579, 580, 581, 583, 585, 586, 590, 592, 593, 595, 596, 608, 612, 614, 625, 627, 630, 633, 634, 665, 672, 675, 676, 677, 682, 683, 689, 691, 692, 696, 698, 699, 700, 703, 711, 713, 722, 723, 724, 726, 728, 733, 739, 743, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 767, 768, 769, 770, 771, 773, 775, 777, 778, 785, 788, 789, 790, 793, 794, 795, 796, 797, 799, 802], "our": [3, 6, 8, 10, 12, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 37, 39, 40, 43, 66, 89, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 761, 762, 765, 768, 769, 770, 771, 773, 774, 775, 777, 778, 779, 780, 781, 785, 786, 789, 800, 801], "post": [3, 5, 39, 59, 82, 591, 684, 748, 766, 780, 782], "process": [3, 5, 20, 25, 26, 30, 39, 198, 210, 580, 743, 748, 749, 754, 755, 756, 762, 764, 766, 768, 769, 770, 773, 775, 780, 786, 787, 789, 793, 794, 795, 798, 799, 801, 802], "11": [3, 5, 16, 18, 20, 37, 39, 40, 41, 44, 50, 51, 52, 55, 56, 60, 64, 73, 74, 75, 78, 79, 81, 83, 87, 94, 214, 218, 221, 236, 273, 274, 280, 327, 344, 347, 348, 350, 365, 366, 378, 383, 384, 386, 388, 389, 397, 423, 425, 429, 434, 436, 451, 474, 475, 489, 495, 496, 502, 511, 527, 581, 583, 585, 586, 587, 588, 590, 592, 593, 594, 596, 599, 600, 608, 609, 617, 620, 621, 622, 624, 625, 629, 634, 635, 643, 645, 650, 655, 656, 658, 660, 671, 673, 683, 686, 687, 688, 695, 696, 704, 705, 706, 713, 755, 756, 757, 759, 766], "st": [3, 4, 6, 751, 769, 770], "perf_count": [3, 6], "raw_logit": 3, "latenc": [3, 6], "nn": [3, 5, 12, 23, 25, 26, 39, 43, 131, 578, 742, 764, 769, 773, 780, 790, 796], "axi": [3, 5, 40, 41, 42, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 104, 108, 129, 130, 133, 204, 278, 283, 316, 317, 323, 330, 344, 347, 349, 350, 353, 357, 359, 368, 369, 375, 378, 380, 390, 414, 418, 424, 425, 426, 429, 430, 431, 434, 439, 444, 445, 447, 448, 450, 451, 456, 457, 458, 466, 471, 474, 475, 476, 478, 479, 480, 481, 482, 495, 502, 563, 575, 578, 580, 581, 583, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 607, 614, 617, 625, 640, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 690, 691, 692, 696, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 724, 725, 730, 755, 757, 759, 761, 763, 764, 767, 768, 770, 773, 775, 777, 780], "direct": [3, 51, 74, 317, 322, 326, 331, 335, 344, 347, 350, 380, 390, 430, 431, 445, 595, 703, 747, 752, 754, 768, 773, 779, 780, 791, 795, 796, 799], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 5, 10, 12, 18, 19, 20, 21, 25, 26, 31, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 199, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 313, 314, 315, 317, 320, 322, 324, 326, 327, 328, 329, 333, 334, 336, 339, 341, 344, 347, 348, 349, 350, 353, 354, 355, 357, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 384, 385, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 427, 432, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 472, 473, 474, 475, 476, 490, 491, 495, 496, 497, 499, 502, 503, 506, 512, 519, 526, 527, 537, 545, 547, 559, 563, 564, 565, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 665, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 706, 708, 710, 711, 713, 714, 715, 723, 724, 727, 736, 742, 749, 755, 757, 758, 759, 760, 761, 763, 767, 768, 769, 770, 771, 772, 775, 777, 778, 779, 780, 789, 790], "dtype": [3, 5, 7, 12, 18, 20, 21, 37, 40, 47, 48, 51, 52, 55, 56, 60, 61, 64, 70, 71, 73, 74, 75, 78, 79, 83, 84, 87, 93, 96, 97, 98, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 199, 265, 295, 296, 297, 298, 299, 300, 301, 305, 306, 311, 314, 316, 330, 341, 344, 347, 354, 359, 368, 378, 390, 459, 460, 461, 462, 463, 473, 474, 475, 476, 479, 481, 482, 499, 500, 501, 503, 512, 521, 548, 578, 579, 580, 583, 585, 586, 589, 590, 592, 593, 595, 596, 597, 601, 608, 625, 641, 664, 665, 686, 687, 688, 691, 692, 693, 702, 703, 704, 705, 710, 712, 714, 715, 723, 724, 726, 727, 729, 730, 742, 745, 751, 753, 757, 758, 759, 761, 764, 765, 767, 768, 769, 770, 771, 775, 777, 790], "int32": [3, 37, 39, 48, 51, 52, 60, 61, 64, 71, 74, 75, 83, 84, 124, 129, 135, 140, 143, 146, 148, 150, 152, 154, 157, 159, 160, 164, 167, 171, 175, 179, 181, 199, 292, 339, 355, 359, 464, 474, 475, 476, 503, 512, 548, 578, 579, 580, 583, 592, 593, 596, 686, 687, 688, 692, 704, 705, 710, 712, 757, 768, 770, 775], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 5, 7, 10, 12, 17, 18, 37, 39, 40, 41, 47, 48, 52, 55, 70, 71, 75, 78, 87, 130, 133, 135, 140, 141, 142, 146, 150, 151, 154, 155, 156, 157, 160, 163, 164, 166, 171, 174, 180, 244, 271, 311, 320, 341, 344, 347, 359, 368, 378, 390, 476, 512, 548, 578, 579, 581, 583, 585, 586, 589, 601, 603, 604, 607, 632, 634, 635, 641, 664, 742, 757, 759, 769, 770, 771, 790], "As": [3, 5, 6, 8, 10, 12, 18, 22, 23, 25, 26, 28, 31, 37, 38, 62, 66, 89, 594, 696, 697, 698, 699, 742, 747, 748, 749, 752, 754, 755, 756, 757, 758, 761, 762, 763, 764, 767, 768, 769, 770, 773, 777, 778, 779, 781, 785, 789, 790, 795, 800], "expect": [3, 5, 6, 8, 18, 22, 25, 26, 28, 41, 42, 44, 51, 56, 57, 74, 80, 170, 238, 282, 347, 369, 390, 486, 579, 581, 583, 587, 629, 643, 722, 723, 724, 726, 742, 748, 749, 751, 757, 758, 761, 762, 765, 767, 769, 770, 773, 781, 782, 787, 789, 790], "ident": [3, 23, 40, 42, 56, 68, 124, 192, 505, 531, 578, 580, 583, 586, 590, 621, 626, 678, 724, 755, 764, 765, 768, 769, 771, 773, 777, 778, 781, 783, 785, 787], "had": [3, 755, 756, 767, 771, 775, 795, 796], "anoth": [3, 16, 18, 19, 22, 23, 25, 26, 28, 29, 41, 42, 125, 144, 146, 578, 579, 742, 747, 748, 749, 753, 755, 757, 758, 761, 762, 764, 767, 768, 770, 775, 777, 780, 783, 786, 788, 789, 790, 795, 801], "postprocess": 3, "routin": [3, 756, 767, 768, 773, 781, 795], "feed": [3, 204, 580, 789, 795, 796], "other": [3, 6, 8, 10, 12, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 48, 50, 51, 52, 58, 64, 68, 71, 73, 74, 75, 81, 87, 91, 93, 94, 118, 133, 144, 170, 231, 236, 238, 254, 263, 264, 313, 317, 344, 350, 424, 432, 444, 484, 485, 578, 579, 581, 583, 592, 596, 647, 657, 688, 711, 713, 742, 747, 748, 749, 751, 752, 755, 756, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 779, 780, 781, 782, 783, 786, 789, 790, 791, 793, 794, 795, 801, 802], "carefulli": [3, 269, 581, 723, 768, 793, 798], "rewrit": 3, "easili": [3, 22, 25, 26, 37, 742, 748, 752, 756, 768, 773, 778, 779, 780, 781, 786, 795, 801, 802], "out": [3, 5, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 143, 145, 154, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 344, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 398, 400, 401, 402, 404, 405, 406, 407, 412, 413, 414, 415, 416, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 490, 491, 495, 496, 497, 499, 502, 503, 512, 522, 526, 527, 564, 565, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 723, 724, 726, 727, 728, 729, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 782, 785, 786, 787, 789, 790, 795, 802], "quickest": 3, "particular": [3, 25, 26, 259, 581, 748, 749, 751, 753, 756, 757, 759, 765, 767, 768, 770, 771, 791, 795, 801], "hardwar": [3, 39, 93, 97, 748, 773, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801], "again": [3, 5, 19, 20, 28, 29, 30, 31, 586, 632, 749, 752, 753, 754, 755, 759, 761, 762, 767, 768, 770, 771, 773, 778, 780, 781, 786, 787, 800, 801], "speed": [3, 6, 8, 25, 26, 39, 44, 52, 75, 519, 583, 770, 785, 798], "up": [3, 5, 6, 8, 25, 51, 52, 74, 75, 347, 350, 369, 382, 431, 519, 583, 585, 608, 722, 743, 745, 747, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 789, 796, 801, 802], "12": [3, 5, 6, 7, 16, 18, 20, 21, 37, 39, 40, 41, 48, 50, 51, 52, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 82, 83, 87, 93, 94, 159, 214, 216, 221, 225, 226, 229, 231, 232, 233, 251, 264, 267, 274, 277, 284, 285, 300, 301, 323, 326, 327, 341, 344, 347, 350, 359, 365, 366, 367, 368, 370, 374, 375, 383, 384, 388, 389, 390, 423, 425, 429, 434, 451, 463, 474, 480, 481, 491, 495, 496, 527, 533, 541, 555, 581, 583, 585, 586, 588, 590, 591, 592, 593, 594, 596, 599, 603, 608, 609, 617, 621, 625, 629, 635, 636, 638, 650, 654, 656, 658, 660, 677, 684, 686, 687, 688, 695, 696, 704, 705, 706, 710, 712, 748, 753, 755, 757, 759, 766], "repeat": [3, 4, 19, 29, 51, 52, 58, 74, 75, 81, 347, 359, 375, 380, 473, 497, 583, 588, 589, 659, 664, 736, 749, 752, 753, 759, 760, 767, 770], "previou": [3, 18, 19, 20, 22, 28, 29, 30, 32, 53, 76, 178, 179, 180, 181, 182, 338, 346, 551, 553, 554, 555, 556, 558, 559, 561, 565, 570, 579, 583, 584, 723, 739, 749, 751, 753, 756, 758, 763, 768, 770, 773, 780, 781, 798], "befor": [3, 4, 5, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 32, 39, 51, 55, 56, 58, 62, 64, 68, 74, 78, 79, 201, 204, 209, 347, 350, 359, 374, 379, 389, 430, 431, 432, 439, 474, 475, 580, 585, 586, 588, 589, 590, 594, 596, 598, 599, 600, 601, 603, 605, 607, 611, 612, 624, 641, 647, 662, 663, 677, 696, 697, 698, 699, 704, 705, 710, 712, 722, 733, 736, 747, 748, 749, 751, 752, 754, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 775, 778, 781, 789, 790, 795], "13": [3, 5, 6, 7, 16, 21, 37, 39, 41, 45, 50, 51, 55, 56, 60, 64, 73, 74, 75, 76, 78, 81, 83, 87, 93, 109, 159, 189, 214, 226, 229, 238, 249, 269, 278, 323, 330, 337, 344, 347, 350, 367, 368, 378, 383, 389, 423, 425, 429, 434, 451, 463, 474, 475, 490, 491, 495, 496, 511, 533, 541, 564, 575, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 593, 594, 596, 599, 600, 608, 609, 617, 621, 629, 635, 660, 664, 677, 686, 687, 688, 695, 696, 704, 705, 706, 755, 759, 768], "026875037000081647": 3, "14": [3, 5, 6, 7, 21, 37, 39, 40, 41, 48, 50, 51, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 83, 143, 156, 159, 212, 217, 219, 226, 230, 256, 260, 264, 270, 277, 285, 319, 347, 348, 350, 359, 365, 366, 367, 368, 378, 385, 388, 389, 392, 398, 425, 429, 434, 451, 474, 541, 564, 579, 581, 583, 584, 585, 586, 588, 590, 594, 596, 599, 600, 602, 604, 608, 617, 621, 629, 638, 660, 677, 686, 687, 688, 696, 705, 706, 755, 759, 770], "overrid": [3, 5, 31, 40, 47, 51, 70, 74, 133, 359, 473, 578, 752, 754], "behavior": [3, 5, 51, 62, 231, 238, 264, 269, 273, 360, 483, 530, 553, 581, 583, 594, 696, 697, 698, 699, 747, 754, 755, 756, 757, 767, 768, 769, 770, 773, 775, 781, 792], "prealloc": [3, 5], "75": [3, 5, 37, 50, 51, 73, 74, 75, 78, 83, 110, 129, 217, 219, 231, 244, 298, 322, 323, 341, 344, 389, 482, 497, 510, 541, 575, 578, 581, 583, 586, 590, 592, 599, 622, 629, 673, 688], "memori": [3, 5, 47, 51, 58, 70, 74, 81, 120, 131, 186, 198, 204, 206, 210, 350, 359, 419, 420, 425, 427, 429, 430, 431, 438, 451, 480, 525, 530, 553, 578, 580, 583, 585, 588, 610, 649, 650, 651, 653, 655, 656, 658, 660, 756, 757, 758, 767, 768, 773, 775, 781, 789, 795, 797, 798, 799], "temporari": [3, 5, 539, 561, 583, 757, 772], "fix": [3, 5, 41, 51, 74, 91, 344, 348, 411, 585, 611, 742, 748, 749, 751, 757, 762, 770, 771], "until": [3, 5, 749, 767, 775, 781, 786, 789, 802], "handl": [3, 5, 37, 39, 45, 49, 50, 51, 67, 68, 72, 73, 74, 94, 101, 103, 106, 108, 109, 184, 185, 186, 187, 188, 192, 197, 198, 206, 210, 216, 228, 253, 269, 275, 276, 281, 282, 350, 423, 444, 447, 575, 580, 581, 586, 596, 638, 710, 712, 720, 728, 743, 750, 755, 756, 757, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 779, 792, 802], "o": [3, 5, 38, 39, 40, 41, 43, 522, 583, 742, 748, 750, 756, 775, 782], "environ": [3, 5, 40, 43, 742, 743, 749, 782, 795, 797], "xla_python_client_alloc": [3, 5], "platform": [3, 5, 746, 793, 797, 799], "jit": [3, 6, 8, 25, 28, 775, 781, 789, 795], "img_jax": [3, 5], "device_put": [3, 6], "15": [3, 5, 7, 8, 21, 37, 39, 40, 41, 44, 50, 51, 52, 56, 60, 64, 70, 71, 73, 74, 75, 78, 79, 81, 83, 87, 94, 128, 156, 214, 221, 225, 231, 242, 249, 250, 256, 264, 273, 274, 275, 323, 337, 344, 345, 347, 348, 350, 359, 365, 366, 383, 385, 388, 389, 394, 425, 429, 434, 451, 474, 491, 495, 496, 499, 510, 511, 536, 541, 558, 578, 579, 581, 583, 585, 586, 588, 590, 592, 593, 594, 596, 599, 609, 617, 620, 621, 622, 629, 635, 636, 654, 660, 665, 677, 686, 687, 694, 696, 704, 705, 706, 748, 756, 759, 766, 798], "warm": 3, "_": [3, 6, 8, 25, 38, 39, 50, 68, 73, 76, 146, 234, 236, 244, 245, 260, 359, 411, 473, 495, 564, 565, 579, 581, 583, 584, 586, 588, 590, 596, 632, 635, 661, 672, 711, 760, 767, 778], "rang": [3, 25, 26, 37, 38, 39, 41, 47, 51, 64, 70, 74, 118, 129, 130, 278, 302, 341, 348, 350, 359, 396, 405, 432, 440, 442, 449, 474, 475, 476, 495, 563, 578, 581, 583, 594, 596, 696, 704, 705, 710, 712, 723, 742, 757, 761, 764, 770, 775, 778, 779, 780, 795, 801], "16": [3, 5, 8, 21, 37, 39, 41, 50, 51, 52, 55, 56, 60, 64, 71, 73, 74, 75, 78, 79, 81, 83, 93, 94, 159, 225, 254, 274, 281, 320, 323, 327, 344, 347, 350, 359, 365, 366, 368, 374, 378, 379, 383, 384, 386, 389, 429, 474, 480, 496, 499, 521, 541, 542, 574, 579, 581, 583, 584, 585, 586, 588, 590, 592, 593, 596, 607, 609, 613, 617, 620, 621, 629, 635, 660, 673, 677, 686, 687, 688, 695, 705, 706, 742, 749, 757, 759, 778], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 67, 68, 101, 347, 349, 382, 387, 414, 594, 696, 698, 720, 748, 749, 751, 759, 775], "note": [3, 5, 21, 25, 26, 31, 40, 41, 42, 51, 52, 56, 58, 62, 74, 79, 81, 91, 126, 138, 170, 238, 273, 274, 281, 307, 308, 323, 341, 344, 347, 348, 350, 369, 395, 399, 407, 408, 411, 429, 579, 581, 585, 586, 588, 594, 596, 611, 618, 619, 632, 634, 653, 657, 697, 699, 708, 724, 745, 747, 748, 749, 752, 757, 759, 760, 762, 767, 768, 769, 770, 771, 773], "were": [3, 5, 42, 68, 71, 159, 163, 164, 238, 581, 749, 757, 761, 762, 766, 767, 769, 770, 771, 773, 775, 789, 795, 796, 801], "function": [3, 10, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 156, 157, 158, 159, 162, 163, 164, 166, 170, 171, 188, 190, 191, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 386, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 525, 526, 527, 530, 531, 534, 536, 538, 541, 542, 543, 544, 546, 548, 549, 550, 556, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 671, 672, 673, 675, 676, 677, 678, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 723, 726, 733, 738, 742, 745, 748, 749, 750, 751, 752, 753, 754, 756, 759, 760, 767, 774, 776, 777, 778, 779, 783, 785, 789, 792, 793, 794, 795, 796, 801, 802], "calcul": [3, 39, 50, 51, 52, 57, 64, 68, 73, 74, 75, 79, 80, 87, 94, 211, 212, 213, 214, 215, 216, 217, 218, 219, 228, 229, 231, 234, 235, 236, 252, 253, 254, 255, 256, 257, 262, 263, 264, 269, 276, 277, 278, 280, 281, 282, 323, 333, 344, 347, 348, 350, 353, 359, 365, 366, 367, 396, 439, 453, 455, 480, 519, 581, 583, 586, 587, 596, 620, 629, 632, 643, 644, 645, 707, 708, 709, 710, 711, 712, 713, 723, 724, 727, 747, 760, 775, 786, 789], "dog": 3, "18": [3, 21, 37, 39, 41, 50, 51, 60, 73, 74, 78, 79, 83, 87, 104, 226, 231, 273, 277, 286, 323, 344, 347, 350, 368, 374, 378, 379, 383, 386, 389, 429, 575, 581, 586, 592, 596, 603, 617, 624, 629, 686, 687, 688, 705, 706, 710, 755, 757, 759], "19": [3, 21, 37, 39, 40, 41, 44, 50, 51, 60, 73, 74, 78, 79, 83, 217, 226, 254, 264, 281, 347, 348, 350, 359, 367, 368, 379, 383, 386, 389, 394, 429, 474, 581, 586, 590, 592, 595, 617, 625, 638, 676, 686, 687, 688, 703, 759], "006431100999861883": 3, "258": [3, 585, 600, 602, 604], "104": [3, 64, 586, 596, 629, 706], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 756], "predict": [3, 5, 7, 39, 40, 41, 42, 51, 57, 74, 80, 349, 412, 414, 416, 587, 643, 644, 645, 742, 757], "down": [3, 18, 28, 42, 51, 74, 347, 350, 382, 431, 722, 748, 770, 783, 795, 801], "itself": [3, 20, 30, 50, 91, 265, 485, 550, 581, 583, 590, 677, 745, 748, 749, 751, 754, 755, 756, 757, 758, 761, 762, 767, 768, 779, 781, 785, 789, 794, 795, 796, 801], "version": [3, 22, 28, 39, 40, 41, 44, 45, 51, 74, 91, 101, 282, 316, 318, 344, 359, 478, 482, 563, 581, 583, 586, 619, 620, 733, 742, 748, 749, 754, 756, 757, 760, 767, 769, 775, 785, 786, 787, 790, 801, 802], "return": [3, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 722, 723, 724, 726, 728, 733, 736, 737, 738, 739, 742, 748, 749, 752, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 789, 790, 796], "20": [3, 12, 37, 39, 40, 41, 44, 50, 51, 55, 60, 64, 73, 74, 75, 78, 79, 83, 87, 226, 230, 234, 270, 274, 278, 323, 325, 327, 344, 347, 350, 365, 367, 383, 386, 389, 423, 495, 502, 503, 505, 527, 531, 541, 581, 583, 586, 592, 593, 596, 599, 600, 610, 617, 622, 625, 629, 636, 686, 694, 695, 704, 705, 706, 710, 712, 742, 756, 773, 777], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 786], "sourc": [3, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 747, 748, 749, 751, 752, 754, 755, 756, 768, 785, 786, 787, 788, 790, 794, 795, 796, 797, 798], "21": [3, 37, 39, 41, 44, 50, 51, 52, 60, 70, 73, 74, 78, 79, 83, 87, 93, 130, 159, 214, 217, 219, 225, 226, 249, 264, 330, 347, 348, 350, 359, 365, 368, 378, 383, 386, 389, 390, 392, 423, 474, 527, 578, 579, 581, 586, 587, 590, 596, 617, 629, 645, 671, 686, 687, 704, 705, 706, 761, 766], "modul": [3, 5, 6, 8, 10, 12, 14, 15, 16, 22, 23, 25, 26, 27, 31, 37, 38, 39, 41, 42, 43, 66, 68, 89, 94, 340, 342, 343, 351, 352, 356, 523, 583, 597, 716, 720, 721, 722, 724, 725, 727, 729, 732, 733, 742, 744, 748, 752, 753, 754, 761, 764, 767, 768, 770, 775, 776, 778, 780, 781, 787, 789, 795, 796, 798], "def": [3, 5, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 43, 50, 73, 114, 215, 489, 577, 583, 589, 590, 664, 671, 736, 742, 747, 748, 751, 752, 755, 757, 758, 759, 761, 763, 764, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 789, 790], "__init__": [3, 5, 10, 12, 25, 26, 37, 38, 39, 41, 68, 90, 91, 92, 93, 94, 96, 97, 720, 723, 724, 725, 726, 727, 728, 729, 732, 733, 736, 737, 740, 742, 747, 752, 753, 757, 761, 768, 771, 775, 777, 778, 779, 780, 790], "self": [3, 5, 10, 12, 25, 26, 37, 38, 39, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 154, 156, 159, 162, 163, 164, 166, 168, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 585, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 728, 736, 742, 749, 752, 755, 761, 768, 769, 775, 777, 778, 779, 780, 790], "num_class": [3, 10, 12, 25, 26, 39, 41, 43, 742, 780, 790], "1000": [3, 6, 10, 25, 26, 39, 40, 41, 42, 44, 47, 70, 130, 578, 742, 778, 790], "v": [3, 4, 5, 14, 15, 18, 25, 26, 28, 31, 32, 37, 40, 41, 51, 55, 63, 70, 74, 78, 86, 130, 229, 234, 236, 277, 348, 350, 396, 403, 409, 428, 581, 585, 589, 595, 612, 664, 702, 722, 724, 725, 726, 727, 728, 729, 742, 744, 748, 749, 750, 754, 775, 778, 779, 780], "none": [3, 5, 6, 8, 25, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 156, 159, 161, 162, 163, 164, 166, 168, 171, 181, 183, 186, 187, 199, 200, 201, 202, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 347, 348, 349, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 505, 506, 507, 508, 510, 511, 512, 514, 515, 518, 523, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 541, 542, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 735, 742, 745, 751, 752, 753, 755, 756, 757, 758, 759, 761, 763, 764, 767, 768, 769, 770, 771, 773, 775, 777, 779, 780, 789, 790], "_build": [3, 5, 742], "kwarg": [3, 4, 5, 8, 25, 39, 43, 46, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 94, 97, 194, 350, 439, 522, 550, 578, 580, 583, 720, 721, 724, 726, 733, 740, 742, 752, 757, 758, 761, 764, 767, 768, 773, 775, 779, 789, 790], "featur": [3, 8, 10, 12, 14, 16, 25, 26, 39, 43, 51, 74, 347, 361, 362, 363, 370, 371, 372, 723, 724, 742, 747, 748, 749, 752, 753, 756, 757, 763, 771, 773, 778, 781, 790, 795, 796, 797, 801], "sequenti": [3, 5, 23, 25, 26, 41, 742, 754, 755, 779, 790], "conv2d": [3, 5, 23, 25, 26, 41, 44, 55, 78, 585, 602, 724, 742], "64": [3, 5, 37, 39, 40, 41, 44, 50, 51, 55, 73, 74, 75, 78, 79, 83, 87, 94, 155, 225, 235, 269, 278, 279, 320, 344, 347, 368, 378, 495, 496, 542, 570, 579, 581, 583, 584, 585, 586, 590, 596, 600, 602, 604, 607, 626, 629, 639, 673, 677, 687, 706, 710, 742, 748, 757, 778, 779, 800], "2": [3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 22, 23, 25, 26, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 150, 154, 156, 164, 166, 171, 187, 188, 189, 192, 195, 197, 199, 202, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 302, 303, 304, 307, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 357, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 379, 380, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 406, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 438, 439, 444, 445, 446, 447, 448, 450, 451, 452, 456, 457, 458, 461, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 524, 526, 527, 531, 540, 541, 542, 543, 544, 546, 550, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 723, 724, 733, 736, 742, 745, 748, 749, 751, 753, 754, 755, 756, 757, 759, 761, 763, 764, 766, 767, 768, 769, 770, 774, 775, 777, 778, 779, 780, 781, 789, 790, 801, 802], "data_format": [3, 41, 51, 55, 74, 78, 347, 353, 365, 366, 367, 370, 371, 372, 383, 384, 385, 386, 388, 453, 454, 455, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724, 727, 742], "nchw": [3, 41, 51, 55, 74, 78, 347, 366, 371, 384, 388, 585, 598, 601, 602, 605, 606, 607, 724, 742], "relu": [3, 5, 23, 25, 26, 37, 44, 45, 51, 66, 67, 74, 103, 289, 290, 294, 339, 575, 720, 742, 769, 778, 779], "maxpool2d": [3, 5, 39, 724, 742], "192": [3, 41, 736], "384": [3, 76, 564, 584], "avgpool": 3, "adaptiveavgpool2d": [3, 724], "6": [3, 6, 8, 10, 18, 20, 21, 22, 23, 25, 26, 37, 39, 40, 41, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 60, 61, 63, 64, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 101, 103, 108, 114, 119, 120, 127, 128, 131, 132, 135, 140, 144, 145, 146, 154, 156, 210, 211, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 254, 256, 257, 259, 261, 262, 263, 264, 266, 267, 268, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 302, 314, 316, 323, 324, 326, 327, 328, 330, 337, 339, 341, 344, 345, 347, 348, 349, 350, 355, 357, 359, 368, 370, 373, 374, 378, 379, 383, 386, 389, 390, 394, 397, 398, 401, 413, 415, 416, 417, 419, 420, 421, 425, 429, 430, 434, 435, 438, 439, 444, 445, 447, 451, 452, 461, 463, 464, 466, 471, 473, 474, 475, 476, 478, 480, 481, 482, 488, 490, 491, 494, 495, 496, 502, 503, 510, 511, 512, 527, 541, 542, 543, 544, 546, 550, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 614, 615, 616, 617, 619, 620, 621, 624, 625, 626, 629, 632, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 676, 677, 683, 684, 685, 686, 687, 688, 690, 691, 692, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 723, 742, 745, 748, 751, 753, 755, 756, 757, 759, 766, 770, 773, 775, 777, 778, 779], "classifi": [3, 10, 12, 25, 26, 39, 41, 42, 742, 789, 790], "prob": [3, 41, 51, 55, 74, 78, 83, 347, 354, 370, 371, 372, 459, 585, 592, 608, 685, 724, 742], "linear": [3, 12, 24, 25, 26, 37, 38, 39, 41, 44, 51, 52, 55, 67, 74, 75, 78, 101, 103, 105, 106, 109, 290, 291, 293, 294, 327, 339, 344, 347, 350, 359, 382, 439, 482, 499, 522, 575, 583, 585, 590, 611, 633, 672, 723, 724, 742, 755, 760, 764, 765, 767, 768, 770, 773, 775, 778, 779, 780, 790, 793, 794, 795, 798], "4096": 3, "_forward": [3, 5, 6, 8, 25, 26, 37, 38, 41, 742, 760, 775, 778, 779], "x": [3, 5, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 163, 164, 166, 171, 187, 188, 192, 197, 198, 199, 203, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 307, 308, 311, 313, 314, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 424, 426, 427, 429, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 531, 532, 533, 536, 539, 540, 541, 542, 543, 544, 546, 548, 549, 550, 562, 563, 565, 566, 567, 569, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 668, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 727, 730, 733, 736, 740, 742, 747, 752, 753, 755, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 789, 790], "reshap": [3, 25, 26, 41, 42, 51, 55, 56, 58, 68, 74, 78, 79, 81, 334, 344, 347, 348, 350, 365, 366, 367, 370, 383, 384, 385, 386, 388, 392, 406, 429, 563, 583, 585, 586, 588, 601, 603, 607, 625, 641, 742, 767, 768, 770, 773, 775, 777, 780], "bidirect": 4, "encod": [4, 10, 12, 25, 26, 39, 41, 52, 57, 75, 80, 499, 583, 587, 643, 742, 778, 786, 790], "mlm": 4, "support": [4, 16, 25, 28, 40, 49, 51, 52, 56, 72, 74, 75, 79, 138, 157, 161, 183, 190, 205, 214, 231, 238, 259, 260, 264, 274, 289, 307, 323, 339, 341, 344, 347, 348, 382, 395, 488, 500, 509, 512, 513, 530, 544, 578, 579, 580, 581, 583, 585, 586, 609, 618, 619, 620, 623, 625, 634, 641, 728, 733, 736, 745, 747, 748, 749, 751, 752, 758, 759, 760, 763, 764, 766, 767, 769, 770, 771, 773, 774, 775, 777, 778, 780, 782, 783, 785, 786, 787, 790, 792, 794, 795, 798, 800, 801, 802], "googl": [4, 39, 40, 41, 43, 756, 786], "type": [4, 6, 10, 12, 16, 22, 25, 26, 31, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 723, 724, 726, 730, 733, 736, 737, 740, 742, 747, 748, 749, 750, 751, 752, 755, 758, 759, 760, 761, 763, 765, 767, 769, 770, 771, 773, 775, 777, 778, 789, 790, 795, 796, 799], "choos": [4, 39, 41, 49, 61, 62, 72, 205, 231, 238, 259, 260, 264, 350, 580, 581, 593, 594, 596, 695, 696, 697, 698, 699, 707, 708, 709, 711, 747, 748, 749, 765, 770, 776, 780, 789], "librari": [4, 6, 8, 14, 15, 21, 23, 37, 39, 49, 62, 72, 205, 236, 238, 254, 259, 260, 282, 580, 581, 586, 594, 596, 619, 620, 696, 697, 698, 699, 707, 708, 709, 711, 742, 747, 748, 751, 780, 781, 785, 786, 787, 789, 791, 792, 793, 795, 799, 802], "pretrain": [4, 6, 10, 11, 12, 25, 26, 44, 742, 790], "save": [4, 39, 51, 68, 74, 359, 480, 539, 561, 580, 583, 597, 726, 748, 756, 762, 770, 781, 787, 794], "some": [4, 5, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 30, 31, 37, 41, 42, 68, 76, 236, 238, 254, 347, 370, 371, 372, 564, 565, 568, 570, 571, 572, 580, 581, 584, 590, 676, 724, 742, 745, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 781, 782, 783, 786, 787, 789, 790, 791, 792, 794, 795, 796, 801, 802], "mohame54": 4, "automodel": [4, 8, 25], "autotoken": 4, "load": [4, 6, 8, 22, 25, 39, 40, 41, 42, 43, 44, 68, 348, 409, 597, 726, 742, 770, 781, 794, 801], "token": [4, 41], "bert_bas": 4, "from_pretrain": [4, 8, 25, 42, 789, 790], "base": [4, 39, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 98, 130, 138, 170, 234, 235, 252, 253, 254, 255, 269, 302, 307, 313, 316, 320, 327, 341, 344, 347, 348, 357, 389, 409, 465, 532, 542, 554, 578, 579, 581, 583, 586, 588, 594, 596, 625, 649, 696, 697, 698, 699, 706, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 737, 740, 742, 748, 749, 751, 755, 756, 757, 761, 763, 765, 766, 767, 769, 770, 771, 772, 773, 775, 795, 800, 802], "uncas": 4, "eval": [4, 5, 7, 726], "evalu": [4, 50, 51, 68, 73, 74, 234, 236, 252, 253, 254, 255, 259, 266, 268, 275, 279, 328, 348, 350, 406, 436, 574, 581, 584, 590, 597, 675, 676, 714, 715, 725, 726, 749, 755, 757, 764, 765, 795], "bert_token": 4, "sampl": [4, 6, 8, 10, 12, 22, 25, 26, 40, 47, 50, 51, 60, 64, 70, 73, 74, 83, 87, 129, 130, 283, 302, 341, 347, 350, 354, 370, 371, 372, 382, 442, 459, 460, 461, 462, 463, 578, 581, 592, 596, 685, 686, 687, 688, 711, 713, 724, 769, 770], "test": [4, 17, 18, 20, 21, 27, 28, 30, 31, 32, 40, 41, 50, 52, 65, 73, 75, 88, 117, 162, 166, 245, 246, 247, 248, 271, 347, 370, 371, 372, 519, 577, 579, 581, 583, 597, 714, 715, 742, 745, 746, 747, 750, 754, 757, 759, 761, 762, 765, 768, 771, 781, 782, 787, 789, 790, 795], "did": [4, 39, 747, 754, 780, 786, 801], "realli": [4, 37, 748, 755, 781, 789, 800, 801], "like": [4, 6, 8, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 42, 44, 47, 50, 51, 58, 70, 73, 74, 78, 81, 86, 130, 147, 170, 215, 235, 241, 244, 257, 275, 317, 320, 332, 344, 347, 348, 350, 357, 359, 389, 390, 395, 420, 421, 429, 465, 466, 482, 578, 579, 581, 586, 588, 592, 595, 618, 653, 688, 701, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 777, 778, 779, 780, 781, 786, 789, 790, 795, 800], "input": [4, 5, 8, 10, 12, 22, 23, 25, 30, 31, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 185, 187, 188, 201, 204, 205, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 526, 527, 528, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 556, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 723, 724, 726, 727, 736, 751, 752, 753, 755, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 789, 790, 796, 799], "pad": [4, 39, 41, 51, 55, 58, 74, 78, 81, 347, 350, 365, 366, 367, 368, 369, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 499, 583, 585, 588, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 648, 661, 724, 742], "longest": 4, "return_tensor": [4, 8, 25, 42, 789, 790], "pt": [4, 8, 25, 789], "max_length": [4, 68], "512": [4, 5, 39, 41, 79, 585, 600, 639, 742], "input_id": 4, "101": [4, 40, 585, 586, 590, 609, 622, 671], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 51, 74, 83, 368, 686], "token_type_id": 4, "attention_mask": [4, 55, 78, 585, 611], "pooler": 4, "compar": [4, 6, 8, 25, 38, 42, 44, 51, 52, 62, 63, 68, 74, 75, 86, 312, 325, 344, 484, 487, 583, 594, 595, 696, 697, 698, 699, 700, 703, 742, 753, 759, 761, 769, 770, 773, 778, 791, 793, 795, 801, 802], "no_grad": [4, 39, 789], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 6, 38, 41, 47, 51, 55, 56, 60, 70, 73, 74, 78, 79, 83, 91, 114, 124, 136, 137, 138, 258, 296, 307, 308, 341, 348, 350, 354, 357, 359, 393, 405, 445, 448, 459, 460, 461, 462, 463, 466, 476, 487, 577, 578, 583, 585, 586, 590, 592, 593, 612, 616, 624, 625, 631, 633, 634, 635, 638, 673, 686, 687, 688, 694, 742, 750, 751, 768, 769, 775, 789, 791, 795], "ivy_output": [4, 42], "logits_clos": 4, "allclos": [4, 6, 8, 10, 12, 25, 42, 44, 51, 74, 344], "detach": [4, 6, 8, 10, 12, 25, 766], "rtol": [4, 10, 12, 51, 56, 74, 79, 312, 325, 344, 586, 627, 630, 769], "005": [4, 51, 74, 312, 325, 344, 412], "atol": [4, 6, 8, 25, 51, 56, 74, 79, 312, 325, 344, 586, 627, 769], "equal": [4, 47, 48, 50, 51, 52, 56, 57, 58, 60, 62, 63, 64, 68, 71, 73, 74, 75, 79, 80, 81, 83, 86, 93, 94, 124, 126, 127, 128, 134, 135, 143, 223, 225, 229, 234, 236, 245, 246, 267, 269, 274, 277, 278, 282, 309, 310, 312, 325, 341, 344, 347, 350, 353, 359, 369, 425, 434, 451, 456, 457, 458, 476, 484, 487, 563, 578, 579, 581, 583, 586, 587, 588, 592, 593, 594, 595, 596, 617, 626, 627, 630, 632, 638, 643, 646, 648, 653, 655, 661, 688, 694, 696, 697, 698, 699, 700, 703, 708, 710, 711, 712, 713, 723, 724, 754, 755, 757, 759, 761, 769, 770], "els": [4, 5, 6, 40, 41, 43, 44, 51, 52, 60, 73, 74, 83, 149, 150, 151, 152, 153, 165, 271, 275, 348, 354, 399, 408, 410, 411, 460, 494, 498, 579, 581, 583, 590, 592, 675, 678, 686, 687, 688, 736, 742, 747, 748, 749, 751, 753, 757, 758, 761, 764, 767, 768, 769, 770, 771, 773, 775, 777, 779, 780, 781, 796], "768": 4, "fn": [4, 42, 44, 51, 68, 71, 74, 97, 157, 158, 190, 191, 194, 350, 418, 485, 500, 501, 550, 579, 580, 583, 590, 671, 672, 673, 675, 676, 677, 730, 733, 737, 738, 740, 758, 761, 767, 768, 775, 789], "finish": [4, 14, 25, 26, 37, 40, 742, 743, 747, 748, 750], "2f": [4, 6], "sec": 4, "89": [4, 37, 50, 60, 71, 73, 74, 83, 94, 159, 226, 579, 581, 586, 596, 636, 687, 688, 712], "43": [4, 37, 39, 41, 51, 74, 83, 94, 225, 347, 348, 359, 367, 394, 474, 581, 592, 593, 687, 688, 695], "procedur": [4, 754, 756, 759, 769], "60": [4, 37, 41, 50, 64, 73, 75, 83, 87, 215, 249, 503, 511, 527, 541, 563, 581, 583, 586, 590, 596, 629, 668, 686, 704, 706, 710, 756], "big": [4, 723, 743, 781, 795], "jnp": [4, 17, 22, 25, 26, 27, 28, 31, 37, 39, 43, 742, 757, 758, 761, 763, 767, 771, 775, 780, 790], "config": [4, 5, 6, 8, 19, 25, 26, 39, 40, 42, 68, 590, 678, 742, 748, 751, 754, 756, 762, 769, 778, 789, 796], "jax_enable_x64": [4, 5, 6, 8, 19, 25, 26, 742], "ref": [4, 5, 75, 79, 250, 264, 267, 273, 280, 581, 588, 657, 748, 767], "initi": [4, 25, 26, 42, 51, 55, 68, 74, 78, 94, 348, 359, 399, 408, 411, 481, 585, 610, 721, 722, 724, 725, 726, 728, 729, 742, 749, 753, 757, 758, 769, 770, 775, 786, 789, 790, 795, 801, 802], "fast": [4, 20, 30, 51, 347, 369, 795], "valu": [4, 37, 38, 40, 41, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 93, 94, 96, 109, 114, 115, 117, 118, 124, 127, 128, 129, 130, 133, 138, 143, 160, 164, 170, 203, 204, 211, 212, 213, 214, 216, 218, 219, 220, 227, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 289, 294, 296, 303, 307, 309, 310, 312, 313, 314, 316, 317, 318, 319, 322, 323, 325, 326, 328, 331, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 358, 359, 369, 382, 389, 393, 396, 399, 403, 408, 409, 410, 411, 412, 413, 415, 423, 428, 433, 439, 444, 446, 447, 448, 450, 453, 455, 459, 460, 462, 463, 469, 471, 474, 475, 476, 479, 480, 481, 482, 488, 490, 491, 492, 494, 499, 502, 503, 505, 507, 510, 511, 512, 519, 526, 527, 531, 532, 533, 536, 544, 549, 554, 555, 558, 561, 562, 563, 564, 565, 566, 570, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 619, 620, 625, 626, 627, 630, 631, 632, 633, 634, 635, 638, 641, 646, 647, 648, 652, 653, 661, 662, 663, 667, 669, 670, 671, 672, 673, 678, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 722, 723, 724, 725, 726, 727, 728, 745, 748, 749, 751, 754, 755, 757, 758, 759, 760, 761, 763, 764, 767, 768, 770, 772, 773, 775, 777, 781, 789, 795, 796], "demo": [5, 6, 7, 8, 26, 33, 37, 41, 742], "milesi": 5, "blob": [5, 39, 41], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 5, "util": [5, 23, 39, 42, 51, 74, 189, 348, 409, 580, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 748, 754, 758, 761, 764, 767, 770, 771, 775, 790, 793, 801, 802], "data_load": 5, "py": [5, 39, 41, 44, 87, 348, 409, 706, 733, 736, 742, 747, 748, 749, 751, 753, 756, 757, 758, 760, 761, 762, 763, 764, 768, 769, 770, 771, 775, 777, 779, 780], "l65": 5, "mask_valu": 5, "pil_img": 5, "scale": [5, 6, 39, 51, 55, 59, 74, 76, 78, 82, 103, 202, 203, 291, 302, 323, 339, 341, 344, 347, 348, 353, 364, 370, 371, 372, 380, 390, 401, 453, 454, 455, 571, 575, 580, 584, 585, 591, 608, 611, 612, 684, 723, 724, 728, 795, 797], "is_mask": 5, "w": [5, 40, 41, 51, 52, 53, 55, 68, 73, 74, 75, 76, 78, 91, 258, 323, 338, 344, 346, 347, 348, 365, 366, 367, 369, 383, 384, 385, 386, 397, 411, 472, 495, 497, 541, 564, 565, 566, 568, 570, 571, 572, 583, 584, 585, 590, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 671, 742, 750, 766, 775, 778, 779, 790], "h": [5, 51, 52, 55, 74, 75, 78, 347, 366, 367, 384, 385, 495, 497, 583, 585, 590, 598, 601, 602, 603, 604, 605, 606, 607, 668, 672, 674, 677, 682, 750, 754, 755, 756, 790, 791], "size": [5, 10, 12, 17, 20, 21, 27, 28, 30, 31, 32, 39, 41, 44, 51, 52, 55, 56, 58, 60, 61, 68, 74, 75, 78, 79, 81, 83, 84, 91, 93, 94, 126, 129, 202, 203, 204, 295, 298, 302, 309, 310, 311, 316, 330, 337, 341, 344, 345, 347, 348, 350, 353, 354, 357, 359, 361, 362, 363, 364, 365, 366, 382, 383, 384, 386, 387, 396, 408, 411, 425, 437, 448, 454, 455, 461, 466, 478, 479, 480, 481, 482, 521, 526, 578, 580, 583, 585, 586, 588, 592, 593, 597, 612, 614, 617, 621, 625, 629, 631, 634, 640, 649, 654, 655, 656, 685, 691, 694, 714, 715, 724, 742, 767, 769, 770, 773, 778, 789], "neww": 5, "newh": 5, "int": [5, 39, 42, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 97, 104, 108, 109, 119, 120, 124, 126, 127, 128, 129, 130, 133, 136, 137, 138, 145, 152, 155, 156, 159, 166, 181, 195, 196, 197, 204, 205, 214, 221, 222, 223, 224, 225, 226, 238, 241, 265, 274, 280, 283, 287, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 316, 317, 319, 323, 330, 332, 334, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 392, 396, 398, 399, 400, 402, 405, 407, 408, 410, 411, 414, 417, 418, 422, 424, 425, 428, 429, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 495, 496, 497, 499, 502, 503, 506, 521, 524, 526, 541, 542, 543, 547, 563, 564, 565, 566, 567, 570, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 614, 616, 617, 625, 626, 636, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 671, 672, 674, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 723, 724, 736, 755, 757, 758, 759, 761, 763, 764, 767, 769, 770, 771, 773, 775, 780, 789], "assert": [5, 40, 42, 44, 68, 488, 583, 745, 750, 751, 764, 767, 768, 769, 770, 771, 777, 778], "too": [5, 214, 231, 238, 264, 581, 723, 747, 748, 749, 751, 757, 761, 771, 781], "small": [5, 41, 50, 51, 56, 59, 73, 74, 79, 82, 231, 238, 264, 265, 312, 325, 344, 348, 353, 403, 453, 454, 455, 581, 586, 591, 627, 630, 632, 684, 723, 727, 742, 748, 756, 759, 764, 769, 773, 775, 779, 781, 789, 790, 796], "would": [5, 19, 25, 26, 29, 31, 33, 41, 47, 49, 51, 70, 72, 74, 81, 104, 108, 120, 205, 347, 350, 374, 379, 419, 420, 425, 427, 429, 430, 431, 438, 442, 451, 575, 580, 649, 650, 651, 653, 655, 656, 658, 660, 742, 743, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 759, 760, 763, 765, 767, 768, 769, 770, 771, 773, 774, 775, 777, 779, 780, 781, 782, 786, 789, 795, 801], "pixel": [5, 39, 51, 74, 347, 382], "resampl": 5, "nearest": [5, 51, 74, 214, 231, 264, 274, 319, 344, 347, 359, 382, 482, 581, 773], "bicub": [5, 51, 74, 347, 382, 773], "zero": [5, 39, 47, 48, 50, 51, 53, 55, 56, 58, 61, 62, 64, 65, 70, 71, 73, 74, 76, 78, 79, 83, 84, 87, 88, 103, 105, 106, 107, 109, 121, 122, 124, 126, 131, 133, 134, 135, 136, 137, 140, 143, 144, 212, 213, 214, 216, 217, 218, 219, 220, 223, 225, 226, 228, 229, 230, 231, 236, 237, 238, 245, 246, 247, 248, 254, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 281, 282, 284, 285, 286, 290, 291, 294, 296, 308, 315, 316, 317, 319, 327, 330, 332, 333, 334, 335, 339, 341, 344, 347, 348, 350, 357, 359, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 389, 390, 394, 396, 406, 433, 438, 439, 465, 474, 475, 491, 495, 502, 522, 564, 565, 570, 571, 572, 573, 575, 578, 579, 581, 583, 584, 585, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 612, 613, 615, 620, 622, 623, 624, 625, 626, 627, 628, 630, 632, 640, 641, 648, 649, 650, 651, 653, 654, 661, 684, 686, 687, 688, 691, 692, 693, 694, 696, 697, 698, 699, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 728, 752, 755, 757, 758, 759, 763, 765, 766, 769, 775, 778, 779, 787, 794], "int64": [5, 51, 60, 61, 63, 64, 71, 83, 84, 86, 87, 134, 146, 152, 155, 157, 159, 163, 164, 168, 175, 292, 299, 339, 341, 357, 359, 466, 474, 475, 578, 579, 593, 595, 596, 686, 691, 692, 693, 702, 704, 705, 710, 712, 757, 768, 770, 775], "enumer": [5, 39, 41, 722, 742], "ndim": [5, 51, 56, 61, 74, 79, 84, 93, 97, 348, 350, 407, 408, 411, 419, 420, 421, 432, 440, 442, 449, 563, 583, 586, 593, 631, 634, 694, 755, 764, 770], "newaxi": [5, 576], "transpos": [5, 22, 25, 26, 43, 51, 55, 56, 68, 74, 78, 79, 93, 348, 391, 405, 407, 472, 585, 586, 598, 600, 602, 604, 605, 606, 624, 628, 630, 636, 724, 742, 767, 777, 780, 790], "255": [5, 22, 25, 26, 39, 40, 41, 43, 55, 74, 78, 225, 581, 607, 742, 790], "car": 5, "full_img": 5, "from_numpi": [5, 778], "fals": [5, 6, 8, 12, 16, 25, 28, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 187, 188, 193, 195, 198, 199, 201, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 311, 312, 313, 314, 316, 318, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 382, 383, 384, 385, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 465, 466, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 522, 526, 527, 528, 531, 534, 535, 537, 538, 540, 541, 542, 544, 546, 548, 549, 551, 556, 557, 559, 560, 562, 565, 566, 568, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 675, 676, 677, 678, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 724, 725, 726, 728, 730, 733, 736, 737, 740, 742, 745, 748, 751, 753, 756, 757, 758, 759, 761, 767, 768, 769, 770, 772, 773, 775, 778, 779, 780, 789, 790], "permut": [5, 7, 39, 58, 81, 93, 357, 465, 588, 651, 658, 790], "img_numpi": 5, "cpu": [5, 6, 8, 25, 39, 40, 41, 43, 44, 47, 49, 51, 60, 70, 72, 74, 83, 118, 124, 127, 129, 130, 133, 134, 135, 140, 184, 185, 187, 188, 189, 190, 195, 198, 200, 202, 205, 206, 208, 210, 354, 459, 460, 462, 463, 578, 580, 586, 592, 623, 685, 686, 687, 688, 723, 724, 725, 726, 727, 728, 729, 742, 745, 748, 749, 754, 757, 758, 768, 770, 781, 793, 795, 798, 800], "torch_unet": 5, "unet_carvana": 5, "when": [5, 7, 16, 18, 20, 21, 25, 26, 28, 30, 31, 32, 40, 42, 46, 47, 48, 50, 51, 56, 57, 60, 61, 64, 68, 70, 71, 73, 74, 79, 80, 83, 84, 87, 94, 133, 143, 214, 231, 236, 238, 254, 264, 269, 282, 283, 287, 339, 347, 348, 350, 353, 354, 359, 369, 382, 396, 399, 408, 411, 444, 453, 455, 460, 480, 482, 512, 528, 536, 542, 578, 579, 581, 583, 585, 586, 587, 588, 590, 592, 593, 596, 598, 611, 627, 632, 643, 644, 645, 653, 665, 666, 675, 676, 677, 686, 687, 688, 691, 692, 694, 695, 707, 709, 711, 713, 722, 723, 724, 725, 726, 727, 733, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 780, 781, 782, 785, 786, 789, 790, 793, 795, 798, 799, 800, 801], "ivy_unet": 5, "n_channel": 5, "n_class": 5, "forward": [5, 7, 12, 25, 26, 39, 41, 51, 74, 347, 369, 374, 375, 379, 380, 390, 721, 723, 725, 726, 728, 742, 748, 753, 760, 766, 770, 771, 773, 780, 781, 789, 795, 796], "effici": [5, 6, 7, 8, 14, 15, 17, 18, 25, 26, 27, 28, 56, 79, 348, 349, 403, 414, 586, 627, 742, 748, 749, 755, 764, 765, 767, 770, 775, 778, 781, 790, 795, 797, 798], "l62": 5, "mask_to_imag": 5, "ndarrai": [5, 47, 51, 52, 70, 74, 119, 120, 132, 347, 348, 350, 359, 390, 408, 444, 479, 480, 548, 578, 583, 733, 736, 747, 752, 757, 758, 761, 763, 767, 768, 769, 771, 773, 775, 777, 780, 783], "isinst": [5, 23, 25, 26, 761, 768, 770, 771, 779, 780], "len": [5, 39, 41, 47, 51, 56, 74, 79, 131, 299, 341, 347, 348, 359, 380, 390, 398, 400, 408, 411, 482, 578, 586, 639, 742, 755, 756, 761, 767, 768, 770, 777, 780, 789], "uint8": [5, 22, 25, 26, 41, 146, 153, 157, 168, 171, 176, 182, 292, 339, 579, 757, 770], "elif": [5, 6, 756, 761, 767, 768, 769], "bool": [5, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 119, 120, 121, 126, 127, 128, 129, 130, 131, 133, 135, 140, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 179, 183, 187, 188, 190, 191, 193, 195, 198, 199, 204, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 308, 312, 313, 314, 316, 318, 324, 325, 330, 331, 333, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 359, 365, 366, 367, 369, 370, 371, 372, 382, 383, 384, 385, 388, 396, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 427, 428, 429, 430, 431, 434, 438, 442, 445, 447, 448, 451, 453, 455, 456, 457, 458, 460, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 526, 527, 531, 540, 541, 542, 544, 546, 548, 549, 562, 565, 566, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 611, 612, 613, 614, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 634, 638, 639, 641, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 671, 672, 673, 675, 676, 677, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 724, 727, 728, 736, 740, 757, 759, 761, 767, 768, 770, 771, 773, 775, 780, 789, 790], "argmax": [5, 40, 41, 42, 61, 84, 593, 742, 768, 789], "fromarrai": [5, 22, 25, 26, 41], "interpol": [5, 39, 51, 74, 327, 344, 347, 359, 482, 585, 611, 773, 795], "mode": [5, 31, 43, 51, 56, 68, 74, 79, 90, 91, 92, 201, 204, 209, 214, 231, 264, 306, 341, 347, 348, 350, 377, 382, 390, 398, 399, 405, 407, 408, 411, 423, 432, 437, 439, 440, 442, 444, 447, 449, 528, 529, 530, 534, 535, 537, 538, 551, 552, 556, 557, 559, 560, 580, 581, 583, 586, 631, 724, 725, 726, 739, 748, 749, 750, 755, 758, 759, 773, 781, 795, 798], "bilinear": [5, 51, 74, 347, 382, 773], "torch_mask": 5, "squeez": [5, 39, 58, 81, 588, 795], "torch_result": 5, "to_numpi": [5, 25, 26, 37, 40, 41, 44, 52, 75, 583, 742, 769, 778], "give": [5, 17, 27, 37, 51, 55, 78, 170, 347, 389, 579, 585, 588, 598, 599, 600, 601, 603, 605, 607, 653, 722, 723, 742, 748, 749, 750, 753, 756, 757, 759, 760, 762, 763, 770, 787, 795, 799], "img_tf": 5, "math": [5, 42, 281, 581, 767, 768, 769, 780, 793], "ve": [5, 14, 23, 25, 60, 83, 592, 685, 747, 748, 749, 770, 773, 774, 777, 783], "lot": [5, 742, 756, 757, 765, 770, 781, 786, 787, 794], "far": [5, 25, 26, 590, 665, 676, 758, 759, 776, 800, 801], "space": [5, 47, 50, 51, 52, 70, 73, 74, 75, 118, 129, 130, 283, 323, 344, 495, 499, 578, 581, 583, 773, 786], "del": [5, 756], "empty_cach": 5, "permute_dim": [5, 58, 81, 588], "usr": [5, 39, 40, 41, 44, 748], "local": [5, 8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 32, 39, 40, 41, 44, 743, 748, 751, 754, 764, 769, 770], "lib": [5, 39, 40, 41, 44], "python3": [5, 7, 25, 39, 41, 44, 742, 748, 749], "dist": [5, 39, 40, 41, 44], "func_wrapp": [5, 45, 50, 67, 73, 101, 103, 106, 108, 109, 282, 575, 581, 720, 758, 768, 772], "242": [5, 74], "userwarn": [5, 44], "creat": [5, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 31, 32, 39, 40, 41, 43, 44, 47, 50, 51, 60, 68, 70, 73, 74, 79, 83, 118, 119, 120, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 265, 295, 296, 305, 306, 307, 341, 347, 348, 350, 354, 365, 366, 367, 388, 399, 408, 411, 417, 439, 444, 459, 460, 461, 462, 463, 530, 546, 563, 574, 578, 581, 583, 584, 592, 629, 685, 686, 687, 688, 690, 721, 723, 724, 725, 726, 727, 728, 729, 743, 748, 749, 752, 753, 754, 756, 757, 758, 761, 764, 765, 767, 768, 769, 770, 773, 775, 776, 779, 782, 783, 786, 789, 790, 795, 796, 801], "mani": [5, 25, 26, 29, 58, 68, 81, 138, 307, 341, 578, 588, 655, 722, 742, 747, 748, 749, 752, 753, 755, 756, 757, 758, 759, 760, 763, 764, 765, 767, 768, 769, 770, 773, 775, 777, 778, 781, 785, 786, 787, 791, 795, 798, 801, 802], "view": [5, 51, 58, 74, 93, 125, 350, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 505, 578, 583, 588, 649, 650, 651, 653, 655, 656, 658, 660, 748, 749, 761, 795], "lead": [5, 56, 68, 79, 94, 238, 348, 403, 530, 581, 583, 586, 631, 634, 756, 757, 759, 771, 781, 786, 787], "overhead": [5, 18, 25, 26, 28, 781, 789, 798], "perform": [5, 18, 20, 22, 25, 26, 28, 30, 37, 39, 47, 51, 55, 56, 64, 65, 70, 74, 75, 78, 79, 87, 88, 104, 108, 129, 130, 201, 209, 231, 264, 285, 317, 337, 344, 345, 347, 348, 350, 357, 359, 369, 370, 371, 372, 374, 375, 379, 380, 388, 408, 418, 466, 474, 475, 495, 496, 497, 510, 511, 512, 528, 538, 575, 578, 580, 581, 583, 585, 586, 589, 590, 596, 597, 608, 610, 634, 636, 641, 662, 663, 664, 672, 673, 704, 705, 714, 715, 724, 751, 752, 753, 755, 757, 758, 759, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 778, 781, 787, 789, 790, 792, 795, 796, 797, 798, 799, 800, 802], "inplac": [5, 46, 52, 68, 75, 91, 486, 488, 509, 512, 513, 530, 531, 583, 590, 672, 673, 677, 682, 683, 721, 728, 750, 752, 759, 763, 765, 768, 773, 777, 779], "17": [5, 21, 37, 39, 41, 44, 45, 51, 56, 67, 73, 74, 75, 76, 78, 79, 83, 94, 103, 104, 130, 214, 231, 256, 264, 295, 337, 341, 347, 350, 365, 366, 374, 375, 378, 379, 383, 384, 386, 389, 429, 496, 511, 564, 566, 575, 578, 581, 583, 584, 585, 586, 590, 592, 599, 608, 609, 617, 621, 673, 686, 687, 688, 690, 755], "factor": [5, 51, 53, 55, 56, 74, 76, 78, 79, 90, 91, 202, 203, 204, 347, 348, 380, 390, 399, 400, 408, 411, 564, 565, 570, 571, 580, 584, 585, 586, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 723, 724, 728, 761, 786], "inc": 5, "unetdoubleconv": 5, "down1": 5, "unetdown": 5, "128": [5, 25, 26, 39, 48, 50, 55, 71, 73, 78, 94, 159, 235, 347, 368, 378, 495, 505, 579, 581, 583, 585, 586, 600, 602, 607, 629, 742], "down2": 5, "down3": 5, "down4": 5, "1024": [5, 39, 40, 742], "up1": 5, "unetup": 5, "up2": 5, "up3": 5, "up4": 5, "outc": 5, "unetoutconv": 5, "x1": [5, 16, 25, 26, 44, 48, 50, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 86, 93, 94, 98, 144, 154, 170, 177, 197, 214, 219, 221, 223, 224, 225, 226, 231, 232, 238, 239, 240, 241, 242, 243, 249, 250, 251, 256, 257, 258, 260, 261, 262, 263, 264, 267, 269, 273, 280, 285, 296, 312, 315, 320, 321, 322, 324, 326, 331, 335, 341, 344, 350, 359, 433, 473, 484, 487, 579, 580, 581, 583, 586, 593, 595, 614, 621, 624, 629, 633, 636, 637, 640, 695, 702, 730, 742, 751, 757, 759, 761, 763, 767, 768, 790], "x2": [5, 16, 25, 26, 48, 50, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 93, 94, 98, 144, 170, 177, 197, 214, 219, 221, 223, 224, 225, 226, 231, 232, 238, 239, 240, 241, 242, 243, 249, 250, 251, 256, 257, 258, 260, 261, 262, 263, 264, 267, 269, 273, 280, 285, 312, 315, 320, 321, 322, 324, 326, 331, 335, 344, 350, 359, 398, 433, 473, 484, 579, 580, 581, 583, 586, 593, 614, 621, 624, 629, 633, 636, 637, 640, 695, 730, 751, 757, 759, 761, 763, 767, 768], "x3": [5, 48, 52, 144, 484, 579, 583], "x4": 5, "x5": 5, "in_channel": 5, "out_channel": 5, "mid_channel": 5, "double_conv": 5, "with_bia": [5, 724, 742, 779, 790], "batchnorm2d": [5, 727], "downscal": [5, 52, 75, 490, 491, 512, 583], "maxpool": 5, "doubl": [5, 292, 339], "conv": [5, 585, 724, 773], "maxpool_conv": 5, "upscal": 5, "scale_factor": [5, 51, 74, 347, 382, 773], "align_corn": [5, 51, 74, 347, 382, 773], "conv2dtranspos": [5, 724], "valid": [5, 39, 41, 51, 55, 65, 74, 78, 88, 91, 148, 347, 348, 365, 366, 367, 383, 384, 385, 386, 388, 389, 406, 411, 515, 579, 583, 585, 588, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 649, 657, 714, 715, 724, 736, 748, 753, 757, 759, 762, 766, 769, 770, 789, 796], "bhwc": 5, "diff_h": 5, "diff_w": 5, "pad_width": [5, 51, 58, 74, 81, 350, 439, 588, 648, 661], "constant_pad": [5, 58, 81, 588], "concat": [5, 37, 42, 52, 58, 68, 81, 204, 499, 580, 583, 588, 661, 769, 773, 775, 789], "openmim": 6, "mim": 6, "0rc8": 6, "torch": [6, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 42, 43, 44, 47, 52, 56, 66, 75, 79, 121, 158, 185, 186, 200, 202, 274, 488, 512, 544, 578, 579, 580, 581, 583, 586, 589, 634, 664, 721, 733, 742, 745, 748, 749, 751, 752, 753, 754, 756, 757, 758, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 780, 781, 783, 789, 790, 801], "request": [6, 8, 22, 25, 26, 39, 42, 51, 195, 354, 463, 580, 742, 743, 747, 759, 762, 771, 773, 787, 790], "get_model": 6, "list_model": 6, "mmengin": 6, "configdict": 6, "saniti": [6, 8, 25, 768], "checkpoint": [6, 42, 781], "correct": [6, 10, 12, 21, 31, 37, 39, 41, 64, 87, 177, 348, 409, 579, 588, 596, 646, 711, 713, 742, 747, 749, 750, 755, 756, 757, 758, 761, 763, 764, 767, 769, 770, 790], "against": [6, 48, 51, 52, 56, 61, 71, 73, 74, 75, 79, 84, 144, 263, 282, 312, 313, 316, 325, 344, 359, 479, 480, 481, 482, 519, 579, 581, 583, 586, 593, 624, 625, 627, 630, 691, 770, 775, 781, 785, 795], "zoo": 6, "checkpoint_nam": [6, 8, 25], "convnext": 6, "tiny_32xb128": 6, "noema_in1k": 6, "openmmlab": 6, "dure": [6, 8, 18, 20, 25, 28, 30, 31, 49, 53, 64, 68, 72, 76, 87, 205, 347, 370, 371, 372, 530, 550, 564, 565, 570, 580, 583, 584, 585, 586, 589, 596, 608, 624, 662, 663, 664, 711, 713, 722, 725, 726, 727, 728, 748, 755, 757, 758, 761, 764, 765, 767, 768, 769, 770, 773, 781, 789, 795, 796, 801], "trace": [6, 8, 20, 22, 25, 26, 28, 30, 31, 43, 52, 56, 68, 75, 79, 514, 515, 518, 529, 538, 552, 560, 583, 586, 742, 751, 757, 772, 775, 781, 783, 789, 790, 796, 801], "appropri": [6, 16, 25, 26, 52, 61, 66, 84, 89, 214, 231, 238, 264, 312, 325, 344, 581, 593, 691, 747, 748, 749, 761, 765, 770], "get_scal": 6, "cfg": [6, 762], "kei": [6, 18, 19, 25, 26, 41, 43, 46, 51, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 159, 163, 164, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 312, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 357, 370, 371, 372, 412, 413, 415, 416, 424, 445, 448, 453, 455, 456, 457, 458, 460, 466, 473, 474, 475, 476, 484, 485, 487, 488, 490, 491, 492, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 583, 585, 589, 590, 599, 600, 601, 602, 608, 609, 611, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 662, 663, 668, 674, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 721, 722, 724, 728, 742, 754, 755, 756, 764, 767, 768, 769, 770, 778, 790, 795, 798, 802], "input_shap": [6, 12, 23, 25, 26, 347, 387, 742], "block": [6, 25, 26, 29, 30, 31, 32, 348, 401, 742, 749, 755, 757, 761, 764, 770, 774, 776, 780, 781, 783, 790, 800, 802], "url": [6, 8, 22, 25, 26, 39, 42, 742, 790], "cocodataset": [6, 8, 22, 25, 26, 42, 742, 790], "org": [6, 8, 22, 25, 26, 39, 41, 42, 44, 50, 73, 76, 138, 146, 234, 244, 245, 260, 307, 341, 359, 473, 564, 565, 578, 579, 581, 584, 586, 588, 596, 632, 661, 711, 742, 760, 790], "val2017": [6, 8, 25, 42], "000000039769": [6, 8, 25, 42], "stream": [6, 8, 22, 25, 26, 39, 42, 49, 72, 205, 580, 742, 790, 799], "_config": 6, "train_pipelin": 6, "tensor_imag": 6, "And": [6, 8, 10, 12, 17, 20, 25, 26, 27, 40, 71, 742, 751, 754, 762, 764, 770, 789], "final": [6, 8, 10, 12, 14, 22, 25, 26, 31, 37, 38, 47, 52, 74, 75, 91, 117, 129, 130, 347, 390, 499, 577, 578, 583, 585, 611, 747, 749, 751, 752, 753, 754, 756, 757, 759, 760, 764, 766, 767, 768, 773, 774, 778, 789, 790, 791, 801], "transpiled_graph": [6, 8, 25], "what": [6, 8, 14, 19, 25, 26, 29, 30, 33, 38, 39, 347, 380, 390, 742, 749, 750, 755, 756, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 774, 775, 777, 778, 779, 780, 781, 786, 787, 791, 796, 797, 800], "improv": [6, 8, 25, 28, 749, 757, 763, 764, 773, 775, 783, 787, 789, 793, 795, 797, 798], "For": [6, 7, 8, 16, 18, 25, 26, 28, 31, 33, 47, 51, 56, 62, 74, 79, 118, 131, 211, 212, 213, 214, 216, 217, 218, 219, 220, 227, 228, 229, 231, 232, 234, 236, 237, 238, 245, 246, 247, 252, 253, 254, 255, 256, 259, 264, 266, 267, 269, 273, 274, 275, 276, 277, 278, 281, 282, 284, 309, 310, 314, 333, 341, 344, 348, 350, 405, 407, 421, 439, 442, 578, 581, 586, 588, 594, 596, 632, 634, 638, 646, 657, 696, 697, 698, 699, 707, 709, 710, 712, 721, 747, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 785, 786, 787, 789, 792, 793, 796, 801, 802], "origin": [6, 8, 23, 25, 26, 27, 28, 29, 31, 38, 39, 40, 44, 51, 56, 58, 64, 68, 74, 79, 81, 87, 91, 93, 94, 219, 244, 271, 302, 341, 348, 350, 359, 408, 432, 438, 440, 443, 474, 475, 479, 480, 481, 482, 581, 586, 588, 596, 625, 653, 654, 705, 733, 742, 747, 748, 749, 753, 754, 756, 757, 765, 767, 768, 769, 775, 787, 789, 790, 795, 796], "_f": [6, 8, 25], "comp_model": [6, 8, 25], "equival": [6, 8, 25, 56, 79, 91, 118, 225, 238, 259, 260, 273, 274, 350, 450, 578, 581, 586, 627, 630, 633, 641, 733, 767, 768, 773, 778, 780, 782, 790], "just": [6, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 37, 39, 41, 51, 56, 64, 79, 91, 138, 307, 341, 348, 407, 578, 586, 596, 627, 706, 724, 742, 748, 749, 751, 753, 756, 757, 758, 759, 760, 764, 765, 767, 768, 769, 770, 775, 777, 778, 781, 786, 787, 790, 795, 796, 801], "np_imag": [6, 22, 25, 26], "jax_imag": 6, "hk": [6, 8, 25, 39, 43, 742, 780, 790], "rng_kei": [6, 8, 25, 742, 790], "random": [6, 8, 10, 12, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 30, 31, 32, 39, 41, 42, 51, 55, 68, 74, 78, 305, 306, 341, 348, 399, 408, 411, 459, 460, 461, 462, 463, 585, 608, 685, 686, 687, 688, 689, 690, 723, 736, 742, 747, 758, 769, 770, 771, 780, 790, 795], "prngkei": [6, 8, 18, 19, 25, 26, 39, 742, 780, 790], "42": [6, 8, 18, 19, 25, 26, 37, 39, 40, 45, 60, 67, 76, 83, 109, 225, 347, 368, 378, 564, 568, 575, 581, 584, 586, 591, 592, 596, 625, 629, 684, 685, 686, 687, 688, 689, 704, 706, 742, 775, 780, 790], "jax_mlp_forward": 6, "param": [6, 8, 25, 39, 40, 41, 43, 68, 75, 94, 485, 502, 503, 583, 730, 742, 780, 790], "init": [6, 8, 25, 39, 41, 51, 74, 348, 399, 408, 411, 723, 742, 751, 780, 790], "rng": [6, 8, 25, 39, 742, 780, 790], "appli": [6, 8, 22, 25, 26, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 344, 345, 347, 348, 349, 350, 353, 359, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 382, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 575, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 629, 630, 631, 632, 634, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 674, 677, 678, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 720, 724, 727, 742, 747, 748, 749, 752, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 771, 773, 777, 778, 779, 780, 781, 789, 790, 796], "both": [6, 7, 8, 10, 12, 20, 22, 25, 26, 30, 31, 38, 40, 47, 50, 51, 52, 55, 56, 70, 73, 74, 75, 78, 79, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 146, 162, 166, 169, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 308, 314, 315, 317, 320, 325, 341, 344, 347, 348, 350, 354, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 433, 439, 459, 473, 476, 502, 506, 508, 510, 519, 549, 573, 574, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 742, 747, 749, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 767, 768, 770, 773, 775, 777, 778, 779, 780, 781, 789, 790, 795, 798, 800, 801, 802], "optim": [6, 8, 16, 25, 26, 39, 41, 42, 44, 53, 76, 295, 341, 349, 414, 486, 572, 583, 584, 589, 662, 663, 664, 723, 742, 757, 767, 773, 776, 778, 780, 787, 790, 793, 794, 795, 796, 797, 798, 799, 802], "each": [6, 8, 18, 19, 20, 25, 26, 28, 29, 30, 32, 39, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 61, 62, 64, 68, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 87, 91, 93, 94, 102, 103, 105, 106, 107, 109, 114, 131, 144, 156, 159, 204, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 290, 291, 293, 294, 299, 306, 309, 310, 314, 320, 324, 328, 333, 336, 339, 341, 344, 347, 348, 350, 354, 357, 359, 365, 366, 367, 370, 371, 372, 375, 383, 384, 385, 386, 389, 390, 395, 396, 400, 407, 408, 410, 411, 419, 420, 421, 424, 425, 430, 431, 433, 434, 436, 438, 439, 442, 450, 451, 459, 466, 471, 472, 473, 474, 475, 476, 484, 487, 495, 502, 503, 519, 543, 563, 565, 566, 568, 570, 571, 572, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 590, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615, 618, 619, 620, 624, 626, 627, 628, 630, 632, 633, 634, 639, 648, 652, 654, 655, 657, 659, 661, 671, 678, 685, 694, 696, 697, 699, 705, 706, 713, 724, 727, 728, 729, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 780, 781, 785, 786, 787, 789, 790, 791, 792, 796, 798, 801], "timeit": [6, 8, 18, 25, 26, 42, 44], "06": [6, 41, 48, 60, 73, 76, 92, 101, 156, 213, 229, 347, 368, 378, 570, 575, 579, 584, 688, 770, 778], "m": [6, 7, 8, 25, 38, 40, 42, 44, 47, 51, 56, 60, 73, 74, 79, 83, 93, 131, 136, 137, 138, 258, 307, 308, 341, 347, 348, 349, 350, 354, 369, 395, 399, 400, 402, 412, 421, 430, 431, 445, 459, 460, 461, 462, 463, 578, 586, 590, 592, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 673, 686, 687, 688, 742, 748, 749, 750, 756, 775], "per": [6, 8, 18, 39, 41, 51, 55, 74, 78, 302, 341, 347, 348, 350, 365, 366, 367, 383, 384, 385, 386, 407, 446, 585, 599, 601, 602, 603, 604, 607, 611, 724, 749, 756, 765, 768, 778], "loop": [6, 8, 18, 33, 66, 89, 114, 117, 577, 589, 662, 663, 664, 742, 753, 781, 789], "100": [6, 8, 37, 39, 41, 47, 50, 51, 70, 73, 74, 75, 78, 92, 130, 138, 225, 265, 278, 307, 325, 334, 341, 344, 347, 348, 370, 371, 408, 411, 503, 511, 527, 578, 581, 583, 586, 590, 622, 671, 742, 756, 757, 770, 778, 779, 780, 781, 786, 787, 789], "block_until_readi": 6, "08": [6, 51, 64, 74, 83, 217, 312, 325, 344, 347, 368, 378, 581, 687, 688, 713, 762], "\u00b5": [6, 8, 18], "made": [6, 8, 25, 51, 58, 74, 348, 350, 401, 419, 420, 421, 657, 747, 749, 751, 752, 755, 756, 761, 762, 764, 766, 767, 768, 771, 773, 775, 777, 786, 795], "significantli": [6, 8, 25, 51, 56, 74, 79, 348, 410, 586, 634, 756, 785, 793], "line": [6, 8, 14, 15, 18, 19, 22, 25, 26, 28, 29, 40, 41, 281, 581, 742, 748, 751, 752, 753, 756, 758, 759, 761, 768, 770, 773, 776, 777, 778, 779, 787, 790, 798], "even": [6, 22, 25, 26, 51, 74, 91, 231, 264, 269, 274, 350, 359, 439, 473, 581, 748, 749, 751, 756, 757, 758, 760, 763, 764, 767, 768, 769, 773, 777, 778, 779, 780, 781, 786, 787, 801], "better": [6, 28, 37, 43, 44, 747, 750, 768, 769, 771, 773, 774, 777, 778, 779, 787, 798], "v100": 6, "3x": 6, "increas": [6, 8, 18, 25, 28, 51, 56, 58, 74, 79, 81, 350, 359, 439, 476, 586, 588, 590, 639, 648, 661, 677, 757, 761, 768, 771, 773, 785, 789, 795], "execut": [6, 8, 16, 17, 18, 20, 25, 26, 28, 30, 33, 40, 42, 44, 115, 117, 550, 577, 580, 583, 748, 749, 754, 755, 756, 757, 758, 759, 761, 764, 765, 767, 770, 773, 775, 777, 780, 781, 783, 789, 791, 795, 796, 797, 798, 799, 801], "train2017": [6, 8, 22, 25, 26, 742, 790], "000000283921": [6, 8, 25], "out_torch": [6, 8, 25], "et": [6, 585, 586, 611, 634], "took": [6, 73, 271], "out_jax": [6, 8, 25], "1e": [6, 8, 10, 12, 25, 37, 41, 48, 51, 53, 56, 57, 59, 71, 74, 76, 79, 80, 82, 92, 156, 312, 325, 344, 353, 453, 454, 455, 532, 533, 541, 554, 555, 564, 565, 570, 572, 579, 583, 584, 586, 587, 591, 634, 643, 644, 645, 684, 725, 727, 728, 742, 755, 764, 767, 769, 779, 780], "66m": 6, "53m": 6, "That": [6, 8, 10, 12, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 39, 273, 349, 414, 581, 736, 748, 749, 752, 770, 777, 778, 779, 796], "pretti": [6, 8, 25, 26, 39, 778, 801], "much": [6, 8, 16, 17, 23, 25, 26, 27, 28, 39, 312, 325, 344, 723, 747, 748, 749, 752, 755, 757, 764, 767, 768, 769, 771, 772, 773, 775, 777, 778, 786, 793, 795, 801, 802], "achiev": [6, 8, 25, 742, 756, 757, 764, 765, 770, 773, 778, 780, 783], "solid": [6, 8, 25], "associ": [7, 51, 56, 74, 79, 214, 264, 350, 359, 418, 476, 581, 586, 627, 630, 642, 749, 757, 764, 765, 768, 769, 770, 781], "python": [7, 10, 16, 28, 33, 37, 39, 40, 41, 43, 44, 51, 60, 74, 83, 118, 198, 210, 238, 273, 354, 459, 460, 461, 462, 463, 563, 578, 580, 581, 583, 592, 685, 686, 687, 688, 690, 733, 736, 746, 748, 749, 751, 754, 755, 756, 761, 768, 770, 775, 777, 778, 781, 783, 784, 785, 786, 789, 792, 795, 796, 797, 801, 802], "resnet34_weight": 7, "torch_resnet_34": 7, "resnet_34": 7, "ivy_resnet_34": 7, "comparison": [7, 51, 74, 232, 267, 313, 344, 349, 414, 581, 586, 635, 761], "shown": [7, 23, 25, 66, 68, 89, 248, 271, 314, 344, 581, 747, 748, 749, 751, 754, 756, 757, 759, 761, 762, 763, 768, 769, 770, 771, 772, 775, 777, 781], "8507": 7, "1351": 7, "0069": 7, "85072654": 7, "13506058": 7, "00688287": 7, "resnet50_weight": 7, "torch_resnet_50": 7, "imagenet1k_v2": 7, "resnet_50": 7, "ivy_resnet_50": 7, "3429": 7, "0408": 7, "0121": 7, "34288213": 7, "04077019": 7, "0121203": 7, "depend": [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 47, 48, 51, 52, 56, 62, 63, 71, 74, 79, 86, 87, 115, 121, 143, 211, 212, 213, 216, 217, 218, 219, 228, 229, 231, 234, 236, 252, 253, 254, 255, 264, 266, 269, 276, 277, 281, 282, 333, 344, 348, 395, 409, 544, 577, 578, 579, 581, 583, 586, 593, 595, 618, 619, 631, 632, 633, 634, 695, 700, 703, 713, 742, 744, 745, 747, 748, 749, 754, 757, 758, 760, 765, 767, 768, 769, 770, 773, 775, 781, 782, 786, 789, 793, 795, 796], "yet": [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 41, 340, 342, 343, 351, 352, 356, 747, 748, 781, 789, 790], "doc": [8, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 40, 41, 74, 138, 307, 341, 475, 578, 742, 743, 746, 747, 750, 759, 760, 762, 763, 770, 775, 778, 779, 789, 790], "autofeatureextractor": [8, 25], "extractor": [8, 10, 12, 25, 41, 742], "hug": [8, 25, 789], "face": [8, 25, 743, 748, 751, 762, 766, 773, 775, 789, 795, 801], "arch_nam": [8, 25], "microsoft": [8, 25, 786, 789, 790, 795, 800, 802], "50": [8, 25, 26, 37, 41, 51, 64, 73, 74, 75, 230, 270, 331, 344, 347, 348, 375, 394, 401, 497, 503, 510, 511, 527, 541, 581, 583, 586, 590, 593, 596, 622, 629, 666, 668, 694, 706, 766, 777, 789, 790], "feature_extractor": [8, 25], "inputs_jax": [8, 25], "last_hidden_st": [8, 25], "jax_forward": [8, 25], "jit_appli": 8, "67": [8, 37, 50, 52, 56, 73, 75, 78, 83, 93, 226, 229, 234, 274, 275, 277, 284, 359, 389, 474, 495, 496, 541, 567, 569, 581, 583, 584, 586, 621, 688], "28": [8, 23, 25, 26, 37, 39, 41, 44, 50, 51, 55, 59, 73, 74, 75, 78, 79, 83, 87, 230, 254, 270, 347, 348, 368, 378, 394, 480, 510, 564, 581, 583, 584, 585, 586, 591, 596, 600, 602, 604, 607, 609, 629, 684, 686, 687, 688, 706, 710, 742], "09": [8, 39, 45, 50, 76, 83, 109, 269, 279, 564, 575, 581, 584, 687], "48": [8, 37, 41, 50, 51, 73, 74, 75, 76, 83, 103, 213, 236, 278, 347, 366, 367, 368, 378, 384, 385, 388, 510, 564, 568, 575, 581, 583, 584, 586, 590, 596, 629, 666, 687, 706], "2x": [8, 25], "build": [9, 13, 14, 16, 23, 25, 26, 29, 30, 31, 32, 37, 39, 44, 62, 68, 94, 594, 696, 697, 698, 699, 724, 725, 726, 742, 743, 748, 750, 756, 757, 764, 766, 774, 776, 779, 780, 781, 783, 786, 790, 793, 795, 797, 800, 801, 802], "timm": [9, 10, 14, 25, 26, 742, 790], "tensorflow": [9, 10, 14, 16, 17, 20, 21, 23, 25, 26, 27, 30, 31, 32, 37, 43, 50, 51, 52, 73, 74, 138, 185, 215, 307, 341, 348, 396, 544, 578, 580, 583, 733, 742, 745, 746, 747, 748, 749, 751, 753, 756, 757, 758, 763, 767, 768, 769, 770, 771, 773, 775, 780, 781, 783, 786, 787, 790, 793, 796, 798, 799, 801, 802], "kera": [9, 10, 12, 14, 15, 23, 25, 26, 42, 43, 721, 742, 787, 790, 801], "seen": [10, 12, 17, 23, 25, 348, 354, 400, 461, 733, 756, 757, 759, 761, 768, 770, 775, 777, 778, 785, 786, 801], "veri": [10, 18, 25, 26, 28, 50, 73, 265, 312, 325, 344, 581, 586, 632, 746, 747, 748, 749, 754, 755, 757, 758, 759, 761, 763, 764, 767, 768, 769, 770, 771, 773, 776, 778, 779, 780, 781, 785, 786, 791, 792, 793, 795, 796, 797, 800, 801, 802], "guid": [10, 23, 742, 743, 747, 748, 749, 754, 762, 768, 801], "focu": [10, 23, 747, 766, 793, 794, 797, 802], "more": [10, 13, 14, 16, 17, 18, 21, 23, 25, 26, 27, 28, 37, 39, 40, 41, 45, 50, 51, 56, 58, 62, 67, 73, 74, 79, 81, 85, 101, 103, 106, 108, 109, 118, 144, 236, 238, 254, 269, 282, 337, 345, 348, 349, 350, 391, 392, 403, 406, 414, 419, 420, 421, 424, 445, 530, 575, 578, 579, 581, 583, 586, 588, 594, 617, 623, 624, 627, 630, 632, 634, 641, 650, 657, 696, 697, 698, 699, 720, 742, 744, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 793, 794, 795, 796, 797, 798, 801, 802], "involv": [10, 13, 14, 21, 23, 48, 71, 171, 214, 231, 238, 264, 269, 579, 581, 743, 750, 756, 757, 759, 769, 773, 780, 786, 795, 801], "develop": [10, 24, 25, 26, 742, 743, 745, 746, 747, 748, 749, 751, 754, 756, 771, 781, 783, 785, 786, 787, 789, 790, 793, 794, 795, 796, 797, 800, 801, 802], "usual": [10, 12, 42, 231, 264, 581, 736, 748, 751, 757, 768, 770, 773], "instead": [10, 12, 16, 25, 32, 39, 44, 50, 51, 56, 73, 74, 79, 185, 273, 299, 341, 347, 359, 383, 384, 385, 473, 476, 580, 581, 586, 627, 747, 748, 749, 751, 754, 756, 757, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 773, 775, 777, 778, 781, 789, 790, 793, 795, 801, 802], "own": [10, 12, 16, 25, 26, 31, 742, 748, 751, 756, 757, 760, 761, 767, 768, 771, 775, 781, 783, 786, 787, 791, 794, 795, 800, 801], "directli": [10, 12, 16, 19, 23, 25, 26, 29, 348, 400, 590, 677, 742, 749, 751, 752, 755, 756, 757, 758, 760, 762, 764, 765, 767, 768, 769, 771, 772, 775, 777, 779, 780, 781, 782, 787, 789, 790, 799, 800, 801], "case": [10, 12, 18, 20, 25, 26, 28, 29, 30, 31, 39, 46, 47, 51, 52, 58, 64, 68, 70, 74, 75, 81, 91, 94, 120, 131, 157, 158, 185, 190, 191, 198, 206, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 239, 245, 246, 247, 252, 253, 254, 255, 256, 259, 264, 267, 269, 273, 274, 275, 276, 277, 278, 281, 282, 284, 321, 323, 333, 344, 347, 350, 353, 354, 360, 370, 371, 372, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 453, 455, 461, 483, 505, 512, 526, 527, 528, 578, 579, 580, 581, 583, 586, 588, 590, 596, 632, 638, 649, 650, 651, 653, 655, 656, 658, 660, 668, 674, 707, 708, 709, 710, 711, 712, 713, 725, 726, 728, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 777, 779, 780, 781, 786, 789, 790, 794, 798], "mlp": 10, "mixer": 10, "onli": [10, 12, 25, 26, 31, 37, 39, 41, 43, 47, 50, 51, 56, 58, 60, 68, 70, 73, 74, 79, 81, 83, 91, 93, 109, 130, 169, 170, 199, 259, 260, 265, 271, 295, 318, 323, 341, 344, 347, 348, 350, 354, 359, 369, 382, 396, 400, 410, 411, 419, 420, 421, 429, 459, 460, 476, 489, 575, 578, 579, 580, 581, 583, 585, 586, 588, 590, 592, 593, 595, 596, 611, 624, 631, 634, 650, 653, 665, 666, 672, 673, 675, 676, 677, 682, 683, 686, 687, 688, 691, 692, 702, 708, 711, 724, 726, 728, 736, 742, 743, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 785, 789, 790, 794, 795, 796, 801, 802], "retriev": [10, 12, 16, 485, 583, 749, 768], "mlp_encod": [10, 25, 26, 742, 790], "create_model": [10, 25, 26, 742, 790], "mixer_b16_224": [10, 25, 26, 742, 790], "nois": [10, 12, 25, 26, 742, 789, 790], "randn": [10, 12, 25, 26, 742, 790], "tf_mlp_encod": [10, 25, 26], "been": [10, 12, 20, 22, 25, 26, 51, 52, 60, 74, 75, 83, 187, 274, 350, 446, 495, 496, 497, 580, 581, 583, 592, 685, 736, 747, 749, 751, 753, 755, 756, 757, 758, 760, 761, 763, 764, 767, 770, 775, 777, 781, 782, 789, 795, 802], "within": [10, 12, 16, 25, 26, 46, 51, 74, 118, 312, 325, 344, 347, 383, 384, 385, 419, 420, 421, 578, 592, 688, 726, 747, 749, 752, 756, 757, 768, 769, 770, 779, 781, 790, 791, 792, 796], "astyp": [10, 12, 17, 39, 40, 41, 48, 55, 71, 78, 579, 585, 601, 603, 604, 607, 742, 757, 767, 768, 773], "output_torch": [10, 12], "output_tf": [10, 12], "constant": [10, 12, 17, 20, 21, 27, 30, 32, 37, 51, 58, 59, 74, 81, 82, 91, 349, 350, 414, 439, 588, 590, 591, 648, 671, 684, 723, 725, 726, 727, 742, 764, 769, 771, 779, 780, 781, 789], "output_dens": [10, 25, 26, 742], "layer": [10, 12, 16, 22, 23, 25, 26, 37, 42, 51, 59, 74, 82, 591, 610, 611, 684, 721, 722, 723, 725, 726, 727, 728, 729, 742, 760, 768, 771, 773, 775, 776, 779, 785, 790, 793, 795, 799, 802], "dens": [10, 23, 25, 26, 299, 341, 724, 742], "unit": [10, 25, 26, 51, 67, 74, 91, 101, 103, 104, 105, 106, 107, 108, 109, 286, 290, 291, 293, 294, 339, 456, 457, 575, 742, 748, 751, 757, 768, 769, 770, 781, 796, 799], "activ": [10, 23, 25, 26, 51, 52, 55, 66, 74, 78, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 286, 290, 291, 293, 294, 544, 585, 611, 612, 723, 724, 742, 748, 749, 757, 762, 771, 772, 779, 790, 795, 798], "mention": [10, 12, 25, 26, 31, 747, 748, 749, 752, 753, 759, 763, 764, 767, 768, 770, 773, 786, 790, 795], "learn": [10, 12, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 37, 39, 53, 76, 348, 409, 495, 565, 568, 570, 571, 572, 583, 584, 589, 662, 663, 664, 728, 742, 743, 746, 747, 748, 750, 751, 757, 762, 764, 766, 774, 783, 785, 786, 793, 797, 798, 799, 800, 801, 802], "basic": [10, 12, 16, 19, 23, 25, 26, 29, 32, 350, 446, 743, 747, 759, 770], "fulli": [10, 12, 14, 15, 18, 23, 25, 26, 39, 51, 74, 359, 480, 724, 742, 752, 757, 763, 766, 773, 775, 776, 777, 778, 779, 780, 781, 787, 793, 794, 795, 801, 802], "trainabl": [10, 12, 16, 22, 23, 25, 26, 43, 721, 725, 726, 729, 742, 760, 776, 778, 779, 790], "target": [10, 12, 18, 20, 21, 23, 25, 26, 28, 29, 30, 31, 32, 41, 51, 74, 186, 349, 413, 414, 415, 416, 580, 724, 726, 732, 742, 745, 748, 750, 753, 762, 769, 774, 778, 779, 780, 790, 791, 793, 794, 795, 798, 800, 801], "fine": [10, 12, 25, 26, 749, 757, 759, 768, 777, 780, 801], "tune": [10, 12, 25, 26, 800, 801], "train": [10, 12, 23, 25, 26, 42, 51, 53, 55, 74, 76, 78, 347, 353, 370, 371, 372, 453, 455, 564, 565, 570, 584, 585, 608, 611, 612, 723, 724, 725, 726, 727, 742, 755, 758, 764, 778, 779, 780, 781, 787, 790, 793, 794, 799, 801, 802], "ground": [10, 12, 51, 349, 412, 745, 768, 770, 785], "ret": [10, 12, 25, 26, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 401, 404, 406, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526, 527, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 722, 726, 728, 733, 738, 742, 757, 758, 760, 761, 766, 767, 768, 769, 771, 775, 780, 790], "op": [10, 16, 37, 720, 733, 771, 775, 781], "eagertensor": [10, 16, 37, 733, 769], "readi": [10, 12, 17, 18, 19, 27, 28, 29, 30, 31, 32, 39, 41, 747, 748], "explor": [10, 12, 16, 20, 21, 22, 25, 26, 31, 32, 33, 747, 748, 749, 757, 773, 776, 780, 795, 798], "deepmind": [11, 787], "perceiverio": [11, 787], "backbon": [11, 39, 742, 775, 778], "TO": [11, 13, 24], "replac": [11, 13, 24, 40, 50, 52, 58, 60, 68, 73, 75, 81, 83, 124, 265, 296, 341, 526, 527, 531, 578, 581, 583, 588, 592, 646, 685, 749, 754, 755, 757, 758, 765, 768, 770, 777, 780, 781, 786, 790, 802], "efficientnet": 12, "include_top": [12, 742], "eff_encod": [12, 742], "applic": [12, 14, 39, 41, 44, 51, 55, 74, 78, 348, 411, 585, 586, 590, 596, 611, 612, 638, 671, 672, 673, 677, 678, 710, 712, 742, 748, 756, 757, 758, 765, 779, 792, 793, 795, 797, 799, 801], "efficientnet_v2": [12, 742], "efficientnetv2b0": [12, 742], "data": [12, 22, 26, 31, 39, 41, 44, 45, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 73, 74, 75, 78, 79, 81, 83, 84, 85, 86, 87, 88, 93, 94, 96, 97, 98, 101, 103, 106, 108, 109, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 183, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 289, 295, 296, 297, 298, 299, 300, 301, 308, 309, 310, 311, 313, 328, 333, 339, 341, 344, 347, 348, 350, 354, 358, 359, 370, 371, 372, 388, 393, 395, 410, 423, 444, 447, 459, 460, 461, 462, 463, 469, 473, 474, 475, 479, 481, 482, 499, 512, 514, 515, 518, 544, 575, 578, 580, 581, 583, 585, 586, 588, 590, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 608, 609, 613, 614, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 647, 650, 651, 653, 654, 656, 657, 661, 669, 686, 687, 688, 690, 691, 692, 694, 695, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 726, 730, 742, 748, 750, 751, 752, 753, 754, 755, 758, 760, 763, 764, 765, 767, 769, 771, 773, 775, 777, 783, 784, 786, 795, 796, 797, 799, 800, 801], "storag": [12, 39, 40, 778, 786], "googleapi": [12, 39, 40], "efficientnetv2": 12, "b0_notop": 12, "h5": [12, 68], "24274472": 12, "0u": 12, "paramet": [12, 23, 25, 26, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 522, 523, 526, 527, 530, 531, 532, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 736, 738, 742, 747, 752, 760, 761, 763, 768, 769, 770, 771, 775, 777, 778, 789, 790, 796], "torch_eff_encod": [12, 742], "fc": [12, 39, 742, 779, 790], "1280": [12, 495, 583, 742], "state": [13, 24, 39, 55, 78, 178, 179, 180, 181, 182, 264, 551, 553, 556, 558, 559, 579, 581, 583, 585, 610, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 742, 745, 748, 754, 757, 758, 760, 761, 762, 763, 768, 770, 774, 775, 776, 778, 786, 790, 801, 802], "api": [13, 18, 23, 24, 28, 41, 43, 50, 56, 73, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 135, 136, 137, 139, 140, 146, 156, 159, 169, 171, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 314, 344, 359, 473, 578, 579, 581, 586, 588, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 647, 649, 650, 651, 653, 654, 656, 657, 661, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 745, 748, 749, 750, 752, 754, 757, 758, 759, 760, 761, 763, 765, 767, 768, 769, 770, 773, 774, 776, 778, 781, 783, 784, 785, 791, 793, 795, 797, 800, 802], "welcom": [14, 40, 742, 743, 748, 749], "goal": [14, 39, 238, 581, 742, 747, 786, 795, 801], "provid": [14, 16, 20, 23, 25, 26, 30, 31, 37, 43, 47, 51, 52, 56, 58, 61, 64, 65, 68, 70, 74, 75, 79, 81, 84, 87, 88, 114, 131, 133, 149, 150, 151, 152, 153, 161, 171, 183, 187, 283, 348, 350, 353, 359, 394, 398, 408, 411, 425, 434, 451, 453, 455, 482, 494, 526, 527, 577, 578, 579, 580, 581, 583, 585, 586, 588, 590, 593, 596, 597, 611, 626, 629, 640, 649, 650, 657, 669, 691, 711, 713, 714, 715, 724, 728, 733, 742, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 777, 779, 781, 785, 789, 790, 793, 794, 795, 796, 797, 798, 799, 802], "experi": [14, 41, 748, 761, 770, 776, 778, 781], "varieti": [14, 751, 756, 757, 758, 770, 772, 791, 793, 797, 798, 801, 802], "organ": [14, 752, 755, 764, 768, 771, 783, 786], "main": [14, 26, 47, 51, 56, 74, 79, 124, 136, 137, 138, 296, 307, 308, 341, 348, 350, 393, 428, 578, 586, 616, 617, 638, 747, 748, 749, 751, 754, 755, 765, 767, 793, 795, 796, 801], "find": [14, 40, 41, 44, 56, 62, 68, 79, 586, 590, 594, 627, 667, 696, 697, 698, 699, 736, 742, 743, 746, 747, 748, 749, 751, 754, 756, 766, 770, 773, 775, 778, 782, 783, 785, 789], "exactli": [14, 18, 28, 37, 38, 42, 281, 581, 755, 756, 757, 758, 759, 761, 770, 773, 785, 787, 790], "rush": [14, 787], "jump": [14, 769], "straight": [14, 742, 756, 768, 770, 777], "quickstart": 14, "introduct": [14, 16, 23, 25, 26, 795], "capabl": [14, 22, 26, 770, 773], "point": [14, 23, 48, 50, 51, 56, 60, 62, 64, 71, 73, 74, 79, 83, 87, 118, 119, 120, 122, 124, 127, 134, 135, 139, 143, 156, 160, 164, 171, 211, 212, 213, 214, 216, 217, 218, 219, 220, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 244, 245, 246, 247, 252, 253, 254, 255, 256, 264, 266, 267, 269, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 295, 296, 298, 327, 328, 331, 333, 341, 344, 347, 348, 349, 354, 359, 370, 371, 372, 395, 410, 412, 459, 460, 461, 462, 463, 473, 474, 475, 482, 576, 578, 579, 581, 586, 592, 593, 594, 595, 596, 613, 615, 618, 619, 620, 622, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 638, 641, 687, 688, 694, 696, 697, 698, 699, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 733, 745, 747, 748, 749, 751, 752, 753, 754, 756, 757, 759, 760, 763, 767, 768, 770, 771, 773, 775, 777, 778, 787, 789, 801], "those": [14, 38, 39, 56, 58, 68, 74, 79, 81, 118, 170, 231, 264, 447, 563, 578, 579, 581, 583, 586, 588, 590, 593, 631, 634, 646, 667, 694, 747, 748, 749, 752, 755, 756, 757, 765, 767, 768, 769, 770, 773, 785, 792], "who": [14, 750, 761, 774, 781, 795, 797], "dive": [14, 16, 25, 37, 742, 743, 744, 746, 747, 749, 751, 755, 757, 762, 769, 774, 777, 778, 781, 801], "deeper": [14, 16, 26, 46, 590, 665, 666, 675, 676, 677, 749, 750, 770, 774, 785], "project": [14, 19, 25, 26, 29, 585, 611, 724, 742, 744, 747, 748, 749, 752, 753, 754, 770, 779, 781, 785, 786, 787, 790, 791, 793, 795, 798, 802], "showcas": [14, 742], "real": [14, 22, 50, 51, 64, 73, 74, 87, 93, 103, 106, 109, 134, 135, 211, 212, 213, 214, 216, 217, 218, 219, 220, 229, 231, 232, 234, 236, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 261, 264, 266, 267, 269, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 318, 328, 344, 347, 348, 369, 390, 395, 396, 575, 578, 581, 586, 593, 596, 618, 619, 620, 625, 632, 634, 635, 638, 641, 694, 707, 709, 710, 711, 712, 755, 797], "world": [14, 22, 749, 797], "whether": [14, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 119, 120, 126, 128, 133, 135, 140, 143, 144, 146, 149, 150, 151, 152, 153, 154, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 183, 187, 188, 190, 191, 193, 195, 198, 199, 201, 204, 205, 207, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 308, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 341, 344, 347, 348, 349, 350, 359, 365, 366, 367, 369, 370, 371, 372, 388, 403, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 427, 429, 430, 431, 434, 438, 445, 447, 448, 451, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 526, 527, 528, 529, 531, 534, 535, 537, 538, 540, 541, 542, 544, 546, 548, 549, 556, 557, 560, 562, 565, 566, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 623, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 671, 672, 673, 675, 676, 677, 678, 682, 683, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 720, 721, 724, 725, 726, 727, 728, 736, 742, 743, 747, 748, 752, 755, 757, 759, 763, 767, 768, 770, 772, 773, 789, 790], "re": [14, 17, 18, 19, 25, 26, 27, 28, 29, 30, 31, 32, 39, 41, 42, 44, 51, 52, 61, 74, 84, 204, 302, 341, 350, 440, 441, 495, 580, 583, 586, 588, 593, 636, 654, 693, 695, 743, 747, 748, 749, 750, 751, 757, 766, 767, 768, 769, 771, 773, 777, 780, 781, 784, 785, 786, 795], "beginn": [14, 743, 795], "advanc": [14, 37, 748, 794], "user": [14, 25, 40, 41, 43, 265, 282, 350, 439, 530, 581, 583, 722, 724, 725, 726, 736, 742, 748, 749, 750, 752, 753, 755, 756, 757, 758, 761, 765, 766, 767, 768, 770, 772, 773, 774, 775, 781, 782, 785, 786, 793, 795, 801, 802], "got": [14, 37, 761], "cover": [14, 25, 51, 74, 347, 383, 384, 385, 747, 751, 752, 754, 757, 759, 760, 764, 765, 770, 773, 774], "write": [14, 15, 25, 26, 37, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 143, 145, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 308, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 326, 327, 328, 329, 332, 333, 334, 339, 341, 344, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 400, 401, 404, 405, 406, 407, 412, 413, 414, 415, 416, 424, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 495, 496, 497, 502, 503, 512, 526, 527, 564, 565, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 684, 685, 686, 687, 688, 690, 692, 693, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 742, 746, 747, 749, 750, 751, 753, 754, 756, 757, 759, 760, 761, 764, 767, 769, 771, 775, 777, 780, 787, 795, 802], "familiar": [14, 15, 16, 747, 748], "concept": [14, 15, 16], "agnost": [14, 15, 16, 17, 25, 26, 27, 31, 37, 742, 752, 763, 775, 777, 780, 781, 801, 802], "unifi": [14, 15, 16, 18, 19, 25, 28, 29, 33, 40, 68, 204, 580, 750, 751, 752, 757, 761, 765, 766, 768, 773, 775, 781, 784, 786, 788, 791, 792, 793, 795, 799, 802], "alongsid": [14, 15, 16, 17, 27, 585, 611, 786], "turn": [14, 15, 18, 28, 55, 78, 91, 370, 371, 372, 585, 608, 724, 748, 754, 755, 758, 759, 768, 770, 787], "remov": [14, 15, 18, 25, 26, 28, 56, 68, 79, 586, 588, 589, 590, 617, 624, 638, 656, 662, 663, 679, 739, 742, 747, 753, 754, 756, 757, 760, 764, 770, 773, 780, 789, 790, 795], "wrapper": [14, 15, 18, 752, 754, 755, 757, 761, 764, 767, 768, 777, 783, 791, 795], "unus": [14, 15, 18, 759, 767], "part": [14, 15, 18, 47, 50, 51, 73, 74, 79, 93, 103, 106, 109, 136, 137, 138, 244, 248, 271, 307, 308, 329, 341, 344, 348, 350, 359, 396, 439, 482, 575, 578, 581, 586, 619, 620, 725, 726, 742, 747, 749, 751, 754, 757, 762, 764, 767, 768, 770, 771, 773, 775, 776, 780, 781, 789, 790, 793, 795, 800, 801, 802], "lazi": [14, 15, 18, 21, 28, 31, 32, 43], "eager": [14, 15, 18, 21, 23, 28, 31, 32, 43, 755, 781, 795], "understand": [14, 15, 16, 20, 37, 43, 745, 746, 747, 748, 749, 750, 751, 754, 759, 760, 763, 769, 774, 787, 791, 801], "between": [14, 15, 20, 30, 31, 32, 37, 50, 51, 52, 55, 56, 57, 58, 62, 68, 73, 74, 78, 79, 80, 81, 94, 118, 156, 219, 232, 267, 269, 283, 312, 325, 327, 344, 347, 348, 349, 350, 359, 370, 371, 372, 383, 384, 385, 394, 398, 412, 413, 414, 415, 416, 439, 482, 578, 579, 581, 585, 587, 588, 590, 592, 594, 608, 629, 643, 644, 645, 649, 657, 671, 686, 697, 698, 699, 728, 752, 753, 757, 759, 763, 764, 765, 767, 768, 769, 770, 773, 774, 776, 777, 778, 780, 785, 789, 790, 791, 792, 794, 795, 796, 801], "decor": [14, 15, 20, 31, 43, 489, 583, 745, 751, 752, 755, 757, 758, 764, 767, 768, 769, 773], "wai": [14, 15, 16, 19, 21, 25, 29, 31, 37, 91, 742, 744, 746, 748, 751, 752, 753, 754, 756, 757, 758, 767, 768, 769, 770, 773, 777, 778, 779, 780, 781, 782, 785, 786, 790, 797, 801, 802], "kornia": [14, 15, 22, 25, 26, 39, 43, 742, 790], "roundup": 16, "over": [16, 23, 26, 28, 39, 51, 56, 64, 65, 66, 71, 74, 78, 79, 87, 88, 89, 91, 114, 303, 304, 323, 330, 341, 344, 347, 348, 350, 357, 359, 361, 362, 363, 366, 375, 380, 384, 388, 389, 390, 407, 418, 429, 444, 447, 466, 476, 481, 530, 563, 577, 583, 586, 591, 592, 596, 597, 614, 625, 636, 638, 640, 641, 684, 688, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 727, 733, 736, 742, 748, 749, 753, 759, 760, 766, 767, 769, 771, 775, 777, 781, 785, 787, 793, 795], "indep": [16, 25], "futur": [16, 25, 39, 586, 619, 620, 742, 748, 749, 756, 757, 770, 771, 773, 777, 781, 785, 787, 801], "proof": [16, 25], "delv": [16, 26], "theori": 16, "deep": [16, 23, 25, 37, 68, 495, 583, 742, 743, 744, 746, 747, 749, 751, 754, 755, 757, 762, 766, 769, 774, 777, 778, 785, 793, 795, 798, 799, 801, 802], "esenti": [16, 25], "abstract": [16, 25, 26, 723, 728, 755, 757, 767, 768, 770, 773, 779, 785, 793, 795, 797, 798, 802], "multipl": [16, 25, 50, 51, 56, 59, 64, 65, 68, 73, 74, 75, 76, 79, 81, 82, 87, 88, 126, 225, 249, 256, 262, 263, 264, 266, 347, 348, 350, 357, 368, 375, 378, 380, 406, 425, 434, 451, 466, 484, 522, 564, 565, 568, 570, 572, 573, 578, 581, 583, 584, 585, 586, 588, 591, 593, 596, 597, 600, 601, 602, 603, 613, 622, 624, 625, 646, 649, 654, 655, 684, 691, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 742, 747, 749, 752, 753, 755, 759, 761, 762, 764, 767, 768, 769, 770, 773, 775, 781, 787, 789, 793, 794, 795, 802], "specif": [16, 17, 22, 23, 25, 26, 27, 29, 31, 39, 49, 51, 52, 72, 74, 75, 171, 202, 205, 238, 259, 260, 269, 354, 463, 495, 496, 497, 523, 579, 580, 581, 583, 586, 588, 589, 592, 595, 596, 619, 620, 636, 657, 662, 663, 664, 685, 702, 707, 708, 709, 711, 725, 726, 733, 738, 742, 745, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 761, 762, 763, 764, 767, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 783, 785, 789, 790, 791, 793, 794, 796, 797, 798, 802], "quirk": [16, 25], "perk": [16, 25, 742, 752, 755], "manag": [16, 23, 25, 530, 553, 583, 742, 743, 753, 757, 758, 767, 781, 787, 797, 799], "under": [16, 25, 26, 349, 414, 736, 742, 747, 748, 750, 751, 758, 759, 760, 762, 768, 769, 770, 773, 774, 775, 778, 780, 781, 789, 790, 795, 798, 802], "hood": [16, 25, 26, 742, 750, 758, 759, 762, 768, 770, 773, 774, 775, 778, 780, 789, 790, 802], "simpli": [16, 25, 26, 28, 37, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 581, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 630, 631, 632, 634, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 742, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759, 760, 763, 764, 767, 768, 769, 770, 773, 775, 779, 780, 781, 783, 796, 801], "appropi": 16, "string": [16, 25, 26, 41, 51, 52, 55, 68, 74, 78, 141, 142, 154, 161, 183, 184, 185, 186, 187, 189, 198, 205, 206, 210, 292, 339, 347, 348, 350, 389, 396, 439, 475, 493, 579, 580, 583, 585, 586, 598, 599, 600, 601, 603, 605, 607, 620, 722, 736, 753, 754, 756, 757, 758, 761, 768, 775, 778], "simplest": [16, 748, 759, 770, 773], "interact": [16, 25, 40, 43, 747, 794, 795, 800], "submodul": [16, 25, 39, 41, 93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 722, 723, 724, 726, 727, 728, 729, 747, 748, 749, 751, 754, 756, 758, 764, 765, 770, 774, 775, 779, 783], "track": [16, 25, 26, 38, 39, 590, 677, 722, 725, 726, 748, 749, 751, 766, 767, 789, 795], "current": [16, 25, 26, 39, 40, 51, 52, 68, 74, 94, 114, 157, 158, 161, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 197, 199, 348, 350, 394, 395, 439, 500, 501, 504, 509, 513, 524, 525, 544, 577, 579, 580, 583, 586, 590, 618, 665, 675, 676, 722, 726, 733, 739, 742, 744, 747, 748, 749, 751, 753, 755, 756, 757, 758, 761, 762, 764, 767, 768, 769, 770, 773, 775, 780, 781, 787, 789, 795, 801, 802], "object": [16, 21, 23, 25, 39, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 121, 125, 126, 147, 156, 159, 167, 170, 205, 263, 460, 566, 578, 579, 580, 584, 590, 592, 668, 669, 670, 672, 673, 674, 680, 681, 682, 683, 690, 721, 724, 725, 726, 733, 736, 742, 752, 753, 755, 756, 764, 765, 768, 769, 770, 773, 777, 780, 788, 789, 790, 795, 801], "ones": [16, 23, 25, 37, 43, 47, 51, 53, 55, 60, 68, 70, 74, 78, 83, 124, 128, 133, 135, 140, 190, 191, 227, 296, 341, 359, 481, 564, 578, 580, 581, 584, 585, 603, 604, 686, 687, 688, 742, 747, 752, 756, 759, 763, 764, 770, 777, 778, 795], "likewis": [16, 21, 25, 32, 742, 749, 755, 757, 760, 763, 764, 768, 773, 778, 789, 790, 801], "nativearrai": [16, 25, 26, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 119, 120, 121, 123, 128, 129, 130, 131, 132, 133, 135, 136, 137, 140, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 156, 159, 162, 163, 164, 166, 168, 170, 171, 177, 187, 188, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 473, 474, 475, 476, 477, 484, 487, 488, 490, 491, 495, 496, 497, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 515, 518, 519, 521, 526, 527, 528, 531, 540, 541, 542, 543, 544, 546, 548, 549, 551, 562, 564, 565, 566, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 672, 673, 674, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 729, 752, 755, 759, 761, 763, 764, 765, 767, 768, 771, 772, 775, 777, 783], "alia": [16, 25, 576, 747, 768, 788, 790], "select": [16, 25, 30, 43, 51, 64, 74, 87, 348, 350, 359, 396, 406, 447, 474, 475, 596, 704, 705, 747, 748, 749, 756, 767, 770, 775, 777, 780, 781, 795, 798, 799], "lastli": [16, 25, 742, 752], "contain": [16, 25, 26, 40, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 154, 156, 157, 158, 159, 162, 163, 164, 166, 168, 171, 188, 190, 191, 192, 197, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 346, 347, 348, 349, 350, 353, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 531, 534, 536, 541, 542, 543, 544, 546, 548, 549, 556, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 672, 673, 674, 677, 678, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 722, 724, 725, 726, 728, 729, 733, 736, 742, 744, 745, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 779, 781, 782, 783, 785, 789, 795, 796, 801], "subclass": [16, 25, 26, 765, 768, 773, 790], "dict": [16, 25, 26, 39, 43, 46, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 157, 158, 159, 163, 164, 171, 187, 190, 191, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 293, 294, 296, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 350, 369, 370, 371, 372, 412, 413, 415, 416, 419, 420, 421, 424, 439, 445, 447, 448, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 485, 487, 488, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 522, 526, 527, 541, 542, 544, 546, 548, 549, 562, 573, 579, 580, 583, 590, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 665, 666, 668, 671, 672, 673, 674, 676, 677, 678, 682, 683, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 721, 724, 726, 733, 752, 755, 778, 779, 783, 789, 790], "recurs": [16, 25, 26, 39, 41, 46, 68, 69, 157, 158, 190, 191, 500, 501, 579, 580, 583, 590, 665, 666, 669, 675, 676, 677, 748, 751, 754, 755, 764, 767, 779, 781], "oper": [16, 17, 22, 25, 26, 27, 31, 38, 41, 47, 48, 50, 51, 52, 55, 68, 70, 71, 73, 74, 75, 78, 94, 109, 129, 130, 171, 201, 209, 214, 216, 225, 228, 231, 238, 253, 255, 264, 265, 269, 273, 276, 281, 289, 309, 310, 338, 339, 341, 346, 347, 350, 361, 362, 363, 365, 366, 367, 373, 374, 375, 379, 383, 384, 385, 386, 388, 389, 390, 446, 488, 495, 496, 497, 544, 575, 578, 579, 580, 581, 583, 585, 586, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 636, 638, 710, 712, 724, 742, 747, 748, 750, 751, 752, 755, 757, 758, 759, 760, 761, 764, 767, 768, 770, 773, 775, 778, 779, 783, 785, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802], "fashion": [16, 770, 790], "native_arrai": [16, 25, 26, 47, 48, 50, 70, 72, 73, 74, 75, 86, 101, 104, 128, 131, 133, 135, 140, 143, 144, 145, 146, 154, 159, 166, 188, 197, 205, 221, 225, 226, 230, 231, 232, 234, 238, 242, 250, 251, 259, 264, 267, 270, 273, 278, 337, 349, 350, 415, 439, 445, 448, 484, 514, 515, 518, 548, 575, 578, 579, 580, 581, 583, 585, 586, 587, 588, 592, 593, 596, 597, 599, 600, 607, 612, 615, 620, 626, 627, 635, 636, 638, 641, 643, 645, 646, 653, 685, 694, 703, 709, 712, 714, 733, 745, 769, 770], "data_class": [16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 366, 367, 495, 499, 634, 659], "doe": [16, 25, 38, 40, 50, 51, 52, 58, 68, 73, 74, 81, 91, 138, 226, 265, 267, 275, 307, 341, 348, 349, 359, 360, 395, 414, 479, 480, 483, 512, 578, 581, 583, 586, 588, 618, 655, 745, 747, 749, 750, 753, 756, 757, 759, 760, 762, 763, 764, 767, 768, 769, 770, 773, 775, 777, 778, 781, 783, 786, 789, 791, 795, 796, 802], "implement": [16, 17, 25, 27, 31, 39, 42, 48, 49, 51, 62, 63, 71, 72, 74, 79, 86, 91, 143, 157, 158, 171, 190, 191, 205, 211, 212, 213, 216, 217, 218, 219, 228, 229, 231, 234, 236, 238, 252, 253, 254, 255, 264, 266, 269, 273, 276, 277, 281, 282, 333, 344, 348, 359, 394, 395, 479, 480, 500, 501, 579, 580, 581, 583, 585, 586, 594, 595, 596, 611, 618, 619, 620, 629, 638, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 733, 742, 745, 747, 750, 751, 752, 753, 755, 757, 758, 760, 761, 763, 764, 765, 767, 769, 770, 771, 773, 775, 777, 778, 779, 780, 781, 783, 792, 793, 794, 795, 798, 801, 802], "low": [16, 25, 28, 44, 51, 55, 60, 78, 83, 347, 389, 585, 592, 598, 599, 600, 601, 603, 605, 607, 686, 688, 755, 761, 767, 768, 773, 775, 791, 793, 795, 796, 797, 799, 801], "level": [16, 25, 26, 28, 75, 487, 722, 742, 743, 747, 749, 755, 757, 761, 764, 766, 767, 768, 772, 773, 774, 775, 778, 779, 780, 781, 783, 787, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802], "c": [16, 25, 31, 40, 41, 47, 51, 52, 53, 55, 58, 64, 70, 71, 73, 74, 75, 76, 78, 79, 81, 85, 87, 91, 107, 119, 120, 130, 133, 156, 159, 214, 225, 231, 232, 252, 253, 264, 267, 275, 282, 347, 348, 350, 353, 359, 361, 362, 363, 374, 379, 391, 392, 394, 395, 397, 406, 419, 420, 421, 429, 453, 454, 455, 475, 487, 495, 496, 497, 498, 506, 510, 511, 549, 564, 565, 568, 570, 571, 572, 575, 578, 579, 581, 583, 584, 585, 586, 588, 590, 593, 594, 596, 599, 600, 601, 602, 603, 604, 618, 620, 622, 653, 657, 665, 668, 672, 673, 674, 676, 677, 682, 683, 694, 699, 705, 706, 711, 713, 727, 736, 743, 748, 750, 753, 754, 755, 759, 764, 766, 774, 775, 776, 778, 781, 783, 784, 786, 787, 790, 791, 795, 799, 800, 802], "wrap": [16, 18, 25, 26, 28, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 350, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 538, 541, 542, 543, 544, 546, 548, 549, 560, 562, 564, 565, 568, 570, 571, 572, 573, 583, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 630, 631, 632, 634, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 742, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 763, 764, 767, 768, 770, 775, 777, 780, 781, 783, 789, 790, 791, 795, 796, 801, 802], "fundament": [16, 25, 756, 768, 773, 775, 785, 795], "common": [16, 19, 25, 29, 50, 51, 68, 73, 170, 241, 249, 315, 320, 344, 579, 581, 743, 745, 747, 748, 754, 757, 758, 759, 764, 765, 768, 771, 773, 781, 785, 792, 795, 802], "signatur": [16, 25, 350, 359, 439, 473, 757, 758, 759, 760, 763, 767, 770, 771, 773, 786, 792, 801], "matmul": [16, 25, 26, 42, 56, 79, 563, 583, 586, 634, 753, 770, 771, 775], "to_n": [16, 25, 26, 37, 46, 69, 775], "jaxlib": [16, 22, 40, 733, 748, 752, 757, 758, 763, 771, 775, 777], "xla_extens": [16, 22, 733, 752, 757, 758, 763, 771, 775, 777], "arrayimpl": [16, 22, 733], "abov": [16, 21, 25, 26, 31, 32, 47, 50, 51, 56, 60, 67, 73, 74, 79, 83, 109, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 294, 296, 307, 308, 314, 317, 339, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 380, 383, 384, 385, 386, 390, 395, 396, 439, 473, 476, 502, 506, 508, 510, 512, 549, 573, 575, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 686, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 742, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 773, 775, 777, 778, 779, 780, 790, 795, 800], "instanc": [16, 22, 25, 26, 39, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 156, 159, 162, 163, 164, 166, 171, 188, 200, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 347, 348, 349, 350, 353, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 383, 384, 385, 386, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 537, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 747, 748, 749, 751, 752, 753, 757, 759, 760, 761, 763, 764, 765, 766, 767, 770, 778, 779, 780, 783, 789, 796], "why": [16, 742, 749, 767, 777, 784, 786], "method": [16, 25, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 143, 144, 145, 146, 156, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 348, 349, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 578, 579, 581, 583, 584, 586, 587, 590, 593, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 676, 677, 678, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 722, 723, 724, 725, 726, 747, 749, 751, 752, 753, 756, 757, 758, 759, 760, 763, 770, 771, 775, 776, 779, 780, 781, 789, 790, 796, 802], "underli": [16, 25, 26, 37, 51, 58, 74, 81, 221, 224, 226, 261, 350, 429, 581, 586, 588, 632, 653, 755, 767, 773, 789, 795], "howev": [16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 56, 79, 238, 281, 282, 353, 453, 455, 530, 581, 583, 586, 632, 634, 733, 747, 748, 751, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 773, 775, 777, 778, 779, 780, 781, 786, 789, 794, 795, 801], "disabl": [16, 25, 754], "array_mod": [16, 25, 528, 551, 583, 772], "set_array_mod": [16, 25, 551, 583, 772], "composit": [16, 25, 157, 158, 190, 191, 283, 348, 401, 500, 501, 579, 580, 581, 583, 747, 750, 752, 753, 755, 757, 758, 765, 767, 768, 769, 770, 773, 775, 779, 780, 781, 783, 789, 796], "ultim": [16, 25, 789], "sigmoid": [16, 25, 26, 37, 45, 51, 67, 74, 288, 339, 354, 459, 575, 720, 775, 778, 779], "z": [16, 25, 26, 38, 39, 47, 50, 51, 52, 56, 57, 60, 62, 64, 70, 73, 74, 75, 79, 80, 81, 83, 87, 93, 94, 129, 130, 132, 133, 192, 214, 215, 219, 221, 224, 226, 231, 242, 243, 246, 247, 248, 250, 251, 256, 258, 260, 261, 262, 263, 271, 280, 287, 288, 314, 339, 344, 349, 359, 412, 413, 414, 415, 416, 422, 424, 435, 472, 473, 476, 482, 487, 499, 502, 503, 510, 511, 527, 540, 541, 542, 550, 563, 578, 580, 581, 583, 586, 587, 588, 590, 592, 593, 594, 596, 614, 624, 629, 630, 634, 641, 643, 644, 645, 646, 668, 672, 674, 682, 686, 687, 688, 691, 696, 706, 707, 709, 710, 711, 723, 742, 753, 755, 758, 759, 775, 777, 789], "divid": [16, 21, 25, 26, 42, 50, 51, 52, 58, 68, 73, 74, 81, 93, 94, 238, 353, 453, 454, 455, 541, 581, 583, 588, 655, 752, 755, 759, 762, 770], "exp": [16, 25, 26, 50, 51, 73, 74, 107, 109, 236, 256, 269, 288, 339, 347, 374, 379, 575, 581, 586, 632, 766, 768], "high": [16, 25, 26, 44, 51, 55, 60, 78, 83, 347, 389, 535, 583, 585, 592, 598, 599, 600, 601, 603, 605, 607, 686, 688, 747, 761, 766, 768, 778, 783, 787, 791, 792, 793, 794, 795, 799, 801, 802], "network": [16, 23, 25, 26, 37, 39, 44, 585, 609, 720, 722, 723, 724, 725, 726, 742, 755, 764, 775, 779, 786, 790, 791, 793, 794, 795, 799, 801, 802], "most": [16, 25, 26, 68, 70, 91, 133, 348, 395, 535, 557, 578, 583, 586, 618, 619, 739, 742, 746, 747, 748, 752, 755, 756, 757, 758, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779, 781, 786, 795, 796, 798, 799, 801, 802], "entir": [16, 25, 26, 28, 41, 51, 64, 65, 68, 74, 75, 87, 88, 204, 234, 236, 276, 277, 347, 350, 359, 370, 371, 372, 439, 476, 508, 580, 581, 596, 597, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 747, 748, 749, 751, 752, 755, 757, 759, 761, 767, 768, 769, 770, 773, 775, 778, 779, 780, 781, 786, 787, 790, 795, 801, 802], "further": [16, 68, 94, 749, 751, 752, 756, 759, 761, 763, 764, 767, 768, 770, 774, 775, 778, 779, 786, 787, 800, 801], "tutori": [16, 22, 23, 742, 749, 768, 782], "congratul": [16, 22], "There": [16, 23, 26, 31, 91, 340, 342, 343, 351, 352, 356, 742, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 764, 766, 768, 769, 772, 775, 778, 781, 785, 789, 796, 797, 801, 802], "come": [16, 39, 747, 748, 749, 752, 756, 768, 772, 773, 779, 783, 795], "independ": [16, 26, 51, 60, 74, 83, 214, 231, 264, 274, 354, 459, 581, 586, 592, 614, 633, 685, 742, 751, 757, 759, 765, 775, 780, 790, 793], "good": [16, 25, 26, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 775, 776, 779], "foundat": [16, 786, 798], "tool": [16, 25, 26, 742, 748, 749, 759, 762, 776, 780, 781, 784, 787, 790, 793, 794, 795, 796, 798, 801, 802], "power": [16, 25, 26, 50, 51, 52, 56, 73, 74, 75, 79, 93, 94, 225, 234, 235, 269, 311, 320, 341, 344, 532, 542, 554, 581, 583, 586, 590, 626, 639, 671, 723, 772, 777, 778, 779, 795, 797, 801], "defin": [17, 23, 25, 26, 27, 47, 51, 52, 56, 70, 74, 75, 79, 107, 133, 136, 137, 138, 214, 231, 238, 264, 265, 273, 275, 278, 287, 297, 300, 301, 302, 307, 308, 309, 310, 314, 339, 341, 344, 347, 348, 350, 359, 382, 394, 439, 445, 476, 510, 511, 531, 575, 578, 581, 583, 586, 596, 614, 619, 620, 633, 707, 708, 709, 711, 742, 747, 748, 752, 753, 756, 757, 760, 763, 766, 768, 769, 770, 771, 777, 779, 781, 783, 792, 793, 794, 795, 796, 799, 801, 802], "div": [17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32], "sub": [17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 51, 56, 58, 68, 69, 73, 74, 75, 79, 81, 94, 263, 348, 350, 359, 396, 425, 434, 451, 479, 480, 586, 588, 589, 617, 655, 662, 663, 664, 722, 747, 749, 750, 755, 761, 768, 769, 770, 777, 778, 779, 791], "By": [17, 37, 44, 51, 57, 58, 64, 65, 74, 80, 81, 87, 88, 278, 311, 323, 330, 341, 344, 347, 349, 357, 359, 369, 414, 466, 473, 476, 530, 581, 583, 586, 587, 588, 596, 597, 614, 640, 643, 652, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 748, 753, 757, 759, 761, 764, 766, 767, 768, 775, 779, 780, 789], "uniform": [17, 18, 19, 20, 21, 25, 26, 27, 28, 30, 31, 32, 39, 51, 60, 74, 83, 359, 476, 592, 685, 686, 688, 723, 742, 779, 790, 802], "x_": [17, 27, 275, 581], "82997245": 17, "44733784": 17, "32163444": 17, "93330479": 17, "52438271": 17, "20438017": 17, "252316": 17, "0827222": 17, "26017165": 17, "88881904": 17, "compat": [17, 23, 27, 31, 37, 44, 50, 56, 58, 61, 64, 65, 73, 79, 81, 84, 87, 88, 93, 94, 145, 214, 219, 221, 223, 224, 225, 226, 231, 232, 238, 242, 243, 250, 251, 256, 258, 260, 261, 264, 267, 269, 273, 280, 285, 579, 581, 586, 588, 593, 596, 597, 614, 627, 630, 633, 636, 640, 641, 653, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 742, 753, 763, 768, 769, 771, 775, 781, 786], "sever": [17, 18, 27, 28, 30, 31, 32, 51, 74, 91, 347, 348, 361, 362, 363, 407, 748, 749, 771, 781, 793, 799], "pro": [17, 18, 19, 27, 28, 29, 30, 31, 32], "pick": [18, 28, 723], "off": [18, 28, 55, 56, 78, 79, 370, 371, 372, 585, 586, 608, 617, 638, 723, 724, 748, 774, 787, 789, 801], "last": [18, 23, 25, 28, 47, 51, 55, 56, 57, 58, 61, 63, 64, 65, 68, 70, 74, 78, 79, 80, 81, 86, 87, 88, 93, 129, 130, 133, 187, 296, 317, 341, 344, 347, 348, 349, 350, 357, 359, 375, 380, 390, 398, 414, 429, 439, 441, 466, 474, 475, 578, 580, 585, 586, 587, 588, 593, 595, 596, 597, 610, 611, 614, 617, 629, 638, 640, 644, 645, 647, 650, 653, 654, 655, 657, 691, 692, 700, 702, 703, 704, 705, 714, 715, 724, 733, 742, 749, 751, 753, 754, 757, 759, 767, 769, 770, 773, 775, 781, 787, 790, 795], "purpos": [18, 25, 26, 28, 39, 41, 138, 236, 254, 307, 341, 578, 581, 586, 632, 749, 750, 752, 755, 756, 758, 759, 761, 763, 764, 765, 768, 770, 773, 774, 777, 783, 794, 796, 799, 800, 801], "illustr": [18, 28, 753, 775], "trigger": [18, 28, 726, 747, 762], "unif": [18, 20, 21, 28, 30, 743, 777, 786, 791, 801], "detail": [18, 28, 41, 45, 50, 56, 58, 62, 67, 73, 74, 79, 81, 85, 101, 103, 106, 108, 109, 125, 282, 348, 392, 424, 575, 578, 581, 594, 617, 624, 630, 634, 657, 696, 697, 698, 699, 720, 742, 747, 749, 751, 753, 754, 755, 756, 762, 763, 764, 765, 768, 769, 770, 771, 772, 775, 777, 778, 779, 797, 801], "55563945": 18, "65538704": 18, "14150524": 18, "46951997": 18, "30220294": 18, "14739668": 18, "57017946": 18, "91962677": 18, "51029003": 18, "59644395": 18, "stack": [18, 28, 37, 41, 51, 56, 58, 68, 74, 79, 81, 93, 136, 137, 308, 341, 348, 350, 395, 424, 426, 435, 452, 529, 538, 560, 578, 583, 586, 588, 590, 615, 617, 618, 619, 620, 622, 624, 626, 627, 628, 630, 631, 632, 634, 635, 638, 665, 675, 676, 724, 742, 746, 751, 753, 767, 775, 791, 793, 800, 801], "arbitrari": [18, 28, 47, 48, 51, 68, 71, 131, 144, 171, 419, 420, 421, 566, 578, 579, 584, 763, 764, 766, 767, 768, 770, 779, 781, 789, 790, 796, 801], "constitu": [18, 28, 68, 780], "comp": [18, 28], "due": [18, 25, 26, 28, 42, 44, 264, 274, 581, 748, 751, 756, 761, 767, 768, 786, 789, 790, 795], "manner": [18, 26, 28, 38, 46, 69, 590, 677, 748, 758, 760, 764, 768, 771, 778, 781, 785, 791, 793, 801, 802], "non": [18, 28, 48, 50, 51, 56, 60, 61, 64, 65, 71, 73, 74, 79, 83, 84, 87, 88, 126, 143, 161, 170, 239, 259, 260, 265, 316, 321, 334, 344, 348, 350, 359, 396, 399, 403, 420, 421, 476, 479, 578, 579, 581, 586, 590, 592, 593, 596, 597, 614, 615, 625, 627, 634, 636, 640, 641, 678, 687, 691, 692, 693, 694, 707, 708, 709, 710, 711, 713, 714, 715, 723, 725, 726, 728, 752, 755, 759, 775, 789, 790, 795], "5556394": 18, "655387": 18, "1415051": 18, "4695197": 18, "3022028": 18, "1473966": 18, "5701794": 18, "91962665": 18, "51028997": 18, "5964439": 18, "assess": [18, 28, 747, 773], "985": 18, "76": [18, 37, 50, 64, 71, 73, 74, 83, 159, 213, 229, 277, 378, 579, 581, 586, 590, 596, 636, 673, 687, 706], "000": [18, 73, 265, 745, 756], "69": [18, 37, 44, 50, 76, 83, 212, 254, 347, 368, 378, 568, 581, 584, 586, 625, 626, 687, 770, 778], "24": [18, 37, 39, 50, 51, 56, 64, 73, 74, 75, 78, 79, 83, 93, 226, 234, 249, 251, 264, 274, 275, 278, 323, 326, 344, 347, 359, 365, 367, 368, 378, 383, 384, 385, 386, 389, 474, 495, 496, 581, 583, 586, 590, 596, 599, 617, 625, 629, 666, 677, 686, 687, 688, 704, 706, 761, 778], "slower": [18, 768], "On": [18, 25, 26, 748, 757, 758, 762, 768, 770, 773, 776, 780], "hand": [18, 50, 742, 751, 757, 758, 762, 764, 770, 781], "singl": [18, 28, 37, 42, 50, 60, 68, 73, 83, 283, 325, 344, 348, 354, 406, 460, 549, 562, 566, 581, 583, 584, 585, 592, 594, 611, 686, 687, 688, 696, 724, 747, 748, 749, 751, 756, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 778, 779, 780, 781, 787], "learnt": [19, 29], "two": [19, 29, 31, 37, 47, 51, 56, 62, 74, 75, 79, 93, 94, 115, 118, 124, 131, 136, 137, 138, 169, 177, 225, 239, 240, 274, 307, 308, 312, 321, 322, 324, 325, 327, 329, 336, 341, 344, 347, 348, 349, 350, 359, 375, 393, 394, 395, 406, 415, 420, 439, 445, 448, 473, 482, 487, 577, 578, 579, 581, 583, 586, 588, 594, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 658, 696, 697, 698, 699, 724, 747, 748, 751, 752, 757, 758, 759, 760, 764, 768, 769, 770, 773, 774, 778, 780, 787, 792, 800], "workflow": [19, 29, 40, 747, 749, 753, 757, 766, 768, 778, 783, 787, 794, 801, 802], "ivy_norm": 19, "jax_norm": [19, 25, 26], "wider": [19, 29, 535, 557, 583, 757, 772, 801], "avoid": [19, 29, 31, 51, 58, 74, 231, 236, 238, 254, 264, 350, 353, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 453, 454, 455, 489, 505, 530, 535, 557, 581, 583, 588, 649, 650, 651, 653, 655, 656, 658, 660, 748, 749, 753, 754, 755, 756, 757, 761, 765, 768, 770, 771, 772, 773, 795], "conveni": [19, 29, 747, 757, 758, 763, 769, 776, 778, 779, 783, 801], "act": [19, 29, 51, 74, 337, 345, 749, 759, 772, 781, 802], "shorthand": [19, 29, 31, 770], "pair": [19, 29, 39, 51, 55, 78, 219, 238, 303, 336, 341, 344, 347, 380, 389, 390, 581, 585, 586, 598, 599, 600, 601, 603, 605, 607, 612, 614], "93968587": 19, "26075466": 19, "22723222": 19, "06276492": 19, "47426987": 19, "72835908": 19, "71737559": 19, "50411096": 19, "65419174": 19, "15576624": 19, "still": [19, 21, 22, 25, 26, 28, 29, 32, 56, 68, 79, 586, 634, 747, 749, 752, 753, 757, 760, 761, 762, 764, 767, 768, 770, 773, 779, 781, 786, 789, 790, 792, 795, 801], "variou": [19, 29, 31, 37, 742, 749, 751, 756, 757, 760, 761, 763, 765, 766, 768, 769, 770, 782, 791, 793, 794, 795, 798, 801], "implic": [19, 29, 30, 33, 755], "either": [20, 21, 30, 31, 32, 33, 37, 43, 50, 51, 52, 55, 64, 68, 73, 74, 75, 78, 79, 103, 106, 109, 115, 125, 126, 211, 212, 213, 214, 219, 229, 231, 232, 234, 236, 238, 245, 246, 252, 253, 254, 255, 256, 264, 273, 275, 276, 278, 281, 282, 313, 333, 344, 347, 359, 368, 378, 388, 389, 474, 475, 494, 514, 522, 523, 531, 550, 575, 577, 578, 581, 583, 585, 586, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 624, 629, 632, 636, 662, 663, 664, 704, 705, 710, 712, 722, 724, 725, 726, 733, 747, 748, 749, 753, 755, 757, 758, 759, 760, 761, 762, 764, 767, 768, 769, 770, 773, 775, 778, 781, 782, 790, 795], "eagerli": [20, 21, 25, 26, 30, 31, 32, 39, 742, 789, 790], "lazili": [20, 21, 22, 25, 26, 30, 32, 43, 742, 789, 790], "actual": [20, 30, 745, 749, 750, 756, 764, 765, 767, 768, 769, 770, 773, 774, 779, 781, 796, 801], "occur": [20, 25, 26, 30, 43, 48, 50, 62, 71, 73, 85, 146, 265, 281, 579, 581, 593, 594, 691, 692, 696, 697, 698, 699, 751, 756, 758, 761, 772], "becaus": [20, 28, 30, 40, 51, 347, 369, 748, 749, 751, 752, 753, 754, 755, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 773, 775, 779, 780, 781, 795, 798, 801], "requir": [20, 30, 39, 40, 41, 44, 50, 51, 68, 73, 74, 265, 278, 282, 348, 350, 395, 396, 439, 581, 586, 588, 618, 619, 620, 657, 721, 744, 747, 748, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 768, 769, 770, 771, 773, 775, 777, 781, 790, 795, 801], "argument": [20, 22, 23, 25, 26, 28, 30, 31, 32, 37, 39, 41, 43, 46, 47, 50, 51, 52, 56, 68, 69, 73, 74, 75, 91, 94, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 146, 162, 166, 171, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 307, 308, 314, 317, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 379, 380, 383, 384, 385, 386, 396, 439, 473, 476, 480, 485, 486, 488, 489, 494, 496, 497, 502, 506, 508, 510, 512, 522, 526, 527, 544, 549, 550, 563, 573, 578, 579, 581, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 671, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 724, 725, 726, 733, 736, 738, 742, 747, 750, 751, 752, 753, 754, 755, 759, 760, 762, 764, 769, 770, 771, 773, 775, 777, 778, 783, 785, 789, 790, 795], "altern": [20, 30, 40, 51, 74, 79, 91, 312, 318, 322, 324, 325, 326, 327, 329, 330, 331, 335, 336, 344, 742, 747, 748, 754, 767, 778, 798], "consid": [20, 30, 31, 51, 56, 62, 74, 79, 109, 138, 259, 260, 307, 312, 315, 325, 341, 344, 348, 359, 396, 399, 408, 473, 575, 578, 581, 586, 594, 616, 627, 696, 697, 698, 699, 723, 752, 753, 756, 757, 764, 766, 771, 773, 776, 777, 778, 785, 786, 789, 792, 796, 800, 802], "dummi": [20, 21, 30, 31, 32, 38, 749], "assum": [20, 21, 30, 31, 32, 47, 50, 51, 52, 55, 56, 57, 73, 74, 75, 78, 79, 80, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 296, 308, 314, 317, 333, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 407, 439, 473, 476, 502, 506, 508, 510, 519, 549, 573, 578, 579, 581, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 736, 742, 748, 751, 753, 756, 757, 760, 769, 770, 773, 777, 778, 781], "slowli": [20, 30], "norm": [20, 30, 31, 51, 52, 56, 74, 75, 79, 90, 91, 347, 348, 368, 369, 373, 374, 375, 378, 379, 380, 390, 392, 396, 456, 457, 458, 490, 491, 512, 583, 586, 625, 641, 684, 724, 728, 771], "slow": [20, 30, 748], "54320029": 20, "30825614": 20, "17176882": 20, "14351968": 20, "98934778": 20, "82910388": 20, "89044143": 20, "71881472": 20, "1666683": 20, "14417601": 20, "norm_comp": [20, 30, 31], "float64": [20, 21, 48, 51, 60, 64, 70, 71, 73, 74, 75, 83, 87, 118, 126, 127, 143, 146, 150, 151, 156, 157, 160, 161, 166, 167, 171, 173, 174, 180, 183, 265, 320, 344, 359, 473, 521, 578, 579, 583, 586, 592, 619, 620, 625, 641, 687, 688, 705, 757, 769, 770], "norm_tran": [20, 30], "know": [20, 21, 30, 31, 32, 62, 594, 696, 697, 698, 699, 744, 747, 749, 758, 765, 769, 770, 773, 787, 796], "happen": [21, 25, 26, 283, 581, 742, 748, 749, 758, 767, 770, 778, 787, 789, 790], "09422972": 21, "46009917": 21, "0881108": 21, "86487021": 21, "83629996": 21, "10654466": 21, "89883457": 21, "02893805": 21, "15644584": 21, "41495672": 21, "wherea": [21, 32, 749, 752, 753, 755, 757, 758, 759, 763, 764, 770, 780, 792], "subtract": [21, 25, 26, 50, 73, 93, 94, 126, 350, 439, 578, 581, 752, 755, 759], "begin": [21, 51, 74, 275, 350, 439, 440, 441, 442, 443, 581, 590, 665, 676, 722, 748, 751, 756, 769], "demonstr": [22, 25, 26, 40, 757, 759, 761, 777], "scenario": [22, 757, 766], "often": [22, 746, 751, 761, 763, 764, 768, 770, 781, 787, 796, 799, 802], "fortun": [22, 23, 751], "everyth": [22, 40, 736, 742, 747, 748, 749, 750, 756, 759, 767, 768, 769, 770, 776, 781, 782, 787], "practic": [22, 749, 753, 756, 768, 798], "specifi": [22, 23, 25, 26, 30, 31, 32, 43, 45, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 87, 88, 91, 101, 103, 106, 108, 109, 118, 122, 127, 129, 134, 136, 137, 139, 143, 145, 192, 197, 199, 203, 204, 205, 273, 282, 308, 312, 325, 330, 341, 344, 347, 348, 349, 350, 354, 359, 365, 366, 367, 369, 375, 380, 390, 396, 405, 407, 410, 414, 415, 417, 429, 432, 441, 442, 444, 445, 460, 471, 473, 474, 475, 478, 479, 482, 485, 502, 503, 505, 508, 521, 531, 563, 575, 578, 579, 580, 581, 583, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 597, 611, 612, 614, 616, 617, 619, 620, 625, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 654, 656, 657, 660, 661, 669, 670, 672, 673, 680, 681, 682, 683, 686, 687, 688, 690, 691, 692, 694, 697, 698, 699, 700, 704, 705, 706, 710, 712, 714, 715, 720, 722, 724, 725, 726, 748, 750, 754, 757, 758, 763, 764, 765, 767, 768, 769, 770, 775, 778, 779, 789, 790, 801], "everi": [22, 25, 26, 31, 39, 47, 51, 52, 74, 75, 127, 128, 288, 323, 339, 344, 347, 350, 383, 384, 385, 450, 484, 578, 583, 747, 749, 751, 753, 754, 756, 757, 759, 762, 763, 764, 765, 767, 768, 769, 770, 775, 777, 779, 789, 790, 795], "jax_kornia": [22, 25, 26, 742, 790], "though": [22, 746, 747, 749, 757, 758, 760, 764, 767, 768, 773, 778, 781], "comput": [22, 23, 25, 26, 32, 33, 38, 39, 41, 45, 50, 51, 52, 53, 55, 56, 57, 62, 64, 67, 68, 73, 74, 75, 76, 78, 79, 80, 87, 91, 104, 108, 204, 214, 221, 224, 226, 231, 232, 233, 238, 239, 240, 242, 243, 249, 250, 251, 258, 259, 260, 261, 263, 264, 267, 272, 273, 287, 297, 300, 301, 309, 310, 314, 318, 321, 323, 324, 328, 330, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 353, 357, 359, 365, 366, 367, 368, 369, 374, 375, 378, 379, 380, 383, 384, 385, 386, 389, 390, 391, 392, 394, 395, 396, 397, 399, 401, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 433, 436, 448, 453, 455, 465, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 489, 490, 491, 535, 557, 564, 566, 567, 569, 573, 574, 580, 581, 583, 584, 585, 586, 587, 588, 590, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 613, 614, 618, 619, 620, 623, 624, 625, 627, 629, 631, 633, 634, 636, 638, 640, 641, 643, 644, 645, 649, 671, 696, 697, 698, 699, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 724, 727, 742, 748, 755, 756, 757, 764, 766, 768, 770, 772, 773, 775, 778, 781, 783, 786, 787, 789, 790, 791, 793, 795, 796, 798, 799, 801], "000000000034": [22, 25, 26, 742, 790], "raw_img": [22, 25, 26, 742, 790], "expand_dim": [22, 25, 26, 41, 43, 58, 81, 585, 588, 607, 742, 768, 775, 778, 790], "enhanc": [22, 25, 26, 742, 790], "sharp": [22, 25, 26, 742], "verifi": [22, 747, 757, 758, 768, 770, 771], "prefer": [22, 25, 26, 238, 581, 742, 748, 755, 761, 765, 768, 782, 795], "leverag": [22, 25, 26, 742, 748, 767, 790, 793, 795], "whole": [23, 51, 74, 350, 353, 446, 456, 457, 458, 749, 754, 762], "machin": [23, 28, 29, 37, 43, 51, 56, 74, 79, 156, 159, 348, 396, 579, 586, 627, 630, 748, 751, 764, 783, 786, 793, 795, 797, 798, 799, 800, 801], "allow": [23, 25, 26, 37, 51, 74, 129, 269, 359, 476, 480, 522, 578, 581, 583, 595, 702, 722, 725, 726, 740, 742, 747, 749, 752, 753, 756, 757, 761, 762, 764, 765, 766, 767, 768, 769, 770, 773, 775, 777, 781, 783, 786, 789, 790, 793, 795, 799, 800], "full": [23, 51, 56, 74, 78, 79, 91, 156, 243, 251, 305, 306, 341, 348, 349, 350, 410, 414, 440, 443, 529, 538, 552, 560, 578, 579, 581, 583, 585, 586, 600, 602, 603, 604, 627, 631, 633, 634, 742, 748, 749, 754, 757, 760, 761, 763, 764, 768, 770, 773, 775, 781, 786, 787, 793, 795, 801], "advantag": [23, 25, 26, 742, 748, 749, 757, 767, 768, 782, 790, 795], "complex": [23, 25, 26, 39, 45, 50, 51, 56, 67, 71, 73, 74, 79, 101, 103, 106, 108, 109, 134, 135, 149, 163, 172, 178, 211, 212, 213, 214, 215, 216, 217, 220, 228, 229, 231, 232, 234, 236, 244, 245, 246, 247, 248, 252, 253, 254, 255, 264, 266, 269, 271, 274, 275, 276, 277, 278, 281, 282, 314, 344, 347, 348, 359, 369, 380, 390, 391, 395, 396, 397, 405, 407, 481, 541, 542, 575, 578, 579, 581, 583, 586, 593, 596, 618, 619, 620, 625, 632, 634, 636, 638, 641, 694, 710, 712, 720, 747, 754, 757, 759, 765, 768, 770, 771, 773, 778, 779, 780, 781, 783, 790, 791, 793, 795, 797, 801, 802], "neccessari": 23, "convolut": [23, 51, 55, 74, 78, 347, 367, 385, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724, 790, 793, 795], "32": [23, 25, 26, 37, 39, 40, 41, 50, 51, 60, 73, 74, 78, 79, 83, 93, 94, 103, 155, 213, 225, 226, 235, 249, 271, 274, 275, 314, 344, 347, 348, 350, 359, 366, 367, 368, 378, 388, 389, 394, 398, 423, 474, 495, 511, 575, 579, 581, 583, 585, 586, 592, 593, 596, 600, 602, 603, 604, 607, 609, 624, 629, 686, 687, 688, 695, 706, 742, 756, 757, 766, 778, 800], "kernel_s": [23, 25, 26, 41, 51, 74, 347, 365, 366, 367, 724, 730], "flatten": [23, 25, 26, 39, 41, 44, 51, 52, 56, 58, 61, 62, 74, 75, 79, 81, 84, 85, 316, 330, 344, 348, 350, 359, 393, 438, 442, 447, 450, 471, 478, 479, 480, 481, 482, 495, 499, 583, 586, 588, 593, 594, 621, 629, 641, 647, 652, 654, 691, 692, 696, 697, 698, 699, 722, 742, 767, 773], "keyword": [23, 25, 26, 41, 43, 46, 47, 51, 68, 74, 94, 131, 265, 350, 359, 439, 473, 486, 489, 522, 550, 578, 581, 583, 590, 596, 671, 712, 725, 726, 736, 747, 752, 755, 757, 758, 765, 767, 768, 769, 770, 771, 773, 778, 789, 790], "input_arrai": [23, 25, 26, 767], "torch_model": [23, 25, 26, 43], "thank": [23, 778, 786], "fledg": [23, 748, 775, 776], "rand": [23, 25, 26, 41, 736, 742, 789], "output_arrai": [23, 25, 26], "0768": [23, 108, 575], "0727": 23, "0942": 23, "1300": 23, "1350": [23, 51, 74, 348, 403], "0839": 23, "1511": 23, "1061": 23, "0606": 23, "0896": 23, "softmaxbackward0": 23, "furthermor": 23, "relat": [23, 238, 581, 742, 746, 747, 748, 749, 761, 768, 770, 771, 772, 773, 790, 798], "interest": [23, 25, 37, 231, 264, 581, 747, 749], "continu": [23, 25, 26, 41, 117, 278, 577, 581, 742, 746, 747, 748, 750, 751, 767, 770, 781, 786, 787, 795], "regress": [24, 795, 802], "checkout": [25, 40, 749, 751, 770], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 25, "e": [25, 42, 43, 47, 51, 56, 60, 62, 63, 64, 66, 73, 74, 79, 83, 86, 87, 89, 91, 93, 121, 130, 131, 134, 135, 138, 142, 171, 184, 211, 212, 213, 217, 219, 220, 223, 225, 227, 231, 232, 234, 237, 238, 244, 245, 252, 253, 254, 255, 262, 263, 264, 265, 267, 269, 271, 273, 274, 277, 278, 282, 288, 307, 341, 347, 348, 354, 359, 360, 365, 366, 369, 383, 384, 385, 386, 398, 400, 406, 459, 460, 461, 462, 463, 474, 475, 483, 576, 578, 579, 580, 581, 585, 586, 588, 590, 592, 594, 595, 596, 611, 614, 619, 620, 624, 625, 627, 630, 633, 634, 635, 638, 641, 649, 657, 668, 672, 673, 674, 677, 682, 683, 686, 687, 688, 696, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 724, 736, 742, 743, 745, 747, 748, 749, 750, 751, 753, 755, 757, 761, 766, 768, 770, 775, 778, 781, 782, 783, 786, 787, 789, 791], "pyvi": [25, 26], "theoret": 25, "aspect": [25, 26, 743, 766, 778, 795], "switch": [25, 37, 753, 761, 764, 765, 802], "easiest": [25, 742, 744, 748, 782], "defer": [25, 26, 747, 752, 757, 758, 764, 767, 768, 770, 801], "similarli": [25, 38, 131, 138, 214, 307, 341, 578, 581, 753, 757, 768, 773, 777, 801], "obtain": [25, 26, 44, 51, 74, 302, 341, 347, 386, 585, 611, 768, 789], "essenc": [25, 796, 801], "becom": [25, 51, 74, 91, 320, 344, 350, 421, 588, 646, 733, 749, 755, 757, 759, 761, 767, 781, 785, 787, 789], "regardless": [25, 26, 37, 68, 743, 757, 761, 777, 780, 787], "being": [25, 26, 37, 51, 68, 74, 89, 93, 97, 118, 348, 350, 403, 439, 536, 578, 583, 586, 620, 722, 723, 742, 748, 749, 751, 752, 753, 755, 757, 758, 759, 763, 765, 767, 768, 769, 770, 771, 773, 775, 778, 781, 786, 787, 791, 793, 794, 795, 796, 801, 802], "slide": [25, 51, 55, 74, 78, 347, 365, 366, 367, 383, 384, 385, 386, 389, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724], "A": [25, 26, 40, 47, 48, 51, 52, 58, 60, 64, 65, 68, 71, 73, 74, 75, 78, 79, 81, 83, 85, 88, 91, 94, 114, 115, 117, 124, 132, 138, 144, 185, 204, 266, 268, 272, 296, 307, 309, 310, 312, 322, 325, 329, 330, 341, 344, 347, 348, 350, 353, 354, 359, 375, 389, 396, 406, 415, 424, 427, 445, 448, 453, 454, 455, 456, 459, 460, 461, 462, 463, 471, 480, 482, 487, 489, 498, 510, 511, 541, 542, 543, 546, 574, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 590, 592, 596, 597, 608, 617, 619, 622, 623, 628, 629, 633, 634, 646, 649, 651, 655, 657, 665, 668, 670, 672, 673, 674, 675, 676, 680, 681, 682, 683, 685, 686, 687, 688, 690, 696, 706, 714, 715, 722, 723, 740, 742, 746, 747, 748, 750, 755, 757, 758, 761, 763, 764, 768, 769, 770, 775, 778, 781, 782, 783, 784, 785, 786, 787, 789, 790, 795, 796], "could": [25, 26, 31, 62, 594, 696, 697, 698, 699, 747, 748, 749, 751, 756, 757, 759, 765, 767, 768, 769, 770, 775, 777, 778, 779, 786, 787, 795, 800, 801], "regressor": [25, 26, 742], "input_dim": [25, 26, 40, 742], "output_dim": [25, 26, 40, 742], "linear0": [25, 26, 37, 742, 778, 779], "linear1": [25, 26, 37, 742, 778, 779], "instanti": [25, 26, 760], "adam": [25, 26, 37, 41, 53, 76, 486, 564, 565, 570, 583, 584, 728, 742, 778, 779, 780, 795], "well": [25, 26, 39, 40, 41, 75, 349, 414, 508, 583, 586, 633, 742, 744, 747, 749, 754, 756, 757, 761, 767, 768, 769, 770, 779, 780, 790, 794, 795, 796, 800], "n_training_exampl": [25, 26, 742], "2000": [25, 26, 74, 297, 341, 742], "random_norm": [25, 26, 55, 56, 60, 78, 79, 83, 495, 583, 585, 586, 592, 600, 602, 603, 604, 607, 610, 634, 742], "linspac": [25, 26, 47, 70, 118, 578, 742, 763, 773, 775, 802], "y": [25, 26, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 121, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 140, 143, 144, 145, 154, 156, 159, 171, 184, 188, 192, 197, 198, 199, 203, 205, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 247, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 296, 312, 318, 324, 325, 326, 327, 328, 333, 335, 337, 339, 341, 344, 347, 348, 349, 350, 353, 359, 366, 368, 370, 371, 375, 378, 380, 384, 392, 396, 401, 406, 412, 413, 414, 415, 416, 424, 426, 435, 439, 447, 448, 452, 456, 457, 458, 466, 472, 473, 474, 475, 476, 479, 481, 482, 484, 487, 490, 491, 494, 495, 497, 498, 499, 502, 503, 504, 508, 510, 511, 512, 514, 515, 518, 519, 524, 531, 532, 533, 536, 539, 540, 541, 542, 544, 546, 548, 549, 550, 554, 555, 558, 561, 562, 563, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 600, 602, 604, 607, 608, 609, 613, 614, 615, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 632, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 668, 671, 672, 674, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 740, 742, 753, 755, 758, 759, 766, 768, 769, 770, 771, 773, 775, 777, 789], "loss_fn": [25, 26, 37, 39, 41, 742, 778, 779, 780], "pred": [25, 26, 40, 41, 51, 57, 74, 80, 349, 412, 414, 587, 643, 644, 645, 742, 755, 764, 767], "epoch": [25, 26, 39, 41, 742], "loss": [25, 26, 39, 41, 51, 74, 91, 412, 413, 414, 415, 416, 535, 557, 583, 643, 644, 645, 742, 756, 757, 764, 768, 771, 772, 778, 779, 780, 795, 802], "gradient": [25, 26, 39, 41, 51, 74, 91, 204, 338, 344, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 580, 589, 662, 663, 664, 728, 742, 750, 771, 778, 779, 781, 795], "grad": [25, 26, 37, 41, 564, 584, 728, 742, 766, 778, 779, 780], "execute_with_gradi": [25, 26, 37, 41, 584, 742, 778, 779, 780, 781], "lambda": [25, 26, 42, 44, 115, 117, 494, 566, 567, 569, 574, 577, 583, 584, 586, 590, 619, 672, 673, 677, 742, 747, 764, 765, 766, 769, 773, 775, 778], "2d": [25, 26, 41, 51, 74, 91, 296, 341, 347, 348, 350, 359, 362, 363, 370, 371, 405, 410, 420, 428, 473, 724, 742, 768, 773], "5f": [25, 26, 742], "nonetheless": [25, 26], "slight": [25, 26, 757, 770, 779], "introduc": [25, 26, 238, 581, 588, 594, 654, 696, 755, 756, 757, 765, 769, 770, 773, 778, 785], "address": [25, 26, 52, 548, 583, 747, 749, 751, 752, 763, 775, 787, 791, 793, 795, 801], "extract": [25, 26, 33, 40, 51, 74, 350, 423, 447, 768, 771, 791, 795, 796, 801], "gc": [25, 26], "decompos": [25, 26, 51, 74, 91, 305, 306, 322, 329, 341, 344, 348, 403, 408, 411, 768], "said": [25, 26, 771, 787, 789], "otherwis": [25, 26, 43, 46, 47, 48, 50, 51, 52, 55, 56, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 118, 120, 121, 126, 128, 129, 130, 133, 135, 140, 143, 144, 146, 147, 149, 150, 151, 152, 153, 162, 166, 170, 171, 187, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 293, 294, 296, 305, 306, 312, 313, 314, 316, 317, 318, 324, 325, 331, 333, 335, 336, 337, 339, 341, 344, 347, 348, 353, 365, 366, 367, 370, 371, 372, 398, 409, 410, 412, 413, 415, 416, 419, 420, 421, 424, 425, 427, 429, 430, 431, 438, 445, 447, 448, 451, 453, 455, 456, 457, 458, 460, 472, 473, 474, 475, 476, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 519, 526, 527, 541, 542, 544, 546, 548, 549, 550, 562, 566, 568, 573, 577, 578, 579, 580, 581, 583, 584, 585, 586, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 602, 608, 609, 611, 612, 613, 614, 615, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 634, 638, 640, 641, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 678, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 726, 727, 733, 742, 749, 752, 755, 757, 758, 759, 764, 765, 767, 770, 775, 782, 789, 790], "x0": [25, 26, 44, 75, 487, 583, 759], "normalize_comp": [25, 26], "html": [25, 26, 40, 50, 73, 138, 146, 234, 244, 245, 260, 307, 341, 359, 473, 578, 579, 581, 586, 588, 596, 632, 661, 711, 760, 786], "fname": [25, 26, 42, 44, 726, 778], "anticip": [25, 26], "than": [25, 26, 28, 31, 50, 51, 52, 55, 56, 58, 60, 61, 62, 64, 68, 73, 74, 75, 78, 79, 81, 83, 84, 85, 87, 93, 94, 118, 126, 156, 204, 212, 213, 216, 217, 219, 220, 223, 225, 227, 231, 237, 238, 252, 253, 254, 255, 262, 264, 269, 273, 275, 277, 278, 282, 283, 284, 289, 295, 312, 313, 325, 332, 341, 344, 347, 348, 350, 359, 368, 369, 374, 375, 378, 379, 380, 390, 391, 392, 408, 411, 430, 431, 474, 475, 476, 514, 515, 518, 535, 557, 578, 579, 580, 581, 583, 585, 586, 588, 592, 593, 594, 596, 612, 614, 624, 625, 626, 627, 630, 641, 646, 650, 656, 688, 694, 697, 698, 699, 704, 705, 710, 711, 712, 713, 724, 745, 749, 751, 755, 756, 757, 759, 761, 767, 768, 769, 770, 771, 772, 773, 775, 778, 779, 780, 781, 782, 786, 792, 793, 794, 795, 801, 802], "addition": [25, 26, 755, 767, 768, 801], "return_backend_compiled_fn": [25, 26, 789], "normalize_native_comp": [25, 26], "immedi": [25, 26, 748], "built": [25, 26, 31, 39, 41, 44, 118, 578, 724, 725, 726, 742, 748, 749, 754, 755, 770, 776, 782, 789, 794, 795, 799], "summar": [25, 26, 91, 770], "eager_graph": [25, 26, 742, 789, 790], "lazy_graph": [25, 26, 742, 789, 790], "codebas": [25, 26, 202, 203, 580, 743, 750, 757, 762, 767, 768, 770, 771, 774, 787], "thought": [25, 26, 748, 749, 763, 786, 793], "research": [25, 26, 39, 742, 785, 790, 795, 802], "wa": [25, 26, 31, 40, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 295, 296, 312, 313, 314, 316, 318, 324, 325, 331, 332, 333, 335, 336, 337, 341, 344, 370, 371, 372, 412, 413, 415, 416, 419, 420, 421, 424, 445, 447, 448, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 550, 562, 568, 573, 581, 583, 590, 596, 597, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 733, 742, 745, 749, 751, 756, 759, 764, 766, 768, 775, 777, 786, 789, 790, 794, 795, 797], "No": [25, 26, 39, 51, 57, 74, 80, 349, 413, 414, 415, 416, 587, 643, 749, 756, 757, 795], "matter": [25, 26, 31, 759, 785], "job": [25, 26, 742, 754, 756, 790], "haven": [25, 26, 31, 782, 795], "jax_out": [25, 26], "ideal": [25, 26, 756, 757, 768, 773, 778], "But": [25, 26, 755, 756, 760, 762, 765, 773, 780], "bring": [25, 26, 751, 770, 775, 776, 783, 786], "wise": [25, 45, 50, 51, 56, 67, 73, 74, 79, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 211, 212, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 243, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 269, 270, 272, 273, 280, 285, 286, 288, 290, 291, 293, 294, 312, 313, 318, 319, 320, 321, 324, 325, 326, 327, 331, 332, 335, 336, 339, 344, 347, 348, 350, 370, 371, 372, 394, 400, 426, 433, 435, 436, 452, 575, 581, 588, 614, 646, 728, 773], "vision": [25, 26, 44, 791, 801], "worth": [25, 26], "differenti": [25, 26, 795], "chosen": [25, 26, 44, 118, 219, 578, 581, 593, 695, 747, 756, 768], "while": [25, 26, 33, 51, 55, 68, 74, 78, 91, 94, 117, 133, 170, 238, 239, 259, 260, 321, 344, 347, 348, 350, 390, 406, 441, 442, 472, 577, 578, 579, 581, 585, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 696, 708, 711, 745, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 777, 779, 780, 781, 782, 785, 786, 789, 795, 801, 802], "plai": [25, 26, 349, 414, 742, 748, 752, 758, 768, 770, 780, 795, 798], "critic": [25, 26, 795, 801], "role": [25, 26, 742, 749, 758, 768, 776, 796, 798, 802], "dl": [25, 26], "cnn": [25, 26, 795], "effortlessli": [25, 26], "previous": [25, 26, 552, 583, 733, 748, 753, 764, 766, 770, 775], "pre": [25, 26, 742, 745, 747, 770, 780, 781, 782, 795], "default_devic": [25, 26, 197, 200, 201, 202, 208, 209, 580, 758, 761], "as_n": [25, 26, 48, 49, 68, 71, 72, 149, 150, 151, 152, 153, 154, 160, 187, 188, 200, 579, 580, 757], "certainli": [25, 26, 742, 786, 801], "upon": [25, 26, 43, 749, 759, 767, 770, 773, 781, 794, 795], "unnecessari": [25, 26, 768], "consist": [25, 26, 64, 68, 231, 238, 264, 348, 395, 581, 586, 596, 618, 619, 706, 725, 726, 751, 752, 756, 757, 762, 767, 775, 785, 796], "extend": [25, 26, 51, 74, 350, 359, 439, 476, 753, 754, 757, 760, 761, 763, 768, 771, 781, 792, 795, 801], "infrastructur": [25, 26, 791, 797, 798], "least": [25, 50, 51, 56, 73, 74, 231, 249, 264, 347, 350, 359, 374, 379, 419, 420, 421, 428, 430, 473, 581, 586, 593, 624, 694, 742, 749, 752, 756, 757, 758, 759, 764, 767, 770, 790], "coco": 25, "dataset": [25, 68, 742, 778, 789, 790], "extra": [26, 68, 94, 114, 563, 577, 583, 752, 757, 759, 765, 767, 768, 769, 773, 775, 789, 790, 792, 797], "choic": [26, 43, 51, 64, 74, 87, 348, 350, 409, 423, 596, 711, 713, 742, 748, 756, 767, 768, 778, 787, 790, 795, 802], "structur": [26, 68, 71, 94, 156, 159, 492, 583, 590, 669, 678, 722, 742, 747, 749, 752, 755, 764, 769, 770, 771, 778, 779, 794, 795], "seamlessli": [26, 770], "benefit": [26, 748, 752, 755, 767, 773, 777, 778, 781, 786, 787, 793, 797, 800], "through": [26, 31, 39, 51, 74, 219, 359, 479, 480, 581, 590, 668, 674, 726, 736, 742, 743, 745, 746, 747, 749, 750, 753, 754, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 778, 779, 780, 789, 793, 795, 796, 797], "therefor": [26, 31, 47, 50, 51, 56, 73, 74, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 146, 162, 166, 170, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 307, 308, 314, 317, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 432, 439, 440, 442, 449, 473, 476, 480, 488, 496, 497, 502, 506, 508, 510, 512, 526, 544, 549, 573, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 747, 749, 751, 752, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 773, 775, 777, 779, 781, 785, 792, 795, 801], "wide": [26, 742, 749, 770, 793, 795], "prepar": [26, 39, 41, 44, 742, 756], "plenti": 26, "resourc": [26, 743, 747, 748, 756], "visit": [26, 748, 749, 756], "page": [26, 742, 747, 748, 749, 754, 756, 776, 777, 780, 782], "newli": [27, 28, 40, 42, 48, 71, 143, 489, 579, 583, 749, 753, 756, 767, 770], "randon": [27, 28, 30, 31, 32], "mean_": 27, "std_": 27, "detect": [27, 31, 50, 68, 73, 246, 581, 590, 665, 676, 747, 748, 753, 755, 756, 762, 770, 778, 779], "inspect": [27, 31, 485, 583], "__": [27, 28, 29, 30, 31, 32, 68, 759, 778], "exhibit": [28, 801], "via": [28, 31, 238, 348, 408, 411, 581, 590, 675, 676, 749, 751, 755, 757, 758, 767, 771, 773, 775, 777, 778, 795], "script": [28, 742, 748, 749, 756, 759, 775, 781, 795], "low_level": 28, "chain": [28, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 159, 163, 164, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 312, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 370, 371, 372, 412, 413, 415, 416, 424, 445, 448, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 589, 590, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 662, 663, 667, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 722, 729, 752, 755, 766, 768, 779, 780, 781, 795], "un": [28, 161, 579, 757, 775], "partial_comp": 28, "time_funct": 28, "slowest": [28, 51, 58, 74, 81, 350, 429, 588, 653], "express": [28, 50, 51, 73, 74, 212, 216, 218, 219, 228, 230, 270, 276, 281, 333, 344, 581, 730, 760, 768, 775, 780, 795, 796], "fastest": [28, 51, 58, 74, 81, 348, 350, 406, 429, 588, 653], "maxim": [28, 764, 767, 775, 792, 793, 797, 798, 799], "conclud": [29, 771], "collect": [29, 39, 41, 43, 44, 46, 68, 69, 575, 580, 583, 584, 585, 587, 590, 591, 592, 678, 720, 724, 725, 727, 728, 748, 756, 761, 765, 766, 769, 770, 793, 795, 798], "global": [30, 31, 41, 52, 68, 75, 94, 149, 150, 151, 152, 153, 202, 203, 204, 532, 533, 536, 541, 542, 554, 555, 558, 579, 580, 583, 727, 733, 748, 752, 753, 756, 757, 758, 761, 764, 768, 775, 795], "approach": [30, 747, 748, 749, 752, 755, 757, 758, 764, 768, 770, 771, 773, 777, 778, 781, 792, 799, 801], "b": [31, 45, 50, 51, 52, 55, 56, 64, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 119, 120, 121, 126, 127, 128, 130, 133, 135, 140, 143, 144, 145, 146, 154, 164, 166, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 344, 347, 348, 349, 350, 354, 357, 359, 365, 366, 367, 368, 370, 371, 374, 378, 379, 380, 383, 384, 385, 389, 394, 396, 398, 401, 406, 411, 412, 413, 415, 419, 420, 421, 422, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 438, 439, 445, 447, 448, 451, 452, 457, 458, 460, 461, 463, 464, 466, 473, 474, 475, 476, 478, 480, 482, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 519, 526, 527, 541, 542, 544, 548, 549, 562, 564, 565, 566, 568, 570, 572, 573, 575, 578, 579, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 615, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 668, 671, 672, 673, 674, 676, 677, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 736, 742, 743, 745, 749, 750, 751, 753, 755, 756, 759, 764, 766, 769, 774, 775, 776, 778, 779, 780, 784, 787, 789, 791], "option": [31, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 159, 161, 171, 183, 187, 199, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 347, 348, 349, 350, 353, 354, 355, 357, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 493, 495, 496, 497, 498, 499, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 518, 523, 526, 527, 531, 541, 542, 544, 546, 548, 549, 550, 562, 564, 565, 566, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 672, 675, 676, 677, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 723, 726, 728, 729, 736, 740, 747, 748, 749, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 773, 775, 780, 781, 789, 790, 795, 801], "prioriti": [31, 68, 733, 749, 758, 767], "normalize_via_oper": 31, "determin": [31, 50, 51, 56, 58, 62, 65, 68, 73, 74, 75, 79, 86, 88, 91, 93, 94, 124, 146, 148, 155, 161, 162, 163, 164, 166, 167, 168, 183, 193, 195, 196, 207, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 231, 234, 236, 238, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 261, 264, 269, 273, 276, 277, 278, 279, 280, 281, 282, 285, 328, 333, 344, 347, 348, 349, 359, 382, 396, 412, 473, 484, 487, 508, 509, 513, 514, 515, 516, 517, 518, 544, 562, 578, 579, 580, 581, 583, 586, 588, 589, 594, 597, 613, 614, 615, 617, 621, 622, 624, 626, 627, 629, 630, 632, 633, 638, 640, 641, 647, 662, 663, 664, 696, 697, 698, 699, 700, 714, 715, 723, 727, 755, 757, 758, 760, 764, 768, 770, 772, 773, 785], "might": [31, 52, 170, 494, 579, 583, 745, 747, 748, 749, 756, 757, 759, 762, 765, 768, 770, 771, 773, 775, 777, 778, 783], "think": [31, 747, 749, 756, 759, 773, 796], "uniqu": [31, 41, 51, 52, 62, 74, 75, 85, 350, 438, 439, 450, 519, 583, 589, 590, 594, 662, 663, 664, 667, 671, 696, 697, 698, 699, 742, 751, 755, 764, 768, 769, 773, 781, 785, 798], "rule": [31, 48, 50, 51, 56, 71, 73, 74, 79, 143, 146, 169, 170, 171, 220, 231, 264, 266, 273, 275, 283, 285, 350, 359, 427, 473, 579, 581, 586, 588, 613, 614, 621, 626, 629, 633, 647, 736, 751, 752, 755, 756, 757, 759, 762, 763, 764, 766, 770, 773, 796], "broadcast": [31, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 293, 294, 295, 296, 308, 313, 314, 315, 316, 320, 322, 324, 326, 327, 328, 329, 333, 339, 341, 344, 347, 348, 349, 350, 353, 354, 359, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 384, 385, 388, 391, 392, 393, 400, 401, 404, 405, 407, 412, 413, 414, 415, 416, 422, 424, 427, 432, 440, 441, 442, 443, 445, 448, 449, 453, 456, 457, 458, 459, 460, 462, 463, 473, 474, 475, 476, 479, 480, 481, 482, 490, 491, 495, 496, 497, 502, 503, 512, 526, 527, 564, 565, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 631, 633, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 699, 700, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 736, 755, 757, 759, 760, 761, 770, 771, 775], "elementwis": [31, 51, 59, 74, 82, 287, 289, 336, 339, 586, 591, 639, 684, 764, 771, 775], "must": [31, 39, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 204, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 293, 294, 295, 296, 298, 308, 309, 310, 313, 314, 315, 317, 320, 322, 324, 326, 327, 328, 329, 333, 336, 339, 341, 344, 347, 348, 349, 350, 353, 354, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 388, 390, 391, 392, 393, 395, 400, 401, 404, 405, 406, 407, 410, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 427, 429, 430, 431, 432, 434, 438, 440, 441, 442, 443, 445, 447, 448, 449, 451, 456, 457, 458, 459, 460, 462, 463, 466, 473, 474, 475, 476, 482, 490, 491, 495, 496, 497, 502, 503, 505, 512, 526, 527, 563, 564, 565, 568, 570, 571, 572, 573, 575, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 728, 730, 746, 747, 748, 749, 751, 752, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 770, 771, 772, 773, 775, 779, 780, 785, 787, 790, 796, 802], "taken": [31, 51, 56, 74, 79, 317, 344, 347, 390, 586, 617, 747, 756, 768, 771, 780, 796], "account": [31, 41, 43, 51, 58, 74, 81, 278, 350, 429, 581, 588, 653, 723, 736, 748, 756, 760, 768, 771, 789], "rather": [31, 52, 68, 75, 118, 204, 514, 515, 518, 578, 580, 583, 745, 749, 751, 755, 757, 760, 768, 769, 770, 771, 780, 781, 786, 791, 794, 795], "fact": [31, 91, 749, 751, 756, 768, 770, 775, 778], "pure": [31, 41, 742, 760, 763, 768, 773, 777, 780, 781, 795, 801, 802], "consum": [31, 755, 756, 763, 769, 770], "conflict": [31, 748, 749, 756, 768, 778], "error": [31, 42, 44, 50, 51, 55, 68, 73, 74, 78, 101, 233, 281, 348, 349, 359, 360, 408, 411, 412, 413, 480, 483, 530, 575, 581, 583, 585, 586, 596, 612, 632, 635, 707, 709, 725, 726, 728, 739, 743, 746, 748, 749, 751, 752, 753, 756, 757, 758, 759, 762, 763, 768, 770, 771, 772, 777, 781, 787, 795], "thrown": [31, 512, 583, 752, 758, 761, 762, 781], "doesn": [31, 512, 530, 583, 724, 748, 753, 755, 756, 757, 758, 759, 762, 764, 766, 770, 773, 775, 781, 789, 793], "consider": [31, 747, 759, 763, 773, 785, 792, 793], "combin": [31, 51, 68, 74, 94, 347, 359, 380, 390, 473, 500, 501, 583, 586, 614, 624, 749, 752, 755, 756, 757, 759, 761, 764, 770, 780, 795], "effect": [31, 47, 51, 53, 64, 74, 76, 87, 131, 347, 349, 382, 414, 564, 572, 578, 584, 585, 596, 611, 711, 713, 747, 752, 755, 756, 760, 763, 767, 769, 773, 781, 786], "explain": [31, 51, 74, 347, 380, 390, 742, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 770, 771, 773, 775, 776, 777, 778, 779, 780, 791, 798, 801], "necessari": [31, 47, 51, 70, 74, 81, 120, 231, 264, 350, 419, 420, 421, 425, 427, 429, 430, 431, 438, 451, 535, 557, 581, 583, 649, 650, 651, 653, 655, 656, 658, 660, 742, 748, 752, 753, 755, 757, 759, 767, 768, 770, 772, 773, 789, 790], "standalon": [32, 747, 752, 770, 783, 791, 796, 801, 802], "These": [32, 51, 74, 348, 350, 359, 395, 438, 473, 585, 586, 611, 618, 619, 742, 746, 747, 748, 749, 751, 755, 757, 759, 760, 763, 764, 767, 768, 770, 775, 776, 778, 779, 780, 781, 783, 785, 786, 787, 790, 795, 799, 801, 802], "dynam": [32, 588, 653, 733, 750, 756, 757, 758, 767, 768, 772, 775, 789, 795, 799], "static": [32, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 97, 98, 121, 302, 367, 380, 385, 408, 411, 445, 454, 544, 578, 629, 721, 726, 768, 772, 781, 794, 795, 796], "control": [33, 51, 74, 138, 286, 307, 339, 341, 347, 350, 370, 371, 372, 423, 447, 530, 578, 583, 586, 616, 722, 755, 757, 758, 766, 767, 768, 769, 773, 777, 778, 783, 789, 795, 801], "flow": [33, 755, 789, 795, 796], "statement": [33, 38, 756, 767, 770, 773, 781, 789, 790], "opposit": 33, "exclud": [33, 64, 74, 87, 118, 138, 307, 341, 474, 475, 578, 592, 688, 704, 733, 759, 775, 789], "todo": [34, 35, 36, 41, 44, 74, 475, 747, 757, 768], "aim": [37, 745, 749, 751, 765, 768, 770, 774, 793, 795, 798], "interfac": [37, 70, 126, 578, 777, 780, 781, 783, 786, 791, 792, 793, 794, 795, 799, 802], "set_framework": [37, 44], "44": [37, 41, 50, 51, 60, 73, 74, 83, 217, 264, 274, 278, 279, 315, 344, 347, 367, 368, 581, 585, 586, 590, 593, 596, 608, 629, 673, 686, 687, 695, 706], "45": [37, 39, 41, 50, 51, 64, 73, 74, 76, 78, 83, 94, 215, 219, 231, 274, 275, 331, 344, 347, 359, 368, 378, 389, 474, 480, 564, 570, 581, 584, 586, 588, 596, 629, 655, 687, 688, 706], "46": [37, 39, 41, 51, 60, 74, 78, 83, 130, 254, 275, 297, 341, 347, 366, 384, 385, 578, 581, 590, 666, 686, 687], "47": [37, 41, 50, 51, 56, 60, 73, 74, 75, 76, 78, 83, 220, 278, 347, 359, 366, 384, 385, 474, 495, 496, 568, 581, 583, 584, 585, 586, 592, 609, 621, 687, 688], "underneath": [37, 756, 793], "sai": [37, 747, 748, 765, 777, 787], "clip": [37, 50, 51, 58, 73, 74, 75, 81, 262, 263, 350, 423, 444, 447, 490, 491, 581, 583, 588, 755, 764, 766, 767, 778, 780], "a_min": 37, "a_max": 37, "tensforflow": 37, "clip_by_valu": [37, 780], "clip_value_min": 37, "clip_value_max": 37, "clamp": [37, 51, 74, 287, 339, 780], "min": [37, 41, 48, 51, 52, 56, 64, 71, 74, 75, 79, 87, 136, 138, 156, 159, 263, 307, 309, 341, 348, 396, 496, 526, 527, 541, 578, 579, 581, 583, 586, 596, 625, 631, 634, 635, 641, 742], "max": [37, 39, 48, 51, 52, 56, 64, 71, 74, 75, 79, 87, 156, 159, 262, 347, 348, 350, 365, 366, 367, 383, 384, 385, 386, 388, 396, 446, 490, 491, 496, 512, 526, 527, 579, 581, 583, 586, 596, 625, 627, 630, 724, 728, 756, 768], "n": [37, 40, 41, 42, 44, 47, 50, 51, 55, 56, 58, 60, 61, 64, 65, 73, 74, 78, 79, 81, 83, 84, 87, 88, 91, 93, 131, 136, 137, 138, 211, 281, 283, 307, 308, 317, 341, 344, 347, 348, 350, 353, 354, 357, 359, 361, 362, 363, 368, 369, 374, 375, 378, 379, 380, 388, 389, 390, 396, 397, 405, 407, 411, 421, 425, 428, 432, 434, 445, 451, 453, 454, 455, 459, 460, 461, 462, 463, 466, 473, 482, 578, 581, 585, 586, 588, 590, 592, 593, 596, 597, 598, 599, 600, 601, 603, 605, 607, 614, 617, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 638, 639, 640, 641, 648, 649, 651, 657, 661, 673, 686, 687, 688, 694, 708, 710, 711, 712, 713, 714, 715, 724, 727, 736, 742, 750, 754, 756, 770, 782, 790], "sole": [37, 763, 771, 794, 795, 796], "49": [37, 41, 51, 60, 74, 78, 79, 278, 347, 348, 359, 368, 378, 389, 406, 474, 581, 596, 639, 687, 706], "51": [37, 41, 50, 51, 73, 74, 75, 83, 226, 264, 277, 348, 368, 411, 581, 688], "93": [37, 51, 73, 75, 83, 189, 278, 334, 344, 495, 496, 580, 583, 687, 688], "devicearrai": [37, 752, 768, 775, 777], "concaten": [37, 51, 52, 58, 74, 79, 350, 424, 495, 499, 583, 585, 588, 611, 629, 647, 769, 773, 775, 778], "accept": [37, 46, 47, 50, 51, 56, 69, 73, 74, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 307, 308, 314, 317, 318, 338, 341, 344, 346, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 439, 473, 476, 480, 488, 496, 497, 502, 506, 508, 510, 512, 526, 544, 549, 573, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 742, 747, 748, 749, 752, 755, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 777, 783, 793], "jax_concat": 37, "tf_concat": 37, "np_concat": 37, "torch_concat": 37, "85": [37, 45, 51, 60, 67, 73, 74, 76, 78, 83, 94, 103, 216, 225, 226, 270, 286, 292, 339, 359, 474, 541, 568, 575, 581, 583, 584, 585, 592, 609, 686, 687, 688], "86": [37, 60, 74, 83, 347, 359, 378, 474, 564, 584, 687, 688], "mymodel": [37, 778], "87": [37, 76, 78, 225, 254, 359, 389, 474, 564, 581, 584], "88": [37, 76, 83, 103, 226, 359, 474, 568, 575, 581, 584, 586, 592, 596, 629, 688, 706], "x_in": [37, 778, 779, 780], "90": [37, 39, 41, 50, 51, 73, 74, 226, 230, 270, 274, 334, 344, 350, 359, 445, 474, 581, 586, 596, 629, 706, 786], "reduce_mean": [37, 742, 778, 779, 780], "91": [37, 51, 78, 83, 226, 334, 344, 389, 581, 585, 586, 592, 596, 609, 629, 687, 706], "49040043354034424": 37, "48975786566734314": 37, "4892795979976654": 37, "48886892199516296": 37, "4884953498840332": 37, "4881443977355957": 37, "4878086447715759": 37, "48748287558555603": 37, "48716384172439575": 37, "48684927821159363": 37, "48653748631477356": 37, "48622724413871765": 37, "4859171509742737": 37, "48560672998428345": 37, "48529526591300964": 37, "4849821627140045": 37, "48466697335243225": 37, "4843493402004242": 37, "4840289056301117": 37, "4837053418159485": 37, "4833785891532898": 37, "4830484390258789": 37, "22": [37, 39, 41, 44, 45, 50, 51, 52, 60, 64, 67, 74, 75, 78, 83, 104, 109, 226, 234, 347, 348, 350, 355, 359, 365, 366, 368, 383, 384, 385, 386, 389, 394, 423, 464, 474, 496, 527, 562, 575, 581, 585, 586, 590, 593, 596, 608, 609, 617, 622, 629, 673, 683, 686, 687, 688, 695, 705, 706, 748, 755, 761], "48271444439888": 37, "23": [37, 39, 41, 50, 51, 56, 60, 70, 73, 74, 75, 78, 83, 128, 226, 229, 246, 247, 248, 271, 273, 274, 275, 277, 284, 314, 315, 344, 347, 350, 359, 365, 366, 368, 378, 383, 384, 385, 386, 389, 423, 474, 480, 578, 581, 585, 586, 590, 593, 604, 617, 621, 625, 635, 666, 673, 677, 686, 687, 688, 695, 742, 756, 770, 775], "48237672448158264": 37, "48203518986701965": 37, "25": [37, 39, 40, 41, 50, 52, 56, 57, 60, 64, 67, 73, 74, 75, 78, 79, 82, 83, 87, 93, 94, 109, 129, 214, 215, 225, 231, 233, 244, 249, 264, 269, 272, 274, 277, 278, 279, 284, 298, 341, 349, 359, 389, 412, 414, 415, 474, 482, 510, 511, 527, 541, 578, 581, 583, 586, 587, 590, 591, 596, 599, 613, 617, 622, 639, 644, 666, 673, 677, 684, 686, 687, 688, 705, 706, 708, 713, 755, 766], "48168954253196716": 37, "26": [37, 39, 41, 44, 50, 51, 59, 60, 74, 75, 76, 83, 226, 231, 277, 347, 348, 368, 406, 510, 564, 581, 583, 584, 585, 586, 590, 591, 596, 607, 617, 629, 636, 666, 684, 686, 687, 706], "4813397228717804": 37, "27": [37, 39, 44, 50, 51, 56, 60, 73, 74, 78, 79, 83, 87, 225, 226, 229, 269, 277, 278, 320, 344, 347, 368, 378, 511, 581, 583, 586, 590, 596, 624, 629, 639, 666, 673, 687, 706, 710], "4809857904911041": 37, "48062753677368164": 37, "29": [37, 39, 41, 44, 56, 73, 75, 76, 78, 83, 219, 359, 389, 474, 495, 496, 566, 570, 581, 583, 584, 586, 621, 686, 687, 688], "48026490211486816": 37, "30": [37, 39, 50, 51, 74, 75, 83, 87, 94, 264, 323, 331, 344, 347, 350, 368, 378, 389, 423, 464, 495, 497, 502, 503, 510, 511, 527, 536, 541, 581, 583, 586, 590, 596, 622, 629, 674, 686, 687, 705, 706, 710, 723, 756], "479898065328598": 37, "31": [37, 39, 40, 44, 45, 50, 51, 73, 74, 75, 78, 83, 104, 109, 130, 225, 256, 264, 347, 350, 359, 367, 368, 423, 474, 490, 575, 578, 581, 583, 687, 688, 778], "47952669858932495": 37, "4791509211063385": 37, "33": [37, 39, 40, 50, 60, 64, 73, 75, 76, 78, 217, 218, 225, 274, 347, 350, 359, 366, 388, 389, 423, 474, 491, 541, 568, 581, 583, 584, 585, 586, 590, 596, 608, 609, 629, 683, 686, 706, 713], "4787706732749939": 37, "34": [37, 39, 73, 74, 75, 83, 159, 226, 229, 256, 277, 347, 359, 389, 480, 495, 496, 579, 581, 583, 585, 586, 592, 609, 626, 687, 688, 758], "47838595509529114": 37, "35": [37, 45, 55, 56, 67, 73, 74, 78, 79, 83, 104, 219, 278, 347, 368, 378, 581, 585, 586, 593, 596, 609, 614, 621, 687, 695, 706], "4779967665672302": 37, "36": [37, 41, 50, 51, 55, 64, 74, 75, 79, 219, 274, 275, 323, 344, 347, 359, 368, 378, 474, 495, 496, 542, 581, 583, 586, 590, 596, 609, 626, 629, 639, 676, 706], "47760307788848877": 37, "37": [37, 45, 50, 51, 67, 73, 74, 78, 93, 104, 217, 225, 274, 277, 281, 355, 389, 464, 581, 585, 586, 590, 592, 609, 626, 673, 687, 756], "4772048890590668": 37, "38": [37, 39, 41, 44, 48, 51, 73, 74, 83, 156, 281, 331, 344, 347, 359, 366, 385, 388, 389, 474, 579, 581, 586, 626, 759], "47680220007896423": 37, "47639501094818115": 37, "40": [37, 39, 41, 51, 52, 73, 74, 75, 83, 87, 94, 225, 229, 249, 278, 323, 344, 347, 366, 368, 378, 384, 495, 497, 502, 503, 527, 541, 563, 566, 581, 583, 584, 586, 590, 596, 622, 629, 674, 687, 706, 710, 742, 756], "47598329186439514": 37, "41": [37, 39, 44, 50, 51, 56, 73, 74, 75, 78, 79, 104, 218, 226, 264, 278, 347, 348, 355, 359, 366, 384, 389, 403, 464, 474, 490, 491, 575, 581, 583, 586, 596, 613, 621, 712], "4755673110485077": 37, "4751465618610382": 37, "4747215211391449": 37, "4742920398712158": 37, "47385817766189575": 37, "47341999411582947": 37, "47297725081443787": 37, "4725303053855896": 37, "47207894921302795": 37, "47162333130836487": 37, "47116345167160034": 37, "52": [37, 50, 73, 75, 76, 83, 219, 229, 231, 359, 474, 495, 496, 511, 564, 581, 583, 584, 585, 586, 596, 609, 629, 688, 706, 736], "470699280500412": 37, "53": [37, 56, 60, 73, 78, 150, 206, 236, 389, 567, 569, 579, 580, 584, 586, 591, 621, 684, 688], "47023090720176697": 37, "54": [37, 48, 50, 55, 73, 74, 78, 83, 159, 228, 229, 234, 249, 278, 284, 297, 341, 347, 359, 368, 378, 474, 581, 585, 586, 596, 609, 626, 629, 686, 687, 688, 706, 756, 759], "4697583019733429": 37, "55": [37, 45, 74, 83, 109, 225, 284, 359, 474, 510, 581, 583, 586, 592, 596, 622, 629, 687, 688, 706, 751], "46928152441978455": 37, "56": [37, 39, 50, 51, 55, 60, 73, 74, 78, 130, 264, 278, 281, 284, 347, 368, 378, 564, 578, 581, 584, 585, 586, 590, 596, 600, 602, 604, 609, 629, 665, 687, 706, 759], "46880054473876953": 37, "57": [37, 39, 50, 51, 73, 74, 189, 212, 213, 216, 217, 219, 226, 229, 230, 270, 286, 580, 581], "4683155119419098": 37, "58": [37, 490, 583], "4678264260292053": 37, "59": [37, 50, 226, 359, 474], "46733325719833374": 37, "46683603525161743": 37, "61": [37, 39, 50, 51, 56, 73, 74, 76, 80, 83, 217, 252, 254, 279, 368, 564, 581, 584, 585, 586, 587, 607, 621, 643, 645, 688], "4663347601890564": 37, "62": [37, 39, 45, 67, 73, 83, 104, 249, 277, 581, 591, 592, 684, 686, 688], "4658295214176178": 37, "63": [37, 41, 50, 67, 73, 78, 79, 109, 270, 277, 278, 347, 359, 368, 378, 389, 474, 581, 586, 590, 596, 613, 629, 666, 677, 706], "465320348739624": 37, "4648073613643646": 37, "65": [37, 39, 41, 44, 73, 76, 83, 225, 264, 510, 564, 581, 583, 584, 586, 596, 629, 687, 688, 706, 756], "46429020166397095": 37, "66": [37, 39, 41, 64, 74, 75, 76, 226, 347, 378, 495, 496, 568, 581, 583, 584, 586, 596, 629, 706], "4637692868709564": 37, "46324464678764343": 37, "68": [37, 41, 44, 50, 83, 104, 127, 219, 347, 368, 378, 575, 578, 581, 591, 684, 687, 688], "4627160429954529": 37, "4621836841106415": 37, "70": [37, 39, 51, 74, 75, 347, 368, 378, 503, 527, 586, 596, 629, 706, 786], "4616474211215973": 37, "71": [37, 50, 73, 78, 230, 270, 389, 581], "46110764145851135": 37, "72": [37, 51, 60, 74, 76, 236, 323, 344, 347, 368, 378, 568, 581, 584, 586, 596, 629, 687, 706], "460563987493515": 37, "73": [37, 50, 79, 278, 359, 474, 586, 592, 613, 687, 770], "4600166976451874": 37, "74": [37, 39, 50, 83, 226, 256, 581, 586, 626], "45946577191352844": 37, "45891112089157104": 37, "45835286378860474": 37, "77": [37, 41, 75, 226, 542, 581, 586, 596, 629, 706], "4577910006046295": 37, "78": [37, 53, 226, 275, 570, 581, 584, 586, 592, 596, 629, 687, 706], "45722562074661255": 37, "79": [37, 39, 51, 52, 74, 75, 78, 83, 93, 226, 231, 347, 368, 378, 389, 490, 491, 581, 583, 688], "45665669441223145": 37, "80": [37, 51, 74, 323, 344, 348, 359, 406, 474, 586, 590, 596, 629, 676, 706, 786], "4560841917991638": 37, "81": [37, 41, 50, 56, 71, 73, 79, 83, 159, 229, 254, 279, 359, 474, 579, 581, 586, 590, 592, 596, 621, 626, 639, 673, 688, 706, 770], "4555082619190216": 37, "82": [37, 39, 44, 45, 50, 76, 83, 104, 217, 359, 474, 564, 584, 687, 688, 745], "45492875576019287": 37, "83": [37, 56, 78, 83, 278, 347, 359, 368, 378, 389, 474, 581, 585, 586, 609, 621, 687], "45434585213661194": 37, "84": [37, 55, 64, 73, 83, 159, 189, 254, 579, 580, 586, 591, 596, 609, 629, 684, 687, 688, 706], "45375964045524597": 37, "4531698524951935": 37, "4525766670703888": 37, "45198020339012146": 37, "4513803720474243": 37, "4507772624492645": 37, "4501707851886749": 37, "4495610296726227": 37, "92": [37, 41, 51, 52, 83, 334, 344, 562, 572, 584, 586, 615, 687, 688], "4489481747150421": 37, "44833192229270935": 37, "94": [37, 50, 51, 53, 60, 73, 74, 76, 83, 198, 274, 275, 334, 344, 378, 568, 580, 584, 688], "4477125108242035": 37, "95": [37, 51, 53, 56, 60, 67, 76, 78, 83, 101, 334, 344, 389, 564, 568, 572, 575, 584, 586, 592, 621, 687, 688], "44708991050720215": 37, "96": [37, 51, 53, 73, 74, 75, 83, 228, 249, 281, 334, 344, 347, 368, 495, 496, 568, 581, 583, 584, 586, 596, 629, 688, 706], "44646409153938293": 37, "97": [37, 51, 53, 73, 76, 83, 217, 334, 344, 568, 581, 584, 687], "44583529233932495": 37, "98": [37, 45, 51, 53, 60, 67, 73, 76, 83, 104, 226, 229, 277, 334, 344, 568, 575, 581, 584, 586, 590, 593, 596, 629, 666, 677, 686, 688, 695, 706], "4452032148838043": 37, "99": [37, 50, 51, 53, 71, 73, 83, 127, 213, 228, 334, 344, 541, 568, 578, 581, 583, 584, 590, 596, 669, 677, 687, 706], "44456806778907776": 37, "4439": 37, "selectbackward0": 37, "hope": [37, 781, 786, 801], "short": [37, 585, 610, 747, 749, 757, 775, 779], "ivy_compil": 38, "ic": 38, "produc": [38, 51, 52, 55, 74, 78, 289, 292, 295, 298, 339, 341, 585, 612, 747, 757, 762, 767, 769, 770, 771, 789, 796, 798], "numer": [38, 47, 48, 50, 51, 52, 56, 60, 61, 64, 71, 73, 74, 75, 79, 83, 84, 86, 93, 94, 131, 143, 211, 214, 227, 231, 236, 237, 238, 245, 246, 247, 250, 259, 260, 264, 266, 267, 268, 269, 273, 274, 275, 279, 280, 284, 285, 354, 359, 460, 473, 532, 533, 541, 542, 554, 555, 578, 579, 581, 583, 586, 592, 593, 596, 614, 621, 624, 629, 632, 634, 636, 638, 640, 686, 687, 688, 690, 691, 692, 694, 695, 700, 707, 710, 712, 723, 745, 757, 766, 768, 769, 770, 771, 772, 773, 775, 779, 792, 795, 801], "anyth": [38, 51, 74, 359, 479, 480, 749, 761, 770, 771, 795, 796], "affect": [38, 44, 756, 768], "intermedi": [38, 793, 794, 795, 796, 801], "variabl": [38, 40, 41, 43, 51, 52, 53, 59, 68, 74, 75, 76, 82, 114, 115, 117, 348, 354, 359, 409, 461, 472, 473, 488, 512, 513, 514, 515, 518, 544, 565, 566, 568, 570, 571, 572, 577, 583, 584, 586, 589, 591, 633, 662, 663, 664, 684, 721, 722, 723, 724, 725, 726, 727, 728, 729, 749, 753, 757, 760, 763, 766, 767, 770, 771, 775, 778, 779, 780, 781, 782, 789, 796], "original_fn": 38, "100000": 38, "var": [38, 64, 87, 89, 114, 115, 116, 117, 577, 589, 596, 662, 663, 730, 748, 759, 775], "co": [38, 39, 50, 52, 73, 229, 234, 236, 277, 499, 581, 583, 746, 757, 775, 786], "sin": [38, 50, 52, 73, 229, 234, 236, 277, 499, 581, 583, 752, 775], "tan": [38, 50, 73, 486, 581, 583, 760, 763, 764, 767, 768, 775], "comp_fn": 38, "compile_graph": [38, 44, 775, 780], "expected_result": 38, "compiled_result": 38, "irrelev": [38, 756, 757, 759], "opeat": 38, "_layer": [38, 775], "net": [38, 43, 44, 775, 780, 786, 787], "compiled_net": 38, "proceed": 39, "latest": [39, 41, 50, 73, 146, 234, 244, 245, 260, 359, 473, 579, 581, 586, 588, 596, 632, 661, 711, 724, 742, 747, 748, 749, 751, 753, 756, 760, 771, 781, 782, 790, 800], "pypi": [39, 41, 44, 747, 748, 771, 781], "pkg": [39, 41, 44], "wheel": [39, 41, 44, 785], "public": [39, 41, 44, 492, 583, 756, 766, 777, 798], "revis": [39, 41, 749], "tmp": [39, 41, 539, 561, 583], "req": [39, 41], "tabqrujw": 39, "command": [39, 41, 742, 744, 748, 751, 754, 756, 762, 782], "filter": [39, 41, 43, 51, 55, 74, 78, 300, 301, 341, 347, 367, 385, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724, 742, 753, 756], "quiet": [39, 41], "resolv": [39, 41, 51, 64, 238, 359, 474, 475, 581, 588, 596, 649, 704, 705, 710, 712, 749, 754, 757, 762, 775], "commit": [39, 41, 745, 747, 751, 759, 770], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 39, "metadata": [39, 41, 44, 767], "setup": [39, 41, 44, 748, 749, 754, 756], "done": [39, 41, 44, 586, 620, 746, 747, 748, 749, 751, 754, 756, 758, 759, 762, 767, 768, 770, 778, 789, 790, 795], "satisfi": [39, 41, 44, 51, 347, 348, 369, 396, 757, 759], "core": [39, 40, 41, 43, 44, 51, 74, 91, 195, 348, 399, 408, 411, 580, 748, 758, 770, 780, 785, 793, 794, 795, 796, 800, 802], "einop": [39, 41, 44, 52, 75, 495, 496, 497, 583, 786], "py3": [39, 41, 44], "whl": [39, 40, 41, 44], "kb": [39, 41, 44], "psutil": [39, 41, 44], "cp39": [39, 41], "manylinux_2_12_x86_64": [39, 41], "manylinux2010_x86_64": [39, 41], "manylinux_2_17_x86_64": [39, 41], "manylinux2014_x86_64": [39, 40, 41], "mb": [39, 41, 44, 756], "eta": [39, 41, 44], "00": [39, 41, 44, 51, 52, 74, 75, 79, 236, 295, 341, 347, 368, 374, 378, 379, 499, 542, 581, 583, 586, 587, 620, 643, 762, 770], "termcolor": [39, 41, 44, 68, 94], "tar": [39, 40, 41, 44], "gz": [39, 40, 41, 44], "colorama": [39, 41], "py2": [39, 41], "nvidia": [39, 41, 44, 799, 800], "495": [39, 41], "nvidia_ml_pi": [39, 41], "diskcach": 39, "pypars": [39, 41, 44], "ivy_cor": [39, 41, 44, 748], "1338326": 39, "sha256": [39, 41, 44], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 39, "store": [39, 41, 44, 48, 51, 52, 56, 58, 68, 71, 74, 75, 79, 81, 145, 347, 348, 390, 394, 398, 499, 583, 586, 588, 638, 655, 724, 725, 726, 744, 749, 752, 753, 755, 760, 765, 767, 768, 769, 775, 777, 778, 779, 783, 789], "directori": [39, 40, 41, 44, 539, 561, 580, 583, 744, 747, 748, 749, 754, 756, 768, 770, 782], "ephem": [39, 41], "cach": [39, 41, 44, 186, 489, 580, 583, 733, 762, 764, 767, 770], "njrc_e6b": 39, "07": [39, 41, 53, 57, 73, 76, 80, 83, 219, 252, 256, 275, 347, 378, 554, 564, 565, 567, 568, 569, 570, 581, 583, 584, 587, 644, 645, 687, 725, 728, 779], "2e": [39, 41], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [39, 41], "4845": [39, 41], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 39, "root": [39, 40, 41, 44, 50, 73, 278, 581, 722, 744, 748, 749, 754, 768, 778], "b6": [39, 41], "0d": [39, 41], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [39, 41], "successfulli": [39, 41, 44, 726, 748, 752], "attempt": [39, 41, 44, 748, 772, 781], "uninstal": [39, 41, 44], "found": [39, 41, 42, 44, 56, 58, 62, 68, 74, 79, 81, 85, 94, 192, 359, 424, 474, 580, 590, 617, 624, 657, 676, 696, 722, 747, 748, 749, 752, 753, 754, 755, 757, 758, 760, 762, 765, 767, 768, 782, 797], "cannot": [39, 40, 41, 44, 51, 281, 419, 420, 421, 581, 749, 751, 753, 757, 768, 775, 780, 801], "vnd": [39, 41, 44], "json": [39, 41, 44, 68, 748, 778], "psst": 39, "cv2": [39, 41, 43, 778], "pickl": [39, 40, 68, 726, 755, 778], "imageio": 39, "urllib": [39, 44], "_src": 39, "xla_bridg": 39, "tpu": [39, 185, 191, 202, 207, 580, 758, 795, 798], "fall": [39, 725, 726, 728, 747, 757, 774], "back": [39, 51, 58, 74, 81, 350, 429, 528, 551, 583, 585, 588, 611, 653, 723, 725, 726, 728, 748, 752, 757, 758, 761, 765, 766, 772, 774, 781, 782, 786, 793, 797], "tf_cpp_min_log_level": 39, "rerun": 39, "info": [39, 739, 742, 754, 760, 762], "mkdir": [39, 40, 41, 748, 756], "perceiv": [39, 40], "touch": 39, "io_processor": 39, "position_encod": 39, "absl": 39, "jmp": 39, "tabul": 39, "2023": 39, "04": [39, 40, 47, 53, 67, 71, 76, 103, 104, 130, 156, 236, 532, 564, 565, 570, 575, 578, 579, 581, 583, 584, 748, 770], "185": [39, 67], "199": [39, 217, 581], "111": [39, 590, 683], "133": [39, 55, 491, 583, 609], "108": [39, 585, 596, 609, 706], "109": [39, 56, 586, 621], "connect": [39, 724, 748, 779, 780, 786, 793], "443": [39, 276, 581], "sent": 39, "await": 39, "respons": [39, 749, 756, 757], "200": [39, 75, 78, 225, 347, 370, 371, 503, 527, 581, 583, 736, 778], "ok": [39, 748], "length": [39, 40, 47, 51, 57, 58, 68, 74, 80, 81, 91, 94, 118, 126, 131, 292, 297, 300, 301, 311, 317, 339, 341, 344, 347, 348, 350, 354, 357, 369, 374, 375, 378, 379, 380, 390, 400, 407, 439, 447, 461, 466, 563, 578, 583, 585, 586, 587, 588, 594, 611, 634, 635, 643, 653, 696, 722, 724, 770, 778], "29359": 39, "29k": 39, "plain": 39, "67k": 39, "002": 39, "110": 39, "30179": 39, "47k": 39, "8107": 39, "9k": 39, "92k": 39, "functool": [39, 761, 768, 777], "itertool": 39, "matplotlib": [39, 40, 41, 44], "pyplot": [39, 40, 41, 44], "plt": [39, 40, 41, 44], "preprocessor": 39, "vector": [39, 47, 51, 52, 55, 56, 74, 75, 78, 79, 91, 131, 347, 348, 350, 354, 359, 369, 395, 399, 405, 407, 410, 439, 441, 443, 461, 473, 491, 495, 512, 563, 578, 583, 585, 586, 609, 611, 614, 618, 619, 621, 624, 629, 634, 635, 639, 640, 641, 642, 724, 795], "perceiverbackbon": 39, "input_preprocessor": 39, "_input_preprocessor": 39, "_encod": 39, "__call__": [39, 724, 725, 726, 742, 790], "is_train": 39, "po": 39, "input_mask": 39, "network_input_is_1d": 39, "_input_is_1d": 39, "queri": [39, 40, 55, 68, 78, 189, 203, 505, 531, 580, 583, 585, 611, 612, 724, 755, 757, 777, 795], "decod": [39, 778], "cross": [39, 41, 56, 57, 79, 80, 586, 587, 643, 644, 645, 742, 756, 757], "attend": [39, 585, 611], "encoder_queri": 39, "latent": [39, 589, 664], "imagepreprocessor": 39, "deal": [39, 745, 758, 764, 766, 768, 781], "image_s": 39, "fourier_pos_config": 39, "position_encoding_typ": 39, "fourier": [39, 51, 74, 347, 369, 374, 375, 379, 380, 390, 499, 583], "fourier_position_encoding_kwarg": 39, "concat_po": 39, "max_resolut": 39, "num_band": [39, 52, 75, 499, 583], "sine_onli": 39, "prep_typ": 39, "spatial_downsampl": 39, "cross_attend_widening_factor": 39, "cross_attention_shape_for_attn": 39, "kv": 39, "dropout_prob": 39, "num_block": 39, "num_cross_attend_head": 39, "num_self_attend_head": 39, "num_self_attends_per_block": 39, "num_z_channel": 39, "self_attend_widening_factor": 39, "use_query_residu": 39, "z_index_dim": 39, "z_pos_enc_init_scal": 39, "02": [39, 47, 52, 53, 59, 60, 73, 76, 83, 130, 216, 217, 256, 347, 368, 378, 379, 541, 542, 564, 565, 570, 578, 581, 583, 584, 587, 591, 592, 643, 684, 687, 688, 769], "perceiver_backbon": [39, 742], "perceiverencod": 39, "At": [39, 747, 748, 749, 751, 770, 771, 786, 795], "almost": [39, 746, 755, 769, 776, 778, 785], "publish": [39, 742, 781, 787, 790], "thankfulli": [39, 770], "perceiver_io": [39, 40], "imagenet_fourier_position_encod": 39, "pystat": 39, "imagenet_checkpoint": 39, "rb": 39, "ckpt": 39, "read": [39, 41, 51, 58, 68, 70, 74, 81, 126, 350, 429, 578, 588, 653, 747, 748, 754, 756, 770, 772, 773, 795], "173": [39, 56, 586, 621], "194": 39, "217": [39, 761], "125": [39, 51, 56, 79, 225, 320, 344, 349, 412, 581, 586, 639], "177": [39, 41], "193776248": 39, "185m": 39, "octet": 39, "184": 39, "80m": 39, "144mb": 39, "144": 39, "mean_rgb": 39, "stddev_rgb": 39, "im": 39, "denorm": 39, "resize_and_center_crop": 39, "crop": [39, 51, 74, 347, 375, 380, 390], "center": [39, 723], "image_height": [39, 41, 742], "image_width": [39, 742], "padded_center_crop_s": 39, "minimum": [39, 50, 51, 52, 58, 61, 64, 73, 74, 75, 81, 84, 87, 211, 239, 266, 309, 320, 341, 344, 350, 359, 439, 471, 475, 532, 533, 541, 542, 554, 555, 581, 583, 588, 593, 596, 646, 692, 707, 709, 772, 792, 798, 802], "offset_height": 39, "offset_width": 39, "crop_window": 39, "inter_cub": 39, "ye": [39, 781], "dummy_input": [39, 742], "transpili": 39, "torch_perceiver_backbon": 39, "quicker": 39, "params_v": [39, 742, 790], "perceiverioclassifi": [39, 742], "max_pool": [39, 742], "huggingfac": [39, 789, 790], "Of": [39, 752, 767, 768, 778, 800, 801], "cours": [39, 748, 749, 751, 752, 759, 767, 768, 773, 778, 781, 800, 801], "468": 39, "huggingface_hub": 39, "dill": 39, "multiprocess": [39, 68, 94, 583, 778, 781], "py39": 39, "132": [39, 74], "pyarrow": 39, "xxhash": 39, "212": [39, 51, 55, 74, 333, 344, 609], "panda": [39, 41, 786], "pyyaml": 39, "fsspec": 39, "2021": [39, 51, 74, 336, 344, 742], "aiohttp": 39, "tqdm": [39, 41, 742], "async": 39, "timeout": [39, 68, 94, 536, 558, 583, 772], "0a3": 39, "async_timeout": 39, "frozenlist": 39, "manylinux_2_5_x86_64": [39, 44], "manylinux1_x86_64": [39, 44], "158": 39, "attr": 39, "aiosign": 39, "charset": 39, "multidict": 39, "114": [39, 347, 368, 378], "yarl": 39, "264": 39, "extens": [39, 50, 56, 73, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 135, 136, 137, 139, 140, 146, 156, 159, 171, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 314, 344, 359, 473, 578, 579, 581, 586, 588, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 647, 649, 650, 651, 653, 654, 656, 657, 661, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 746, 748, 749, 760, 762, 770, 792, 795, 802], "filelock": 39, "certifi": 39, "2017": [39, 585, 611], "2022": [39, 40], "idna": 39, "urllib3": 39, "pytz": 39, "2020": [39, 751, 795], "dateutil": [39, 44], "six": [39, 44, 748, 773], "wikiart": 39, "paint": [39, 742, 775, 785], "load_dataset": [39, 789, 790], "n_sampl": [39, 51, 74, 350, 442], "10000": [39, 41, 47, 70, 130, 578], "huggan": 39, "split": [39, 40, 41, 45, 50, 51, 58, 67, 68, 73, 74, 81, 101, 103, 106, 108, 109, 202, 203, 204, 282, 322, 329, 350, 425, 434, 451, 495, 522, 575, 580, 581, 583, 585, 588, 598, 605, 606, 658, 720, 724, 742, 743, 749, 756, 774, 775, 781, 802], "wiki_art": 39, "gib": 39, "unknown": 39, "total": [39, 41, 51, 64, 68, 74, 87, 94, 126, 206, 309, 310, 316, 341, 344, 578, 580, 593, 596, 694, 711, 713, 742, 743, 749, 757, 758, 759, 770, 773, 778, 779, 781, 787], "huggan___parquet": 39, "36ee951979f9b56c": 39, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 39, "parquet": 39, "subsequ": [39, 733, 748, 752, 756, 757, 759, 763, 764, 767, 770, 779, 796], "reus": [39, 47, 70, 74, 81, 120, 419, 420, 425, 427, 429, 430, 431, 438, 451, 649, 650, 651, 653, 655, 656, 658, 660, 761, 770, 800], "curl": [39, 748], "server": [39, 742, 748, 749, 754, 782, 795], "row": [39, 51, 74, 124, 138, 307, 341, 348, 350, 357, 359, 400, 409, 431, 437, 452, 466, 472, 473, 578, 586, 592, 593, 625, 633, 634, 639, 685, 694, 723], "2fwikiart": 39, "label": [39, 40, 41, 51, 57, 74, 80, 349, 412, 414, 415, 416, 587, 643, 644, 645, 742, 747, 751, 768, 774, 775, 776, 780, 782, 795], "receiv": [39, 43, 91, 486, 522, 583, 589, 662, 663, 664, 724, 749, 757, 758, 770, 773], "xferd": 39, "averag": [39, 41, 51, 53, 57, 74, 76, 80, 347, 349, 359, 361, 362, 365, 366, 367, 413, 414, 415, 416, 473, 564, 565, 570, 584, 585, 587, 589, 611, 643, 662, 663, 723, 724], "dload": 39, "upload": [39, 770], "spent": [39, 787], "25936": 39, "278k": 39, "number": [39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 91, 93, 94, 97, 118, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 144, 149, 150, 151, 152, 153, 155, 156, 159, 162, 163, 164, 166, 168, 171, 195, 196, 197, 211, 212, 213, 214, 215, 217, 219, 220, 227, 229, 231, 232, 234, 236, 237, 238, 244, 245, 246, 248, 252, 254, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 277, 278, 282, 284, 292, 302, 305, 306, 307, 309, 310, 312, 314, 315, 316, 317, 325, 330, 334, 339, 341, 344, 347, 348, 350, 353, 359, 380, 390, 392, 395, 399, 400, 408, 410, 411, 419, 420, 421, 439, 440, 441, 442, 443, 445, 448, 450, 453, 454, 455, 471, 473, 474, 475, 476, 481, 499, 506, 524, 541, 542, 549, 562, 563, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 592, 593, 594, 596, 597, 598, 605, 606, 608, 611, 614, 618, 619, 620, 627, 632, 634, 638, 639, 640, 643, 646, 648, 649, 651, 652, 654, 655, 657, 659, 661, 662, 663, 664, 685, 689, 694, 696, 697, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 722, 723, 724, 727, 742, 748, 749, 755, 756, 757, 758, 759, 765, 766, 767, 770, 771, 772, 773, 775, 778, 784, 785, 789], "abstract_expression": 39, "action_paint": 39, "analytical_cub": 39, "art_nouveau": 39, "baroqu": 39, "color_field_paint": 39, "contemporary_r": 39, "cubism": 39, "early_renaiss": 39, "expression": 39, "fauvism": 39, "high_renaiss": 39, "impression": 39, "mannerism_late_renaiss": 39, "minim": [39, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 630, 631, 632, 634, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 760, 767, 769, 773, 775, 789, 793, 801], "naive_art_primitiv": 39, "new_real": 39, "northern_renaiss": 39, "pointil": 39, "pop_art": 39, "post_impression": 39, "realism": 39, "rococo": 39, "romantic": 39, "symbol": [39, 736, 747, 748, 795, 796], "synthetic_cub": 39, "ukiyo_": 39, "custom": [39, 51, 74, 294, 338, 339, 346, 736, 744, 756, 761, 765, 769, 770, 773, 779, 786, 795, 799, 800, 801], "hugginfac": 39, "customdataset": 39, "__len__": [39, 755], "__getitem__": [39, 68, 755], "idx": [39, 40, 41, 485, 583, 742, 758, 777], "random_split": 39, "224x224": 39, "train_siz": 39, "val_siz": 39, "test_siz": 39, "dataset_train": 39, "dataset_v": 39, "dataset_test": 39, "dataloader_train": 39, "batch_siz": [39, 41, 44, 51, 55, 60, 74, 78, 83, 347, 349, 365, 366, 367, 383, 384, 385, 386, 416, 585, 592, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 685, 742, 778], "dataloader_v": 39, "dataloader_test": 39, "batch": [39, 40, 41, 51, 52, 56, 68, 74, 75, 79, 202, 203, 347, 353, 361, 362, 363, 369, 382, 453, 454, 455, 499, 502, 503, 563, 580, 583, 585, 586, 589, 591, 609, 611, 623, 641, 662, 663, 664, 684, 724, 727, 742, 755, 764, 769, 778, 793], "iter": [39, 41, 46, 51, 52, 58, 66, 68, 74, 75, 81, 89, 94, 114, 115, 117, 204, 303, 304, 341, 348, 350, 399, 408, 411, 439, 484, 522, 577, 580, 583, 588, 590, 648, 652, 659, 661, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 680, 681, 683, 736, 751, 753, 755, 775, 778, 787, 789], "train_featur": 39, "train_label": 39, "imshow": [39, 40], "crossentropyloss": [39, 725], "sgd": [39, 728, 795], "lr": [39, 53, 76, 486, 565, 568, 570, 571, 572, 583, 584, 728, 778, 779], "001": [39, 50, 51, 59, 71, 74, 76, 156, 254, 271, 314, 325, 344, 565, 579, 581, 584, 591, 684, 778, 779], "momentum": [39, 51, 74, 353, 453, 455, 727, 786], "train_step": 39, "running_loss": [39, 41, 742], "last_loss": 39, "training_load": 39, "intra": 39, "report": [39, 747, 770], "zero_grad": 39, "backward": [39, 51, 65, 74, 88, 273, 347, 369, 374, 375, 379, 380, 390, 581, 586, 597, 614, 640, 714, 715, 724, 771, 781], "adjust": [39, 64, 87, 348, 409, 596, 711, 713, 733], "999": [39, 53, 73, 76, 282, 564, 565, 570, 572, 581, 584, 728, 779], "epoch_numb": 39, "best_vloss": 39, "1_000_000": 39, "avg_loss": 39, "running_vloss": 39, "vdata": 39, "vinput": 39, "vlabel": 39, "voutput": 39, "vloss": 39, "avg_vloss": 39, "best": [39, 522, 583, 742, 743, 746, 747, 748, 749, 750, 756, 757, 761, 770, 771, 782, 798, 799], "model_path": 39, "model_": 39, "state_dict": 39, "highest": [39, 51, 60, 74, 83, 302, 341, 592, 686, 757], "energi": 39, "sum": [39, 41, 50, 51, 52, 55, 56, 57, 64, 68, 73, 74, 75, 78, 79, 80, 87, 91, 93, 94, 204, 214, 256, 280, 310, 330, 341, 344, 348, 349, 359, 389, 394, 412, 413, 414, 415, 416, 479, 480, 496, 526, 527, 580, 581, 583, 585, 586, 587, 596, 608, 612, 625, 634, 638, 641, 643, 644, 645, 705, 706, 723, 725, 736, 742, 755, 757, 764, 766, 767, 768, 775, 789, 790], "accuraci": [39, 41, 44, 757], "augment": 39, "mayb": [39, 40, 46, 742, 748, 756, 775, 777], "meta": [39, 662, 663, 664, 752, 771, 795], "finetun": 39, "deploi": [39, 742, 756, 783, 790, 793, 794, 795, 797, 801], "present": [40, 51, 68, 74, 314, 344, 353, 453, 454, 455, 747, 749, 755, 757, 758, 763, 767, 775, 785, 792, 793, 802], "percieverio": 40, "ai": [40, 793, 797], "contribut": [40, 51, 74, 359, 476, 746, 747, 748, 749, 754, 762, 768, 775, 782, 789, 799], "highli": [40, 742, 795], "invit": [40, 747, 768, 773], "g4ar9q7dtn": 40, "step1": 40, "printf": 40, "8packag": 40, "share": [40, 68, 177, 579, 742, 753, 755, 759, 764, 766, 768, 769, 770, 773, 775, 786, 793, 794, 801], "googledr": 40, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 40, "file_id": 40, "drive": [40, 41], "uc": 40, "export": [40, 756, 794, 801], "id": [40, 51, 74, 187, 309, 310, 341, 580, 725, 726, 742, 746, 748, 752, 754, 755, 762, 766, 770, 782], "tee": [40, 748], "file_id_wget_cmd": 40, "perl": 40, "pe": 40, "g": [40, 42, 43, 51, 60, 62, 64, 66, 74, 83, 89, 91, 142, 171, 184, 231, 244, 264, 271, 274, 347, 348, 354, 359, 383, 385, 411, 459, 460, 461, 462, 463, 474, 475, 579, 580, 581, 586, 590, 592, 594, 596, 619, 620, 625, 632, 634, 635, 641, 668, 672, 674, 677, 682, 686, 687, 688, 696, 697, 698, 699, 704, 705, 707, 709, 710, 712, 723, 743, 747, 748, 750, 751, 753, 754, 755, 766, 768, 770, 775, 781, 783, 787, 791], "uuid": 40, "anywai": [40, 752, 765, 768], "bin": [40, 51, 74, 359, 471, 476, 748, 749, 751, 755], "bash": [40, 748, 749, 751], "step2": 40, "interpret": [40, 47, 51, 70, 74, 119, 120, 126, 132, 359, 473, 578, 756, 796], "sudo": [40, 748], "apt": [40, 748], "yf": 40, "step3": 40, "delet": [40, 749, 756], "xvzf": 40, "rm": [40, 42, 744, 749], "step4": 40, "symlink": 40, "unzip": [40, 41], "fr": 40, "l": [40, 56, 73, 79, 258, 348, 395, 586, 613, 618, 619, 620, 624, 638, 749, 750], "d": [40, 51, 52, 55, 56, 58, 70, 74, 75, 78, 79, 81, 107, 130, 138, 171, 214, 231, 232, 264, 267, 307, 341, 347, 348, 350, 354, 357, 365, 366, 367, 374, 379, 383, 384, 385, 386, 388, 393, 406, 421, 425, 427, 430, 434, 447, 451, 459, 465, 487, 498, 575, 578, 579, 581, 585, 586, 588, 590, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 616, 617, 621, 625, 629, 639, 655, 668, 672, 673, 674, 677, 682, 683, 742, 743, 748, 750, 753, 754, 755, 766, 770, 773, 778, 786, 787, 791], "ln": 40, "sf": 40, "la": 40, "step5": 40, "regular": [40, 74, 348, 359, 406, 477, 586, 623, 748, 768, 795], "step6": 40, "ipkykernel": 40, "step7": 40, "engbjapanpython3": 40, "separ": [40, 51, 52, 74, 353, 454, 585, 611, 749, 752, 755, 756, 770, 775, 777, 778, 796, 800], "ipykernel": 40, "reconnect": 40, "sy": 40, "oct": 40, "gcc": [40, 793, 800], "lf": 40, "upgrad": 40, "cuda11": 40, "cudnn805": 40, "cp38": [40, 44], "helper": [40, 742, 754, 757, 761, 778, 783], "feedforward": 40, "prenorm": 40, "perceiveriospec": 40, "fetch": [40, 749, 751, 756], "ogbanugot": 40, "xmartlab": 40, "caffeflow": 40, "fetch_class": 40, "class_label": 40, "append": [40, 41, 51, 56, 68, 74, 223, 317, 344, 581, 586, 588, 617, 624, 649, 742, 756, 770, 775, 778], "ground_truth": 40, "127": [40, 48, 51, 56, 71, 74, 159, 333, 344, 579, 586, 621], "path_to_imag": 40, "get_imag": 40, "ax": [40, 45, 51, 56, 58, 61, 64, 65, 67, 74, 79, 81, 84, 87, 88, 93, 97, 104, 108, 204, 316, 317, 330, 337, 344, 345, 347, 350, 353, 359, 375, 380, 390, 438, 439, 445, 456, 478, 479, 480, 481, 482, 495, 563, 580, 583, 586, 588, 593, 596, 597, 614, 625, 633, 636, 637, 641, 648, 650, 651, 654, 656, 658, 661, 691, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 757, 759, 770, 771, 775, 777], "fig": [40, 41], "subplot": [40, 41], "spine": 40, "set_vis": 40, "right": [40, 51, 56, 68, 74, 79, 94, 112, 113, 223, 225, 278, 324, 344, 347, 348, 350, 381, 403, 409, 410, 430, 495, 577, 581, 583, 586, 595, 634, 639, 702, 743, 747, 748, 749, 750, 751, 759, 773, 778, 789], "bottom": [40, 495, 583, 747, 748, 756, 801], "tick_param": 40, "set_xticklabel": 40, "set_yticklabel": 40, "show_result": 40, "plot": [40, 742, 795], "along": [40, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 73, 74, 75, 79, 80, 81, 83, 84, 86, 87, 88, 91, 104, 108, 114, 129, 130, 204, 278, 281, 283, 309, 310, 316, 317, 330, 337, 341, 344, 345, 347, 348, 349, 350, 353, 359, 368, 374, 375, 378, 379, 380, 390, 408, 414, 424, 425, 426, 430, 431, 439, 444, 448, 456, 457, 458, 474, 475, 476, 478, 479, 480, 481, 482, 495, 502, 577, 578, 580, 581, 583, 586, 587, 588, 589, 592, 593, 595, 596, 597, 614, 629, 638, 640, 641, 643, 644, 645, 647, 650, 651, 652, 654, 655, 657, 659, 660, 662, 663, 664, 690, 691, 692, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 742, 747, 750, 759, 767, 771, 773, 775, 795], "figur": [40, 772], "figsiz": [40, 41], "listdir": [40, 41], "endswith": 40, "jpeg": [40, 41], "this_dir": 40, "dirnam": 40, "join": [40, 41, 58, 68, 74, 81, 424, 588, 647, 657, 742, 782], "add_subplot": 40, "xtick": 40, "ytick": 40, "set_titl": [40, 41], "color": [40, 68, 94, 741], "green": [40, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 741, 747, 748, 749], "red": 40, "io": [40, 43, 748, 756], "perceiver_io_img_classif": 40, "normalize_imag": 40, "batch_shap": [40, 55, 60, 70, 78, 83, 124, 133, 578, 585, 586, 592, 610, 611, 612, 642, 685, 724, 773, 775, 777], "img_dim": 40, "queries_dim": 40, "learn_queri": 40, "load_weight": 40, "num_input_ax": 40, "network_depth": 40, "num_lat_att_per_lay": 40, "query_shap": 40, "num_fourier_freq_band": 40, "weight_fpath": 40, "pretrained_weight": 40, "isfil": 40, "noinspect": [40, 777], "pybroadexcept": 40, "from_disk_as_pickl": 40, "except": [40, 41, 44, 51, 52, 58, 60, 65, 68, 74, 75, 79, 83, 88, 145, 317, 334, 344, 354, 359, 460, 479, 480, 494, 512, 529, 544, 550, 579, 583, 586, 588, 592, 593, 597, 630, 647, 649, 657, 686, 687, 688, 694, 714, 715, 726, 742, 749, 750, 751, 752, 756, 757, 758, 760, 763, 767, 768, 771, 772, 773, 777, 781], "larg": [40, 50, 51, 73, 74, 214, 231, 238, 264, 265, 359, 473, 581, 586, 632, 748, 749, 756, 778, 789, 795], "action": [40, 746, 756, 759, 762, 770], "fail": [40, 747, 748, 749, 751, 756, 757, 759, 762, 765, 767, 768, 769], "placehold": [40, 590, 672, 677, 682, 724, 749, 752, 763, 783], "rais": [40, 41, 47, 51, 52, 60, 62, 65, 68, 70, 74, 75, 81, 83, 85, 88, 120, 145, 234, 269, 320, 344, 347, 350, 354, 359, 380, 390, 419, 420, 425, 427, 429, 430, 431, 438, 444, 451, 460, 479, 480, 488, 512, 530, 532, 542, 544, 550, 554, 579, 581, 583, 586, 588, 592, 593, 594, 596, 597, 624, 626, 640, 649, 650, 651, 653, 655, 656, 657, 658, 660, 686, 687, 688, 694, 699, 707, 709, 714, 715, 725, 726, 728, 742, 749, 751, 753, 757, 758, 761, 767, 768, 771, 772, 775, 777, 782, 786], "pyunboundlocalvari": 40, "max_fourier_freq": 40, "random_uniform": [40, 44, 60, 83, 592, 758, 761, 770, 775, 779], "03": [40, 47, 50, 52, 53, 73, 76, 83, 130, 229, 254, 541, 542, 565, 570, 578, 581, 583, 584, 586, 587, 622, 643, 687], "817437": 40, "common_runtim": 40, "gpu_bfc_alloc": 40, "cc": 40, "orig_valu": 40, "tf_force_gpu_allow_growth": 40, "autograd": [40, 781], "declar": [40, 749], "_3r2_73j": 41, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 41, "1297564": 41, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 41, "le3bu3_v": 41, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 41, "third": [41, 91, 350, 426, 450, 586, 594, 634, 696, 754, 767, 781, 794, 795, 801], "parti": [41, 754, 781, 786, 794, 795, 801], "csv": [41, 742], "pd": 41, "mount": [41, 744, 749], "mydriv": 41, "chdir": 41, "One": [41, 51, 52, 58, 60, 74, 75, 81, 83, 350, 419, 420, 421, 423, 439, 447, 496, 583, 588, 592, 653, 686, 752, 755, 757, 759, 764, 769, 770, 775, 777, 778], "kaggl": 41, "medium": 41, "articl": [41, 742, 762], "insert": [41, 51, 61, 74, 84, 350, 416, 424, 588, 590, 593, 595, 649, 669, 670, 691, 702, 756, 762], "www": 41, "your_kaggle_usernam": 41, "competit": 41, "digit": 41, "recogn": 41, "zip": [41, 775], "readabl": [41, 752, 755, 761, 762, 763, 770, 771, 777, 778], "system": [41, 586, 633, 742, 748, 749, 753, 756, 757, 781, 790, 793, 795, 798, 800, 802], "chmod": [41, 748, 756], "600": [41, 75, 78, 347, 370, 371, 503, 756], "recent": [41, 739, 748, 749, 770, 785, 786], "modifi": [41, 51, 68, 74, 91, 350, 359, 436, 439, 444, 480, 747, 748, 749, 751, 753, 754, 757, 758, 760, 762, 764, 767, 769, 770, 771, 775], "forc": [41, 754, 756, 758], "archiv": [41, 748], "inflat": [41, 757], "sample_submiss": 41, "frame": [41, 51, 74, 302, 341, 786, 795], "read_csv": 41, "later": [41, 68, 489, 583, 747, 762, 767, 770, 771, 795], "my": [41, 756], "df": 41, "label_df": 41, "mod_train": 41, "drop": [41, 51, 74, 309, 341, 349, 350, 414, 447, 723, 724, 748, 781], "column": [41, 51, 56, 74, 79, 91, 124, 138, 307, 341, 348, 350, 357, 359, 395, 400, 409, 428, 430, 431, 435, 437, 466, 472, 473, 578, 586, 618, 619, 625, 631, 633, 634, 639, 723], "data_valu": 41, "test_data_valu": 41, "correct_label": 41, "train_path": 41, "str": [41, 43, 46, 47, 51, 52, 55, 56, 57, 58, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 131, 133, 135, 140, 141, 144, 146, 148, 149, 150, 151, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 171, 172, 173, 174, 175, 176, 183, 184, 204, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 293, 294, 296, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 347, 348, 349, 350, 353, 359, 365, 366, 367, 369, 370, 371, 372, 374, 375, 379, 380, 383, 384, 385, 386, 388, 389, 390, 392, 396, 408, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 429, 445, 447, 448, 453, 454, 455, 456, 457, 458, 460, 462, 473, 474, 475, 476, 482, 484, 485, 487, 488, 490, 491, 493, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 523, 526, 527, 529, 530, 539, 541, 542, 544, 546, 548, 549, 562, 566, 573, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 671, 672, 677, 682, 685, 686, 687, 688, 690, 693, 696, 697, 698, 700, 704, 705, 706, 708, 710, 711, 713, 714, 715, 724, 726, 727, 736, 757, 758, 761, 764, 767, 768, 771, 775, 780, 789, 790], "makedir": 41, "valid_path": 41, "28x28": 41, "pic": 41, "pictur": [41, 742, 747, 775, 785], "int8": [41, 48, 60, 70, 71, 83, 126, 152, 157, 159, 160, 164, 292, 339, 578, 579, 686, 757, 770], "new_img": [41, 43], "builder": [41, 744], "batchwis": 41, "subset": [41, 752, 756, 760, 763, 766, 768, 770, 775, 795], "goe": [41, 350, 423, 750, 753, 762, 767, 773], "seed": [41, 42, 51, 55, 60, 62, 68, 74, 78, 83, 305, 306, 341, 348, 354, 399, 408, 411, 459, 460, 461, 462, 463, 585, 592, 594, 608, 685, 686, 687, 688, 690, 696, 721, 723, 765, 769, 770], "seed_valu": [41, 68, 592, 689], "randomize_dataset": 41, "shuffl": [41, 51, 60, 68, 74, 83, 461, 592], "create_dataset": 41, "num_examples_per_class": 41, "img_arrai": 41, "class_nam": 41, "dir": [41, 778], "img_path": 41, "imread": [41, 43, 778], "imread_grayscal": 41, "generate_batch": [41, 742], "dataset_s": [41, 742], "y_train": [41, 742], "ivyerror": [41, 737, 742, 761], "smaller": [41, 51, 58, 64, 74, 81, 289, 312, 325, 339, 344, 347, 359, 375, 380, 390, 473, 474, 475, 495, 583, 588, 596, 646, 654, 704, 705, 710, 712, 742, 749, 761, 775], "yield": [41, 61, 303, 304, 341, 350, 439, 593, 695, 742, 756], "x_batch_inst": 41, "form": [41, 43, 46, 47, 51, 56, 68, 70, 79, 90, 91, 119, 120, 132, 136, 137, 295, 298, 308, 314, 341, 344, 348, 350, 395, 403, 426, 435, 439, 452, 485, 545, 547, 578, 583, 585, 586, 590, 613, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 666, 677, 723, 743, 747, 764, 770, 773, 779, 780, 786, 795, 796, 801], "intialis": 41, "num_epoch": [41, 742], "inherit": [41, 752, 755, 761, 777, 781, 783], "creation": [41, 51, 68, 74, 94, 754, 757, 758, 763, 765, 768, 769, 770, 771, 775, 789, 795, 797, 801], "inform": [41, 43, 48, 51, 53, 71, 76, 156, 159, 302, 341, 485, 573, 579, 583, 584, 589, 664, 742, 746, 747, 748, 749, 751, 755, 756, 761, 764, 765, 767, 769, 770, 798], "insid": [41, 56, 79, 94, 350, 448, 586, 627, 748, 749, 752, 755, 757, 758, 764, 765, 770, 771, 789, 801], "ivynet": [41, 742], "h_w": [41, 742], "input_channel": [41, 724, 742, 775, 779], "output_channel": [41, 724, 742, 779], "gelu": [41, 42, 45, 67, 575, 720, 742], "image_widht": 41, "start_dim": [41, 51, 74, 350, 429, 742], "end_dim": [41, 51, 74, 350, 429, 742], "gpu_is_avail": [41, 580, 742], "120": [41, 64, 87, 94, 586, 629, 704, 742], "model_nam": [41, 742], "__name__": [41, 42, 44, 550, 583, 742, 761], "lower": [41, 47, 50, 51, 56, 60, 73, 74, 79, 83, 124, 136, 262, 296, 302, 307, 308, 341, 359, 476, 477, 482, 578, 581, 586, 592, 613, 619, 620, 627, 688, 722, 723, 742, 749, 757, 759, 768, 770, 775, 781, 783, 791, 792, 793, 795, 796, 801, 802], "heavi": [41, 748, 768, 769, 773, 796], "lift": [41, 769, 796], "num_correct": [41, 742], "y_pred": [41, 742], "cross_entropi": [41, 57, 80, 587, 645, 742, 755, 764, 767], "epoch_loss": [41, 742], "field": [41, 56, 62, 79, 85, 348, 350, 395, 450, 586, 594, 618, 619, 631, 632, 634, 696, 697, 698, 742, 756, 793, 801], "training_accuraci": [41, 742], "train_loss": [41, 742], "train_correct": [41, 742], "train_loop": [41, 742], "posit": [41, 43, 46, 50, 51, 52, 56, 57, 58, 73, 74, 75, 79, 80, 81, 91, 124, 126, 138, 156, 211, 212, 213, 217, 220, 231, 238, 245, 246, 252, 254, 264, 265, 272, 273, 277, 278, 282, 296, 307, 312, 315, 325, 341, 344, 348, 350, 393, 409, 415, 438, 489, 499, 563, 576, 578, 579, 581, 583, 586, 587, 588, 592, 593, 597, 613, 616, 638, 643, 649, 654, 689, 694, 714, 715, 721, 742, 747, 749, 751, 755, 768, 770, 771, 778, 789, 797], "leav": [41, 46, 51, 69, 71, 73, 74, 75, 78, 79, 81, 87, 94, 156, 159, 231, 287, 288, 350, 424, 429, 441, 442, 443, 456, 457, 458, 474, 475, 480, 499, 546, 588, 590, 604, 612, 617, 634, 648, 652, 657, 659, 660, 665, 666, 675, 676, 677, 678, 704, 705, 736, 742, 747, 755, 756, 757, 759, 760, 763, 764, 767, 768, 770, 778, 779], "xbatch": [41, 742], "ybatch": [41, 742], "to_devic": [41, 49, 72, 187, 580, 742], "entropi": [41, 57, 80, 587, 643, 644, 645, 742], "hot": [41, 47, 70, 133, 578, 742], "ybatch_encod": [41, 742], "one_hot": [41, 47, 70, 578, 742, 780], "loss_prob": [41, 742], "ret_grad_idx": [41, 566, 584, 766], "xs_grad_idx": [41, 566, 584, 766], "batch_loss": [41, 742], "set_descript": [41, 742], "set_postfix": [41, 742], "accuracy_percentag": [41, 742], "naverag": [41, 742], "6f": [41, 742], "_train_summari": [41, 742], "writer": [41, 742], "writerow": [41, 742], "157it": 41, "01": [41, 47, 51, 52, 53, 74, 75, 76, 79, 83, 130, 256, 274, 275, 295, 301, 325, 341, 347, 368, 378, 379, 499, 541, 542, 564, 565, 570, 578, 581, 583, 584, 586, 589, 592, 620, 664, 687, 688, 753, 780], "06it": 41, "475401": 41, "11it": 41, "081436": 41, "13it": 41, "0187": 41, "029279": 41, "0324": 41, "008382": 41, "07it": 41, "00456": 41, "003816": 41, "82it": 41, "00277": 41, "002179": 41, "05it": 41, "00175": 41, "001569": 41, "00147": 41, "001235": 41, "09it": 41, "00128": 41, "001005": 41, "106": 41, "10it": 41, "00112": 41, "000837": 41, "129": 41, "12it": 41, "000989": 41, "000709": 41, "145": 41, "000873": 41, "000606": 41, "168": [41, 490, 583], "08it": 41, "000774": 41, "000524": 41, "000688": 41, "000455": 41, "000613": 41, "000398": 41, "05": [41, 47, 50, 51, 53, 59, 73, 74, 76, 82, 130, 256, 301, 312, 325, 341, 344, 353, 453, 454, 455, 510, 532, 554, 564, 565, 570, 578, 581, 583, 584, 586, 591, 625, 684, 723, 727, 769, 770], "000547": 41, "000350": 41, "205": 41, "000488": 41, "000308": 41, "218": 41, "000437": 41, "000273": 41, "000391": 41, "000243": 41, "238": [41, 238, 581], "98it": 41, "000351": 41, "000216": 41, "260": 41, "plot_summari": 41, "seaborn": 41, "whitegrid": 41, "ax1": 41, "ax2": 41, "nrow": 41, "ncol": 41, "legend": [41, 747], "fontweight": 41, "bold": 41, "set_xlabel": 41, "set_ylabel": 41, "tight_layout": 41, "savefig": 41, "summary_plot": 41, "png": [41, 43, 44, 778], "close": [41, 56, 236, 254, 274, 295, 341, 581, 586, 588, 634, 649, 747, 748, 749, 757, 760, 768, 773, 795], "save_weight": [41, 726], "model_param": 41, "ivynet_weight": 41, "hdf5": [41, 68, 726, 778], "deitimageprocessor": 42, "tfdeitforimageclassif": 42, "tfdeitforimageclassificationwithteach": 42, "head": [42, 43, 585, 611, 724, 742, 746, 748, 756, 768], "distillation_classifi": 42, "cls_classifi": 42, "randomli": [42, 347, 370, 371, 372, 585, 608, 724], "henc": [42, 62, 214, 314, 344, 581, 588, 594, 649, 696, 697, 698, 699, 733, 748, 755, 756, 757, 767, 770], "reproduc": [42, 55, 78, 585, 608, 745, 751], "set_random_se": 42, "image_processor": [42, 789, 790], "facebook": 42, "distil": [42, 796], "patch16": 42, "outputs_from_original_model": 42, "predicted_class_idx": 42, "id2label": [42, 789], "architectur": [42, 742, 748, 780, 781, 793, 794, 795, 798, 799, 800], "bertforsequenceclassif": 42, "bertforpretrain": 42, "NOT": [42, 259, 581, 736, 747], "probabl": [42, 51, 55, 57, 60, 74, 78, 80, 83, 347, 354, 359, 370, 371, 372, 459, 473, 476, 480, 585, 587, 592, 608, 611, 612, 643, 685, 723, 724, 742, 770, 782, 787], "ptarmigan": 42, "rf": [42, 749], "branch": [42, 219, 231, 234, 236, 264, 276, 277, 278, 281, 581, 748, 749, 751, 756, 762, 781, 789, 795], "moduleconvert": [42, 721, 726], "mc": 42, "from_keras_modul": [42, 721], "compiled_func": 42, "return_graph": [42, 44], "compiled_output": 42, "diverg": [42, 238, 581], "_all_funct": [42, 44], "convert_to_tensor_v2_with_dispatch": 42, "transpose_v2": 42, "convolution_v2": 42, "bias_add": 42, "binary_op_wrapp": 42, "cast": [42, 48, 50, 51, 56, 64, 71, 73, 79, 143, 146, 171, 265, 359, 474, 475, 579, 581, 586, 596, 641, 704, 705, 710, 712, 764, 769, 775], "moments_v2": 42, "batch_norm": [42, 44, 51, 74, 353], "tensordot": [42, 56, 79, 586, 757], "softmax_v2": 42, "_slice_help": 42, "save_to_disk": [42, 44, 726], "12265048989200113": 42, "11038777417100028": 42, "1167045795539998": 42, "ivy_api_kei": 43, "obj": [43, 119, 120, 578, 789, 790], "tupl": [43, 46, 47, 48, 50, 51, 52, 55, 56, 58, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 119, 120, 126, 128, 132, 133, 135, 138, 140, 144, 145, 146, 157, 158, 159, 163, 164, 170, 171, 177, 187, 190, 191, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 299, 304, 307, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 344, 346, 347, 348, 350, 353, 354, 355, 357, 359, 365, 366, 367, 369, 370, 371, 372, 374, 379, 380, 383, 384, 385, 386, 388, 389, 390, 395, 396, 399, 403, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 422, 424, 434, 439, 445, 447, 448, 450, 453, 455, 456, 457, 458, 460, 461, 463, 464, 465, 473, 474, 475, 476, 478, 479, 480, 481, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 531, 541, 542, 543, 544, 546, 547, 548, 549, 562, 563, 564, 565, 566, 568, 570, 573, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 634, 636, 637, 638, 641, 643, 644, 645, 646, 647, 648, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 685, 686, 687, 688, 690, 693, 694, 696, 697, 698, 699, 700, 701, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 724, 726, 736, 752, 757, 763, 764, 767, 769, 770, 775, 778, 779, 781, 789, 790], "callabl": [43, 51, 52, 66, 74, 75, 78, 89, 114, 115, 117, 157, 158, 190, 191, 204, 337, 345, 347, 350, 389, 418, 439, 485, 489, 494, 496, 500, 501, 522, 550, 563, 567, 569, 574, 577, 579, 580, 583, 584, 589, 590, 662, 663, 664, 671, 672, 673, 675, 676, 677, 678, 728, 737, 755, 761, 766, 768, 775, 788, 789, 790], "combo": [43, 778], "permit": [43, 752, 763, 768, 770, 773], "usabl": [43, 763, 771], "neither": [43, 214, 231, 238, 264, 581, 586, 636, 756, 768, 773], "nor": [43, 214, 231, 238, 264, 581, 756, 768, 799], "specifc": 43, "invoc": 43, "represent": [43, 51, 52, 68, 74, 75, 94, 141, 142, 156, 159, 184, 185, 211, 214, 221, 224, 226, 231, 238, 261, 264, 266, 281, 299, 322, 326, 331, 335, 341, 344, 485, 546, 576, 579, 580, 581, 583, 724, 757, 793, 794, 796, 800, 801], "opt": [43, 748, 753, 757, 767, 770, 773], "externally_link": 43, "logo": 43, "patch": [43, 282, 581, 757, 795], "cv2_imshow": 43, "envrion": 43, "canni": 43, "original_img": 43, "fn_arg": 43, "dilate_edg": 43, "edg": [43, 51, 58, 74, 81, 302, 341, 347, 350, 359, 382, 439, 476, 588, 646, 648, 661, 751, 770, 790, 795, 797, 801], "morphologi": 43, "dilat": [43, 51, 55, 74, 78, 347, 350, 383, 384, 385, 388, 389, 439, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724], "hk_model": 43, "resnet18": [43, 44], "keras_model": 43, "count": [43, 51, 58, 62, 65, 70, 74, 81, 85, 88, 126, 197, 316, 344, 350, 359, 450, 471, 476, 578, 580, 586, 588, 594, 597, 614, 640, 647, 650, 696, 697, 714, 715, 754, 755, 759, 778], "odsc": 43, "talk": [43, 800], "networkx": 44, "228": 44, "352": [44, 78, 585, 609, 761], "nvidia_ml_py3": 44, "19190": 44, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 44, "b9": 44, "b1": 44, "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 44, "cycler": 44, "fonttool": 44, "965": 44, "pillow": 44, "kiwisolv": 44, "show_graph": [44, 726], "to_ivy_modul": [44, 721, 780], "image_dim": 44, "v0": [44, 779], "urlerror": 44, "dev_str": 44, "comp_network": 44, "time_chronolog": 44, "ret0_nc": 44, "ret1_nc": 44, "ret0_c": 44, "ret1_c": 44, "pytorch_vision_v0": 44, "distribut": [44, 51, 57, 60, 74, 80, 83, 347, 348, 349, 354, 370, 371, 372, 399, 408, 411, 414, 416, 459, 460, 461, 462, 463, 587, 592, 643, 644, 645, 685, 686, 687, 688, 690, 723, 724, 725, 726, 747, 748, 756, 758, 781, 795, 798], "distributed_c10d": 44, "262": 44, "reduce_op": 44, "deprec": 44, "reduceop": 44, "004645566477999864": 44, "0044566806820000695": 44, "attribut": [44, 68, 156, 157, 158, 159, 190, 191, 199, 500, 501, 579, 580, 583, 753, 754, 755, 757, 760, 761, 764, 765, 767, 768, 773, 776, 777, 778, 779], "definit": [44, 50, 56, 73, 79, 283, 581, 586, 613, 742, 749, 752, 757, 764, 777, 790], "max_pool2d": [44, 51, 74, 347, 366], "__iadd__": 44, "adaptive_avg_pool2d": [44, 51, 74, 347], "_arraywithactiv": [45, 93], "abc": [45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 97, 498, 583, 590, 683, 722, 723, 728, 736, 777], "_abc_impl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "_abc": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "_abc_data": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "approxim": [45, 50, 51, 56, 67, 73, 74, 79, 91, 101, 212, 213, 216, 217, 218, 219, 228, 229, 234, 236, 238, 252, 253, 254, 255, 269, 276, 277, 281, 282, 283, 323, 333, 344, 349, 414, 575, 581, 586, 627, 630, 720, 760, 768], "complex_mod": [45, 50, 67, 73, 101, 103, 106, 108, 109, 282, 575, 581, 720, 765], "variant": [45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 144, 145, 146, 156, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 564, 565, 568, 570, 571, 572, 573, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 630, 631, 632, 634, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 752, 759, 760, 773], "docstr": [45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 144, 145, 146, 156, 159, 163, 164, 171, 188, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 359, 365, 366, 367, 368, 370, 371, 372, 374, 378, 379, 380, 383, 384, 385, 389, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 526, 527, 541, 542, 543, 544, 546, 548, 549, 562, 563, 564, 565, 568, 570, 571, 572, 573, 578, 579, 581, 583, 586, 588, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 746, 747, 750, 754, 762, 763, 764, 765, 768, 771], "liter": [45, 50, 51, 56, 67, 73, 74, 79, 101, 103, 106, 108, 109, 282, 347, 348, 350, 368, 378, 382, 399, 403, 408, 411, 439, 575, 581, 586, 595, 625, 641, 702, 720, 773], "magnitud": [45, 50, 67, 73, 101, 103, 106, 108, 109, 211, 214, 231, 238, 264, 282, 575, 581, 586, 634, 635, 720, 757], "handle_complex_input": [45, 50, 67, 73, 101, 103, 106, 108, 109, 282, 575, 581, 720, 765], "element": [45, 47, 50, 51, 52, 55, 56, 58, 60, 61, 62, 64, 67, 68, 70, 71, 73, 74, 75, 78, 79, 81, 83, 84, 85, 87, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 121, 127, 128, 136, 137, 138, 154, 156, 159, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 294, 307, 308, 309, 310, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 344, 347, 348, 350, 359, 360, 370, 371, 372, 375, 380, 383, 384, 385, 389, 390, 394, 395, 396, 419, 420, 421, 429, 430, 431, 433, 436, 446, 448, 450, 471, 472, 474, 475, 476, 477, 478, 479, 481, 483, 487, 490, 491, 502, 503, 519, 521, 541, 542, 544, 548, 549, 575, 578, 581, 583, 585, 586, 588, 590, 592, 593, 594, 595, 596, 597, 608, 614, 616, 618, 619, 624, 629, 631, 632, 634, 638, 646, 649, 650, 651, 652, 653, 654, 655, 656, 665, 668, 674, 685, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 760, 769, 770, 773, 775, 799], "138": [45, 101, 575], "165": [45, 101, 575, 585, 609], "hardswish": [45, 67, 575, 720], "leaky_relu": [45, 67, 575], "alpha": [45, 50, 51, 67, 73, 74, 98, 103, 214, 280, 286, 297, 339, 341, 348, 354, 396, 460, 461, 462, 575, 581, 720, 763, 768, 769], "float": [45, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 60, 62, 64, 67, 70, 71, 73, 74, 75, 76, 78, 79, 80, 82, 83, 87, 91, 93, 103, 109, 118, 119, 120, 122, 124, 126, 127, 128, 129, 130, 134, 135, 139, 143, 147, 151, 156, 160, 164, 170, 171, 174, 180, 189, 198, 202, 203, 206, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 242, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 294, 295, 296, 297, 298, 300, 301, 302, 312, 313, 319, 320, 325, 327, 328, 331, 332, 333, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 359, 370, 371, 372, 389, 392, 395, 396, 398, 408, 410, 411, 412, 415, 428, 446, 453, 454, 455, 458, 459, 460, 461, 462, 463, 473, 474, 475, 476, 481, 482, 489, 490, 491, 499, 508, 532, 533, 536, 541, 542, 562, 564, 565, 568, 570, 571, 572, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 596, 608, 611, 612, 613, 615, 618, 619, 620, 622, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 638, 641, 643, 644, 645, 662, 663, 664, 671, 684, 687, 688, 694, 696, 697, 698, 699, 704, 705, 707, 708, 709, 710, 711, 712, 713, 720, 723, 724, 727, 728, 751, 755, 757, 760, 761, 763, 764, 766, 767, 769, 770, 771, 773, 775, 777, 779], "slope": [45, 51, 67, 74, 103, 286, 289, 339, 575, 720], "neg": [45, 50, 51, 56, 58, 60, 65, 67, 73, 74, 79, 81, 83, 88, 91, 103, 106, 109, 118, 124, 126, 138, 231, 238, 245, 246, 264, 265, 269, 273, 278, 296, 307, 309, 341, 348, 354, 393, 399, 403, 463, 575, 578, 581, 586, 588, 592, 597, 614, 616, 634, 638, 640, 641, 647, 649, 650, 654, 687, 714, 715, 720, 755, 767], "leaki": [45, 67, 103, 575, 720], "log_softmax": [45, 67, 575], "0719": [45, 67, 104], "221": [45, 104], "mish": [45, 67, 575, 720], "30340147": [45, 105, 575], "86509842": [45, 67, 105, 575], "269": [45, 107], "731": [45, 107], "881": [45, 50, 73, 107, 217, 230, 270, 581], "422": [45, 108, 575], "155": [45, 78, 108, 575, 585, 609], "softplu": [45, 67, 575, 720, 773], "beta": [45, 51, 59, 67, 74, 82, 109, 297, 300, 301, 341, 348, 349, 354, 396, 415, 461, 462, 575, 591, 684, 720, 773], "threshold": [45, 50, 51, 67, 73, 74, 109, 262, 263, 294, 313, 339, 344, 349, 350, 412, 415, 446, 575, 581, 720, 773], "union": [45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 199, 200, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 345, 347, 348, 349, 350, 353, 354, 355, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 518, 519, 521, 522, 526, 527, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 728, 729, 752, 755, 757, 758, 759, 761, 763, 764, 767, 771, 773, 775, 780, 789, 790], "3461": [45, 67, 109, 575], "6491": [45, 67, 109, 575], "535": [45, 67, 109, 575, 761], "_to_ivi": 46, "_to_n": 46, "to_ignor": [46, 66, 89, 590, 676, 677], "args_to_ivi": 46, "include_deriv": [46, 69, 590, 666, 677], "nest": [46, 68, 69, 94, 97, 234, 517, 546, 563, 566, 581, 583, 584, 589, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 722, 725, 726, 728, 752, 754, 755, 764, 766, 771, 778, 779, 781, 783, 795], "unchang": [46, 50, 347, 350, 390, 429, 585, 608], "deriv": [46, 47, 51, 53, 69, 70, 74, 76, 123, 128, 135, 140, 296, 300, 318, 341, 344, 564, 565, 568, 569, 570, 571, 572, 578, 584, 589, 590, 664, 666, 677, 726, 728, 729, 757, 758, 777, 779], "word": [46, 118, 350, 432, 578, 592, 688, 721, 724, 755, 767, 768, 783], "args_to_n": [46, 767], "cont_inplac": 46, "decid": [46, 68, 590, 665, 666, 675, 676, 677, 742, 747, 748, 757, 773], "to_ivi": [46, 69, 590, 678, 767], "leaf": [46, 68, 75, 87, 94, 498, 590, 675, 676, 678, 705, 755, 764, 778], "travers": [46, 69, 590, 669, 677, 755, 757, 761, 775], "lowest": [46, 51, 60, 69, 74, 83, 359, 476, 590, 592, 677, 686, 764, 781, 783, 792, 796, 800], "search": [46, 51, 69, 74, 691, 692, 746, 748, 755, 759, 770, 771, 785], "_arraywithcr": [47, 93], "boolean": [47, 48, 50, 51, 52, 58, 61, 64, 68, 70, 71, 73, 74, 75, 81, 84, 87, 93, 94, 115, 117, 119, 120, 121, 127, 143, 159, 161, 163, 164, 167, 183, 193, 201, 207, 221, 222, 223, 224, 225, 226, 258, 259, 260, 261, 325, 344, 348, 350, 399, 408, 411, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 484, 487, 498, 505, 508, 509, 513, 514, 515, 516, 517, 518, 519, 528, 531, 534, 535, 537, 538, 562, 577, 578, 579, 580, 581, 583, 588, 589, 590, 593, 596, 649, 650, 651, 653, 655, 656, 658, 660, 662, 663, 675, 693, 694, 695, 707, 709, 727, 755, 757, 764, 768, 770, 773], "alwai": [47, 48, 51, 52, 58, 70, 71, 74, 81, 101, 120, 143, 214, 264, 320, 344, 348, 350, 409, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 505, 512, 575, 579, 581, 583, 588, 649, 650, 651, 653, 655, 656, 658, 660, 742, 747, 748, 749, 752, 753, 755, 757, 760, 762, 763, 764, 767, 768, 769, 770, 771, 773, 775, 781, 789], "never": [47, 51, 58, 70, 74, 81, 120, 350, 419, 420, 421, 425, 427, 429, 430, 431, 434, 438, 445, 451, 505, 583, 588, 649, 650, 651, 653, 655, 656, 658, 660, 749, 757, 767, 768, 770], "valueerror": [47, 58, 70, 74, 81, 85, 120, 347, 350, 380, 390, 419, 420, 425, 427, 429, 430, 431, 438, 444, 451, 588, 649, 650, 651, 653, 655, 656, 658, 660, 699, 737, 761], "buffer": [47, 70, 74, 81, 120, 126, 419, 420, 425, 427, 429, 430, 431, 438, 451, 578, 649, 650, 651, 653, 655, 656, 658, 660, 726, 767, 781], "nativedtyp": [47, 48, 51, 55, 56, 60, 61, 64, 70, 74, 79, 83, 84, 87, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 139, 140, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 165, 167, 169, 173, 183, 295, 296, 297, 298, 299, 300, 301, 311, 316, 330, 341, 344, 354, 359, 459, 460, 461, 462, 463, 473, 474, 475, 476, 479, 481, 578, 579, 585, 586, 592, 593, 595, 596, 608, 641, 686, 687, 688, 691, 692, 702, 704, 705, 710, 712, 723, 757, 758, 763, 771, 775], "datatyp": [47, 68, 70, 120, 128, 132, 148, 169, 173, 578, 579, 771, 789], "nativedevic": [47, 49, 51, 60, 70, 72, 74, 83, 118, 119, 120, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 185, 186, 187, 188, 189, 192, 197, 198, 199, 200, 202, 203, 204, 205, 206, 210, 295, 296, 307, 341, 354, 459, 460, 462, 463, 578, 580, 592, 685, 686, 687, 688, 723, 728, 729, 757, 758, 761, 763, 771], "39999998": [47, 119, 120, 578, 594, 697], "5999999": [47, 78, 119, 120, 578, 585, 608, 612], "0999999": [47, 64, 119, 120, 327, 344, 578, 708], "10000038": [47, 119, 120, 578], "90786433e": [47, 119, 120, 578], "310": [47, 119, 120, 578], "copy_arrai": [47, 70, 578], "to_ivy_arrai": [47, 70, 121, 578], "empty_lik": [47, 51, 70, 74, 348, 394, 578], "deafult": [47, 61, 84, 123, 578, 691], "uniniti": [47, 122, 123, 578, 762], "from_dlpack": [47, 70, 578], "full_lik": [47, 70, 578, 771], "fill_valu": [47, 51, 61, 70, 74, 84, 127, 128, 243, 251, 354, 463, 578, 581, 593, 694, 730, 757, 769, 771], "scalar": [47, 50, 51, 52, 56, 67, 70, 73, 74, 75, 79, 91, 103, 128, 133, 214, 235, 280, 292, 314, 315, 317, 320, 323, 325, 327, 332, 339, 344, 348, 350, 396, 419, 420, 421, 433, 549, 562, 578, 581, 583, 586, 641, 757, 766, 768, 781, 795], "fill": [47, 50, 51, 60, 61, 68, 70, 73, 74, 83, 84, 122, 127, 128, 130, 133, 134, 135, 139, 140, 265, 296, 341, 348, 350, 354, 399, 403, 408, 411, 428, 447, 460, 462, 463, 578, 581, 592, 593, 686, 694, 723, 747, 769], "000123": [47, 128, 578], "stop": [47, 51, 53, 70, 74, 76, 118, 129, 130, 204, 348, 408, 411, 528, 565, 568, 570, 571, 572, 573, 578, 580, 583, 584, 589, 590, 662, 663, 664, 676, 728, 763, 766, 773, 775, 781, 795], "num": [47, 70, 129, 130, 578, 749, 763, 775], "endpoint": [47, 70, 129, 130, 578, 723, 763], "logspac": [47, 70, 578, 775], "log": [47, 50, 51, 56, 70, 73, 74, 79, 109, 130, 254, 256, 269, 287, 288, 328, 335, 339, 344, 349, 354, 414, 459, 575, 578, 581, 632, 720, 749, 755, 756, 759, 764, 767, 768, 769, 770, 772, 773, 775, 778], "sequenc": [47, 51, 55, 56, 58, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 124, 126, 128, 130, 133, 135, 140, 144, 146, 159, 163, 164, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 296, 299, 305, 306, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 339, 341, 345, 347, 348, 350, 354, 359, 360, 362, 363, 370, 371, 372, 374, 375, 379, 380, 382, 389, 390, 399, 400, 402, 406, 407, 408, 411, 412, 413, 415, 416, 417, 419, 420, 421, 424, 425, 426, 432, 434, 435, 437, 438, 440, 443, 445, 447, 448, 451, 452, 453, 455, 456, 457, 458, 460, 461, 473, 474, 475, 476, 482, 483, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 522, 526, 527, 541, 542, 544, 546, 548, 549, 562, 563, 566, 567, 568, 573, 578, 581, 583, 584, 585, 586, 588, 590, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 611, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 641, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 660, 661, 665, 672, 682, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 727, 729, 749, 756, 757, 758, 759, 761, 770, 771, 773, 775, 780, 798], "on_valu": [47, 70, 130, 133, 578], "off_valu": [47, 70, 130, 133, 578], "evenli": [47, 50, 51, 55, 58, 68, 70, 73, 78, 81, 118, 129, 130, 283, 347, 389, 578, 581, 585, 588, 598, 599, 600, 601, 603, 605, 607, 655], "hint": [47, 50, 51, 56, 73, 74, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 308, 314, 317, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 439, 473, 476, 502, 506, 508, 510, 549, 573, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 747, 752, 760, 763, 764, 767, 768, 771], "simplic": [47, 50, 51, 56, 73, 74, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 308, 314, 317, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 439, 473, 476, 502, 506, 508, 510, 549, 573, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 760, 773, 779], "nestabl": [47, 50, 51, 56, 73, 74, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 146, 162, 166, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 296, 307, 308, 314, 317, 341, 344, 347, 348, 350, 359, 365, 366, 367, 368, 370, 371, 372, 378, 383, 384, 385, 386, 396, 439, 473, 476, 480, 488, 496, 497, 502, 506, 508, 510, 512, 526, 544, 549, 573, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 684, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 747, 750, 759, 760, 767, 770, 783], "464": [47, 50, 83, 130, 218, 219, 581], "15888336": [47, 130], "2154": [47, 130], "43469003": [47, 130], "meshgrid": [47, 70, 578], "spars": [47, 51, 57, 70, 74, 80, 131, 299, 341, 348, 399, 408, 411, 578, 587, 645], "xy": [47, 70, 131, 578], "dimension": [47, 50, 51, 56, 58, 61, 64, 65, 68, 70, 73, 74, 79, 81, 87, 88, 93, 118, 124, 126, 131, 138, 283, 307, 341, 347, 348, 350, 359, 374, 375, 379, 380, 390, 393, 419, 420, 421, 428, 429, 471, 482, 578, 581, 586, 588, 593, 596, 597, 614, 615, 621, 624, 627, 629, 630, 640, 641, 655, 691, 692, 694, 707, 708, 709, 710, 711, 712, 713, 714, 715, 764, 766, 770, 773, 775, 792, 795, 802], "repres": [47, 50, 51, 55, 56, 73, 74, 78, 79, 117, 131, 133, 155, 213, 214, 217, 220, 229, 231, 238, 264, 277, 281, 282, 299, 309, 310, 323, 341, 344, 347, 348, 350, 353, 354, 357, 389, 401, 439, 453, 454, 455, 459, 465, 472, 577, 578, 579, 581, 585, 586, 608, 609, 621, 629, 632, 633, 723, 727, 752, 757, 773, 777, 792, 793, 796], "coordin": [47, 50, 61, 73, 74, 84, 131, 138, 219, 281, 303, 304, 307, 323, 341, 355, 464, 578, 581, 593, 694], "conserv": [47, 131, 578], "cartesian": [47, 131, 578], "matrix": [47, 51, 52, 55, 56, 74, 75, 78, 79, 91, 93, 131, 136, 137, 138, 307, 308, 341, 348, 350, 359, 392, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 437, 473, 484, 490, 578, 583, 585, 586, 609, 613, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 642, 723, 724, 747, 757, 768, 793, 795], "ij": [47, 64, 131, 578, 596, 706], "respect": [47, 50, 51, 53, 56, 73, 74, 76, 79, 91, 131, 211, 214, 219, 221, 223, 224, 225, 226, 231, 232, 238, 242, 243, 250, 251, 256, 258, 260, 261, 264, 267, 273, 277, 280, 281, 287, 323, 338, 339, 344, 346, 348, 350, 353, 398, 410, 418, 453, 455, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 578, 581, 584, 585, 586, 589, 598, 605, 606, 614, 631, 634, 662, 663, 664, 723, 746, 747, 748, 749, 752, 753, 755, 756, 757, 758, 759, 763, 764, 766, 767, 768, 770, 771, 772, 791, 801], "rank": [47, 51, 56, 58, 65, 74, 79, 81, 88, 91, 92, 97, 131, 305, 306, 341, 348, 350, 359, 399, 400, 408, 411, 439, 482, 578, 586, 588, 593, 597, 614, 616, 625, 627, 631, 633, 638, 640, 641, 648, 649, 657, 660, 661, 694, 714, 715], "ni": [47, 131, 578], "xi": [47, 131, 578], "scatter": [47, 52, 70, 75, 133, 526, 527, 578, 583, 754, 767, 773, 802], "dimens": [47, 51, 52, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 70, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 93, 94, 97, 104, 108, 133, 136, 137, 299, 306, 308, 309, 310, 316, 317, 323, 330, 337, 341, 344, 345, 347, 348, 349, 350, 353, 354, 357, 359, 361, 362, 363, 365, 366, 367, 369, 374, 375, 379, 383, 384, 385, 386, 389, 391, 392, 395, 409, 414, 419, 420, 421, 429, 440, 441, 442, 443, 445, 453, 454, 455, 461, 463, 466, 476, 478, 479, 480, 481, 482, 495, 496, 497, 499, 506, 540, 543, 563, 575, 578, 583, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 641, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 663, 664, 690, 691, 692, 694, 696, 697, 698, 699, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 727, 759, 761, 766, 768, 769, 770, 773, 775, 778], "j": [47, 50, 51, 56, 64, 70, 73, 74, 79, 91, 117, 133, 212, 213, 214, 215, 217, 220, 229, 231, 234, 236, 244, 252, 254, 258, 264, 275, 277, 278, 281, 282, 314, 344, 347, 348, 359, 374, 375, 379, 390, 391, 395, 397, 405, 482, 487, 577, 578, 581, 583, 586, 596, 618, 638, 706, 749, 750, 754, 789, 791], "unless": [47, 51, 56, 70, 74, 133, 264, 312, 325, 330, 344, 578, 581, 586, 627, 753, 758, 767, 781, 790], "ones_lik": [47, 70, 578, 753, 780], "tril": [47, 70, 578], "whose": [47, 50, 51, 52, 56, 58, 62, 64, 70, 73, 74, 75, 79, 81, 85, 87, 93, 128, 136, 137, 213, 217, 220, 228, 229, 230, 269, 270, 276, 277, 281, 282, 283, 308, 322, 326, 327, 329, 333, 341, 348, 350, 395, 438, 450, 489, 544, 578, 581, 583, 586, 588, 594, 596, 613, 615, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 641, 650, 654, 696, 697, 698, 705, 706, 760, 770], "innermost": [47, 51, 56, 79, 136, 137, 308, 341, 348, 395, 578, 586, 613, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638], "mxn": [47, 51, 56, 79, 136, 137, 308, 341, 578, 586, 617, 625, 627, 628, 630, 631, 635, 638], "matric": [47, 51, 56, 74, 79, 91, 93, 131, 136, 137, 308, 341, 348, 350, 395, 399, 400, 402, 406, 407, 410, 428, 578, 585, 586, 609, 613, 615, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 745, 795], "diagon": [47, 51, 56, 74, 79, 124, 136, 137, 138, 296, 307, 308, 341, 348, 350, 393, 396, 403, 428, 578, 586, 616, 638], "triangular": [47, 51, 56, 79, 136, 137, 138, 307, 308, 341, 578, 586, 613, 619, 620, 627, 631], "alloc": [47, 48, 51, 71, 136, 137, 143, 308, 341, 578, 579, 747, 749, 781], "triu": [47, 70, 578], "upper": [47, 51, 56, 60, 74, 79, 83, 124, 137, 138, 296, 308, 341, 359, 476, 578, 586, 592, 613, 619, 620, 631, 688, 722, 757, 767, 770], "zeros_lik": [47, 70, 143, 260, 564, 565, 568, 570, 572, 578, 579, 581, 584, 588, 646, 768, 773], "data_typ": [48, 51, 71, 74, 173, 579, 754, 757, 770, 771], "_arraywithdatatyp": [48, 93], "irrespect": [48, 56, 71, 79, 143, 579, 586, 634, 755, 767, 777, 802], "promot": [48, 50, 51, 56, 71, 73, 74, 79, 86, 93, 94, 143, 146, 169, 170, 171, 177, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 231, 234, 236, 238, 252, 253, 254, 255, 256, 261, 264, 269, 273, 276, 277, 278, 279, 280, 281, 282, 285, 320, 328, 333, 344, 359, 473, 535, 557, 579, 581, 583, 586, 588, 596, 613, 614, 621, 622, 624, 625, 626, 627, 629, 630, 632, 633, 640, 641, 647, 657, 700, 708, 711, 751, 760, 761, 764, 772], "nan": [48, 50, 51, 52, 62, 64, 71, 73, 74, 75, 143, 211, 212, 213, 214, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 245, 246, 247, 252, 253, 254, 255, 256, 259, 264, 265, 267, 269, 270, 273, 274, 275, 276, 277, 278, 281, 282, 284, 287, 312, 321, 325, 330, 333, 339, 344, 359, 471, 472, 479, 480, 481, 508, 562, 576, 579, 581, 583, 594, 596, 597, 696, 697, 698, 699, 707, 708, 709, 711, 712, 713, 714, 715, 751, 757, 760, 766, 771, 772], "infin": [48, 50, 52, 56, 71, 73, 79, 143, 211, 212, 213, 214, 217, 218, 219, 220, 227, 228, 229, 231, 232, 234, 236, 237, 238, 245, 246, 252, 253, 254, 255, 256, 259, 264, 265, 267, 269, 273, 274, 276, 277, 278, 281, 282, 284, 333, 344, 508, 576, 579, 581, 583, 586, 596, 597, 632, 641, 707, 709, 714, 715, 751, 760], "desir": [48, 49, 51, 61, 68, 71, 72, 74, 84, 91, 143, 145, 146, 205, 302, 334, 341, 344, 350, 359, 437, 479, 481, 482, 579, 580, 586, 593, 636, 693, 723, 724, 749, 753, 756, 757, 758, 768, 775, 785, 789, 795], "broadcast_arrai": [48, 71, 579], "mix": [48, 50, 71, 73, 74, 75, 80, 83, 93, 94, 144, 157, 158, 171, 190, 191, 221, 224, 225, 226, 231, 232, 238, 242, 250, 251, 261, 264, 267, 273, 349, 359, 415, 480, 498, 500, 501, 502, 503, 512, 546, 549, 579, 580, 581, 583, 585, 586, 587, 588, 591, 596, 599, 601, 604, 607, 609, 612, 613, 636, 643, 645, 646, 684, 706, 708, 711, 747, 750, 757, 758, 759, 767, 773, 775, 783, 795, 799, 801], "broadcast_to": [48, 71, 579, 757], "can_cast": [48, 71, 579, 757, 764, 768], "accord": [48, 51, 52, 58, 64, 71, 81, 87, 146, 156, 214, 225, 231, 238, 264, 275, 302, 341, 347, 350, 390, 439, 502, 505, 526, 527, 579, 581, 583, 586, 588, 596, 640, 648, 661, 711, 713, 730, 736, 747, 748, 751, 757, 762, 764, 768, 770], "finfo": [48, 71, 579, 770], "resolut": [48, 71, 156, 579, 749], "4028235e": [48, 156, 579], "iinfo": [48, 71, 579], "integ": [48, 50, 51, 55, 56, 58, 60, 64, 65, 68, 73, 74, 75, 78, 79, 81, 83, 87, 88, 93, 94, 118, 127, 159, 160, 166, 170, 171, 175, 211, 221, 222, 223, 224, 225, 226, 227, 237, 238, 249, 261, 266, 269, 273, 274, 284, 285, 309, 310, 316, 319, 320, 341, 344, 347, 350, 354, 357, 359, 374, 379, 389, 425, 434, 439, 451, 459, 460, 461, 462, 463, 465, 466, 471, 473, 474, 475, 480, 482, 505, 521, 531, 563, 578, 579, 581, 583, 585, 586, 588, 592, 595, 596, 597, 598, 599, 600, 601, 603, 605, 607, 614, 616, 626, 640, 641, 655, 685, 686, 687, 688, 689, 690, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 749, 755, 757, 766, 769, 770, 775, 777], "119": [48, 159], "122": [48, 159, 229, 581], "1220": [48, 159], "int16": [48, 51, 60, 64, 71, 83, 146, 150, 152, 157, 159, 166, 181, 292, 339, 359, 474, 475, 579, 596, 686, 704, 705, 710, 712, 757, 768, 770, 775], "32768": [48, 71, 159, 542, 583], "32767": [48, 71, 159], "is_bool_dtyp": [48, 71, 579], "is_float_dtyp": [48, 71, 579, 771], "is_int_dtyp": [48, 71, 579, 769, 771], "is_uint_dtyp": [48, 71, 579, 769, 771], "result_typ": [48, 71, 579, 757], "arrays_and_dtyp": [48, 71, 171, 579], "_arraywithdevic": [49, 93], "move": [49, 51, 72, 74, 138, 201, 205, 209, 307, 341, 350, 438, 578, 580, 742, 749, 758, 771], "addit": [49, 51, 52, 59, 72, 74, 75, 82, 115, 117, 205, 214, 274, 359, 472, 477, 495, 496, 497, 563, 577, 580, 581, 583, 589, 591, 664, 684, 724, 747, 748, 749, 753, 757, 759, 760, 762, 764, 766, 767, 768, 770, 771, 773, 777, 778, 780, 789, 795, 796, 797, 801], "__dlpack__": [49, 72, 125, 205, 578, 580], "caveat": [49, 72, 205, 349, 414, 580], "portabl": [49, 72, 205, 580, 742, 793], "_arraywithelementwis": [50, 93], "ab": [50, 56, 66, 73, 89, 93, 94, 269, 312, 325, 344, 350, 446, 581, 586, 590, 625, 635, 641, 673, 676, 736, 745, 752, 757, 765, 768, 770], "absolut": [50, 51, 56, 66, 68, 73, 74, 79, 93, 211, 275, 312, 325, 328, 334, 344, 348, 349, 396, 409, 412, 413, 581, 586, 625, 626, 627, 632, 743, 748], "aco": [50, 73, 581], "invers": [50, 51, 56, 73, 74, 79, 212, 213, 216, 217, 218, 219, 220, 347, 357, 369, 378, 380, 465, 581, 586, 622, 626, 630, 730, 757], "cosin": [50, 73, 212, 213, 228, 229, 295, 298, 341, 347, 368, 378, 581, 724], "acosh": [50, 73, 157, 158, 579, 581, 745], "area": [50, 51, 73, 74, 78, 213, 217, 220, 347, 382, 389, 581, 767, 773, 786, 791], "hyperbol": [50, 73, 213, 217, 220, 229, 277, 281, 282, 581], "sector": [50, 73, 213, 217, 220, 581, 786], "second": [50, 51, 53, 56, 58, 62, 73, 74, 75, 76, 79, 81, 85, 93, 94, 115, 138, 169, 177, 214, 219, 221, 223, 224, 225, 226, 232, 238, 239, 240, 241, 242, 243, 249, 250, 251, 256, 257, 258, 260, 261, 264, 267, 269, 280, 302, 307, 312, 321, 323, 324, 325, 331, 335, 336, 341, 344, 348, 349, 350, 357, 359, 394, 395, 396, 398, 401, 415, 445, 450, 460, 462, 466, 473, 476, 487, 536, 558, 564, 565, 570, 577, 578, 579, 581, 583, 584, 586, 588, 589, 590, 594, 614, 617, 618, 619, 621, 624, 629, 631, 632, 634, 636, 640, 657, 658, 663, 666, 696, 697, 698, 728, 748, 751, 754, 757, 759, 762, 767, 768, 770, 772, 777, 787, 800], "multipli": [50, 51, 55, 64, 73, 74, 78, 91, 214, 280, 326, 347, 348, 382, 405, 406, 474, 475, 581, 585, 596, 608, 704, 710, 749, 752, 753, 755, 759], "angl": [50, 73, 219, 229, 277, 282, 324, 344, 581], "deg": [50, 73, 215, 581], "radian": [50, 51, 73, 74, 212, 215, 216, 218, 219, 228, 230, 270, 276, 281, 333, 344, 581, 760], "degre": [50, 51, 64, 73, 74, 87, 215, 230, 270, 350, 445, 581, 596, 711, 713, 794], "1j": [50, 73, 74, 215, 216, 228, 229, 234, 236, 248, 271, 276, 277, 281, 314, 541, 581, 583], "2j": [50, 51, 73, 74, 215, 244, 314, 347, 374, 379, 542, 581, 583], "3j": [50, 51, 73, 74, 215, 248, 271, 314, 344, 581], "35619449": [50, 215, 581], "78539816": [50, 215, 581], "135": [50, 215, 490, 581, 583], "asin": [50, 73, 581], "sine": [50, 73, 216, 217, 276, 277, 581], "927": [50, 73, 216], "asinh": [50, 73, 216, 581], "atan": [50, 73, 581], "tangent": [50, 73, 218, 219, 220, 281, 282, 581, 760], "785": [50, 73, 218, 219, 581], "atan2": [50, 73, 581], "quotient": [50, 73, 219, 231, 238, 581], "245": [50, 78, 219, 585, 608, 609], "588": [50, 219, 581], "inf": [50, 51, 52, 56, 73, 74, 75, 79, 219, 236, 245, 246, 247, 248, 252, 253, 265, 287, 328, 339, 344, 348, 359, 392, 476, 508, 562, 576, 581, 583, 586, 625, 641, 745, 757, 766], "719": [50, 219, 581], "197": [50, 219, 581], "atanh": [50, 73, 581], "549": [50, 73, 78, 220, 581, 585, 609], "bitwise_and": [50, 73, 581], "bitwise_invert": [50, 73, 581], "bitiwse_invert": [50, 222], "bitwise_left_shift": [50, 73, 581], "bitwise_or": [50, 73, 581], "bitwise_right_shift": [50, 73, 93, 581], "bitwise_xor": [50, 73, 93, 581], "ceil": [50, 51, 73, 74, 91, 118, 347, 365, 366, 367, 383, 384, 385, 388, 578, 581, 724, 767], "round": [50, 51, 73, 74, 91, 92, 214, 227, 231, 237, 238, 264, 278, 284, 285, 319, 344, 581, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 785, 786, 787], "416": [50, 228, 581], "540": [50, 228], "990": [50, 228], "cosh": [50, 73, 228, 581], "deg2rad": [50, 73, 581], "convers": [50, 51, 74, 230, 270, 528, 538, 583, 747, 753, 774, 776, 780, 781, 783, 787, 794, 801], "180": [50, 73, 230, 270, 581], "270": [50, 73, 230, 270, 581], "360": [50, 73, 230, 270, 581, 756], "dividend": [50, 73, 231, 238, 273, 285, 581], "divisor": [50, 51, 53, 64, 73, 74, 76, 87, 231, 238, 241, 242, 273, 285, 347, 350, 365, 366, 367, 425, 434, 451, 564, 565, 570, 581, 584, 596, 711, 713, 724, 728], "375": [50, 232, 267], "erf": [50, 73, 581], "exponenti": [50, 51, 73, 74, 233, 234, 236, 256, 269, 291, 339, 348, 404, 581], "gauss": [50, 73, 233, 581], "328": [50, 233, 281, 581], "677": [50, 233, 581], "842": [50, 233, 281, 581], "71828198": [50, 73, 234], "38905573": [50, 73, 234], "08553696": [50, 73, 234, 581], "exp2": [50, 73, 581], "expm1": [50, 73, 581, 757], "244": [50, 236, 742], "918": [50, 236], "147": [50, 236, 581], "floor": [50, 51, 73, 74, 91, 225, 238, 347, 365, 366, 367, 369, 383, 384, 385, 388, 581, 724, 767], "floor_divid": [50, 73, 581], "fmin": [50, 73, 581], "gcd": [50, 73, 581, 757], "greater": [50, 51, 55, 58, 60, 73, 74, 78, 83, 93, 94, 126, 212, 213, 216, 217, 219, 220, 223, 225, 231, 237, 238, 252, 254, 269, 273, 275, 277, 278, 282, 283, 284, 313, 344, 347, 369, 374, 379, 578, 581, 585, 586, 588, 592, 612, 614, 626, 656, 688, 749, 769], "greater_equ": [50, 73, 93, 94, 256, 581], "imaginari": [50, 73, 93, 103, 106, 109, 134, 135, 212, 213, 214, 229, 231, 232, 234, 236, 244, 264, 266, 267, 274, 277, 278, 282, 314, 344, 348, 396, 575, 578, 581, 593, 694, 759], "4j": [50, 73, 244, 542, 581, 583], "6j": [50, 51, 73, 244, 248, 314, 581], "isfinit": [50, 73, 581, 768], "out_i": [50, 73, 245, 246, 247, 248, 271, 581], "self_i": [50, 73, 245, 246, 247, 248, 271], "finit": [50, 73, 211, 212, 213, 214, 217, 219, 220, 229, 231, 232, 234, 236, 238, 245, 246, 252, 254, 264, 265, 267, 269, 273, 277, 278, 282, 581], "isinf": [50, 73, 581], "detect_posit": [50, 73, 246, 581], "detect_neg": [50, 73, 246, 581], "isnan": [50, 73, 581], "isreal": [50, 73, 581], "5j": [50, 73, 74, 248, 271, 314, 344, 581], "lcm": [50, 73, 581, 757], "less": [50, 51, 56, 60, 64, 73, 74, 79, 83, 93, 94, 212, 213, 216, 219, 220, 227, 231, 238, 252, 253, 254, 255, 269, 273, 275, 278, 332, 344, 347, 348, 359, 368, 369, 378, 408, 411, 473, 476, 581, 586, 592, 596, 625, 626, 627, 630, 641, 688, 711, 713, 724, 748, 749, 755, 757, 759, 761, 763, 768, 770, 773, 774, 775, 786, 795, 797], "less_equ": [50, 73, 93, 94, 581, 761], "log10": [50, 51, 73, 302, 341, 581], "logarithm": [50, 73, 234, 252, 253, 254, 255, 256, 318, 328, 344, 581, 586, 632], "602": [50, 253, 581], "699": [50, 253, 581], "log1p": [50, 73, 581, 766], "693": [50, 73, 108, 217, 254, 575, 581, 587, 645], "0953": [50, 73, 252, 254, 581], "log2": [50, 73, 257, 581], "logaddexp": [50, 73, 581], "logaddexp2": [50, 73, 581, 745], "169925": [50, 73, 257, 581], "logical_and": [50, 73, 581, 768, 773, 802], "logical_not": [50, 73, 581, 757], "logical_or": [50, 73, 581, 802], "conform": [50, 56, 73, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 135, 136, 137, 139, 140, 146, 156, 159, 171, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 314, 344, 359, 473, 578, 579, 581, 586, 588, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 647, 649, 650, 651, 653, 654, 656, 657, 661, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 760, 762], "standard": [50, 56, 59, 60, 64, 73, 82, 83, 87, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 135, 136, 137, 139, 140, 146, 156, 159, 171, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 314, 344, 348, 359, 410, 473, 563, 578, 579, 581, 583, 586, 588, 591, 592, 593, 594, 595, 596, 597, 613, 614, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 647, 649, 650, 651, 653, 654, 656, 657, 661, 684, 687, 691, 692, 694, 695, 696, 697, 698, 699, 700, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 727, 736, 742, 750, 751, 752, 755, 757, 760, 763, 767, 770, 771, 781, 784, 790, 791, 793, 794, 797, 798, 800], "api_specif": [50, 73, 146, 234, 244, 245, 260, 579, 581, 588, 596, 661, 711, 760], "array_api": [50, 73, 146, 234, 244, 245, 260, 579, 581, 586, 588, 596, 632, 661, 711, 760], "logical_xor": [50, 73, 581], "maximum": [50, 51, 52, 53, 58, 61, 64, 68, 73, 74, 75, 76, 81, 84, 87, 94, 204, 321, 334, 344, 347, 348, 350, 359, 363, 373, 408, 411, 439, 474, 476, 490, 491, 499, 570, 580, 581, 583, 584, 586, 588, 590, 593, 596, 625, 646, 677, 691, 692, 707, 709, 749, 757, 759, 767, 778, 802], "use_wher": [50, 73, 262, 263, 581], "formula": [50, 51, 73, 231, 253, 255, 262, 263, 264, 302, 327, 341, 344, 353, 453, 455, 581], "exce": [50, 51, 74, 263, 350, 448, 581], "product": [50, 51, 55, 56, 64, 73, 74, 78, 79, 87, 91, 264, 348, 359, 394, 398, 400, 401, 402, 405, 406, 407, 474, 475, 481, 581, 585, 586, 596, 611, 612, 614, 621, 624, 629, 636, 640, 704, 705, 706, 710, 711, 747, 775, 795, 797], "nan_to_num": [50, 73, 581], "posinf": [50, 73, 265, 581], "neginf": [50, 73, 265, 581], "5e": [50, 53, 73, 74, 265, 331, 570, 581, 584], "not_equ": [50, 73, 93, 94, 581], "pow": [50, 73, 93, 94, 581, 751], "expon": [50, 51, 52, 74, 75, 269, 320, 322, 326, 344, 542, 581, 583, 586, 626], "rad2deg": [50, 73, 581], "286": [50, 74, 270], "458": [50, 270], "573": [50, 270, 581], "reciproc": [50, 73, 581], "333": [50, 73, 231, 272, 491, 581, 583], "remaind": [50, 51, 58, 68, 73, 74, 81, 240, 581, 588, 655, 751, 767], "modulu": [50, 73, 273, 581, 767], "sign": [50, 51, 56, 62, 64, 73, 74, 79, 91, 118, 211, 212, 213, 214, 217, 219, 220, 225, 229, 231, 234, 236, 238, 264, 266, 273, 277, 278, 282, 315, 344, 348, 350, 359, 409, 446, 474, 475, 578, 581, 586, 594, 596, 632, 696, 697, 698, 699, 704, 705, 710, 712, 748, 757, 775, 780, 786], "x2_i": [50, 73, 214, 219, 221, 223, 224, 225, 226, 231, 232, 238, 242, 243, 250, 251, 256, 258, 260, 261, 264, 267, 269, 273, 280, 581, 751], "decim": [50, 73, 274, 581, 772], "0001": [50, 51, 74, 274, 275, 348, 408, 411, 728], "678": [50, 274, 275], "np_variant": [50, 73, 275, 581], "841": [50, 67, 73, 101, 276, 575, 581], "909": [50, 73, 75, 276, 581], "141": [50, 73, 143, 276, 579, 581], "sinh": [50, 73, 276, 581], "232": [50, 73, 277, 581], "sqrt": [50, 51, 73, 74, 347, 369, 374, 375, 379, 380, 581, 723, 742], "squar": [50, 51, 56, 73, 74, 79, 278, 348, 349, 359, 395, 404, 412, 473, 566, 567, 569, 574, 581, 584, 586, 590, 613, 615, 616, 618, 619, 620, 622, 626, 632, 633, 634, 639, 671, 742], "tanh": [50, 73, 281, 581, 720, 775], "762": [50, 73, 282, 581], "964": [50, 73, 282, 581], "trapz": [50, 73, 581], "dx": [50, 73, 283, 581], "apart": [50, 73, 283, 581], "trapezoid": [50, 73, 283, 581], "trunc": [50, 73, 581], "025": [50, 284, 349, 415, 581, 589, 664], "trunc_divid": [50, 73, 581], "_arraywithactivationsexperiment": [51, 93], "elu": [51, 74, 339, 720], "scaler": [51, 74, 286, 339, 770], "ep": [51, 56, 59, 74, 79, 82, 156, 287, 339, 348, 353, 396, 453, 454, 455, 579, 586, 591, 627, 630, 684, 720, 727], "outpu": [51, 74, 287, 339], "19722438": [51, 74, 287, 339], "38629448": [51, 74, 287, 339], "38629436": [51, 74, 287, 339], "logsigmoid": [51, 74, 339, 720], "31326175": [51, 67, 288, 339], "126928": [51, 74, 288], "01814993": [51, 288], "00004578": [51, 288], "57888985": [51, 288], "31326169": [51, 74, 288, 339], "69314718": [51, 56, 67, 74, 79, 288, 328, 339, 344, 586, 632], "01104775": [51, 288], "prelu": [51, 74, 339, 720], "unidirect": [51, 289, 339], "relu6": [51, 74, 339, 720], "rectifi": [51, 67, 74, 103, 105, 106, 290, 293, 294, 339, 575], "selu": [51, 74, 339, 720], "11133075": [51, 291, 339], "05070102": [51, 74, 291, 339], "10140204": [51, 291, 339], "15210295": [51, 291, 339], "20280409": [51, 291, 339], "25350523": [51, 291, 339], "30420589": [51, 291, 339], "35490704": [51, 291, 339], "silu": [51, 74, 339, 720], "26894143": [51, 293], "73105854": [51, 74, 293], "thresholded_relu": [51, 74, 339], "_arraywithconversionsexperiment": [51, 93], "_arraywithcreationexperiment": [51, 93], "blackman_window": [51, 74, 341], "period": [51, 74, 277, 281, 295, 297, 298, 300, 301, 341, 347, 381, 581, 749], "window": [51, 55, 74, 78, 295, 297, 298, 300, 301, 311, 341, 347, 365, 366, 367, 369, 383, 384, 385, 386, 388, 389, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724, 749, 800], "symmetr": [51, 56, 74, 79, 91, 295, 297, 298, 300, 301, 341, 348, 350, 395, 439, 586, 613, 618, 619, 620, 642, 755], "38777878e": [51, 74, 295, 341], "40000000e": [51, 295, 341], "00000000e": [51, 74, 75, 295, 341, 347, 368, 374, 378, 379, 745], "30000000e": [51, 74, 295, 341], "eye_lik": [51, 74, 341], "elsewher": [51, 74, 124, 296, 341, 578, 593, 695, 748], "mel_weight_matrix": [51, 74, 341], "num_mel_bin": [51, 74, 302, 341], "dft_length": [51, 74, 302, 341, 347, 369], "sample_r": [51, 74, 302, 341], "lower_edge_hertz": [51, 74, 302, 341], "upper_edge_hertz": [51, 74, 302, 341], "3000": [51, 74, 302, 341], "melweightmatrix": [51, 74, 302, 341], "linearli": [51, 52, 75, 302, 341, 499, 583, 586, 633], "frequenc": [51, 52, 74, 75, 302, 341, 359, 473, 499, 583, 749], "spectra": [51, 302, 341], "dft": [51, 74, 302, 341, 347], "stft": [51, 302, 341], "mel": [51, 74, 302, 341], "term": [51, 295, 302, 341, 349, 414, 585, 610, 724, 742, 749, 755, 775, 783, 785, 795], "hertz": [51, 302, 341], "2595": [51, 302, 341], "700": [51, 75, 302, 341, 503], "band": [51, 52, 74, 75, 302, 341, 499, 583], "spectrum": [51, 74, 302, 341], "n_fft": [51, 74, 302, 341, 347, 369], "signal": [51, 74, 302, 341, 347, 361, 362, 363, 368, 369, 378, 724, 794, 795], "bound": [51, 74, 302, 341, 350, 423, 444, 447, 757, 761, 768, 770, 775, 801], "8000": [51, 74, 297, 302, 341], "75694758": [51, 302, 341], "trilu": [51, 74, 341], "retain": [51, 138, 307, 308, 341, 566, 578, 584, 766, 783], "unsorted_segment_min": [51, 74, 341], "segment_id": [51, 74, 309, 310, 341, 730], "num_seg": [51, 74, 309, 310, 341, 730], "th": [51, 74, 309, 310, 317, 341, 344, 348, 359, 393, 399, 482], "identifi": [51, 74, 309, 310, 341, 751, 756, 770, 773], "distinct": [51, 62, 74, 309, 310, 341, 594, 696, 697, 698, 699, 748, 755, 760, 766, 767, 768, 774, 786, 795], "unsorted_segment_sum": [51, 74, 341], "_arraywithdata_typeexperiment": [51, 93], "_arraywithdeviceexperiment": [51, 93], "_arraywithelementwiseexperiment": [51, 93], "equal_nan": [51, 74, 312, 325, 344], "rel": [51, 53, 56, 58, 63, 70, 74, 76, 79, 81, 86, 93, 128, 312, 325, 344, 349, 359, 414, 473, 565, 568, 570, 571, 572, 584, 586, 588, 595, 617, 627, 630, 638, 650, 654, 700, 703, 749, 756, 769, 773, 795, 797], "toler": [51, 56, 74, 79, 312, 325, 344, 348, 396, 408, 411, 586, 627, 630, 751, 769, 795], "1e10": [51, 312, 325, 344], "00001e10": [51, 312, 325, 344], "00001e": [51, 312, 344], "binar": [51, 74, 344], "map": [51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 159, 163, 164, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 344, 347, 370, 371, 372, 412, 413, 415, 416, 419, 420, 421, 424, 445, 447, 448, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 563, 568, 573, 583, 590, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 672, 673, 677, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 752, 755, 757, 763, 764, 768, 770, 771, 778, 781, 783, 790, 796], "outcom": [51, 74, 313, 323, 344], "conj": [51, 74, 229, 234, 236, 277, 278, 282, 344, 581], "conjug": [51, 56, 74, 79, 314, 344, 347, 348, 354, 369, 391, 396, 405, 407, 461, 586, 624, 628, 636], "copysign": [51, 74, 344], "unsign": [51, 64, 74, 315, 344, 359, 474, 475, 596, 704, 705, 710, 712, 757, 775], "count_nonzero": [51, 74, 344], "keepdim": [51, 56, 58, 61, 64, 65, 68, 74, 79, 81, 84, 87, 88, 316, 330, 337, 344, 345, 359, 478, 479, 480, 481, 482, 586, 588, 593, 596, 597, 625, 641, 660, 691, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 761, 768, 775], "diff": [51, 68, 74, 344, 759, 767], "prepend": [51, 74, 317, 344, 586, 588, 624, 649, 748], "differenc": [51, 74, 317, 344], "prior": [51, 74, 317, 344, 354, 461, 586, 636, 761, 771], "expand": [51, 52, 58, 74, 75, 317, 344, 350, 499, 583, 588, 649, 755], "discret": [51, 74, 317, 344, 347, 368, 369, 374, 375, 378, 379, 380, 390, 587, 644, 724], "digamma": [51, 74, 344], "7549271": [51, 318, 344], "92278427": [51, 74, 318, 344], "9988394": [51, 318, 344], "toward": [51, 58, 74, 81, 238, 285, 319, 331, 344, 350, 359, 445, 476, 581, 588, 654, 742, 745, 748, 775, 791, 795], "float_pow": [51, 74, 344], "fmax": [51, 74, 344], "fmod": [51, 74, 581], "divis": [51, 52, 53, 74, 75, 76, 225, 231, 238, 240, 273, 275, 285, 350, 425, 533, 541, 555, 564, 565, 570, 581, 583, 584, 585, 598, 605, 606, 728, 764, 772], "frexp": [51, 74, 344], "edge_ord": [51, 74, 323, 344], "estim": [51, 74, 323, 344, 359, 473], "boundari": [51, 60, 74, 83, 323, 344, 347, 382, 592, 688, 795], "partial": [51, 68, 74, 157, 158, 190, 191, 323, 344, 348, 350, 359, 408, 440, 441, 442, 443, 480, 500, 501, 569, 579, 580, 583, 584, 586, 623, 725, 726, 749, 754, 773], "diment": [51, 323, 344], "33333333": [51, 74, 272, 323, 344, 581], "hypot": [51, 74, 344], "hypotenus": [51, 324, 344], "4031": [51, 324, 344], "8102": [51, 324, 344], "isclos": [51, 74, 344, 751], "ldexp": [51, 74, 344], "lerp": [51, 74, 344], "lgamma": [51, 344], "45373654": [51, 328, 344], "6477685": [51, 328, 344], "modf": [51, 74, 344], "fraction": [51, 74, 329, 344, 359, 482, 585, 608], "nansum": [51, 74, 344], "accumul": [51, 74, 330, 344], "reduc": [51, 52, 56, 61, 64, 65, 68, 74, 75, 79, 84, 87, 88, 204, 330, 344, 345, 359, 478, 479, 480, 481, 482, 496, 580, 583, 586, 593, 596, 597, 631, 691, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 736, 756, 761, 768, 773, 775, 777, 789, 793, 797, 798, 799], "nextaft": [51, 74, 344], "0e": [51, 53, 74, 76, 331, 344, 570, 584], "4013e": [51, 74, 331, 344], "4028e": [51, 74, 331, 344], "signbit": [51, 74, 344], "637": [51, 74, 333, 344], "0909": [51, 74, 333, 344], "sparsify_tensor": [51, 74, 344], "sparsifi": [51, 74, 334, 344], "arang": [51, 56, 64, 74, 79, 129, 334, 344, 347, 348, 365, 366, 367, 374, 379, 383, 384, 385, 386, 388, 392, 406, 431, 522, 563, 578, 583, 586, 589, 596, 625, 641, 664, 706, 742, 757, 767, 802], "xlogi": [51, 74, 344], "0986": [51, 74, 335, 344], "3863": [51, 74, 335, 344], "0000": [51, 74, 297, 298, 301, 335, 341, 344, 348, 350, 404, 433], "zeta": [51, 74, 344], "0369": [51, 74, 336, 344], "_arraywithgeneralexperiment": [51, 93], "init_valu": [51, 74, 78, 337, 345, 347, 389], "reduct": [51, 52, 57, 65, 68, 74, 75, 78, 80, 88, 337, 345, 347, 349, 389, 412, 413, 414, 415, 416, 496, 526, 527, 583, 587, 597, 643, 644, 645, 714, 715, 725, 757, 764, 767, 770, 777], "_arraywithgradientsexperiment": [51, 93], "_arraywithimageexperiment": [51, 93], "_arraywithlayersexperiment": [51, 93], "adaptive_avg_pool1d": [51, 74, 347], "output_s": [51, 74, 347, 361, 362, 363, 724, 742, 790], "1d": [51, 74, 91, 347, 348, 350, 359, 361, 368, 370, 372, 378, 405, 419, 423, 444, 447, 473, 724], "adapt": [51, 74, 76, 347, 361, 362, 363, 571, 584, 724, 728, 786], "pool": [51, 74, 78, 347, 361, 362, 363, 365, 366, 367, 383, 384, 385, 386, 389, 724, 748], "plane": [51, 74, 231, 234, 236, 264, 276, 277, 278, 281, 347, 350, 361, 362, 363, 445, 581], "l_in": [51, 74, 347, 361], "spatial": [51, 55, 74, 78, 347, 353, 361, 362, 363, 382, 389, 453, 454, 455, 585, 598, 599, 600, 601, 603, 605, 607, 727], "Will": [51, 74, 347, 361, 362, 363, 722, 733, 781], "l_out": [51, 74, 347, 361], "h_in": [51, 74, 347, 362, 363], "w_in": [51, 74, 347, 362, 363], "s_0": [51, 74, 347, 362, 363], "s_1": [51, 74, 347, 362, 363], "adaptive_max_pool2d": [51, 74, 347], "avg_pool1d": [51, 74, 347], "kernel": [51, 55, 74, 78, 347, 365, 366, 367, 383, 384, 385, 386, 585, 610, 775, 781, 795, 798, 799], "stride": [51, 55, 74, 75, 78, 93, 347, 350, 365, 366, 367, 383, 384, 385, 386, 388, 389, 417, 583, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 724, 767, 771, 795], "nwc": [51, 55, 74, 78, 347, 365, 370, 383, 386, 585, 598, 599, 600, 605, 606, 724], "count_include_pad": [51, 74, 347, 365, 366, 367, 724], "ceil_mod": [51, 74, 347, 365, 366, 367, 383, 384, 385, 388, 724], "d_in": [51, 55, 74, 78, 347, 365, 366, 367, 369, 374, 375, 379, 383, 384, 385, 386, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "algorithm": [51, 55, 67, 74, 78, 101, 347, 348, 365, 366, 367, 382, 383, 384, 385, 386, 408, 409, 411, 586, 599, 601, 602, 603, 604, 607, 632, 720, 724, 757, 768, 773, 781, 795, 797, 799], "ncw": [51, 55, 74, 78, 347, 365, 370, 371, 383, 386, 585, 598, 599, 600, 605, 606, 724], "avg_pool2d": [51, 74, 347], "nhwc": [51, 55, 74, 78, 347, 366, 371, 384, 388, 585, 598, 601, 602, 605, 606, 607, 724], "divisor_overrid": [51, 74, 347, 366, 367, 724], "avg_pool3d": [51, 74, 347], "ndhwc": [51, 55, 74, 78, 347, 367, 372, 385, 585, 598, 603, 604, 605, 606, 724], "volum": [51, 55, 74, 78, 347, 367, 369, 374, 375, 379, 385, 585, 603, 604], "ncdhw": [51, 55, 74, 78, 347, 367, 372, 385, 585, 598, 603, 604, 605, 606, 724], "dct": [51, 74, 347, 724, 778], "lenght": [51, 74, 297, 300, 301, 311, 347, 368, 724], "truncat": [51, 74, 347, 348, 368, 374, 378, 379, 380, 390, 410, 529, 583, 722, 724, 761, 778], "larger": [51, 58, 64, 74, 81, 87, 156, 347, 368, 375, 378, 380, 390, 579, 588, 596, 646, 654, 711, 713, 724, 770, 773, 802], "ortho": [51, 74, 347, 368, 369, 374, 375, 378, 379, 380, 390, 724], "onesid": [51, 74, 347, 369], "fft": [51, 74, 347, 369, 375, 390, 724, 747, 795], "symmetri": [51, 347, 369], "rfft": [51, 74, 347, 369, 390], "invok": [51, 347, 369, 742, 762, 789, 790], "batch_idx": [51, 347, 369], "signal_dim1": [51, 347, 369], "signal_dim2": [51, 347, 369], "signal_dimn": [51, 347, 369], "signal_dim": [51, 347, 369], "embed": [51, 74, 347, 585, 611, 724, 795], "max_norm": [51, 52, 74, 75, 347, 373, 490, 491, 583, 724], "ifft": [51, 74, 347, 374, 380], "pi": [51, 74, 277, 281, 347, 374, 379, 576, 581], "44509285e": [51, 74, 347, 374], "14423775e": [51, 74, 347, 374], "17j": [51, 74, 347, 374, 379], "11483250e": [51, 74, 347, 374], "16j": [51, 74, 347, 374, 379], "33486982e": [51, 74, 347, 374], "22464680e": [51, 74, 347, 374], "95799250e": [51, 74, 347, 374], "66951701e": [51, 74, 347, 374], "fft2": [51, 347], "vari": [51, 62, 91, 282, 375, 495, 581, 583, 594, 697, 698, 699, 755, 759, 768, 770, 777], "20477401j": [51, 347, 375], "0614962j": [51, 347, 375], "idct": [51, 74, 347], "49862671": [51, 74, 347, 368, 378], "37691498": [51, 74, 347, 368, 378], "00390816": [51, 74, 347, 368, 378], "58938599": [51, 74, 347, 368, 378], "92713165": [51, 74, 347, 368, 378], "078475": [51, 74, 347, 368, 378], "19664812": [51, 74, 347, 368, 378], "95411837": [51, 74, 347, 368, 378], "30636606e": [51, 74, 347, 379], "43029718e": [51, 74, 347, 379], "18j": [51, 74, 347, 374, 379], "53080850e": [51, 74, 347, 379], "58689626e": [51, 74, 347, 379], "24474906e": [51, 74, 347, 379], "91858728e": [51, 74, 347, 379], "01435406e": [51, 74, 347, 379], "ifftn": [51, 74, 347], "24730653": [51, 74, 347, 380], "90832391j": [51, 74, 347, 380], "49495562": [51, 74, 347, 380], "9039565j": [51, 74, 347, 380], "98193269": [51, 74, 347, 380], "49560517j": [51, 74, 347, 380], "93280757": [51, 74, 347, 380], "48075343j": [51, 74, 347, 380], "28526384": [51, 74, 347, 380], "3351205j": [51, 74, 347, 380], "2343787": [51, 74, 347, 380], "83528011j": [51, 74, 347, 380], "18791352": [51, 74, 347, 380], "30690572j": [51, 74, 347, 380], "82115787": [51, 74, 347, 380], "96195183j": [51, 74, 347, 380], "44719226": [51, 74, 347, 380], "72654048j": [51, 74, 347, 380], "51476765": [51, 347, 380], "66160417j": [51, 347, 380], "04319742": [51, 347, 380], "05411636j": [51, 347, 380], "015561": [51, 347, 380], "04216015j": [51, 347, 380], "06310689": [51, 347, 380], "05347854j": [51, 347, 380], "13392983": [51, 347, 380], "16052352j": [51, 347, 380], "08371392": [51, 347, 380], "17252843j": [51, 347, 380], "0031429": [51, 347, 380], "05421245j": [51, 347, 380], "10446617": [51, 347, 380], "17747098j": [51, 347, 380], "05344324": [51, 347, 380], "07972424j": [51, 347, 380], "8344667": [51, 74, 347, 380], "98222595j": [51, 74, 347, 380], "48472244": [51, 74, 347, 380], "30233797j": [51, 74, 347, 380], "recompute_scale_factor": [51, 74, 347, 382, 773], "antialia": [51, 74, 347, 382, 773], "height": [51, 52, 55, 74, 75, 78, 347, 382, 495, 583, 585, 601, 602, 603, 604, 607, 722, 778], "width": [51, 52, 55, 74, 75, 78, 347, 348, 350, 359, 382, 396, 439, 476, 495, 583, 585, 599, 600, 601, 602, 603, 604, 607, 611], "trilinear": [51, 74, 347, 382, 773], "nearest_exact": [51, 74, 347, 382, 773], "tf_area": [51, 74, 347, 382, 773], "mitchellcub": [51, 74, 347, 382, 773], "lanczos3": [51, 74, 347, 382, 773], "lanczos5": [51, 74, 347, 382, 773], "gaussian": [51, 74, 101, 347, 382, 575, 773], "overwrit": [51, 68, 74, 204, 347, 382, 580, 749, 767, 768, 775], "align": [51, 68, 74, 347, 348, 382, 393, 748, 756, 768, 775, 777, 783, 801], "thu": [51, 74, 225, 238, 269, 273, 281, 282, 347, 348, 382, 395, 581, 586, 618, 619, 747, 756, 761, 765, 768, 771], "preserv": [51, 52, 53, 68, 74, 75, 76, 94, 347, 348, 350, 359, 382, 408, 419, 420, 421, 430, 431, 480, 512, 573, 583, 584, 588, 650, 770, 780, 781, 790], "antialias": [51, 74, 347, 382], "downsampl": [51, 74, 347, 382], "max_pool1d": [51, 74, 347, 386], "dilaton": [51, 74, 347, 383, 384, 385], "max_pool3d": [51, 74, 347], "reduce_window": [51, 78, 347], "window_dimens": [51, 78, 347, 389], "window_strid": [51, 78, 347, 389], "base_dil": [51, 78, 347, 389], "window_dil": [51, 78, 347, 389], "rfftn": [51, 74, 347], "linear_algebra": [51, 56, 74, 79, 586, 771], "_arraywithlinearalgebraexperiment": [51, 93], "adjoint": [51, 56, 74, 79, 348, 586, 622, 633, 634], "cond": [51, 74, 115, 348, 577, 781], "933034373659268": [51, 392], "diagflat": [51, 74, 348, 401, 404], "offset": [51, 56, 59, 70, 74, 79, 82, 126, 348, 353, 393, 453, 454, 455, 578, 586, 591, 617, 638, 684], "padding_valu": [51, 74, 348, 393], "right_left": [51, 74, 348, 393], "num_row": [51, 74, 348, 393], "num_col": [51, 74, 348, 393], "dot": [51, 55, 74, 78, 91, 348, 406, 585, 586, 611, 612, 640, 742, 748, 756], "eig": [51, 56, 74, 348, 586, 619, 620], "37228132": [51, 74, 348, 395, 397, 618], "82456484": [51, 395, 618], "41597356": [51, 395, 618], "56576746": [51, 395, 618], "90937671": [51, 395, 618], "eigh_tridiagon": [51, 74, 348], "eigvals_onli": [51, 74, 348, 396], "select_rang": [51, 74, 348, 396], "tol": [51, 74, 92, 348, 396, 408, 411], "eigenvalu": [51, 56, 74, 79, 91, 348, 395, 396, 397, 586, 618, 619, 620, 627], "eigenvector": [51, 74, 348, 395, 396, 586, 618, 619], "interv": [51, 60, 65, 74, 83, 88, 118, 129, 130, 136, 348, 359, 396, 476, 578, 586, 588, 592, 597, 614, 640, 646, 649, 657, 686, 688, 714, 715], "togeth": [51, 68, 74, 312, 325, 344, 348, 396, 729, 742, 752, 755, 757, 767, 768, 770, 771, 773, 779, 780, 781, 786, 793, 795, 796, 801], "cluster": [51, 74, 348, 396, 781, 795], "converg": [51, 74, 348, 396, 787], "li": [51, 74, 348, 359, 396, 482, 785], "_2": [51, 74, 348, 396], "precis": [51, 56, 74, 79, 156, 244, 264, 271, 278, 320, 344, 348, 359, 396, 473, 535, 557, 579, 581, 583, 586, 619, 620, 625, 632, 634, 635, 641, 756, 768, 772, 773, 799], "eig_val": [51, 74, 348, 396], "decreas": [51, 74, 348, 396], "eig_vector": [51, 74, 348, 396], "38196": [51, 396], "61803": [51, 396], "eigval": [51, 74, 348], "general_inner_product": [51, 79, 348], "n_mode": [51, 79, 348, 398], "tradit": [51, 79, 348, 398], "inner": [51, 56, 70, 79, 97, 133, 348, 395, 398, 578, 586, 589, 618, 619, 624, 662, 663, 664, 747, 767], "initialize_tuck": [51, 74, 348], "svd": [51, 56, 74, 79, 348, 399, 403, 408, 409, 410, 411, 586, 635], "truncated_svd": [51, 74, 348, 399, 408, 411], "non_neg": [51, 74, 306, 341, 348, 399], "mask": [51, 55, 74, 78, 91, 348, 350, 399, 400, 408, 411, 446, 505, 583, 585, 608, 611, 612, 773], "svd_mask_repeat": [51, 74, 348, 399, 408, 411], "compon": [51, 74, 134, 135, 212, 213, 214, 217, 220, 229, 231, 232, 234, 236, 264, 266, 267, 274, 277, 278, 281, 282, 305, 306, 314, 341, 344, 348, 399, 408, 578, 581, 593, 694, 742, 775, 786, 791, 796, 798], "tuckertensor": [51, 74, 92, 306, 341, 348, 399, 408, 411], "scheme": [51, 74, 348, 399, 408, 751, 779, 795], "tucker": [51, 74, 306, 341, 348, 399, 408], "decomposit": [51, 56, 74, 79, 91, 305, 306, 341, 348, 399, 408, 411, 586, 613, 619, 623, 631, 634, 747, 802], "miss": [51, 74, 348, 350, 399, 408, 411, 446, 728, 747, 748, 752, 755, 756, 759, 768, 770, 773], "everywher": [51, 74, 348, 399, 408, 411], "imput": [51, 74, 348, 399, 408, 411], "kron": [51, 74, 348, 404, 802], "make_svd_non_neg": [51, 74, 348, 410], "nntype": [51, 74, 348, 403], "nndsvd": [51, 74, 348, 403], "singular": [51, 56, 74, 79, 348, 399, 403, 409, 410, 586, 625, 627, 630, 634, 635, 757], "nndsvda": [51, 74, 348, 403], "boutsidi": [51, 74, 348, 403], "gallopoulo": [51, 74, 348, 403], "pattern": [51, 52, 74, 75, 348, 403, 495, 496, 497, 583, 757, 760, 787], "recognit": [51, 74, 348, 403], "1362": [51, 74, 348, 403], "2008": [51, 74, 348, 403, 795], "matrix_exp": [51, 74, 348], "7183": [51, 74, 348, 404], "3891": [51, 74, 348, 404], "mode_dot": [51, 74, 90, 91, 92, 348], "matrix_or_vector": [51, 74, 91, 92, 348, 405], "i_1": [51, 74, 91, 348, 405], "i_k": [51, 74, 91, 348, 405], "i_n": [51, 74, 91, 348, 405], "i_": [51, 74, 91, 348, 359, 405, 476], "multi_dot": [51, 74, 348], "148": [51, 73, 74, 234, 348, 406], "multi_mode_dot": [51, 74, 348], "mat_or_vec_list": [51, 74, 348, 407], "times_0": [51, 348, 407], "vec": [51, 348, 407], "times_1": [51, 348, 407], "cdot": [51, 264, 348, 407, 581], "times_n": [51, 348, 407], "noqa": [51, 91, 211, 278, 347, 348, 383, 407, 581, 587, 643, 724, 733, 769], "partial_tuck": [51, 74, 348], "n_iter_max": [51, 74, 348, 408, 411], "verbos": [51, 74, 348, 408, 411, 770, 775], "return_error": [51, 74, 348, 408, 411], "variat": [51, 74, 348, 408, 411, 759, 768, 770], "reconstruct": [51, 56, 62, 74, 85, 348, 350, 408, 411, 450, 586, 594, 634, 696, 698, 769], "return_erro": [51, 348, 408, 411], "svd_flip": [51, 74, 348], "u_based_decis": [51, 74, 348, 409], "basi": [51, 74, 348, 409, 749, 751, 778], "flip": [51, 58, 74, 81, 91, 222, 348, 350, 409, 430, 431, 581, 588, 767, 777, 778, 780], "decis": [51, 74, 348, 409, 751, 757, 773, 775, 777, 795], "u_adjust": [51, 74, 348, 409], "v_adjust": [51, 74, 348, 409], "compute_uv": [51, 56, 74, 79, 348, 410, 586, 634], "n_eigenvec": [51, 74, 348, 410], "returnedv": [51, 410], "vh": [51, 56, 74, 79, 348, 410, 586, 634], "eigen": [51, 74, 348, 410], "namedtupl": [51, 56, 62, 74, 79, 85, 348, 350, 395, 410, 450, 586, 594, 618, 619, 631, 632, 634, 696, 697, 698], "fixed_factor": [51, 74, 348, 411], "tl": [51, 74, 348, 411], "kolda": [51, 74, 348, 411], "bader": [51, 74, 348, 411], "siam": [51, 74, 348, 411], "review": [51, 74, 348, 411, 747, 749, 756, 759, 768, 771], "vol": [51, 74, 348, 411], "pp": [51, 74, 348, 411], "455": [51, 74, 348, 411], "500": [51, 74, 75, 78, 347, 348, 370, 371, 411, 503, 583], "2009": [51, 74, 348, 411], "_arraywithlossesexperiment": [51, 93], "huber_loss": [51, 74, 349], "delta": [51, 53, 74, 76, 349, 412, 564, 584], "truth": [51, 232, 242, 243, 250, 251, 267, 349, 412, 581, 745, 768, 770], "transit": [51, 74, 349, 412, 795], "huber": [51, 74, 349, 412], "l1_loss": [51, 74, 349], "l1": [51, 56, 74, 79, 349, 353, 412, 413, 415, 456, 586, 641, 755, 778], "targetict": [51, 74, 349, 413, 415, 416], "20000000000000004": [51, 413], "smooth_l1_loss": [51, 74, 349], "smooth": [51, 57, 74, 80, 349, 412, 415, 587, 643, 644, 645, 766], "8125": [51, 415], "soft_margin_loss": [51, 74, 349], "soft": [51, 74, 349, 350, 416, 446, 758], "margin": [51, 74, 349, 416, 768], "35667497": [51, 416, 587, 644], "22314353": [51, 416], "60943791": [51, 416], "manipul": [51, 74, 767, 768, 771, 773, 775, 780, 785, 795], "_arraywithmanipulationexperiment": [51, 93], "as_strid": [51, 74, 350], "nativeshap": [51, 55, 58, 60, 74, 81, 83, 119, 120, 122, 127, 134, 139, 350, 354, 417, 427, 432, 440, 443, 459, 460, 461, 462, 463, 527, 540, 545, 547, 578, 583, 585, 588, 592, 598, 600, 602, 604, 606, 653, 686, 687, 688, 763, 765], "byte": [51, 52, 70, 74, 75, 93, 126, 350, 417, 521, 578, 583, 800, 801], "associative_scan": [51, 74, 350], "revers": [51, 52, 56, 64, 74, 79, 87, 93, 94, 348, 350, 359, 402, 418, 430, 431, 474, 475, 494, 583, 586, 588, 596, 639, 650, 704, 705, 747, 755, 756, 757, 759, 760, 767, 768, 773, 780, 781], "scan": [51, 74, 350, 418, 781], "atleast_1d": [51, 74, 350], "ari": [51, 74, 350, 419, 420, 421, 425, 434, 451], "a1": [51, 75, 419, 420, 421, 487], "a2": [51, 419, 420, 421], "atleast_2d": [51, 74, 350], "atleast_3d": [51, 74, 350], "concat_from_sequ": [51, 74, 350], "input_sequ": [51, 74, 350, 424], "new_axi": [51, 74, 350, 424, 780], "dsplit": [51, 74, 350], "indices_or_sect": [51, 74, 350, 425, 434, 451], "3rd": [51, 74, 350, 425], "dstack": [51, 74, 350], "fill_diagon": [51, 74, 350], "fill_diag": [51, 428], "fortran": [51, 58, 74, 81, 350, 429, 588, 653, 795, 799], "layout": [51, 58, 74, 81, 350, 429, 588, 653, 753, 767, 768, 773], "fliplr": [51, 74, 350, 767], "diag": [51, 56, 74, 79, 350, 430, 431, 586, 619, 775], "flipud": [51, 74, 350, 767], "fold": [51, 74, 350, 440, 441, 756], "unfold": [51, 74, 91, 348, 350, 399, 432, 440, 442], "folded_tensor": [51, 350, 432], "heavisid": [51, 74, 350], "5000": [51, 350, 433, 586, 622], "hsplit": [51, 74, 350], "horizont": [51, 74, 350, 434, 495, 583], "hstack": [51, 74, 350], "vstack": [51, 74, 350, 435], "i0": [51, 74, 350, 359, 476], "bessel": [51, 64, 74, 87, 300, 341, 350, 436, 596, 711, 713], "kind": [51, 64, 74, 156, 159, 160, 269, 359, 436, 474, 475, 480, 579, 581, 596, 704, 705, 710, 712, 746, 768, 770, 773, 775, 781], "26606588": [51, 74, 350, 436], "2795853": [51, 74, 350, 436], "88079259": [51, 74, 350, 436], "row_mod": [51, 74, 350, 437], "column_mod": [51, 74, 350, 437], "ascend": [51, 63, 74, 86, 350, 357, 437, 466, 595, 700, 702], "prod": [51, 52, 64, 75, 87, 348, 350, 400, 402, 437, 481, 496, 583, 596, 757, 759, 775], "moveaxi": [51, 74, 350], "destin": [51, 74, 350, 438], "unstack": [51, 58, 68, 81, 438, 588, 755, 775, 778, 802], "reorder": [51, 58, 74, 81, 350, 438, 495, 583, 588, 650], "stat_length": [51, 74, 350, 439], "constant_valu": [51, 74, 350, 439], "end_valu": [51, 74, 350, 439], "reflect_typ": [51, 74, 350, 439], "partial_fold": [51, 74, 350], "skip_begin": [51, 74, 350, 440, 441, 442, 443], "untouch": [51, 74, 350, 440, 441, 442, 443], "partial_tensor_to_vec": [51, 74, 350], "skip_end": [51, 74, 350, 441, 442], "vectoris": [51, 74, 91, 350, 441, 443], "partial_unfold": [51, 74, 350], "ravel_tensor": [51, 74, 350, 442], "n_1": [51, 74, 350, 442], "n_2": [51, 74, 350, 442], "n_i": [51, 74, 348, 350, 400, 442], "partial_vec_to_tensor": [51, 74, 350], "rot90": [51, 74, 350, 767], "rotat": [51, 74, 350, 445], "soft_threshold": [51, 74, 350], "take_along_axi": [51, 74, 350], "arr": [51, 52, 71, 74, 164, 350, 423, 444, 447, 527, 579, 753, 757, 758], "top_k": [51, 74, 350], "largest": [51, 68, 74, 156, 159, 348, 350, 409, 448, 579, 586, 625, 634], "sort": [51, 62, 68, 74, 85, 94, 283, 348, 350, 359, 395, 448, 466, 480, 581, 586, 594, 618, 619, 634, 635, 696, 700, 701, 702, 742, 746, 756, 771], "retun": [51, 74, 350, 448], "smallest": [51, 68, 74, 156, 159, 227, 350, 448, 579, 581, 586, 625], "unfolded_tensor": [51, 350, 449], "unique_consecut": [51, 74, 350], "vsplit": [51, 74, 350], "vertic": [51, 74, 350, 451, 452, 495, 583, 749], "_arraywithnormsexperiment": [51, 93], "varianc": [51, 64, 74, 87, 353, 453, 455, 596, 713, 723, 727], "nsc": [51, 74, 353, 453, 454, 455, 727], "braodcast": [51, 74, 353, 453], "ad": [51, 58, 74, 81, 89, 231, 264, 312, 325, 344, 353, 453, 454, 455, 541, 542, 581, 583, 586, 588, 619, 620, 649, 724, 729, 742, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 779, 781, 786, 789, 794, 795], "running_mean": [51, 74, 353, 453, 455, 727], "running_var": [51, 74, 353, 453, 455, 727], "nc": [51, 74, 353, 453, 454, 455, 727], "group_norm": [51, 74, 353], "num_group": [51, 74, 353, 454], "group": [51, 74, 350, 353, 450, 454, 585, 590, 598, 605, 606, 667, 751, 755, 757, 764, 768, 769, 791, 794, 800], "instance_norm": [51, 74, 353], "l1_normal": [51, 74, 353], "33333334": [51, 353, 456, 458, 566, 584, 585, 586, 607, 641], "33333337": [51, 129, 353, 456, 566, 578, 584], "28571439": [51, 353, 456], "l2_normal": [51, 74, 353, 458], "l2": [51, 56, 79, 90, 91, 353, 457, 458, 586, 641, 724, 755], "44721359": [51, 74, 353, 457, 458], "89442718": [51, 74, 353, 457, 458], "60000002": [51, 87, 94, 353, 457, 458, 708], "80000001": [51, 353, 457, 458], "lp_normal": [51, 74, 353], "lp": [51, 353, 458], "_arraywithrandomexperiment": [51, 93], "bernoulli": [51, 74, 347, 354, 370, 371, 372], "event": [51, 74, 354, 459, 770], "entri": [51, 58, 68, 74, 81, 85, 129, 350, 354, 430, 431, 459, 578, 588, 590, 655, 678, 696, 748, 756, 770, 795], "parameter": [51, 60, 74, 83, 354, 459, 460, 462, 463, 592, 685, 687, 688], "odd": [51, 74, 269, 350, 354, 439, 459, 581, 746, 751], "drawn": [51, 60, 74, 83, 354, 459, 460, 461, 462, 463, 592, 685, 686, 687, 688, 723, 770], "dirichlet": [51, 74, 354], "10598304": [51, 354, 461], "21537054": [51, 354, 461], "67864642": [51, 354, 461], "48006698": [51, 354, 461], "07472073": [51, 354, 461], "44521229": [51, 354, 461], "55479872": [51, 354, 461], "05426367": [51, 354, 461], "39093761": [51, 354, 461], "19531053": [51, 354, 461], "51675832": [51, 354, 461], "28793114": [51, 354, 461], "12315625": [51, 354, 461], "29823365": [51, 354, 461], "5786101": [51, 354, 461], "15564976": [51, 354, 461], "50542368": [51, 354, 461], "33892656": [51, 354, 461], "1325352": [51, 354, 461], "44439589": [51, 354, 461], "42306891": [51, 354, 461], "gamma": [51, 59, 74, 82, 318, 328, 344, 354, 359, 477, 591, 684], "poisson": [51, 74, 349, 354, 414], "rate": [51, 53, 74, 76, 347, 354, 388, 463, 565, 568, 570, 571, 572, 584, 589, 662, 663, 664, 728, 756], "paramt": [51, 463, 590, 672, 682], "lam": [51, 74, 354, 463], "_arraywithsearchingexperiment": [51, 93], "unravel_index": [51, 74, 355], "unravel": [51, 74, 355, 464], "_arraywithsetexperiment": [51, 93], "_arraywithsortingexperiment": [51, 93], "lexsort": [51, 74, 357], "indirectli": [51, 74, 357, 466], "statist": [51, 74, 89, 350, 439, 727, 740, 747, 757, 770, 771, 795], "_arraywithstatisticalexperiment": [51, 93], "bincount": [51, 74, 359], "minlength": [51, 74, 359, 471], "corrcoef": [51, 74, 359], "rowvar": [51, 74, 359, 472, 473], "observ": [51, 74, 359, 472, 473, 749, 757, 761, 775, 789, 797], "relationship": [51, 74, 472, 723], "cov": [51, 74, 359], "bia": [51, 55, 74, 78, 82, 359, 473, 522, 583, 585, 591, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 684, 724, 764, 770, 775, 779], "ddof": [51, 74, 359, 473], "fweight": [51, 74, 359, 473], "aweight": [51, 74, 359, 473], "overridden": [51, 74, 359, 473, 728, 752], "unbias": [51, 64, 74, 87, 359, 473, 596, 713], "typic": [51, 74, 312, 325, 344, 359, 473, 595, 702, 724, 751, 764, 794, 802], "assign": [51, 74, 91, 359, 473, 747, 749, 753, 757, 767, 777], "covari": [51, 74, 359, 473], "cummax": [51, 74, 359], "exclus": [51, 52, 64, 68, 74, 75, 87, 118, 348, 359, 408, 474, 475, 514, 515, 518, 578, 583, 592, 596, 686, 704, 705, 755, 757, 764, 780, 799, 801], "cumul": [51, 64, 74, 87, 359, 474, 475, 596, 704, 705], "uint64": [51, 64, 153, 158, 160, 161, 171, 173, 176, 292, 339, 359, 474, 475, 579, 596, 704, 705, 710, 712, 757, 770, 775], "uint16": [51, 64, 148, 153, 158, 159, 168, 292, 339, 359, 474, 475, 579, 596, 704, 705, 710, 712, 757, 768, 770, 775], "bit": [51, 64, 155, 156, 159, 222, 223, 225, 359, 474, 475, 579, 581, 596, 704, 705, 710, 712, 746, 747, 748, 755, 756, 757, 759, 764, 775, 777, 801], "uint32": [51, 64, 153, 158, 159, 160, 182, 292, 339, 359, 474, 475, 579, 596, 704, 705, 710, 712, 757, 770, 775], "cummin": [51, 74, 359], "histogram": [51, 74, 359], "extend_lower_interv": [51, 74, 359, 476], "extend_upper_interv": [51, 74, 359, 476], "densiti": [51, 74, 359, 476], "monoton": [51, 74, 359, 476], "rightmost": [51, 74, 359, 476], "c1": [51, 74, 359, 476, 755], "ff": [51, 74, 359, 476], "c_": [51, 74, 359, 476], "igamma": [51, 74, 359], "incomplet": [51, 74, 359, 477, 749], "3614": [51, 74, 359, 477], "2085": [51, 74, 359, 477], "median": [51, 74, 350, 359, 439, 480], "nanmean": [51, 74, 359], "6666666666666665": [51, 74, 359, 479], "nanmedian": [51, 74, 359], "overwrite_input": [51, 74, 359, 480], "treat": [51, 68, 74, 94, 269, 330, 344, 350, 359, 447, 480, 481, 581, 766, 770, 776, 780], "undefin": [51, 74, 350, 359, 360, 439, 480, 483, 757, 761, 766], "nanprod": [51, 74, 359], "Not": [51, 74, 330, 344, 348, 359, 397, 481, 576, 753, 761, 769, 778, 779, 781], "quantil": [51, 74, 359], "inclus": [51, 74, 118, 359, 482, 578, 592, 686, 743, 753, 767, 773], "higher": [51, 74, 348, 350, 359, 408, 411, 419, 420, 421, 482, 723, 757, 767, 774, 775, 780, 781, 792, 795, 796, 799, 801, 802], "midpoint": [51, 74, 359, 482], "surround": [51, 74, 359, 482, 773], "whichev": [51, 74, 359, 482], "_arraywithutilityexperiment": [51, 93], "optional_get_el": [51, 74, 360], "empti": [51, 52, 68, 75, 118, 292, 339, 350, 360, 439, 483, 490, 527, 578, 583, 586, 590, 596, 597, 638, 641, 679, 710, 712, 714, 715, 747, 748, 752, 754, 757, 758, 767], "_arraywithgener": [52, 93], "all_equ": [52, 75, 583], "equality_matrix": [52, 75, 484, 583], "array_equ": [52, 75, 583], "assert_supports_inplac": [52, 75, 583], "ivybackendexcept": [52, 75, 488, 512, 583, 737, 752, 758, 761], "clip_matrix_norm": [52, 75, 583], "894": [52, 75, 490, 491, 583, 591, 684], "clip_vector_norm": [52, 75, 583], "default_v": [52, 494, 583], "catch_except": [52, 494, 583], "rev": [52, 494, 583], "with_cal": [52, 494, 583], "catch": [52, 494, 583, 765, 770], "einops_rearrang": [52, 75, 583], "axes_length": [52, 75, 495, 496, 497, 583], "arrang": [52, 495, 583], "rearrang": [52, 75, 495, 497, 583], "einops_reduc": [52, 75, 583], "einops_repeat": [52, 75, 583], "fourier_encod": [52, 75, 583], "max_freq": [52, 75, 499, 583], "oppos": [52, 75, 499, 583, 757], "geometr": [52, 75, 499, 583, 586, 639], "seper": [52, 499, 583, 759, 769], "0000000e": [52, 75, 499, 583], "2246468e": [52, 75, 499, 583], "4492936e": [52, 499, 583], "6739404e": [52, 75, 499, 583], "batch_dim": [52, 75, 502, 503, 583, 730], "gather_nd": [52, 75, 583], "get_num_dim": [52, 75, 583], "as_arrai": [52, 75, 506, 540, 583, 730], "has_nan": [52, 75, 583], "include_inf": [52, 75, 508, 562, 583], "inplace_decr": [52, 75, 583], "val": [52, 68, 73, 75, 244, 510, 511, 512, 531, 532, 533, 581, 583, 757, 767, 777], "decrement": [52, 75, 510, 583], "inplace_incr": [52, 75, 583], "increment": [52, 75, 511, 583, 749, 795], "inplace_upd": [52, 75, 530, 583, 721, 767], "ensure_in_backend": [52, 75, 512, 583, 767], "keep_input_dtyp": [52, 75, 512, 583, 767], "is_arrai": [52, 75, 583, 767, 768], "is_ivy_arrai": [52, 75, 583, 767, 777], "is_ivy_contain": [52, 583], "is_native_arrai": [52, 75, 167, 515, 579, 583, 777], "isin": [52, 75, 583], "test_el": [52, 75, 519, 583], "assume_uniqu": [52, 75, 519, 583], "invert": [52, 75, 222, 519, 581, 583, 586, 626], "scatter_flat": [52, 75, 583], "occupi": [52, 156, 159, 526, 527, 579, 583], "scatter_nd": [52, 75, 583, 773, 777], "stable_divid": [52, 75, 583, 764], "denomin": [52, 59, 75, 82, 533, 541, 555, 583, 591, 684, 727, 764, 772, 781, 792], "min_denomin": [52, 75, 533, 541, 555, 583, 772], "_min_denomin": [52, 541, 583], "stable_pow": [52, 75, 583], "min_bas": [52, 75, 532, 542, 554, 583, 727, 772], "stabl": [52, 63, 75, 86, 138, 307, 341, 357, 466, 532, 533, 541, 542, 554, 555, 578, 583, 595, 700, 703, 748, 753, 757, 768, 772, 775, 781], "00004": [52, 75, 542, 583], "00008": [52, 75, 542, 583], "00004000e": [52, 542], "56002560e": [52, 542], "60001200e": [52, 542], "09602048e": [52, 542], "supports_inplace_upd": [52, 75, 583], "to_fil": 52, "fid": 52, "sep": 52, "format_": 52, "binari": [52, 55, 57, 78, 80, 221, 224, 226, 261, 281, 349, 414, 416, 581, 585, 587, 608, 643], "recov": [52, 761, 768], "to_scalar": [52, 75, 583], "value_is_nan": [52, 75, 583], "_arraywithgradi": [53, 93], "adam_step": [53, 76, 584], "mw": [53, 76, 564, 565, 584, 779], "vw": [53, 76, 564, 565, 584, 779], "beta1": [53, 76, 486, 564, 565, 570, 583, 584, 728, 779], "beta2": [53, 76, 486, 564, 565, 570, 583, 584, 728, 779], "epsilon": [53, 56, 57, 76, 79, 80, 486, 564, 565, 570, 583, 584, 586, 587, 627, 630, 643, 644, 645, 725, 727, 728, 755, 764, 767, 779], "dc": [53, 76, 564, 565, 568, 570, 571, 572, 584], "dw": [53, 76, 564, 565, 568, 570, 571, 572, 584], "forget": [53, 76, 564, 565, 570, 584, 728, 742, 757], "prevent": [53, 76, 564, 565, 570, 584, 585, 596, 608, 712, 723, 728, 747, 749, 756, 757, 761, 767, 768, 771], "dcdw": [53, 76, 564, 565, 568, 570, 571, 584], "adam_step_delta": [53, 76, 564, 584], "2020105": [53, 564, 584], "22187898": [53, 564, 584], "24144873": [53, 564, 584], "10000002": [53, 87, 286, 339, 564, 708], "20000005": [53, 286, 339, 564], "00300002": [53, 564], "00800002": [53, 564], "adam_upd": [53, 76, 584, 779], "mw_tm1": [53, 76, 565, 570, 584], "vw_tm1": [53, 76, 565, 570, 584], "stop_gradi": [53, 76, 204, 486, 565, 568, 570, 571, 572, 580, 583, 584, 589, 662, 663, 664, 728, 779], "ws_new": [53, 76, 565, 570, 571, 572, 584], "updated_weight": [53, 76, 565, 584], "92558753": [53, 565], "92558873": [53, 565, 584], "92558718": [53, 565, 584], "00000063e": [53, 76, 565, 584], "00000016e": [53, 76, 565, 584], "00000086e": [53, 76, 565, 584], "gradient_descent_upd": [53, 76, 584, 589, 662, 663, 664], "descent": [53, 76, 568, 584, 728, 779, 795], "new_weight": [53, 76, 568, 570, 584, 778], "lamb_upd": [53, 76, 584], "max_trust_ratio": [53, 76, 570, 584, 728], "decay_lambda": [53, 76, 570, 571, 584, 728], "trust": [53, 76, 570, 584, 728], "ratio": [53, 76, 570, 584, 728], "decai": [53, 76, 570, 571, 584, 728], "lamb": [53, 76, 570, 584, 728, 779], "784": [53, 570, 584], "lars_upd": [53, 76, 584], "lar": [53, 76, 571, 584, 728, 779], "optimizer_upd": [53, 76, 584], "effective_grad": [53, 76, 572, 584], "3e": [53, 76, 572, 584], "preserve_typ": [53, 76, 573, 584], "_arraywithimag": [54, 93], "_arraywithlay": [55, 93], "conv1d": [55, 78, 585, 724], "filter_format": [55, 78, 585, 598, 599, 601, 602, 603, 605], "channel_last": [55, 78, 585, 598, 599, 601, 602, 603, 605, 606], "x_dilat": [55, 78, 585, 598, 599, 601, 602, 603, 605], "fw": [55, 78, 359, 473, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 748, 770], "d_out": [55, 78, 585, 598, 599, 600, 601, 602, 603, 604, 605, 606], "channel_first": [55, 78, 585, 598, 599, 601, 602, 603, 605, 606], "wio": [55, 585, 598, 599, 600, 605], "conv1d_transpos": [55, 78, 585], "output_shap": [55, 78, 585, 598, 600, 602, 604, 606, 724], "fh": [55, 78, 585, 590, 598, 601, 602, 603, 604, 605, 606, 607, 677], "hwio": [55, 585, 598, 599, 601, 605], "conv2d_transpos": [55, 78, 585], "conv3d": [55, 78, 585, 604, 724], "fd": [55, 78, 585, 598, 603, 604, 605, 606], "conv3d_transpos": [55, 78, 585], "depthwise_conv2d": [55, 78, 585], "randint": [55, 60, 62, 78, 83, 592, 594, 607, 610, 696, 757, 789], "noise_shap": [55, 78, 585, 608], "droput": [55, 608], "42857146": [55, 585, 608], "85714293": [55, 585, 608], "28571415": [55, 78, 585, 608], "71428585": [55, 78, 585, 608], "14285755": [55, 78, 585, 608], "5714283": [55, 585, 608], "4285717": [55, 78, 585, 608], "8571434": [55, 78, 585, 608], "2857151": [55, 585, 608], "dropout1d": [55, 78, 347], "droput1d": [55, 370, 371], "dropout2d": [55, 78, 347], "dropout3d": [55, 78, 347], "droput3d": [55, 372], "outer_batch_shap": [55, 78, 585, 609], "inner_batch_shap": [55, 78, 585, 609], "in_featur": [55, 78, 585, 609, 770], "out_featur": [55, 78, 585, 609, 770], "134": [55, 586, 609, 626], "lstm_updat": [55, 78, 585, 775], "init_h": [55, 78, 585, 610, 775], "init_c": [55, 78, 585, 610, 775], "recurrent_kernel": [55, 78, 585, 610, 775], "recurrent_bia": [55, 78, 585, 610, 775], "hidden": [55, 78, 585, 610, 724, 754, 761, 775, 779], "recurr": [55, 78, 585, 610, 775, 795, 799], "timestep": [55, 78, 585, 610, 611, 724, 775], "h_i": [55, 78, 610], "c_i": [55, 78, 610], "rc": [55, 78, 610], "multi_head_attent": [55, 78, 585, 767], "num_head": [55, 78, 585, 611, 724], "in_proj_weight": [55, 78, 585, 611], "q_proj_weight": [55, 78, 585, 611], "k_proj_weight": [55, 78, 585, 611], "v_proj_weight": [55, 78, 585, 611], "out_proj_weight": [55, 78, 585, 611], "in_proj_bia": [55, 78, 585, 611], "out_proj_bia": [55, 78, 585, 611], "is_caus": [55, 78, 585, 611, 612], "return_attention_weight": [55, 78, 585, 611], "average_attention_weight": [55, 78, 585, 611], "scaled_dot_product_attent": [55, 78, 585], "dropout_p": [55, 78, 585, 612], "num_queri": [55, 78, 585, 611, 612], "feat_dim": [55, 78, 585, 612], "num_kei": [55, 78, 585, 611, 612], "causal": [55, 78, 585, 611, 612], "attent": [55, 78, 585, 611, 612, 724, 749, 752, 786], "score": [55, 78, 349, 416, 585, 612, 742], "40000001": [55, 67, 93, 94, 103, 106, 286, 339, 575, 585, 594, 612, 697], "29999995": [55, 286, 339, 585, 594, 612, 697], "19994521": [55, 585, 612], "09994531": [55, 585, 612], "30000019": [55, 585, 612], "_arraywithlinearalgebra": [56, 93], "choleski": [56, 79, 586, 767], "625": [56, 74, 322, 586, 613], "vif": [56, 79, 614], "det": [56, 79, 586, 632, 756], "axis1": [56, 58, 79, 81, 586, 588, 617, 638, 658], "axis2": [56, 79, 586, 617, 638], "eigh": [56, 79, 348, 395, 586, 618], "uplo": [56, 79, 586, 619, 620], "eigvalsh": [56, 79, 586], "array_lik": [56, 79, 347, 349, 350, 390, 412, 415, 416, 444, 586, 621, 629], "3d": [56, 74, 347, 370, 371, 421, 586, 621, 724, 773], "105": [56, 78, 585, 586, 587, 608, 609, 621, 629, 643], "149": [56, 586, 621], "171": [56, 586, 621], "143": [56, 73, 94, 281, 581, 586, 621, 759], "203": [56, 73, 220, 586, 591, 621, 684], "233": [56, 586, 621], "inv": [56, 79, 586], "transpose_a": [56, 79, 586, 624], "transpose_b": [56, 79, 586, 624], "adjoint_a": [56, 79, 586, 624], "adjoint_b": [56, 79, 586, 624], "matrix_norm": [56, 79, 586], "ord": [56, 79, 586, 625, 641], "fro": [56, 79, 349, 412, 586, 625], "nuc": [56, 79, 586, 625], "matrix_pow": [56, 79, 586], "matrix_rank": [56, 79, 586], "hermitian": [56, 79, 348, 395, 396, 586, 618, 619, 620, 627, 634], "largest_singular_valu": [56, 79, 586, 627, 630], "defici": [56, 586, 627], "matrix_transpos": [56, 79, 586, 777], "outer": [56, 79, 91, 586, 589, 662, 663, 664, 747], "pinv": [56, 79, 586], "pseudo": [56, 79, 586, 630, 766], "99999988": [56, 79, 586, 630], "qr": [56, 79, 586, 769], "orthonorm": [56, 79, 586, 631, 634], "complet": [56, 68, 79, 586, 631, 747, 748, 749, 751, 752, 755, 756, 759, 761, 764, 768, 769, 770, 773, 777, 778, 786, 793], "slogdet": [56, 79, 586], "logabsdet": [56, 79, 586, 632], "natur": [56, 79, 234, 252, 253, 254, 255, 274, 328, 344, 581, 586, 632, 752, 759, 761, 769, 786], "098611": [56, 586, 632], "solv": [56, 79, 348, 403, 586, 742, 748, 751, 768, 776, 797], "full_matric": [56, 79, 586, 634], "svf": [56, 634], "reconstructed_x": [56, 586, 634], "svdval": [56, 79, 586], "tensorsolv": [56, 79, 586], "vander": [56, 79, 586], "vandermond": [56, 79, 586, 639], "vecdot": [56, 79, 586], "vector_norm": [56, 79, 586], "singleton": [56, 61, 64, 65, 79, 84, 87, 88, 586, 588, 593, 596, 597, 641, 649, 656, 692, 707, 708, 709, 710, 711, 712, 713, 714, 715, 775], "mathemat": [56, 79, 214, 219, 231, 236, 238, 254, 264, 576, 581, 586, 625, 641, 757, 768, 773, 795, 801], "manhattan": [56, 79, 586, 641], "euclidean": [56, 79, 91, 586, 641], "7416575": [56, 79, 586, 641], "vector_to_skew_symmetric_matrix": [56, 79, 586], "_arraywithloss": [57, 93], "binary_cross_entropi": [57, 80, 587, 756], "from_logit": [57, 80, 587, 643, 725], "pos_weight": [57, 80, 587, 643], "amount": [57, 80, 206, 580, 587, 643, 644, 645, 748, 756, 758, 769], "crossentropi": [57, 80, 587, 643], "357": [57, 80, 587, 643, 645], "223": [57, 80, 587, 643, 645], "3862944": [57, 587, 644], "sparse_cross_entropi": [57, 80, 587], "_arraywithmanipul": [58, 93], "x_min": [58, 81, 588, 646, 780], "x_max": [58, 81, 588, 646, 780], "before_1": [58, 81, 350, 439, 588, 648, 661], "after_1": [58, 81, 350, 439, 588, 648, 661], "before_n": [58, 81, 350, 439, 588, 648, 661], "after_n": [58, 81, 350, 439, 588, 648, 661], "repetit": [58, 81, 588, 652, 659, 773], "fit": [58, 81, 588, 652, 747, 768, 775, 791, 792, 795], "flat": [58, 68, 81, 355, 464, 526, 583, 588, 652, 722], "allowzero": [58, 81, 588, 653], "remain": [58, 61, 74, 81, 84, 214, 231, 232, 238, 246, 247, 264, 267, 273, 275, 347, 370, 371, 372, 390, 581, 588, 590, 593, 653, 671, 694, 748, 749, 756, 759, 761, 764, 771, 773, 781], "roll": [58, 81, 588, 763], "shift": [58, 70, 81, 94, 128, 138, 223, 225, 307, 341, 578, 581, 588, 654, 748, 749, 758, 759, 763], "restor": [58, 81, 588, 654, 762], "num_or_size_split": [58, 68, 81, 588, 655, 775], "with_remaind": [58, 68, 81, 588, 655], "squeezabl": [58, 588, 656], "swapax": [58, 81, 588], "axis0": [58, 81, 588, 658], "swap_ax": [58, 658], "swap": [58, 81, 588, 658, 733, 790], "tile": [58, 75, 81, 497, 588], "unpack": [58, 81, 588, 660, 769, 770], "zero_pad": [58, 81, 588], "_arraywithnorm": [59, 93], "layer_norm": [59, 82, 591], "normalized_idx": [59, 82, 591, 684], "new_std": [59, 82, 591, 684, 727], "learnabl": [59, 82, 589, 591, 664, 684, 724, 727, 780], "deviat": [59, 60, 64, 82, 83, 87, 591, 592, 596, 684, 687, 711, 723, 727, 751, 787], "0976": [59, 591, 684], "3452": [59, 591, 684], "2740": [59, 591, 684], "1047": [59, 591, 684], "5886": [59, 591, 684], "2732": [59, 591, 684], "7696": [59, 591, 684], "7024": [59, 591, 684], "2518": [59, 591, 684], "826": [59, 591, 684], "178": [59, 591, 684], "981": [59, 591, 684], "831": [59, 591, 684], "421": [59, 591, 684], "_arraywithrandom": [60, 93], "multinomi": [60, 83, 354, 461, 592], "population_s": [60, 83, 592, 685], "num_sampl": [60, 83, 592, 685], "unnorm": [60, 83, 592, 685, 770], "popul": [60, 64, 68, 83, 87, 592, 596, 685, 711, 713, 757, 758, 767, 770, 775, 801], "draw": [60, 83, 354, 459, 461, 463, 592, 685, 687, 688, 723, 747, 751, 769, 770], "half": [60, 83, 118, 278, 578, 581, 592, 686, 688, 745, 773], "235": [60, 687], "float16": [60, 71, 83, 126, 148, 150, 151, 156, 158, 292, 320, 339, 344, 578, 579, 586, 641, 687, 688, 745, 757, 768, 770], "807": [60, 687], "_arraywithsearch": [61, 93], "select_last_index": [61, 84, 593, 691, 692], "occurr": [61, 350, 359, 450, 471, 593, 594, 691, 692, 696], "argmin": [61, 84, 593], "output_dtyp": [61, 84, 593, 692], "argwher": [61, 84, 593], "nonzero": [61, 84, 212, 213, 214, 217, 220, 229, 231, 234, 236, 238, 264, 277, 282, 581, 593], "as_tupl": [61, 84, 593, 694], "fewer": [61, 84, 593, 694], "condit": [61, 74, 84, 115, 348, 392, 577, 590, 593, 675, 676, 695, 751, 757, 759, 761, 764, 765, 767, 770, 789], "_arraywithset": [62, 93], "unique_al": [62, 85, 594], "by_valu": [62, 85, 594, 696], "inverse_indic": [62, 85, 350, 450, 594, 696, 698], "unique_count": [62, 85, 594], "unique_invers": [62, 85, 594], "unique_valu": [62, 85, 594], "admonit": [62, 699], "dask": [62, 594, 696, 697, 698, 699, 786], "difficult": [62, 594, 696, 697, 698, 699, 749, 751, 757, 770, 781], "omit": [62, 274, 581, 594, 696, 697, 698, 699, 763, 767, 768], "x_i": [62, 64, 73, 211, 212, 213, 216, 217, 218, 220, 222, 227, 228, 229, 234, 236, 237, 244, 245, 246, 247, 248, 252, 253, 254, 255, 259, 266, 271, 274, 275, 276, 277, 278, 279, 281, 282, 284, 314, 333, 344, 581, 594, 596, 696, 697, 698, 699, 707, 708, 709, 711, 712, 713, 723, 760], "x_j": [62, 594, 696, 697, 698, 699], "impli": [62, 594, 696, 697, 698, 699, 770], "typeerror": [62, 85, 594, 699, 777], "_arraywithsort": [63, 93], "stabil": [63, 86, 541, 542, 583, 595, 700, 703, 757, 766, 771, 773], "maintain": [63, 86, 595, 700, 703, 749, 751, 762, 767, 769, 770, 785, 794], "msort": [63, 86, 595], "searchsort": [63, 86, 595], "side": [63, 86, 324, 344, 595, 702, 724, 736, 748, 749, 754], "sorter": [63, 86, 595, 702], "ret_dtyp": [63, 86, 595, 702], "_arraywithstatist": [64, 93], "cumprod": [64, 87, 596, 768, 780], "cumsum": [64, 87, 596, 757], "einsum": [64, 87, 596], "equat": [64, 74, 87, 297, 341, 586, 596, 633, 706, 736, 756, 795], "operand": [64, 74, 78, 211, 212, 213, 214, 216, 217, 218, 219, 220, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 245, 246, 247, 252, 253, 254, 255, 256, 264, 267, 269, 273, 274, 275, 276, 277, 278, 281, 282, 284, 333, 337, 344, 345, 347, 389, 581, 586, 596, 632, 638, 706, 707, 709, 710, 712, 736, 752, 755, 760, 768], "describ": [64, 74, 214, 231, 232, 264, 267, 269, 354, 357, 463, 466, 581, 585, 596, 611, 706, 710, 712, 744, 747, 748, 749, 754, 756, 767, 768, 770, 775, 780, 795], "contract": [64, 586, 596, 636, 706], "seq": [64, 596, 706], "ii": [64, 87, 596, 706, 749], "jk": [64, 596, 706], "ik": [64, 596, 706], "126": [64, 101, 270, 575, 581, 586, 596, 626, 706], "510": [64, 596, 706], "special": [64, 79, 91, 93, 94, 211, 212, 213, 214, 216, 217, 218, 219, 220, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 245, 246, 247, 252, 253, 254, 255, 256, 259, 264, 267, 269, 273, 274, 275, 276, 277, 278, 281, 282, 284, 333, 344, 581, 586, 596, 632, 638, 707, 708, 709, 710, 711, 712, 713, 723, 747, 751, 752, 754, 756, 759, 760, 761, 763, 767, 769, 770, 771, 773, 795, 796, 797], "arithmet": [64, 87, 225, 231, 264, 581, 596, 708, 768], "propag": [64, 225, 581, 596, 707, 708, 709, 711, 712, 713, 766], "04999995": [64, 708], "freedom": [64, 87, 596, 711, 713, 753], "constitut": [64, 87, 596, 711, 713, 764, 775, 796], "commonli": [64, 87, 596, 711, 713, 761, 764, 766], "81649661": [64, 596, 711], "6666665": [64, 713, 778], "667": [64, 75, 231, 491, 541, 581, 583, 713], "_arraywithutil": [65, 93], "logic": [65, 88, 195, 231, 232, 258, 259, 260, 264, 267, 580, 581, 597, 714, 715, 747, 752, 756, 757, 758, 761, 764, 765, 766, 767, 768, 770, 773, 777, 790], "AND": [65, 88, 221, 232, 258, 581, 597, 714], "invalid": [65, 88, 586, 588, 597, 640, 649, 714, 715, 748, 757], "OR": [65, 88, 224, 260, 267, 581, 597, 715, 748, 749, 766], "_wrap_funct": [66, 89, 754, 764, 765], "function_nam": [66, 89, 747, 771], "new_funct": [66, 89, 754], "add_ivy_array_instance_method": 66, "cl": [66, 89], "moduletyp": [66, 89, 789, 790], "toi": [66, 89], "arrayexampl": 66, "hasattr": [66, 89], "_containerwithactiv": [67, 94], "dict_in": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "queue": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 536, 558, 583, 772, 778], "queue_load_s": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "container_combine_method": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "list_join": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "queue_timeout": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 536, 558, 583, 772], "print_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "key_length_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "print_ind": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "print_line_spac": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "ivyh": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "default_key_color": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "keyword_color_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "rebuild_child_contain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "types_to_iteratively_nest": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "alphabetical_kei": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "dynamic_backend": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 726, 753, 772], "build_cal": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94], "containerbas": [67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 755], "_static_gelu": 67, "key_chain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 154, 156, 159, 162, 163, 164, 166, 168, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 307, 308, 311, 312, 313, 314, 316, 318, 324, 325, 331, 333, 334, 335, 336, 337, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 382, 383, 384, 385, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 424, 426, 435, 437, 439, 440, 441, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 460, 465, 466, 473, 474, 475, 476, 482, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "to_appli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 154, 156, 159, 162, 163, 164, 166, 168, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 307, 308, 311, 312, 313, 314, 316, 318, 324, 325, 331, 333, 334, 335, 336, 337, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 382, 383, 384, 385, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 424, 426, 435, 437, 439, 440, 441, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 460, 465, 466, 473, 474, 475, 476, 482, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 590, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "prune_unappli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 154, 156, 159, 162, 163, 164, 166, 168, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 307, 308, 311, 312, 313, 314, 316, 318, 324, 325, 331, 333, 334, 335, 336, 337, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 382, 383, 384, 385, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 424, 426, 435, 437, 439, 440, 441, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 460, 465, 466, 473, 474, 475, 476, 482, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 590, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 678, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "map_sequ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 154, 156, 159, 162, 163, 164, 166, 168, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 307, 308, 311, 312, 313, 314, 316, 318, 324, 325, 331, 333, 334, 335, 336, 337, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 382, 383, 384, 385, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 424, 426, 435, 437, 439, 440, 441, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 460, 465, 466, 473, 474, 475, 476, 482, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "formul": [67, 101, 720], "prune": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 126, 128, 133, 135, 140, 144, 146, 159, 163, 164, 171, 205, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 293, 294, 296, 312, 313, 314, 316, 318, 324, 325, 331, 333, 335, 336, 337, 370, 371, 372, 412, 413, 415, 416, 419, 420, 421, 424, 445, 447, 448, 453, 455, 456, 457, 458, 460, 473, 474, 475, 476, 484, 487, 488, 490, 491, 495, 496, 497, 498, 499, 502, 503, 506, 508, 510, 511, 512, 514, 515, 518, 526, 527, 541, 542, 544, 546, 548, 549, 562, 568, 573, 590, 599, 600, 601, 602, 608, 609, 612, 613, 614, 619, 620, 621, 622, 624, 625, 627, 629, 631, 632, 638, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 660, 661, 678, 679, 680, 681, 685, 686, 687, 688, 690, 693, 696, 697, 698, 699, 700, 704, 705, 708, 710, 711, 713, 714, 715, 756], "static_gelu": 67, "046": 67, "_static_hardswish": 67, "_static_leaky_relu": 67, "static_leaky_relu": 67, "38999999": [67, 74, 103, 286, 339], "_static_log_softmax": 67, "static_log_softmax": 67, "371": [67, 104], "_static_mish": 67, "static_mish": 67, "30883577": [67, 105, 575], "28903052": [67, 105, 575], "10714479": [67, 105, 575], "_static_relu": 67, "static_relu": 67, "_static_sigmoid": 67, "static_sigmoid": 67, "2689414": [67, 107, 108, 575], "7310586": [67, 107, 108, 575], "88079703": [67, 107, 575], "62245935": [67, 107], "4750208": [67, 107], "_static_softmax": 67, "static_softmax": 67, "72844321": [67, 108], "19852395": [67, 108], "07303288": [67, 108], "_static_softplu": 67, "revert": [67, 109, 575], "static_softplu": 67, "53499615": 67, "42036411": 67, "948": [67, 109], "166": [67, 101, 575], "159": [67, 101, 575, 585, 609], "slice": [68, 75, 138, 307, 341, 350, 423, 444, 447, 502, 503, 505, 531, 578, 583, 590, 674, 795], "dictionari": [68, 85, 94, 203, 566, 580, 584, 699, 752, 756, 757, 764, 768, 769, 778, 781], "asynchron": [68, 94, 795], "wait": [68, 94, 536, 583, 742, 747, 749, 756, 768], "arriv": [68, 94, 536, 583, 773], "cont_list_join": [68, 94], "limit": [68, 94, 156, 159, 490, 491, 579, 583, 588, 646, 723, 730, 742, 748, 749, 754, 756, 759, 761, 768, 770, 773, 778, 781, 794, 795, 796], "whitespac": [68, 94], "indent": [68, 94, 778], "newlin": [68, 94, 760], "termin": [68, 94, 748, 749, 755, 762, 775, 778], "rebuild": [68, 94], "constructor": [68, 94, 486, 583, 721, 729, 757, 758, 760, 777], "kept": [68, 94, 589, 662, 663, 749, 767, 771], "encount": [68, 94, 724, 745, 747, 757, 761, 770], "node": [68, 75, 94, 488, 498, 544, 590, 675, 676, 723, 732, 754, 755, 768, 786, 789, 790, 796], "instruct": [68, 94, 742, 747, 748, 751, 761, 762, 769, 770, 782, 793, 796, 799, 801], "alphabet": [68, 94], "__setitem__": [68, 752, 755, 777], "_cont_at_key_chains_input_as_dict": 68, "current_chain": 68, "ignore_key_error": 68, "_cont_at_key_chains_input_as_seq": 68, "_cont_call_static_method_with_flexible_arg": 68, "static_method": 68, "kw": 68, "self_idx": 68, "_cont_concat_unifi": 68, "_cont_get_dev": 68, "_cont_get_shap": 68, "properti": [68, 91, 92, 93, 97, 726, 728, 751, 755, 764, 769, 770, 777, 778, 779, 801], "_cont_ivi": 68, "_cont_mean_unifi": 68, "_1": 68, "_cont_prune_key_chains_input_as_dict": 68, "return_cont": 68, "_cont_prune_key_chains_input_as_seq": 68, "_cont_slice_kei": 68, "key_slic": 68, "_cont_sum_unifi": 68, "_get_queue_item": 68, "cont_all_fals": 68, "assert_is_bool": 68, "cont_all_key_chain": 68, "include_empti": 68, "cont_all_tru": [68, 755, 778], "cont_as_bool": 68, "cont_assert_contains_sub_contain": 68, "sub_cont": 68, "screen": [68, 747, 748, 778], "cont_assert_contains_sub_structur": 68, "check_shap": [68, 730], "cont_assert_ident": 68, "check_typ": 68, "same_arrai": [68, 778], "arrays_equ": 68, "cont_assert_identical_structur": 68, "assert_and_assign": 68, "strucutr": 68, "congruent": 68, "cont_at_key_chain": 68, "ignore_non": 68, "cont_at_kei": 68, "substr": 68, "cont_combin": 68, "duplic": [68, 590, 667, 753, 760, 765, 766, 769, 779, 801], "configur": [68, 203, 580, 590, 678, 748, 749, 754, 756, 757, 762], "container_rightmost": 68, "cont_common_key_chain": 68, "cont_config": 68, "cont_contains_sub_contain": 68, "cont_contains_sub_structur": 68, "cont_copi": [68, 778], "cont_create_if_abs": 68, "noth": [68, 773, 801], "cont_cutoff_at_depth": 68, "depth_cutoff": 68, "summari": [68, 160, 492, 507, 579, 583, 748, 749, 770], "cont_cutoff_at_height": 68, "height_cutoff": 68, "cont_deep_copi": [68, 778, 789], "cont_dev": 68, "belong": [68, 747, 751, 779], "cont_dev_str": 68, "cont_diff": [68, 778], "diff_kei": 68, "detect_key_diff": 68, "detect_value_diff": 68, "detect_shape_diff": 68, "among": [68, 755, 756, 770, 773, 787, 795], "flag": [68, 187, 359, 473, 580, 585, 611, 727, 749, 757, 758, 767, 768, 769, 770, 789, 790], "container0": 68, "cont_duplicate_array_keychain": 68, "cont_find_sub_contain": 68, "sub_cont_to_find": 68, "exsit": 68, "cont_find_sub_structur": 68, "sub_struc_to_find": 68, "cont_flatten_key_chain": [68, 778], "above_height": [68, 778], "below_depth": [68, 778], "cont_format_key_chain": 68, "format_fn": 68, "cont_from_disk_as_hdf5": [68, 778], "h5_obj_or_filepath": 68, "slice_obj": 68, "disk": [68, 726, 778, 794], "h5py": 68, "filepath": [68, 597, 716, 717, 749, 751], "cont_from_disk_as_json": [68, 778], "json_filepath": 68, "cont_from_disk_as_pickl": [68, 778], "pickle_filepath": 68, "cont_from_flat_list": 68, "flat_list": 68, "hierarchi": [68, 747, 778, 791, 801], "cont_handle_inplac": 68, "prime": [68, 757], "overwritten": [68, 752, 753], "cont_has_kei": 68, "query_kei": 68, "somewher": [68, 756], "cont_has_key_chain": 68, "cont_ident": [68, 778], "cont_identical_array_shap": 68, "cont_identical_config": 68, "cont_identical_structur": 68, "cont_if_exist": 68, "cont_inplace_upd": 68, "cont_ivi": 68, "cont_key_chains_contain": 68, "sub_str": 68, "cont_list_stack": [68, 778], "cont_load": 68, "cont_map": [68, 755, 778], "func": [68, 91, 204, 338, 346, 489, 563, 566, 567, 569, 574, 580, 583, 584, 590, 678, 747, 751, 752, 759, 761, 766], "cont_map_sub_cont": 68, "include_self": 68, "possibi": 68, "cont_max_depth": 68, "cont_multi_map": 68, "map_nest": 68, "assert_ident": 68, "leftmost": [68, 590, 678], "cont_multi_map_in_funct": 68, "cont_num_arrai": 68, "cont_overwrite_at_key_chain": 68, "target_dict": 68, "return_dict": 68, "cont_prune_empti": 68, "keep_non": 68, "cont_prune_key_chain": 68, "key1": [68, 742, 779], "key2": [68, 742], "key3": 68, "cont_prune_key_from_key_chain": 68, "certain": [68, 118, 129, 130, 578, 748, 749, 751, 757, 764, 770, 773, 781, 782, 789, 790, 799], "cont_prune_kei": 68, "cont_prune_keys_from_key_chain": 68, "cont_reduc": 68, "cont_remove_key_length_limit": 68, "cont_remove_print_limit": 68, "cont_reshape_lik": 68, "leading_shap": 68, "cont_restructur": 68, "keep_orig": 68, "old": [68, 748, 753, 767], "cont_restructure_key_chain": 68, "keychain_map": 68, "cont_sav": 68, "cont_set_at_key_chain": 68, "cont_set_at_kei": 68, "cont_shap": [68, 585, 603], "cont_show": 68, "cont_show_sub_contain": 68, "sub_cont_or_keychain": 68, "cont_size_ordered_arrai": 68, "keychain": [68, 74, 313, 419, 420, 421, 447], "cont_slice_kei": 68, "all_depth": 68, "cont_slice_via_kei": 68, "slice_kei": 68, "cont_sort_by_kei": 68, "cont_structural_diff": 68, "cont_to_dict": 68, "cont_to_disk_as_hdf5": [68, 778], "starting_index": 68, "max_batch_s": 68, "cont_to_disk_as_json": [68, 778], "cont_to_disk_as_pickl": [68, 778], "cont_to_flat_list": 68, "cont_to_iter": [68, 755], "leaf_keys_onli": 68, "cont_to_iterator_kei": 68, "cont_to_iterator_valu": 68, "cont_to_json": 68, "cont_to_nested_list": 68, "cont_to_raw": 68, "cont_trim_kei": 68, "trim": 68, "cont_try_kc": 68, "cont_unifi": 68, "concatten": [68, 204, 580], "cont_unstack_cont": 68, "dim_siz": 68, "cont_update_config": 68, "cont_with_default_key_color": 68, "cont_with_entries_as_list": 68, "cont_with_ivy_backend": 68, "ivy_backend": [68, 769], "cont_with_key_length_limit": [68, 778], "cont_with_print_ind": [68, 778], "cont_with_print_limit": [68, 778], "cont_with_print_line_spac": 68, "h5_file_s": 68, "shuffle_h5_fil": 68, "split_cont": 68, "_is_json": 68, "_repr": 68, "_containerwithconvers": [69, 94], "_static_to_ivi": 69, "_static_to_n": 69, "_containerwithcr": [70, 94], "_static_arang": 70, "_static_asarrai": 70, "_static_copy_arrai": 70, "_static_empti": 70, "_static_empty_lik": 70, "_static_ey": 70, "n_row": [70, 74, 124, 138, 307, 341, 348, 402, 578], "n_col": [70, 74, 124, 138, 307, 341, 578], "_static_from_dlpack": 70, "_static_ful": 70, "_static_full_lik": 70, "static_full_lik": 70, "2324": [70, 128, 578], "234": [70, 73, 128, 150, 233, 284, 578, 579, 581, 585, 609], "123": [70, 71, 128, 159, 498, 578, 583, 770], "_static_linspac": 70, "_static_logspac": 70, "static_logspac": 70, "15443469": [70, 130], "64158883": [70, 130], "_static_meshgrid": 70, "_static_native_arrai": 70, "_static_one_hot": 70, "static_one_hot": 70, "_static_on": 70, "_static_ones_lik": 70, "_static_tril": 70, "_static_triu": 70, "_static_zero": 70, "_static_zeros_lik": 70, "frombuff": [70, 578], "expos": [70, 126, 492, 578, 583, 742, 756, 775, 779, 785], "x00": [70, 126, 578], "xf0": [70, 126, 578], "x01": [70, 126, 578], "x02": [70, 126, 578], "x03": [70, 126, 578], "x04": [70, 126, 578], "x05": [70, 126], "5443469": [70, 130, 578], "static_frombuff": 70, "static_triu_indic": 70, "triu_indic": [70, 578], "_containerwithdatatyp": [71, 94], "_static_astyp": 71, "718": [71, 73, 143, 260, 579], "618": [71, 73, 143, 260, 579], "static_astyp": 71, "_static_broadcast_arrai": 71, "static_broadcast_arrai": 71, "_static_broadcast_to": 71, "static_broadcast_to": 71, "_static_can_cast": 71, "from_": [71, 146, 579], "static_can_cast": 71, "_static_default_complex_dtyp": 71, "complex_dtyp": [71, 149, 172, 579], "_static_default_float_dtyp": 71, "float_dtyp": [71, 151, 174, 579], "_static_dtyp": 71, "_static_finfo": 71, "inquir": [71, 156, 159], "static_finfo": 71, "55040e": [71, 156, 579], "7976931348623157e": [71, 156, 579], "308": [71, 156, 579, 770], "_static_function_supported_dtyp": 71, "_static_function_unsupported_dtyp": 71, "_static_iinfo": 71, "1800": [71, 159, 579], "1084": 71, "40000": 71, "static_iinfo": 71, "2147483648": [71, 159, 579], "2147483647": [71, 159, 579], "_static_is_bool_dtyp": 71, "dtype_in": [71, 141, 142, 155, 161, 162, 163, 164, 165, 166, 167, 168, 183, 579], "_static_is_complex_dtyp": 71, "is_complex_dtyp": [71, 579, 771], "roughli": [71, 748, 751, 798], "static_is_complex_dtyp": 71, "complex64": [71, 149, 163, 172, 178, 244, 271, 292, 339, 579, 581, 586, 632, 634, 635, 757], "_static_is_float_dtyp": 71, "static_is_float_dtyp": 71, "_static_is_int_dtyp": 71, "_static_is_uint_dtyp": 71, "_static_result_typ": 71, "static_result_typ": 71, "broadcats": [71, 144], "_containerwithdevic": [72, 94], "_static_dev": 72, "static_dev": 72, "_static_to_devic": 72, "static_to_devic": 72, "contaion": [72, 188], "_containerwithelementwis": [73, 94], "_static_ab": 73, "static_ab": 73, "_static_aco": 73, "static_aco": 73, "_static_acosh": 73, "static_acosh": 73, "_static_add": 73, "static_add": [73, 98], "_static_asin": 73, "static_asin": 73, "524": [73, 216, 581], "412": [73, 78, 216, 581], "201": [73, 74, 216, 368, 581], "_static_asinh": 73, "static_asinh": 73, "_static_atan": 73, "static_atan": 73, "_static_atan2": 73, "static_atan2": 73, "915": [73, 219, 581], "983": [73, 219, 581], "978": [73, 219, 581], "696": [73, 83, 219, 581, 687], "993": [73, 219, 581], "_static_atanh": 73, "static_atanh": 73, "_static_bitwise_and": 73, "static_bitwise_and": 73, "_static_bitwise_invert": 73, "static_bitwise_invert": 73, "_static_bitwise_left_shift": 73, "_static_bitwise_or": 73, "static_bitwise_or": 73, "_static_bitwise_right_shift": 73, "static_bitwise_right_shift": 73, "_static_bitwise_xor": 73, "static_bitwise_xor": 73, "_static_ceil": 73, "static_ceil": 73, "_static_co": 73, "static_co": 73, "_static_cosh": 73, "static_cosh": 73, "_static_deg2rad": 73, "static_deg2rad": 73, "0262": [73, 230, 270, 581], "873": [73, 230, 270, 581], "_static_divid": 73, "static_divid": 73, "_static_equ": 73, "static_equ": 73, "_static_erf": 73, "static_erf": 73, "27632612": [73, 233], "934008": [73, 233], "99999928": [73, 233], "91903949": [73, 233], "_static_exp": 73, "static_exp": 73, "59814835": [73, 234, 581], "4131622": [73, 234], "_static_expm1": 73, "thefunct": [73, 233], "areal": 73, "static_expm1": 73, "71828175": [73, 234, 581], "38905621": [73, 234, 581], "59815216": 73, "_static_floor": 73, "static_floor": 73, "_static_floor_divid": 73, "static_floor_divid": 73, "_static_great": 73, "static_great": 73, "_static_greater_equ": 73, "static_greater_equ": 73, "_static_isfinit": 73, "999999999999": [73, 245, 581], "static_isfinit": 73, "_static_isinf": 73, "static_isinf": 73, "_static_isnan": 73, "static_isnan": 73, "_static_isr": 73, "0j": [73, 74, 134, 135, 212, 213, 214, 217, 220, 229, 234, 236, 248, 252, 254, 271, 275, 277, 278, 282, 314, 344, 578, 581, 586, 632], "23j": [73, 74], "9j": [73, 74], "static_isr": 73, "_static_lcm": 73, "1080": [73, 249], "1550": [73, 249], "130": [73, 249], "_static_less": 73, "static_less": 73, "_static_less_equ": 73, "static_less_equ": 73, "_static_log": 73, "static_log": 73, "_static_log10": 73, "static_log10": 73, "898": [73, 253, 581], "0414": [73, 253, 581], "_static_log1p": 73, "static_log1p": 73, "_static_log2": 73, "_static_logaddexp": 73, "static_logaddexp": 73, "_static_logical_and": 73, "static_logical_and": 73, "_static_logical_not": 73, "static_logical_not": 73, "_static_logical_or": 73, "static_logical_or": 73, "_static_logical_xor": 73, "static_logical_xor": 73, "_static_maximum": 73, "static_maximum": 73, "_static_minimum": 73, "static_minimum": 73, "_static_multipli": 73, "static_multipli": 73, "_static_neg": 73, "static_neg": 73, "_static_not_equ": 73, "static_not_equ": 73, "_static_posit": 73, "static_posit": 73, "_static_pow": 73, "static_pow": 73, "_static_rad2deg": 73, "static_rad2deg": 73, "5160": 73, "10300": [73, 270, 581], "15500": 73, "20600": 73, "2860": [73, 270], "_static_reciproc": 73, "recirpoc": [73, 272], "static_reciproc": 73, "_static_remaind": 73, "static_remaind": 73, "_static_round": 73, "thevfunct": 73, "300": [73, 75, 78, 274, 347, 370, 371, 503, 527, 581, 583, 586, 622, 770], "527": [73, 274, 581], "static_round": 73, "301": [73, 274, 581], "_static_sign": 73, "static_sign": 73, "_static_sin": 73, "static_sin": 73, "757": [73, 276, 581], "959": [73, 236, 276, 581], "279": [73, 276, 347, 368, 378, 490, 581, 583], "_static_sinh": 73, "static_sinh": 73, "835": [73, 277], "347": [73, 277], "721": [73, 277], "_static_sqrt": 73, "static_sqrt": 73, "_static_squar": 73, "static_squar": 73, "_static_subtract": 73, "static_subtract": 73, "_static_tan": 73, "static_tan": 73, "_static_tanh": 73, "static_tanh": 73, "995": [73, 282, 581], "9999": 73, "_static_trapz": 73, "static_trapz": 73, "_static_trunc": 73, "static_trunc": 73, "_static_trunc_divid": 73, "75j": [73, 215, 244], "01317055": [73, 215], "05634501": [73, 215], "115": [73, 215, 270, 581], "3461759": [73, 215], "524111": [73, 215], "644": [73, 216, 581, 779], "305": [73, 78, 216, 581], "351": [73, 230, 270], "00613": [73, 230], "0154": [73, 230], "403": [73, 234], "428772": [73, 234], "649": [73, 236], "220": [73, 236], "865": [73, 236], "metho": [73, 243, 255], "7j": [73, 74, 248, 271, 314, 344, 581], "956": [73, 254], "08746284": [73, 257], "32192809": [73, 257], "nuner": [73, 264], "413": [73, 270], "335": [73, 74, 271, 314], "345j": [73, 74, 271, 314], "static_angl": 73, "static_exp2": 73, "static_fmin": 73, "static_gcd": 73, "static_imag": 73, "static_logaddexp2": 73, "static_nan_to_num": 73, "static_r": 73, "_containerwithactivationexperiment": [74, 94], "_static_elu": 74, "static_elu": 74, "_static_silu": 74, "static_silu": 74, "27777028": [74, 293], "23947507": [74, 293], "0900332": [74, 293], "contan": [74, 287], "19722462": [74, 287], "84729779": [74, 287], "31326163": [74, 288], "46328258": [74, 288], "51301527": [74, 288], "79813886": [74, 288], "22856998": [74, 291], "42028043": [74, 291], "31868932": [74, 291], "static_logit": 74, "static_logsigmoid": 74, "34115386": 74, "64439666": 74, "24115384": 74, "55435526": 74, "07888974": 74, "00741899": 74, "26328245": 74, "00012302": 74, "static_prelu": 74, "static_relu6": 74, "static_selu": 74, "static_thresholded_relu": 74, "_containerwithconversionexperiment": [74, 94], "_containerwithcreationexperiment": [74, 94], "_static_trilu": 74, "blackman": [74, 295, 341], "00770143e": [74, 295], "49229857e": [74, 295], "hamming_window": [74, 341], "coeffici": [74, 297, 341, 586, 633], "ham": [74, 297, 341], "4180": [74, 297], "8180": [74, 297], "hann_window": [74, 341], "hann": [74, 298, 341], "7500": [74, 298], "3455": [74, 298], "9045": [74, 298], "kaiser_bessel_derived_window": [74, 341], "suitabl": [74, 300, 301, 341, 595, 702, 748, 749, 755, 771, 795], "spectral": [74, 300, 301, 341], "analysi": [74, 300, 301, 341, 795, 796], "kaiser": [74, 295, 300, 301, 341], "70710677": [74, 300, 457, 458], "18493208": [74, 300, 341], "9827513": [74, 300, 341], "kaiser_window": [74, 341], "static_kaiser_window": [74, 301], "2049": [74, 301], "8712": [74, 301], "0367": [74, 301, 341], "7753": [74, 301], "static_blackman_window": 74, "window_length": [74, 295, 297, 300, 301, 311, 341], "static_eye_lik": 74, "static_hamming_window": 74, "static_hann_window": 74, "static_hann": 74, "static_kaiser_bessel_derived_window": 74, "static_mel_weight_matrix": 74, "static_tril_indic": 74, "static_unsorted_segment_min": 74, "static_unsorted_segment_sum": 74, "static_vorbis_window": 74, "vorbis_window": [74, 341], "vorbi": [74, 311, 341], "38268343": [74, 311], "92387953": [74, 311], "14943586": [74, 311, 341], "51644717": [74, 311], "85631905": [74, 311], "98877142": [74, 311], "tril_indic": [74, 341], "_containerwithdata_typeexperiment": [74, 94], "_containerwithdeviceexperiment": [74, 94], "_containerwithelementwiseexperiment": [74, 94], "0003": [74, 312, 586, 622], "0006": [74, 312, 336], "2345j": [74, 314], "5772": [74, 318], "9635": [74, 318], "4228": [74, 318], "9228": [74, 318], "mantissa": [74, 322, 344, 757], "frist": [74, 323, 344], "coord": [74, 323], "6055": [74, 324], "160": [74, 326], "10240": [74, 326], "60000038": [74, 327, 344], "0707": [74, 333, 344], "0579": [74, 333, 344], "static_allclos": 74, "static_binar": 74, "static_conj": 74, "static_copysign": 74, "static_count_nonzero": 74, "static_diff": 74, "static_digamma": 74, "57721537": 74, "96351004": 74, "static_fix": 74, "static_float_pow": 74, "static_fmax": 74, "static_fmod": 74, "static_frexp": 74, "static_gradi": 74, "static_hypot": 74, "static_isclos": 74, "static_ldexp": 74, "static_lerp": 74, "90000057": [74, 327, 344], "80000019": [74, 327, 344], "70000076": [74, 327, 344], "55000019": [74, 327, 344], "05000019": [74, 327, 344], "static_modf": 74, "static_nansum": 74, "static_nextaft": 74, "static_signbit": 74, "static_sinc": 74, "636": 74, "090": 74, "070": 74, "057": 74, "static_sparsify_tensor": 74, "static_xlogi": 74, "static_zeta": 74, "0244": [74, 336], "_containerwithgeneralexperiment": [74, 94], "_static_reduc": 74, "static_reduc": 74, "_containerwithgradientsexperiment": [74, 94], "_containerwithimageexperiment": [74, 94], "_containerwithlayersexperiment": [74, 94], "_static_fft": 74, "static_fft": 74, "673": [74, 368], "0507": [74, 368], "79711437": [74, 347, 368, 378], "94867325": [74, 347, 368, 378], "74089146": [74, 347, 368, 378], "25980937": [74, 347, 368, 378], "64958102": [74, 347, 368, 378], "2442648": [74, 347, 368, 378], "247306": [74, 380], "908323j": [74, 380], "494955": [74, 380], "90395j": [74, 380], "static_adaptive_avg_pool1d": 74, "static_adaptive_avg_pool2d": 74, "static_adaptive_max_pool2d": 74, "static_avg_pool1d": 74, "static_avg_pool2d": 74, "static_avg_pool3d": 74, "static_dct": 74, "182": 74, "253": [74, 277, 581], "515": [74, 592, 687], "467": 74, "static_dft": 74, "static_embed": 74, "static_idct": 74, "93732834": [74, 347, 368], "75048852": [74, 347, 368], "29723358": [74, 347, 378], "6950531": 74, "93914509": 74, "88008738": 74, "18951225": 74, "06697273": [74, 347, 378], "57439804": 74, "68861485": [74, 347, 378], "41308832": [74, 347, 378], "0700836": 74, "2449036": 74, "6711426": 74, "514": 74, "501709": 74, "4924011": 74, "static_ifft": 74, "static_ifftn": 74, "static_interpol": 74, "static_max_pool1d": 74, "static_max_pool2d": 74, "max_pool2dd": 74, "static_max_pool3d": 74, "static_rfftn": 74, "_containerwithlinearalgebraexperiment": [74, 94], "933034": [74, 348, 392], "eigenvealu": [74, 395, 618], "xx": [74, 395, 397, 618], "37228107": [74, 395, 618], "3722816": [74, 395, 618], "8245648": [74, 395, 618], "41597357": [74, 395, 618], "56576747": [74, 395, 618], "9093767": [74, 395, 618], "56155": [74, 396], "82842": [74, 396], "450": [74, 401], "static_adjoint": 74, "static_cond": 74, "static_diagflat": 74, "static_dot": 74, "static_eig": 74, "static_eigh_tridiagon": 74, "static_eigv": 74, "static_initialize_tuck": 74, "static_kron": 74, "kroneck": [74, 348, 400, 401], "static_make_svd_non_neg": 74, "static_matrix_exp": 74, "static_mode_dot": 74, "static_multi_dot": 74, "static_multi_mode_dot": 74, "static_partial_tuck": 74, "static_svd_flip": 74, "static_truncated_svd": 74, "static_tuck": 74, "_containerwithlossesexperiment": [74, 94], "_static_huber_loss": 74, "static_huber_loss": 74, "0575": [74, 412], "_static_l1_loss": 74, "static_l1_loss": 74, "_static_smooth_l1_loss": 74, "static_smooth_l1_loss": 74, "_static_soft_margin_loss": 74, "_containerwithmanipulationexperiment": [74, 94], "_static_fill_diagon": 74, "_static_unique_consecut": 74, "atleast": [74, 350, 419, 420, 421, 758], "ary1": [74, 350, 419, 420, 421], "ary2": [74, 350, 419, 420, 421], "broadcast_shap": [74, 97, 350], "static_concat_from_sequ": [74, 424], "30192195": [74, 436], "static_as_strid": 74, "static_atleast_1d": 74, "static_atleast_2d": 74, "static_atleast_3d": 74, "static_broadcast_shap": 74, "static_dsplit": 74, "static_dstack": 74, "static_expand": 74, "static_flatten": 74, "static_fliplr": 74, "static_flipud": 74, "static_fold": 74, "static_heavisid": 74, "static_hsplit": 74, "static_hstack": 74, "static_i0": 74, "static_matric": 74, "static_moveaxi": 74, "static_pad": 74, "static_partial_fold": 74, "static_partial_tensor_to_vec": 74, "static_partial_unfold": 74, "static_partial_vec_to_tensor": 74, "static_rot90": 74, "static_soft_threshold": 74, "static_take_along_axi": 74, "static_top_k": 74, "static_unfold": 74, "static_vsplit": 74, "static_vstack": 74, "_containerwithnormsexperiment": [74, 94], "16903085": [74, 457, 458], "50709254": [74, 457, 458], "84515423": [74, 457, 458], "44183609": [74, 457, 458], "56807494": [74, 457, 458], "69431382": [74, 457, 458], "static_batch_norm": 74, "static_group_norm": 74, "static_instance_norm": 74, "static_l1_norm": 74, "static_l2_norm": 74, "static_lp_norm": 74, "12500000": 74, "37500000": 74, "62500000": 74, "27500000": 74, "35000000": 74, "42500000": 74, "0000000": 74, "5000000": 74, "2500000": 74, "_containerwithrandomexperiment": [74, 94], "43643127": [74, 461], "32325703": [74, 461], "24031169": [74, 461], "34251311": [74, 461], "31692529": [74, 461], "3405616": [74, 461], "5319725": [74, 461], "22458365": [74, 461], "24344385": [74, 461], "26588406": [74, 461], "61075421": [74, 461], "12336174": [74, 461], "51142915": [74, 461], "25041268": [74, 461], "23815817": [74, 461], "64042903": [74, 461], "25763214": [74, 461], "10193883": [74, 461], "31624692": [74, 461], "46567987": [74, 461], "21807321": [74, 461], "37677699": [74, 461], "39914594": [74, 461], "22407707": [74, 461], "static_bernoulli": 74, "static_beta": 74, "static_dirichlet": 74, "static_gamma": 74, "static_poisson": 74, "_containerwithsearchingexperiment": [74, 94], "static_unravel_index": 74, "_containerwithsetexperiment": [74, 94], "_containerwithsortingexperiment": [74, 94], "invert_permut": [74, 357], "static_invert_permut": 74, "static_lexsort": [74, 86], "_containerwithstatisticalexperiment": [74, 94], "_static_cummax": 74, "static_cummax": 74, "_static_cummin": 74, "static_cummin": 74, "func_nam": [74, 476, 747, 759, 760, 764, 768], "static_bincount": 74, "static_corrcoef": 74, "static_cov": [74, 359, 473], "static_histogram": 74, "static_igamma": 74, "static_median": 74, "static_nanmean": 74, "static_nanmedian": 74, "static_nanprod": 74, "static_quantil": 74, "_containerwithutilityexperiment": [74, 94], "static_optional_get_el": 74, "_containerwithgener": [75, 94], "_static_all_equ": 75, "static_all_equ": 75, "_static_array_equ": 75, "a0": [75, 487], "static_array_equ": 75, "_static_assert_supports_inplac": 75, "_static_clip_matrix_norm": 75, "static_clip_matrix_norm": 75, "849": [75, 490, 491, 583], "_static_clip_vector_norm": 75, "static_clip_vector_norm": 75, "_static_einops_rearrang": 75, "static_einops_rearrang": 75, "_static_einops_reduc": 75, "static_einops_reduc": 75, "29333329": [75, 496, 583], "53000069": [75, 496, 583], "39666676": [75, 496, 583], "20666695": [75, 496, 583], "_static_einops_repeat": 75, "static_einops_repeat": 75, "_static_exist": 75, "detal": [75, 498], "_static_fourier_encod": 75, "static_fourier_encod": 75, "classivi": [75, 588, 594, 655, 697], "89858720e": 75, "79717439e": 75, "_static_gath": 75, "static_gath": 75, "_static_gather_nd": 75, "400": [75, 78, 347, 370, 371, 503, 527, 583, 586, 622], "static_gather_nd": 75, "_static_get_num_dim": 75, "static_get_num_dim": 75, "_static_has_nan": 75, "leafwis": 75, "static_has_nan": 75, "_static_inplace_decr": 75, "_static_inplace_incr": 75, "_static_inplace_upd": 75, "_static_is_arrai": 75, "static_is_arrai": 75, "_static_is_ivy_arrai": 75, "static_is_ivy_arrai": 75, "_static_is_native_arrai": 75, "static_is_native_arrai": 75, "_static_scatter_flat": 75, "_static_scatter_nd": 75, "static_scatter_nd": 75, "_static_stable_divid": 75, "22222222": 75, "11111111": 75, "857": [75, 541, 583], "444": 75, "_static_stable_pow": 75, "00012": [75, 542, 583], "00016": [75, 76, 542, 570, 583, 584], "00001": [75, 542, 583], "00032": [75, 542], "00256": [75, 542], "1679638": [75, 542], "395": [75, 542], "16777383": [75, 542], "_static_supports_inplace_upd": 75, "_static_to_list": 75, "static_to_list": 75, "_static_to_numpi": 75, "static_to_numpi": 75, "_static_to_scalar": 75, "static_to_scalar": 75, "_static_value_is_nan": 75, "452": 75, "static_value_is_nan": 75, "833": [75, 491], "items": [75, 93, 583], "static_isin": 75, "static_items": 75, "complex128": [75, 149, 150, 163, 172, 178, 292, 339, 521, 579, 583, 586, 619, 620, 625, 641, 745, 757], "static_strid": 75, "425": [75, 562], "_containerwithgradi": [76, 94], "_static_stop_gradi": 76, "static_stop_gradi": 76, "976": [76, 282, 564, 581, 584], "49e": [76, 564, 584], "74e": [76, 564, 584], "95e": [76, 564, 584], "024": [76, 564, 584], "096": [76, 564, 584], "216": [76, 79, 564, 584, 639], "626": [76, 564, 584], "en": [76, 564, 565, 584, 756], "wikipedia": [76, 564, 565, 584], "wiki": [76, 564, 565, 584], "stochastic_gradient_desc": [76, 564, 565, 584], "01099": [76, 565], "01003": [76, 565, 584], "01015": [76, 565, 584], "99936122": [76, 565, 584], "99936116": [76, 565, 584], "99936128": [76, 565, 584], "99936104": [76, 565, 584], "w_new": [76, 568, 584], "708": [76, 570, 584], "445": [76, 570, 584], "6e": [76, 570, 584], "00036": [76, 570, 584], "00049": [76, 570, 584], "layerwis": [76, 571, 584], "_containerwithimag": [77, 94], "_containerwithlay": [78, 94], "_static_conv1d": 78, "static_conv1d": 78, "_static_conv1d_transpos": 78, "static_conv1d_transpos": 78, "112": [78, 586, 596, 600, 629, 706], "_static_conv2d": 78, "ey": [78, 578, 585, 601, 607, 773, 780], "static_conv2d": 78, "_static_conv2d_transpos": 78, "static_conv2d_transpos": 78, "_static_conv3d": 78, "fdfh": [78, 603], "static_conv3d": 78, "_static_conv3d_transpos": 78, "static_conv3d_transpos": 78, "_static_depthwise_conv2d": 78, "inp": [78, 585, 607], "static_depthwise_conv2d": 78, "_static_dropout": 78, "static_dropout": 78, "_static_dropout1d": 78, "static_dropout1d": 78, "_static_dropout2d": 78, "_static_dropout3d": 78, "_static_linear": 78, "278": [78, 585, 608, 609], "static_linear": 78, "195": 78, "_static_lstm_upd": 78, "_static_multi_head_attent": 78, "_static_reduce_window": 78, "_static_scaled_dot_product_attent": 78, "static_scaled_dot_product_attent": 78, "39999962": [78, 585, 608, 609], "19999695": [78, 609], "11600018": [78, 609], "88399887": [78, 609], "196": [78, 585, 609], "306": [78, 585, 609], "19999981": [78, 585, 608, 612], "59249449": [78, 585, 612], "68226194": [78, 585, 612], "4000001": [78, 585, 608, 612], "19603825": [78, 585, 612], "9960382": [78, 585, 612], "26894283": [78, 585, 612], "40236187": [78, 585, 612], "39999437": [78, 585, 612], "59999037": [78, 585, 612], "35046196": [78, 585, 612], "54282808": [78, 585, 612], "39989519": [78, 585, 612], "5998764": [78, 585, 612], "_containerwithlinearalgebra": [79, 94], "_static_choleski": 79, "static_choleski": 79, "577": [79, 586, 613], "707": [79, 586, 613], "static_rol": [79, 81], "_static_cross": 79, "static_cross": 79, "_static_det": 79, "_static_diag": 79, "_static_diagon": 79, "static_diagon": 79, "_static_eigh": 79, "_static_eigvalsh": 79, "static_eigvalsh": 79, "51572949": [79, 586, 620], "17091519": [79, 586, 620], "3448143": [79, 586, 620], "88178420e": [79, 586, 620], "35898387e": [79, 586, 620], "46410179e": [79, 586, 620], "_static_inn": 79, "static_inn": 79, "_static_inv": 79, "static_inv": 79, "_static_matmul": 79, "matul": 79, "static_matmul": 79, "_static_matrix_norm": 79, "deimens": 79, "static_matrix_norm": 79, "_static_matrix_pow": 79, "_static_matrix_rank": 79, "static_matrix_rank": 79, "_static_matrix_transpos": 79, "static_matrix_transpos": 79, "_static_out": 79, "n1": [79, 131, 578], "n2": [79, 131, 578], "static_out": [79, 629], "_static_pinv": 79, "static_pinv": 79, "0426": 79, "0964": 79, "0605": 79, "1368": 79, "_static_qr": 79, "_static_slogdet": 79, "static_slogdet": 79, "6931472": 79, "0986123": 79, "_static_solv": 79, "_static_svd": 79, "static_svd": 79, "au": 79, "aS": 79, "avh": 79, "bu": [79, 786], "bvh": 79, "_static_svdv": 79, "_static_tensordot": 79, "_static_tensorsolv": 79, "_static_trac": 79, "static_trac": 79, "_static_vand": 79, "static_vand": 79, "343": [79, 274, 581, 639], "729": [79, 639, 779], "_static_vecdot": 79, "_static_vector_norm": 79, "static_vector_norm": 79, "77359247": [79, 641], "_static_vector_to_skew_symmetric_matrix": 79, "09861231": [79, 586, 632], "static_general_inner_product": 79, "3475602": [79, 634], "93765765": [79, 634], "58776021": [79, 634], "10416126": [79, 634], "80644298": [79, 634], "87024701": [79, 634], "48127627": [79, 634], "79101127": [79, 634], "98288572": [79, 634], "68917423": [79, 634], "_containerwithloss": [80, 94], "_static_binary_cross_entropi": 80, "static_binary_cross_entropi": 80, "511": [80, 587, 643, 645], "_static_cross_entropi": 80, "static_cross_entropi": 80, "20397282": 80, "83258148": 80, "60943794": [80, 586, 632], "_static_sparse_cross_entropi": 80, "static_sparse_cross_entropi": 80, "5108256": [80, 644], "609438": [80, 644], "_containerwithmanipul": [81, 94], "_static_clip": 81, "static_clip": 81, "_static_concat": 81, "_static_constant_pad": 81, "static_constant_pad": 81, "_static_expand_dim": 81, "static_expand_dim": 81, "container_axi": [81, 588, 649], "_static_flip": 81, "static_flip": 81, "_static_permute_dim": 81, "static_permute_dim": 81, "_static_repeat": 81, "static_repeat": 81, "_static_reshap": 81, "static_reshap": 81, "_static_rol": 81, "positivclip": 81, "_static_split": 81, "static_split": 81, "_static_squeez": 81, "static_squeez": 81, "_static_stack": 81, "leavv": 81, "static_stack": 81, "_static_swapax": 81, "_static_til": 81, "static_til": 81, "_static_unstack": 81, "static_unstack": 81, "_static_zero_pad": 81, "repreat": [81, 652], "_containerwithnorm": [82, 94], "34198591": [82, 591, 684], "04274819": [82, 591, 684], "29923761": [82, 591, 684], "24053511": [82, 591, 684], "62221265": [82, 684], "20277636": [82, 684], "41943574": [82, 684], "83710337": [82, 684], "_containerwithrandom": [83, 94], "_static_multinomi": 83, "_static_randint": 83, "static_randint": 83, "_static_random_norm": 83, "static_random_norm": 83, "651": 83, "_static_random_uniform": 83, "static_random_uniform": 83, "481": 83, "0999": 83, "_static_shuffl": 83, "static_shuffl": 83, "431": [83, 687], "274": [83, 687], "_containerwithsearch": [84, 94], "_static_argmax": 84, "static_argmax": 84, "_static_argmin": 84, "static_argmin": 84, "_static_argwher": 84, "static_argwher": 84, "_static_nonzero": 84, "_static_wher": 84, "static_wher": 84, "_containerwithset": [85, 94], "_static_unique_al": 85, "static_unique_al": 85, "_static_unique_count": 85, "static_unique_count": 85, "_static_unique_invers": 85, "static_unique_invers": 85, "_static_unique_valu": 85, "_containerwithsort": [86, 94], "_static_argsort": 86, "static_argsort": 86, "_static_searchsort": 86, "_static_sort": 86, "static_sort": 86, "static_msort": 86, "_containerwithstatist": [87, 94], "_static_cumprod": 87, "static_cumprod": 87, "_static_cumsum": 87, "static_cumsum": 87, "_static_prod": 87, "static_prod": 87, "11000001": [87, 710], "23100001": [87, 710], "30800003": [87, 596, 710], "_static_sum": 87, "_static_var": 87, "static_var": 87, "12666667": [87, 596, 713], "11555555": [87, 596, 713], "rtype": [87, 706, 736], "respectv": [87, 711], "81649649": [87, 711], "94280904": [87, 711], "509902": [87, 596, 711], "2472192": [87, 711], "44948983": [87, 711], "41421354": [87, 711], "contian": [87, 713], "6666667": [87, 713], "_containerwithutil": [88, 94], "_static_al": 88, "static_al": 88, "_static_ani": 88, "static_ani": 88, "add_ivy_container_instance_method": 89, "containerexampl": 89, "factorized_tensor": [90, 91, 92], "factorizedtensor": [90, 91, 92], "matrix_or_tensor": 90, "to_tensor": [90, 91, 92], "to_unfold": [90, 91, 92], "to_vec": [90, 91, 92], "cp_tensor": 91, "cptensor": [91, 305, 341], "cp_copi": 91, "cp_flip_sign": 91, "s_i": 91, "normalisation_weight": 91, "normalised_factor": 91, "cp_lstsq_grad": 91, "return_loss": 91, "nabla": 91, "mathcal": 91, "mathbf": 91, "factor_matric": 91, "cp_gradient": 91, "quantiti": 91, "cp_mode_dot": 91, "keep_dim": [91, 92], "cp_multi_mode_dot": 91, "cp_n_param": 91, "tensor_shap": [91, 92], "n_param": [91, 92], "cp_norm": 91, "cp_to_tensor": 91, "khatria": 91, "rao": [91, 348, 400], "khatri": [91, 348, 400], "cp_normal": 91, "normalis": 91, "u_1": 91, "u_n": 91, "v_1": 91, "v_n": 91, "v_k": 91, "u_k": 91, "absorb": 91, "refold": [91, 350, 432, 443], "cp_to_unfold": 91, "ie": 91, "s_u_i": 91, "exploit": [91, 798], "khatri_rao": [91, 348], "cp_to_vec": 91, "ravel": [91, 773], "unfolding_dot_khatri_rao": 91, "mttkrp": 91, "validate_cp_rank": 91, "percent": 91, "validate_cp_tensor": 91, "tucker_tensor": 92, "tucker_copi": 92, "tucker_mode_dot": [92, 802], "tucker_n_param": 92, "tucker_norm": 92, "tucker_to_tensor": 92, "skip_factor": 92, "transpose_factor": 92, "tucker_to_unfold": 92, "tucker_to_vec": 92, "validate_tucker_rank": 92, "fixed_mod": 92, "validate_tucker_tensor": 92, "_bisection_root_find": 92, "fun": [92, 563, 583, 590, 676, 756], "max_it": 92, "__abs__": [93, 94], "__add__": [93, 94, 752, 755, 759, 760, 763, 768, 769, 777], "__eq__": [93, 94], "__ge__": [93, 94], "__gt__": [93, 94, 773], "__le__": [93, 94], "__lt__": [93, 94], "__ne__": [93, 94], "__pow__": [93, 94, 777], "69678056": 93, "59876156": 93, "82660675": 93, "__radd__": [93, 94, 759, 760, 768], "__rrshift__": [93, 94], "__rshift__": [93, 94], "__rsub__": [93, 94], "__sub__": [93, 94, 752, 755, 759, 763, 777], "__truediv__": [93, 94, 752, 755, 759], "__xor__": [93, 94], "referenc": [93, 761, 767], "resid": [93, 97, 588, 649, 768, 775, 779], "mt": [93, 777], "hopefulli": [93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 785, 786, 787], "overview": [93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 720, 721, 723, 724, 726, 727, 728, 729, 754, 756, 770, 774], "reach": [93, 94, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 677, 720, 721, 723, 724, 726, 727, 728, 729, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 785, 786, 787, 794, 795], "eq": 94, "ge": 94, "le": 94, "ne": 94, "75979435": 94, "52153397": 94, "13532257": 94, "rshift": 94, "truediv": 94, "66666669": [94, 353, 458, 566, 584], "nested_arrai": [96, 97, 98, 754], "nestedarrai": 96, "nested_rank": [96, 97, 98], "inner_shap": [96, 97, 98], "nestedarraybas": [96, 97, 98], "classmethod": [96, 97], "from_row_length": 96, "row_length": 96, "from_row_split": 96, "row_split": 96, "ragged_map": 97, "ragged_multi_map": 97, "ragged_arrai": 97, "ragged_multi_map_in_funct": 97, "replace_ivy_arrai": 97, "unbind": 97, "nestedarrayelementwis": 98, "strictli": [103, 106, 109, 238, 575, 581, 763, 767], "behaviour": [103, 106, 265, 575, 581, 746, 749, 750, 751, 752, 755, 757, 758, 760, 761, 763, 764, 765, 767, 768, 770, 771, 777], "24000001": [103, 575], "703": [104, 575], "683": [104, 575], "408": [104, 575], "313": [104, 575], "437": [104, 575], "40337825": [105, 575], "56114835": [105, 575], "20788449": [105, 575], "231": [108, 575], "\u03b2": [109, 575], "66666667": [110, 359, 473, 575], "body_fn": [114, 115, 117, 577], "bodi": [114, 117, 577, 751, 770], "lst": [114, 577], "orelse_fn": [115, 577], "body1": [116, 577], "body2": [116, 577], "test_fn": [117, 577, 742, 790], "repeatedli": [117, 577, 590, 674, 756, 770], "ml_framework": [118, 578], "distanc": [118, 578], "adjac": [118, 578], "nestedsequ": [119, 120, 578], "typevar": [119, 120, 578], "supportsbufferprotocol": [119, 120, 578], "static_copy_arrai": [121, 578], "intdtyp": [124, 135, 140, 152, 163, 168, 175, 181, 292, 339, 578, 579], "interchang": [125, 578, 588, 658], "plu": [126, 578], "x00b": [126, 578], "x00d": [126, 578], "x00e": [126, 578], "66666663": [129, 578], "41588834": [130, 578], "7827941": [130, 578], "6227766": [130, 578], "23413252": [130, 578], "n3": [131, 578], "xv": [131, 578], "yv": [131, 578], "x_nativ": [132, 578, 767], "y_nativ": [132, 578], "z_nativ": [132, 578], "d_type": [134, 578], "col": [138, 307, 341, 578], "primari": [138, 157, 158, 190, 191, 307, 341, 357, 466, 500, 501, 578, 579, 580, 583, 747, 750, 753, 757, 765, 767, 768, 770, 773, 781, 783], "upward": [138, 307, 341, 578], "downward": [138, 307, 341, 578], "2xn": [138, 307, 341, 578], "subarrai": [138, 307, 341, 578], "incompat": [145, 579], "closest": [148, 227, 237, 238, 274, 284, 350, 444, 579, 581, 770, 773], "xtype": [148, 579], "ytype": [148, 579], "native_uint16": [148, 579], "complexdtyp": [149, 163, 172, 579], "set_default_complex_dtyp": [149, 178, 579], "4294": [149, 151, 579], "967346": [149, 151, 579], "set_default_dtyp": [150, 179, 579, 757, 764], "floatdtyp": [151, 174, 579], "set_default_float_dtyp": [151, 160, 172, 180, 579, 757], "int_dtyp": [152, 175, 579], "set_default_int_dtyp": [152, 160, 181, 579, 757], "4294967346": [152, 153, 579], "uint_dtyp": [153, 176, 579], "uint": [153, 168, 176, 182, 579, 757, 769], "uintdtyp": [153, 168, 176, 182, 579], "set_default_uint_dtyp": [153, 160, 182, 579], "native_bool": [155, 579], "followng": [156, 579], "ieee": [156, 214, 231, 236, 254, 264, 273, 278, 281, 576, 579, 581, 786], "754": [156, 214, 231, 236, 254, 264, 273, 278, 281, 576, 579, 581, 786], "smallest_norm": [156, 579], "bfloat16": [157, 579, 757, 768, 770, 771], "unsupport": [158, 191, 501, 579, 580, 583, 748, 768], "encapsul": [159, 579, 756], "314": [159, 271, 314, 344, 579, 581], "9223372036854775808": [159, 579], "9223372036854775807": [159, 579], "65535": [159, 579], "4294967295": [159, 579], "native_uint8": [161, 579], "hashabl": [165, 579], "type1": [169, 579], "type2": [169, 579], "array_api_promot": [169, 170, 579], "unexpect": [170, 238, 579, 581, 757], "default_complex_dtyp": [172, 579], "default_dtype_stack": [173, 179, 579], "unset_default_dtyp": [173, 579], "native_uint64": [173, 579], "default_float_dtyp": [174, 579, 757], "default_int_dtyp": [175, 181, 579, 757], "default_uint_dtyp": [176, 182, 579], "ret1": [177, 579], "ret2": [177, 579], "reset": [178, 179, 180, 181, 182, 208, 209, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 579, 580, 583, 758], "default_complex_dtype_stack": [178, 579], "default_float_dtype_stack": [180, 579], "native_float16": [183, 579], "unmodifi": [185, 580, 753, 757], "clear": [186, 580, 742, 747, 749, 753, 757, 758, 759, 768, 773, 775, 777, 785, 786, 787, 795], "aliv": [192, 197, 199, 504, 524, 525, 580, 583, 758], "139740789224448": [192, 580], "physic": [195, 580], "process_specif": [198, 210, 580], "percentag": [198, 580], "ram": [198, 206, 210, 580], "alon": [198, 210, 580, 742, 762, 770], "036902561555": [198, 580], "7024003467681645": [198, 580], "as_native_dev": [198, 580], "7095597456708771": [198, 580], "attr_onli": [199, 580], "soft_device_mod": [201, 209, 580], "chunk": [202, 203, 204, 580], "split_factor": [202, 580, 761], "max_chunk_s": [204, 580], "chunk_siz": [204, 580], "input_ax": [204, 580], "output_ax": [204, 580], "usag": [204, 580, 757, 764, 767, 770, 775, 781, 786, 798], "fed": [204, 580, 779], "fist": [204, 580], "gb": [206, 210, 580, 748], "66700032": [206, 580], "589934592": [206, 580], "set_default_devic": [208, 580, 758], "set_soft_device_mod": [209, 580, 758], "219563008": [210, 580], "902400346": [210, 580], "525205504": [210, 580], "na": [211, 581, 770], "princip": [212, 216, 218, 333, 344, 581], "domain": [212, 213, 216, 217, 218, 219, 228, 229, 234, 236, 252, 253, 255, 276, 277, 278, 281, 282, 333, 344, 581, 760, 793, 795], "codomain": [212, 213, 216, 217, 218, 219, 228, 229, 234, 236, 252, 253, 255, 276, 277, 278, 281, 282, 333, 344, 581, 760], "\u03c0": [212, 216, 218, 219, 576, 581], "3\u03c0": [212, 219, 581], "unspecifi": [212, 213, 217, 220, 229, 234, 236, 238, 269, 273, 277, 278, 282, 348, 395, 581, 586, 588, 618, 619, 657, 767], "\u03c0j": [213, 217, 220, 252, 254, 581], "3\u03c0j": [213, 252, 254, 581], "x1_i": [214, 219, 221, 223, 224, 225, 226, 231, 232, 238, 242, 243, 250, 251, 256, 258, 260, 261, 264, 267, 269, 273, 280, 581, 751], "2019": [214, 231, 236, 254, 264, 581, 795, 798], "overflow": [214, 231, 238, 581, 586, 596, 632, 712, 746, 757], "commut": [214, 581], "tabl": [214, 231, 264, 535, 557, 581, 583, 724, 768, 772, 795], "dj": [214, 231, 264, 581], "bj": [214, 231, 264, 314, 344, 581], "invlov": [214, 581], "z1": [214, 581], "z2": [214, 581], "yj": [215, 581], "nanj": [217, 581], "809": [217, 581], "569": [217, 581], "733": [217, 581], "notat": [219, 581, 596, 706, 756], "denot": [219, 581, 726], "quadrant": [219, 581], "rai": [219, 581, 786], "bitwis": [221, 224, 226, 261, 581], "170": [225, 581], "243": [225, 581], "xor": [226, 261, 581], "654": [228, 581], "ci": [229, 234, 236, 277, 581, 751, 757, 762, 769, 770, 781], "368": [229, 581], "670": [229, 581], "202": [229, 581, 751], "548": [229, 581], "1490": [229, 581], "57079633": [230, 581], "14159265": [230, 581], "71238898": [230, 581], "28318531": [230, 581], "02617994": [230, 581], "87266463": [230, 581], "01919862": [230, 581], "03839725": [230, 581], "05759586": [230, 581], "07679449": [230, 581], "09599311": [230, 581], "11519173": [230, 581], "35081118": [230, 581], "88139129": [230, 581], "underflow": [231, 238, 581, 586, 632, 757], "textbook": [231, 264, 581], "frac": [231, 253, 255, 275, 277, 281, 347, 353, 374, 375, 379, 380, 453, 455, 581], "ac": [231, 264, 581, 736], "bd": [231, 264, 581], "bc": [231, 264, 581, 736], "versu": [231, 264, 269, 581], "riemann": [231, 264, 581], "sphere": [231, 264, 581], "c99": [231, 264, 581], "infinit": [231, 264, 278, 581], "unlik": [231, 264, 581, 751, 756, 759, 786, 800, 802], "698": [231, 581], "cut": [234, 236, 276, 277, 278, 281, 581, 785, 801], "08553692": [234, 581], "567": [234, 581], "00344786": [234, 581], "76297021": [234, 581], "197948": [234, 581], "53253174": [234, 581], "accur": [236, 254, 581, 586, 632, 765], "fdlibm": [236, 254, 581], "compliant": [236, 254, 259, 260, 581, 596, 707, 708, 709, 711], "potenti": [236, 254, 581, 742, 747, 748, 756, 757, 768, 774, 798], "632": [236, 581], "20e": [236, 581], "72e": [236, 581], "greatest": [237, 238, 241, 581], "pep": [238, 581, 763], "disambigu": [238, 581, 766], "former": [238, 581, 757, 760, 768], "latter": [238, 581, 751, 753, 757, 760, 768], "overload": [238, 581, 770], "led": [238, 581, 751, 797], "subtl": [238, 581, 757, 801], "bug": [238, 581, 742, 747, 749, 754, 762, 768, 770, 782], "ambigu": [238, 581], "semant": [238, 273, 581, 757, 775, 780, 785, 796], "ill": [238, 581], "surpris": [238, 581, 781], "arrau": [244, 581], "log_": [253, 255, 581], "742": [254, 581], "hanl": [255, 581], "recommend": [259, 260, 273, 581, 596, 708, 711, 748, 753, 754, 762, 765, 766, 789], "negat": [266, 314, 344, 581], "omplex": [267, 581], "52095687": [269, 581], "92457771": [269, 581], "49372482": [269, 581], "22738838": [269, 581], "156": [269, 581], "5877228": [269, 581], "189": [270, 581], "252": [270, 581], "315": [270, 581], "378": [270, 581], "1150": [270, 581], "2890": [270, 581], "172": [270, 581], "487": [270, 581, 585, 609], "344": [270, 581], "355j": [271, 314, 344, 581], "55j": [271, 314, 344, 581], "primarili": [273, 581, 747, 755, 795], "reason": [273, 282, 581, 747, 749, 751, 752, 755, 756, 757, 759, 764, 767, 768, 770, 771, 773, 775, 777, 786, 801], "counterpart": [274, 581, 755, 765], "deliber": [274, 581, 773], "imprecis": [274, 581], "5654": [274, 581], "034": [274, 581], "433": [274, 567, 569, 581, 584], "known": [275, 581, 723, 751, 756, 757, 768, 770], "signum": [275, 581], "operatornam": [275, 277, 581, 586, 619], "textrm": [275, 581], "932": [276, 581], "746": [276, 581], "657": [276, 491, 581, 583], "indistinguish": [278, 581], "convent": [278, 581, 586, 596, 624, 706, 749, 753, 763, 771, 785, 801], "infti": [278, 581], "32455532": [278, 581], "89897949": [278, 581], "169": [278, 581], "analyt": [281, 581, 795, 797, 801], "pole": [281, 581], "546": [281, 581, 585, 609], "916": [281, 581, 587, 643], "996": [281, 581], "histor": [282, 581], "stem": [282, 581, 767], "older": [282, 581], "advis": [282, 581, 768], "462": [282, 581], "604": [282, 581], "984": [282, 581], "997": [282, 581], "0375": [284, 581], "032": [284, 581], "57258511": [286, 339], "69999999": [286, 339, 574, 584], "90928203": [286, 339], "98772264": [286, 339], "99591321": [286, 339], "99863964": [286, 339], "69880581": [286, 339], "18126924": [286, 339], "20141329": [288, 339], "40318608": [288, 339], "48683619": [288, 339], "46328247": [288, 339], "59813893": [288, 339], "43748799": [288, 339], "parametr": [289, 339, 751, 770, 795], "6705687": [291, 339], "52016652": [291, 339], "40560818": [291, 339], "45630932": [291, 339], "2689": [293, 339], "7310": [293, 339], "7615": [293, 339], "2784": [293, 339], "7168": [293, 339], "8708": [293, 339], "4374": [293, 339], "1379": [293, 339], "0089": [293, 339], "taper": [295, 298, 341], "summat": [295, 341, 596, 706, 736], "leakag": [295, 341], "slightli": [295, 341, 755, 768, 770, 775, 779], "wors": [295, 341, 786], "y1": [296, 341], "0800": [297, 341], "3979": [297, 341], "9121": [297, 341], "5400": [297, 341], "han": [298, 341], "ith": [299, 341], "00726415": [300, 341], "9999736": [300, 341], "2773e": [301, 341], "0172e": [301, 341], "9294e": [301, 341], "4149": [301, 341], "9138": [301, 341], "5529": [301, 341], "multidimension": [303, 304, 341, 795], "orthogon": [305, 306, 341, 348, 395, 408, 411, 586, 618, 619], "normalise_factor": [305, 341], "cp": [305, 341, 749], "complementari": [311, 341, 793, 801], "38268346": [311, 341], "38268352": [311, 341], "8563191": [311, 341], "14943568": [311, 341], "arrrai": [314, 344], "position": [320, 344], "inexact": [320, 344], "triangl": [324, 344], "999999e": [325, 344], "65999985": [327, 344], "52000046": [327, 344], "1500001": [327, 344, 496, 583], "11259177": [328, 344], "3574118": [328, 344], "20097363": [328, 344], "suppli": [332, 344, 350, 439, 736, 752, 754, 770], "217234": [333, 344], "hurwitz": [336, 344], "custom_grad_func": [338, 346], "bind": [338, 346, 747, 766, 794, 795], "upstream": [338, 346, 748, 749, 751, 766], "sequence_length": 339, "ndenumer": 341, "ndindex": 341, "random_cp": 341, "random_tuck": 341, "bind_custom_gradient_funct": [346, 766], "area_interpol": 347, "division_overrid": [347, 365], "avg": [347, 365, 367, 388], "dimensio": [347, 366], "tranform": [347, 368, 378], "01823380e": [347, 368, 378], "15385818e": [347, 368, 378], "36371466e": [347, 368, 378], "38763905e": [347, 368, 378], "60722279e": [347, 368, 378], "80319249e": [347, 368, 378], "05617893e": [347, 368, 378], "21500000e": [347, 368, 378], "24000015e": [347, 368, 378], "90734863e": [347, 368, 378], "10000420e": [347, 368, 378], "15899994e": [347, 368, 378], "24000053e": [347, 368, 378], "81469727e": [347, 368, 378], "09999847e": [347, 368, 378], "4135742": [347, 368, 378], "6779785": [347, 368, 378], "3770599": [347, 368, 378], "8719864": [347, 368, 378], "72109985": [347, 368, 378], "52869415": [347, 368, 378], "79182434": [347, 368, 378], "72489166": [347, 368, 378], "container_n": [347, 368, 378], "container_typ": [347, 368, 378, 583], "container_norm": [347, 368, 378], "1580677": [347, 368], "89422607": [347, 368], "86190414": [347, 368], "00041008": [347, 368], "75149155": [347, 368], "97056389": [347, 368], "87819386": [347, 368], "89381361": [347, 368], "50000000e": [347, 368, 378], "22044605e": [347, 368, 378], "ed": [347, 370, 371, 372], "rest": [347, 350, 370, 371, 372, 425, 748, 754, 756, 770, 780, 797], "4d": [347, 371, 372], "5d": [347, 372, 724], "emb": [347, 373], "51285338": [347, 373], "87183261": [347, 373], "2308116": [347, 373], "02733949e": [347, 374], "00j": [347, 374], "49660576e": [347, 374], "68178638e": [347, 374], "01j": [347, 374, 379], "98912367e": [347, 374], "21802426e": [347, 374, 379], "04549134e": [347, 374, 379], "82842712e": [347, 374, 379], "86902654e": [347, 374, 379], "25501143e": [347, 374, 379], "32978028e": [347, 374, 379], "52068201e": [347, 374, 379], "71158374e": [347, 374, 379], "generate_einsum_equ": 347, "get_interpolate_kernel": 347, "27279224e": [347, 378], "44232273e": [347, 378], "70464332e": [347, 378], "73454881e": [347, 378], "00902849e": [347, 378], "10039906e": [347, 378], "07022366e": [347, 378], "69506073": [347, 378], "93914604": [347, 378], "88008881": [347, 378], "18951607": [347, 378], "57439613": [347, 378], "15318303e": [347, 379], "15148591e": [347, 379], "19j": [347, 379], "25000000e": [347, 379], "35378602e": [347, 379], "02j": [347, 379], "65404249e": [347, 379], "17611649e": [347, 379], "24320230e": [347, 379], "79344813e": [347, 379], "22374531e": [347, 379], "45929364e": [347, 379], "14208718e": [347, 379], "07177031e": [347, 379], "indexerror": [347, 380, 390, 588, 649, 737, 761], "interp": [347, 773], "xp": [347, 381, 751], "fp": [347, 381], "nd": [347, 382], "bicubic_tensorflow": [347, 382, 773], "max_unpool1d": 347, "unpool": [347, 386], "pool_result": [347, 386], "unpool_result": [347, 386], "nearest_interpol": 347, "window_shap": [347, 388], "pool_typ": [347, 388], "99038106j": [347, 390], "33012702": [347, 390], "23205081j": [347, 390], "33012702j": [347, 390], "superdiagon": [348, 393, 586, 616], "subdiagon": [348, 393, 586, 616], "eigendecomposit": [348, 395, 586, 618, 619], "qlq\u1d40": [348, 395, 586, 618, 619], "behav": [348, 395, 586, 618, 751, 761, 765, 767, 768, 769, 777, 796], "tridiagon": [348, 396], "38196602": [348, 396], "61803389": [348, 396], "35048741": [348, 396], "56710052": [348, 396], "06693714": [348, 396], "74234426": [348, 396], "56155282": [348, 396], "56155276": [348, 396], "82842714": [348, 396], "82842731": [348, 396], "necessarili": [348, 397, 752, 755], "generalis": [348, 398], "random_st": [348, 399], "skip_matrix": [348, 400, 402], "khatri_rao_product": [348, 400], "kronecker_product": [348, 402], "n_column": [348, 402], "nnmf": [348, 403], "hoi": [348, 408, 411], "determinist": [348, 409], "borrow": [348, 409, 750], "scikit": [348, 409, 786], "extmath": [348, 409], "mae": [349, 413], "log_poisson_loss": 349, "compute_full_loss": [349, 414, 725], "likelihood": [349, 414], "assumpt": [349, 414], "minu": [349, 414], "factori": [349, 414], "stirl": [349, 414], "favor": [349, 414], "28402555": [349, 414], "03402555": [349, 414], "1573164": [349, 414], "3467": [349, 415], "0133": [349, 415], "0250": [349, 415], "0056": [349, 415], "0025": [349, 415], "0675": [349, 415], "hing": [349, 416], "6987": [349, 416], "1606": [349, 416], "3711": [349, 416], "4032": [349, 416], "6931": [349, 416], "whilst": [350, 419, 420, 421, 780, 783, 795], "ary3": [350, 421], "mod": [350, 423, 751], "tall": [350, 428], "appear": [350, 430, 431, 563, 583, 748, 749, 751, 768, 773, 789], "horizot": [350, 435], "shortcut": [350, 439, 748], "linear_ramp": [350, 439], "reflect": [350, 439, 749, 752, 767, 770], "ramp": [350, 439], "mirror": [350, 439, 747, 795], "padding_func": [350, 439], "iaxis_pad_width": [350, 439], "iaxi": [350, 439], "unalt": [350, 439], "put_along_axi": 350, "put": [350, 444, 742, 747, 770, 781, 801], "shrinkag": [350, 446], "elimin": [350, 450, 748], "consecut": [350, 450], "batch_mean": [353, 453, 455], "batch_var": [353, 453, 455], "running_vari": [353, 453, 455], "42857143": [353, 458], "5714286": [353, 458], "distrubut": [354, 459], "paramter": [354, 459], "multivari": [354, 461], "bayesian": [354, 461], "supposedli": [357, 465], "indirect": [357, 466], "secondari": [357, 466], "is_ivy_sparse_arrai": 358, "is_native_sparse_arrai": 358, "native_sparse_arrai": 358, "coo_indic": [358, 469], "crow_indic": [358, 469], "col_indic": [358, 469], "ccol_indic": [358, 469], "row_indic": [358, 469], "dense_shap": [358, 469], "native_sparse_array_to_indices_values_and_shap": 358, "nativesparsearrai": 358, "sparsearrai": 358, "linalg": [359, 473, 586, 632, 747, 767, 769], "aw": [359, 473, 786], "48447205": [359, 473], "c0": [359, 476], "ck": [359, 476], "i1": [359, 476], "c2": [359, 476], "nearest_jax": [359, 482], "compile_on_next_step": [486, 583, 725, 726, 728, 779], "recalcul": [489, 583], "my_sum": [489, 583], "val1": [489, 583], "val2": [489, 583], "cached_sum": [489, 583], "line_eq": [489, 583], "slp": [489, 583], "itc": [489, 583], "cached_line_eq": [489, 583], "0353": [490, 583], "424": [490, 583], "176": [490, 583], "339": [490, 583], "271": [490, 583], "391": [490, 583], "417": [491, 583], "583": [491, 583], "0667": [491, 583], "267": [491, 583], "131": [491, 583], "263": [491, 583], "394": [491, 583, 592, 690], "526": [491, 583], "788": [491, 583], "default_str": [494, 583], "46999979": [495, 583], "66000009": [495, 583], "93000001": [495, 583], "29000092": [495, 583], "33999991": [495, 583], "6400001": [495, 583], "96000004": [495, 583], "36000013": [495, 583], "51999998": [495, 583], "67000008": [495, 583], "30000001": [495, 583, 594, 697], "suppos": [495, 583, 757, 770], "960": [495, 583], "3600": [495, 583], "h1": [495, 583], "w1": [495, 583], "40499985": [496, 583], "61000061": [496, 583], "incas": [500, 501, 583], "max_depth": [507, 583, 590, 677], "seen_set": [507, 583], "local_set": [507, 583], "ivyexcept": [512, 544, 583, 737, 758, 761, 765, 767, 768, 771], "allow_dupl": [522, 583], "context": [523, 583, 748, 749, 753, 757, 758, 759], "fork": [523, 583, 743, 751, 756], "forkserv": [523, 583], "spawn": [523, 583], "consol": [525, 583, 749, 762, 770, 777], "garbag": [525, 583], "collector": [525, 583], "get_all_arrays_in_memori": [525, 583], "frontend": [529, 583, 742, 746, 749, 750, 756, 757, 761, 766, 770, 773, 774, 776, 783, 790, 795], "exept": [529, 583], "exception_trace_mod": [529, 552, 583, 772], "lenient": [530, 553, 583], "inplace_mod": [530, 553, 583], "break": [530, 583, 742, 753, 757, 763, 771, 781], "strict": [530, 553, 583], "infus": [531, 583], "nestable_mod": [534, 556, 583, 772], "effeci": [535, 557, 583, 772], "promtion": [535, 583], "precise_mod": [535, 557, 583, 772], "shape_array_mod": [537, 559, 583, 772], "show_func_wrapper_trace_mod": [538, 560, 583, 772], "tmp_dr": [539, 583], "tmp_dir": [539, 561, 583, 772], "my_tmp": [539, 583], "49999999999975": [541, 583], "5015015015010504": [541, 583], "000444502911705e": [541, 583], "9999999999995j": [541, 583], "00000262": [542, 583], "15605032": [542, 583], "01208451j": [542, 583], "00048": [542, 583], "1296": [542, 583], "00864": [542, 583], "2048": [542, 583], "isn": [544, 583, 749, 765, 767, 778, 781, 797], "possibli": [546, 583, 770, 781], "100000023841858": [546, 583], "200000047683716": [546, 583], "299999952316284": [546, 583], "400000095367432": [546, 583], "599999904632568": [546, 583], "dictionai": [550, 583], "hemant": [550, 583], "unset_shape_array_mod": [551, 583], "set_exception_trace_mod": [552, 583, 761], "set_inplace_mod": [553, 583], "set_min_bas": [554, 583], "set_min_denomin": [555, 583], "set_nestable_mod": [556, 583], "set_precise_mod": [557, 583], "set_queue_timeout": [558, 583], "set_shape_array_mod": [559, 583], "set_show_func_wrapper_trace_mod": [560, 583, 761], "set_tmp_dir": [561, 583], "my_dir": [561, 583], "451": [562, 583], "in_ax": [563, 583], "out_ax": [563, 583], "thereof": [563, 583], "summaris": [563, 583], "99999998": [564, 584], "09999998": [564, 584], "19999998": [564, 584], "00000001": [564, 584], "00300001": [564, 584], "00800001": [564, 584], "0125": [564, 584], "17294501": [564, 584], "15770318": [564, 584], "20863818": [564, 584], "90000075": [565, 584], "90000164": [565, 584], "9000032": [565, 584], "50000012e": [565, 584], "92558754": [565, 584], "92558694": [565, 584], "92558682": [565, 584], "92558861": [565, 584], "60000025e": [565, 584], "01024": [565, 584], "retain_grad": [566, 584], "func_ret": [566, 584, 766], "666666": [566, 584], "333332": [566, 584], "66666675": [566, 574, 584], "argnum": [567, 584], "933": [567, 569, 584], "jacobian": [569, 584, 781, 795], "jac_fn": [569, 584], "639": [570, 584], "361": [570, 584], "value_grad": [574, 584], "42333412": [574, 584], "5333333": [574, 584], "93333334": [574, 584], "43333334": [574, 584], "0666666": [574, 584], "softsign": 575, "718281828459045": 576, "euler": 576, "141592653589793": 576, "cast_bool": 577, "cmp_i": 577, "cmp_isnot": 577, "for_loop": 577, "if_els": 577, "try_except": 577, "while_loop": 577, "as_ivy_dtyp": [579, 768], "as_native_dtyp": 579, "check_float": 579, "closest_valid_dtyp": 579, "default_dtyp": [579, 757, 764], "dtype_bit": 579, "function_supported_dtyp": [579, 757, 770], "function_unsupported_dtyp": [579, 757], "infer_default_dtyp": 579, "invalid_dtyp": [579, 757], "is_hashable_dtyp": 579, "is_native_dtyp": 579, "promote_typ": [579, 757], "promote_types_of_input": [579, 757, 767], "type_promote_arrai": [579, 757], "unset_default_complex_dtyp": 579, "unset_default_float_dtyp": 579, "unset_default_int_dtyp": 579, "unset_default_uint_dtyp": 579, "valid_dtyp": 579, "defaultcomplexdtyp": 579, "defaultdtyp": 579, "defaultfloatdtyp": 579, "defaultintdtyp": 579, "defaultuintdtyp": 579, "as_ivy_dev": [580, 777], "clear_cached_mem_on_dev": 580, "dev_util": [580, 758], "function_supported_devic": 580, "function_unsupported_devic": 580, "get_all_ivy_arrays_on_dev": [580, 758], "handle_soft_device_vari": [580, 758], "num_cpu_cor": [580, 758], "num_gpu": [580, 758, 770], "num_ivy_arrays_on_dev": 580, "percent_used_mem_on_dev": 580, "print_all_ivy_arrays_on_dev": 580, "set_split_factor": [580, 761], "split_func_cal": 580, "total_mem_on_dev": [580, 758], "tpu_is_avail": 580, "unset_default_devic": [580, 758], "unset_soft_device_mod": [580, 758], "used_mem_on_dev": 580, "defaultdevic": [580, 758], "profil": 580, "save_dir": 580, "arg_info": 583, "arg_nam": 583, "cache_fn": [583, 764], "current_backend_str": [583, 770, 775, 777], "function_supported_devices_and_dtyp": 583, "function_unsupported_devices_and_dtyp": 583, "get_item": [583, 767], "get_referrers_recurs": 583, "inplace_arrays_support": 583, "inplace_variables_support": 583, "is_ivy_nested_arrai": 583, "isscalar": 583, "match_kwarg": 583, "num_arrays_in_memori": 583, "print_all_arrays_in_memori": 583, "set_item": 583, "to_ivy_shap": 583, "to_native_shap": 583, "try_else_non": 583, "unset_array_mod": [583, 772], "unset_exception_trace_mod": 583, "unset_inplace_mod": 583, "unset_min_bas": 583, "unset_min_denomin": 583, "unset_nestable_mod": 583, "unset_precise_mod": 583, "unset_queue_timeout": 583, "unset_show_func_wrapper_trace_mod": 583, "unset_tmp_dir": 583, "vmap": [583, 781, 795], "arraymod": 583, "precisemod": [583, 757], "jac": 584, "value_and_grad": [584, 766], "neural": [585, 720, 724, 742, 790, 791, 793, 794, 795, 799, 801, 802], "feature_group_count": [585, 598, 605, 606], "oiw": [585, 598, 599, 605], "oihw": [585, 598, 601, 605], "oidhw": [585, 598, 602, 603, 605], "dhwio": [585, 598, 599, 602, 603, 605], "conv_general_dil": [585, 768], "conv_general_transpos": 585, "depthwis": [585, 607, 724], "overfit": [585, 608], "overal": [585, 608, 755, 757, 758, 760, 780, 789, 791, 793, 794, 795], "1428566": [585, 608], "49000001": [585, 608], "55599999": [585, 608], "21000004": [585, 608], "incom": [585, 609], "666": [585, 586, 609, 625], "4269": [585, 609], "911": [585, 609, 761], "157": [585, 609], "753": [585, 609], "545": [585, 592, 609, 688], "547": [585, 609, 758], "124": [585, 609], "852": [585, 609], "963": [585, 609], "98495483": [585, 609], "0293808": [585, 609], "0159359": [585, 609], "74752808": [585, 609], "20942307": [585, 609], "3205719": [585, 609], "long": [585, 610, 748, 749, 756, 757, 759, 761, 768, 775, 795], "unrol": [585, 610, 775, 778], "lstm": [585, 610, 724, 775, 795], "multi": [585, 586, 611, 614, 724, 759, 774, 781, 791, 793, 795, 799], "paper": [585, 611, 742, 787], "vaswani": [585, 611], "al": [585, 611], "num_attention_head": [585, 611], "key_dim": [585, 611, 724], "value_dim": [585, 611, 724], "query_dim": [585, 611], "measur": [585, 611, 724], "new_": [585, 611], "attention_weight": [585, 611], "attenion_weight": [585, 611], "out_feat_dim": [585, 611], "23333359": [585, 612], "03946018": [585, 612], "0280633": [585, 612], "29981947": [585, 612], "29981089": [585, 612], "06345534": [585, 612], "9634552": [585, 612], "19336844": [585, 612], "09336829": [585, 612], "axisa": [586, 614], "axisb": [586, 614], "axisc": [586, 614], "293": [586, 615], "46997": [586, 615], "explicitli": [586, 619, 620, 636, 724, 725, 726, 751, 752, 753, 755, 757, 760, 761, 764, 765, 766, 767, 769, 770, 775, 781, 790, 795], "45033181e": [586, 620], "02829754e": [586, 620], "54220343e": [586, 620], "12647155e": [586, 620], "38447177e": [586, 620], "56155300e": [586, 620], "26794919": [586, 620], "7320509": [586, 620], "0012": [586, 622], "00342": [586, 622], "000565": [586, 622], "0104": [586, 622], "000981": [586, 622], "00282": [586, 622], "000766": [586, 622], "0322": [586, 622], "00237": [586, 622], "000151": [586, 622], "00101": [586, 622], "00019": [586, 622], "0214": [586, 622], "00171": [586, 622], "0107": [586, 622], "0167": [586, 622], "0472": [586, 622], "0536": [586, 622], "0177": [586, 622], "000429": [586, 622], "00762": [586, 622], "lu_factor": 586, "pivot": [586, 623], "lu": [586, 623], "frobeniu": [586, 625], "nuclear": [586, 625], "induc": [586, 625], "ranl": [586, 625], "47722558": [586, 625], "776": [586, 625], "6000004": [586, 625], "118": [586, 626], "moor": [586, 630], "penros": [586, 630], "deteremin": [586, 632], "logsabsdet": [586, 632], "although": [586, 632, 752, 755, 768, 773, 793, 795], "subject": [586, 632], "solut": [586, 633, 742, 748, 749, 755, 757, 769, 770, 773, 793, 797], "ordin": [586, 633], "usvh": [586, 634], "cetera": [586, 634], "86217213": [586, 635], "31816804": [586, 635], "615": [586, 635], "ss": [586, 635], "25994301": [586, 635], "16403675": [586, 635], "61529762": [586, 635], "51231241": [586, 635], "39777088": [586, 635], "15413129": [586, 635], "1029852": [586, 635], "01383495": [586, 635], "86647356": [586, 635], "7786541": [586, 635], "55970621": [586, 635], "16857576": [586, 635], "86412698": [586, 635], "37566757": [586, 635], "88477993": [586, 635], "95925522": [586, 635], "6444726": [586, 635], "54687881": [586, 635], "16134834": [586, 635], "35037804": [586, 635], "31025076": [586, 635], "35769391": [586, 635], "transposit": [586, 636], "success": [586, 596, 638, 710, 712, 756, 786], "0x": [586, 639], "Such": [586, 639, 764, 770], "progress": [586, 639, 748, 749, 780], "alexandr": [586, 639], "theophil": [586, 639], "9000001": [586, 641], "64158917": [586, 641], "skew": [586, 642], "6666193": [587, 643], "67164493e": [587, 643], "05471958e": [587, 643], "32684899e": [587, 643], "30496836e": [587, 643], "e501": [587, 643, 724], "05393649": [587, 643], "49992943": [587, 643], "83330965": [587, 643], "35667494": [587, 645], "79329094": [587, 645], "512926": [587, 645], "outsid": [588, 646, 657, 757, 758, 764, 777, 800], "honor": [588, 653], "beyond": [588, 654, 760, 768, 801], "famili": [588, 657], "intxx": [588, 657], "floatxx": [588, 657], "construct": [588, 659, 724, 727, 728, 729, 775, 779, 780, 793, 795, 802], "rep": [588, 659], "fomaml_step": 589, "inner_cost_fn": [589, 662, 663, 664], "outer_cost_fn": [589, 662, 663], "inner_grad_step": [589, 662, 663, 664], "inner_learning_r": [589, 662, 663, 664], "inner_optimization_step": [589, 662, 663, 664], "inner_batch_fn": [589, 662, 663], "outer_batch_fn": [589, 662, 663], "average_across_step": [589, 662, 663], "inner_v": [589, 662, 663], "keep_inner_v": [589, 662, 663], "outer_v": [589, 662, 663], "keep_outer_v": [589, 662, 663], "return_inner_v": [589, 662, 663, 664], "num_task": [589, 662, 663, 664], "maml": [589, 662, 663], "0x7f9e9441cc10": [589, 662, 663, 664], "maml_step": 589, "vanilla": [589, 663, 779, 795], "recev": [589, 663], "reptile_step": 589, "cost_fn": [589, 664], "reptil": [589, 664], "_variabl": [589, 664], "batch_in": [589, 664], "4485182": [589, 664], "139": [589, 664], "9569855": [589, 664], "9880483": [589, 664], "01766968": [589, 664], "02197957": [589, 664], "02197981": [589, 664], "all_nested_indic": 590, "include_nest": [590, 665], "_index": [590, 665, 676], "_base": [590, 665, 675, 676, 767], "extra_nest_typ": [590, 665, 666, 675, 676, 677], "themselv": [590, 665, 755, 757, 758, 760, 764, 768, 779, 792, 801], "copy_nest": 590, "to_mut": [590, 666, 677], "deepli": [590, 666, 781, 795], "mutabl": [590, 666, 672, 673, 677, 682, 683, 753], "copied_nest": [590, 666], "1337": [590, 666, 677], "duplicate_array_index_chain": 590, "index_nest": [590, 764], "insert_into_nest_at_index": 590, "insert_into_nest_at_indic": 590, "onto": [590, 671, 677, 784, 785, 795], "special_squar": [590, 671], "6666666666666667": [590, 671], "special_pow": [590, 671], "linear_model": [590, 671], "map_nest_at_index": 590, "shallow": [590, 672, 673, 677, 682, 683], "_result": [590, 672, 682], "hh": [590, 672, 677], "map_nest_at_indic": 590, "ub": [590, 673], "tb": [590, 673], "multi_index_nest": 590, "nested_ani": 590, "check_nest": [590, 675, 676], "conditon": [590, 675, 676], "nested_argwher": 590, "stop_after_n_found": [590, 676], "nested_indic": [590, 676], "nested_map": [590, 758, 764], "_depth": [590, 677], "_tuple_check_fn": [590, 677], "_list_check_fn": [590, 677], "_dict_check_fn": [590, 677], "wherebi": [590, 677, 747, 792], "ah": [590, 677], "bh": [590, 677], "ch": [590, 677], "dh": [590, 677, 751], "eh": [590, 677], "gh": [590, 677, 748], "ih": [590, 677], "1338": [590, 677], "nested_multi_map": 590, "index_chain": [590, 678], "nest0": [590, 678], "ivy_arrai": [590, 678, 752, 768], "unappli": [590, 678], "prune_empti": 590, "prune_nest_at_index": 590, "prune_nest_at_indic": 590, "set_nest_at_index": 590, "set_nest_at_indic": 590, "xyz": [590, 683], "pqr": [590, 683], "mini": [591, 684, 724, 727], "uniformli": [592, 686, 688], "22346112": [592, 687], "0922": [592, 687], "49671414": [592, 687], "1382643": [592, 687], "64768857": [592, 687], "5230298": [592, 687], "23415337": [592, 687], "23413695": [592, 687], "9213753": [592, 687], "12818667": [592, 687], "799": [592, 687], "469": [592, 687], "287": [592, 687], "0366": [592, 687], "26431865": [592, 688], "475": [592, 688], "878": [592, 688], "861": [592, 688], "929": [592, 688], "789": [592, 688], "519": [592, 688], "0435": [592, 688], "381": [592, 688], "4608004": [592, 688], "8458502": [592, 688], "67270088": [592, 688], "31128597": [592, 688], "zeroel": [593, 694], "guarante": [594, 696, 698, 752, 757, 767, 781, 787], "aggreg": [594, 696, 756], "fourth": [594, 696], "1141": [594, 696], "8101": [594, 696], "9298": [594, 696], "8460": [594, 696], "2119": [594, 696], "3519": [594, 696], "6252": [594, 696], "4033": [594, 696], "7443": [594, 696], "2577": [594, 696], "3707": [594, 696], "0545": [594, 696], "3238": [594, 696], "5944": [594, 696], "0775": [594, 696], "4327": [594, 696], "62519997": [594, 696], "40329999": [594, 696], "59439999": [594, 696], "74430001": [594, 696], "81010002": [594, 696], "84600002": [594, 696], "92979997": [594, 696], "einstein": [596, 706, 736], "117": [596, 706], "sentinel": [596, 707, 709], "90000004": [596, 708], "intend": [596, 712, 723, 751, 763, 766, 793, 795, 799, 800], "07472222": [596, 713], "00666667": [596, 713], "08966666": [596, 713], "simplicit": [597, 714, 715], "geglu": 720, "leakyrelu": 720, "logsoftmax": 720, "from_flax_modul": 721, "native_modul": 721, "params_fx": 721, "rng_seed": 721, "constructor_arg": 721, "constructor_kwarg": 721, "instance_arg": 721, "instance_kwarg": 721, "flax": [721, 780, 781, 787, 795], "from_haiku_modul": 721, "params_hk": 721, "from_paddle_modul": 721, "paddl": [721, 733, 747, 748, 757], "from_torch_modul": 721, "dedic": [721, 763, 773, 777, 779], "native_module_class": 721, "modulehelp": [722, 726], "check_submod_ret": 722, "expected_submod_ret": [722, 726], "get_mod_kei": 722, "top_mod": 722, "explicit": [722, 748, 755, 757, 766, 767, 768, 775, 781, 795], "mod_depth": 722, "mod_height": 722, "mod_with_top_mod_key_chain": 722, "flatten_key_chain": 722, "iimedi": 722, "parent": [722, 747, 756, 777], "show_mod_in_top_mod": 722, "upper_depth": 722, "lower_depth": 722, "coverag": [722, 757, 770], "prompt": [722, 747, 749], "show_structur": 722, "this_repr": 722, "show_v_in_top_v": 722, "perspect": 722, "top_v": 722, "sub_mod": 722, "show_v": 722, "comopos": 722, "track_submod_call_ord": [722, 726], "track_submod_ret": [722, 726], "v_with_top_v_key_chain": 722, "create_vari": [723, 779], "var_shap": [723, 779], "fan_out": [723, 779], "fan_in": [723, 779], "rectangular": 723, "firstlayersiren": 723, "siren": 723, "distribt": 723, "glorotuniform": [723, 724, 779], "glorot": 723, "xavier": 723, "neuron": 723, "w_1x_1": 723, "w_2x_2": 723, "w_nx_n": 723, "w_i": 723, "vanish": 723, "explod": [723, 784, 785], "kaimingnorm": 723, "fan_mod": [723, 779], "kaim": 723, "he": 723, "negative_slop": 723, "fan": 723, "propog": 723, "fan_sum": [723, 779], "proport": 723, "Ones": 723, "randomnorm": 723, "stddev": 723, "w0": 723, "gain": [723, 749, 751, 774, 779, 795], "wlim": 723, "issu": [723, 743, 745, 746, 748, 751, 753, 756, 757, 758, 759, 761, 768, 770, 771, 773, 775, 779, 781, 787, 789], "predefin": 723, "initialz": 723, "fan_avg": 723, "adaptiveavgpool1d": 724, "avgpool1d": 724, "implicit": [724, 755, 760, 768, 770, 775, 795], "avgpool2d": 724, "avgpool3d": 724, "filter_s": 724, "weight_initi": [724, 779], "bias_initi": [724, 779], "0x7f9e9428bf70": 724, "0x7f9e9428a320": 724, "conv1dtranspos": 724, "0x7f9e9428a290": 724, "0x7f9e9428a260": 724, "filter_shap": 724, "0x7f9e942895d0": 724, "0x7f9e942895a0": 724, "0x7f9e942894b0": 724, "0x7f9e94289480": 724, "0x7f9e94288220": 724, "0x7f9e942882b0": 724, "conv3dtranspos": 724, "0x7f9e94288340": 724, "0x7f9e942883d0": 724, "depthwiseconv2d": 724, "num_channel": 724, "0x7f9e942893f0": 724, "0x7f9e94288520": 724, "bernoul": 724, "num_embed": 724, "embedding_dim": 724, "padding_idx": 724, "lookup": 724, "num_embeddingss": 724, "whenev": [724, 749, 753, 756, 757, 761, 767, 770, 772, 778], "renorm": 724, "insensit": 724, "num_lay": 724, "return_sequ": 724, "return_st": 724, "0x7f9e942883a0": 724, "get_initial_st": 724, "0x7f9e941dfd60": 724, "0x7f9e9428a380": 724, "maxpool1d": 724, "maxpool3d": 724, "multiheadattent": 724, "embed_dim": 724, "head_dim": 724, "dropout_r": 724, "use_proj_bia": 724, "attention_ax": 724, "build_mod": [724, 725, 726], "on_init": [724, 726], "parallel": [724, 754, 795, 799, 800], "binarycrossentropyloss": 725, "store_var": [725, 726], "arg_stateful_idx": [725, 726, 789], "kwarg_stateful_idx": [725, 726, 789], "fallback_to_non_compil": [725, 726, 728], "with_partial_v": [725, 726], "logpoissonloss": 725, "modulemeta": 726, "submod_depth": 726, "submods_to_track": 726, "varibl": 726, "temporarili": [726, 745, 751], "from_cal": 726, "built_": 726, "compile_kwarg": 726, "_unified_ivy_graph": 726, "_call": 726, "register_buff": 726, "var_nam": 726, "weights_path": 726, "randomness_factor": 726, "with_edge_label": 726, "with_arg_label": 726, "with_output_label": 726, "output_connected_onli": 726, "highlight_subgraph": 726, "num_featur": 727, "affin": 727, "track_running_stat": 727, "trail": 727, "layernorm": 727, "normalized_shap": 727, "elementwise_affin": 727, "set_stat": [728, 779], "init_on_first_step": 728, "ignore_miss": 728, "privat": [728, 768, 770], "_step": [728, 779], "stochast": [728, 795], "sub_modul": 729, "check_al": 730, "messag": [730, 737, 741, 748, 749, 756, 759, 761, 762, 768, 775, 777, 786], "check_all_or_any_fn": 730, "check_ani": 730, "check_dev_correct_format": 730, "check_dimens": 730, "check_elem_in_list": [730, 764, 767, 768], "elem": 730, "check_equ": [730, 768], "check_exist": 730, "check_fals": 730, "check_fill_value_and_dtype_are_compat": [730, 771], "check_gather_input_valid": 730, "check_gather_nd_input_valid": 730, "check_great": 730, "allow_equ": [730, 761], "check_inplace_sizes_valid": [730, 767], "check_isinst": 730, "allowed_typ": 730, "check_kernel_padding_s": 730, "padding_s": 730, "check_less": [730, 761], "check_one_way_broadcast": 730, "check_same_dtyp": 730, "check_shapes_broadcast": 730, "check_tru": 730, "check_unsorted_segment_min_valid_param": 730, "ast_help": 732, "importtransform": 732, "nodetransform": 732, "impersonate_import": 732, "tree": [732, 757], "local_ivy_id": 732, "visit_import": 732, "visit_importfrom": 732, "ivyload": 732, "loader": [732, 778, 781], "exec_modul": 732, "ivypathfind": 732, "metapathfind": 732, "find_spec": 732, "fullnam": 732, "contextmanag": 733, "choose_random_backend": 733, "convert_from_numpy_to_target_backend": 733, "variable_id": 733, "numpy_obj": 733, "convert_from_source_backend_to_numpi": 733, "current_backend": [733, 747, 761, 764, 769, 771, 775], "global_backend": 733, "fn_name_from_version_specific_fn_nam": 733, "prevent_access_loc": 733, "previous_backend": [733, 753], "unset": [733, 753, 775], "Or": [733, 742, 744, 767, 778], "set_backend_to_specific_vers": 733, "set_jax_backend": 733, "set_mxnet_backend": 733, "mxnet": [733, 747, 748, 786, 802], "mx": 733, "set_numpy_backend": 733, "set_paddle_backend": 733, "set_tensorflow_backend": 733, "set_torch_backend": 733, "unset_backend": [733, 753], "with_backend": 733, "sub_backend_handl": 734, "available_sub_backend": 734, "clear_sub_backend": 734, "find_available_sub_backend": 734, "sub_backends_loc": 734, "set_sub_backend": 734, "sub_backend_str": 734, "unset_sub_backend": 734, "dynamic_import": 735, "import_modul": [735, 775], "einsum_pars": 736, "convert_interleaved_input": 736, "interleav": 736, "convert_subscript": 736, "old_sub": 736, "symbol_map": 736, "subscript": 736, "oe": 736, "ellipsi": 736, "find_output_shap": 736, "find_output_str": 736, "canon": 736, "gen_unused_symbol": 736, "abd": 736, "get_symbol": 736, "letter": 736, "resort": 736, "unicod": 736, "charact": [736, 768, 786], "chr": 736, "surrog": 736, "\u0155": 736, "20000": 736, "\u4eac": 736, "has_valid_einsum_chars_onli": 736, "einsum_str": 736, "abaz": 736, "\u00f6ver": 736, "is_valid_einsum_char": 736, "\u01f5": 736, "legalise_einsum_expr": 736, "reproduct": 736, "pars": [736, 754, 759, 781], "intak": 736, "contract_path": 736, "parse_einsum_input": 736, "einsum_eqn": 736, "legalis": 736, "simplifi": [736, 761, 768, 775, 776, 779, 786, 789, 791, 793, 794, 795, 798, 801, 802], "legalise_einsum_eqn": 736, "za": 736, "xza": 736, "xz": 736, "possibly_convert_to_numpi": 736, "myshap": 736, "__main__": 736, "0x10f850710": 736, "inplaceupdateexcept": 737, "include_backend": [737, 761], "invalidbackendexcept": 737, "ivyattributeerror": [737, 761], "attributeerror": [737, 761, 777], "ivybroadcastshapeerror": [737, 761], "ivydeviceerror": 737, "ivydtypepromotionerror": [737, 761], "ivyindexerror": [737, 761], "ivynotimplementedexcept": [737, 761], "notimplementederror": 737, "ivyvalueerror": [737, 761], "handle_except": [737, 763, 765], "add_array_spec": 738, "fn_array_spec": 738, "set_logging_mod": 739, "debug": [739, 748, 749, 755, 756, 766, 770, 773, 778, 795], "unset_logging_mod": 739, "print_stat": 740, "viz": 740, "snakeviz": 740, "bonu": 740, "cprofil": 740, "cprint": [741, 775], "grant": [742, 782], "pilot": [742, 746, 782], "waitlist": [742, 782], "awai": [742, 793, 795], "grow": [742, 795], "redund": [742, 757, 761, 768, 789], "instantli": [742, 790], "pipelin": [742, 744, 750, 751, 752, 769, 771, 780, 783, 785, 790, 795, 796, 801], "essenti": [742, 747, 753, 755, 758, 759, 764, 767, 768, 769, 785, 786, 801], "mainli": [742, 747, 750, 766, 768, 770, 776, 778, 783, 795], "handler": [742, 774, 776, 780, 783], "scene": [742, 750, 774, 776, 784, 785, 795], "facilit": 742, "mse_loss": 742, "jax_ms": 742, "tf_mse": 742, "np_mse": 742, "torch_ms": 742, "someth": [742, 749, 753, 762, 771, 778, 779, 781, 782, 801], "favorit": 742, "flexibl": [742, 755, 757, 763, 766, 771, 773, 795], "everyon": [742, 743, 747, 748, 749, 781, 787], "plan": [742, 782], "interoper": [742, 786, 792, 793, 795, 798], "pull": [742, 743, 747, 748, 751, 759, 762, 771, 773, 781, 782, 787], "sweat_smil": 742, "video": [742, 743, 748, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 782, 793], "quit": [742, 745, 749, 752, 759, 760, 764, 765, 770, 773, 795, 801], "jax_fn": 742, "jax_x": 742, "torch_x": 742, "torch_fn": 742, "focus": [742, 757, 771, 793, 794, 795, 801, 802], "orient": 742, "contributor": [742, 743, 745, 747, 748, 749, 768, 774, 795], "nuanc": 742, "background": [742, 748, 754, 795, 797], "contextualis": 742, "problem": [742, 749, 751, 752, 753, 758, 768, 777, 786, 791, 797, 801], "explos": [742, 784, 786], "adher": [742, 751, 757, 760, 763, 773, 775, 780, 785, 786, 791, 792, 801], "shorter": [742, 777], "ensp": 742, "customiz": [742, 754], "deepmind_perceiver_io": 742, "sm_framework": 742, "segmentation_model": 742, "sm": 742, "torch_sm": 742, "metric": [742, 781], "iou_scor": 742, "rax": 742, "torch_rax": 742, "poly1_softmax_loss": 742, "madmom": 742, "madmon": 742, "torch_madmom": 742, "freq": 742, "audio": 742, "hz2midi": 742, "torch_loss": 742, "maxpooling1d": 742, "pool_siz": 742, "tf_kornia": 742, "tf_rax": 742, "tf_madmom": 742, "tf_loss": 742, "_forward_classifi": [742, 790], "forward_classifi": [742, 790], "hk_eff_encod": 742, "dummy_x": 742, "jax_sm": 742, "jax_madmom": 742, "jax_loss": 742, "np_kornia": 742, "np_sm": 742, "np_rax": 742, "np_loss": 742, "yourself": [742, 747, 749, 762, 770, 773], "favourit": [742, 748], "hyperparam": 742, "believ": [742, 749, 786], "feedback": [742, 756], "appreci": 742, "amaz": 742, "journei": [742, 743], "ambiti": 742, "season": 742, "perfect": 742, "ask": [742, 747, 748, 759, 775, 777, 781, 782, 787], "idea": [742, 747, 771, 776, 787, 794], "fellow": 742, "twitter": 742, "sneak": 742, "peek": 742, "stai": [742, 756], "proper": [742, 747, 768, 790], "credit": 742, "accompani": 742, "lenton2021ivi": 742, "inter": 742, "author": [742, 747, 749, 793, 797], "lenton": 742, "daniel": 742, "pardo": 742, "fabio": 742, "falck": 742, "fabian": 742, "jame": 742, "stephen": 742, "clark": 742, "ronald": 742, "journal": 742, "arxiv": 742, "preprint": 742, "2102": 742, "02886": 742, "year": [742, 751, 781, 785, 787, 795], "strongli": [743, 748, 768, 801, 802], "engag": [743, 749, 786], "skill": [743, 797], "veteran": 743, "effort": [743, 747, 781, 786, 791, 795, 801], "board": [743, 754], "stage": [743, 749, 750, 751, 754, 770, 786, 795], "excit": [743, 750, 786], "make_doc": 744, "sh": [744, 748, 749, 751, 756], "host": [744, 756, 781, 786, 800], "pwd": 744, "ssh": [744, 756], "make_docs_without_dock": [744, 754], "assist": 745, "navig": [745, 748, 749, 750], "runtimeerror": 745, "logaddexp2_cpu": 745, "falsifi": [745, 751, 770], "test_logaddexp2": 745, "backend_fw": [745, 769], "on_devic": [745, 769], "dtype_and_x": [745, 769, 770], "test_flag": [745, 769, 770], "functiontestflag": 745, "ground_truth_backend": [745, 769], "num_positional_arg": [745, 769, 770], "with_out": [745, 769, 770], "instance_method": [745, 770], "test_gradi": [745, 770], "test_compil": 745, "as_vari": [745, 769, 770], "fn_name": [745, 753, 769, 770], "reproduce_failur": [745, 751, 765, 770], "axicy2bkaamobaar2waaaacvaai": 745, "assertionerror": [745, 751, 761, 769, 770], "25830078125": 745, "258544921875": 745, "test_acosh": 745, "axicy2baabyqwqgiaabdaai": 745, "instabl": [745, 757], "41421356": 745, "41421356e": 745, "34078079e": 745, "154": 745, "test_ab": [745, 748, 770], "000j": 745, "154j": 745, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 745, "experiment": [745, 749, 757, 768, 771, 775, 795], "pycharm": [745, 769, 770], "docker": [745, 746], "few": [746, 747, 749, 755, 757, 758, 763, 764, 766, 767, 769, 770, 773, 775, 776, 777, 778, 779, 787, 795, 797], "climb": 746, "steep": 746, "curv": 746, "realpython": 746, "pyn": 746, "regard": [746, 755, 768, 769, 773, 786], "exchang": [746, 786, 791, 793], "stuck": [746, 747], "spell": 746, "sound": [746, 756, 774], "peopl": [746, 748, 749, 750, 795, 797], "frequent": [747, 749, 753, 795], "outlin": [747, 748, 749, 750, 755, 757, 760, 764, 767, 768, 770], "broad": [747, 797], "individu": [747, 749, 751, 753, 757, 764, 768, 795, 798, 801, 802], "clearli": [747, 749, 759, 769, 770, 786, 799], "hypothesi": [747, 749, 751, 756, 765], "aforement": 747, "arraywithelementwis": [747, 752, 777], "containerwithmanipul": 747, "thorough": [747, 760, 763, 770], "comment": [747, 748, 749, 751, 757, 762, 768, 773], "add_reformatting_checklist_": 747, "category_nam": [747, 757, 758, 760, 763, 764], "pr": [747, 749, 751, 762, 768, 769, 770], "autom": [747, 756, 762, 770, 783, 797], "bot": [747, 762], "markdown": [747, 754], "patient": [747, 748], "statu": [747, 756, 762, 787], "mark": [747, 749, 751, 770, 775], "checkbox": [747, 748], "proce": [747, 748], "elabor": 747, "struggl": 747, "assigne": 747, "status": 747, "refrain": 747, "scipi": [747, 786, 797, 802], "mindspor": 747, "simpler": [747, 749, 762, 789, 796, 802], "member": [747, 749, 768, 782, 786], "merg": [747, 749, 751, 756, 768, 795], "composition": 747, "feasibl": [747, 756, 786, 789], "pend": 747, "helpfulli": [747, 773, 793], "problemat": [747, 748], "unimpl": 747, "issue_link": 747, "alias": [747, 768, 769], "alias_nam": 747, "notic": [747, 752, 756, 762, 770, 773, 789], "push": [747, 749, 751, 769, 770, 801], "liner": 747, "meanwhil": [747, 756], "reselect": 747, "placement": 747, "categoris": [747, 751, 768], "faithfulli": 747, "creation_routin": [747, 769], "indexing_routin": 747, "ma": 747, "manipulation_routin": 747, "mathematical_funct": [747, 768], "sorting_searching_count": 747, "ufunc": [747, 768], "matrix_and_vector_product": 747, "matrix_eigenvalu": 747, "norms_and_other_numb": 747, "solving_equations_and_inverting_matric": 747, "seem": [747, 748, 773, 779, 780, 781, 795], "namespac": [747, 757, 765, 768, 769, 771, 775, 780], "gleam": 747, "uncom": 747, "test_numpy_inn": 747, "ivy_test": [747, 748, 749, 751, 754, 756, 769], "test_ivi": [747, 748, 749, 754, 756, 769, 770], "test_frontend": [747, 756, 769], "unsur": [747, 770], "central": [747, 762, 773, 786, 801], "analyz": [747, 783], "relevant_submodul": 747, "strategi": [747, 769], "roadmap": [747, 756], "soon": [747, 749, 756, 757, 781, 789], "deem": [747, 768], "subtask": 747, "clearer": [747, 761, 769, 778], "backend_nam": [747, 753, 757, 758, 760, 763, 764, 765], "sometim": [747, 748, 749, 751, 757, 764, 768, 770, 773], "rare": [747, 758, 781, 800], "button": [747, 748, 749], "centr": 747, "predetermin": 747, "superset": [747, 750, 764, 767, 781], "reserv": 747, "submit": [747, 762], "happi": [748, 781, 787], "your_usernam": 748, "your_fold": 748, "enter": [748, 749, 752, 757, 758, 763, 765], "sync": [748, 751], "remot": [748, 751, 762], "nutshel": [748, 763], "hook": [748, 762], "lint": 748, "succe": [748, 789], "properli": [748, 750, 761, 762, 768, 770], "whatev": [748, 755, 781], "elig": 748, "student": 748, "licens": [748, 798], "remind": 748, "expir": 748, "won": [748, 749, 755, 757, 780, 782, 786, 787, 789, 790], "profession": 748, "trial": 748, "jetbrain": 748, "month": [748, 785], "bui": [748, 801], "paid": 748, "rapid": [748, 785, 786, 795], "pace": 748, "person": [748, 749], "abil": [748, 773, 776, 781, 795], "perhap": [748, 777, 778, 779, 781, 801], "conda": [748, 786, 797], "ivy_dev": [748, 749], "icon": [748, 749], "panel": 748, "vscode": 748, "palett": 748, "ctrl": [748, 749], "mac": [748, 749], "linux": [748, 749, 798, 800], "intel": [748, 786, 793, 800], "m1": 748, "optional_apple_silicon_1": 748, "optional_apple_silicon_2": 748, "builtin": [748, 777, 779], "cmd": 748, "bat": [748, 749], "virtualenv": 748, "tick": [748, 749, 756], "paddlepaddl": 748, "nz2": 748, "openssl": 748, "libssl1": 748, "1_1": 748, "1f": 748, "1ubuntu2": 748, "19_amd64": 748, "deb": 748, "dpkg": 748, "array_api_test": [748, 749, 751], "test_array_api": [748, 749, 751, 770], "suit": [748, 750, 751, 756, 770, 778, 786, 795, 801], "mitig": [748, 801], "desktop": 748, "powershel": 748, "admin": 748, "deploy": [748, 790, 794, 797, 798, 801, 802], "menu": 748, "introspect": 748, "dialog": 748, "persist": 748, "caus": [748, 749, 751, 753, 755, 756, 757, 759, 767, 769, 770, 781], "earlier": [748, 749, 757, 771], "virtualis": 748, "bio": [748, 786], "dropdown": [748, 756], "dockerfil": 748, "ca": 748, "certif": 748, "gnupg": 748, "lsb": 748, "keyr": 748, "fssl": 748, "gpg": 748, "dearmor": 748, "echo": [748, 756, 782], "arch": 748, "lsb_releas": 748, "null": 748, "ce": 748, "cli": 748, "containerd": 748, "plugin": 748, "systemctl": 748, "permiss": [748, 756], "softwar": [748, 749, 785, 786, 793, 798, 799, 800], "press": [748, 749, 778], "successful": 748, "4a": 748, "socket": 748, "rwx": 748, "sock": 748, "pid": 748, "coupl": [748, 752, 777, 779, 795], "editor": 748, "pytest": [748, 749, 751, 756, 765, 770], "keyboard": 748, "screenshot": 748, "pop": [748, 786], "test_elementwis": 748, "bar": 748, "shell": [748, 749], "run_tests_cli": [748, 751], "run_ivy_core_test": 748, "run_ivy_nn_test": 748, "run_ivy_stateful_test": 748, "run_test": [748, 756], "test_depend": 748, "test_ivy_cor": 748, "test_ivy_nn": 748, "test_ivy_st": 748, "unix": 748, "test_": [748, 769], "test_funct": [748, 749, 756, 769, 770], "test_cor": [748, 749, 769], "offici": [748, 757, 775], "wish": [748, 768], "ivy_nn": 748, "ivy_st": 748, "header": [748, 749], "arrow": 748, "test_stat": 748, "test_submodule_nam": 748, "test_function_nam": 748, "debugg": 748, "studio": [748, 770], "especi": [748, 753, 762, 785, 795], "afterward": [748, 778], "overlap": [748, 756, 771, 773, 796], "test_file_path": 748, "test_fn_nam": 748, "engin": [748, 795, 797, 798], "devcontain": 748, "comma": 748, "postcreatecommand": 748, "post_create_command": 748, "poststartcommand": 748, "safe": [748, 768], "containerworkspacefold": 748, "reopen": 748, "test_fle_path": 748, "slash": 748, "computation": 748, "comfort": [748, 761], "isol": [748, 749, 796, 801], "container": 748, "intens": 748, "headach": 748, "arm": [748, 749], "vm": [748, 756], "azur": 748, "cloud": [748, 756, 797], "longer": [748, 757, 767, 770, 795], "theme": [748, 754], "ipad": 748, "browser": [748, 754], "quota": 748, "requisit": 748, "pane": [748, 749, 756], "dockerfilegpu": 748, "ivv": 748, "multiv": 748, "multivers": [748, 771], "dockerfilemultivers": 748, "dockerhub": 748, "region": 748, "box": 748, "upto": [748, 749], "minut": [748, 756], "launch": 748, "quickli": [748, 749, 756, 778, 779, 785, 787, 795, 802], "kindli": 748, "guidelin": 748, "conatin": 748, "colour": 748, "chanc": 748, "troubleshoot": 748, "ever": 748, "flask": 748, "toolbar": [748, 749], "_array_modul": [748, 751], "refresh": 748, "workspac": 748, "pytestarg": 748, "unittesten": 748, "pytesten": 748, "autotestdiscoveronsaveen": 748, "conftest": 748, "tendenc": 749, "land": 749, "unrel": [749, 786], "fly": [749, 795], "hard": [749, 777, 795], "internship": 749, "serv": [749, 752, 755, 763, 764, 768, 769, 770, 773, 774, 783, 793], "suspect": 749, "iii": 749, "issue_numb": 749, "12345": 749, "clean": [749, 771, 775, 776, 778], "rememb": 749, "respond": 749, "dai": [749, 762], "freed": 749, "situat": [749, 756, 780], "unabl": [749, 773], "obvious": [749, 756], "qualiti": 749, "hypothet": 749, "frustrat": 749, "delai": [749, 789], "busi": 749, "inact": 749, "unfairli": 749, "investig": 749, "regist": [749, 789], "name_of_your_branch": 749, "date": [749, 751], "complic": [749, 769, 775], "merge_with_upstream": 749, "abort": 749, "tediou": [749, 759, 773], "stash": [749, 762], "reinstat": 749, "uncommit": 749, "unstag": [749, 762], "untrack": 749, "atlassian": 749, "wrote": 749, "piec": [749, 752, 764, 765, 775, 789, 791, 793], "blame": 749, "eg": 749, "past": [749, 751, 769, 770, 782, 795], "week": [749, 787], "grep": 749, "commit_id": 749, "handi": 749, "histori": 749, "toggl": 749, "highlight": [749, 756, 759, 768], "approv": 749, "someon": [749, 781], "hash": [749, 778], "cancel": 749, "speedup": 749, "unavail": 749, "tickbox": 749, "substanti": [749, 752, 757, 770, 786, 795], "span": [749, 793, 801], "intent": [749, 767], "discourag": 749, "adopt": [749, 752, 763, 773, 786, 794, 795, 800], "philosophi": 749, "valuabl": 749, "infrequ": 749, "earli": [749, 795], "wast": [749, 756], "spot": [749, 759, 764], "mistak": 749, "propos": [749, 768, 773, 795], "mountain": 749, "advoc": [749, 781], "session": [749, 795], "beauti": 749, "particularli": [749, 778, 781, 789, 793], "care": [749, 758, 768, 773, 780, 786], "concern": [749, 750, 755, 757, 759, 767, 773, 774, 801], "undo": 749, "stress": 749, "nifti": 749, "reassur": 749, "local_path_to_ivi": 749, "subfold": [749, 769, 770, 771], "dep": 749, "fresh": 749, "arsen": 749, "exec": 749, "ivy_contain": 749, "test_imag": 749, "test_random_crop": 749, "test_creation_funct": 749, "test_arang": 749, "virtual": [749, 768, 786, 798, 799], "cursor": 749, "alt": 749, "blog": 749, "breakpoint": 749, "gutter": 749, "caret": 749, "f8": 749, "f9": 749, "Into": 749, "f7": 749, "smart": 749, "fragment": [749, 791, 793, 797], "wherein": [749, 764, 770], "failur": [749, 756, 769, 770], "weed": [750, 774], "tour": 750, "conjunct": 751, "establish": [751, 797], "popular": [751, 795], "sens": [751, 757, 759, 768, 777], "unconnect": 751, "initialis": [751, 768, 770], "everytim": [751, 757], "strang": [751, 777], "thoroughli": 751, "test_linalg": [751, 769], "test_set_funct": 751, "test_signatur": 751, "excess": [751, 753, 759], "array_modul": 751, "vv": 751, "test_manipulation_funct": 751, "test_concat": [751, 770], "nb": 751, "liber": 751, "______________________": 751, "test_remaind": 751, "_______________________": 751, "test_operators_and_elementwise_funct": 751, "1264": 751, "1277": 751, "binary_param_assert_against_refimpl": 751, "ctx": 751, "620": 751, "binary_assert_against_refimpl": 751, "324": 751, "scalar_o": 751, "17304064": 751, "binaryparamcontext": 751, "axic42baaowcnp": 751, "rumwmabaear0": 751, "make_binary_param": 751, "numeric_dtyp": 751, "left_strat": 751, "left_sym": 751, "right_strat": 751, "right_sym": 751, "right_is_scalar": 751, "binary_param_assert_dtyp": 751, "binary_param_assert_shap": 751, "recreat": 751, "unexpectedli": 751, "discrep": [751, 769], "test_asarray_arrai": 751, "test_floor_divid": 751, "health": 751, "test_iop": 751, "__imod__": 751, "isequ": 751, "test_matrix_norm": 751, "alter": 751, "tweak": 751, "array_api_methods_to_test": 751, "test_trac": 751, "test_special_cas": 751, "__ipow__": 751, "is_integ": 751, "easier": [751, 752, 753, 757, 769, 771, 783, 795, 797], "revisit": [751, 763], "_data": [752, 767, 768, 777], "organiz": [752, 755, 768], "bear": [752, 755, 757, 768], "underpin": [752, 755, 775], "programmat": [752, 755, 796], "backup": [752, 754, 755], "accident": [752, 755, 768], "absent": [752, 755], "auto": [752, 754, 755, 762, 778], "__mul__": [752, 755, 759, 763, 773, 777], "throw": [752, 757, 758, 761, 777, 795], "imposs": 752, "inputs_to_native_arrai": [752, 764, 765], "outputs_to_ivy_arrai": [752, 757, 758, 763, 764, 765], "secondli": [752, 757], "dictat": [752, 759, 763, 767], "__ivy_array_function__": 752, "inspir": 752, "__torch_function__": 752, "myarrai": 752, "handled_funct": 752, "notimpl": 752, "issubclass": 752, "four": [752, 757, 759, 763, 764, 770, 773, 778], "enough": [752, 756, 757, 758, 770, 777, 778, 779], "ivy_funct": 752, "my_ab": 752, "my_arrai": 752, "implicit_backend": [753, 775], "__dict__": [753, 767, 775], "ivy_original_dict": [753, 775], "get_backend": [753, 764], "fallback": 753, "challeng": [753, 801], "live": [753, 754, 757, 786, 787, 791, 793], "scope": [753, 796, 800], "intermediari": 753, "set_dynamic_backend": 753, "unset_dynamic_backend": 753, "dynamic_backend_a": 753, "set_": 753, "unset_": 753, "technic": [753, 763, 767, 781, 795, 797], "setter": 753, "backend_handl": 753, "requires_grad": 753, "memory_format": 753, "preserve_format": 753, "weren": 753, "vast": [753, 757, 795], "minor": [753, 773, 781], "fn_name_v_1p12_and_abov": 753, "fn_name_v_1p01_to_1p1": 753, "heavili": [754, 765, 781], "characterist": 754, "conf": 754, "cleanup": 754, "readm": [754, 781], "maxdepth": 754, "caption": 754, "related_work": 754, "deep_div": 754, "faq": 754, "glossari": 754, "autosummari": 754, "top_functional_toc": 754, "restructuredtext": 754, "inlin": 754, "discov": [754, 757], "ivy_toctree_caption_map": 754, "stub": 754, "unfortun": [754, 762], "linker": 754, "foo": 754, "discussion_channel_map": 754, "1000043690254946374": 754, "1000043749088436315": 754, "forum": [754, 782], "seri": [754, 768, 770, 795, 797], "discussion_paragraph": 754, "discord_link": 754, "channel_link": 754, "gg": 754, "zvqdvbznqj": 754, "799879767196958751": 754, "channel_id": 754, "autoskippablemethod": 754, "skippable_method_attribut": 754, "__qualname__": 754, "autodoc": 754, "atribut": 754, "__doc__": 754, "autoivydata": 754, "mutual": [755, 764], "containerwithelementwis": 755, "__repr__": 755, "__getattr__": [755, 789], "__setattr__": [755, 789], "__contains__": 755, "__getstate__": 755, "__setstate__": 755, "unpickl": 755, "num_dim": [755, 780], "restrict": [755, 756, 768, 775, 789, 792], "enforc": [755, 777], "extern": [755, 763, 768, 770, 771], "lefthand": 755, "righthand": 755, "handle_nest": [755, 763, 764, 765, 775], "presenc": [755, 767], "absenc": [755, 763, 795], "implicitli": [755, 766, 770, 775], "log_pr": [755, 764, 767], "intuit": [755, 770, 778, 779, 791], "chronolog": 755, "concurr": [755, 756, 764, 795], "despit": [755, 757, 758, 769, 775, 786, 792, 795], "__list__": 755, "whatsoev": [755, 764, 783, 801], "children": 755, "shallowest": 755, "deepest": 755, "regularli": 756, "rollback": 756, "incorpor": [756, 769, 778, 795], "techniqu": 756, "triplet": 756, "test_torch": [756, 769], "test_tensor": [756, 769], "test_torch_instance_arctan_": 756, "12500": 756, "daili": 756, "huge": [756, 778, 784, 786, 795, 801], "shoot": 756, "impact": [756, 770, 779, 797], "_reduce_loss": [756, 764, 767], "test_nn": 756, "test_loss": 756, "test_binary_cross_entropy_with_logit": 756, "test_cross_entropi": 756, "test_binary_cross_entropi": 756, "test_sparse_cross_entropi": 756, "test_loss_funct": 756, "test_torch_binary_cross_entropi": 756, "test_torch_cross_entropi": 756, "binary_cross_entropy_with_logit": 756, "torch_binary_cross_entropi": 756, "torch_cross_entropi": 756, "magic": 756, "readthedoc": 756, "pedagog": 756, "f_1": 756, "t_1": 756, "t_3": 756, "t_7": 756, "t_": 756, "f_m": 756, "cyclic": 756, "intellig": [756, 770, 797], "tests_fil": 756, "file_nam": [756, 770, 771], "intersect": [756, 770], "tests_lin": 756, "correspondingli": 756, "tests_to_run": 756, "determine_tests_lin": 756, "mongodb": 756, "databas": [756, 770], "mechan": [756, 781], "secret": 756, "db": 756, "ssh_deploy_kei": 756, "suffic": [756, 765, 770], "massiv": 756, "constraint": [756, 757, 766], "ex": [756, 790], "yml": 756, "felicit": 756, "clone_map": 756, "home": 756, "deploy_kei": 756, "user_email": 756, "rashul": 756, "chutani": 756, "gmail": [756, 786], "user_nam": 756, "target_branch": 756, "github_serv": 756, "deploy_key_fil": 756, "ssh_known_hosts_fil": 756, "known_host": 756, "keyscan": 756, "git_ssh_command": 756, "userknownhostsfil": 756, "email": [756, 786], "methodologi": 756, "master1": 756, "restructur": 756, "_map": 756, "t_2": 756, "t_n": 756, "index_map": 756, "test_map": 756, "snowbal": 756, "recalibr": 756, "workflow_dispatch": 756, "schedul": [756, 781, 795, 802], "cron": 756, "saturdai": 756, "night": 756, "pm": 756, "gut": 756, "lesser": [756, 761], "lol": 756, "hour": [756, 787], "cater": 756, "master2": 756, "master32": 756, "synchron": 756, "runner2": 756, "corrupt": 756, "discard": 756, "decoupl": [756, 779], "150": 756, "cycl": [756, 770], "rashulchutani": 756, "yellow": 756, "queu": 756, "redirect": 756, "book": 756, "onrend": 756, "jo": 756, "ran": 756, "badg": 756, "clickabl": 756, "all_dtyp": 757, "all_numeric_dtyp": 757, "all_int_dtyp": 757, "all_float_dtyp": 757, "replic": [757, 766, 767, 768], "thirdli": 757, "native_float32": 757, "importantli": [757, 777, 780], "arguabl": [757, 758, 768], "jaxarrai": [757, 758, 761, 763, 767, 771, 775], "_handle_0_dim_output": 757, "subtli": [757, 767], "promote_types_frontend_nam": 757, "promote_types_of_frontend_name_input": 757, "frontend_nam": 757, "upcast": 757, "nearli": [757, 763, 765, 795], "downcast": 757, "footprint": 757, "concret": 757, "aris": [757, 762, 781, 786], "aren": 757, "utterli": 757, "meant": [757, 759, 767], "twice": 757, "disadvantag": 757, "relax": 757, "f64": 757, "unwant": 757, "primaci": 757, "resembl": 757, "prone": 757, "compound": 757, "infer_dtyp": [757, 758, 763, 765], "settabl": [757, 758], "handle_out_argu": [757, 758, 763, 764, 765, 767, 775], "infer_devic": [757, 758, 763, 765], "deleg": [757, 802], "shape_to_tupl": 757, "with_supported_dtyp": 757, "with_unsupported_dtyp": [757, 768], "unment": 757, "backend_vers": 757, "_cast_for_unary_op": [757, 764, 767], "target_typ": 757, "syntax": [757, 785, 786, 795], "unsupported_dtyp": 757, "supported_dtypes_and_devic": 757, "with_unsupported_device_and_dtyp": 757, "globals_getter_func": 757, "f1": 757, "f2": 757, "lack": [757, 767, 795, 802], "mandat": [757, 767, 770, 771, 786], "confus": [757, 761, 767, 773, 783, 787], "inconsist": [757, 761, 766], "84530": 757, "unwarr": 757, "risk": [757, 801], "needlessli": 757, "bloat": 757, "undergo": [757, 781], "supported_dtyp": 757, "unsupported_devic": 757, "supported_devic": 757, "downsid": 757, "undesir": 757, "accomplish": 757, "upcast_data_typ": 757, "downcast_data_typ": 757, "crosscast_data_typ": 757, "cast_data_typ": 757, "downcast_data_dtyp": 757, "tri": 757, "vice": 757, "versa": 757, "till": 757, "crosscast": 757, "exmp1": 757, "watch": [757, 768], "handle_numpy_arrays_in_specific_backend": [757, 763], "cate": 757, "understood": 757, "consumpt": [757, 799], "dual": 758, "categor": [758, 764, 768], "210": 758, "_handle_except": [758, 761], "1013": 758, "_handle_nest": [758, 761], "905": 758, "_handle_out_argu": [758, 761], "441": 758, "_inputs_to_native_arrai": [758, 761], "new_arg": [758, 761], "new_kwarg": [758, 761], "_outputs_to_ivy_arrai": [758, 761], "358": 758, "_handle_array_funct": [758, 761], "863": 758, "_handle_device_shift": 758, "handle_device_shift": [758, 765], "crucial": [758, 766], "device_shifting_dev": 758, "__enter__": 758, "__exit__": 758, "mostli": [758, 767, 770], "soft_devic": 758, "eight": [759, 774], "op_nam": 759, "__r": 759, "unsurprisingli": [759, 785], "recap": [759, 779], "combinatori": 759, "okai": [759, 773, 775], "spec": [759, 760], "my_func": [759, 771], "some_flag": 759, "another_flag": 759, "jointli": 759, "5574077": 759, "1850398": 759, "5463025": 759, "8422884": 759, "91601413": 759, "9647598": 759, "3738229": 759, "1597457": 759, "0963247": 759, "9955841": 759, "3278579": 759, "asid": 759, "increasingli": [759, 789], "14254655": 759, "1578213": 759, "380515": 759, "trivial": [759, 767], "exlud": 759, "failing_fn_nam": 759, "onlin": [759, 760], "minutest": 759, "suffici": [759, 768, 770], "fault": [759, 795], "contrast": [760, 763, 768, 801], "preview": 760, "incorrectli": [760, 789], "needless": [760, 769], "renam": [760, 768], "judgment": 760, "operator_nam": 760, "succinct": 760, "docst": 760, "native_error": 761, "_combine_messag": 761, "truli": [761, 777], "wrong": [761, 762, 765, 768, 773], "198": 761, "392": 761, "_handle_array_like_without_promot": 761, "805": 761, "432": 761, "349": 761, "other_test": 761, "523": 761, "_handle_numpy_out": 761, "396": [761, 779], "_outputs_to_numpy_arrai": 761, "_inputs_to_ivy_arrays_np": 761, "ivy_arg": 761, "ivy_kwarg": 761, "453": 761, "_from_zero_dim_arrays_to_scalar": 761, "truth_value_test": 761, "visibl": 761, "unwieldi": 761, "awar": [761, 762], "squash": 761, "hide": [761, 789], "cleaner": [761, 778], "caught": [761, 762], "rethrow": 761, "_print_traceback_histori": 761, "error_stack": 761, "axiserror": 761, "polici": [761, 765, 770, 772], "moreov": 761, "met": 761, "black": 762, "flake8": 762, "formatt": 762, "encourag": [762, 781, 786], "linter": 762, "autoflak": 762, "docformatt": 762, "pydocstyl": 762, "wip": [762, 789], "yaml": 762, "patch1687898304": 762, "8072": 762, "3516aed563": 762, "reformat": 762, "akshai": 762, "jain": 762, "gui": 762, "cryptic": 762, "garden": 762, "utc": 762, "didn": 762, "human": 762, "intervent": 762, "typo": 762, "ui": 762, "handle_array_like_without_promot": [763, 765], "to_native_arrays_and_back": [763, 765, 775], "handle_array_funct": [763, 765], "inputs_to_native_shap": [763, 765], "rational": [763, 767, 773], "__div__": [763, 773], "484": 763, "annot": 763, "brittl": 763, "freeli": 763, "inde": [763, 773, 781, 793], "original_typ": 763, "cumbersom": 763, "hinder": [763, 785], "venn": 764, "diagram": [764, 801], "light": [764, 771, 781, 783, 796, 801], "maximis": 764, "array_arg": 764, "encompass": 764, "partial_mixed_handl": [764, 765, 773], "handle_partial_mixed_funct": [764, 765, 773], "fn_decor": 764, "mixed_backend_wrapp": [764, 767], "to_add": 764, "to_skip": 764, "inputs_to_ivy_arrai": [764, 765], "modif": [764, 795], "briefli": [764, 770, 778], "get_all_arrays_on_dev": 764, "outputs_to_ivy_shap": 765, "outputs_to_native_arrai": 765, "handle_view_index": [765, 767], "handle_view": [765, 767], "handle_rag": 765, "handle_backend_invalid": 765, "handle_nan": 765, "to_native_shapes_and_back": 765, "modern": [766, 785, 786, 800], "inter_func": 766, "custom_grad_fn": 766, "args1": 766, "eas": [766, 795], "captur": [766, 770, 780, 796], "program": [767, 792, 793, 795, 798, 799, 802], "speak": 767, "val_n": 767, "base_idx": 767, "_manipulation_stack": 767, "base_flat": 767, "_view_ref": 767, "_update_view": 767, "contigu": 767, "c_contigu": 767, "ascontiguousarrai": 767, "copyto": 767, "_is_vari": 767, "tensor_scatter_nd_upd": 767, "is_vari": 767, "_update_torch_view": 767, "predominantli": [767, 771], "support_native_out": [767, 775], "_scalar_output_to_0d_arrai": 767, "_wrap_fn": 767, "dim0": 767, "dim1": 767, "res_floor": 767, "mul": [767, 777], "extent": [767, 768], "to_out_fn": 767, "add_wrapp": 767, "paradigm": [767, 781, 795], "expans": 767, "brief": [767, 770], "weak": 767, "_torch_bas": 767, "_torch_view_ref": 767, "_torch_manipul": 767, "weakli": 767, "adequ": 767, "exhaust": [767, 770, 792, 801], "tf_frontend": 768, "lax": [768, 769, 773, 780, 781], "fn_tree": [768, 769, 770], "torch_frontend": [768, 769], "numpy_frontend": 768, "jax_frontend": 768, "to_ivy_arrays_and_back": [768, 769], "fidel": 768, "algebra": [768, 793, 794, 795, 798, 802], "xla": [768, 781, 783, 795], "dynamic": 768, "mimic": 768, "arithmetic_oper": 768, "handle_numpy_out": 768, "handle_numpy_dtyp": 768, "handle_numpy_cast": 768, "from_zero_dim_arrays_to_scalar": 768, "_add": 768, "same_kind": 768, "subok": [768, 769, 773], "promote_types_of_numpy_input": 768, "univers": [768, 785], "underscor": 768, "front": [768, 774, 775, 778, 785, 793, 795], "unhandl": 768, "trigonometric_funct": 768, "_tan": 768, "check_tensorflow_cast": 768, "raw_op": [768, 769], "tackl": 768, "map_raw_ops_alia": 768, "output_typ": 768, "kwargs_to_upd": 768, "pointwise_op": 768, "sensibl": 768, "ahead": [768, 771, 795], "reduce_logsumexp": 768, "input_tensor": 768, "logsumexp": 768, "trick": 768, "max_input_tensor": 768, "meet": 768, "preferred_element_typ": 768, "languag": [768, 775, 783, 785, 787, 793, 796, 798, 799, 800, 801], "offer": [768, 779, 787, 795, 801, 802], "finer": 768, "logicaland": 768, "np_frontend": 768, "_ivy_arrai": 768, "radd": 768, "_init_data": 768, "_process_str_data": 768, "_dtype": [768, 769, 777], "_shape": [768, 777], "govern": 768, "promote_types_of_": 768, "_input": 768, "promote_types_of_torch_input": [768, 769], "handle_numpy_casting_speci": 768, "new_fn": 768, "equiv": 768, "unsaf": 768, "array_type_test": 768, "_isfinit": 768, "organis": 768, "grasp": 768, "youtub": 768, "knowledg": 769, "handle_frontend_test": [769, 770], "handle_frontend_method": [769, 770], "test_frontend_funct": 769, "get_dtyp": [769, 770], "dtype_and_valu": [769, 770], "get_shap": [769, 770], "np_frontend_help": 769, "test_jax": 769, "test_lax": 769, "test_oper": 769, "available_dtyp": [769, 770], "test_with_out": [769, 770], "test_jax_tan": 769, "input_dtyp": [769, 770], "backend_to_test": 769, "test_numpi": 769, "test_mathematical_funct": 769, "test_trigonometric_funct": 769, "dtypes_values_cast": 769, "dtypes_values_casting_dtyp": 769, "arr_func": 769, "number_positional_arg": 769, "get_num_positional_args_ufunc": 769, "test_numpy_tan": 769, "handle_where_and_array_bool": 769, "test_tensorflow": 769, "test_math": 769, "test_tensorflow_tan": 769, "test_pointwise_op": 769, "test_torch_tan": 769, "_fill_valu": 769, "update_backend": 769, "test_glob": 769, "min_valu": [769, 770], "max_valu": [769, 770], "allow_non": [769, 770], "min_num_dim": [769, 770], "max_num_dim": [769, 770], "min_dim_s": [769, 770], "max_dim_s": 769, "test_jax_ful": 769, "test_from_shape_or_valu": 769, "_input_fill_and_dtyp": 769, "dtype_and_input": 769, "large_abs_safety_factor": [769, 770], "small_abs_safety_factor": 769, "safety_factor_scal": [769, 770], "dtype_to_cast": 769, "input_fill_dtyp": 769, "test_numpy_ful": 769, "test_raw_op": 769, "test_tensorflow_fil": 769, "test_creation_op": 769, "with_arrai": 769, "sampled_from": [769, 770], "test_torch_ful": 769, "test_valu": [769, 770], "add_nois": 769, "all_clos": 769, "_get_dtype_and_matrix": 769, "test_torch_qr": 769, "frontend_ret": 769, "frontend_q": 769, "frontend_r": 769, "assert_all_clos": 769, "ret_np": 769, "ret_from_gt_np": 769, "walkthrough": 769, "comparison_op": 769, "test_comparison_op": 769, "num_arrai": [769, 770], "allow_inf": [769, 770], "shared_dtyp": 769, "test_torch_great": 769, "all_alias": 769, "class_tre": 769, "init_tre": 769, "method_nam": 769, "test_frontend_method": 769, "init_input_dtyp": 769, "init_all_as_kwargs_np": 769, "intial": 769, "method_input_dtyp": 769, "method_all_as_kwargs_np": 769, "test_ndarrai": 769, "test_numpy_instance_add__": 769, "frontend_method_data": 769, "init_flag": [769, 770], "method_flag": [769, 770], "test_tensorflow_instance_add": 769, "method_tre": [769, 770], "1e04": 769, "allow_infin": 769, "test_torch_instance_add": 769, "atol_": 769, "_arrays_idx_n_dtyp": 769, "test_manipul": [769, 770], "surprisingli": 769, "closest_relevant_group": 769, "strive": [769, 770, 773, 781, 797], "fixtur": 770, "hit": [770, 775, 789], "eleg": [770, 795], "unexplor": 770, "artifact": 770, "bespok": 770, "_array_or_typ": 770, "rigor": [770, 785], "test_default_int_dtyp": 770, "clariti": [770, 773, 795], "print_hypothesis_exampl": 770, "searchstrategi": 770, "custom_strategi": 770, "randomis": 770, "simplist": 770, "intricaci": 770, "glanc": 770, "one_of": 770, "datum": 770, "pipe": 770, "array_or_scal": 770, "len_of_arrai": 770, "test_add": 770, "gradient_test": 770, "test_gpu_is_avail": 770, "handle_test": 770, "pretest": 770, "handle_method": 770, "snippet": [770, 790], "as_variable_flag": 770, "min_siz": 770, "max_siz": 770, "native_array_flag": 770, "container_flag": 770, "test_instance_method": 770, "test_inplac": 770, "criterion": 770, "array_valu": 770, "valid_ax": 770, "craft": 770, "hoc": 770, "44758124e": 770, "11228": 770, "268": 770, "wherev": 770, "dtype_values_axi": 770, "9622": 770, "28136": 770, "6375": 770, "12720": 770, "21354": 770, "900e": 770, "955e": 770, "exclude_min": 770, "57384": 770, "25687": 770, "248": 770, "array_dtyp": 770, "array_bool": 770, "test_devic": 770, "array_shap": 770, "common_shap": 770, "test_lay": 770, "size_bound": 770, "reshape_shap": 770, "stand": 770, "some_sequ": 770, "allow_nan": 770, "allow_subnorm": 770, "get_bound": 770, "arrays_valu": 770, "36418": 770, "213": 770, "21716926": 770, "none_or_list_of_float": 770, "get_prob": 770, "103515625e": 770, "099609375": 770, "probabilist": 770, "get_axi": 770, "number_positional_argu": 770, "unreproduc": 770, "x_and_linear": 770, "mixed_fn_compo": 770, "is_torch_backend": 770, "x_shape": [770, 775], "weight_shap": 770, "bias_shap": 770, "ivy_np": 770, "valid_float_dtyp": 770, "test_demo": 770, "failing_test": 770, "traceback": 770, "shrink": 770, "prescrib": 770, "scratch": 770, "therebi": 770, "test_gelu": 770, "test_fil": 770, "phase": [770, 781, 795], "notabl": [770, 795], "newer": 770, "max_exampl": 770, "deadlin": 770, "weird": 770, "systemat": 770, "safeguard": 770, "inabl": 770, "test_result_typ": 770, "9090909090909091": 770, "judgement": 771, "some_namespac": 771, "some_backend": 771, "another_backend": 771, "refactor": 771, "ongo": 771, "_assert_fill_value_and_dtype_are_compat": 771, "_to_devic": 771, "shouldn": [771, 789], "pin": 771, "unpinn": 771, "culmin": 771, "unsett": 772, "array_significant_figur": 772, "signific": [772, 781, 785, 786, 795], "array_decimal_valu": 772, "warning_level": 772, "nan_polici": 772, "stablest": 772, "constantli": [773, 785], "answer": [773, 777, 781], "contradict": 773, "entail": 773, "sacrif": 773, "jacfwd": 773, "jacrev": 773, "banner": 773, "expens": 773, "incredibli": [773, 778, 781, 798], "price": 773, "pai": 773, "intrus": 773, "x_beta": 773, "equip": 773, "priorit": 773, "simplif": 773, "allevi": 773, "ineffici": [773, 781, 795], "fuse": 773, "hybrid": 773, "workaround": 773, "slip": 773, "radar": 773, "stumbl": 773, "gone": [774, 786], "fulfil": 774, "syntact": [775, 780], "power_seq": 775, "backend_stack": 775, "_determine_backend_from_arg": 775, "importlib": 775, "_backend_dict": 775, "x_flat": 775, "wi": 775, "wi_x": 775, "wii_x": 775, "wif_x": 775, "wig_x": 775, "wio_x": 775, "wh": 775, "ht": 775, "ct": 775, "hts_list": 775, "wii_xt": 775, "wif_xt": 775, "wig_xt": 775, "wio_xt": 775, "htm1": 775, "ctm1": 775, "wh_htm1": 775, "whi_htm1": 775, "whf_htm1": 775, "whg_htm1": 775, "who_htm1": 775, "ft": 775, "ot": 775, "reliabl": 775, "scalabl": [775, 785, 800, 801], "sacrific": 775, "hear": 775, "virtu": [775, 792], "pure_ivi": 775, "pure_torch": 775, "unclean": 775, "wx": 775, "temp": 775, "ivy_func": 775, "emphas": 775, "torchscript": [775, 783, 802], "example_input": 775, "static_argnum": [775, 789], "static_argnam": [775, 789], "primit": [776, 781, 793, 795], "upcom": 776, "hierarch": [776, 778, 779, 795], "arraywithactiv": 777, "arraywithcr": 777, "arraywithdatatyp": 777, "arraywithdevic": 777, "arraywithgener": 777, "arraywithgradi": 777, "arraywithimag": 777, "arraywithlay": 777, "arraywithlinearalgebra": 777, "arraywithloss": 777, "arraywithmanipul": 777, "arraywithnorm": 777, "arraywithrandom": 777, "arraywithsearch": 777, "arraywithset": 777, "arraywithsort": 777, "arraywithstatist": 777, "arraywithutil": 777, "_init": 777, "_size": 777, "_devic": 777, "_dev_str": 777, "_pre_repr": 777, "_post_repr": 777, "framework_str": 777, "pypep8nam": 777, "motiv": [777, 786], "immut": 777, "claim": 777, "_native_wrapp": 777, "genuin": 777, "some_method": 777, "rewritten": 777, "littl": [777, 785, 797], "wonder": [777, 785, 787], "compartment": 777, "newshap": 777, "new_shap": 777, "tidi": 777, "crystal": 777, "ton": 778, "ado": [778, 779], "arbitrarili": 778, "soup": 778, "walk": [778, 779], "cnt": 778, "3333335": 778, "delimit": 778, "autocomplet": 778, "midwai": 778, "agent": 778, "total_spe": 778, "total_height": 778, "total_width": 778, "ag": 778, "tot": 778, "total_": 778, "total_h": 778, "cnt0": 778, "cnt1": 778, "diff_0": 778, "diff_1": 778, "config0": 778, "config1": 778, "l0": 778, "decoder__l0": 778, "decoder__l1": 778, "encoder__l0": 778, "encoder__l1": 778, "l0__b": 778, "l0__w": 778, "l1__b": 778, "l1__w": 778, "printabl": 778, "obviou": [778, 795], "foresight": 778, "untidili": 778, "update_ag": 778, "normalize_img": 778, "img_max": 778, "reduce_max": 778, "img_min": 778, "reduce_min": 778, "img_rang": 778, "agent_posit": 778, "agent_veloc": 778, "agent_cam_front_rgb": 778, "agent_cam_front_depth": 778, "agent_cam_rear_rgb": 778, "agent_cam_rear_depth": 778, "agent_cam_lidar": 778, "camera": 778, "front_rgb": 778, "front_depth": 778, "rear_rgb": 778, "rear_depth": 778, "lidar": 778, "rgb": 778, "rear": 778, "veloc": 778, "cam": 778, "cam_max": 778, "cam_min": 778, "cam_rang": 778, "five": 778, "allud": [778, 786], "perman": 778, "thread": [778, 795], "straightforward": 778, "dataload": 778, "_cnt": 778, "img_": 778, "_dataset_s": 778, "_batch_siz": 778, "_count": [778, 779], "__next__": 778, "img_fnam": 778, "loaded_img": 778, "batch_slic": 778, "0145": 778, "addbackward0": 778, "_create_vari": 779, "_input_channel": 779, "_output_channel": 779, "_w_shape": 779, "_b_shape": 779, "_with_bia": 779, "764": 779, "872": 779, "211": 779, "439": 779, "nightmar": 779, "overcom": 779, "v1": 779, "key0": 779, "linear3": 779, "v2": 779, "counter": 779, "preced": [779, 786], "_w_init": 779, "_b_init": 779, "misnom": 779, "saw": 779, "_beta1": 779, "_beta2": 779, "_epsilon": 779, "_mw": 779, "_vw": 779, "_first_pass": 779, "_should_compil": 779, "new_v": 779, "_lr": 779, "_inplac": 779, "_stop_gradi": 779, "sparse_funct": 780, "vital": [780, 785], "_linear": 780, "jax_graph": 780, "to_backend": 780, "thinli": 780, "to_haiku_modul": 780, "loss_fn_t": 780, "without_apply_rng": 780, "update_rul": 780, "tree_multimap": 780, "trax": [780, 787], "objax": [780, 787], "matur": [781, 786, 795], "doubt": 781, "grate": 781, "probe": 781, "remark": 781, "strong": [781, 786, 795], "lock": 781, "gold": 781, "dex": 781, "tricki": [781, 783], "predictor": 781, "tight": 781, "driver": 781, "dispatch": [781, 795, 798], "ast": 781, "autodiff": 781, "shine": 781, "merci": 781, "compet": [781, 795], "parallelis": 781, "spmd": 781, "mixtur": 781, "expert": 781, "sophist": 781, "depart": 781, "hundr": 781, "thousand": 781, "broadli": [781, 801], "supplementari": 781, "reusabl": [781, 793, 795], "fanci": [781, 795], "fusion": [781, 799], "lose": 781, "pmap": 781, "eventu": 781, "supplement": 781, "backdoor": 781, "callback": 781, "door": 781, "record": [781, 796], "somewhat": [781, 795], "outsourc": 781, "ivy_root": 782, "pem": 782, "api_kei": 782, "asap": 782, "nail": 783, "scientist": 783, "correl": 783, "collabor": [784, 785, 786], "consortium": [784, 786], "grown": 785, "rapidli": 785, "evolv": [785, 795], "shareabl": 785, "outdat": 785, "newest": 785, "prototyp": [785, 795], "bottleneck": 785, "obsolet": [785, 787], "invent": 785, "simultan": [785, 787], "runner": 785, "principl": [785, 793, 795, 798], "2006": 785, "cloth": 785, "forgiven": 786, "eyebrow": 786, "somehow": 786, "industri": [786, 795, 797], "funni": 786, "comic": 786, "charger": 786, "instant": 786, "contrari": 786, "bumpi": 786, "road": 786, "technologi": [786, 793, 797], "pcie": 786, "motherboard": 786, "raid": 786, "bluetooth": 786, "wireless": 786, "btx": 786, "sata": 786, "tcp": 786, "ip": 786, "smtp": 786, "send": [786, 800], "outlook": 786, "innov": 786, "growth": [786, 798], "necess": 786, "2015": [786, 795], "aros": 786, "mission": [786, 797], "ourselv": [786, 801], "quansight": [786, 801], "compani": [786, 791], "apach": [786, 797, 801], "onnx": [786, 793, 801], "cupi": [786, 795, 802], "sympi": 786, "modin": 786, "spyder": 786, "octoml": [786, 801], "sponsor": 786, "lg": 786, "electron": 786, "shaw": 786, "pursuit": 786, "complianc": 786, "convinc": 786, "celebr": 786, "perfectli": 787, "abund": 787, "streamlin": [787, 798], "awesom": 787, "love": 787, "slew": 787, "inevit": [787, 796], "erron": 787, "poor": 787, "spin": 787, "sake": 787, "wouldn": 787, "frantic": 787, "port": 787, "lucid": 787, "honk": 787, "hasn": 787, "spend": [787, 795], "sonnet": 787, "trainer": [787, 802], "quo": 787, "dopamin": 787, "ignit": 787, "catalyst": 787, "lightn": 787, "fastai": 787, "publicli": [789, 790], "logger": 789, "include_gener": 789, "array_cach": 789, "lazygraph": [789, 790], "sum_j": 789, "compiled_fn": 789, "impos": 789, "comp_func": 789, "trade": 789, "bake": 789, "cont": 789, "new_attribut": 789, "resnet50": 789, "breed": 789, "autoimageprocessor": [789, 790], "resnetforimageclassif": [789, 790], "compiled_graph": 789, "predicted_label": 789, "debug_mod": 790, "transpile_kwarg": 790, "transpiled_func": 790, "unified_func": 790, "rough": 790, "transformed_with_st": 790, "bigger": 790, "hf": 790, "tf_model": 790, "tf_input": 790, "conceptu": [791, 796], "broken": [791, 795], "rwork": 791, "tracer": 791, "vendor": [791, 797], "complimentari": [791, 801], "acycl": [791, 796], "insert_numb": 792, "insert_t": 792, "scaffold": [793, 801], "heart": 793, "toolchain": [793, 798], "ir": [793, 796, 801], "assembli": [793, 800, 801], "idl": 793, "middl": 793, "emit": 793, "gnu": [793, 798], "broader": 793, "heterogen": 793, "aid": 793, "coprocessor": 793, "programm": [793, 800], "gate": 793, "onednn": 793, "sit": [793, 796, 801], "tandem": 793, "possess": 793, "khrono": [794, 800], "appl": 794, "coremltool": 794, "albeit": 794, "promin": 795, "abbrevi": 795, "laboratori": 795, "proprietari": [795, 799, 800], "mathwork": 795, "commerci": 795, "1984": 795, "toolbox": 795, "mupad": 795, "simulink": 795, "graphic": [795, 799, 800], "simul": 795, "million": [795, 798], "worldwid": 795, "scienc": [795, 797], "econom": 795, "2001": 795, "scientif": 795, "od": 795, "solver": 795, "cython": 795, "friendli": 795, "2002": 795, "lua": 795, "luajit": 795, "idiap": 795, "epfl": 795, "2005": 795, "numarrai": 795, "cpython": 795, "partli": 795, "2007": 795, "forest": 795, "boost": 795, "dbscan": 795, "inbuilt": 795, "esqu": 795, "aesara": 795, "datafram": 795, "2012": 795, "Its": 795, "polymorph": 795, "mpi": 795, "openmp": 795, "glue": 795, "jaot": 795, "nasa": 795, "cern": 795, "climat": 795, "allianc": 795, "influenti": 795, "2014": 795, "scala": 795, "ship": 795, "forgiv": 795, "decemb": 795, "announc": 795, "mainten": 795, "v7": 795, "meaning": 795, "2016": 795, "imper": 795, "amazon": 795, "traction": 795, "cognit": [795, 802], "toolkit": [795, 796, 802], "grade": 795, "realiz": 795, "dnn": 795, "rnn": 795, "backpropag": 795, "succumb": 795, "came": 795, "monitor": 795, "practition": [795, 799, 800, 801], "hobbyist": 795, "tremend": 795, "ecosystem": 795, "gear": 795, "batteri": 795, "zygot": 795, "jl": 795, "workload": 795, "daggerflux": 795, "frontier": 795, "hessian": 795, "2018": 795, "lightweight": [795, 802], "shortcom": 795, "barrier": 795, "inexperienc": 795, "underdevelop": 795, "fanat": 795, "ounc": 795, "infanc": 795, "emerg": 795, "nich": 795, "mobil": 795, "lite": 795, "enterpris": 795, "reinvent": [795, 797], "inertia": 795, "creator": [795, 797], "paszk": 795, "hi": 795, "safeti": 795, "bulk": 795, "haskel": 795, "dataflow": 796, "enclos": 796, "trace_modul": 796, "scriptfunct": 796, "scriptmodul": 796, "fake": 796, "proxi": 796, "site": 796, "graphmodul": 796, "travi": 797, "oliph": 797, "leader": 797, "cornerston": 797, "numba": 797, "numfocu": 797, "pydata": 797, "confer": 797, "consult": 797, "servic": 797, "expertis": 797, "devop": 797, "mlop": 797, "dashboard": 797, "startup": 797, "mlir": [797, 798, 801], "Their": 797, "held": 797, "privileg": 797, "presum": 797, "llvm": [797, 800], "founder": 797, "tvm": [797, 801], "sustain": 797, "empow": 797, "har": 797, "burden": 797, "benchmark": 797, "convention": 798, "precompil": 798, "executor": 798, "julia": [798, 801], "fsf": 798, "gpl": 798, "biggest": [798, 801], "conduct": 799, "throughput": 799, "autotun": 799, "gpgpu": 799, "classic": 800, "sycl": 800, "dpc": 800, "processor": 800, "maco": 800, "x86": 800, "oneapi": 800, "ia": 800, "aka": 800, "xeon": 800, "gen9": 800, "xe": 800, "arria": 800, "gx": 800, "fpga": 800, "lofti": 801, "ambit": 801, "realm": 801, "bedrock": 801, "flux": 801, "bite": 801, "chew": 801, "eagerpi": 801, "tensorli": 801, "thinc": 801, "neuropod": 801, "emploi": 801, "fx": 801, "retrain": 801, "closer": 801, "greatli": 801, "modular": 801, "anywher": 801, "theano": 802, "plaidml": 802, "partial_svd": 802, "excel": 802, "subsystem": 802}, "objects": {"ivy.Array": [[211, 0, 1, "", "abs"], [212, 0, 1, "", "acos"], [213, 0, 1, "", "acosh"], [564, 0, 1, "", "adam_step"], [565, 0, 1, "", "adam_update"], [361, 0, 1, "", "adaptive_avg_pool1d"], [362, 0, 1, "", "adaptive_avg_pool2d"], [363, 0, 1, "", "adaptive_max_pool2d"], [214, 0, 1, "", "add"], [391, 0, 1, "", "adjoint"], [714, 0, 1, "", "all"], [484, 0, 1, "", "all_equal"], [312, 0, 1, "", "allclose"], [215, 0, 1, "", "angle"], [715, 0, 1, "", "any"], [691, 0, 1, "", "argmax"], [692, 0, 1, "", "argmin"], [700, 0, 1, "", "argsort"], [693, 0, 1, "", "argwhere"], [487, 0, 1, "", "array_equal"], [417, 0, 1, "", "as_strided"], [120, 0, 1, "", "asarray"], [216, 0, 1, "", "asin"], [217, 0, 1, "", "asinh"], [488, 0, 1, "", "assert_supports_inplace"], [418, 0, 1, "", "associative_scan"], [143, 0, 1, "", "astype"], [218, 0, 1, "", "atan"], [219, 0, 1, "", "atan2"], [220, 0, 1, "", "atanh"], [419, 0, 1, "", "atleast_1d"], [420, 0, 1, "", "atleast_2d"], [421, 0, 1, "", "atleast_3d"], [365, 0, 1, "", "avg_pool1d"], [366, 0, 1, "", "avg_pool2d"], [367, 0, 1, "", "avg_pool3d"], [453, 0, 1, "", "batch_norm"], [459, 0, 1, "", "bernoulli"], [460, 0, 1, "", "beta"], [313, 0, 1, "", "binarizer"], [643, 0, 1, "", "binary_cross_entropy"], [471, 0, 1, "", "bincount"], [221, 0, 1, "", "bitwise_and"], [222, 0, 1, "", "bitwise_invert"], [223, 0, 1, "", "bitwise_left_shift"], [224, 0, 1, "", "bitwise_or"], [225, 0, 1, "", "bitwise_right_shift"], [226, 0, 1, "", "bitwise_xor"], [295, 0, 1, "", "blackman_window"], [144, 0, 1, "", "broadcast_arrays"], [145, 0, 1, "", "broadcast_to"], [146, 0, 1, "", "can_cast"], [227, 0, 1, "", "ceil"], [613, 0, 1, "", "cholesky"], [646, 0, 1, "", "clip"], [490, 0, 1, "", "clip_matrix_norm"], [491, 0, 1, "", "clip_vector_norm"], [647, 0, 1, "", "concat"], [424, 0, 1, "", "concat_from_sequence"], [392, 0, 1, "", "cond"], [314, 0, 1, "", "conj"], [648, 0, 1, "", "constant_pad"], [599, 0, 1, "", "conv1d"], [600, 0, 1, "", "conv1d_transpose"], [601, 0, 1, "", "conv2d"], [602, 0, 1, "", "conv2d_transpose"], [603, 0, 1, "", "conv3d"], [604, 0, 1, "", "conv3d_transpose"], [121, 0, 1, "", "copy_array"], [315, 0, 1, "", "copysign"], [472, 0, 1, "", "corrcoef"], [228, 0, 1, "", "cos"], [229, 0, 1, "", "cosh"], [316, 0, 1, "", "count_nonzero"], [473, 0, 1, "", "cov"], [614, 0, 1, "", "cross"], [644, 0, 1, "", "cross_entropy"], [474, 0, 1, "", "cummax"], [475, 0, 1, "", "cummin"], [704, 0, 1, "", "cumprod"], [705, 0, 1, "", "cumsum"], [368, 0, 1, "", "dct"], [494, 0, 1, "", "default"], [230, 0, 1, "", "deg2rad"], [607, 0, 1, "", "depthwise_conv2d"], [615, 0, 1, "", "det"], [188, 0, 1, "", "dev"], [369, 0, 1, "", "dft"], [616, 0, 1, "", "diag"], [393, 0, 1, "", "diagflat"], [617, 0, 1, "", "diagonal"], [317, 0, 1, "", "diff"], [318, 0, 1, "", "digamma"], [461, 0, 1, "", "dirichlet"], [231, 0, 1, "", "divide"], [394, 0, 1, "", "dot"], [608, 0, 1, "", "dropout"], [370, 0, 1, "", "dropout1d"], [371, 0, 1, "", "dropout2d"], [372, 0, 1, "", "dropout3d"], [425, 0, 1, "", "dsplit"], [426, 0, 1, "", "dstack"], [154, 0, 1, "", "dtype"], [618, 0, 1, "", "eig"], [619, 0, 1, "", "eigh"], [396, 0, 1, "", "eigh_tridiagonal"], [397, 0, 1, "", "eigvals"], [620, 0, 1, "", "eigvalsh"], [495, 0, 1, "", "einops_rearrange"], [496, 0, 1, "", "einops_reduce"], [497, 0, 1, "", "einops_repeat"], [706, 0, 1, "", "einsum"], [286, 0, 1, "", "elu"], [373, 0, 1, "", "embedding"], [123, 0, 1, "", "empty_like"], [232, 0, 1, "", "equal"], [233, 0, 1, "", "erf"], [498, 0, 1, "", "exists"], [234, 0, 1, "", "exp"], [235, 0, 1, "", "exp2"], [427, 0, 1, "", "expand"], [649, 0, 1, "", "expand_dims"], [236, 0, 1, "", "expm1"], [296, 0, 1, "", "eye_like"], [374, 0, 1, "", "fft"], [375, 0, 1, "", "fft2"], [428, 0, 1, "", "fill_diagonal"], [156, 0, 1, "", "finfo"], [319, 0, 1, "", "fix"], [429, 0, 1, "", "flatten"], [650, 0, 1, "", "flip"], [430, 0, 1, "", "fliplr"], [431, 0, 1, "", "flipud"], [320, 0, 1, "", "float_power"], [237, 0, 1, "", "floor"], [238, 0, 1, "", "floor_divide"], [321, 0, 1, "", "fmax"], [239, 0, 1, "", "fmin"], [240, 0, 1, "", "fmod"], [432, 0, 1, "", "fold"], [499, 0, 1, "", "fourier_encode"], [322, 0, 1, "", "frexp"], [125, 0, 1, "", "from_dlpack"], [128, 0, 1, "", "full_like"], [462, 0, 1, "", "gamma"], [502, 0, 1, "", "gather"], [503, 0, 1, "", "gather_nd"], [241, 0, 1, "", "gcd"], [101, 0, 1, "", "gelu"], [398, 0, 1, "", "general_inner_product"], [506, 0, 1, "", "get_num_dims"], [323, 0, 1, "", "gradient"], [568, 0, 1, "", "gradient_descent_update"], [242, 0, 1, "", "greater"], [243, 0, 1, "", "greater_equal"], [454, 0, 1, "", "group_norm"], [102, 0, 1, "", "hardswish"], [508, 0, 1, "", "has_nans"], [433, 0, 1, "", "heaviside"], [476, 0, 1, "", "histogram"], [434, 0, 1, "", "hsplit"], [435, 0, 1, "", "hstack"], [412, 0, 1, "", "huber_loss"], [324, 0, 1, "", "hypot"], [436, 0, 1, "", "i0"], [378, 0, 1, "", "idct"], [379, 0, 1, "", "ifft"], [380, 0, 1, "", "ifftn"], [477, 0, 1, "", "igamma"], [159, 0, 1, "", "iinfo"], [244, 0, 1, "", "imag"], [399, 0, 1, "", "initialize_tucker"], [621, 0, 1, "", "inner"], [510, 0, 1, "", "inplace_decrement"], [511, 0, 1, "", "inplace_increment"], [512, 0, 1, "", "inplace_update"], [455, 0, 1, "", "instance_norm"], [382, 0, 1, "", "interpolate"], [622, 0, 1, "", "inv"], [514, 0, 1, "", "is_array"], [162, 0, 1, "", "is_bool_dtype"], [164, 0, 1, "", "is_float_dtype"], [166, 0, 1, "", "is_int_dtype"], [515, 0, 1, "", "is_ivy_array"], [516, 0, 1, "", "is_ivy_container"], [518, 0, 1, "", "is_native_array"], [168, 0, 1, "", "is_uint_dtype"], [325, 0, 1, "", "isclose"], [245, 0, 1, "", "isfinite"], [519, 0, 1, "", "isin"], [246, 0, 1, "", "isinf"], [247, 0, 1, "", "isnan"], [248, 0, 1, "", "isreal"], [521, 0, 1, "", "itemsize"], [401, 0, 1, "", "kron"], [413, 0, 1, "", "l1_loss"], [456, 0, 1, "", "l1_normalize"], [457, 0, 1, "", "l2_normalize"], [570, 0, 1, "", "lamb_update"], [571, 0, 1, "", "lars_update"], [684, 0, 1, "", "layer_norm"], [249, 0, 1, "", "lcm"], [326, 0, 1, "", "ldexp"], [103, 0, 1, "", "leaky_relu"], [327, 0, 1, "", "lerp"], [250, 0, 1, "", "less"], [251, 0, 1, "", "less_equal"], [466, 0, 1, "", "lexsort"], [328, 0, 1, "", "lgamma"], [609, 0, 1, "", "linear"], [129, 0, 1, "", "linspace"], [252, 0, 1, "", "log"], [253, 0, 1, "", "log10"], [254, 0, 1, "", "log1p"], [255, 0, 1, "", "log2"], [104, 0, 1, "", "log_softmax"], [256, 0, 1, "", "logaddexp"], [257, 0, 1, "", "logaddexp2"], [258, 0, 1, "", "logical_and"], [259, 0, 1, "", "logical_not"], [260, 0, 1, "", "logical_or"], [261, 0, 1, "", "logical_xor"], [287, 0, 1, "", "logit"], [288, 0, 1, "", "logsigmoid"], [130, 0, 1, "", "logspace"], [458, 0, 1, "", "lp_normalize"], [610, 0, 1, "", "lstm_update"], [403, 0, 1, "", "make_svd_non_negative"], [624, 0, 1, "", "matmul"], [437, 0, 1, "", "matricize"], [404, 0, 1, "", "matrix_exp"], [625, 0, 1, "", "matrix_norm"], [626, 0, 1, "", "matrix_power"], [627, 0, 1, "", "matrix_rank"], [628, 0, 1, "", "matrix_transpose"], [707, 0, 1, "", "max"], [383, 0, 1, "", "max_pool1d"], [384, 0, 1, "", "max_pool2d"], [385, 0, 1, "", "max_pool3d"], [262, 0, 1, "", "maximum"], [708, 0, 1, "", "mean"], [478, 0, 1, "", "median"], [302, 0, 1, "", "mel_weight_matrix"], [131, 0, 1, "", "meshgrid"], [709, 0, 1, "", "min"], [263, 0, 1, "", "minimum"], [105, 0, 1, "", "mish"], [405, 0, 1, "", "mode_dot"], [329, 0, 1, "", "modf"], [438, 0, 1, "", "moveaxis"], [701, 0, 1, "", "msort"], [406, 0, 1, "", "multi_dot"], [611, 0, 1, "", "multi_head_attention"], [407, 0, 1, "", "multi_mode_dot"], [685, 0, 1, "", "multinomial"], [264, 0, 1, "", "multiply"], [265, 0, 1, "", "nan_to_num"], [479, 0, 1, "", "nanmean"], [480, 0, 1, "", "nanmedian"], [481, 0, 1, "", "nanprod"], [330, 0, 1, "", "nansum"], [132, 0, 1, "", "native_array"], [266, 0, 1, "", "negative"], [331, 0, 1, "", "nextafter"], [694, 0, 1, "", "nonzero"], [267, 0, 1, "", "not_equal"], [133, 0, 1, "", "one_hot"], [135, 0, 1, "", "ones_like"], [572, 0, 1, "", "optimizer_update"], [483, 0, 1, "", "optional_get_element"], [629, 0, 1, "", "outer"], [439, 0, 1, "", "pad"], [440, 0, 1, "", "partial_fold"], [441, 0, 1, "", "partial_tensor_to_vec"], [408, 0, 1, "", "partial_tucker"], [442, 0, 1, "", "partial_unfold"], [443, 0, 1, "", "partial_vec_to_tensor"], [651, 0, 1, "", "permute_dims"], [630, 0, 1, "", "pinv"], [463, 0, 1, "", "poisson"], [268, 0, 1, "", "positive"], [269, 0, 1, "", "pow"], [289, 0, 1, "", "prelu"], [710, 0, 1, "", "prod"], [631, 0, 1, "", "qr"], [482, 0, 1, "", "quantile"], [270, 0, 1, "", "rad2deg"], [686, 0, 1, "", "randint"], [687, 0, 1, "", "random_normal"], [688, 0, 1, "", "random_uniform"], [271, 0, 1, "", "real"], [272, 0, 1, "", "reciprocal"], [337, 0, 1, "", "reduce"], [389, 0, 1, "", "reduce_window"], [106, 0, 1, "", "relu"], [290, 0, 1, "", "relu6"], [273, 0, 1, "", "remainder"], [652, 0, 1, "", "repeat"], [653, 0, 1, "", "reshape"], [171, 0, 1, "", "result_type"], [390, 0, 1, "", "rfftn"], [654, 0, 1, "", "roll"], [445, 0, 1, "", "rot90"], [274, 0, 1, "", "round"], [612, 0, 1, "", "scaled_dot_product_attention"], [526, 0, 1, "", "scatter_flat"], [527, 0, 1, "", "scatter_nd"], [702, 0, 1, "", "searchsorted"], [291, 0, 1, "", "selu"], [540, 0, 1, "", "shape"], [690, 0, 1, "", "shuffle"], [107, 0, 1, "", "sigmoid"], [275, 0, 1, "", "sign"], [332, 0, 1, "", "signbit"], [293, 0, 1, "", "silu"], [276, 0, 1, "", "sin"], [333, 0, 1, "", "sinc"], [277, 0, 1, "", "sinh"], [632, 0, 1, "", "slogdet"], [415, 0, 1, "", "smooth_l1_loss"], [416, 0, 1, "", "soft_margin_loss"], [446, 0, 1, "", "soft_thresholding"], [108, 0, 1, "", "softmax"], [109, 0, 1, "", "softplus"], [633, 0, 1, "", "solve"], [703, 0, 1, "", "sort"], [645, 0, 1, "", "sparse_cross_entropy"], [334, 0, 1, "", "sparsify_tensor"], [655, 0, 1, "", "split"], [278, 0, 1, "", "sqrt"], [279, 0, 1, "", "square"], [656, 0, 1, "", "squeeze"], [541, 0, 1, "", "stable_divide"], [542, 0, 1, "", "stable_pow"], [657, 0, 1, "", "stack"], [711, 0, 1, "", "std"], [573, 0, 1, "", "stop_gradient"], [543, 0, 1, "", "strides"], [280, 0, 1, "", "subtract"], [712, 0, 1, "", "sum"], [544, 0, 1, "", "supports_inplace_updates"], [634, 0, 1, "", "svd"], [409, 0, 1, "", "svd_flip"], [635, 0, 1, "", "svdvals"], [658, 0, 1, "", "swapaxes"], [447, 0, 1, "", "take_along_axis"], [281, 0, 1, "", "tan"], [282, 0, 1, "", "tanh"], [636, 0, 1, "", "tensordot"], [637, 0, 1, "", "tensorsolve"], [294, 0, 1, "", "thresholded_relu"], [659, 0, 1, "", "tile"], [205, 0, 1, "", "to_device"], [546, 0, 1, "", "to_list"], [548, 0, 1, "", "to_numpy"], [549, 0, 1, "", "to_scalar"], [448, 0, 1, "", "top_k"], [638, 0, 1, "", "trace"], [283, 0, 1, "", "trapz"], [136, 0, 1, "", "tril"], [308, 0, 1, "", "trilu"], [137, 0, 1, "", "triu"], [284, 0, 1, "", "trunc"], [285, 0, 1, "", "trunc_divide"], [410, 0, 1, "", "truncated_svd"], [411, 0, 1, "", "tucker"], [449, 0, 1, "", "unfold"], [696, 0, 1, "", "unique_all"], [450, 0, 1, "", "unique_consecutive"], [697, 0, 1, "", "unique_counts"], [698, 0, 1, "", "unique_inverse"], [699, 0, 1, "", "unique_values"], [464, 0, 1, "", "unravel_index"], [309, 0, 1, "", "unsorted_segment_min"], [310, 0, 1, "", "unsorted_segment_sum"], [660, 0, 1, "", "unstack"], [562, 0, 1, "", "value_is_nan"], [639, 0, 1, "", "vander"], [713, 0, 1, "", "var"], [640, 0, 1, "", "vecdot"], [641, 0, 1, "", "vector_norm"], [642, 0, 1, "", "vector_to_skew_symmetric_matrix"], [451, 0, 1, "", "vsplit"], [452, 0, 1, "", "vstack"], [695, 0, 1, "", "where"], [335, 0, 1, "", "xlogy"], [661, 0, 1, "", "zero_pad"], [140, 0, 1, "", "zeros_like"], [336, 0, 1, "", "zeta"]], "ivy": [[583, 1, 1, "", "ArrayMode"], [579, 1, 1, "", "DefaultComplexDtype"], [580, 1, 1, "", "DefaultDevice"], [579, 1, 1, "", "DefaultDtype"], [579, 1, 1, "", "DefaultFloatDtype"], [579, 1, 1, "", "DefaultIntDtype"], [579, 1, 1, "", "DefaultUintDtype"], [358, 1, 1, "", "NativeSparseArray"], [578, 1, 1, "", "NestedSequence"], [583, 1, 1, "", "PreciseMode"], [580, 1, 1, "", "Profiler"], [358, 1, 1, "", "SparseArray"], [211, 2, 1, "", "abs"], [212, 2, 1, "", "acos"], [213, 2, 1, "", "acosh"], [584, 2, 1, "", "adam_step"], [584, 2, 1, "", "adam_update"], [361, 2, 1, "", "adaptive_avg_pool1d"], [362, 2, 1, "", "adaptive_avg_pool2d"], [363, 2, 1, "", "adaptive_max_pool2d"], [214, 2, 1, "", "add"], [348, 2, 1, "", "adjoint"], [597, 2, 1, "", "all"], [583, 2, 1, "", "all_equal"], [590, 2, 1, "", "all_nested_indices"], [344, 2, 1, "", "allclose"], [215, 2, 1, "", "angle"], [597, 2, 1, "", "any"], [578, 2, 1, "", "arange"], [364, 2, 1, "", "area_interpolate"], [583, 2, 1, "", "arg_info"], [583, 2, 1, "", "arg_names"], [593, 2, 1, "", "argmax"], [593, 2, 1, "", "argmin"], [595, 2, 1, "", "argsort"], [593, 2, 1, "", "argwhere"], [578, 2, 1, "", "array"], [583, 2, 1, "", "array_equal"], [184, 2, 1, "", "as_ivy_dev"], [141, 2, 1, "", "as_ivy_dtype"], [185, 2, 1, "", "as_native_dev"], [142, 2, 1, "", "as_native_dtype"], [350, 2, 1, "", "as_strided"], [578, 2, 1, "", "asarray"], [216, 2, 1, "", "asin"], [217, 2, 1, "", "asinh"], [583, 2, 1, "", "assert_supports_inplace"], [350, 2, 1, "", "associative_scan"], [143, 2, 1, "", "astype"], [218, 2, 1, "", "atan"], [219, 2, 1, "", "atan2"], [220, 2, 1, "", "atanh"], [350, 2, 1, "", "atleast_1d"], [350, 2, 1, "", "atleast_2d"], [350, 2, 1, "", "atleast_3d"], [365, 2, 1, "", "avg_pool1d"], [366, 2, 1, "", "avg_pool2d"], [367, 2, 1, "", "avg_pool3d"], [353, 2, 1, "", "batch_norm"], [354, 2, 1, "", "bernoulli"], [354, 2, 1, "", "beta"], [344, 2, 1, "", "binarizer"], [587, 2, 1, "", "binary_cross_entropy"], [359, 2, 1, "", "bincount"], [346, 2, 1, "", "bind_custom_gradient_function"], [221, 2, 1, "", "bitwise_and"], [222, 2, 1, "", "bitwise_invert"], [223, 2, 1, "", "bitwise_left_shift"], [224, 2, 1, "", "bitwise_or"], [225, 2, 1, "", "bitwise_right_shift"], [226, 2, 1, "", "bitwise_xor"], [341, 2, 1, "", "blackman_window"], [144, 2, 1, "", "broadcast_arrays"], [350, 2, 1, "", "broadcast_shapes"], [145, 2, 1, "", "broadcast_to"], [583, 2, 1, "", "cache_fn"], [146, 2, 1, "", "can_cast"], [577, 2, 1, "", "cast_bool"], [227, 2, 1, "", "ceil"], [147, 2, 1, "", "check_float"], [613, 2, 1, "", "cholesky"], [350, 2, 1, "", "choose"], [186, 2, 1, "", "clear_cached_mem_on_dev"], [588, 2, 1, "", "clip"], [583, 2, 1, "", "clip_matrix_norm"], [583, 2, 1, "", "clip_vector_norm"], [148, 2, 1, "", "closest_valid_dtype"], [577, 2, 1, "", "cmp_is"], [577, 2, 1, "", "cmp_isnot"], [789, 2, 1, "", "compile"], [588, 2, 1, "", "concat"], [350, 2, 1, "", "concat_from_sequence"], [348, 2, 1, "", "cond"], [344, 2, 1, "", "conj"], [588, 2, 1, "", "constant_pad"], [583, 2, 1, "", "container_types"], [598, 2, 1, "", "conv"], [599, 2, 1, "", "conv1d"], [600, 2, 1, "", "conv1d_transpose"], [601, 2, 1, "", "conv2d"], [602, 2, 1, "", "conv2d_transpose"], [603, 2, 1, "", "conv3d"], [604, 2, 1, "", "conv3d_transpose"], [605, 2, 1, "", "conv_general_dilated"], [606, 2, 1, "", "conv_general_transpose"], [578, 2, 1, "", "copy_array"], [590, 2, 1, "", "copy_nest"], [344, 2, 1, "", "copysign"], [359, 2, 1, "", "corrcoef"], [228, 2, 1, "", "cos"], [229, 2, 1, "", "cosh"], [344, 2, 1, "", "count_nonzero"], [359, 2, 1, "", "cov"], [614, 2, 1, "", "cross"], [587, 2, 1, "", "cross_entropy"], [359, 2, 1, "", "cummax"], [359, 2, 1, "", "cummin"], [596, 2, 1, "", "cumprod"], [596, 2, 1, "", "cumsum"], [583, 2, 1, "", "current_backend_str"], [368, 2, 1, "", "dct"], [583, 2, 1, "", "default"], [149, 2, 1, "", "default_complex_dtype"], [187, 2, 1, "", "default_device"], [150, 2, 1, "", "default_dtype"], [151, 2, 1, "", "default_float_dtype"], [152, 2, 1, "", "default_int_dtype"], [153, 2, 1, "", "default_uint_dtype"], [230, 2, 1, "", "deg2rad"], [607, 2, 1, "", "depthwise_conv2d"], [615, 2, 1, "", "det"], [188, 2, 1, "", "dev"], [189, 2, 1, "", "dev_util"], [369, 2, 1, "", "dft"], [616, 2, 1, "", "diag"], [348, 2, 1, "", "diagflat"], [617, 2, 1, "", "diagonal"], [344, 2, 1, "", "diff"], [344, 2, 1, "", "digamma"], [354, 2, 1, "", "dirichlet"], [231, 2, 1, "", "divide"], [348, 2, 1, "", "dot"], [608, 2, 1, "", "dropout"], [370, 2, 1, "", "dropout1d"], [371, 2, 1, "", "dropout2d"], [372, 2, 1, "", "dropout3d"], [350, 2, 1, "", "dsplit"], [350, 2, 1, "", "dstack"], [154, 2, 1, "", "dtype"], [155, 2, 1, "", "dtype_bits"], [590, 2, 1, "", "duplicate_array_index_chains"], [576, 6, 1, "", "e"], [348, 2, 1, "", "eig"], [619, 2, 1, "", "eigh"], [348, 2, 1, "", "eigh_tridiagonal"], [348, 2, 1, "", "eigvals"], [620, 2, 1, "", "eigvalsh"], [583, 2, 1, "", "einops_rearrange"], [583, 2, 1, "", "einops_reduce"], [583, 2, 1, "", "einops_repeat"], [596, 2, 1, "", "einsum"], [339, 2, 1, "", "elu"], [373, 2, 1, "", "embedding"], [578, 2, 1, "", "empty"], [578, 2, 1, "", "empty_like"], [232, 2, 1, "", "equal"], [233, 2, 1, "", "erf"], [584, 2, 1, "", "execute_with_gradients"], [583, 2, 1, "", "exists"], [234, 2, 1, "", "exp"], [235, 2, 1, "", "exp2"], [350, 2, 1, "", "expand"], [588, 2, 1, "", "expand_dims"], [236, 2, 1, "", "expm1"], [578, 2, 1, "", "eye"], [341, 2, 1, "", "eye_like"], [374, 2, 1, "", "fft"], [375, 2, 1, "", "fft2"], [350, 2, 1, "", "fill_diagonal"], [156, 2, 1, "", "finfo"], [344, 2, 1, "", "fix"], [350, 2, 1, "", "flatten"], [588, 2, 1, "", "flip"], [350, 2, 1, "", "fliplr"], [350, 2, 1, "", "flipud"], [344, 2, 1, "", "float_power"], [237, 2, 1, "", "floor"], [238, 2, 1, "", "floor_divide"], [344, 2, 1, "", "fmax"], [239, 2, 1, "", "fmin"], [240, 2, 1, "", "fmod"], [350, 2, 1, "", "fold"], [589, 2, 1, "", "fomaml_step"], [577, 2, 1, "", "for_loop"], [583, 2, 1, "", "fourier_encode"], [344, 2, 1, "", "frexp"], [578, 2, 1, "", "from_dlpack"], [126, 2, 1, "", "frombuffer"], [127, 2, 1, "", "full"], [128, 2, 1, "", "full_like"], [190, 2, 1, "", "function_supported_devices"], [583, 2, 1, "", "function_supported_devices_and_dtypes"], [157, 2, 1, "", "function_supported_dtypes"], [191, 2, 1, "", "function_unsupported_devices"], [583, 2, 1, "", "function_unsupported_devices_and_dtypes"], [158, 2, 1, "", "function_unsupported_dtypes"], [354, 2, 1, "", "gamma"], [583, 2, 1, "", "gather"], [583, 2, 1, "", "gather_nd"], [241, 2, 1, "", "gcd"], [575, 2, 1, "", "gelu"], [348, 2, 1, "", "general_inner_product"], [376, 2, 1, "", "generate_einsum_equation"], [583, 2, 1, "", "get_all_arrays_in_memory"], [192, 2, 1, "", "get_all_ivy_arrays_on_dev"], [377, 2, 1, "", "get_interpolate_kernel"], [583, 2, 1, "", "get_item"], [583, 2, 1, "", "get_num_dims"], [583, 2, 1, "", "get_referrers_recursive"], [193, 2, 1, "", "gpu_is_available"], [584, 2, 1, "", "grad"], [344, 2, 1, "", "gradient"], [584, 2, 1, "", "gradient_descent_update"], [242, 2, 1, "", "greater"], [243, 2, 1, "", "greater_equal"], [353, 2, 1, "", "group_norm"], [341, 2, 1, "", "hamming_window"], [194, 2, 1, "", "handle_soft_device_variable"], [341, 2, 1, "", "hann_window"], [575, 2, 1, "", "hardswish"], [583, 2, 1, "", "has_nans"], [350, 2, 1, "", "heaviside"], [359, 2, 1, "", "histogram"], [350, 2, 1, "", "hsplit"], [350, 2, 1, "", "hstack"], [349, 2, 1, "", "huber_loss"], [344, 2, 1, "", "hypot"], [350, 2, 1, "", "i0"], [347, 2, 1, "", "idct"], [577, 2, 1, "", "if_else"], [347, 2, 1, "", "ifft"], [347, 2, 1, "", "ifftn"], [359, 2, 1, "", "igamma"], [159, 2, 1, "", "iinfo"], [244, 2, 1, "", "imag"], [590, 2, 1, "", "index_nest"], [341, 2, 1, "", "indices"], [576, 6, 1, "", "inf"], [160, 2, 1, "", "infer_default_dtype"], [348, 2, 1, "", "initialize_tucker"], [621, 2, 1, "", "inner"], [583, 2, 1, "", "inplace_arrays_supported"], [583, 2, 1, "", "inplace_decrement"], [583, 2, 1, "", "inplace_increment"], [583, 2, 1, "", "inplace_update"], [583, 2, 1, "", "inplace_variables_supported"], [590, 2, 1, "", "insert_into_nest_at_index"], [590, 2, 1, "", "insert_into_nest_at_indices"], [353, 2, 1, "", "instance_norm"], [347, 2, 1, "", "interp"], [347, 2, 1, "", "interpolate"], [622, 2, 1, "", "inv"], [161, 2, 1, "", "invalid_dtype"], [357, 2, 1, "", "invert_permutation"], [583, 2, 1, "", "is_array"], [162, 2, 1, "", "is_bool_dtype"], [163, 2, 1, "", "is_complex_dtype"], [164, 2, 1, "", "is_float_dtype"], [165, 2, 1, "", "is_hashable_dtype"], [166, 2, 1, "", "is_int_dtype"], [583, 2, 1, "", "is_ivy_array"], [583, 2, 1, "", "is_ivy_container"], [583, 2, 1, "", "is_ivy_nested_array"], [358, 2, 1, "", "is_ivy_sparse_array"], [583, 2, 1, "", "is_native_array"], [167, 2, 1, "", "is_native_dtype"], [358, 2, 1, "", "is_native_sparse_array"], [168, 2, 1, "", "is_uint_dtype"], [344, 2, 1, "", "isclose"], [245, 2, 1, "", "isfinite"], [583, 2, 1, "", "isin"], [246, 2, 1, "", "isinf"], [247, 2, 1, "", "isnan"], [248, 2, 1, "", "isreal"], [583, 2, 1, "", "isscalar"], [583, 2, 1, "", "itemsize"], [584, 2, 1, "", "jac"], [341, 2, 1, "", "kaiser_bessel_derived_window"], [341, 2, 1, "", "kaiser_window"], [348, 2, 1, "", "khatri_rao"], [348, 2, 1, "", "kron"], [348, 2, 1, "", "kronecker"], [349, 2, 1, "", "l1_loss"], [353, 2, 1, "", "l1_normalize"], [353, 2, 1, "", "l2_normalize"], [584, 2, 1, "", "lamb_update"], [584, 2, 1, "", "lars_update"], [591, 2, 1, "", "layer_norm"], [249, 2, 1, "", "lcm"], [344, 2, 1, "", "ldexp"], [575, 2, 1, "", "leaky_relu"], [344, 2, 1, "", "lerp"], [250, 2, 1, "", "less"], [251, 2, 1, "", "less_equal"], [357, 2, 1, "", "lexsort"], [344, 2, 1, "", "lgamma"], [609, 2, 1, "", "linear"], [129, 2, 1, "", "linspace"], [597, 2, 1, "", "load"], [252, 2, 1, "", "log"], [253, 2, 1, "", "log10"], [254, 2, 1, "", "log1p"], [255, 2, 1, "", "log2"], [349, 2, 1, "", "log_poisson_loss"], [575, 2, 1, "", "log_softmax"], [256, 2, 1, "", "logaddexp"], [257, 2, 1, "", "logaddexp2"], [258, 2, 1, "", "logical_and"], [259, 2, 1, "", "logical_not"], [260, 2, 1, "", "logical_or"], [261, 2, 1, "", "logical_xor"], [339, 2, 1, "", "logit"], [339, 2, 1, "", "logsigmoid"], [130, 2, 1, "", "logspace"], [353, 2, 1, "", "lp_normalize"], [610, 2, 1, "", "lstm_update"], [623, 2, 1, "", "lu_factor"], [348, 2, 1, "", "make_svd_non_negative"], [589, 2, 1, "", "maml_step"], [590, 2, 1, "", "map"], [590, 2, 1, "", "map_nest_at_index"], [590, 2, 1, "", "map_nest_at_indices"], [583, 2, 1, "", "match_kwargs"], [624, 2, 1, "", "matmul"], [350, 2, 1, "", "matricize"], [348, 2, 1, "", "matrix_exp"], [625, 2, 1, "", "matrix_norm"], [626, 2, 1, "", "matrix_power"], [627, 2, 1, "", "matrix_rank"], [628, 2, 1, "", "matrix_transpose"], [596, 2, 1, "", "max"], [347, 2, 1, "", "max_pool1d"], [347, 2, 1, "", "max_pool2d"], [347, 2, 1, "", "max_pool3d"], [347, 2, 1, "", "max_unpool1d"], [262, 2, 1, "", "maximum"], [596, 2, 1, "", "mean"], [359, 2, 1, "", "median"], [341, 2, 1, "", "mel_weight_matrix"], [131, 2, 1, "", "meshgrid"], [596, 2, 1, "", "min"], [263, 2, 1, "", "minimum"], [575, 2, 1, "", "mish"], [348, 2, 1, "", "mode_dot"], [344, 2, 1, "", "modf"], [350, 2, 1, "", "moveaxis"], [595, 2, 1, "", "msort"], [348, 2, 1, "", "multi_dot"], [611, 2, 1, "", "multi_head_attention"], [590, 2, 1, "", "multi_index_nest"], [348, 2, 1, "", "multi_mode_dot"], [592, 2, 1, "", "multinomial"], [264, 2, 1, "", "multiply"], [583, 2, 1, "", "multiprocessing"], [576, 6, 1, "", "nan"], [265, 2, 1, "", "nan_to_num"], [359, 2, 1, "", "nanmean"], [359, 2, 1, "", "nanmedian"], [359, 2, 1, "", "nanprod"], [344, 2, 1, "", "nansum"], [132, 2, 1, "", "native_array"], [358, 2, 1, "", "native_sparse_array"], [358, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [341, 2, 1, "", "ndenumerate"], [341, 2, 1, "", "ndindex"], [347, 2, 1, "", "nearest_interpolate"], [266, 2, 1, "", "negative"], [590, 2, 1, "", "nested_any"], [590, 2, 1, "", "nested_argwhere"], [590, 2, 1, "", "nested_map"], [590, 2, 1, "", "nested_multi_map"], [576, 6, 1, "", "newaxis"], [344, 2, 1, "", "nextafter"], [593, 2, 1, "", "nonzero"], [267, 2, 1, "", "not_equal"], [583, 2, 1, "", "num_arrays_in_memory"], [195, 2, 1, "", "num_cpu_cores"], [196, 2, 1, "", "num_gpus"], [197, 2, 1, "", "num_ivy_arrays_on_dev"], [133, 2, 1, "", "one_hot"], [134, 2, 1, "", "ones"], [135, 2, 1, "", "ones_like"], [584, 2, 1, "", "optimizer_update"], [360, 2, 1, "", "optional_get_element"], [629, 2, 1, "", "outer"], [350, 2, 1, "", "pad"], [350, 2, 1, "", "partial_fold"], [350, 2, 1, "", "partial_tensor_to_vec"], [348, 2, 1, "", "partial_tucker"], [350, 2, 1, "", "partial_unfold"], [350, 2, 1, "", "partial_vec_to_tensor"], [198, 2, 1, "", "percent_used_mem_on_dev"], [588, 2, 1, "", "permute_dims"], [576, 6, 1, "", "pi"], [586, 2, 1, "", "pinv"], [354, 2, 1, "", "poisson"], [347, 2, 1, "", "pool"], [268, 2, 1, "", "positive"], [269, 2, 1, "", "pow"], [339, 2, 1, "", "prelu"], [583, 2, 1, "", "print_all_arrays_in_memory"], [199, 2, 1, "", "print_all_ivy_arrays_on_dev"], [596, 2, 1, "", "prod"], [169, 2, 1, "", "promote_types"], [170, 2, 1, "", "promote_types_of_inputs"], [590, 2, 1, "", "prune_empty"], [590, 2, 1, "", "prune_nest_at_index"], [590, 2, 1, "", "prune_nest_at_indices"], [350, 2, 1, "", "put_along_axis"], [586, 2, 1, "", "qr"], [359, 2, 1, "", "quantile"], [270, 2, 1, "", "rad2deg"], [592, 2, 1, "", "randint"], [341, 2, 1, "", "random_cp"], [592, 2, 1, "", "random_normal"], [341, 2, 1, "", "random_tucker"], [592, 2, 1, "", "random_uniform"], [271, 2, 1, "", "real"], [272, 2, 1, "", "reciprocal"], [345, 2, 1, "", "reduce"], [347, 2, 1, "", "reduce_window"], [575, 2, 1, "", "relu"], [339, 2, 1, "", "relu6"], [273, 2, 1, "", "remainder"], [588, 2, 1, "", "repeat"], [589, 2, 1, "", "reptile_step"], [588, 2, 1, "", "reshape"], [171, 2, 1, "", "result_type"], [347, 2, 1, "", "rfftn"], [588, 2, 1, "", "roll"], [350, 2, 1, "", "rot90"], [274, 2, 1, "", "round"], [597, 2, 1, "", "save"], [612, 2, 1, "", "scaled_dot_product_attention"], [583, 2, 1, "", "scatter_flat"], [583, 2, 1, "", "scatter_nd"], [595, 2, 1, "", "searchsorted"], [592, 2, 1, "", "seed"], [339, 2, 1, "", "selu"], [339, 2, 1, "", "sequence_length"], [583, 2, 1, "", "set_array_mode"], [172, 2, 1, "", "set_default_complex_dtype"], [200, 2, 1, "", "set_default_device"], [173, 2, 1, "", "set_default_dtype"], [174, 2, 1, "", "set_default_float_dtype"], [175, 2, 1, "", "set_default_int_dtype"], [176, 2, 1, "", "set_default_uint_dtype"], [583, 2, 1, "", "set_exception_trace_mode"], [583, 2, 1, "", "set_inplace_mode"], [583, 2, 1, "", "set_item"], [583, 2, 1, "", "set_min_base"], [583, 2, 1, "", "set_min_denominator"], [590, 2, 1, "", "set_nest_at_index"], [590, 2, 1, "", "set_nest_at_indices"], [583, 2, 1, "", "set_nestable_mode"], [583, 2, 1, "", "set_precise_mode"], [583, 2, 1, "", "set_queue_timeout"], [583, 2, 1, "", "set_shape_array_mode"], [583, 2, 1, "", "set_show_func_wrapper_trace_mode"], [201, 2, 1, "", "set_soft_device_mode"], [202, 2, 1, "", "set_split_factor"], [583, 2, 1, "", "set_tmp_dir"], [583, 2, 1, "", "shape"], [592, 2, 1, "", "shuffle"], [575, 2, 1, "", "sigmoid"], [275, 2, 1, "", "sign"], [344, 2, 1, "", "signbit"], [339, 2, 1, "", "silu"], [276, 2, 1, "", "sin"], [344, 2, 1, "", "sinc"], [277, 2, 1, "", "sinh"], [586, 2, 1, "", "slogdet"], [349, 2, 1, "", "smooth_l1_loss"], [349, 2, 1, "", "soft_margin_loss"], [350, 2, 1, "", "soft_thresholding"], [575, 2, 1, "", "softmax"], [575, 2, 1, "", "softplus"], [575, 2, 1, "", "softsign"], [586, 2, 1, "", "solve"], [595, 2, 1, "", "sort"], [587, 2, 1, "", "sparse_cross_entropy"], [344, 2, 1, "", "sparsify_tensor"], [588, 2, 1, "", "split"], [203, 2, 1, "", "split_factor"], [204, 2, 1, "", "split_func_call"], [278, 2, 1, "", "sqrt"], [279, 2, 1, "", "square"], [588, 2, 1, "", "squeeze"], [583, 2, 1, "", "stable_divide"], [583, 2, 1, "", "stable_pow"], [588, 2, 1, "", "stack"], [596, 2, 1, "", "std"], [584, 2, 1, "", "stop_gradient"], [583, 2, 1, "", "strides"], [280, 2, 1, "", "subtract"], [596, 2, 1, "", "sum"], [583, 2, 1, "", "supports_inplace_updates"], [586, 2, 1, "", "svd"], [348, 2, 1, "", "svd_flip"], [586, 2, 1, "", "svdvals"], [588, 2, 1, "", "swapaxes"], [350, 2, 1, "", "take_along_axis"], [281, 2, 1, "", "tan"], [282, 2, 1, "", "tanh"], [586, 2, 1, "", "tensordot"], [586, 2, 1, "", "tensorsolve"], [339, 2, 1, "", "thresholded_relu"], [588, 2, 1, "", "tile"], [205, 2, 1, "", "to_device"], [583, 2, 1, "", "to_ivy_shape"], [583, 2, 1, "", "to_list"], [583, 2, 1, "", "to_native_shape"], [583, 2, 1, "", "to_numpy"], [583, 2, 1, "", "to_scalar"], [350, 2, 1, "", "top_k"], [206, 2, 1, "", "total_mem_on_dev"], [207, 2, 1, "", "tpu_is_available"], [586, 2, 1, "", "trace"], [790, 2, 1, "", "transpile"], [283, 2, 1, "", "trapz"], [136, 2, 1, "", "tril"], [341, 2, 1, "", "tril_indices"], [341, 2, 1, "", "trilu"], [137, 2, 1, "", "triu"], [138, 2, 1, "", "triu_indices"], [284, 2, 1, "", "trunc"], [285, 2, 1, "", "trunc_divide"], [348, 2, 1, "", "truncated_svd"], [583, 2, 1, "", "try_else_none"], [577, 2, 1, "", "try_except"], [348, 2, 1, "", "tucker"], [177, 2, 1, "", "type_promote_arrays"], [350, 2, 1, "", "unfold"], [790, 2, 1, "", "unify"], [594, 2, 1, "", "unique_all"], [350, 2, 1, "", "unique_consecutive"], [594, 2, 1, "", "unique_counts"], [594, 2, 1, "", "unique_inverse"], [594, 2, 1, "", "unique_values"], [355, 2, 1, "", "unravel_index"], [583, 2, 1, "", "unset_array_mode"], [178, 2, 1, "", "unset_default_complex_dtype"], [208, 2, 1, "", "unset_default_device"], [179, 2, 1, "", "unset_default_dtype"], [180, 2, 1, "", "unset_default_float_dtype"], [181, 2, 1, "", "unset_default_int_dtype"], [182, 2, 1, "", "unset_default_uint_dtype"], [583, 2, 1, "", "unset_exception_trace_mode"], [583, 2, 1, "", "unset_inplace_mode"], [583, 2, 1, "", "unset_min_base"], [583, 2, 1, "", "unset_min_denominator"], [583, 2, 1, "", "unset_nestable_mode"], [583, 2, 1, "", "unset_precise_mode"], [583, 2, 1, "", "unset_queue_timeout"], [583, 2, 1, "", "unset_shape_array_mode"], [583, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [209, 2, 1, "", "unset_soft_device_mode"], [583, 2, 1, "", "unset_tmp_dir"], [341, 2, 1, "", "unsorted_segment_min"], [341, 2, 1, "", "unsorted_segment_sum"], [588, 2, 1, "", "unstack"], [210, 2, 1, "", "used_mem_on_dev"], [183, 2, 1, "", "valid_dtype"], [584, 2, 1, "", "value_and_grad"], [583, 2, 1, "", "value_is_nan"], [586, 2, 1, "", "vander"], [596, 2, 1, "", "var"], [586, 2, 1, "", "vecdot"], [586, 2, 1, "", "vector_norm"], [586, 2, 1, "", "vector_to_skew_symmetric_matrix"], [583, 2, 1, "", "vmap"], [341, 2, 1, "", "vorbis_window"], [350, 2, 1, "", "vsplit"], [350, 2, 1, "", "vstack"], [593, 2, 1, "", "where"], [577, 2, 1, "", "while_loop"], [344, 2, 1, "", "xlogy"], [588, 2, 1, "", "zero_pad"], [139, 2, 1, "", "zeros"], [140, 2, 1, "", "zeros_like"], [344, 2, 1, "", "zeta"]], "ivy.Container": [[211, 0, 1, "", "abs"], [212, 0, 1, "", "acos"], [213, 0, 1, "", "acosh"], [564, 0, 1, "", "adam_step"], [565, 0, 1, "", "adam_update"], [361, 0, 1, "", "adaptive_avg_pool1d"], [362, 0, 1, "", "adaptive_avg_pool2d"], [363, 0, 1, "", "adaptive_max_pool2d"], [214, 0, 1, "", "add"], [391, 0, 1, "", "adjoint"], [714, 0, 1, "", "all"], [484, 0, 1, "", "all_equal"], [312, 0, 1, "", "allclose"], [215, 0, 1, "", "angle"], [715, 0, 1, "", "any"], [691, 0, 1, "", "argmax"], [692, 0, 1, "", "argmin"], [700, 0, 1, "", "argsort"], [693, 0, 1, "", "argwhere"], [487, 0, 1, "", "array_equal"], [417, 0, 1, "", "as_strided"], [120, 0, 1, "", "asarray"], [216, 0, 1, "", "asin"], [217, 0, 1, "", "asinh"], [488, 0, 1, "", "assert_supports_inplace"], [418, 0, 1, "", "associative_scan"], [143, 0, 1, "", "astype"], [218, 0, 1, "", "atan"], [219, 0, 1, "", "atan2"], [220, 0, 1, "", "atanh"], [419, 0, 1, "", "atleast_1d"], [420, 0, 1, "", "atleast_2d"], [421, 0, 1, "", "atleast_3d"], [365, 0, 1, "", "avg_pool1d"], [366, 0, 1, "", "avg_pool2d"], [367, 0, 1, "", "avg_pool3d"], [453, 0, 1, "", "batch_norm"], [459, 0, 1, "", "bernoulli"], [460, 0, 1, "", "beta"], [313, 0, 1, "", "binarizer"], [643, 0, 1, "", "binary_cross_entropy"], [471, 0, 1, "", "bincount"], [221, 0, 1, "", "bitwise_and"], [222, 0, 1, "", "bitwise_invert"], [223, 0, 1, "", "bitwise_left_shift"], [224, 0, 1, "", "bitwise_or"], [225, 0, 1, "", "bitwise_right_shift"], [226, 0, 1, "", "bitwise_xor"], [295, 0, 1, "", "blackman_window"], [144, 0, 1, "", "broadcast_arrays"], [422, 0, 1, "", "broadcast_shapes"], [145, 0, 1, "", "broadcast_to"], [146, 0, 1, "", "can_cast"], [227, 0, 1, "", "ceil"], [613, 0, 1, "", "cholesky"], [646, 0, 1, "", "clip"], [490, 0, 1, "", "clip_matrix_norm"], [491, 0, 1, "", "clip_vector_norm"], [647, 0, 1, "", "concat"], [424, 0, 1, "", "concat_from_sequence"], [392, 0, 1, "", "cond"], [314, 0, 1, "", "conj"], [648, 0, 1, "", "constant_pad"], [599, 0, 1, "", "conv1d"], [600, 0, 1, "", "conv1d_transpose"], [601, 0, 1, "", "conv2d"], [602, 0, 1, "", "conv2d_transpose"], [603, 0, 1, "", "conv3d"], [604, 0, 1, "", "conv3d_transpose"], [121, 0, 1, "", "copy_array"], [315, 0, 1, "", "copysign"], [472, 0, 1, "", "corrcoef"], [228, 0, 1, "", "cos"], [229, 0, 1, "", "cosh"], [316, 0, 1, "", "count_nonzero"], [473, 0, 1, "", "cov"], [614, 0, 1, "", "cross"], [644, 0, 1, "", "cross_entropy"], [474, 0, 1, "", "cummax"], [475, 0, 1, "", "cummin"], [704, 0, 1, "", "cumprod"], [705, 0, 1, "", "cumsum"], [368, 0, 1, "", "dct"], [230, 0, 1, "", "deg2rad"], [607, 0, 1, "", "depthwise_conv2d"], [615, 0, 1, "", "det"], [188, 0, 1, "", "dev"], [369, 0, 1, "", "dft"], [616, 0, 1, "", "diag"], [393, 0, 1, "", "diagflat"], [617, 0, 1, "", "diagonal"], [317, 0, 1, "", "diff"], [318, 0, 1, "", "digamma"], [461, 0, 1, "", "dirichlet"], [231, 0, 1, "", "divide"], [394, 0, 1, "", "dot"], [608, 0, 1, "", "dropout"], [370, 0, 1, "", "dropout1d"], [371, 0, 1, "", "dropout2d"], [372, 0, 1, "", "dropout3d"], [425, 0, 1, "", "dsplit"], [426, 0, 1, "", "dstack"], [154, 0, 1, "", "dtype"], [618, 0, 1, "", "eig"], [619, 0, 1, "", "eigh"], [396, 0, 1, "", "eigh_tridiagonal"], [397, 0, 1, "", "eigvals"], [620, 0, 1, "", "eigvalsh"], [495, 0, 1, "", "einops_rearrange"], [496, 0, 1, "", "einops_reduce"], [497, 0, 1, "", "einops_repeat"], [706, 0, 1, "", "einsum"], [286, 0, 1, "", "elu"], [373, 0, 1, "", "embedding"], [123, 0, 1, "", "empty_like"], [232, 0, 1, "", "equal"], [233, 0, 1, "", "erf"], [498, 0, 1, "", "exists"], [234, 0, 1, "", "exp"], [235, 0, 1, "", "exp2"], [427, 0, 1, "", "expand"], [649, 0, 1, "", "expand_dims"], [236, 0, 1, "", "expm1"], [296, 0, 1, "", "eye_like"], [374, 0, 1, "", "fft"], [428, 0, 1, "", "fill_diagonal"], [156, 0, 1, "", "finfo"], [319, 0, 1, "", "fix"], [429, 0, 1, "", "flatten"], [650, 0, 1, "", "flip"], [430, 0, 1, "", "fliplr"], [431, 0, 1, "", "flipud"], [320, 0, 1, "", "float_power"], [237, 0, 1, "", "floor"], [238, 0, 1, "", "floor_divide"], [321, 0, 1, "", "fmax"], [239, 0, 1, "", "fmin"], [240, 0, 1, "", "fmod"], [432, 0, 1, "", "fold"], [499, 0, 1, "", "fourier_encode"], [322, 0, 1, "", "frexp"], [125, 0, 1, "", "from_dlpack"], [126, 0, 1, "", "frombuffer"], [128, 0, 1, "", "full_like"], [462, 0, 1, "", "gamma"], [502, 0, 1, "", "gather"], [503, 0, 1, "", "gather_nd"], [241, 0, 1, "", "gcd"], [101, 0, 1, "", "gelu"], [398, 0, 1, "", "general_inner_product"], [506, 0, 1, "", "get_num_dims"], [323, 0, 1, "", "gradient"], [568, 0, 1, "", "gradient_descent_update"], [242, 0, 1, "", "greater"], [243, 0, 1, "", "greater_equal"], [454, 0, 1, "", "group_norm"], [297, 0, 1, "", "hamming_window"], [298, 0, 1, "", "hann_window"], [102, 0, 1, "", "hardswish"], [508, 0, 1, "", "has_nans"], [433, 0, 1, "", "heaviside"], [476, 0, 1, "", "histogram"], [434, 0, 1, "", "hsplit"], [435, 0, 1, "", "hstack"], [412, 0, 1, "", "huber_loss"], [324, 0, 1, "", "hypot"], [436, 0, 1, "", "i0"], [378, 0, 1, "", "idct"], [379, 0, 1, "", "ifft"], [380, 0, 1, "", "ifftn"], [477, 0, 1, "", "igamma"], [159, 0, 1, "", "iinfo"], [244, 0, 1, "", "imag"], [399, 0, 1, "", "initialize_tucker"], [621, 0, 1, "", "inner"], [510, 0, 1, "", "inplace_decrement"], [511, 0, 1, "", "inplace_increment"], [512, 0, 1, "", "inplace_update"], [455, 0, 1, "", "instance_norm"], [382, 0, 1, "", "interpolate"], [622, 0, 1, "", "inv"], [465, 0, 1, "", "invert_permutation"], [514, 0, 1, "", "is_array"], [162, 0, 1, "", "is_bool_dtype"], [163, 0, 1, "", "is_complex_dtype"], [164, 0, 1, "", "is_float_dtype"], [166, 0, 1, "", "is_int_dtype"], [515, 0, 1, "", "is_ivy_array"], [518, 0, 1, "", "is_native_array"], [168, 0, 1, "", "is_uint_dtype"], [325, 0, 1, "", "isclose"], [245, 0, 1, "", "isfinite"], [519, 0, 1, "", "isin"], [246, 0, 1, "", "isinf"], [247, 0, 1, "", "isnan"], [248, 0, 1, "", "isreal"], [521, 0, 1, "", "itemsize"], [300, 0, 1, "", "kaiser_bessel_derived_window"], [301, 0, 1, "", "kaiser_window"], [401, 0, 1, "", "kron"], [413, 0, 1, "", "l1_loss"], [456, 0, 1, "", "l1_normalize"], [457, 0, 1, "", "l2_normalize"], [570, 0, 1, "", "lamb_update"], [571, 0, 1, "", "lars_update"], [684, 0, 1, "", "layer_norm"], [249, 0, 1, "", "lcm"], [326, 0, 1, "", "ldexp"], [103, 0, 1, "", "leaky_relu"], [327, 0, 1, "", "lerp"], [250, 0, 1, "", "less"], [251, 0, 1, "", "less_equal"], [466, 0, 1, "", "lexsort"], [609, 0, 1, "", "linear"], [129, 0, 1, "", "linspace"], [252, 0, 1, "", "log"], [253, 0, 1, "", "log10"], [254, 0, 1, "", "log1p"], [255, 0, 1, "", "log2"], [104, 0, 1, "", "log_softmax"], [256, 0, 1, "", "logaddexp"], [257, 0, 1, "", "logaddexp2"], [258, 0, 1, "", "logical_and"], [259, 0, 1, "", "logical_not"], [260, 0, 1, "", "logical_or"], [261, 0, 1, "", "logical_xor"], [287, 0, 1, "", "logit"], [288, 0, 1, "", "logsigmoid"], [130, 0, 1, "", "logspace"], [458, 0, 1, "", "lp_normalize"], [610, 0, 1, "", "lstm_update"], [403, 0, 1, "", "make_svd_non_negative"], [624, 0, 1, "", "matmul"], [437, 0, 1, "", "matricize"], [404, 0, 1, "", "matrix_exp"], [625, 0, 1, "", "matrix_norm"], [626, 0, 1, "", "matrix_power"], [627, 0, 1, "", "matrix_rank"], [628, 0, 1, "", "matrix_transpose"], [707, 0, 1, "", "max"], [383, 0, 1, "", "max_pool1d"], [384, 0, 1, "", "max_pool2d"], [385, 0, 1, "", "max_pool3d"], [262, 0, 1, "", "maximum"], [708, 0, 1, "", "mean"], [478, 0, 1, "", "median"], [302, 0, 1, "", "mel_weight_matrix"], [131, 0, 1, "", "meshgrid"], [709, 0, 1, "", "min"], [263, 0, 1, "", "minimum"], [105, 0, 1, "", "mish"], [405, 0, 1, "", "mode_dot"], [329, 0, 1, "", "modf"], [438, 0, 1, "", "moveaxis"], [701, 0, 1, "", "msort"], [406, 0, 1, "", "multi_dot"], [611, 0, 1, "", "multi_head_attention"], [407, 0, 1, "", "multi_mode_dot"], [685, 0, 1, "", "multinomial"], [264, 0, 1, "", "multiply"], [265, 0, 1, "", "nan_to_num"], [479, 0, 1, "", "nanmean"], [480, 0, 1, "", "nanmedian"], [481, 0, 1, "", "nanprod"], [330, 0, 1, "", "nansum"], [132, 0, 1, "", "native_array"], [266, 0, 1, "", "negative"], [331, 0, 1, "", "nextafter"], [694, 0, 1, "", "nonzero"], [267, 0, 1, "", "not_equal"], [133, 0, 1, "", "one_hot"], [135, 0, 1, "", "ones_like"], [572, 0, 1, "", "optimizer_update"], [483, 0, 1, "", "optional_get_element"], [629, 0, 1, "", "outer"], [439, 0, 1, "", "pad"], [440, 0, 1, "", "partial_fold"], [441, 0, 1, "", "partial_tensor_to_vec"], [408, 0, 1, "", "partial_tucker"], [442, 0, 1, "", "partial_unfold"], [443, 0, 1, "", "partial_vec_to_tensor"], [651, 0, 1, "", "permute_dims"], [630, 0, 1, "", "pinv"], [463, 0, 1, "", "poisson"], [268, 0, 1, "", "positive"], [269, 0, 1, "", "pow"], [289, 0, 1, "", "prelu"], [710, 0, 1, "", "prod"], [631, 0, 1, "", "qr"], [482, 0, 1, "", "quantile"], [270, 0, 1, "", "rad2deg"], [686, 0, 1, "", "randint"], [687, 0, 1, "", "random_normal"], [688, 0, 1, "", "random_uniform"], [271, 0, 1, "", "real"], [272, 0, 1, "", "reciprocal"], [337, 0, 1, "", "reduce"], [389, 0, 1, "", "reduce_window"], [106, 0, 1, "", "relu"], [290, 0, 1, "", "relu6"], [273, 0, 1, "", "remainder"], [652, 0, 1, "", "repeat"], [653, 0, 1, "", "reshape"], [171, 0, 1, "", "result_type"], [390, 0, 1, "", "rfftn"], [654, 0, 1, "", "roll"], [445, 0, 1, "", "rot90"], [274, 0, 1, "", "round"], [612, 0, 1, "", "scaled_dot_product_attention"], [526, 0, 1, "", "scatter_flat"], [527, 0, 1, "", "scatter_nd"], [702, 0, 1, "", "searchsorted"], [291, 0, 1, "", "selu"], [690, 0, 1, "", "shuffle"], [107, 0, 1, "", "sigmoid"], [275, 0, 1, "", "sign"], [332, 0, 1, "", "signbit"], [293, 0, 1, "", "silu"], [276, 0, 1, "", "sin"], [333, 0, 1, "", "sinc"], [277, 0, 1, "", "sinh"], [632, 0, 1, "", "slogdet"], [415, 0, 1, "", "smooth_l1_loss"], [416, 0, 1, "", "soft_margin_loss"], [446, 0, 1, "", "soft_thresholding"], [108, 0, 1, "", "softmax"], [109, 0, 1, "", "softplus"], [633, 0, 1, "", "solve"], [703, 0, 1, "", "sort"], [645, 0, 1, "", "sparse_cross_entropy"], [334, 0, 1, "", "sparsify_tensor"], [655, 0, 1, "", "split"], [278, 0, 1, "", "sqrt"], [279, 0, 1, "", "square"], [656, 0, 1, "", "squeeze"], [541, 0, 1, "", "stable_divide"], [542, 0, 1, "", "stable_pow"], [657, 0, 1, "", "stack"], [711, 0, 1, "", "std"], [573, 0, 1, "", "stop_gradient"], [543, 0, 1, "", "strides"], [280, 0, 1, "", "subtract"], [712, 0, 1, "", "sum"], [544, 0, 1, "", "supports_inplace_updates"], [634, 0, 1, "", "svd"], [409, 0, 1, "", "svd_flip"], [635, 0, 1, "", "svdvals"], [658, 0, 1, "", "swapaxes"], [447, 0, 1, "", "take_along_axis"], [281, 0, 1, "", "tan"], [282, 0, 1, "", "tanh"], [636, 0, 1, "", "tensordot"], [637, 0, 1, "", "tensorsolve"], [294, 0, 1, "", "thresholded_relu"], [659, 0, 1, "", "tile"], [205, 0, 1, "", "to_device"], [546, 0, 1, "", "to_list"], [548, 0, 1, "", "to_numpy"], [549, 0, 1, "", "to_scalar"], [448, 0, 1, "", "top_k"], [638, 0, 1, "", "trace"], [283, 0, 1, "", "trapz"], [136, 0, 1, "", "tril"], [307, 0, 1, "", "tril_indices"], [308, 0, 1, "", "trilu"], [137, 0, 1, "", "triu"], [138, 0, 1, "", "triu_indices"], [284, 0, 1, "", "trunc"], [285, 0, 1, "", "trunc_divide"], [410, 0, 1, "", "truncated_svd"], [411, 0, 1, "", "tucker"], [449, 0, 1, "", "unfold"], [696, 0, 1, "", "unique_all"], [450, 0, 1, "", "unique_consecutive"], [697, 0, 1, "", "unique_counts"], [698, 0, 1, "", "unique_inverse"], [699, 0, 1, "", "unique_values"], [464, 0, 1, "", "unravel_index"], [309, 0, 1, "", "unsorted_segment_min"], [310, 0, 1, "", "unsorted_segment_sum"], [660, 0, 1, "", "unstack"], [562, 0, 1, "", "value_is_nan"], [639, 0, 1, "", "vander"], [713, 0, 1, "", "var"], [640, 0, 1, "", "vecdot"], [641, 0, 1, "", "vector_norm"], [642, 0, 1, "", "vector_to_skew_symmetric_matrix"], [311, 0, 1, "", "vorbis_window"], [451, 0, 1, "", "vsplit"], [452, 0, 1, "", "vstack"], [695, 0, 1, "", "where"], [335, 0, 1, "", "xlogy"], [661, 0, 1, "", "zero_pad"], [140, 0, 1, "", "zeros_like"], [336, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[45, 3, 0, "-", "activations"], [93, 3, 0, "-", "array"], [46, 3, 0, "-", "conversions"], [47, 3, 0, "-", "creation"], [48, 3, 0, "-", "data_type"], [49, 3, 0, "-", "device"], [50, 3, 0, "-", "elementwise"], [51, 3, 0, "-", "experimental"], [52, 3, 0, "-", "general"], [53, 3, 0, "-", "gradients"], [54, 3, 0, "-", "image"], [55, 3, 0, "-", "layers"], [56, 3, 0, "-", "linear_algebra"], [57, 3, 0, "-", "losses"], [58, 3, 0, "-", "manipulation"], [59, 3, 0, "-", "norms"], [60, 3, 0, "-", "random"], [61, 3, 0, "-", "searching"], [62, 3, 0, "-", "set"], [63, 3, 0, "-", "sorting"], [64, 3, 0, "-", "statistical"], [65, 3, 0, "-", "utility"], [66, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[45, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "gelu"], [45, 0, 1, "", "hardswish"], [45, 0, 1, "", "leaky_relu"], [45, 0, 1, "", "log_softmax"], [45, 0, 1, "", "mish"], [45, 0, 1, "", "relu"], [45, 0, 1, "", "sigmoid"], [45, 0, 1, "", "softmax"], [45, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[93, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[93, 5, 1, "", "T"], [93, 0, 1, "", "__abs__"], [93, 0, 1, "", "__add__"], [93, 0, 1, "", "__eq__"], [93, 0, 1, "", "__ge__"], [93, 0, 1, "", "__gt__"], [93, 0, 1, "", "__init__"], [93, 0, 1, "", "__le__"], [93, 0, 1, "", "__lt__"], [93, 0, 1, "", "__ne__"], [93, 0, 1, "", "__pow__"], [93, 0, 1, "", "__radd__"], [93, 0, 1, "", "__rrshift__"], [93, 0, 1, "", "__rshift__"], [93, 0, 1, "", "__rsub__"], [93, 0, 1, "", "__sub__"], [93, 0, 1, "", "__truediv__"], [93, 0, 1, "", "__xor__"], [93, 5, 1, "", "backend"], [93, 5, 1, "", "base"], [93, 5, 1, "", "data"], [93, 5, 1, "", "device"], [93, 5, 1, "", "dtype"], [93, 5, 1, "", "dynamic_backend"], [93, 5, 1, "", "imag"], [93, 5, 1, "", "itemsize"], [93, 5, 1, "", "mT"], [93, 5, 1, "", "ndim"], [93, 5, 1, "", "real"], [93, 5, 1, "", "shape"], [93, 5, 1, "", "size"], [93, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[46, 2, 1, "", "_to_ivy"], [46, 2, 1, "", "_to_native"], [46, 2, 1, "", "args_to_ivy"], [46, 2, 1, "", "args_to_native"], [46, 2, 1, "", "to_ivy"], [46, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[47, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[47, 4, 1, "", "_abc_impl"], [47, 0, 1, "", "asarray"], [47, 0, 1, "", "copy_array"], [47, 0, 1, "", "empty_like"], [47, 0, 1, "", "from_dlpack"], [47, 0, 1, "", "full_like"], [47, 0, 1, "", "linspace"], [47, 0, 1, "", "logspace"], [47, 0, 1, "", "meshgrid"], [47, 0, 1, "", "native_array"], [47, 0, 1, "", "one_hot"], [47, 0, 1, "", "ones_like"], [47, 0, 1, "", "tril"], [47, 0, 1, "", "triu"], [47, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[48, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "astype"], [48, 0, 1, "", "broadcast_arrays"], [48, 0, 1, "", "broadcast_to"], [48, 0, 1, "", "can_cast"], [48, 0, 1, "", "dtype"], [48, 0, 1, "", "finfo"], [48, 0, 1, "", "iinfo"], [48, 0, 1, "", "is_bool_dtype"], [48, 0, 1, "", "is_float_dtype"], [48, 0, 1, "", "is_int_dtype"], [48, 0, 1, "", "is_uint_dtype"], [48, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[49, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "dev"], [49, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[50, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "abs"], [50, 0, 1, "", "acos"], [50, 0, 1, "", "acosh"], [50, 0, 1, "", "add"], [50, 0, 1, "", "angle"], [50, 0, 1, "", "asin"], [50, 0, 1, "", "asinh"], [50, 0, 1, "", "atan"], [50, 0, 1, "", "atan2"], [50, 0, 1, "", "atanh"], [50, 0, 1, "", "bitwise_and"], [50, 0, 1, "", "bitwise_invert"], [50, 0, 1, "", "bitwise_left_shift"], [50, 0, 1, "", "bitwise_or"], [50, 0, 1, "", "bitwise_right_shift"], [50, 0, 1, "", "bitwise_xor"], [50, 0, 1, "", "ceil"], [50, 0, 1, "", "cos"], [50, 0, 1, "", "cosh"], [50, 0, 1, "", "deg2rad"], [50, 0, 1, "", "divide"], [50, 0, 1, "", "equal"], [50, 0, 1, "", "erf"], [50, 0, 1, "", "exp"], [50, 0, 1, "", "exp2"], [50, 0, 1, "", "expm1"], [50, 0, 1, "", "floor"], [50, 0, 1, "", "floor_divide"], [50, 0, 1, "", "fmin"], [50, 0, 1, "", "gcd"], [50, 0, 1, "", "greater"], [50, 0, 1, "", "greater_equal"], [50, 0, 1, "", "imag"], [50, 0, 1, "", "isfinite"], [50, 0, 1, "", "isinf"], [50, 0, 1, "", "isnan"], [50, 0, 1, "", "isreal"], [50, 0, 1, "", "lcm"], [50, 0, 1, "", "less"], [50, 0, 1, "", "less_equal"], [50, 0, 1, "", "log"], [50, 0, 1, "", "log10"], [50, 0, 1, "", "log1p"], [50, 0, 1, "", "log2"], [50, 0, 1, "", "logaddexp"], [50, 0, 1, "", "logaddexp2"], [50, 0, 1, "", "logical_and"], [50, 0, 1, "", "logical_not"], [50, 0, 1, "", "logical_or"], [50, 0, 1, "", "logical_xor"], [50, 0, 1, "", "maximum"], [50, 0, 1, "", "minimum"], [50, 0, 1, "", "multiply"], [50, 0, 1, "", "nan_to_num"], [50, 0, 1, "", "negative"], [50, 0, 1, "", "not_equal"], [50, 0, 1, "", "positive"], [50, 0, 1, "", "pow"], [50, 0, 1, "", "rad2deg"], [50, 0, 1, "", "real"], [50, 0, 1, "", "reciprocal"], [50, 0, 1, "", "remainder"], [50, 0, 1, "", "round"], [50, 0, 1, "", "sign"], [50, 0, 1, "", "sin"], [50, 0, 1, "", "sinh"], [50, 0, 1, "", "sqrt"], [50, 0, 1, "", "square"], [50, 0, 1, "", "subtract"], [50, 0, 1, "", "tan"], [50, 0, 1, "", "tanh"], [50, 0, 1, "", "trapz"], [50, 0, 1, "", "trunc"], [50, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[51, 3, 0, "-", "activations"], [51, 3, 0, "-", "conversions"], [51, 3, 0, "-", "creation"], [51, 3, 0, "-", "data_type"], [51, 3, 0, "-", "device"], [51, 3, 0, "-", "elementwise"], [51, 3, 0, "-", "general"], [51, 3, 0, "-", "gradients"], [51, 3, 0, "-", "image"], [51, 3, 0, "-", "layers"], [51, 3, 0, "-", "linear_algebra"], [51, 3, 0, "-", "losses"], [51, 3, 0, "-", "manipulation"], [51, 3, 0, "-", "norms"], [51, 3, 0, "-", "random"], [51, 3, 0, "-", "searching"], [51, 3, 0, "-", "set"], [51, 3, 0, "-", "sorting"], [51, 3, 0, "-", "statistical"], [51, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[51, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "elu"], [51, 0, 1, "", "logit"], [51, 0, 1, "", "logsigmoid"], [51, 0, 1, "", "prelu"], [51, 0, 1, "", "relu6"], [51, 0, 1, "", "selu"], [51, 0, 1, "", "silu"], [51, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[51, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[51, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "blackman_window"], [51, 0, 1, "", "eye_like"], [51, 0, 1, "", "mel_weight_matrix"], [51, 0, 1, "", "trilu"], [51, 0, 1, "", "unsorted_segment_min"], [51, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[51, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[51, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[51, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "allclose"], [51, 0, 1, "", "binarizer"], [51, 0, 1, "", "conj"], [51, 0, 1, "", "copysign"], [51, 0, 1, "", "count_nonzero"], [51, 0, 1, "", "diff"], [51, 0, 1, "", "digamma"], [51, 0, 1, "", "fix"], [51, 0, 1, "", "float_power"], [51, 0, 1, "", "fmax"], [51, 0, 1, "", "fmod"], [51, 0, 1, "", "frexp"], [51, 0, 1, "", "gradient"], [51, 0, 1, "", "hypot"], [51, 0, 1, "", "isclose"], [51, 0, 1, "", "ldexp"], [51, 0, 1, "", "lerp"], [51, 0, 1, "", "lgamma"], [51, 0, 1, "", "modf"], [51, 0, 1, "", "nansum"], [51, 0, 1, "", "nextafter"], [51, 0, 1, "", "signbit"], [51, 0, 1, "", "sinc"], [51, 0, 1, "", "sparsify_tensor"], [51, 0, 1, "", "xlogy"], [51, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[51, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[51, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[51, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[51, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "adaptive_avg_pool1d"], [51, 0, 1, "", "adaptive_avg_pool2d"], [51, 0, 1, "", "adaptive_max_pool2d"], [51, 0, 1, "", "avg_pool1d"], [51, 0, 1, "", "avg_pool2d"], [51, 0, 1, "", "avg_pool3d"], [51, 0, 1, "", "dct"], [51, 0, 1, "", "dft"], [51, 0, 1, "", "embedding"], [51, 0, 1, "", "fft"], [51, 0, 1, "", "fft2"], [51, 0, 1, "", "idct"], [51, 0, 1, "", "ifft"], [51, 0, 1, "", "ifftn"], [51, 0, 1, "", "interpolate"], [51, 0, 1, "", "max_pool1d"], [51, 0, 1, "", "max_pool2d"], [51, 0, 1, "", "max_pool3d"], [51, 0, 1, "", "reduce_window"], [51, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[51, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "adjoint"], [51, 0, 1, "", "cond"], [51, 0, 1, "", "diagflat"], [51, 0, 1, "", "dot"], [51, 0, 1, "", "eig"], [51, 0, 1, "", "eigh_tridiagonal"], [51, 0, 1, "", "eigvals"], [51, 0, 1, "", "general_inner_product"], [51, 0, 1, "", "initialize_tucker"], [51, 0, 1, "", "kron"], [51, 0, 1, "", "make_svd_non_negative"], [51, 0, 1, "", "matrix_exp"], [51, 0, 1, "", "mode_dot"], [51, 0, 1, "", "multi_dot"], [51, 0, 1, "", "multi_mode_dot"], [51, 0, 1, "", "partial_tucker"], [51, 0, 1, "", "svd_flip"], [51, 0, 1, "", "truncated_svd"], [51, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[51, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "huber_loss"], [51, 0, 1, "", "l1_loss"], [51, 0, 1, "", "smooth_l1_loss"], [51, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[51, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "as_strided"], [51, 0, 1, "", "associative_scan"], [51, 0, 1, "", "atleast_1d"], [51, 0, 1, "", "atleast_2d"], [51, 0, 1, "", "atleast_3d"], [51, 0, 1, "", "concat_from_sequence"], [51, 0, 1, "", "dsplit"], [51, 0, 1, "", "dstack"], [51, 0, 1, "", "expand"], [51, 0, 1, "", "fill_diagonal"], [51, 0, 1, "", "flatten"], [51, 0, 1, "", "fliplr"], [51, 0, 1, "", "flipud"], [51, 0, 1, "", "fold"], [51, 0, 1, "", "heaviside"], [51, 0, 1, "", "hsplit"], [51, 0, 1, "", "hstack"], [51, 0, 1, "", "i0"], [51, 0, 1, "", "matricize"], [51, 0, 1, "", "moveaxis"], [51, 0, 1, "", "pad"], [51, 0, 1, "", "partial_fold"], [51, 0, 1, "", "partial_tensor_to_vec"], [51, 0, 1, "", "partial_unfold"], [51, 0, 1, "", "partial_vec_to_tensor"], [51, 0, 1, "", "rot90"], [51, 0, 1, "", "soft_thresholding"], [51, 0, 1, "", "take_along_axis"], [51, 0, 1, "", "top_k"], [51, 0, 1, "", "unfold"], [51, 0, 1, "", "unique_consecutive"], [51, 0, 1, "", "vsplit"], [51, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[51, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "batch_norm"], [51, 0, 1, "", "group_norm"], [51, 0, 1, "", "instance_norm"], [51, 0, 1, "", "l1_normalize"], [51, 0, 1, "", "l2_normalize"], [51, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[51, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "bernoulli"], [51, 0, 1, "", "beta"], [51, 0, 1, "", "dirichlet"], [51, 0, 1, "", "gamma"], [51, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[51, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[51, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[51, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[51, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[51, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "bincount"], [51, 0, 1, "", "corrcoef"], [51, 0, 1, "", "cov"], [51, 0, 1, "", "cummax"], [51, 0, 1, "", "cummin"], [51, 0, 1, "", "histogram"], [51, 0, 1, "", "igamma"], [51, 0, 1, "", "median"], [51, 0, 1, "", "nanmean"], [51, 0, 1, "", "nanmedian"], [51, 0, 1, "", "nanprod"], [51, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[51, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[52, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "all_equal"], [52, 0, 1, "", "array_equal"], [52, 0, 1, "", "assert_supports_inplace"], [52, 0, 1, "", "clip_matrix_norm"], [52, 0, 1, "", "clip_vector_norm"], [52, 0, 1, "", "default"], [52, 0, 1, "", "einops_rearrange"], [52, 0, 1, "", "einops_reduce"], [52, 0, 1, "", "einops_repeat"], [52, 0, 1, "", "exists"], [52, 0, 1, "", "fourier_encode"], [52, 0, 1, "", "gather"], [52, 0, 1, "", "gather_nd"], [52, 0, 1, "", "get_num_dims"], [52, 0, 1, "", "has_nans"], [52, 0, 1, "", "inplace_decrement"], [52, 0, 1, "", "inplace_increment"], [52, 0, 1, "", "inplace_update"], [52, 0, 1, "", "is_array"], [52, 0, 1, "", "is_ivy_array"], [52, 0, 1, "", "is_ivy_container"], [52, 0, 1, "", "is_native_array"], [52, 0, 1, "", "isin"], [52, 0, 1, "", "scatter_flat"], [52, 0, 1, "", "scatter_nd"], [52, 0, 1, "", "stable_divide"], [52, 0, 1, "", "stable_pow"], [52, 0, 1, "", "supports_inplace_updates"], [52, 0, 1, "", "to_file"], [52, 0, 1, "", "to_list"], [52, 0, 1, "", "to_numpy"], [52, 0, 1, "", "to_scalar"], [52, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[53, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adam_step"], [53, 0, 1, "", "adam_update"], [53, 0, 1, "", "gradient_descent_update"], [53, 0, 1, "", "lamb_update"], [53, 0, 1, "", "lars_update"], [53, 0, 1, "", "optimizer_update"], [53, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[54, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[55, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "conv1d"], [55, 0, 1, "", "conv1d_transpose"], [55, 0, 1, "", "conv2d"], [55, 0, 1, "", "conv2d_transpose"], [55, 0, 1, "", "conv3d"], [55, 0, 1, "", "conv3d_transpose"], [55, 0, 1, "", "depthwise_conv2d"], [55, 0, 1, "", "dropout"], [55, 0, 1, "", "dropout1d"], [55, 0, 1, "", "dropout2d"], [55, 0, 1, "", "dropout3d"], [55, 0, 1, "", "linear"], [55, 0, 1, "", "lstm_update"], [55, 0, 1, "", "multi_head_attention"], [55, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[56, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "cholesky"], [56, 0, 1, "", "cross"], [56, 0, 1, "", "det"], [56, 0, 1, "", "diag"], [56, 0, 1, "", "diagonal"], [56, 0, 1, "", "eig"], [56, 0, 1, "", "eigh"], [56, 0, 1, "", "eigvalsh"], [56, 0, 1, "", "inner"], [56, 0, 1, "", "inv"], [56, 0, 1, "", "matmul"], [56, 0, 1, "", "matrix_norm"], [56, 0, 1, "", "matrix_power"], [56, 0, 1, "", "matrix_rank"], [56, 0, 1, "", "matrix_transpose"], [56, 0, 1, "", "outer"], [56, 0, 1, "", "pinv"], [56, 0, 1, "", "qr"], [56, 0, 1, "", "slogdet"], [56, 0, 1, "", "solve"], [56, 0, 1, "", "svd"], [56, 0, 1, "", "svdvals"], [56, 0, 1, "", "tensordot"], [56, 0, 1, "", "tensorsolve"], [56, 0, 1, "", "trace"], [56, 0, 1, "", "vander"], [56, 0, 1, "", "vecdot"], [56, 0, 1, "", "vector_norm"], [56, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[57, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "binary_cross_entropy"], [57, 0, 1, "", "cross_entropy"], [57, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[58, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "clip"], [58, 0, 1, "", "concat"], [58, 0, 1, "", "constant_pad"], [58, 0, 1, "", "expand_dims"], [58, 0, 1, "", "flip"], [58, 0, 1, "", "permute_dims"], [58, 0, 1, "", "repeat"], [58, 0, 1, "", "reshape"], [58, 0, 1, "", "roll"], [58, 0, 1, "", "split"], [58, 0, 1, "", "squeeze"], [58, 0, 1, "", "stack"], [58, 0, 1, "", "swapaxes"], [58, 0, 1, "", "tile"], [58, 0, 1, "", "unstack"], [58, 0, 1, "", "view"], [58, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[59, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[60, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "multinomial"], [60, 0, 1, "", "randint"], [60, 0, 1, "", "random_normal"], [60, 0, 1, "", "random_uniform"], [60, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[61, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "argmax"], [61, 0, 1, "", "argmin"], [61, 0, 1, "", "argwhere"], [61, 0, 1, "", "nonzero"], [61, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[62, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "unique_all"], [62, 0, 1, "", "unique_counts"], [62, 0, 1, "", "unique_inverse"], [62, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[63, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "argsort"], [63, 0, 1, "", "msort"], [63, 0, 1, "", "searchsorted"], [63, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[64, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "cumprod"], [64, 0, 1, "", "cumsum"], [64, 0, 1, "", "einsum"], [64, 0, 1, "", "max"], [64, 0, 1, "", "mean"], [64, 0, 1, "", "min"], [64, 0, 1, "", "prod"], [64, 0, 1, "", "std"], [64, 0, 1, "", "sum"], [64, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[65, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "all"], [65, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[66, 2, 1, "", "_wrap_function"], [66, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[67, 3, 0, "-", "activations"], [68, 3, 0, "-", "base"], [94, 3, 0, "-", "container"], [69, 3, 0, "-", "conversions"], [70, 3, 0, "-", "creation"], [71, 3, 0, "-", "data_type"], [72, 3, 0, "-", "device"], [73, 3, 0, "-", "elementwise"], [74, 3, 0, "-", "experimental"], [75, 3, 0, "-", "general"], [76, 3, 0, "-", "gradients"], [77, 3, 0, "-", "image"], [78, 3, 0, "-", "layers"], [79, 3, 0, "-", "linear_algebra"], [80, 3, 0, "-", "losses"], [81, 3, 0, "-", "manipulation"], [82, 3, 0, "-", "norms"], [83, 3, 0, "-", "random"], [84, 3, 0, "-", "searching"], [85, 3, 0, "-", "set"], [86, 3, 0, "-", "sorting"], [87, 3, 0, "-", "statistical"], [88, 3, 0, "-", "utility"], [89, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[67, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "_static_gelu"], [67, 0, 1, "", "_static_hardswish"], [67, 0, 1, "", "_static_leaky_relu"], [67, 0, 1, "", "_static_log_softmax"], [67, 0, 1, "", "_static_mish"], [67, 0, 1, "", "_static_relu"], [67, 0, 1, "", "_static_sigmoid"], [67, 0, 1, "", "_static_softmax"], [67, 0, 1, "", "_static_softplus"], [67, 0, 1, "", "gelu"], [67, 0, 1, "", "hardswish"], [67, 0, 1, "", "leaky_relu"], [67, 0, 1, "", "log_softmax"], [67, 0, 1, "", "mish"], [67, 0, 1, "", "relu"], [67, 0, 1, "", "sigmoid"], [67, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[68, 1, 1, "", "ContainerBase"], [68, 2, 1, "", "_is_jsonable"], [68, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[68, 0, 1, "", "__getitem__"], [68, 0, 1, "", "__init__"], [68, 0, 1, "", "__setitem__"], [68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [68, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [68, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [68, 0, 1, "", "_cont_concat_unify"], [68, 0, 1, "", "_cont_get_dev"], [68, 0, 1, "", "_cont_get_shape"], [68, 0, 1, "", "_cont_get_shapes"], [68, 5, 1, "", "_cont_ivy"], [68, 0, 1, "", "_cont_mean_unify"], [68, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [68, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [68, 0, 1, "", "_cont_slice_keys"], [68, 0, 1, "", "_cont_sum_unify"], [68, 0, 1, "", "_get_queue_item"], [68, 0, 1, "", "cont_all_false"], [68, 0, 1, "", "cont_all_key_chains"], [68, 0, 1, "", "cont_all_true"], [68, 0, 1, "", "cont_as_bools"], [68, 0, 1, "", "cont_assert_contains_sub_container"], [68, 0, 1, "", "cont_assert_contains_sub_structure"], [68, 0, 1, "", "cont_assert_identical"], [68, 0, 1, "", "cont_assert_identical_structure"], [68, 0, 1, "", "cont_at_key_chain"], [68, 0, 1, "", "cont_at_key_chains"], [68, 0, 1, "", "cont_at_keys"], [68, 0, 1, "", "cont_combine"], [68, 0, 1, "", "cont_common_key_chains"], [68, 5, 1, "", "cont_config"], [68, 0, 1, "", "cont_contains_sub_container"], [68, 0, 1, "", "cont_contains_sub_structure"], [68, 0, 1, "", "cont_copy"], [68, 0, 1, "", "cont_create_if_absent"], [68, 0, 1, "", "cont_cutoff_at_depth"], [68, 0, 1, "", "cont_cutoff_at_height"], [68, 0, 1, "", "cont_deep_copy"], [68, 5, 1, "", "cont_dev"], [68, 5, 1, "", "cont_dev_str"], [68, 0, 1, "", "cont_diff"], [68, 0, 1, "", "cont_duplicate_array_keychains"], [68, 0, 1, "", "cont_find_sub_container"], [68, 0, 1, "", "cont_find_sub_structure"], [68, 0, 1, "", "cont_flatten_key_chain"], [68, 0, 1, "", "cont_flatten_key_chains"], [68, 0, 1, "", "cont_format_key_chains"], [68, 0, 1, "", "cont_from_disk_as_hdf5"], [68, 0, 1, "", "cont_from_disk_as_json"], [68, 0, 1, "", "cont_from_disk_as_pickled"], [68, 0, 1, "", "cont_from_flat_list"], [68, 0, 1, "", "cont_handle_inplace"], [68, 0, 1, "", "cont_has_key"], [68, 0, 1, "", "cont_has_key_chain"], [68, 0, 1, "", "cont_identical"], [68, 0, 1, "", "cont_identical_array_shapes"], [68, 0, 1, "", "cont_identical_configs"], [68, 0, 1, "", "cont_identical_structure"], [68, 0, 1, "", "cont_if_exists"], [68, 0, 1, "", "cont_inplace_update"], [68, 5, 1, "", "cont_ivy"], [68, 0, 1, "", "cont_key_chains_containing"], [68, 0, 1, "", "cont_list_join"], [68, 0, 1, "", "cont_list_stack"], [68, 0, 1, "", "cont_load"], [68, 0, 1, "", "cont_map"], [68, 0, 1, "", "cont_map_sub_conts"], [68, 5, 1, "", "cont_max_depth"], [68, 0, 1, "", "cont_multi_map"], [68, 0, 1, "", "cont_multi_map_in_function"], [68, 0, 1, "", "cont_num_arrays"], [68, 0, 1, "", "cont_overwrite_at_key_chain"], [68, 0, 1, "", "cont_overwrite_at_key_chains"], [68, 0, 1, "", "cont_prune_empty"], [68, 0, 1, "", "cont_prune_key_chain"], [68, 0, 1, "", "cont_prune_key_chains"], [68, 0, 1, "", "cont_prune_key_from_key_chains"], [68, 0, 1, "", "cont_prune_keys"], [68, 0, 1, "", "cont_prune_keys_from_key_chains"], [68, 0, 1, "", "cont_reduce"], [68, 0, 1, "", "cont_remove_key_length_limit"], [68, 0, 1, "", "cont_remove_print_limit"], [68, 0, 1, "", "cont_reshape_like"], [68, 0, 1, "", "cont_restructure"], [68, 0, 1, "", "cont_restructure_key_chains"], [68, 0, 1, "", "cont_save"], [68, 0, 1, "", "cont_set_at_key_chain"], [68, 0, 1, "", "cont_set_at_key_chains"], [68, 0, 1, "", "cont_set_at_keys"], [68, 5, 1, "", "cont_shape"], [68, 5, 1, "", "cont_shapes"], [68, 0, 1, "", "cont_show"], [68, 0, 1, "", "cont_show_sub_container"], [68, 0, 1, "", "cont_size_ordered_arrays"], [68, 0, 1, "", "cont_slice_keys"], [68, 0, 1, "", "cont_slice_via_key"], [68, 0, 1, "", "cont_sort_by_key"], [68, 0, 1, "", "cont_structural_diff"], [68, 0, 1, "", "cont_to_dict"], [68, 0, 1, "", "cont_to_disk_as_hdf5"], [68, 0, 1, "", "cont_to_disk_as_json"], [68, 0, 1, "", "cont_to_disk_as_pickled"], [68, 0, 1, "", "cont_to_flat_list"], [68, 0, 1, "", "cont_to_iterator"], [68, 0, 1, "", "cont_to_iterator_keys"], [68, 0, 1, "", "cont_to_iterator_values"], [68, 0, 1, "", "cont_to_jsonable"], [68, 0, 1, "", "cont_to_nested_list"], [68, 0, 1, "", "cont_to_raw"], [68, 0, 1, "", "cont_trim_key"], [68, 0, 1, "", "cont_try_kc"], [68, 0, 1, "", "cont_unify"], [68, 0, 1, "", "cont_unstack_conts"], [68, 0, 1, "", "cont_update_config"], [68, 0, 1, "", "cont_with_default_key_color"], [68, 0, 1, "", "cont_with_entries_as_lists"], [68, 0, 1, "", "cont_with_ivy_backend"], [68, 0, 1, "", "cont_with_key_length_limit"], [68, 0, 1, "", "cont_with_print_indent"], [68, 0, 1, "", "cont_with_print_limit"], [68, 0, 1, "", "cont_with_print_line_spacing"], [68, 5, 1, "", "dynamic_backend"], [68, 0, 1, "", "h5_file_size"], [68, 0, 1, "", "shuffle_h5_file"], [68, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[94, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[94, 0, 1, "", "__abs__"], [94, 0, 1, "", "__add__"], [94, 0, 1, "", "__eq__"], [94, 0, 1, "", "__ge__"], [94, 0, 1, "", "__gt__"], [94, 0, 1, "", "__init__"], [94, 0, 1, "", "__le__"], [94, 0, 1, "", "__lt__"], [94, 0, 1, "", "__ne__"], [94, 0, 1, "", "__pow__"], [94, 0, 1, "", "__radd__"], [94, 0, 1, "", "__rrshift__"], [94, 0, 1, "", "__rshift__"], [94, 0, 1, "", "__rsub__"], [94, 0, 1, "", "__sub__"], [94, 0, 1, "", "__truediv__"], [94, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[69, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "_static_to_ivy"], [69, 0, 1, "", "_static_to_native"], [69, 0, 1, "", "to_ivy"], [69, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[70, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_arange"], [70, 0, 1, "", "_static_asarray"], [70, 0, 1, "", "_static_copy_array"], [70, 0, 1, "", "_static_empty"], [70, 0, 1, "", "_static_empty_like"], [70, 0, 1, "", "_static_eye"], [70, 0, 1, "", "_static_from_dlpack"], [70, 0, 1, "", "_static_full"], [70, 0, 1, "", "_static_full_like"], [70, 0, 1, "", "_static_linspace"], [70, 0, 1, "", "_static_logspace"], [70, 0, 1, "", "_static_meshgrid"], [70, 0, 1, "", "_static_native_array"], [70, 0, 1, "", "_static_one_hot"], [70, 0, 1, "", "_static_ones"], [70, 0, 1, "", "_static_ones_like"], [70, 0, 1, "", "_static_tril"], [70, 0, 1, "", "_static_triu"], [70, 0, 1, "", "_static_zeros"], [70, 0, 1, "", "_static_zeros_like"], [70, 0, 1, "", "asarray"], [70, 0, 1, "", "copy_array"], [70, 0, 1, "", "empty_like"], [70, 0, 1, "", "from_dlpack"], [70, 0, 1, "", "frombuffer"], [70, 0, 1, "", "full_like"], [70, 0, 1, "", "linspace"], [70, 0, 1, "", "logspace"], [70, 0, 1, "", "meshgrid"], [70, 0, 1, "", "native_array"], [70, 0, 1, "", "one_hot"], [70, 0, 1, "", "ones_like"], [70, 0, 1, "", "static_frombuffer"], [70, 0, 1, "", "static_triu_indices"], [70, 0, 1, "", "tril"], [70, 0, 1, "", "triu"], [70, 0, 1, "", "triu_indices"], [70, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[71, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_static_astype"], [71, 0, 1, "", "_static_broadcast_arrays"], [71, 0, 1, "", "_static_broadcast_to"], [71, 0, 1, "", "_static_can_cast"], [71, 0, 1, "", "_static_default_complex_dtype"], [71, 0, 1, "", "_static_default_float_dtype"], [71, 0, 1, "", "_static_dtype"], [71, 0, 1, "", "_static_finfo"], [71, 0, 1, "", "_static_function_supported_dtypes"], [71, 0, 1, "", "_static_function_unsupported_dtypes"], [71, 0, 1, "", "_static_iinfo"], [71, 0, 1, "", "_static_is_bool_dtype"], [71, 0, 1, "", "_static_is_complex_dtype"], [71, 0, 1, "", "_static_is_float_dtype"], [71, 0, 1, "", "_static_is_int_dtype"], [71, 0, 1, "", "_static_is_uint_dtype"], [71, 0, 1, "", "_static_result_type"], [71, 0, 1, "", "astype"], [71, 0, 1, "", "broadcast_arrays"], [71, 0, 1, "", "broadcast_to"], [71, 0, 1, "", "can_cast"], [71, 0, 1, "", "dtype"], [71, 0, 1, "", "finfo"], [71, 0, 1, "", "iinfo"], [71, 0, 1, "", "is_bool_dtype"], [71, 0, 1, "", "is_complex_dtype"], [71, 0, 1, "", "is_float_dtype"], [71, 0, 1, "", "is_int_dtype"], [71, 0, 1, "", "is_uint_dtype"], [71, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[72, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_dev"], [72, 0, 1, "", "_static_to_device"], [72, 0, 1, "", "dev"], [72, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[73, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_abs"], [73, 0, 1, "", "_static_acos"], [73, 0, 1, "", "_static_acosh"], [73, 0, 1, "", "_static_add"], [73, 0, 1, "", "_static_asin"], [73, 0, 1, "", "_static_asinh"], [73, 0, 1, "", "_static_atan"], [73, 0, 1, "", "_static_atan2"], [73, 0, 1, "", "_static_atanh"], [73, 0, 1, "", "_static_bitwise_and"], [73, 0, 1, "", "_static_bitwise_invert"], [73, 0, 1, "", "_static_bitwise_left_shift"], [73, 0, 1, "", "_static_bitwise_or"], [73, 0, 1, "", "_static_bitwise_right_shift"], [73, 0, 1, "", "_static_bitwise_xor"], [73, 0, 1, "", "_static_ceil"], [73, 0, 1, "", "_static_cos"], [73, 0, 1, "", "_static_cosh"], [73, 0, 1, "", "_static_deg2rad"], [73, 0, 1, "", "_static_divide"], [73, 0, 1, "", "_static_equal"], [73, 0, 1, "", "_static_erf"], [73, 0, 1, "", "_static_exp"], [73, 0, 1, "", "_static_expm1"], [73, 0, 1, "", "_static_floor"], [73, 0, 1, "", "_static_floor_divide"], [73, 0, 1, "", "_static_greater"], [73, 0, 1, "", "_static_greater_equal"], [73, 0, 1, "", "_static_isfinite"], [73, 0, 1, "", "_static_isinf"], [73, 0, 1, "", "_static_isnan"], [73, 0, 1, "", "_static_isreal"], [73, 0, 1, "", "_static_lcm"], [73, 0, 1, "", "_static_less"], [73, 0, 1, "", "_static_less_equal"], [73, 0, 1, "", "_static_log"], [73, 0, 1, "", "_static_log10"], [73, 0, 1, "", "_static_log1p"], [73, 0, 1, "", "_static_log2"], [73, 0, 1, "", "_static_logaddexp"], [73, 0, 1, "", "_static_logical_and"], [73, 0, 1, "", "_static_logical_not"], [73, 0, 1, "", "_static_logical_or"], [73, 0, 1, "", "_static_logical_xor"], [73, 0, 1, "", "_static_maximum"], [73, 0, 1, "", "_static_minimum"], [73, 0, 1, "", "_static_multiply"], [73, 0, 1, "", "_static_negative"], [73, 0, 1, "", "_static_not_equal"], [73, 0, 1, "", "_static_positive"], [73, 0, 1, "", "_static_pow"], [73, 0, 1, "", "_static_rad2deg"], [73, 0, 1, "", "_static_reciprocal"], [73, 0, 1, "", "_static_remainder"], [73, 0, 1, "", "_static_round"], [73, 0, 1, "", "_static_sign"], [73, 0, 1, "", "_static_sin"], [73, 0, 1, "", "_static_sinh"], [73, 0, 1, "", "_static_sqrt"], [73, 0, 1, "", "_static_square"], [73, 0, 1, "", "_static_subtract"], [73, 0, 1, "", "_static_tan"], [73, 0, 1, "", "_static_tanh"], [73, 0, 1, "", "_static_trapz"], [73, 0, 1, "", "_static_trunc"], [73, 0, 1, "", "_static_trunc_divide"], [73, 0, 1, "", "abs"], [73, 0, 1, "", "acos"], [73, 0, 1, "", "acosh"], [73, 0, 1, "", "add"], [73, 0, 1, "", "angle"], [73, 0, 1, "", "asin"], [73, 0, 1, "", "asinh"], [73, 0, 1, "", "atan"], [73, 0, 1, "", "atan2"], [73, 0, 1, "", "atanh"], [73, 0, 1, "", "bitwise_and"], [73, 0, 1, "", "bitwise_invert"], [73, 0, 1, "", "bitwise_left_shift"], [73, 0, 1, "", "bitwise_or"], [73, 0, 1, "", "bitwise_right_shift"], [73, 0, 1, "", "bitwise_xor"], [73, 0, 1, "", "ceil"], [73, 0, 1, "", "cos"], [73, 0, 1, "", "cosh"], [73, 0, 1, "", "deg2rad"], [73, 0, 1, "", "divide"], [73, 0, 1, "", "equal"], [73, 0, 1, "", "erf"], [73, 0, 1, "", "exp"], [73, 0, 1, "", "exp2"], [73, 0, 1, "", "expm1"], [73, 0, 1, "", "floor"], [73, 0, 1, "", "floor_divide"], [73, 0, 1, "", "fmin"], [73, 0, 1, "", "gcd"], [73, 0, 1, "", "greater"], [73, 0, 1, "", "greater_equal"], [73, 0, 1, "", "imag"], [73, 0, 1, "", "isfinite"], [73, 0, 1, "", "isinf"], [73, 0, 1, "", "isnan"], [73, 0, 1, "", "isreal"], [73, 0, 1, "", "lcm"], [73, 0, 1, "", "less"], [73, 0, 1, "", "less_equal"], [73, 0, 1, "", "log"], [73, 0, 1, "", "log10"], [73, 0, 1, "", "log1p"], [73, 0, 1, "", "log2"], [73, 0, 1, "", "logaddexp"], [73, 0, 1, "", "logaddexp2"], [73, 0, 1, "", "logical_and"], [73, 0, 1, "", "logical_not"], [73, 0, 1, "", "logical_or"], [73, 0, 1, "", "logical_xor"], [73, 0, 1, "", "maximum"], [73, 0, 1, "", "minimum"], [73, 0, 1, "", "multiply"], [73, 0, 1, "", "nan_to_num"], [73, 0, 1, "", "negative"], [73, 0, 1, "", "not_equal"], [73, 0, 1, "", "positive"], [73, 0, 1, "", "pow"], [73, 0, 1, "", "rad2deg"], [73, 0, 1, "", "real"], [73, 0, 1, "", "reciprocal"], [73, 0, 1, "", "remainder"], [73, 0, 1, "", "round"], [73, 0, 1, "", "sign"], [73, 0, 1, "", "sin"], [73, 0, 1, "", "sinh"], [73, 0, 1, "", "sqrt"], [73, 0, 1, "", "square"], [73, 0, 1, "", "static_angle"], [73, 0, 1, "", "static_exp2"], [73, 0, 1, "", "static_fmin"], [73, 0, 1, "", "static_gcd"], [73, 0, 1, "", "static_imag"], [73, 0, 1, "", "static_logaddexp2"], [73, 0, 1, "", "static_nan_to_num"], [73, 0, 1, "", "static_real"], [73, 0, 1, "", "subtract"], [73, 0, 1, "", "tan"], [73, 0, 1, "", "tanh"], [73, 0, 1, "", "trapz"], [73, 0, 1, "", "trunc"], [73, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[74, 3, 0, "-", "activations"], [74, 3, 0, "-", "conversions"], [74, 3, 0, "-", "creation"], [74, 3, 0, "-", "data_type"], [74, 3, 0, "-", "device"], [74, 3, 0, "-", "elementwise"], [74, 3, 0, "-", "general"], [74, 3, 0, "-", "gradients"], [74, 3, 0, "-", "image"], [74, 3, 0, "-", "layers"], [74, 3, 0, "-", "linear_algebra"], [74, 3, 0, "-", "losses"], [74, 3, 0, "-", "manipulation"], [74, 3, 0, "-", "norms"], [74, 3, 0, "-", "random"], [74, 3, 0, "-", "searching"], [74, 3, 0, "-", "set"], [74, 3, 0, "-", "sorting"], [74, 3, 0, "-", "statistical"], [74, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[74, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_elu"], [74, 0, 1, "", "_static_silu"], [74, 0, 1, "", "elu"], [74, 0, 1, "", "logit"], [74, 0, 1, "", "logsigmoid"], [74, 0, 1, "", "prelu"], [74, 0, 1, "", "relu6"], [74, 0, 1, "", "selu"], [74, 0, 1, "", "silu"], [74, 0, 1, "", "static_logit"], [74, 0, 1, "", "static_logsigmoid"], [74, 0, 1, "", "static_prelu"], [74, 0, 1, "", "static_relu6"], [74, 0, 1, "", "static_selu"], [74, 0, 1, "", "static_thresholded_relu"], [74, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[74, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[74, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_trilu"], [74, 0, 1, "", "blackman_window"], [74, 0, 1, "", "eye_like"], [74, 0, 1, "", "hamming_window"], [74, 0, 1, "", "hann_window"], [74, 0, 1, "", "kaiser_bessel_derived_window"], [74, 0, 1, "", "kaiser_window"], [74, 0, 1, "", "mel_weight_matrix"], [74, 0, 1, "", "static_blackman_window"], [74, 0, 1, "", "static_eye_like"], [74, 0, 1, "", "static_hamming_window"], [74, 0, 1, "", "static_hann_window"], [74, 0, 1, "", "static_kaiser_bessel_derived_window"], [74, 0, 1, "", "static_kaiser_window"], [74, 0, 1, "", "static_mel_weight_matrix"], [74, 0, 1, "", "static_tril_indices"], [74, 0, 1, "", "static_unsorted_segment_min"], [74, 0, 1, "", "static_unsorted_segment_sum"], [74, 0, 1, "", "static_vorbis_window"], [74, 0, 1, "", "tril_indices"], [74, 0, 1, "", "trilu"], [74, 0, 1, "", "unsorted_segment_min"], [74, 0, 1, "", "unsorted_segment_sum"], [74, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[74, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[74, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[74, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "allclose"], [74, 0, 1, "", "binarizer"], [74, 0, 1, "", "conj"], [74, 0, 1, "", "copysign"], [74, 0, 1, "", "count_nonzero"], [74, 0, 1, "", "diff"], [74, 0, 1, "", "digamma"], [74, 0, 1, "", "fix"], [74, 0, 1, "", "float_power"], [74, 0, 1, "", "fmax"], [74, 0, 1, "", "fmod"], [74, 0, 1, "", "frexp"], [74, 0, 1, "", "gradient"], [74, 0, 1, "", "hypot"], [74, 0, 1, "", "isclose"], [74, 0, 1, "", "ldexp"], [74, 0, 1, "", "lerp"], [74, 0, 1, "", "modf"], [74, 0, 1, "", "nansum"], [74, 0, 1, "", "nextafter"], [74, 0, 1, "", "signbit"], [74, 0, 1, "", "sinc"], [74, 0, 1, "", "sparsify_tensor"], [74, 0, 1, "", "static_allclose"], [74, 0, 1, "", "static_binarizer"], [74, 0, 1, "", "static_conj"], [74, 0, 1, "", "static_copysign"], [74, 0, 1, "", "static_count_nonzero"], [74, 0, 1, "", "static_diff"], [74, 0, 1, "", "static_digamma"], [74, 0, 1, "", "static_fix"], [74, 0, 1, "", "static_float_power"], [74, 0, 1, "", "static_fmax"], [74, 0, 1, "", "static_fmod"], [74, 0, 1, "", "static_frexp"], [74, 0, 1, "", "static_gradient"], [74, 0, 1, "", "static_hypot"], [74, 0, 1, "", "static_isclose"], [74, 0, 1, "", "static_ldexp"], [74, 0, 1, "", "static_lerp"], [74, 0, 1, "", "static_modf"], [74, 0, 1, "", "static_nansum"], [74, 0, 1, "", "static_nextafter"], [74, 0, 1, "", "static_signbit"], [74, 0, 1, "", "static_sinc"], [74, 0, 1, "", "static_sparsify_tensor"], [74, 0, 1, "", "static_xlogy"], [74, 0, 1, "", "static_zeta"], [74, 0, 1, "", "xlogy"], [74, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[74, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_reduce"], [74, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[74, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[74, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[74, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_fft"], [74, 0, 1, "", "adaptive_avg_pool1d"], [74, 0, 1, "", "adaptive_avg_pool2d"], [74, 0, 1, "", "adaptive_max_pool2d"], [74, 0, 1, "", "avg_pool1d"], [74, 0, 1, "", "avg_pool2d"], [74, 0, 1, "", "avg_pool3d"], [74, 0, 1, "", "dct"], [74, 0, 1, "", "dft"], [74, 0, 1, "", "embedding"], [74, 0, 1, "", "fft"], [74, 0, 1, "", "idct"], [74, 0, 1, "", "ifft"], [74, 0, 1, "", "ifftn"], [74, 0, 1, "", "interpolate"], [74, 0, 1, "", "max_pool1d"], [74, 0, 1, "", "max_pool2d"], [74, 0, 1, "", "max_pool3d"], [74, 0, 1, "", "rfftn"], [74, 0, 1, "", "static_adaptive_avg_pool1d"], [74, 0, 1, "", "static_adaptive_avg_pool2d"], [74, 0, 1, "", "static_adaptive_max_pool2d"], [74, 0, 1, "", "static_avg_pool1d"], [74, 0, 1, "", "static_avg_pool2d"], [74, 0, 1, "", "static_avg_pool3d"], [74, 0, 1, "", "static_dct"], [74, 0, 1, "", "static_dft"], [74, 0, 1, "", "static_embedding"], [74, 0, 1, "", "static_idct"], [74, 0, 1, "", "static_ifft"], [74, 0, 1, "", "static_ifftn"], [74, 0, 1, "", "static_interpolate"], [74, 0, 1, "", "static_max_pool1d"], [74, 0, 1, "", "static_max_pool2d"], [74, 0, 1, "", "static_max_pool3d"], [74, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[74, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "adjoint"], [74, 0, 1, "", "cond"], [74, 0, 1, "", "diagflat"], [74, 0, 1, "", "dot"], [74, 0, 1, "", "eig"], [74, 0, 1, "", "eigh_tridiagonal"], [74, 0, 1, "", "eigvals"], [74, 0, 1, "", "initialize_tucker"], [74, 0, 1, "", "kron"], [74, 0, 1, "", "make_svd_non_negative"], [74, 0, 1, "", "matrix_exp"], [74, 0, 1, "", "mode_dot"], [74, 0, 1, "", "multi_dot"], [74, 0, 1, "", "multi_mode_dot"], [74, 0, 1, "", "partial_tucker"], [74, 0, 1, "", "static_adjoint"], [74, 0, 1, "", "static_cond"], [74, 0, 1, "", "static_diagflat"], [74, 0, 1, "", "static_dot"], [74, 0, 1, "", "static_eig"], [74, 0, 1, "", "static_eigh_tridiagonal"], [74, 0, 1, "", "static_eigvals"], [74, 0, 1, "", "static_initialize_tucker"], [74, 0, 1, "", "static_kron"], [74, 0, 1, "", "static_make_svd_non_negative"], [74, 0, 1, "", "static_matrix_exp"], [74, 0, 1, "", "static_mode_dot"], [74, 0, 1, "", "static_multi_dot"], [74, 0, 1, "", "static_multi_mode_dot"], [74, 0, 1, "", "static_partial_tucker"], [74, 0, 1, "", "static_svd_flip"], [74, 0, 1, "", "static_truncated_svd"], [74, 0, 1, "", "static_tucker"], [74, 0, 1, "", "svd_flip"], [74, 0, 1, "", "truncated_svd"], [74, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[74, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_huber_loss"], [74, 0, 1, "", "_static_l1_loss"], [74, 0, 1, "", "_static_smooth_l1_loss"], [74, 0, 1, "", "_static_soft_margin_loss"], [74, 0, 1, "", "huber_loss"], [74, 0, 1, "", "l1_loss"], [74, 0, 1, "", "smooth_l1_loss"], [74, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[74, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_fill_diagonal"], [74, 0, 1, "", "_static_unique_consecutive"], [74, 0, 1, "", "as_strided"], [74, 0, 1, "", "associative_scan"], [74, 0, 1, "", "atleast_1d"], [74, 0, 1, "", "atleast_2d"], [74, 0, 1, "", "atleast_3d"], [74, 0, 1, "", "broadcast_shapes"], [74, 0, 1, "", "concat_from_sequence"], [74, 0, 1, "", "dsplit"], [74, 0, 1, "", "dstack"], [74, 0, 1, "", "expand"], [74, 0, 1, "", "fill_diagonal"], [74, 0, 1, "", "flatten"], [74, 0, 1, "", "fliplr"], [74, 0, 1, "", "flipud"], [74, 0, 1, "", "fold"], [74, 0, 1, "", "heaviside"], [74, 0, 1, "", "hsplit"], [74, 0, 1, "", "hstack"], [74, 0, 1, "", "i0"], [74, 0, 1, "", "matricize"], [74, 0, 1, "", "moveaxis"], [74, 0, 1, "", "pad"], [74, 0, 1, "", "partial_fold"], [74, 0, 1, "", "partial_tensor_to_vec"], [74, 0, 1, "", "partial_unfold"], [74, 0, 1, "", "partial_vec_to_tensor"], [74, 0, 1, "", "rot90"], [74, 0, 1, "", "soft_thresholding"], [74, 0, 1, "", "static_as_strided"], [74, 0, 1, "", "static_atleast_1d"], [74, 0, 1, "", "static_atleast_2d"], [74, 0, 1, "", "static_atleast_3d"], [74, 0, 1, "", "static_broadcast_shapes"], [74, 0, 1, "", "static_concat_from_sequence"], [74, 0, 1, "", "static_dsplit"], [74, 0, 1, "", "static_dstack"], [74, 0, 1, "", "static_expand"], [74, 0, 1, "", "static_flatten"], [74, 0, 1, "", "static_fliplr"], [74, 0, 1, "", "static_flipud"], [74, 0, 1, "", "static_fold"], [74, 0, 1, "", "static_heaviside"], [74, 0, 1, "", "static_hsplit"], [74, 0, 1, "", "static_hstack"], [74, 0, 1, "", "static_i0"], [74, 0, 1, "", "static_matricize"], [74, 0, 1, "", "static_moveaxis"], [74, 0, 1, "", "static_pad"], [74, 0, 1, "", "static_partial_fold"], [74, 0, 1, "", "static_partial_tensor_to_vec"], [74, 0, 1, "", "static_partial_unfold"], [74, 0, 1, "", "static_partial_vec_to_tensor"], [74, 0, 1, "", "static_rot90"], [74, 0, 1, "", "static_soft_thresholding"], [74, 0, 1, "", "static_take_along_axis"], [74, 0, 1, "", "static_top_k"], [74, 0, 1, "", "static_unfold"], [74, 0, 1, "", "static_vsplit"], [74, 0, 1, "", "static_vstack"], [74, 0, 1, "", "take_along_axis"], [74, 0, 1, "", "top_k"], [74, 0, 1, "", "unfold"], [74, 0, 1, "", "unique_consecutive"], [74, 0, 1, "", "vsplit"], [74, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[74, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "batch_norm"], [74, 0, 1, "", "group_norm"], [74, 0, 1, "", "instance_norm"], [74, 0, 1, "", "l1_normalize"], [74, 0, 1, "", "l2_normalize"], [74, 0, 1, "", "lp_normalize"], [74, 0, 1, "", "static_batch_norm"], [74, 0, 1, "", "static_group_norm"], [74, 0, 1, "", "static_instance_norm"], [74, 0, 1, "", "static_l1_normalize"], [74, 0, 1, "", "static_l2_normalize"], [74, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[74, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "bernoulli"], [74, 0, 1, "", "beta"], [74, 0, 1, "", "dirichlet"], [74, 0, 1, "", "gamma"], [74, 0, 1, "", "poisson"], [74, 0, 1, "", "static_bernoulli"], [74, 0, 1, "", "static_beta"], [74, 0, 1, "", "static_dirichlet"], [74, 0, 1, "", "static_gamma"], [74, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[74, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "static_unravel_index"], [74, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[74, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[74, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "invert_permutation"], [74, 0, 1, "", "lexsort"], [74, 0, 1, "", "static_invert_permutation"], [74, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[74, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_cummax"], [74, 0, 1, "", "_static_cummin"], [74, 0, 1, "", "bincount"], [74, 0, 1, "", "corrcoef"], [74, 0, 1, "", "cov"], [74, 0, 1, "", "cummax"], [74, 0, 1, "", "cummin"], [74, 0, 1, "", "histogram"], [74, 0, 1, "", "igamma"], [74, 0, 1, "", "median"], [74, 0, 1, "", "nanmean"], [74, 0, 1, "", "nanmedian"], [74, 0, 1, "", "nanprod"], [74, 0, 1, "", "quantile"], [74, 0, 1, "", "static_bincount"], [74, 0, 1, "", "static_corrcoef"], [74, 0, 1, "", "static_cov"], [74, 0, 1, "", "static_histogram"], [74, 0, 1, "", "static_igamma"], [74, 0, 1, "", "static_median"], [74, 0, 1, "", "static_nanmean"], [74, 0, 1, "", "static_nanmedian"], [74, 0, 1, "", "static_nanprod"], [74, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[74, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "optional_get_element"], [74, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[75, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_all_equal"], [75, 0, 1, "", "_static_array_equal"], [75, 0, 1, "", "_static_assert_supports_inplace"], [75, 0, 1, "", "_static_clip_matrix_norm"], [75, 0, 1, "", "_static_clip_vector_norm"], [75, 0, 1, "", "_static_einops_rearrange"], [75, 0, 1, "", "_static_einops_reduce"], [75, 0, 1, "", "_static_einops_repeat"], [75, 0, 1, "", "_static_exists"], [75, 0, 1, "", "_static_fourier_encode"], [75, 0, 1, "", "_static_gather"], [75, 0, 1, "", "_static_gather_nd"], [75, 0, 1, "", "_static_get_num_dims"], [75, 0, 1, "", "_static_has_nans"], [75, 0, 1, "", "_static_inplace_decrement"], [75, 0, 1, "", "_static_inplace_increment"], [75, 0, 1, "", "_static_inplace_update"], [75, 0, 1, "", "_static_is_array"], [75, 0, 1, "", "_static_is_ivy_array"], [75, 0, 1, "", "_static_is_native_array"], [75, 0, 1, "", "_static_scatter_flat"], [75, 0, 1, "", "_static_scatter_nd"], [75, 0, 1, "", "_static_stable_divide"], [75, 0, 1, "", "_static_stable_pow"], [75, 0, 1, "", "_static_supports_inplace_updates"], [75, 0, 1, "", "_static_to_list"], [75, 0, 1, "", "_static_to_numpy"], [75, 0, 1, "", "_static_to_scalar"], [75, 0, 1, "", "_static_value_is_nan"], [75, 0, 1, "", "all_equal"], [75, 0, 1, "", "array_equal"], [75, 0, 1, "", "assert_supports_inplace"], [75, 0, 1, "", "clip_matrix_norm"], [75, 0, 1, "", "clip_vector_norm"], [75, 0, 1, "", "einops_rearrange"], [75, 0, 1, "", "einops_reduce"], [75, 0, 1, "", "einops_repeat"], [75, 0, 1, "", "exists"], [75, 0, 1, "", "fourier_encode"], [75, 0, 1, "", "gather"], [75, 0, 1, "", "gather_nd"], [75, 0, 1, "", "get_num_dims"], [75, 0, 1, "", "has_nans"], [75, 0, 1, "", "inplace_decrement"], [75, 0, 1, "", "inplace_increment"], [75, 0, 1, "", "inplace_update"], [75, 0, 1, "", "is_array"], [75, 0, 1, "", "is_ivy_array"], [75, 0, 1, "", "is_native_array"], [75, 0, 1, "", "isin"], [75, 0, 1, "", "itemsize"], [75, 0, 1, "", "scatter_flat"], [75, 0, 1, "", "scatter_nd"], [75, 0, 1, "", "stable_divide"], [75, 0, 1, "", "stable_pow"], [75, 0, 1, "", "static_isin"], [75, 0, 1, "", "static_itemsize"], [75, 0, 1, "", "static_strides"], [75, 0, 1, "", "strides"], [75, 0, 1, "", "supports_inplace_updates"], [75, 0, 1, "", "to_list"], [75, 0, 1, "", "to_numpy"], [75, 0, 1, "", "to_scalar"], [75, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[76, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_stop_gradient"], [76, 0, 1, "", "adam_step"], [76, 0, 1, "", "adam_update"], [76, 0, 1, "", "gradient_descent_update"], [76, 0, 1, "", "lamb_update"], [76, 0, 1, "", "lars_update"], [76, 0, 1, "", "optimizer_update"], [76, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[77, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[78, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_conv1d"], [78, 0, 1, "", "_static_conv1d_transpose"], [78, 0, 1, "", "_static_conv2d"], [78, 0, 1, "", "_static_conv2d_transpose"], [78, 0, 1, "", "_static_conv3d"], [78, 0, 1, "", "_static_conv3d_transpose"], [78, 0, 1, "", "_static_depthwise_conv2d"], [78, 0, 1, "", "_static_dropout"], [78, 0, 1, "", "_static_dropout1d"], [78, 0, 1, "", "_static_dropout2d"], [78, 0, 1, "", "_static_dropout3d"], [78, 0, 1, "", "_static_linear"], [78, 0, 1, "", "_static_lstm_update"], [78, 0, 1, "", "_static_multi_head_attention"], [78, 0, 1, "", "_static_reduce_window"], [78, 0, 1, "", "_static_scaled_dot_product_attention"], [78, 0, 1, "", "conv1d"], [78, 0, 1, "", "conv1d_transpose"], [78, 0, 1, "", "conv2d"], [78, 0, 1, "", "conv2d_transpose"], [78, 0, 1, "", "conv3d"], [78, 0, 1, "", "conv3d_transpose"], [78, 0, 1, "", "depthwise_conv2d"], [78, 0, 1, "", "dropout"], [78, 0, 1, "", "dropout1d"], [78, 0, 1, "", "dropout2d"], [78, 0, 1, "", "dropout3d"], [78, 0, 1, "", "linear"], [78, 0, 1, "", "lstm_update"], [78, 0, 1, "", "multi_head_attention"], [78, 0, 1, "", "reduce_window"], [78, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[79, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_cholesky"], [79, 0, 1, "", "_static_cross"], [79, 0, 1, "", "_static_det"], [79, 0, 1, "", "_static_diag"], [79, 0, 1, "", "_static_diagonal"], [79, 0, 1, "", "_static_eigh"], [79, 0, 1, "", "_static_eigvalsh"], [79, 0, 1, "", "_static_inner"], [79, 0, 1, "", "_static_inv"], [79, 0, 1, "", "_static_matmul"], [79, 0, 1, "", "_static_matrix_norm"], [79, 0, 1, "", "_static_matrix_power"], [79, 0, 1, "", "_static_matrix_rank"], [79, 0, 1, "", "_static_matrix_transpose"], [79, 0, 1, "", "_static_outer"], [79, 0, 1, "", "_static_pinv"], [79, 0, 1, "", "_static_qr"], [79, 0, 1, "", "_static_slogdet"], [79, 0, 1, "", "_static_solve"], [79, 0, 1, "", "_static_svd"], [79, 0, 1, "", "_static_svdvals"], [79, 0, 1, "", "_static_tensordot"], [79, 0, 1, "", "_static_tensorsolve"], [79, 0, 1, "", "_static_trace"], [79, 0, 1, "", "_static_vander"], [79, 0, 1, "", "_static_vecdot"], [79, 0, 1, "", "_static_vector_norm"], [79, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [79, 0, 1, "", "cholesky"], [79, 0, 1, "", "cross"], [79, 0, 1, "", "det"], [79, 0, 1, "", "diag"], [79, 0, 1, "", "diagonal"], [79, 0, 1, "", "eigh"], [79, 0, 1, "", "eigvalsh"], [79, 0, 1, "", "general_inner_product"], [79, 0, 1, "", "inner"], [79, 0, 1, "", "inv"], [79, 0, 1, "", "matmul"], [79, 0, 1, "", "matrix_norm"], [79, 0, 1, "", "matrix_power"], [79, 0, 1, "", "matrix_rank"], [79, 0, 1, "", "matrix_transpose"], [79, 0, 1, "", "outer"], [79, 0, 1, "", "pinv"], [79, 0, 1, "", "qr"], [79, 0, 1, "", "slogdet"], [79, 0, 1, "", "solve"], [79, 0, 1, "", "static_general_inner_product"], [79, 0, 1, "", "svd"], [79, 0, 1, "", "svdvals"], [79, 0, 1, "", "tensordot"], [79, 0, 1, "", "tensorsolve"], [79, 0, 1, "", "trace"], [79, 0, 1, "", "vander"], [79, 0, 1, "", "vecdot"], [79, 0, 1, "", "vector_norm"], [79, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[80, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_binary_cross_entropy"], [80, 0, 1, "", "_static_cross_entropy"], [80, 0, 1, "", "_static_sparse_cross_entropy"], [80, 0, 1, "", "binary_cross_entropy"], [80, 0, 1, "", "cross_entropy"], [80, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[81, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_clip"], [81, 0, 1, "", "_static_concat"], [81, 0, 1, "", "_static_constant_pad"], [81, 0, 1, "", "_static_expand_dims"], [81, 0, 1, "", "_static_flip"], [81, 0, 1, "", "_static_permute_dims"], [81, 0, 1, "", "_static_repeat"], [81, 0, 1, "", "_static_reshape"], [81, 0, 1, "", "_static_roll"], [81, 0, 1, "", "_static_split"], [81, 0, 1, "", "_static_squeeze"], [81, 0, 1, "", "_static_stack"], [81, 0, 1, "", "_static_swapaxes"], [81, 0, 1, "", "_static_tile"], [81, 0, 1, "", "_static_unstack"], [81, 0, 1, "", "_static_zero_pad"], [81, 0, 1, "", "clip"], [81, 0, 1, "", "concat"], [81, 0, 1, "", "constant_pad"], [81, 0, 1, "", "expand_dims"], [81, 0, 1, "", "flip"], [81, 0, 1, "", "permute_dims"], [81, 0, 1, "", "repeat"], [81, 0, 1, "", "reshape"], [81, 0, 1, "", "roll"], [81, 0, 1, "", "split"], [81, 0, 1, "", "squeeze"], [81, 0, 1, "", "stack"], [81, 0, 1, "", "swapaxes"], [81, 0, 1, "", "tile"], [81, 0, 1, "", "unstack"], [81, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[82, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[83, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_multinomial"], [83, 0, 1, "", "_static_randint"], [83, 0, 1, "", "_static_random_normal"], [83, 0, 1, "", "_static_random_uniform"], [83, 0, 1, "", "_static_shuffle"], [83, 0, 1, "", "multinomial"], [83, 0, 1, "", "randint"], [83, 0, 1, "", "random_normal"], [83, 0, 1, "", "random_uniform"], [83, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[84, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_argmax"], [84, 0, 1, "", "_static_argmin"], [84, 0, 1, "", "_static_argwhere"], [84, 0, 1, "", "_static_nonzero"], [84, 0, 1, "", "_static_where"], [84, 0, 1, "", "argmax"], [84, 0, 1, "", "argmin"], [84, 0, 1, "", "argwhere"], [84, 0, 1, "", "nonzero"], [84, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[85, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_unique_all"], [85, 0, 1, "", "_static_unique_counts"], [85, 0, 1, "", "_static_unique_inverse"], [85, 0, 1, "", "_static_unique_values"], [85, 0, 1, "", "unique_all"], [85, 0, 1, "", "unique_counts"], [85, 0, 1, "", "unique_inverse"], [85, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[86, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_argsort"], [86, 0, 1, "", "_static_searchsorted"], [86, 0, 1, "", "_static_sort"], [86, 0, 1, "", "argsort"], [86, 0, 1, "", "msort"], [86, 0, 1, "", "searchsorted"], [86, 0, 1, "", "sort"], [86, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[87, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_cumprod"], [87, 0, 1, "", "_static_cumsum"], [87, 0, 1, "", "_static_prod"], [87, 0, 1, "", "_static_sum"], [87, 0, 1, "", "_static_var"], [87, 0, 1, "", "cumprod"], [87, 0, 1, "", "cumsum"], [87, 0, 1, "", "einsum"], [87, 0, 1, "", "max"], [87, 0, 1, "", "mean"], [87, 0, 1, "", "min"], [87, 0, 1, "", "prod"], [87, 0, 1, "", "std"], [87, 0, 1, "", "sum"], [87, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[88, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_all"], [88, 0, 1, "", "_static_any"], [88, 0, 1, "", "all"], [88, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[89, 2, 1, "", "_wrap_function"], [89, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[90, 3, 0, "-", "base"], [91, 3, 0, "-", "cp_tensor"], [92, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[90, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[90, 0, 1, "", "__init__"], [90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "mode_dot"], [90, 0, 1, "", "norm"], [90, 0, 1, "", "to_tensor"], [90, 0, 1, "", "to_unfolded"], [90, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[91, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[91, 0, 1, "", "__init__"], [91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "cp_copy"], [91, 0, 1, "", "cp_flip_sign"], [91, 0, 1, "", "cp_lstsq_grad"], [91, 0, 1, "", "cp_mode_dot"], [91, 0, 1, "", "cp_n_param"], [91, 0, 1, "", "cp_norm"], [91, 0, 1, "", "cp_normalize"], [91, 0, 1, "", "cp_to_tensor"], [91, 0, 1, "", "cp_to_unfolded"], [91, 0, 1, "", "cp_to_vec"], [91, 0, 1, "", "mode_dot"], [91, 5, 1, "", "n_param"], [91, 0, 1, "", "norm"], [91, 0, 1, "", "normalize"], [91, 0, 1, "", "to_tensor"], [91, 0, 1, "", "to_unfolded"], [91, 0, 1, "", "to_vec"], [91, 0, 1, "", "unfolding_dot_khatri_rao"], [91, 0, 1, "", "validate_cp_rank"], [91, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[92, 1, 1, "", "TuckerTensor"], [92, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[92, 0, 1, "", "__init__"], [92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "mode_dot"], [92, 5, 1, "", "n_param"], [92, 0, 1, "", "to_tensor"], [92, 0, 1, "", "to_unfolded"], [92, 0, 1, "", "to_vec"], [92, 0, 1, "", "tucker_copy"], [92, 0, 1, "", "tucker_mode_dot"], [92, 0, 1, "", "tucker_n_param"], [92, 0, 1, "", "tucker_normalize"], [92, 0, 1, "", "tucker_to_tensor"], [92, 0, 1, "", "tucker_to_unfolded"], [92, 0, 1, "", "tucker_to_vec"], [92, 0, 1, "", "validate_tucker_rank"], [92, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[97, 3, 0, "-", "base"], [98, 3, 0, "-", "elementwise"], [96, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[97, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "broadcast_shapes"], [97, 5, 1, "", "data"], [97, 5, 1, "", "device"], [97, 5, 1, "", "dtype"], [97, 5, 1, "", "inner_shape"], [97, 5, 1, "", "ndim"], [97, 0, 1, "", "nested_array"], [97, 5, 1, "", "nested_rank"], [97, 0, 1, "", "ragged_map"], [97, 0, 1, "", "ragged_multi_map"], [97, 0, 1, "", "ragged_multi_map_in_function"], [97, 0, 1, "", "replace_ivy_arrays"], [97, 5, 1, "", "shape"], [97, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[98, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[96, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[96, 0, 1, "", "__init__"], [96, 0, 1, "", "from_row_lengths"], [96, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[575, 3, 0, "-", "activations"], [576, 3, 0, "-", "constants"], [577, 3, 0, "-", "control_flow_ops"], [578, 3, 0, "-", "creation"], [579, 3, 0, "-", "data_type"], [580, 3, 0, "-", "device"], [581, 3, 0, "-", "elementwise"], [582, 3, 0, "-", "experimental"], [583, 3, 0, "-", "general"], [584, 3, 0, "-", "gradients"], [585, 3, 0, "-", "layers"], [586, 3, 0, "-", "linear_algebra"], [587, 3, 0, "-", "losses"], [588, 3, 0, "-", "manipulation"], [589, 3, 0, "-", "meta"], [590, 3, 0, "-", "nest"], [591, 3, 0, "-", "norms"], [592, 3, 0, "-", "random"], [593, 3, 0, "-", "searching"], [594, 3, 0, "-", "set"], [595, 3, 0, "-", "sorting"], [596, 3, 0, "-", "statistical"], [597, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[339, 3, 0, "-", "activations"], [340, 3, 0, "-", "constants"], [341, 3, 0, "-", "creation"], [342, 3, 0, "-", "data_type"], [343, 3, 0, "-", "device"], [344, 3, 0, "-", "elementwise"], [345, 3, 0, "-", "general"], [346, 3, 0, "-", "gradients"], [347, 3, 0, "-", "layers"], [348, 3, 0, "-", "linear_algebra"], [349, 3, 0, "-", "losses"], [350, 3, 0, "-", "manipulation"], [351, 3, 0, "-", "meta"], [352, 3, 0, "-", "nest"], [353, 3, 0, "-", "norms"], [354, 3, 0, "-", "random"], [355, 3, 0, "-", "searching"], [356, 3, 0, "-", "set"], [357, 3, 0, "-", "sorting"], [358, 3, 0, "-", "sparse_array"], [359, 3, 0, "-", "statistical"], [360, 3, 0, "-", "utility"]], "ivy.stateful": [[720, 3, 0, "-", "activations"], [721, 3, 0, "-", "converters"], [722, 3, 0, "-", "helpers"], [723, 3, 0, "-", "initializers"], [724, 3, 0, "-", "layers"], [725, 3, 0, "-", "losses"], [726, 3, 0, "-", "module"], [727, 3, 0, "-", "norms"], [728, 3, 0, "-", "optimizers"], [729, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[720, 1, 1, "", "ELU"], [720, 1, 1, "", "GEGLU"], [720, 1, 1, "", "GELU"], [720, 1, 1, "", "Hardswish"], [720, 1, 1, "", "LeakyReLU"], [720, 1, 1, "", "LogSigmoid"], [720, 1, 1, "", "LogSoftmax"], [720, 1, 1, "", "Logit"], [720, 1, 1, "", "Mish"], [720, 1, 1, "", "PReLU"], [720, 1, 1, "", "ReLU"], [720, 1, 1, "", "ReLU6"], [720, 1, 1, "", "SeLU"], [720, 1, 1, "", "SiLU"], [720, 1, 1, "", "Sigmoid"], [720, 1, 1, "", "Softmax"], [720, 1, 1, "", "Softplus"], [720, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[720, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[720, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[721, 1, 1, "", "ModuleConverters"], [721, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[721, 0, 1, "", "from_flax_module"], [721, 0, 1, "", "from_haiku_module"], [721, 0, 1, "", "from_keras_module"], [721, 0, 1, "", "from_paddle_module"], [721, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[722, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[722, 0, 1, "", "check_submod_rets"], [722, 0, 1, "", "get_mod_key"], [722, 0, 1, "", "mod_depth"], [722, 0, 1, "", "mod_height"], [722, 0, 1, "", "mod_with_top_mod_key_chain"], [722, 0, 1, "", "show_mod_in_top_mod"], [722, 0, 1, "", "show_structure"], [722, 0, 1, "", "show_v_in_top_v"], [722, 0, 1, "", "sub_mods"], [722, 0, 1, "", "track_submod_call_order"], [722, 0, 1, "", "track_submod_rets"], [722, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[723, 1, 1, "", "Constant"], [723, 1, 1, "", "FirstLayerSiren"], [723, 1, 1, "", "GlorotUniform"], [723, 1, 1, "", "Initializer"], [723, 1, 1, "", "KaimingNormal"], [723, 1, 1, "", "Ones"], [723, 1, 1, "", "RandomNormal"], [723, 1, 1, "", "Siren"], [723, 1, 1, "", "Uniform"], [723, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[723, 0, 1, "", "__init__"], [723, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[723, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[723, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[723, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[723, 0, 1, "", "__init__"], [723, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[723, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[723, 0, 1, "", "__init__"], [723, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[723, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[723, 0, 1, "", "__init__"], [723, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[723, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[724, 1, 1, "", "AdaptiveAvgPool1d"], [724, 1, 1, "", "AdaptiveAvgPool2d"], [724, 1, 1, "", "AvgPool1D"], [724, 1, 1, "", "AvgPool2D"], [724, 1, 1, "", "AvgPool3D"], [724, 1, 1, "", "Conv1D"], [724, 1, 1, "", "Conv1DTranspose"], [724, 1, 1, "", "Conv2D"], [724, 1, 1, "", "Conv2DTranspose"], [724, 1, 1, "", "Conv3D"], [724, 1, 1, "", "Conv3DTranspose"], [724, 1, 1, "", "Dct"], [724, 1, 1, "", "DepthwiseConv2D"], [724, 1, 1, "", "Dropout"], [724, 1, 1, "", "Embedding"], [724, 1, 1, "", "FFT"], [724, 1, 1, "", "Identity"], [724, 1, 1, "", "LSTM"], [724, 1, 1, "", "Linear"], [724, 1, 1, "", "MaxPool1D"], [724, 1, 1, "", "MaxPool2D"], [724, 1, 1, "", "MaxPool3D"], [724, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[724, 0, 1, "", "__init__"], [724, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[724, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[724, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[725, 1, 1, "", "BinaryCrossEntropyLoss"], [725, 1, 1, "", "CrossEntropyLoss"], [725, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[725, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[725, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[725, 0, 1, "", "__init__"]], "ivy.stateful.module": [[726, 1, 1, "", "Module"], [726, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[726, 0, 1, "", "__call__"], [726, 0, 1, "", "__init__"], [726, 0, 1, "", "build"], [726, 5, 1, "", "build_mode"], [726, 5, 1, "", "built_"], [726, 0, 1, "", "compile"], [726, 0, 1, "", "eval"], [726, 0, 1, "", "load"], [726, 0, 1, "", "register_buffer"], [726, 0, 1, "", "save"], [726, 0, 1, "", "save_weights"], [726, 0, 1, "", "show_graph"], [726, 0, 1, "", "train"]], "ivy.stateful.norms": [[727, 1, 1, "", "BatchNorm2D"], [727, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[727, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[727, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[728, 1, 1, "", "Adam"], [728, 1, 1, "", "LAMB"], [728, 1, 1, "", "LARS"], [728, 1, 1, "", "Optimizer"], [728, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "set_state"], [728, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "set_state"], [728, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "set_state"], [728, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "set_state"], [728, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[728, 0, 1, "", "__init__"], [728, 0, 1, "", "set_state"], [728, 5, 1, "", "state"]], "ivy.stateful.sequential": [[729, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[729, 0, 1, "", "__init__"]], "ivy.utils": [[730, 3, 0, "-", "assertions"], [731, 3, 0, "-", "backend"], [735, 3, 0, "-", "dynamic_import"], [736, 3, 0, "-", "einsum_parser"], [737, 3, 0, "-", "exceptions"], [738, 3, 0, "-", "inspection"], [739, 3, 0, "-", "logging"], [740, 3, 0, "-", "profiler"], [741, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[730, 2, 1, "", "check_all"], [730, 2, 1, "", "check_all_or_any_fn"], [730, 2, 1, "", "check_any"], [730, 2, 1, "", "check_dev_correct_formatting"], [730, 2, 1, "", "check_dimensions"], [730, 2, 1, "", "check_elem_in_list"], [730, 2, 1, "", "check_equal"], [730, 2, 1, "", "check_exists"], [730, 2, 1, "", "check_false"], [730, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [730, 2, 1, "", "check_gather_input_valid"], [730, 2, 1, "", "check_gather_nd_input_valid"], [730, 2, 1, "", "check_greater"], [730, 2, 1, "", "check_inplace_sizes_valid"], [730, 2, 1, "", "check_isinstance"], [730, 2, 1, "", "check_kernel_padding_size"], [730, 2, 1, "", "check_less"], [730, 2, 1, "", "check_one_way_broadcastable"], [730, 2, 1, "", "check_same_dtype"], [730, 2, 1, "", "check_shape"], [730, 2, 1, "", "check_shapes_broadcastable"], [730, 2, 1, "", "check_true"], [730, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[732, 3, 0, "-", "ast_helpers"], [733, 3, 0, "-", "handler"], [734, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[732, 1, 1, "", "ImportTransformer"], [732, 1, 1, "", "IvyLoader"], [732, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[732, 0, 1, "", "__init__"], [732, 0, 1, "", "impersonate_import"], [732, 0, 1, "", "visit_Import"], [732, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[732, 0, 1, "", "__init__"], [732, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[732, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[733, 1, 1, "", "ContextManager"], [733, 2, 1, "", "choose_random_backend"], [733, 2, 1, "", "convert_from_numpy_to_target_backend"], [733, 2, 1, "", "convert_from_source_backend_to_numpy"], [733, 2, 1, "", "current_backend"], [733, 2, 1, "", "fn_name_from_version_specific_fn_name"], [733, 2, 1, "", "prevent_access_locally"], [733, 2, 1, "", "previous_backend"], [733, 2, 1, "", "set_backend"], [733, 2, 1, "", "set_backend_to_specific_version"], [733, 2, 1, "", "set_jax_backend"], [733, 2, 1, "", "set_mxnet_backend"], [733, 2, 1, "", "set_numpy_backend"], [733, 2, 1, "", "set_paddle_backend"], [733, 2, 1, "", "set_tensorflow_backend"], [733, 2, 1, "", "set_torch_backend"], [733, 2, 1, "", "unset_backend"], [733, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[733, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[734, 2, 1, "", "available_sub_backends"], [734, 2, 1, "", "clear_sub_backends"], [734, 2, 1, "", "find_available_sub_backends"], [734, 2, 1, "", "set_sub_backend"], [734, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[735, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[736, 2, 1, "", "convert_interleaved_input"], [736, 2, 1, "", "convert_subscripts"], [736, 2, 1, "", "find_output_shape"], [736, 2, 1, "", "find_output_str"], [736, 2, 1, "", "gen_unused_symbols"], [736, 2, 1, "", "get_symbol"], [736, 2, 1, "", "has_valid_einsum_chars_only"], [736, 2, 1, "", "is_valid_einsum_char"], [736, 2, 1, "", "legalise_einsum_expr"], [736, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[737, 7, 1, "", "InplaceUpdateException"], [737, 7, 1, "", "InvalidBackendException"], [737, 7, 1, "", "IvyAttributeError"], [737, 7, 1, "", "IvyBackendException"], [737, 7, 1, "", "IvyBroadcastShapeError"], [737, 7, 1, "", "IvyDeviceError"], [737, 7, 1, "", "IvyDtypePromotionError"], [737, 7, 1, "", "IvyError"], [737, 7, 1, "", "IvyException"], [737, 7, 1, "", "IvyIndexError"], [737, 7, 1, "", "IvyNotImplementedException"], [737, 7, 1, "", "IvyValueError"], [737, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[737, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[737, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[738, 2, 1, "", "add_array_specs"], [738, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[739, 2, 1, "", "set_logging_mode"], [739, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[740, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[740, 0, 1, "", "__init__"], [740, 4, 1, "", "print_stats"], [740, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[741, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 14, 25, 39, 40], "creat": [0, 37, 38, 747], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 5, 7, 14, 33, 742, 759, 763, 766, 769, 773, 789, 790], "ivi": [3, 4, 5, 7, 13, 16, 24, 25, 26, 37, 38, 40, 41, 43, 742, 747, 749, 752, 754, 756, 759, 761, 766, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 782, 789, 790, 801], "alexnet": 3, "instal": [3, 4, 7, 16, 37, 38, 40, 742, 782], "data": [3, 4, 5, 7, 16, 25, 37, 48, 71, 99, 342, 579, 594, 696, 697, 698, 699, 757, 768, 770, 778, 781], "prepar": [3, 4, 5, 7], "infer": [3, 4, 5, 7, 765], "torch": [3, 4, 5, 7, 33, 40, 795, 796], "tensorflow": [3, 4, 5, 12, 33, 40, 41, 42, 795], "jax": [3, 4, 5, 6, 8, 33, 40, 795], "appendix": [3, 5], "code": [3, 16, 17, 18, 19, 26, 37, 762, 771], "implement": [3, 5, 756, 766, 768, 787], "bert": 4, "dependeci": 4, "import": [4, 5, 7, 16, 37, 38, 41, 735], "modul": [4, 726, 757, 758, 779, 790], "sequenc": [4, 763], "classif": 4, "model": [4, 5, 6, 7, 8, 10, 11, 12, 23, 24, 25, 26, 37, 38, 39, 40, 41, 43, 780, 781], "imag": [5, 7, 54, 77, 244, 744, 754], "segment": 5, "unet": 5, "custom": [5, 752, 754, 766, 778, 781], "preprocess": 5, "load": [5, 7, 716, 778], "visualis": [5, 7], "initi": [5, 7, 723, 779], "nativ": [5, 7, 752, 773], "pretrain": [5, 7], "weight": [5, 7, 778], "mask": 5, "function": [5, 16, 25, 26, 37, 38, 39, 41, 43, 100, 747, 755, 757, 758, 761, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 780, 781, 790], "us": [5, 7, 13, 21, 24, 41, 43, 742, 744, 747, 748, 751, 766, 769, 778, 782, 789, 790], "your": [5, 7, 749, 770], "backend": [5, 16, 25, 37, 38, 40, 41, 731, 734, 742, 747, 753, 757, 766, 771, 775, 781], "acceler": [6, 8], "mmpretrain": 6, "resnet": [7, 44], "set": [7, 33, 37, 38, 62, 85, 356, 594, 742, 748, 753, 772, 782], "label": 7, "resnet34": 7, "classifi": 7, "resnet50": 7, "pytorch": [8, 10, 39, 795], "guid": [9, 14], "transpil": [10, 11, 12, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 39, 43, 742, 780, 782, 790], "build": [10, 11, 12, 41, 744, 754, 775], "top": [10, 11, 12, 756], "round": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 39, 274], "up": [10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 39, 742, 748, 782], "haiku": 11, "develop": 13, "convolut": 13, "network": [13, 38, 41, 778, 780], "tutori": [14, 41], "And": 14, "learn": [14, 15, 795], "basic": [14, 15, 37, 38, 749, 768], "write": [16, 24, 768, 770], "content": [16, 39], "handler": [16, 25, 733, 734, 775], "structur": [16, 25, 754, 766, 781], "api": [16, 25, 26, 742, 747, 751, 755, 756, 766, 771, 775, 777, 779, 780, 782, 786, 789, 790, 792, 799, 801], "state": [16, 25, 26, 779, 781, 789], "unifi": [17, 20, 21, 27, 30, 31, 32, 37, 742, 777, 787, 790, 797, 801], "compil": [18, 20, 21, 25, 26, 28, 30, 31, 32, 38, 775, 780, 782, 789, 793, 798, 800, 801], "lazi": [20, 30, 789], "v": [20, 30, 33, 762, 781, 786, 789], "eager": [20, 30, 789], "how": [21, 754, 770], "decor": [21, 32, 761, 765, 770], "ani": [22, 23, 25, 26, 715], "librari": [22, 25, 26, 41, 43, 790], "odsc": 25, "framework": [25, 31, 37, 718, 742, 766, 769, 776, 795, 798, 801, 802], "graph": [25, 42, 775, 780, 796, 801], "quickstart": 26, "get": [26, 749, 782], "familiar": 26, "0": [27, 28, 29, 30, 34, 35], "1": [28, 30, 31, 32, 33, 36, 43, 795], "2": [29, 32, 34, 43, 795], "select": 31, "As": 32, "3": [33, 35, 36, 43], "dynam": [33, 41, 735, 753, 781], "static": 33, "todo": [33, 749], "explain": 33, "via": 33, "why": [33, 770, 787], "mode": [33, 757, 761, 772], "i": [33, 742, 754, 773], "true": 33, "default": [33, 494], "when": [33, 742], "from": [33, 40, 742, 782], "numpi": [33, 40, 768, 795], "fals": 33, "kornia": 34, "perceiv": 35, "stabl": 36, "diffus": 36, "oper": [37, 763, 772, 777, 781], "ml": [37, 785, 797, 801], "chang": 37, "one": 37, "line": [37, 749], "No": [37, 748, 787], "need": [37, 770], "worri": 37, "about": 37, "type": [37, 48, 71, 342, 579, 757, 764, 768, 781], "differ": 37, "them": 37, "all": [37, 714], "standalon": [37, 764], "defin": [37, 38, 39, 41], "optim": [37, 728, 779], "input": [37, 38, 763], "target": 37, "loss": [37, 57, 80, 349, 587, 725], "train": [37, 39, 41], "loop": [37, 41], "sampl": 38, "check": [38, 762, 781], "result": 38, "simpl": 38, "neural": 38, "deepmind": [39, 40], "": [39, 41, 747, 754, 782], "perceiverio": [39, 40], "tabl": [39, 754, 757], "construct": [39, 778], "some": 39, "helper": [39, 722, 732, 769, 770, 771], "pipelin": [39, 41, 754, 756, 770, 781], "dataset": [39, 41], "download": 39, "dataload": 39, "test": [39, 748, 749, 751, 756, 769, 770], "gpu": [40, 781], "introduct": [40, 43, 768, 769], "python3": 40, "8": 40, "setup": [40, 762], "kernel": 40, "clone": [40, 748, 756], "repo": [40, 748], "ivy_model": 40, "run": [40, 749, 751, 754, 770], "end": 41, "let": 41, "we": [41, 770], "ar": 41, "mnist": 41, "thi": 41, "temporari": 41, "loader": 41, "util": [41, 65, 88, 360, 597, 719], "plot": 41, "metric": 41, "save": [41, 717, 778], "huggingfac": 42, "deit": 42, "can": 42, "visual": 42, "displai": 42, "html": 42, "file": 42, "browser": [42, 749], "To": [43, 749], "interfac": 43, "telemetri": 43, "18": 44, "activ": [45, 67, 339, 575, 720], "convers": [46, 69, 765], "creation": [47, 70, 341, 578], "devic": [49, 72, 343, 580, 758, 763, 768], "elementwis": [50, 73, 98, 344, 581], "experiment": [51, 74, 582, 747], "gener": [52, 75, 345, 583, 766, 770, 773, 789], "gradient": [53, 76, 323, 346, 584, 766], "layer": [55, 78, 347, 585, 724], "linear": [56, 79, 348, 586, 609], "algebra": [56, 79, 348, 586], "manipul": [58, 81, 350, 588], "norm": [59, 82, 353, 591, 727], "random": [60, 83, 354, 592], "search": [61, 84, 355, 593], "sort": [63, 86, 357, 595, 703], "statist": [64, 87, 359, 596], "wrap": [66, 89, 765], "base": [68, 90, 97], "cp": 91, "tensor": [91, 92, 95], "tucker": [92, 411], "arrai": [93, 96, 119, 358, 751, 752, 756, 763, 777, 786, 789, 792], "contain": [94, 749, 755, 778], "factor": 95, "nest": [96, 352, 590], "class": [99, 718, 752, 761, 768, 777], "gelu": 101, "hardswish": 102, "leaky_relu": 103, "log_softmax": 104, "mish": 105, "relu": 106, "sigmoid": 107, "softmax": 108, "softplu": 109, "softsign": 110, "cast_bool": 111, "cmp_i": 112, "cmp_isnot": 113, "for_loop": 114, "if_els": 115, "try_except": 116, "while_loop": 117, "arang": 118, "asarrai": 120, "copy_arrai": 121, "empti": 122, "empty_lik": 123, "ey": 124, "from_dlpack": 125, "note": [125, 578], "frombuff": 126, "full": [127, 769], "full_lik": 128, "linspac": 129, "logspac": 130, "meshgrid": 131, "native_arrai": 132, "one_hot": 133, "ones": 134, "ones_lik": 135, "tril": 136, "triu": 137, "triu_indic": 138, "zero": 139, "zeros_lik": 140, "as_ivy_dtyp": 141, "as_native_dtyp": 142, "astyp": 143, "broadcast_arrai": 144, "broadcast_to": 145, "can_cast": 146, "check_float": 147, "closest_valid_dtyp": 148, "default_complex_dtyp": 149, "default_dtyp": 150, "default_float_dtyp": 151, "default_int_dtyp": 152, "default_uint_dtyp": 153, "dtype": [154, 763], "dtype_bit": 155, "finfo": 156, "function_supported_dtyp": 157, "function_unsupported_dtyp": 158, "iinfo": 159, "infer_default_dtyp": 160, "invalid_dtyp": 161, "is_bool_dtyp": 162, "is_complex_dtyp": 163, "is_float_dtyp": 164, "is_hashable_dtyp": 165, "is_int_dtyp": 166, "is_native_dtyp": 167, "is_uint_dtyp": 168, "promote_typ": 169, "promote_types_of_input": 170, "result_typ": 171, "set_default_complex_dtyp": 172, "set_default_dtyp": 173, "set_default_float_dtyp": 174, "set_default_int_dtyp": 175, "set_default_uint_dtyp": 176, "type_promote_arrai": 177, "unset_default_complex_dtyp": 178, "unset_default_dtyp": 179, "unset_default_float_dtyp": 180, "unset_default_int_dtyp": 181, "unset_default_uint_dtyp": 182, "valid_dtyp": 183, "as_ivy_dev": 184, "as_native_dev": 185, "clear_cached_mem_on_dev": 186, "default_devic": 187, "dev": 188, "dev_util": 189, "function_supported_devic": 190, "function_unsupported_devic": 191, "get_all_ivy_arrays_on_dev": 192, "gpu_is_avail": 193, "handle_soft_device_vari": 194, "num_cpu_cor": 195, "num_gpu": 196, "num_ivy_arrays_on_dev": 197, "percent_used_mem_on_dev": 198, "print_all_ivy_arrays_on_dev": 199, "set_default_devic": 200, "set_soft_device_mod": 201, "paramet": [201, 528, 529, 534, 535, 537, 538, 580, 583, 772], "set_split_factor": 202, "split_factor": 203, "split_func_cal": 204, "to_devic": 205, "total_mem_on_dev": 206, "tpu_is_avail": 207, "unset_default_devic": 208, "unset_soft_device_mod": 209, "used_mem_on_dev": 210, "ab": 211, "aco": 212, "acosh": 213, "add": [214, 759, 769, 801], "angl": 215, "asin": 216, "asinh": 217, "atan": 218, "atan2": 219, "atanh": 220, "bitwise_and": 221, "bitwise_invert": 222, "bitwise_left_shift": 223, "bitwise_or": 224, "bitwise_right_shift": 225, "bitwise_xor": 226, "ceil": 227, "co": 228, "cosh": 229, "deg2rad": 230, "divid": 231, "equal": 232, "erf": 233, "exp": 234, "exp2": 235, "expm1": 236, "floor": 237, "floor_divid": 238, "fmin": 239, "fmod": 240, "gcd": 241, "greater": 242, "greater_equ": 243, "isfinit": 245, "isinf": 246, "isnan": 247, "isreal": 248, "lcm": 249, "less": 250, "less_equ": 251, "log": [252, 739, 748], "log10": 253, "log1p": 254, "log2": 255, "logaddexp": 256, "logaddexp2": 257, "logical_and": 258, "logical_not": 259, "logical_or": 260, "logical_xor": 261, "maximum": 262, "minimum": 263, "multipli": 264, "nan_to_num": 265, "neg": 266, "not_equ": 267, "posit": [268, 763], "pow": 269, "rad2deg": 270, "real": 271, "reciproc": 272, "remaind": 273, "sign": 275, "sin": 276, "sinh": 277, "sqrt": 278, "squar": 279, "subtract": 280, "tan": [281, 759, 769], "tanh": 282, "trapz": 283, "trunc": 284, "trunc_divid": 285, "elu": 286, "logit": 287, "logsigmoid": 288, "prelu": 289, "relu6": 290, "selu": 291, "sequence_length": 292, "silu": 293, "thresholded_relu": 294, "blackman_window": 295, "eye_lik": 296, "hamming_window": 297, "hann_window": 298, "indic": 299, "kaiser_bessel_derived_window": 300, "kaiser_window": 301, "mel_weight_matrix": 302, "ndenumer": 303, "ndindex": 304, "random_cp": 305, "random_tuck": 306, "tril_indic": 307, "trilu": 308, "unsorted_segment_min": 309, "unsorted_segment_sum": 310, "vorbis_window": 311, "allclos": 312, "binar": 313, "conj": 314, "copysign": 315, "count_nonzero": 316, "diff": 317, "digamma": 318, "fix": 319, "float_pow": 320, "fmax": 321, "frexp": 322, "hypot": 324, "isclos": 325, "ldexp": 326, "lerp": 327, "lgamma": 328, "modf": 329, "nansum": 330, "nextaft": 331, "signbit": 332, "sinc": 333, "sparsify_tensor": 334, "xlogi": 335, "zeta": 336, "reduc": 337, "bind_custom_gradient_funct": 338, "constant": [340, 576], "meta": [351, 589], "spars": 358, "adaptive_avg_pool1d": 361, "adaptive_avg_pool2d": 362, "adaptive_max_pool2d": 363, "area_interpol": 364, "avg_pool1d": 365, "avg_pool2d": 366, "avg_pool3d": 367, "dct": 368, "dft": 369, "dropout1d": 370, "dropout2d": 371, "dropout3d": 372, "embed": 373, "fft": 374, "fft2": 375, "generate_einsum_equ": 376, "get_interpolate_kernel": 377, "idct": 378, "ifft": 379, "ifftn": 380, "interp": 381, "interpol": 382, "max_pool1d": 383, "max_pool2d": 384, "max_pool3d": 385, "max_unpool1d": 386, "nearest_interpol": 387, "pool": 388, "reduce_window": 389, "rfftn": 390, "adjoint": 391, "cond": 392, "diagflat": 393, "dot": 394, "eig": [395, 618], "eigh_tridiagon": 396, "eigval": 397, "general_inner_product": 398, "initialize_tuck": 399, "khatri_rao": 400, "kron": 401, "kroneck": 402, "make_svd_non_neg": 403, "matrix_exp": 404, "mode_dot": 405, "multi_dot": 406, "multi_mode_dot": 407, "partial_tuck": 408, "svd_flip": 409, "truncated_svd": 410, "huber_loss": 412, "l1_loss": 413, "log_poisson_loss": 414, "smooth_l1_loss": 415, "soft_margin_loss": 416, "as_strid": 417, "associative_scan": 418, "atleast_1d": 419, "atleast_2d": 420, "atleast_3d": 421, "broadcast_shap": 422, "choos": 423, "concat_from_sequ": 424, "dsplit": 425, "dstack": 426, "expand": 427, "fill_diagon": 428, "flatten": 429, "fliplr": 430, "flipud": 431, "fold": 432, "heavisid": 433, "hsplit": 434, "hstack": 435, "i0": 436, "matric": 437, "moveaxi": 438, "pad": 439, "partial_fold": 440, "partial_tensor_to_vec": 441, "partial_unfold": 442, "partial_vec_to_tensor": 443, "put_along_axi": 444, "rot90": 445, "soft_threshold": 446, "take_along_axi": 447, "top_k": 448, "unfold": 449, "unique_consecut": 450, "vsplit": 451, "vstack": 452, "batch_norm": 453, "group_norm": 454, "instance_norm": 455, "l1_normal": 456, "l2_normal": 457, "lp_normal": 458, "bernoulli": 459, "beta": 460, "dirichlet": 461, "gamma": 462, "poisson": 463, "unravel_index": 464, "invert_permut": 465, "lexsort": 466, "is_ivy_sparse_arrai": 467, "is_native_sparse_arrai": 468, "native_sparse_arrai": 469, "native_sparse_array_to_indices_values_and_shap": 470, "bincount": 471, "corrcoef": 472, "cov": 473, "cummax": 474, "cummin": 475, "histogram": 476, "igamma": 477, "median": 478, "nanmean": 479, "nanmedian": 480, "nanprod": 481, "quantil": 482, "optional_get_el": 483, "all_equ": 484, "arg_info": 485, "arg_nam": 486, "array_equ": 487, "assert_supports_inplac": 488, "cache_fn": 489, "clip_matrix_norm": 490, "clip_vector_norm": 491, "container_typ": 492, "current_backend_str": 493, "einops_rearrang": 495, "einops_reduc": 496, "einops_repeat": 497, "exist": [498, 744], "fourier_encod": 499, "function_supported_devices_and_dtyp": 500, "function_unsupported_devices_and_dtyp": 501, "gather": 502, "gather_nd": 503, "get_all_arrays_in_memori": 504, "get_item": 505, "get_num_dim": 506, "get_referrers_recurs": 507, "has_nan": 508, "inplace_arrays_support": 509, "inplace_decr": 510, "inplace_incr": 511, "inplace_upd": 512, "inplace_variables_support": 513, "is_arrai": 514, "is_ivy_arrai": 515, "is_ivy_contain": 516, "is_ivy_nested_arrai": 517, "is_native_arrai": 518, "isin": 519, "isscalar": 520, "items": 521, "match_kwarg": 522, "multiprocess": 523, "num_arrays_in_memori": 524, "print_all_arrays_in_memori": 525, "scatter_flat": 526, "scatter_nd": 527, "set_array_mod": 528, "set_exception_trace_mod": 529, "set_inplace_mod": 530, "set_item": 531, "set_min_bas": 532, "set_min_denomin": 533, "set_nestable_mod": 534, "set_precise_mod": 535, "set_queue_timeout": 536, "set_shape_array_mod": 537, "set_show_func_wrapper_trace_mod": 538, "set_tmp_dir": 539, "shape": [540, 594, 696, 697, 698, 699, 765, 781], "stable_divid": 541, "stable_pow": 542, "stride": 543, "supports_inplace_upd": 544, "to_ivy_shap": 545, "to_list": 546, "to_native_shap": 547, "to_numpi": 548, "to_scalar": 549, "try_else_non": 550, "unset_array_mod": 551, "unset_exception_trace_mod": 552, "unset_inplace_mod": 553, "unset_min_bas": 554, "unset_min_denomin": 555, "unset_nestable_mod": 556, "unset_precise_mod": 557, "unset_queue_timeout": 558, "unset_shape_array_mod": 559, "unset_show_func_wrapper_trace_mod": 560, "unset_tmp_dir": 561, "value_is_nan": 562, "vmap": 563, "adam_step": 564, "adam_upd": 565, "execute_with_gradi": [566, 766], "grad": 567, "gradient_descent_upd": 568, "jac": 569, "lamb_upd": 570, "lars_upd": 571, "optimizer_upd": 572, "stop_gradi": 573, "value_and_grad": 574, "control": [577, 781], "flow": [577, 781], "op": 577, "depend": [594, 696, 697, 698, 699], "output": [594, 696, 697, 698, 699], "conv": 598, "conv1d": 599, "conv1d_transpos": 600, "conv2d": 601, "conv2d_transpos": 602, "conv3d": 603, "conv3d_transpos": 604, "conv_general_dil": 605, "conv_general_transpos": 606, "depthwise_conv2d": 607, "dropout": 608, "lstm_updat": 610, "multi_head_attent": 611, "scaled_dot_product_attent": 612, "choleski": 613, "cross": 614, "det": 615, "diag": 616, "diagon": 617, "eigh": 619, "eigvalsh": 620, "inner": 621, "inv": 622, "lu_factor": 623, "matmul": 624, "matrix_norm": 625, "matrix_pow": 626, "matrix_rank": 627, "matrix_transpos": 628, "outer": 629, "pinv": 630, "qr": 631, "slogdet": 632, "solv": 633, "svd": 634, "svdval": 635, "tensordot": 636, "tensorsolv": 637, "trace": [638, 761], "vander": 639, "vecdot": 640, "vector_norm": 641, "vector_to_skew_symmetric_matrix": 642, "binary_cross_entropi": 643, "cross_entropi": 644, "sparse_cross_entropi": 645, "clip": 646, "concat": 647, "constant_pad": 648, "expand_dim": 649, "flip": 650, "permute_dim": 651, "repeat": 652, "reshap": 653, "roll": [654, 759], "split": 655, "squeez": 656, "stack": [657, 761], "swapax": 658, "tile": 659, "unstack": 660, "zero_pad": 661, "fomaml_step": 662, "maml_step": 663, "reptile_step": 664, "all_nested_indic": 665, "copy_nest": 666, "duplicate_array_index_chain": 667, "index_nest": 668, "insert_into_nest_at_index": 669, "insert_into_nest_at_indic": 670, "map": [671, 756], "map_nest_at_index": 672, "map_nest_at_indic": 673, "multi_index_nest": 674, "nested_ani": 675, "nested_argwher": 676, "nested_map": 677, "nested_multi_map": 678, "prune_empti": 679, "prune_nest_at_index": 680, "prune_nest_at_indic": 681, "set_nest_at_index": 682, "set_nest_at_indic": 683, "layer_norm": 684, "multinomi": 685, "randint": 686, "random_norm": 687, "random_uniform": 688, "seed": 689, "shuffl": 690, "argmax": 691, "argmin": 692, "argwher": 693, "nonzero": 694, "where": [695, 747], "unique_al": 696, "unique_count": 697, "unique_invers": 698, "unique_valu": 699, "argsort": 700, "msort": 701, "searchsort": 702, "cumprod": 704, "cumsum": 705, "einsum": [706, 736], "max": 707, "mean": 708, "min": 709, "prod": 710, "std": 711, "sum": 712, "var": 713, "convert": [721, 780], "sequenti": 729, "assert": [730, 761], "ast": 732, "sub": 734, "parser": 736, "except": [737, 761, 765], "inspect": 738, "profil": 740, "verbos": 741, "statu": 742, "ai": 742, "should": 742, "pip": [742, 782], "docker": [742, 744, 748, 749, 754, 782], "sourc": [742, 782], "multi": [742, 798, 801], "support": [742, 753, 757, 765, 768, 781], "document": 742, "contribut": [742, 743], "commun": 742, "citat": 742, "doc": [744, 754], "conveni": [744, 754, 764], "script": [744, 754], "hub": 744, "local": [744, 749, 762], "without": [744, 769], "error": [745, 761], "handl": [745, 752, 758, 761, 765, 781], "help": [746, 749], "resourc": 746, "open": 747, "task": 747, "format": [747, 762, 794, 801], "checklist": 747, "frontend": [747, 753, 768, 769, 780], "place": 747, "extend": [747, 770, 773], "an": [747, 766], "issu": [747, 749, 762, 782], "github": [747, 748], "templat": 747, "fork": [748, 749], "pre": [748, 762], "commit": [748, 749, 756, 762], "pycharm": [748, 749, 762], "virtual": 748, "environ": 748, "miniconda": 748, "venv": 748, "interpret": 748, "window": 748, "maco": 748, "ubuntu": 748, "more": [748, 773, 787], "detail": 748, "hypothesi": [748, 769, 770], "free": 748, "wsl": 748, "codespac": 748, "The": [749, 754, 766, 768, 777, 781, 786], "list": 749, "manag": 749, "who": 749, "ask": 749, "With": 749, "command": 749, "pull": [749, 756], "request": [749, 756], "small": 749, "often": 749, "interact": 749, "most": 749, "out": [749, 763, 765, 767], "id": [749, 751], "deep": 750, "dive": 750, "termin": 751, "regener": 751, "failur": 751, "skip": 751, "integr": [752, 756, 762, 770], "version": [753, 771, 781], "builder": 754, "being": 754, "option": 754, "index": 754, "rst": 754, "partial_conf": 754, "py": 754, "prebuild": 754, "sh": 754, "extens": 754, "custom_autosummari": 754, "hide": 754, "discussion_link": 754, "skippable_funct": 754, "ivy_data": 754, "instanc": [755, 768, 769, 777], "method": [755, 768, 769, 777, 778], "special": [755, 768], "nestabl": [755, 763, 764, 765], "continu": [756, 762], "push": 756, "pr": 756, "trigger": 756, "A": [756, 773], "down": 756, "view": [756, 765, 767], "store": 756, "retriev": 756, "repositori": 756, "nitti": 756, "gritti": 756, "storag": 756, "space": 756, "unifyai": 756, "determin": 756, "coverag": 756, "workflow": 756, "multipl": 756, "runner": 756, "race": 756, "condit": 756, "period": 756, "manual": 756, "dispatch": 756, "ci": 756, "dashboard": 756, "promot": [757, 768], "precis": 757, "non": [757, 773], "argument": [757, 758, 763, 765, 767, 768], "other": [757, 758], "unsupport": 757, "bug": 757, "cast": [757, 768], "superset": [757, 773], "docstr": [759, 760], "configur": [761, 769, 778], "func_wrapp": 761, "prune": 761, "handle_except": 761, "consist": [761, 770], "lint": 762, "common": 762, "keyword": 763, "number": 763, "integ": 763, "primari": 764, "composit": 764, "mix": [764, 765, 770], "partial": [764, 765, 770], "order": 765, "wrapper": [765, 801, 802], "miscellan": 765, "overview": 766, "usag": [766, 773], "signatur": 766, "design": [766, 771, 774], "our": 766, "polici": [766, 768], "specif": [766, 799, 800, 801], "consider": 766, "inplac": 767, "updat": 767, "copi": 767, "short": 768, "unus": 768, "rule": 768, "duplic": [768, 773], "valu": 769, "alia": 769, "own": 770, "strategi": 770, "do": [770, 786], "effect": 770, "bonu": 770, "featur": 770, "self": 770, "explicit": 770, "test_array_funct": 770, "re": [770, 787], "fail": 770, "navig": 771, "categor": 771, "submodul": 771, "unpin": 771, "global": 772, "properti": 772, "getter": 772, "attribut": 772, "setter": 772, "set_": 772, "unset_": 772, "behaviour": 773, "standard": [773, 786, 792, 801], "what": [773, 801], "balanc": 773, "effici": 773, "maxim": 773, "block": 775, "monkei": 777, "patch": 777, "represent": 778, "recurs": 778, "built": 778, "ins": 778, "access": 778, "comparison": 778, "case": 778, "compartment": 778, "role": 780, "faq": 781, "maintain": 781, "size": 781, "deploy": 781, "auto": 781, "differenti": 781, "replica": 781, "parallel": 781, "altern": 781, "start": 782, "folder": 782, "kei": 782, "question": 782, "glossari": 783, "motiv": 784, "explos": 785, "skeptic": 786, "complimentari": 786, "competit": 786, "work": [786, 791], "infinit": 787, "shelf": 787, "life": 787, "One": 788, "liner": 788, "cach": 789, "sharp": [789, 790], "bit": [789, 790], "relat": 791, "infrastructur": [793, 801], "llvm": 793, "mlir": 793, "oneapi": 793, "exchang": [794, 801], "onnx": 794, "nnef": 794, "coreml": 794, "matlab": 795, "scipi": 795, "scikit": 795, "theano": 795, "panda": 795, "julia": 795, "apach": [795, 798], "spark": 795, "mllib": 795, "caff": 795, "chainer": 795, "mxnet": 795, "cntk": 795, "flux": 795, "dex": 795, "languag": 795, "tracer": [796, 801], "tf": 796, "jaxpr": 796, "jit": 796, "fx": 796, "compani": [797, 801], "quansight": 797, "modular": 797, "octoml": 797, "vendor": [798, 799, 800, 801], "tvm": 798, "xla": 798, "gcc": 798, "tensorrt": 799, "cuda": 799, "icc": 800, "icx": 800, "nvcc": 800, "doe": 801, "eagerpi": 802, "kera": 802, "thinc": 802, "tensorli": 802, "neuropod": 802}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"eye": [[124, "eye"]], "if_else": [[115, "if-else"]], "cast_bool": [[111, "cast-bool"]], "Wrapping": [[66, "module-ivy.data_classes.array.wrapping"], [89, "module-ivy.data_classes.container.wrapping"]], "Linear algebra": [[79, "module-ivy.data_classes.container.linear_algebra"], [56, "module-ivy.data_classes.array.linear_algebra"], [586, "linear-algebra"], [348, "linear-algebra"]], "Device": [[72, "module-ivy.data_classes.container.device"], [49, "module-ivy.data_classes.array.device"], [580, "device"], [343, "module-ivy.functional.ivy.experimental.device"]], "Sorting": [[63, "module-ivy.data_classes.array.sorting"], [86, "module-ivy.data_classes.container.sorting"], [595, "sorting"], [357, "sorting"]], "Data classes": [[99, "data-classes"]], "Creation": [[70, "module-ivy.data_classes.container.creation"], [47, "module-ivy.data_classes.array.creation"], [578, "creation"], [341, "creation"]], "Experimental": [[74, "module-ivy.data_classes.container.experimental"], [51, "module-ivy.data_classes.array.experimental"], [582, "experimental"]], "Random": [[83, "module-ivy.data_classes.container.random"], [60, "module-ivy.data_classes.array.random"], [592, "random"], [354, "random"]], "Statistical": [[87, "module-ivy.data_classes.container.statistical"], [64, "module-ivy.data_classes.array.statistical"], [596, "statistical"], [359, "statistical"]], "from_dlpack": [[125, "from-dlpack"]], "Note": [[125, null], [578, null]], "while_loop": [[117, "while-loop"]], "Utility": [[88, "module-ivy.data_classes.container.utility"], [65, "module-ivy.data_classes.array.utility"], [597, "utility"], [360, "utility"]], "Base": [[68, "module-ivy.data_classes.container.base"], [90, "module-ivy.data_classes.factorized_tensor.base"], [97, "module-ivy.data_classes.nested_array.base"]], "Conversions": [[69, "module-ivy.data_classes.container.conversions"], [46, "module-ivy.data_classes.array.conversions"]], "gelu": [[101, "gelu"]], "empty_like": [[123, "empty-like"]], "arange": [[118, "arange"]], "mish": [[105, "mish"]], "cmp_isnot": [[113, "cmp-isnot"]], "asarray": [[120, "asarray"]], "Activations": [[67, "module-ivy.data_classes.container.activations"], [720, "module-ivy.stateful.activations"], [45, "module-ivy.data_classes.array.activations"], [575, "activations"], [339, "activations"]], "Norms": [[82, "module-ivy.data_classes.container.norms"], [727, "module-ivy.stateful.norms"], [59, "module-ivy.data_classes.array.norms"], [591, "norms"], [353, "norms"]], "relu": [[106, "relu"]], "Array": [[93, "array"]], "try_except": [[116, "try-except"]], "array": [[119, "array"]], "softmax": [[108, "softmax"]], "leaky_relu": [[103, "leaky-relu"]], "Gradients": [[76, "module-ivy.data_classes.container.gradients"], [766, "gradients"], [53, "module-ivy.data_classes.array.gradients"], [584, "gradients"], [346, "gradients"]], "Set": [[85, "module-ivy.data_classes.container.set"], [62, "module-ivy.data_classes.array.set"], [594, "set"], [356, "module-ivy.functional.ivy.experimental.set"]], "Elementwise": [[73, "module-ivy.data_classes.container.elementwise"], [98, "module-ivy.data_classes.nested_array.elementwise"], [50, "module-ivy.data_classes.array.elementwise"], [581, "elementwise"], [344, "elementwise"]], "Cp tensor": [[91, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "hardswish": [[102, "hardswish"]], "Losses": [[80, "module-ivy.data_classes.container.losses"], [725, "module-ivy.stateful.losses"], [57, "module-ivy.data_classes.array.losses"], [587, "losses"], [349, "losses"]], "Functions": [[100, "functions"]], "Layers": [[78, "module-ivy.data_classes.container.layers"], [724, "module-ivy.stateful.layers"], [55, "module-ivy.data_classes.array.layers"], [585, "layers"], [347, "layers"]], "softsign": [[110, "softsign"]], "sigmoid": [[107, "sigmoid"]], "General": [[75, "module-ivy.data_classes.container.general"], [52, "module-ivy.data_classes.array.general"], [583, "general"], [345, "general"]], "Tucker tensor": [[92, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Data type": [[71, "module-ivy.data_classes.container.data_type"], [48, "module-ivy.data_classes.array.data_type"], [579, "data-type"], [342, "module-ivy.functional.ivy.experimental.data_type"]], "Image": [[77, "module-ivy.data_classes.container.image"], [54, "module-ivy.data_classes.array.image"]], "softplus": [[109, "softplus"]], "Factorized tensor": [[95, "factorized-tensor"]], "Container": [[94, "container"]], "copy_array": [[121, "copy-array"]], "empty": [[122, "empty"]], "Searching": [[84, "module-ivy.data_classes.container.searching"], [61, "module-ivy.data_classes.array.searching"], [593, "searching"], [355, "searching"]], "log_softmax": [[104, "log-softmax"]], "Manipulation": [[81, "module-ivy.data_classes.container.manipulation"], [58, "module-ivy.data_classes.array.manipulation"], [588, "manipulation"], [350, "manipulation"]], "Nested array": [[96, "nested-array"]], "cmp_is": [[112, "cmp-is"]], "for_loop": [[114, "for-loop"]], "FAQ": [[781, "faq"]], "Maintaining Backend Versions": [[781, "maintaining-backend-versions"]], "Dynamic Sizes": [[781, "dynamic-sizes"]], "Type and Shape Checking": [[781, "type-and-shape-checking"]], "GPU handling": [[781, "gpu-handling"]], "Model Deployment": [[781, "model-deployment"]], "Dynamic Control Flow": [[781, "dynamic-control-flow"]], "Auto-Differentiation": [[781, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[781, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[781, "support-for-functions"]], "Alternative Data Structures": [[781, "alternative-data-structures"]], "Custom Operations": [[781, "custom-operations"]], "The Pipeline": [[781, "the-pipeline"]], "State": [[781, "state"]], "Compiler Infrastructure": [[793, "compiler-infrastructure"], [801, "compiler-infrastructure"]], "LLVM": [[793, "id1"]], "MLIR": [[793, "id2"]], "OneAPI": [[793, "id3"]], "Exception Handling": [[761, "exception-handling"], [765, "exception-handling"]], "Ivy Exception Class": [[761, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[761, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[761, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[761, "handle-exceptions-decorator"]], "Consistency in Errors": [[761, "consistency-in-errors"]], "Assertion Function": [[761, "assertion-function"]], "Navigating the Code": [[771, "navigating-the-code"]], "Categorization": [[771, "categorization"]], "Submodule Design": [[771, "submodule-design"]], "Ivy API": [[771, "ivy-api"]], "Backend API": [[771, "backend-api"]], "Submodule Helper Functions": [[771, "submodule-helper-functions"]], "Version Unpinning": [[771, "version-unpinning"]], "Building Blocks": [[775, "building-blocks"]], "Backend Functional APIs \u2705": [[775, "backend-functional-apis"]], "Ivy Functional API \u2705": [[775, "ivy-functional-api"]], "Backend Handler \u2705": [[775, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[775, "graph-compiler"]], "Function Types": [[764, "function-types"]], "Primary Functions": [[764, "primary-functions"]], "Compositional Functions": [[764, "compositional-functions"]], "Mixed Functions": [[764, "mixed-functions"]], "Partial Mixed Functions": [[764, "partial-mixed-functions"]], "Standalone Functions": [[764, "standalone-functions"]], "Nestable Functions": [[764, "nestable-functions"], [763, "nestable-functions"], [755, "nestable-functions"]], "Convenience Functions": [[764, "convenience-functions"]], "Operating Modes": [[772, "operating-modes"]], "Global Parameter Properties": [[772, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[772, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[772, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "ML Explosion": [[785, "ml-explosion"]], "Docstring Examples": [[759, "docstring-examples"]], "ivy.tan": [[759, "ivy-tan"]], "ivy.roll": [[759, "ivy-roll"]], "ivy.add": [[759, "ivy-add"]], "Why Unify?": [[787, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[787, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[787, "infinite-shelf-life"]], "Wrapper Frameworks": [[802, "wrapper-frameworks"], [801, "wrapper-frameworks"]], "EagerPy eagerpy": [[802, "eagerpy-eagerpy"]], "Keras keras": [[802, "keras-keras"]], "Thinc thinc": [[802, "thinc-thinc"]], "TensorLy tensorly": [[802, "tensorly-tensorly"]], "NeuroPod": [[802, "id1"]], "Ivy as a Transpiler": [[780, "ivy-as-a-transpiler"], [25, "Ivy-as-a-Transpiler"], [26, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[780, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[780, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[780, "converting-network-models"]], "Formatting": [[762, "formatting"]], "Lint Checks": [[762, "lint-checks"], [762, "id2"]], "Setup Formatting Locally": [[762, "setup-formatting-locally"]], "Pre-commit": [[762, "pre-commit"]], "VS Code": [[762, "vs-code"]], "PyCharm": [[762, "pycharm"], [748, "pycharm"]], "Common Issues with Pre-Commit": [[762, "common-issues-with-pre-commit"]], "Continuous Integration": [[762, "continuous-integration"], [756, "continuous-integration"]], "Lint Formatting": [[762, "lint-formatting"]], "Frameworks": [[795, "frameworks"], [801, "frameworks"]], "MATLAB matlab": [[795, "matlab-matlab"]], "SciPy scipy": [[795, "scipy-scipy"]], "Torch torch": [[795, "torch-torch"]], "NumPy numpy": [[795, "numpy-numpy"]], "SciKit Learn scikit-learn": [[795, "scikit-learn-scikit-learn"]], "Theano theano": [[795, "theano-theano"]], "Pandas pandas": [[795, "pandas-pandas"]], "Julia julia": [[795, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[795, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[795, "caffe-caffe"]], "Chainer chainer": [[795, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[795, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[795, "mxnet-mxnet"]], "CNTK cntk": [[795, "cntk-cntk"]], "PyTorch pytorch": [[795, "pytorch-pytorch"]], "Flux flux": [[795, "flux-flux"]], "JAX jax": [[795, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[795, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[795, "dex-language-dex-language"]], "Ivy Frontend Tests": [[769, "ivy-frontend-tests"]], "Introduction": [[769, "introduction"], [768, "introduction"], [40, "Introduction"]], "Frontend Test Examples": [[769, "frontend-test-examples"]], "ivy.tan()": [[769, "ivy-tan"]], "ivy.full()": [[769, "ivy-full"]], "Testing Without Using Tests Values": [[769, "testing-without-using-tests-values"]], "Alias functions": [[769, "alias-functions"]], "Frontend Instance Method Tests": [[769, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[769, "frontend-instance-method-test-examples"]], "ivy.add()": [[769, "ivy-add"]], "Hypothesis Helpers": [[769, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[769, "frontend-framework-testing-configuration"]], "Devices": [[758, "devices"]], "Device Module": [[758, "device-module"]], "Arguments in other Functions": [[758, "arguments-in-other-functions"], [757, "arguments-in-other-functions"]], "Device handling": [[758, "device-handling"]], "Ivy as a Framework": [[776, "ivy-as-a-framework"], [25, "Ivy-as-a-Framework"]], "Ivy Container": [[778, "ivy-container"]], "Construction": [[778, "construction"]], "Representation": [[778, "representation"]], "Recursive Methods": [[778, "recursive-methods"]], "Built-ins": [[778, "built-ins"]], "Access": [[778, "access"]], "Saving and Loading": [[778, "saving-and-loading"]], "Comparisons": [[778, "comparisons"]], "Customized Representations": [[778, "customized-representations"]], "Use Cases": [[778, "use-cases"]], "Compartmentalization": [[778, "compartmentalization"]], "Configuration": [[778, "configuration"]], "Data loading": [[778, "data-loading"]], "Network weights": [[778, "network-weights"]], "Ivy Stateful API": [[779, "ivy-stateful-api"], [16, "Ivy-Stateful-API"], [25, "Ivy-Stateful-API"]], "Modules": [[779, "modules"]], "Initializers": [[779, "initializers"], [723, "module-ivy.stateful.initializers"]], "Optimizers": [[779, "optimizers"], [728, "module-ivy.stateful.optimizers"]], "ML-Unifying Companies": [[797, "ml-unifying-companies"], [801, "ml-unifying-companies"]], "Quansight": [[797, "id1"]], "Modular": [[797, "id2"]], "OctoML": [[797, "id3"]], "One liners": [[788, "one-liners"]], "Docstrings": [[760, "docstrings"]], "Inplace Updates": [[767, "inplace-updates"]], "out argument": [[767, "out-argument"]], "copy argument": [[767, "copy-argument"]], "Views": [[767, "views"]], "Function Wrapping": [[765, "function-wrapping"]], "Decorator order": [[765, "decorator-order"]], "Conversion Wrappers": [[765, "conversion-wrappers"]], "Inference Wrappers": [[765, "inference-wrappers"]], "Out Argument Support": [[765, "out-argument-support"]], "Nestable Support": [[765, "nestable-support"]], "Partial Mixed Function Support": [[765, "partial-mixed-function-support"]], "Shape Conversion": [[765, "shape-conversion"]], "View Handling": [[765, "view-handling"]], "Miscellaneous Wrappers": [[765, "miscellaneous-wrappers"]], "Exchange Formats": [[794, "exchange-formats"], [801, "exchange-formats"]], "ONNX onnx": [[794, "onnx-onnx"]], "NNEF nnef": [[794, "nnef-nnef"]], "CoreML coreml": [[794, "coreml-coreml"]], "Multi-Vendor Compiler Frameworks": [[798, "multi-vendor-compiler-frameworks"], [801, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[798, "apache-tvm"]], "XLA": [[798, "xla"]], "GCC": [[798, "gcc"]], "Ivy Tests": [[770, "ivy-tests"], [756, "ivy-tests"]], "Testing Pipeline": [[770, "testing-pipeline"]], "Hypothesis": [[770, "id1"]], "Data Generation": [[770, "id2"]], "Writing your own strategy": [[770, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[770, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[770, "ivy-test-decorators"]], "Writing Ivy Tests": [[770, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[770, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[770, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[770, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[770, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[770, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[770, "self-consistent-and-explicit-testing"]], "test_array_function": [[770, "id4"]], "Running Ivy Tests": [[770, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[770, "re-running-failed-ivy-tests"]], "Standardization": [[786, "standardization"]], "Skepticism": [[786, "skepticism"]], "Complimentary vs Competitive": [[786, "complimentary-vs-competitive"]], "Do Standards Work?": [[786, "do-standards-work"]], "The Array API Standard": [[786, "the-array-api-standard"]], "Data Types": [[757, "data-types"]], "Data Type Module": [[757, "data-type-module"]], "Data Type Promotion": [[757, "data-type-promotion"]], "Precise Mode": [[757, "precise-mode"]], "Precise Promotion Table": [[757, "precise-promotion-table"]], "Non-Precise Promotion Table": [[757, "non-precise-promotion-table"]], "Supported and Unsupported Data Types": [[757, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[757, "backend-data-type-bugs"]], "Data Type Casting Modes": [[757, "data-type-casting-modes"]], "Superset Data Type Support": [[757, "superset-data-type-support"]], "Superset Behaviour": [[773, "superset-behaviour"]], "Extending the Standard": [[773, "extending-the-standard"]], "What is the Superset?": [[773, "what-is-the-superset"]], "A Non-Duplicate Superset": [[773, "a-non-duplicate-superset"]], "What is not the Superset?": [[773, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[773, "balancing-generalization-with-efficiency"]], "More Examples": [[773, "more-examples"]], "Maximizing Usage of Native Functionality": [[773, "maximizing-usage-of-native-functionality"]], "Graph Tracers": [[796, "graph-tracers"], [801, "graph-tracers"]], "tf.Graph": [[796, "tf-graph"]], "Jaxpr": [[796, "jaxpr"]], "torch.jit": [[796, "torch-jit"]], "torch.fx": [[796, "torch-fx"]], "Ivy Array": [[777, "ivy-array"], [752, "ivy-array"]], "The Array Class": [[777, "the-array-class"]], "Unifying Operators": [[777, "unifying-operators"]], "API Monkey Patching": [[777, "api-monkey-patching"]], "Instance Methods": [[777, "instance-methods"]], "Vendor-Specific APIs": [[799, "vendor-specific-apis"], [801, "vendor-specific-apis"]], "TensorRT tensorrt": [[799, "tensorrt-tensorrt"]], "CUDA cuda": [[799, "cuda-cuda"]], "Design": [[774, "design"]], "Motivation": [[784, "motivation"]], "ivy.compile()": [[789, "ivy-compile"]], "Compiler API": [[789, "compiler-api"]], "Using the compiler": [[789, "using-the-compiler"]], "Eager vs lazy Compilation": [[789, "eager-vs-lazy-compilation"]], "Array caching": [[789, "array-caching"]], "Generators": [[789, "generators"]], "Stateful": [[789, "stateful"]], "Sharp bits": [[789, "sharp-bits"], [790, "sharp-bits"]], "Examples": [[789, "examples"], [790, "examples"], [763, "examples"], [742, "examples"]], "What does Ivy Add?": [[801, "what-does-ivy-add"]], "API Standards": [[801, "api-standards"], [792, "api-standards"]], "Vendor-Specific Compilers": [[801, "vendor-specific-compilers"], [800, "vendor-specific-compilers"]], "Array API Standard": [[792, "id1"]], "ivy.transpile / ivy.unify": [[790, "ivy-transpile-ivy-unify"]], "Transpiler API": [[790, "transpiler-api"]], "Using the transpiler": [[790, "using-the-transpiler"]], "Transpiling functions": [[790, "transpiling-functions"]], "Transpiling Libraries": [[790, "transpiling-libraries"]], "Transpiling Modules": [[790, "transpiling-modules"]], "Ivy.unify": [[790, "ivy-unify"]], "ICC": [[800, "id1"]], "ICX": [[800, "icx"]], "NVCC": [[800, "nvcc"]], "Ivy Frontends": [[768, "ivy-frontends"]], "The Frontend Basics": [[768, "the-frontend-basics"]], "Writing Frontend Functions": [[768, "writing-frontend-functions"]], "Short Frontend Implementations": [[768, "short-frontend-implementations"]], "Unused Arguments": [[768, "unused-arguments"]], "Supported Data Types and Devices": [[768, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[768, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[768, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[768, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[768, "frontends-duplicate-policy"]], "Get Started": [[782, "get-started"]], "Installing using pip": [[782, "installing-using-pip"], [742, "installing-using-pip"]], "Docker": [[782, "docker"], [742, "docker"]], "Installing from source": [[782, "installing-from-source"], [742, "installing-from-source"]], "Ivy\u2019s compiler and transpiler": [[782, "ivy-s-compiler-and-transpiler"]], "Ivy Folder": [[782, "ivy-folder"]], "Setting Up the API key": [[782, "setting-up-the-api-key"]], "Issues and Questions": [[782, "issues-and-questions"]], "Overview": [[766, "overview"]], "Example Usage of the Gradient API": [[766, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[766, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[766, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[766, "custom-gradient-functions"]], "Design of the Gradient API": [[766, "design-of-the-gradient-api"]], "Our policy on gradients": [[766, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[766, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[766, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[766, "framework-specific-considerations"]], "Function Arguments": [[763, "function-arguments"]], "Positional and Keyword Arguments": [[763, "positional-and-keyword-arguments"]], "Input Arrays": [[763, "input-arrays"]], "out Argument": [[763, "out-argument"]], "dtype and device arguments": [[763, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[763, "numbers-in-operator-functions"]], "Integer Sequences": [[763, "integer-sequences"]], "Commit (Push/PR) Triggered Testing": [[756, "commit-push-pr-triggered-testing"]], "Implementation": [[756, "implementation"]], "A Top-Down View": [[756, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[756, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[756, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[756, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[756, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[756, "determine-test-coverage-workflow"]], "Multiple Runners": [[756, "multiple-runners"]], "Race Condition": [[756, "race-condition"]], "Array API Tests": [[756, "array-api-tests"], [751, "array-api-tests"]], "Periodic Testing": [[756, "periodic-testing"]], "Manually Dispatched Workflows": [[756, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[756, "ci-pipeline"]], "Push": [[756, "push"]], "Pull Request": [[756, "pull-request"]], "Dashboard": [[756, "dashboard"]], "Glossary": [[783, "glossary"]], "Related Work": [[791, "related-work"]], "searchsorted": [[702, "searchsorted"]], "mean": [[708, "mean"]], "save": [[717, "save"]], "Contributing": [[743, "contributing"], [742, "contributing"]], "Helpers": [[722, "module-ivy.stateful.helpers"]], "prod": [[710, "prod"]], "Module": [[726, "module-ivy.stateful.module"]], "msort": [[701, "msort"]], "all": [[714, "all"]], "Arrays": [[752, "arrays"]], "Native Array": [[752, "native-array"]], "Array Handling": [[752, "array-handling"]], "Integrating custom classes with Ivy": [[752, "integrating-custom-classes-with-ivy"]], "sort": [[703, "sort"]], "load": [[716, "load"]], "einsum": [[706, "einsum"]], "Backend Setting": [[753, "backend-setting"]], "Dynamic Backend Setting": [[753, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[753, "backend-and-frontend-version-support"]], "Error Handling": [[745, "error-handling"]], "Sub backend handler": [[734, "module-ivy.utils.backend.sub_backend_handler"]], "Building the Docs": [[744, "building-the-docs"]], "Building the Docs using Docker": [[744, "building-the-docs-using-docker"]], "Using convenience script": [[744, "using-convenience-script"]], "Using existing image on Docker Hub": [[744, "using-existing-image-on-docker-hub"]], "Building the image locally": [[744, "building-the-image-locally"]], "Building the Docs without Docker": [[744, "building-the-docs-without-docker"]], "std": [[711, "std"]], "Converters": [[721, "module-ivy.stateful.converters"]], "unique_values": [[699, "unique-values"]], "Data-dependent output shape": [[699, null], [698, null], [697, null], [696, null], [594, null], [594, null], [594, null], [594, null]], "Einsum parser": [[736, "module-ivy.utils.einsum_parser"]], "Inspection": [[738, "module-ivy.utils.inspection"]], "unique_inverse": [[698, "unique-inverse"]], "cumprod": [[704, "cumprod"]], "max": [[707, "max"]], "Framework classes": [[718, "framework-classes"]], "Status": [[742, "status"]], "Unified AI": [[742, "unified-ai"]], "Ivy as a transpiler": [[742, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[742, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[742, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[742, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[742, "setting-up-ivy"]], "Using Ivy": [[742, "using-ivy"]], "Multi-backend Support": [[742, "multi-backend-support"]], "Transpilation API": [[742, "transpilation-api"]], "Documentation": [[742, "documentation"]], "Community": [[742, "community"]], "Citation": [[742, "citation"]], "Handler": [[733, "module-ivy.utils.backend.handler"]], "Open Tasks": [[747, "open-tasks"]], "Function Formatting": [[747, "function-formatting"]], "Formatting checklist": [[747, "formatting-checklist"]], "Frontend APIs": [[747, "frontend-apis"]], "Where to place a frontend function": [[747, "where-to-place-a-frontend-function"]], "Frontend checklist": [[747, "frontend-checklist"]], "Ivy Experimental API": [[747, "ivy-experimental-api"]], "Extending the Ivy API": [[747, "extending-the-ivy-api"]], "Where to place a backend function": [[747, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[747, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Verbosity": [[741, "module-ivy.utils.verbosity"]], "Backend": [[731, "backend"]], "Sequential": [[729, "module-ivy.stateful.sequential"]], "Containers": [[755, "containers"]], "Container Instance Methods": [[755, "container-instance-methods"]], "API Instance Methods": [[755, "api-instance-methods"]], "API Special Methods": [[755, "api-special-methods"]], "unique_counts": [[697, "unique-counts"]], "Ast helpers": [[732, "module-ivy.utils.backend.ast_helpers"]], "Building the Docs Pipeline": [[754, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[754, "how-the-doc-builder-is-being-run"]], "The convenience script": [[754, "the-convenience-script"]], "Options": [[754, "options"]], "The Docker image": [[754, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[754, "how-ivy-s-docs-is-structured"]], "index.rst": [[754, "index-rst"]], "partial_conf.py": [[754, "partial-conf-py"]], "prebuild.sh": [[754, "prebuild-sh"]], "Custom Extensions": [[754, "custom-extensions"]], "custom_autosummary": [[754, "custom-autosummary"]], ":hide-table:": [[754, "hide-table"]], "discussion_linker": [[754, "discussion-linker"]], "skippable_function": [[754, "skippable-function"]], "ivy_data": [[754, "ivy-data"]], "argsort": [[700, "argsort"]], "Utils": [[719, "utils"]], "any": [[715, "any"]], "argwhere": [[693, "argwhere"]], "Helpful Resources": [[746, "helpful-resources"]], "Dynamic import": [[735, "module-ivy.utils.dynamic_import"]], "Deep Dive": [[750, "deep-dive"]], "Profiler": [[740, "module-ivy.utils.profiler"]], "unique_all": [[696, "unique-all"]], "Assertions": [[730, "module-ivy.utils.assertions"]], "cumsum": [[705, "cumsum"]], "The Basics": [[749, "the-basics"]], "Getting Help": [[749, "getting-help"]], "ToDo List Issues": [[749, "todo-list-issues"]], "Managing Your Fork": [[749, "managing-your-fork"]], "Who To Ask": [[749, "who-to-ask"]], "With Command Line:": [[749, "with-command-line"]], "With Browser:": [[749, "with-browser"]], "Pull Requests": [[749, "pull-requests"]], "Small Commits Often": [[749, "small-commits-often"]], "Interactive Ivy Docker Container": [[749, "interactive-ivy-docker-container"]], "Running Tests Locally": [[749, "running-tests-locally"]], "With Docker": [[749, "with-docker"]], "Getting the most out of IDE": [[749, "getting-the-most-out-of-ide"]], "with PyCharm": [[749, "with-pycharm"]], "sum": [[712, "sum"]], "min": [[709, "min"]], "var": [[713, "var"]], "Logging": [[739, "module-ivy.utils.logging"]], "Running the Tests": [[751, "running-the-tests"]], "Using Terminal": [[751, "using-terminal"]], "Using the IDE": [[751, "using-the-ide"]], "Regenerating Test Failures": [[751, "regenerating-test-failures"]], "Test Skipping": [[751, "test-skipping"]], "nonzero": [[694, "nonzero"]], "where": [[695, "where"]], "Exceptions": [[737, "module-ivy.utils.exceptions"]], "Setting Up": [[748, "setting-up"]], "Forking and cloning the repo": [[748, "forking-and-cloning-the-repo"]], "Pre-Commit": [[748, "pre-commit"]], "Virtual environments - No Docker": [[748, "virtual-environments-no-docker"]], "Using miniconda": [[748, "using-miniconda"]], "Using venv": [[748, "using-venv"]], "Docker Interpreter with PyCharm": [[748, "docker-interpreter-with-pycharm"]], "Windows": [[748, "windows"], [748, "id6"]], "MacOS": [[748, "macos"]], "Ubuntu": [[748, "ubuntu"], [748, "id8"]], "Setting Up Testing in PyCharm": [[748, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[748, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[748, "setting-up-for-free"]], "WSL": [[748, "wsl"]], "GitHub Codespaces": [[748, "github-codespaces"]], "cross_entropy": [[644, "cross-entropy"]], "map": [[671, "map"]], "slogdet": [[632, "slogdet"]], "vecdot": [[640, "vecdot"]], "squeeze": [[656, "squeeze"]], "nested_map": [[677, "nested-map"]], "all_nested_indices": [[665, "all-nested-indices"]], "index_nest": [[668, "index-nest"]], "nested_argwhere": [[676, "nested-argwhere"]], "reshape": [[653, "reshape"]], "maml_step": [[663, "maml-step"]], "vector_norm": [[641, "vector-norm"]], "expand_dims": [[649, "expand-dims"]], "layer_norm": [[684, "layer-norm"]], "split": [[655, "split"]], "clip": [[646, "clip"]], "set_nest_at_indices": [[683, "set-nest-at-indices"]], "flip": [[650, "flip"]], "multi_index_nest": [[674, "multi-index-nest"]], "reptile_step": [[664, "reptile-step"]], "vector_to_skew_symmetric_matrix": [[642, "vector-to-skew-symmetric-matrix"]], "binary_cross_entropy": [[643, "binary-cross-entropy"]], "prune_nest_at_index": [[680, "prune-nest-at-index"]], "fomaml_step": [[662, "fomaml-step"]], "tensorsolve": [[637, "tensorsolve"]], "constant_pad": [[648, "constant-pad"]], "swapaxes": [[658, "swapaxes"]], "repeat": [[652, "repeat"]], "prune_nest_at_indices": [[681, "prune-nest-at-indices"]], "random_uniform": [[688, "random-uniform"]], "qr": [[631, "qr"]], "stack": [[657, "stack"]], "argmax": [[691, "argmax"]], "multinomial": [[685, "multinomial"]], "roll": [[654, "roll"]], "permute_dims": [[651, "permute-dims"]], "seed": [[689, "seed"]], "zero_pad": [[661, "zero-pad"]], "insert_into_nest_at_index": [[669, "insert-into-nest-at-index"]], "trace": [[638, "trace"]], "map_nest_at_index": [[672, "map-nest-at-index"]], "pinv": [[630, "pinv"]], "prune_empty": [[679, "prune-empty"]], "nested_multi_map": [[678, "nested-multi-map"]], "tile": [[659, "tile"]], "shuffle": [[690, "shuffle"]], "insert_into_nest_at_indices": [[670, "insert-into-nest-at-indices"]], "nested_any": [[675, "nested-any"]], "solve": [[633, "solve"]], "set_nest_at_index": [[682, "set-nest-at-index"]], "svd": [[634, "svd"]], "tensordot": [[636, "tensordot"]], "randint": [[686, "randint"]], "unstack": [[660, "unstack"]], "argmin": [[692, "argmin"]], "concat": [[647, "concat"]], "duplicate_array_index_chains": [[667, "duplicate-array-index-chains"]], "map_nest_at_indices": [[673, "map-nest-at-indices"]], "random_normal": [[687, "random-normal"]], "sparse_cross_entropy": [[645, "sparse-cross-entropy"]], "vander": [[639, "vander"]], "copy_nest": [[666, "copy-nest"]], "svdvals": [[635, "svdvals"]], "Transpile any library": [[22, "Transpile-any-library"]], "Round Up": [[22, "Round-Up"], [20, "Round-Up"], [30, "Round-Up"], [18, "Round-Up"], [21, "Round-Up"], [32, "Round-Up"], [28, "Round-Up"], [16, "Round-Up"], [27, "Round-Up"], [12, "Round-Up"], [31, "Round-Up"], [39, "Round-Up"], [17, "Round-Up"], [19, "Round-Up"], [10, "Round-Up"], [26, "Round-Up"], [29, "Round-Up"]], "3.1: Stable Diffusion": [[36, "3.1:-Stable-Diffusion"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "Guides": [[9, "guides"], [14, "guides"]], "Ivy as a Transpiler Introduction": [[43, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[43, "To-use-the-transpiler:"]], "Transpiler Interface": [[43, "Transpiler-Interface"]], "Telemetry": [[43, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[43, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[43, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[43, "3.-Transpile-Models-\ud83c\udf10"]], "Lazy vs Eager": [[20, "Lazy-vs-Eager"]], "Unify": [[20, "Unify"], [30, "Unify"], [21, "Unify"], [32, "Unify"], [31, "Unify"]], "Compile": [[20, "Compile"], [30, "Compile"], [21, "Compile"], [32, "Compile"], [31, "Compile"]], "Transpile": [[20, "Transpile"], [30, "Transpile"], [21, "Transpile"], [32, "Transpile"], [31, "Transpile"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "Transpile any model": [[23, "Transpile-any-model"]], "Round up": [[23, "Round-up"]], "1.0: Lazy vs Eager": [[30, "1.0:-Lazy-vs-Eager"]], "Compile code": [[18, "Compile-code"]], "Compilation of a Basic Function": [[38, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[38, "Installs-\ud83d\udcbe"], [37, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[38, "Imports-\ud83d\udec3"], [37, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[38, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[38, "Function-compilation-\ud83d\udee0"]], "Set backend": [[38, "Set-backend"]], "Sample input": [[38, "Sample-input"]], "Define function to compile": [[38, "Define-function-to-compile"]], "Compile the function": [[38, "Compile-the-function"]], "Check results": [[38, "Check-results"], [38, "id1"]], "Compiling simple neural network \ud83e\udde0": [[38, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[38, "Define-Model"], [37, "Define-Model"]], "Create model": [[38, "Create-model"]], "Define input": [[38, "Define-input"]], "Compile network": [[38, "Compile-network"]], "HuggingFace Tensorflow DeiT": [[42, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[42, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "How to use decorators": [[21, "How-to-use-decorators"]], "1.2: As a Decorator": [[32, "1.2:-As-a-Decorator"]], "Examples and Demos": [[2, "examples-and-demos"], [14, "examples-and-demos"]], "1.3: Dynamic vs Static": [[33, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[33, "Dynamic"]], "Static": [[33, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[33, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "End-to-End Training Pipeline in Ivy": [[41, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[41, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[41, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[41, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[41, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[41, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[41, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[41, "Plotting-the-training-metrics"]], "Save the trained Model": [[41, "Save-the-trained-Model"]], "Accelerating PyTorch models with JAX": [[8, "Accelerating-PyTorch-models-with-JAX"]], "0.1: Compile": [[28, "0.1:-Compile"]], "Tutorials And Examples": [[14, "tutorials-and-examples"]], "Learn the basics": [[14, "learn-the-basics"], [15, "learn-the-basics"]], "Write Ivy code": [[16, "Write-Ivy-code"]], "Contents": [[16, "Contents"]], "Installing Ivy": [[16, "Installing-Ivy"]], "Importing Ivy": [[16, "Importing-Ivy"]], "Ivy Backend Handler": [[16, "Ivy-Backend-Handler"], [25, "Ivy-Backend-Handler"]], "Data Structures": [[16, "Data-Structures"], [25, "Data-Structures"]], "Ivy Functional API": [[16, "Ivy-Functional-API"], [25, "Ivy-Functional-API"]], "ODSC Ivy Demo": [[25, "ODSC-Ivy-Demo"]], "Graph Compiler": [[25, "Graph-Compiler"]], "Any function": [[25, "Any-function"], [26, "Any-function"]], "Any library": [[25, "Any-library"], [26, "Any-library"]], "Any model": [[25, "Any-model"], [26, "Any-model"]], "0.0: Unify": [[27, "0.0:-Unify"]], "Developing a convolutional network using Ivy": [[13, "Developing-a-convolutional-network-using-Ivy"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Installation": [[3, "Installation"], [7, "Installation"]], "Data Preparation": [[3, "Data-Preparation"], [5, "Data-Preparation"], [7, "Data-Preparation"], [4, "Data-Preparation"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "2.0: Kornia": [[34, "2.0:-Kornia"]], "Transpiling a Tensorflow model to build on top": [[12, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Basic Operations with Ivy": [[37, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[37, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[37, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[37, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[37, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[37, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[37, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[37, "Set-Backend-Framework"]], "Create Model": [[37, "Create-Model"]], "Create Optimizer": [[37, "Create-Optimizer"]], "Input and Target": [[37, "Input-and-Target"]], "Loss Function": [[37, "Loss-Function"]], "Training Loop": [[37, "Training-Loop"]], "1.1: Framework Selection": [[31, "1.1:-Framework-Selection"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[39, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[39, "Table-of-Contents"]], "Defining the model": [[39, "Defining-the-model"]], "Model construction": [[39, "Model-construction"]], "Some helper functions": [[39, "Some-helper-functions"]], "Transpiling the model": [[39, "Transpiling-the-model"]], "PyTorch pipeline": [[39, "PyTorch-pipeline"]], "Dataset download": [[39, "Dataset-download"]], "DataLoader": [[39, "DataLoader"]], "Training": [[39, "Training"]], "Testing": [[39, "Testing"]], "Deepmind PerceiverIO on GPU": [[40, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[40, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[40, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[40, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[40, "Run-the-demo..."]], "\u2026with torch backend": [[40, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[40, "....with-tensorflow-backend"]], "\u2026with jax backend": [[40, "...with-jax-backend"]], "\u2026with numpy backend": [[40, "...with-numpy-backend"]], "3.0: Perceiver": [[35, "3.0:-Perceiver"]], "Unify code": [[17, "Unify-code"]], "Resnet 18": [[44, "Resnet-18"]], "Write a model using Ivy": [[24, "Write-a-model-using-Ivy"]], "Transpiling a haiku model to build on top": [[11, "Transpiling-a-haiku-model-to-build-on-top"]], "Transpile code": [[19, "Transpile-code"]], "Accelerating MMPreTrain models with JAX": [[6, "Accelerating-MMPreTrain-models-with-JAX"]], "Image Segmentation with Ivy UNet": [[5, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[5, "Imports"], [7, "Imports"]], "Custom Preprocessing": [[5, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[5, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [7, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[5, "Visualise-image"], [7, "Visualise-image"]], "Model Inference": [[5, "Model-Inference"]], "Initializing Native Torch UNet": [[5, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[5, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[5, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[5, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[5, "TensorFlow-backend"]], "JAX": [[5, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[5, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Transpiling a PyTorch model to build on top": [[10, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Quickstart": [[26, "Quickstart"]], "Get familiar with Ivy": [[26, "Get-familiar-with-Ivy"]], "Functional API": [[26, "Functional-API"]], "Stateful API": [[26, "Stateful-API"]], "Compiling code": [[26, "Compiling-code"]], "Using Ivy ResNet": [[7, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[7, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[7, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[7, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[7, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [7, "id1"]], "Model Inference ResNet50": [[7, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[7, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "0.2: Transpile": [[29, "0.2:-Transpile"]], "unset_queue_timeout": [[558, "unset-queue-timeout"]], "get_referrers_recursive": [[507, "get-referrers-recursive"]], "to_ivy_shape": [[545, "to-ivy-shape"]], "unset_array_mode": [[551, "unset-array-mode"]], "shape": [[540, "shape"]], "execute_with_gradients": [[566, "execute-with-gradients"]], "get_num_dims": [[506, "get-num-dims"]], "is_ivy_array": [[515, "is-ivy-array"]], "scatter_flat": [[526, "scatter-flat"]], "set_min_base": [[532, "set-min-base"]], "get_item": [[505, "get-item"]], "set_tmp_dir": [[539, "set-tmp-dir"]], "inplace_update": [[512, "inplace-update"]], "unset_inplace_mode": [[553, "unset-inplace-mode"]], "unset_show_func_wrapper_trace_mode": [[560, "unset-show-func-wrapper-trace-mode"]], "inplace_decrement": [[510, "inplace-decrement"]], "to_native_shape": [[547, "to-native-shape"]], "unset_min_denominator": [[555, "unset-min-denominator"]], "set_item": [[531, "set-item"]], "has_nans": [[508, "has-nans"]], "to_list": [[546, "to-list"]], "scatter_nd": [[527, "scatter-nd"]], "itemsize": [[521, "itemsize"]], "is_array": [[514, "is-array"]], "to_scalar": [[549, "to-scalar"]], "set_nestable_mode": [[534, "set-nestable-mode"]], "Parameter": [[534, "parameter"], [528, "parameter"], [535, "parameter"], [537, "parameter"], [538, "parameter"], [529, "parameter"], [580, "parameter"], [583, "parameter"], [583, "id1"], [583, "id2"], [583, "id3"], [583, "id4"], [583, "id5"], [201, "parameter"]], "strides": [[543, "strides"]], "inplace_arrays_supported": [[509, "inplace-arrays-supported"]], "is_native_array": [[518, "is-native-array"]], "value_is_nan": [[562, "value-is-nan"]], "get_all_arrays_in_memory": [[504, "get-all-arrays-in-memory"]], "isscalar": [[520, "isscalar"]], "set_inplace_mode": [[530, "set-inplace-mode"]], "unset_exception_trace_mode": [[552, "unset-exception-trace-mode"]], "to_numpy": [[548, "to-numpy"]], "is_ivy_container": [[516, "is-ivy-container"]], "set_array_mode": [[528, "set-array-mode"]], "match_kwargs": [[522, "match-kwargs"]], "set_precise_mode": [[535, "set-precise-mode"]], "unset_tmp_dir": [[561, "unset-tmp-dir"]], "inplace_increment": [[511, "inplace-increment"]], "set_shape_array_mode": [[537, "set-shape-array-mode"]], "stable_pow": [[542, "stable-pow"]], "multiprocessing": [[523, "multiprocessing"]], "unset_shape_array_mode": [[559, "unset-shape-array-mode"]], "set_queue_timeout": [[536, "set-queue-timeout"]], "set_show_func_wrapper_trace_mode": [[538, "set-show-func-wrapper-trace-mode"]], "inplace_variables_supported": [[513, "inplace-variables-supported"]], "is_ivy_nested_array": [[517, "is-ivy-nested-array"]], "set_exception_trace_mode": [[529, "set-exception-trace-mode"]], "vmap": [[563, "vmap"]], "num_arrays_in_memory": [[524, "num-arrays-in-memory"]], "adam_update": [[565, "adam-update"]], "set_min_denominator": [[533, "set-min-denominator"]], "adam_step": [[564, "adam-step"]], "stable_divide": [[541, "stable-divide"]], "isin": [[519, "isin"]], "supports_inplace_updates": [[544, "supports-inplace-updates"]], "try_else_none": [[550, "try-else-none"]], "unset_min_base": [[554, "unset-min-base"]], "unset_nestable_mode": [[556, "unset-nestable-mode"]], "unset_precise_mode": [[557, "unset-precise-mode"]], "print_all_arrays_in_memory": [[525, "print-all-arrays-in-memory"]], "clip_vector_norm": [[491, "clip-vector-norm"]], "exists": [[498, "exists"]], "partial_tensor_to_vec": [[441, "partial-tensor-to-vec"]], "gather": [[502, "gather"]], "unique_consecutive": [[450, "unique-consecutive"]], "take_along_axis": [[447, "take-along-axis"]], "corrcoef": [[472, "corrcoef"]], "partial_vec_to_tensor": [[443, "partial-vec-to-tensor"]], "vstack": [[452, "vstack"]], "gamma": [[462, "gamma"]], "dirichlet": [[461, "dirichlet"]], "histogram": [[476, "histogram"]], "igamma": [[477, "igamma"]], "einops_rearrange": [[495, "einops-rearrange"]], "soft_thresholding": [[446, "soft-thresholding"]], "nanprod": [[481, "nanprod"]], "current_backend_str": [[493, "current-backend-str"]], "quantile": [[482, "quantile"]], "gather_nd": [[503, "gather-nd"]], "vsplit": [[451, "vsplit"]], "native_sparse_array": [[469, "native-sparse-array"]], "cov": [[473, "cov"]], "arg_names": [[486, "arg-names"]], "instance_norm": [[455, "instance-norm"]], "clip_matrix_norm": [[490, "clip-matrix-norm"]], "default": [[494, "default"]], "assert_supports_inplace": [[488, "assert-supports-inplace"]], "median": [[478, "median"]], "einops_repeat": [[497, "einops-repeat"]], "fourier_encode": [[499, "fourier-encode"]], "function_supported_devices_and_dtypes": [[500, "function-supported-devices-and-dtypes"]], "function_unsupported_devices_and_dtypes": [[501, "function-unsupported-devices-and-dtypes"]], "einops_reduce": [[496, "einops-reduce"]], "lp_normalize": [[458, "lp-normalize"]], "group_norm": [[454, "group-norm"]], "all_equal": [[484, "all-equal"]], "native_sparse_array_to_indices_values_and_shape": [[470, "native-sparse-array-to-indices-values-and-shape"]], "bincount": [[471, "bincount"]], "arg_info": [[485, "arg-info"]], "nanmean": [[479, "nanmean"]], "array_equal": [[487, "array-equal"]], "is_native_sparse_array": [[468, "is-native-sparse-array"]], "cache_fn": [[489, "cache-fn"]], "unravel_index": [[464, "unravel-index"]], "unfold": [[449, "unfold"]], "rot90": [[445, "rot90"]], "batch_norm": [[453, "batch-norm"]], "cummax": [[474, "cummax"]], "lexsort": [[466, "lexsort"]], "l1_normalize": [[456, "l1-normalize"]], "is_ivy_sparse_array": [[467, "is-ivy-sparse-array"]], "put_along_axis": [[444, "put-along-axis"]], "beta": [[460, "beta"]], "partial_unfold": [[442, "partial-unfold"]], "poisson": [[463, "poisson"]], "invert_permutation": [[465, "invert-permutation"]], "top_k": [[448, "top-k"]], "l2_normalize": [[457, "l2-normalize"]], "bernoulli": [[459, "bernoulli"]], "cummin": [[475, "cummin"]], "nanmedian": [[480, "nanmedian"]], "container_types": [[492, "container-types"]], "optional_get_element": [[483, "optional-get-element"]], "concat_from_sequence": [[424, "concat-from-sequence"]], "i0": [[436, "i0"]], "make_svd_non_negative": [[403, "make-svd-non-negative"]], "smooth_l1_loss": [[415, "smooth-l1-loss"]], "huber_loss": [[412, "huber-loss"]], "max_pool1d": [[383, "max-pool1d"]], "pool": [[388, "pool"]], "rfftn": [[390, "rfftn"]], "truncated_svd": [[410, "truncated-svd"]], "l1_loss": [[413, "l1-loss"]], "soft_margin_loss": [[416, "soft-margin-loss"]], "general_inner_product": [[398, "general-inner-product"]], "interp": [[381, "interp"]], "atleast_2d": [[420, "atleast-2d"]], "flatten": [[429, "flatten"]], "nearest_interpolate": [[387, "nearest-interpolate"]], "multi_dot": [[406, "multi-dot"]], "tucker": [[411, "tucker"]], "as_strided": [[417, "as-strided"]], "eigh_tridiagonal": [[396, "eigh-tridiagonal"]], "reduce_window": [[389, "reduce-window"]], "max_pool2d": [[384, "max-pool2d"]], "broadcast_shapes": [[422, "broadcast-shapes"]], "fold": [[432, "fold"]], "expand": [[427, "expand"]], "kron": [[401, "kron"]], "interpolate": [[382, "interpolate"]], "ifft": [[379, "ifft"]], "ifftn": [[380, "ifftn"]], "kronecker": [[402, "kronecker"]], "atleast_3d": [[421, "atleast-3d"]], "flipud": [[431, "flipud"]], "eig": [[395, "eig"], [618, "eig"]], "dsplit": [[425, "dsplit"]], "matrix_exp": [[404, "matrix-exp"]], "adjoint": [[391, "adjoint"]], "matricize": [[437, "matricize"]], "partial_tucker": [[408, "partial-tucker"]], "hstack": [[435, "hstack"]], "dot": [[394, "dot"]], "svd_flip": [[409, "svd-flip"]], "max_pool3d": [[385, "max-pool3d"]], "max_unpool1d": [[386, "max-unpool1d"]], "dstack": [[426, "dstack"]], "atleast_1d": [[419, "atleast-1d"]], "multi_mode_dot": [[407, "multi-mode-dot"]], "associative_scan": [[418, "associative-scan"]], "heaviside": [[433, "heaviside"]], "log_poisson_loss": [[414, "log-poisson-loss"]], "pad": [[439, "pad"]], "fill_diagonal": [[428, "fill-diagonal"]], "mode_dot": [[405, "mode-dot"]], "partial_fold": [[440, "partial-fold"]], "cond": [[392, "cond"]], "eigvals": [[397, "eigvals"]], "hsplit": [[434, "hsplit"]], "khatri_rao": [[400, "khatri-rao"]], "idct": [[378, "idct"]], "moveaxis": [[438, "moveaxis"]], "choose": [[423, "choose"]], "initialize_tucker": [[399, "initialize-tucker"]], "fliplr": [[430, "fliplr"]], "diagflat": [[393, "diagflat"]], "multi_head_attention": [[611, "multi-head-attention"]], "matrix_norm": [[625, "matrix-norm"]], "diagonal": [[617, "diagonal"]], "Constants": [[576, "module-ivy.functional.ivy.constants"], [340, "module-ivy.functional.ivy.experimental.constants"]], "inv": [[622, "inv"]], "conv_general_dilated": [[605, "conv-general-dilated"]], "lstm_update": [[610, "lstm-update"]], "scaled_dot_product_attention": [[612, "scaled-dot-product-attention"]], "eigvalsh": [[620, "eigvalsh"]], "matrix_rank": [[627, "matrix-rank"]], "conv": [[598, "conv"]], "lu_factor": [[623, "lu-factor"]], "Control flow ops": [[577, "control-flow-ops"]], "gradient_descent_update": [[568, "gradient-descent-update"]], "depthwise_conv2d": [[607, "depthwise-conv2d"]], "dropout": [[608, "dropout"]], "matrix_transpose": [[628, "matrix-transpose"]], "linear": [[609, "linear"]], "diag": [[616, "diag"]], "grad": [[567, "grad"]], "jac": [[569, "jac"]], "outer": [[629, "outer"]], "conv_general_transpose": [[606, "conv-general-transpose"]], "lars_update": [[571, "lars-update"]], "conv2d_transpose": [[602, "conv2d-transpose"]], "matrix_power": [[626, "matrix-power"]], "Nest": [[590, "nest"], [352, "module-ivy.functional.ivy.experimental.nest"]], "Meta": [[589, "meta"], [351, "module-ivy.functional.ivy.experimental.meta"]], "lamb_update": [[570, "lamb-update"]], "conv1d": [[599, "conv1d"]], "conv3d_transpose": [[604, "conv3d-transpose"]], "conv1d_transpose": [[600, "conv1d-transpose"]], "conv2d": [[601, "conv2d"]], "cholesky": [[613, "cholesky"]], "stop_gradient": [[573, "stop-gradient"]], "inner": [[621, "inner"]], "value_and_grad": [[574, "value-and-grad"]], "optimizer_update": [[572, "optimizer-update"]], "det": [[615, "det"]], "cross": [[614, "cross"]], "conv3d": [[603, "conv3d"]], "eigh": [[619, "eigh"]], "matmul": [[624, "matmul"]], "sqrt": [[278, "sqrt"]], "hamming_window": [[297, "hamming-window"]], "conj": [[314, "conj"]], "trilu": [[308, "trilu"]], "unsorted_segment_min": [[309, "unsorted-segment-min"]], "sinh": [[277, "sinh"]], "not_equal": [[267, "not-equal"]], "trunc_divide": [[285, "trunc-divide"]], "ndenumerate": [[303, "ndenumerate"]], "vorbis_window": [[311, "vorbis-window"]], "relu6": [[290, "relu6"]], "blackman_window": [[295, "blackman-window"]], "hann_window": [[298, "hann-window"]], "random_tucker": [[306, "random-tucker"]], "sequence_length": [[292, "sequence-length"]], "logit": [[287, "logit"]], "square": [[279, "square"]], "eye_like": [[296, "eye-like"]], "tanh": [[282, "tanh"]], "logaddexp2": [[257, "logaddexp2"]], "log1p": [[254, "log1p"]], "log2": [[255, "log2"]], "rad2deg": [[270, "rad2deg"]], "nan_to_num": [[265, "nan-to-num"]], "positive": [[268, "positive"]], "logical_or": [[260, "logical-or"]], "multiply": [[264, "multiply"]], "log10": [[253, "log10"]], "indices": [[299, "indices"]], "allclose": [[312, "allclose"]], "sin": [[276, "sin"]], "kaiser_bessel_derived_window": [[300, "kaiser-bessel-derived-window"]], "logsigmoid": [[288, "logsigmoid"]], "remainder": [[273, "remainder"]], "negative": [[266, "negative"]], "thresholded_relu": [[294, "thresholded-relu"]], "mel_weight_matrix": [[302, "mel-weight-matrix"]], "binarizer": [[313, "binarizer"]], "silu": [[293, "silu"]], "ndindex": [[304, "ndindex"]], "minimum": [[263, "minimum"]], "pow": [[269, "pow"]], "round": [[274, "round"]], "elu": [[286, "elu"]], "real": [[271, "real"]], "unsorted_segment_sum": [[310, "unsorted-segment-sum"]], "trunc": [[284, "trunc"]], "kaiser_window": [[301, "kaiser-window"]], "tril_indices": [[307, "tril-indices"]], "prelu": [[289, "prelu"]], "random_cp": [[305, "random-cp"]], "logical_xor": [[261, "logical-xor"]], "trapz": [[283, "trapz"]], "logical_not": [[259, "logical-not"]], "subtract": [[280, "subtract"]], "tan": [[281, "tan"]], "log": [[252, "log"]], "logical_and": [[258, "logical-and"]], "logaddexp": [[256, "logaddexp"]], "reciprocal": [[272, "reciprocal"]], "maximum": [[262, "maximum"]], "sign": [[275, "sign"]], "selu": [[291, "selu"]], "fix": [[319, "fix"]], "get_interpolate_kernel": [[377, "get-interpolate-kernel"]], "dropout2d": [[371, "dropout2d"]], "adaptive_avg_pool2d": [[362, "adaptive-avg-pool2d"]], "generate_einsum_equation": [[376, "generate-einsum-equation"]], "diff": [[317, "diff"]], "embedding": [[373, "embedding"]], "gradient": [[323, "gradient"]], "zeta": [[336, "zeta"]], "lgamma": [[328, "lgamma"]], "avg_pool1d": [[365, "avg-pool1d"]], "sparsify_tensor": [[334, "sparsify-tensor"]], "Sparse array": [[358, "sparse-array"]], "avg_pool3d": [[367, "avg-pool3d"]], "lerp": [[327, "lerp"]], "count_nonzero": [[316, "count-nonzero"]], "nextafter": [[331, "nextafter"]], "sinc": [[333, "sinc"]], "avg_pool2d": [[366, "avg-pool2d"]], "ldexp": [[326, "ldexp"]], "modf": [[329, "modf"]], "copysign": [[315, "copysign"]], "isclose": [[325, "isclose"]], "area_interpolate": [[364, "area-interpolate"]], "digamma": [[318, "digamma"]], "fft": [[374, "fft"]], "xlogy": [[335, "xlogy"]], "adaptive_max_pool2d": [[363, "adaptive-max-pool2d"]], "hypot": [[324, "hypot"]], "signbit": [[332, "signbit"]], "frexp": [[322, "frexp"]], "fft2": [[375, "fft2"]], "bind_custom_gradient_function": [[338, "bind-custom-gradient-function"]], "dropout1d": [[370, "dropout1d"]], "reduce": [[337, "reduce"]], "dropout3d": [[372, "dropout3d"]], "dft": [[369, "dft"]], "fmax": [[321, "fmax"]], "adaptive_avg_pool1d": [[361, "adaptive-avg-pool1d"]], "float_power": [[320, "float-power"]], "dct": [[368, "dct"]], "nansum": [[330, "nansum"]], "less_equal": [[251, "less-equal"]], "num_cpu_cores": [[195, "num-cpu-cores"]], "tpu_is_available": [[207, "tpu-is-available"]], "divide": [[231, "divide"]], "floor": [[237, "floor"]], "gpu_is_available": [[193, "gpu-is-available"]], "atanh": [[220, "atanh"]], "bitwise_and": [[221, "bitwise-and"]], "unset_soft_device_mode": [[209, "unset-soft-device-mode"]], "add": [[214, "add"]], "isinf": [[246, "isinf"]], "isreal": [[248, "isreal"]], "abs": [[211, "abs"]], "print_all_ivy_arrays_on_dev": [[199, "print-all-ivy-arrays-on-dev"]], "total_mem_on_dev": [[206, "total-mem-on-dev"]], "cosh": [[229, "cosh"]], "expm1": [[236, "expm1"]], "used_mem_on_dev": [[210, "used-mem-on-dev"]], "greater_equal": [[243, "greater-equal"]], "isfinite": [[245, "isfinite"]], "atan2": [[219, "atan2"]], "bitwise_invert": [[222, "bitwise-invert"]], "ceil": [[227, "ceil"]], "equal": [[232, "equal"]], "greater": [[242, "greater"]], "function_unsupported_devices": [[191, "function-unsupported-devices"]], "function_supported_devices": [[190, "function-supported-devices"]], "atan": [[218, "atan"]], "split_factor": [[203, "split-factor"]], "fmin": [[239, "fmin"]], "isnan": [[247, "isnan"]], "set_default_device": [[200, "set-default-device"]], "percent_used_mem_on_dev": [[198, "percent-used-mem-on-dev"]], "exp2": [[235, "exp2"]], "acosh": [[213, "acosh"]], "unset_default_device": [[208, "unset-default-device"]], "imag": [[244, "imag"]], "exp": [[234, "exp"]], "set_split_factor": [[202, "set-split-factor"]], "to_device": [[205, "to-device"]], "get_all_ivy_arrays_on_dev": [[192, "get-all-ivy-arrays-on-dev"]], "dev_util": [[189, "dev-util"]], "cos": [[228, "cos"]], "set_soft_device_mode": [[201, "set-soft-device-mode"]], "bitwise_left_shift": [[223, "bitwise-left-shift"]], "floor_divide": [[238, "floor-divide"]], "lcm": [[249, "lcm"]], "erf": [[233, "erf"]], "angle": [[215, "angle"]], "asin": [[216, "asin"]], "bitwise_xor": [[226, "bitwise-xor"]], "bitwise_right_shift": [[225, "bitwise-right-shift"]], "bitwise_or": [[224, "bitwise-or"]], "gcd": [[241, "gcd"]], "num_ivy_arrays_on_dev": [[197, "num-ivy-arrays-on-dev"]], "split_func_call": [[204, "split-func-call"]], "acos": [[212, "acos"]], "asinh": [[217, "asinh"]], "num_gpus": [[196, "num-gpus"]], "fmod": [[240, "fmod"]], "deg2rad": [[230, "deg2rad"]], "handle_soft_device_variable": [[194, "handle-soft-device-variable"]], "less": [[250, "less"]], "promote_types": [[169, "promote-types"]], "iinfo": [[159, "iinfo"]], "unset_default_float_dtype": [[180, "unset-default-float-dtype"]], "ones_like": [[135, "ones-like"]], "set_default_int_dtype": [[175, "set-default-int-dtype"]], "closest_valid_dtype": [[148, "closest-valid-dtype"]], "set_default_dtype": [[173, "set-default-dtype"]], "native_array": [[132, "native-array"]], "default_complex_dtype": [[149, "default-complex-dtype"]], "unset_default_uint_dtype": [[182, "unset-default-uint-dtype"]], "default_int_dtype": [[152, "default-int-dtype"]], "full_like": [[128, "full-like"]], "astype": [[143, "astype"]], "as_native_dev": [[185, "as-native-dev"]], "default_uint_dtype": [[153, "default-uint-dtype"]], "ones": [[134, "ones"]], "is_complex_dtype": [[163, "is-complex-dtype"]], "clear_cached_mem_on_dev": [[186, "clear-cached-mem-on-dev"]], "default_dtype": [[150, "default-dtype"]], "unset_default_complex_dtype": [[178, "unset-default-complex-dtype"]], "dev": [[188, "dev"]], "frombuffer": [[126, "frombuffer"]], "can_cast": [[146, "can-cast"]], "finfo": [[156, "finfo"]], "function_unsupported_dtypes": [[158, "function-unsupported-dtypes"]], "is_hashable_dtype": [[165, "is-hashable-dtype"]], "logspace": [[130, "logspace"]], "broadcast_arrays": [[144, "broadcast-arrays"]], "infer_default_dtype": [[160, "infer-default-dtype"]], "one_hot": [[133, "one-hot"]], "zeros_like": [[140, "zeros-like"]], "linspace": [[129, "linspace"]], "result_type": [[171, "result-type"]], "as_ivy_dev": [[184, "as-ivy-dev"]], "invalid_dtype": [[161, "invalid-dtype"]], "default_float_dtype": [[151, "default-float-dtype"]], "is_bool_dtype": [[162, "is-bool-dtype"]], "is_float_dtype": [[164, "is-float-dtype"]], "full": [[127, "full"]], "dtype": [[154, "dtype"]], "tril": [[136, "tril"]], "default_device": [[187, "default-device"]], "dtype_bits": [[155, "dtype-bits"]], "unset_default_dtype": [[179, "unset-default-dtype"]], "type_promote_arrays": [[177, "type-promote-arrays"]], "is_native_dtype": [[167, "is-native-dtype"]], "promote_types_of_inputs": [[170, "promote-types-of-inputs"]], "check_float": [[147, "check-float"]], "is_int_dtype": [[166, "is-int-dtype"]], "function_supported_dtypes": [[157, "function-supported-dtypes"]], "is_uint_dtype": [[168, "is-uint-dtype"]], "unset_default_int_dtype": [[181, "unset-default-int-dtype"]], "triu": [[137, "triu"]], "as_ivy_dtype": [[141, "as-ivy-dtype"]], "valid_dtype": [[183, "valid-dtype"]], "meshgrid": [[131, "meshgrid"]], "broadcast_to": [[145, "broadcast-to"]], "set_default_uint_dtype": [[176, "set-default-uint-dtype"]], "as_native_dtype": [[142, "as-native-dtype"]], "set_default_complex_dtype": [[172, "set-default-complex-dtype"]], "set_default_float_dtype": [[174, "set-default-float-dtype"]], "zeros": [[139, "zeros"]], "triu_indices": [[138, "triu-indices"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[45, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[45, "module-ivy.data_classes.array.activations"], [46, "module-ivy.data_classes.array.conversions"], [47, "module-ivy.data_classes.array.creation"], [48, "module-ivy.data_classes.array.data_type"], [49, "module-ivy.data_classes.array.device"], [50, "module-ivy.data_classes.array.elementwise"], [51, "module-ivy.data_classes.array.experimental"], [51, "module-ivy.data_classes.array.experimental.activations"], [51, "module-ivy.data_classes.array.experimental.conversions"], [51, "module-ivy.data_classes.array.experimental.creation"], [51, "module-ivy.data_classes.array.experimental.data_type"], [51, "module-ivy.data_classes.array.experimental.device"], [51, "module-ivy.data_classes.array.experimental.elementwise"], [51, "module-ivy.data_classes.array.experimental.general"], [51, "module-ivy.data_classes.array.experimental.gradients"], [51, "module-ivy.data_classes.array.experimental.image"], [51, "module-ivy.data_classes.array.experimental.layers"], [51, "module-ivy.data_classes.array.experimental.linear_algebra"], [51, "module-ivy.data_classes.array.experimental.losses"], [51, "module-ivy.data_classes.array.experimental.manipulation"], [51, "module-ivy.data_classes.array.experimental.norms"], [51, "module-ivy.data_classes.array.experimental.random"], [51, "module-ivy.data_classes.array.experimental.searching"], [51, "module-ivy.data_classes.array.experimental.set"], [51, "module-ivy.data_classes.array.experimental.sorting"], [51, "module-ivy.data_classes.array.experimental.statistical"], [51, "module-ivy.data_classes.array.experimental.utility"], [52, "module-ivy.data_classes.array.general"], [53, "module-ivy.data_classes.array.gradients"], [54, "module-ivy.data_classes.array.image"], [55, "module-ivy.data_classes.array.layers"], [56, "module-ivy.data_classes.array.linear_algebra"], [57, "module-ivy.data_classes.array.losses"], [58, "module-ivy.data_classes.array.manipulation"], [59, "module-ivy.data_classes.array.norms"], [60, "module-ivy.data_classes.array.random"], [61, "module-ivy.data_classes.array.searching"], [62, "module-ivy.data_classes.array.set"], [63, "module-ivy.data_classes.array.sorting"], [64, "module-ivy.data_classes.array.statistical"], [65, "module-ivy.data_classes.array.utility"], [66, "module-ivy.data_classes.array.wrapping"], [67, "module-ivy.data_classes.container.activations"], [68, "module-ivy.data_classes.container.base"], [69, "module-ivy.data_classes.container.conversions"], [70, "module-ivy.data_classes.container.creation"], [71, "module-ivy.data_classes.container.data_type"], [72, "module-ivy.data_classes.container.device"], [73, "module-ivy.data_classes.container.elementwise"], [74, "module-ivy.data_classes.container.experimental"], [74, "module-ivy.data_classes.container.experimental.activations"], [74, "module-ivy.data_classes.container.experimental.conversions"], [74, "module-ivy.data_classes.container.experimental.creation"], [74, "module-ivy.data_classes.container.experimental.data_type"], [74, "module-ivy.data_classes.container.experimental.device"], [74, "module-ivy.data_classes.container.experimental.elementwise"], [74, "module-ivy.data_classes.container.experimental.general"], [74, "module-ivy.data_classes.container.experimental.gradients"], [74, "module-ivy.data_classes.container.experimental.image"], [74, "module-ivy.data_classes.container.experimental.layers"], [74, "module-ivy.data_classes.container.experimental.linear_algebra"], [74, "module-ivy.data_classes.container.experimental.losses"], [74, "module-ivy.data_classes.container.experimental.manipulation"], [74, "module-ivy.data_classes.container.experimental.norms"], [74, "module-ivy.data_classes.container.experimental.random"], [74, "module-ivy.data_classes.container.experimental.searching"], [74, "module-ivy.data_classes.container.experimental.set"], [74, "module-ivy.data_classes.container.experimental.sorting"], [74, "module-ivy.data_classes.container.experimental.statistical"], [74, "module-ivy.data_classes.container.experimental.utility"], [75, "module-ivy.data_classes.container.general"], [76, "module-ivy.data_classes.container.gradients"], [77, "module-ivy.data_classes.container.image"], [78, "module-ivy.data_classes.container.layers"], [79, "module-ivy.data_classes.container.linear_algebra"], [80, "module-ivy.data_classes.container.losses"], [81, "module-ivy.data_classes.container.manipulation"], [82, "module-ivy.data_classes.container.norms"], [83, "module-ivy.data_classes.container.random"], [84, "module-ivy.data_classes.container.searching"], [85, "module-ivy.data_classes.container.set"], [86, "module-ivy.data_classes.container.sorting"], [87, "module-ivy.data_classes.container.statistical"], [88, "module-ivy.data_classes.container.utility"], [89, "module-ivy.data_classes.container.wrapping"], [90, "module-ivy.data_classes.factorized_tensor.base"], [91, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [92, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [93, "module-ivy.data_classes.array.array"], [94, "module-ivy.data_classes.container.container"], [96, "module-ivy.data_classes.nested_array.nested_array"], [97, "module-ivy.data_classes.nested_array.base"], [98, "module-ivy.data_classes.nested_array.elementwise"], [339, "module-ivy.functional.ivy.experimental.activations"], [340, "module-ivy.functional.ivy.experimental.constants"], [341, "module-ivy.functional.ivy.experimental.creation"], [342, "module-ivy.functional.ivy.experimental.data_type"], [343, "module-ivy.functional.ivy.experimental.device"], [344, "module-ivy.functional.ivy.experimental.elementwise"], [345, "module-ivy.functional.ivy.experimental.general"], [346, "module-ivy.functional.ivy.experimental.gradients"], [347, "module-ivy.functional.ivy.experimental.layers"], [348, "module-ivy.functional.ivy.experimental.linear_algebra"], [349, "module-ivy.functional.ivy.experimental.losses"], [350, "module-ivy.functional.ivy.experimental.manipulation"], [351, "module-ivy.functional.ivy.experimental.meta"], [352, "module-ivy.functional.ivy.experimental.nest"], [353, "module-ivy.functional.ivy.experimental.norms"], [354, "module-ivy.functional.ivy.experimental.random"], [355, "module-ivy.functional.ivy.experimental.searching"], [356, "module-ivy.functional.ivy.experimental.set"], [357, "module-ivy.functional.ivy.experimental.sorting"], [358, "module-ivy.functional.ivy.experimental.sparse_array"], [359, "module-ivy.functional.ivy.experimental.statistical"], [360, "module-ivy.functional.ivy.experimental.utility"], [575, "module-ivy.functional.ivy.activations"], [576, "module-ivy.functional.ivy.constants"], [577, "module-ivy.functional.ivy.control_flow_ops"], [578, "module-ivy.functional.ivy.creation"], [579, "module-ivy.functional.ivy.data_type"], [580, "module-ivy.functional.ivy.device"], [581, "module-ivy.functional.ivy.elementwise"], [582, "module-ivy.functional.ivy.experimental"], [583, "module-ivy.functional.ivy.general"], [584, "module-ivy.functional.ivy.gradients"], [585, "module-ivy.functional.ivy.layers"], [586, "module-ivy.functional.ivy.linear_algebra"], [587, "module-ivy.functional.ivy.losses"], [588, "module-ivy.functional.ivy.manipulation"], [589, "module-ivy.functional.ivy.meta"], [590, "module-ivy.functional.ivy.nest"], [591, "module-ivy.functional.ivy.norms"], [592, "module-ivy.functional.ivy.random"], [593, "module-ivy.functional.ivy.searching"], [594, "module-ivy.functional.ivy.set"], [595, "module-ivy.functional.ivy.sorting"], [596, "module-ivy.functional.ivy.statistical"], [597, "module-ivy.functional.ivy.utility"], [720, "module-ivy.stateful.activations"], [721, "module-ivy.stateful.converters"], [722, "module-ivy.stateful.helpers"], [723, "module-ivy.stateful.initializers"], [724, "module-ivy.stateful.layers"], [725, "module-ivy.stateful.losses"], [726, "module-ivy.stateful.module"], [727, "module-ivy.stateful.norms"], [728, "module-ivy.stateful.optimizers"], [729, "module-ivy.stateful.sequential"], [730, "module-ivy.utils.assertions"], [731, "module-ivy.utils.backend"], [732, "module-ivy.utils.backend.ast_helpers"], [733, "module-ivy.utils.backend.handler"], [734, "module-ivy.utils.backend.sub_backend_handler"], [735, "module-ivy.utils.dynamic_import"], [736, "module-ivy.utils.einsum_parser"], [737, "module-ivy.utils.exceptions"], [738, "module-ivy.utils.inspection"], [739, "module-ivy.utils.logging"], [740, "module-ivy.utils.profiler"], [741, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[45, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[46, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[46, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[47, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[47, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[48, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[48, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[49, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[49, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[49, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[49, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[49, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[50, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[50, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[51, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[51, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[51, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[51, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[51, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[51, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[51, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[51, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[51, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[51, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[51, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[51, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[51, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[51, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[51, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[51, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[51, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[51, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[51, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[51, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[51, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[51, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[51, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[51, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[51, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[51, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[51, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[51, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[51, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[51, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[51, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[51, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[51, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[51, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[51, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[51, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[51, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[51, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[51, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[51, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[51, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[51, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[51, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[51, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[51, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[52, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[52, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[53, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[53, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[54, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[54, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[54, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[55, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[55, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[56, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[56, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[57, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[57, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[58, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[58, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[59, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[59, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[60, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[60, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[60, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[60, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[61, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[61, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[62, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[62, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[62, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[62, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[63, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[63, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[64, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[64, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[65, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[65, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[66, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[66, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[66, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[67, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[67, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[68, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[68, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[68, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[68, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[68, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[68, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[69, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[69, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[70, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[70, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[71, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[71, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[72, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[72, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[72, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[73, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[73, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[74, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[74, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[74, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[74, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[74, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[74, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[74, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[74, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[74, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[74, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[74, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[74, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[74, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[74, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[74, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[74, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[74, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[74, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[74, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[74, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[74, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[74, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[74, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[74, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[74, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[74, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[74, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[74, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[74, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[74, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[74, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[74, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[74, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[74, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[74, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[74, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[74, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[74, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[74, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[74, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[74, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[74, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[74, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[74, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[74, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[74, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[74, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[75, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[75, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[76, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[76, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[77, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[77, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[77, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[78, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[78, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[79, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[79, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[80, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[80, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[81, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[81, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[82, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[82, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[83, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[83, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[83, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[84, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[84, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[85, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[85, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[85, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[85, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[85, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[86, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[86, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[87, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[87, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[88, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[88, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[89, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[89, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[89, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[90, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[90, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[91, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[91, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[92, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[92, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[93, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[93, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[93, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[93, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[94, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[94, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[94, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[96, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[96, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[97, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[97, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[98, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[98, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[98, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[98, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[101, "ivy.gelu"], [575, "ivy.gelu"]], "gelu() (ivy.array method)": [[101, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[101, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[102, "ivy.hardswish"], [575, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[102, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[102, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[103, "ivy.leaky_relu"], [575, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[103, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[103, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[104, "ivy.log_softmax"], [575, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[104, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[104, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[105, "ivy.mish"], [575, "ivy.mish"]], "mish() (ivy.array method)": [[105, "ivy.Array.mish"]], "mish() (ivy.container method)": [[105, "ivy.Container.mish"]], "relu() (in module ivy)": [[106, "ivy.relu"], [575, "ivy.relu"]], "relu() (ivy.array method)": [[106, "ivy.Array.relu"]], "relu() (ivy.container method)": [[106, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[107, "ivy.sigmoid"], [575, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[107, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[107, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[108, "ivy.softmax"], [575, "ivy.softmax"]], "softmax() (ivy.array method)": [[108, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[108, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[109, "ivy.softplus"], [575, "ivy.softplus"]], "softplus() (ivy.array method)": [[109, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[109, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[110, "ivy.softsign"], [575, "ivy.softsign"]], "cast_bool() (in module ivy)": [[111, "ivy.cast_bool"], [577, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[112, "ivy.cmp_is"], [577, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[113, "ivy.cmp_isnot"], [577, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[114, "ivy.for_loop"], [577, "ivy.for_loop"]], "if_else() (in module ivy)": [[115, "ivy.if_else"], [577, "ivy.if_else"]], "try_except() (in module ivy)": [[116, "ivy.try_except"], [577, "ivy.try_except"]], "while_loop() (in module ivy)": [[117, "ivy.while_loop"], [577, "ivy.while_loop"]], "arange() (in module ivy)": [[118, "ivy.arange"], [578, "ivy.arange"]], "array() (in module ivy)": [[119, "ivy.array"], [578, "ivy.array"]], "asarray() (in module ivy)": [[120, "ivy.asarray"], [578, "ivy.asarray"]], "asarray() (ivy.array method)": [[120, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[120, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[121, "ivy.copy_array"], [578, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[121, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[121, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[122, "ivy.empty"], [578, "ivy.empty"]], "empty_like() (in module ivy)": [[123, "ivy.empty_like"], [578, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[123, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[123, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[124, "ivy.eye"], [578, "ivy.eye"]], "from_dlpack() (in module ivy)": [[125, "ivy.from_dlpack"], [578, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[125, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[125, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[126, "ivy.frombuffer"], [578, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[126, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[127, "ivy.full"], [578, "ivy.full"]], "full_like() (in module ivy)": [[128, "ivy.full_like"], [578, "ivy.full_like"]], "full_like() (ivy.array method)": [[128, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[128, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[129, "ivy.linspace"], [578, "ivy.linspace"]], "linspace() (ivy.array method)": [[129, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[129, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[130, "ivy.logspace"], [578, "ivy.logspace"]], "logspace() (ivy.array method)": [[130, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[130, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[131, "ivy.meshgrid"], [578, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[131, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[131, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[132, "ivy.native_array"], [578, "ivy.native_array"]], "native_array() (ivy.array method)": [[132, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[132, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[133, "ivy.one_hot"], [578, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[133, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[133, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[134, "ivy.ones"], [578, "ivy.ones"]], "ones_like() (in module ivy)": [[135, "ivy.ones_like"], [578, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[135, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[135, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[136, "ivy.tril"], [578, "ivy.tril"]], "tril() (ivy.array method)": [[136, "ivy.Array.tril"]], "tril() (ivy.container method)": [[136, "ivy.Container.tril"]], "triu() (in module ivy)": [[137, "ivy.triu"], [578, "ivy.triu"]], "triu() (ivy.array method)": [[137, "ivy.Array.triu"]], "triu() (ivy.container method)": [[137, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[138, "ivy.triu_indices"], [578, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[138, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[139, "ivy.zeros"], [578, "ivy.zeros"]], "zeros_like() (in module ivy)": [[140, "ivy.zeros_like"], [578, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[140, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[140, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[141, "ivy.as_ivy_dtype"], [579, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[142, "ivy.as_native_dtype"], [579, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[143, "ivy.astype"], [579, "ivy.astype"]], "astype() (ivy.array method)": [[143, "ivy.Array.astype"]], "astype() (ivy.container method)": [[143, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[144, "ivy.broadcast_arrays"], [579, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[144, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[144, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[145, "ivy.broadcast_to"], [579, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[145, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[145, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[146, "ivy.can_cast"], [579, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[146, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[146, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[147, "ivy.check_float"], [579, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[148, "ivy.closest_valid_dtype"], [579, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[149, "ivy.default_complex_dtype"], [579, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[150, "ivy.default_dtype"], [579, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[151, "ivy.default_float_dtype"], [579, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[152, "ivy.default_int_dtype"], [579, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[153, "ivy.default_uint_dtype"], [579, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[154, "ivy.dtype"], [579, "ivy.dtype"]], "dtype() (ivy.array method)": [[154, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[154, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[155, "ivy.dtype_bits"], [579, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[156, "ivy.finfo"], [579, "ivy.finfo"]], "finfo() (ivy.array method)": [[156, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[156, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[157, "ivy.function_supported_dtypes"], [579, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[158, "ivy.function_unsupported_dtypes"], [579, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[159, "ivy.iinfo"], [579, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[159, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[159, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[160, "ivy.infer_default_dtype"], [579, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[161, "ivy.invalid_dtype"], [579, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[162, "ivy.is_bool_dtype"], [579, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[162, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[162, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[163, "ivy.is_complex_dtype"], [579, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[163, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[164, "ivy.is_float_dtype"], [579, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[164, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[164, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[165, "ivy.is_hashable_dtype"], [579, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[166, "ivy.is_int_dtype"], [579, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[166, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[166, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[167, "ivy.is_native_dtype"], [579, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[168, "ivy.is_uint_dtype"], [579, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[168, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[168, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[169, "ivy.promote_types"], [579, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[170, "ivy.promote_types_of_inputs"], [579, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[171, "ivy.result_type"], [579, "ivy.result_type"]], "result_type() (ivy.array method)": [[171, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[171, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[172, "ivy.set_default_complex_dtype"], [579, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[173, "ivy.set_default_dtype"], [579, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[174, "ivy.set_default_float_dtype"], [579, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[175, "ivy.set_default_int_dtype"], [579, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[176, "ivy.set_default_uint_dtype"], [579, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[177, "ivy.type_promote_arrays"], [579, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[178, "ivy.unset_default_complex_dtype"], [579, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[179, "ivy.unset_default_dtype"], [579, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[180, "ivy.unset_default_float_dtype"], [579, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[181, "ivy.unset_default_int_dtype"], [579, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[182, "ivy.unset_default_uint_dtype"], [579, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[183, "ivy.valid_dtype"], [579, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[184, "ivy.as_ivy_dev"], [580, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[185, "ivy.as_native_dev"], [580, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[186, "ivy.clear_cached_mem_on_dev"], [580, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[187, "ivy.default_device"], [580, "ivy.default_device"]], "dev() (in module ivy)": [[188, "ivy.dev"], [580, "ivy.dev"]], "dev() (ivy.array method)": [[188, "ivy.Array.dev"]], "dev() (ivy.container method)": [[188, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[189, "ivy.dev_util"], [580, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[190, "ivy.function_supported_devices"], [580, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[191, "ivy.function_unsupported_devices"], [580, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[192, "ivy.get_all_ivy_arrays_on_dev"], [580, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[193, "ivy.gpu_is_available"], [580, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[194, "ivy.handle_soft_device_variable"], [580, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[195, "ivy.num_cpu_cores"], [580, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[196, "ivy.num_gpus"], [580, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[197, "ivy.num_ivy_arrays_on_dev"], [580, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[198, "ivy.percent_used_mem_on_dev"], [580, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[199, "ivy.print_all_ivy_arrays_on_dev"], [580, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[200, "ivy.set_default_device"], [580, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[201, "ivy.set_soft_device_mode"], [580, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[202, "ivy.set_split_factor"], [580, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[203, "ivy.split_factor"], [580, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[204, "ivy.split_func_call"], [580, "ivy.split_func_call"]], "to_device() (in module ivy)": [[205, "ivy.to_device"], [580, "ivy.to_device"]], "to_device() (ivy.array method)": [[205, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[205, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[206, "ivy.total_mem_on_dev"], [580, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[207, "ivy.tpu_is_available"], [580, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[208, "ivy.unset_default_device"], [580, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[209, "ivy.unset_soft_device_mode"], [580, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[210, "ivy.used_mem_on_dev"], [580, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[211, "ivy.abs"], [581, "ivy.abs"]], "abs() (ivy.array method)": [[211, "ivy.Array.abs"]], "abs() (ivy.container method)": [[211, "ivy.Container.abs"]], "acos() (in module ivy)": [[212, "ivy.acos"], [581, "ivy.acos"]], "acos() (ivy.array method)": [[212, "ivy.Array.acos"]], "acos() (ivy.container method)": [[212, "ivy.Container.acos"]], "acosh() (in module ivy)": [[213, "ivy.acosh"], [581, "ivy.acosh"]], "acosh() (ivy.array method)": [[213, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[213, "ivy.Container.acosh"]], "add() (in module ivy)": [[214, "ivy.add"], [581, "ivy.add"]], "add() (ivy.array method)": [[214, "ivy.Array.add"]], "add() (ivy.container method)": [[214, "ivy.Container.add"]], "angle() (in module ivy)": [[215, "ivy.angle"], [581, "ivy.angle"]], "angle() (ivy.array method)": [[215, "ivy.Array.angle"]], "angle() (ivy.container method)": [[215, "ivy.Container.angle"]], "asin() (in module ivy)": [[216, "ivy.asin"], [581, "ivy.asin"]], "asin() (ivy.array method)": [[216, "ivy.Array.asin"]], "asin() (ivy.container method)": [[216, "ivy.Container.asin"]], "asinh() (in module ivy)": [[217, "ivy.asinh"], [581, "ivy.asinh"]], "asinh() (ivy.array method)": [[217, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[217, "ivy.Container.asinh"]], "atan() (in module ivy)": [[218, "ivy.atan"], [581, "ivy.atan"]], "atan() (ivy.array method)": [[218, "ivy.Array.atan"]], "atan() (ivy.container method)": [[218, "ivy.Container.atan"]], "atan2() (in module ivy)": [[219, "ivy.atan2"], [581, "ivy.atan2"]], "atan2() (ivy.array method)": [[219, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[219, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[220, "ivy.atanh"], [581, "ivy.atanh"]], "atanh() (ivy.array method)": [[220, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[220, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[221, "ivy.bitwise_and"], [581, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[221, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[221, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[222, "ivy.bitwise_invert"], [581, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[222, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[222, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[223, "ivy.bitwise_left_shift"], [581, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[223, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[223, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[224, "ivy.bitwise_or"], [581, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[224, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[224, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[225, "ivy.bitwise_right_shift"], [581, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[225, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[225, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[226, "ivy.bitwise_xor"], [581, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[226, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[226, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[227, "ivy.ceil"], [581, "ivy.ceil"]], "ceil() (ivy.array method)": [[227, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[227, "ivy.Container.ceil"]], "cos() (in module ivy)": [[228, "ivy.cos"], [581, "ivy.cos"]], "cos() (ivy.array method)": [[228, "ivy.Array.cos"]], "cos() (ivy.container method)": [[228, "ivy.Container.cos"]], "cosh() (in module ivy)": [[229, "ivy.cosh"], [581, "ivy.cosh"]], "cosh() (ivy.array method)": [[229, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[229, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[230, "ivy.deg2rad"], [581, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[230, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[230, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[231, "ivy.divide"], [581, "ivy.divide"]], "divide() (ivy.array method)": [[231, "ivy.Array.divide"]], "divide() (ivy.container method)": [[231, "ivy.Container.divide"]], "equal() (in module ivy)": [[232, "ivy.equal"], [581, "ivy.equal"]], "equal() (ivy.array method)": [[232, "ivy.Array.equal"]], "equal() (ivy.container method)": [[232, "ivy.Container.equal"]], "erf() (in module ivy)": [[233, "ivy.erf"], [581, "ivy.erf"]], "erf() (ivy.array method)": [[233, "ivy.Array.erf"]], "erf() (ivy.container method)": [[233, "ivy.Container.erf"]], "exp() (in module ivy)": [[234, "ivy.exp"], [581, "ivy.exp"]], "exp() (ivy.array method)": [[234, "ivy.Array.exp"]], "exp() (ivy.container method)": [[234, "ivy.Container.exp"]], "exp2() (in module ivy)": [[235, "ivy.exp2"], [581, "ivy.exp2"]], "exp2() (ivy.array method)": [[235, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[235, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[236, "ivy.expm1"], [581, "ivy.expm1"]], "expm1() (ivy.array method)": [[236, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[236, "ivy.Container.expm1"]], "floor() (in module ivy)": [[237, "ivy.floor"], [581, "ivy.floor"]], "floor() (ivy.array method)": [[237, "ivy.Array.floor"]], "floor() (ivy.container method)": [[237, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[238, "ivy.floor_divide"], [581, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[238, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[238, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[239, "ivy.fmin"], [581, "ivy.fmin"]], "fmin() (ivy.array method)": [[239, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[239, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[240, "ivy.fmod"], [581, "ivy.fmod"]], "fmod() (ivy.array method)": [[240, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[240, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[241, "ivy.gcd"], [581, "ivy.gcd"]], "gcd() (ivy.array method)": [[241, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[241, "ivy.Container.gcd"]], "greater() (in module ivy)": [[242, "ivy.greater"], [581, "ivy.greater"]], "greater() (ivy.array method)": [[242, "ivy.Array.greater"]], "greater() (ivy.container method)": [[242, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[243, "ivy.greater_equal"], [581, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[243, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[243, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[244, "ivy.imag"], [581, "ivy.imag"]], "imag() (ivy.array method)": [[244, "ivy.Array.imag"]], "imag() (ivy.container method)": [[244, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[245, "ivy.isfinite"], [581, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[245, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[245, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[246, "ivy.isinf"], [581, "ivy.isinf"]], "isinf() (ivy.array method)": [[246, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[246, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[247, "ivy.isnan"], [581, "ivy.isnan"]], "isnan() (ivy.array method)": [[247, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[247, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[248, "ivy.isreal"], [581, "ivy.isreal"]], "isreal() (ivy.array method)": [[248, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[248, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[249, "ivy.lcm"], [581, "ivy.lcm"]], "lcm() (ivy.array method)": [[249, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[249, "ivy.Container.lcm"]], "less() (in module ivy)": [[250, "ivy.less"], [581, "ivy.less"]], "less() (ivy.array method)": [[250, "ivy.Array.less"]], "less() (ivy.container method)": [[250, "ivy.Container.less"]], "less_equal() (in module ivy)": [[251, "ivy.less_equal"], [581, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[251, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[251, "ivy.Container.less_equal"]], "log() (in module ivy)": [[252, "ivy.log"], [581, "ivy.log"]], "log() (ivy.array method)": [[252, "ivy.Array.log"]], "log() (ivy.container method)": [[252, "ivy.Container.log"]], "log10() (in module ivy)": [[253, "ivy.log10"], [581, "ivy.log10"]], "log10() (ivy.array method)": [[253, "ivy.Array.log10"]], "log10() (ivy.container method)": [[253, "ivy.Container.log10"]], "log1p() (in module ivy)": [[254, "ivy.log1p"], [581, "ivy.log1p"]], "log1p() (ivy.array method)": [[254, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[254, "ivy.Container.log1p"]], "log2() (in module ivy)": [[255, "ivy.log2"], [581, "ivy.log2"]], "log2() (ivy.array method)": [[255, "ivy.Array.log2"]], "log2() (ivy.container method)": [[255, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[256, "ivy.logaddexp"], [581, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[256, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[256, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[257, "ivy.logaddexp2"], [581, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[257, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[257, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[258, "ivy.logical_and"], [581, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[258, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[258, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[259, "ivy.logical_not"], [581, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[259, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[259, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[260, "ivy.logical_or"], [581, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[260, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[260, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[261, "ivy.logical_xor"], [581, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[261, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[261, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[262, "ivy.maximum"], [581, "ivy.maximum"]], "maximum() (ivy.array method)": [[262, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[262, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[263, "ivy.minimum"], [581, "ivy.minimum"]], "minimum() (ivy.array method)": [[263, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[263, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[264, "ivy.multiply"], [581, "ivy.multiply"]], "multiply() (ivy.array method)": [[264, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[264, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[265, "ivy.nan_to_num"], [581, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[265, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[265, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[266, "ivy.negative"], [581, "ivy.negative"]], "negative() (ivy.array method)": [[266, "ivy.Array.negative"]], "negative() (ivy.container method)": [[266, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[267, "ivy.not_equal"], [581, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[267, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[267, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[268, "ivy.positive"], [581, "ivy.positive"]], "positive() (ivy.array method)": [[268, "ivy.Array.positive"]], "positive() (ivy.container method)": [[268, "ivy.Container.positive"]], "pow() (in module ivy)": [[269, "ivy.pow"], [581, "ivy.pow"]], "pow() (ivy.array method)": [[269, "ivy.Array.pow"]], "pow() (ivy.container method)": [[269, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[270, "ivy.rad2deg"], [581, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[270, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[270, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[271, "ivy.real"], [581, "ivy.real"]], "real() (ivy.array method)": [[271, "ivy.Array.real"]], "real() (ivy.container method)": [[271, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[272, "ivy.reciprocal"], [581, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[272, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[272, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[273, "ivy.remainder"], [581, "ivy.remainder"]], "remainder() (ivy.array method)": [[273, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[273, "ivy.Container.remainder"]], "round() (in module ivy)": [[274, "ivy.round"], [581, "ivy.round"]], "round() (ivy.array method)": [[274, "ivy.Array.round"]], "round() (ivy.container method)": [[274, "ivy.Container.round"]], "sign() (in module ivy)": [[275, "ivy.sign"], [581, "ivy.sign"]], "sign() (ivy.array method)": [[275, "ivy.Array.sign"]], "sign() (ivy.container method)": [[275, "ivy.Container.sign"]], "sin() (in module ivy)": [[276, "ivy.sin"], [581, "ivy.sin"]], "sin() (ivy.array method)": [[276, "ivy.Array.sin"]], "sin() (ivy.container method)": [[276, "ivy.Container.sin"]], "sinh() (in module ivy)": [[277, "ivy.sinh"], [581, "ivy.sinh"]], "sinh() (ivy.array method)": [[277, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[277, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[278, "ivy.sqrt"], [581, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[278, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[278, "ivy.Container.sqrt"]], "square() (in module ivy)": [[279, "ivy.square"], [581, "ivy.square"]], "square() (ivy.array method)": [[279, "ivy.Array.square"]], "square() (ivy.container method)": [[279, "ivy.Container.square"]], "subtract() (in module ivy)": [[280, "ivy.subtract"], [581, "ivy.subtract"]], "subtract() (ivy.array method)": [[280, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[280, "ivy.Container.subtract"]], "tan() (in module ivy)": [[281, "ivy.tan"], [581, "ivy.tan"]], "tan() (ivy.array method)": [[281, "ivy.Array.tan"]], "tan() (ivy.container method)": [[281, "ivy.Container.tan"]], "tanh() (in module ivy)": [[282, "ivy.tanh"], [581, "ivy.tanh"]], "tanh() (ivy.array method)": [[282, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[282, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[283, "ivy.trapz"], [581, "ivy.trapz"]], "trapz() (ivy.array method)": [[283, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[283, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[284, "ivy.trunc"], [581, "ivy.trunc"]], "trunc() (ivy.array method)": [[284, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[284, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[285, "ivy.trunc_divide"], [581, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[285, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[285, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[286, "ivy.elu"], [339, "ivy.elu"]], "elu() (ivy.array method)": [[286, "ivy.Array.elu"]], "elu() (ivy.container method)": [[286, "ivy.Container.elu"]], "logit() (in module ivy)": [[287, "ivy.logit"], [339, "ivy.logit"]], "logit() (ivy.array method)": [[287, "ivy.Array.logit"]], "logit() (ivy.container method)": [[287, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[288, "ivy.logsigmoid"], [339, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[288, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[288, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[289, "ivy.prelu"], [339, "ivy.prelu"]], "prelu() (ivy.array method)": [[289, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[289, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[290, "ivy.relu6"], [339, "ivy.relu6"]], "relu6() (ivy.array method)": [[290, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[290, "ivy.Container.relu6"]], "selu() (in module ivy)": [[291, "ivy.selu"], [339, "ivy.selu"]], "selu() (ivy.array method)": [[291, "ivy.Array.selu"]], "selu() (ivy.container method)": [[291, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[292, "ivy.sequence_length"], [339, "ivy.sequence_length"]], "silu() (in module ivy)": [[293, "ivy.silu"], [339, "ivy.silu"]], "silu() (ivy.array method)": [[293, "ivy.Array.silu"]], "silu() (ivy.container method)": [[293, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[294, "ivy.thresholded_relu"], [339, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[294, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[294, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[295, "ivy.blackman_window"], [341, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[295, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[295, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[296, "ivy.eye_like"], [341, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[296, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[296, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[297, "ivy.hamming_window"], [341, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[297, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[298, "ivy.hann_window"], [341, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[298, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[299, "ivy.indices"], [341, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[300, "ivy.kaiser_bessel_derived_window"], [341, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[300, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[301, "ivy.kaiser_window"], [341, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[301, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[302, "ivy.mel_weight_matrix"], [341, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[302, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[302, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[303, "ivy.ndenumerate"], [341, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[304, "ivy.ndindex"], [341, "ivy.ndindex"]], "random_cp() (in module ivy)": [[305, "ivy.random_cp"], [341, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[306, "ivy.random_tucker"], [341, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[307, "ivy.tril_indices"], [341, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[307, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[308, "ivy.trilu"], [341, "ivy.trilu"]], "trilu() (ivy.array method)": [[308, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[308, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[309, "ivy.unsorted_segment_min"], [341, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[309, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[309, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[310, "ivy.unsorted_segment_sum"], [341, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[310, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[310, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[311, "ivy.vorbis_window"], [341, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[311, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[312, "ivy.allclose"], [344, "ivy.allclose"]], "allclose() (ivy.array method)": [[312, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[312, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[313, "ivy.binarizer"], [344, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[313, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[313, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[314, "ivy.conj"], [344, "ivy.conj"]], "conj() (ivy.array method)": [[314, "ivy.Array.conj"]], "conj() (ivy.container method)": [[314, "ivy.Container.conj"]], "copysign() (in module ivy)": [[315, "ivy.copysign"], [344, "ivy.copysign"]], "copysign() (ivy.array method)": [[315, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[315, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[316, "ivy.count_nonzero"], [344, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[316, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[316, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[317, "ivy.diff"], [344, "ivy.diff"]], "diff() (ivy.array method)": [[317, "ivy.Array.diff"]], "diff() (ivy.container method)": [[317, "ivy.Container.diff"]], "digamma() (in module ivy)": [[318, "ivy.digamma"], [344, "ivy.digamma"]], "digamma() (ivy.array method)": [[318, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[318, "ivy.Container.digamma"]], "fix() (in module ivy)": [[319, "ivy.fix"], [344, "ivy.fix"]], "fix() (ivy.array method)": [[319, "ivy.Array.fix"]], "fix() (ivy.container method)": [[319, "ivy.Container.fix"]], "float_power() (in module ivy)": [[320, "ivy.float_power"], [344, "ivy.float_power"]], "float_power() (ivy.array method)": [[320, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[320, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[321, "ivy.fmax"], [344, "ivy.fmax"]], "fmax() (ivy.array method)": [[321, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[321, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[322, "ivy.frexp"], [344, "ivy.frexp"]], "frexp() (ivy.array method)": [[322, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[322, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[323, "ivy.gradient"], [344, "ivy.gradient"]], "gradient() (ivy.array method)": [[323, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[323, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[324, "ivy.hypot"], [344, "ivy.hypot"]], "hypot() (ivy.array method)": [[324, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[324, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[325, "ivy.isclose"], [344, "ivy.isclose"]], "isclose() (ivy.array method)": [[325, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[325, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[326, "ivy.ldexp"], [344, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[326, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[326, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[327, "ivy.lerp"], [344, "ivy.lerp"]], "lerp() (ivy.array method)": [[327, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[327, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[328, "ivy.lgamma"], [344, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[328, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[329, "ivy.modf"], [344, "ivy.modf"]], "modf() (ivy.array method)": [[329, "ivy.Array.modf"]], "modf() (ivy.container method)": [[329, "ivy.Container.modf"]], "nansum() (in module ivy)": [[330, "ivy.nansum"], [344, "ivy.nansum"]], "nansum() (ivy.array method)": [[330, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[330, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[331, "ivy.nextafter"], [344, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[331, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[331, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[332, "ivy.signbit"], [344, "ivy.signbit"]], "signbit() (ivy.array method)": [[332, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[332, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[333, "ivy.sinc"], [344, "ivy.sinc"]], "sinc() (ivy.array method)": [[333, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[333, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[334, "ivy.sparsify_tensor"], [344, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[334, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[334, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[335, "ivy.xlogy"], [344, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[335, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[335, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[336, "ivy.zeta"], [344, "ivy.zeta"]], "zeta() (ivy.array method)": [[336, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[336, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[337, "ivy.reduce"], [345, "ivy.reduce"]], "reduce() (ivy.array method)": [[337, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[337, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[338, "ivy.bind_custom_gradient_function"], [346, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[339, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[340, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[341, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[342, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[343, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[344, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[345, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[346, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[347, "ivy.adaptive_avg_pool1d"], [361, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[347, "ivy.adaptive_avg_pool2d"], [362, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[347, "ivy.adaptive_max_pool2d"], [363, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[347, "ivy.area_interpolate"], [364, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[347, "ivy.avg_pool1d"], [365, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[347, "ivy.avg_pool2d"], [366, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[347, "ivy.avg_pool3d"], [367, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[347, "ivy.dct"], [368, "ivy.dct"]], "dft() (in module ivy)": [[347, "ivy.dft"], [369, "ivy.dft"]], "dropout1d() (in module ivy)": [[347, "ivy.dropout1d"], [370, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[347, "ivy.dropout2d"], [371, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[347, "ivy.dropout3d"], [372, "ivy.dropout3d"]], "embedding() (in module ivy)": [[347, "ivy.embedding"], [373, "ivy.embedding"]], "fft() (in module ivy)": [[347, "ivy.fft"], [374, "ivy.fft"]], "fft2() (in module ivy)": [[347, "ivy.fft2"], [375, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[347, "ivy.generate_einsum_equation"], [376, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[347, "ivy.get_interpolate_kernel"], [377, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[347, "ivy.idct"], [378, "ivy.idct"]], "ifft() (in module ivy)": [[347, "ivy.ifft"], [379, "ivy.ifft"]], "ifftn() (in module ivy)": [[347, "ivy.ifftn"], [380, "ivy.ifftn"]], "interp() (in module ivy)": [[347, "ivy.interp"], [381, "ivy.interp"]], "interpolate() (in module ivy)": [[347, "ivy.interpolate"], [382, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[347, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[347, "ivy.max_pool1d"], [383, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[347, "ivy.max_pool2d"], [384, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[347, "ivy.max_pool3d"], [385, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[347, "ivy.max_unpool1d"], [386, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[347, "ivy.nearest_interpolate"], [387, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[347, "ivy.pool"], [388, "ivy.pool"]], "reduce_window() (in module ivy)": [[347, "ivy.reduce_window"], [389, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[347, "ivy.rfftn"], [390, "ivy.rfftn"]], "adjoint() (in module ivy)": [[348, "ivy.adjoint"], [391, "ivy.adjoint"]], "cond() (in module ivy)": [[348, "ivy.cond"], [392, "ivy.cond"]], "diagflat() (in module ivy)": [[348, "ivy.diagflat"], [393, "ivy.diagflat"]], "dot() (in module ivy)": [[348, "ivy.dot"], [394, "ivy.dot"]], "eig() (in module ivy)": [[348, "ivy.eig"], [395, "ivy.eig"], [586, "ivy.eig"], [618, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[348, "ivy.eigh_tridiagonal"], [396, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[348, "ivy.eigvals"], [397, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[348, "ivy.general_inner_product"], [398, "ivy.general_inner_product"]], "initialize_tucker() (in module ivy)": [[348, "ivy.initialize_tucker"], [399, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[348, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[348, "ivy.khatri_rao"], [400, "ivy.khatri_rao"]], "kron() (in module ivy)": [[348, "ivy.kron"], [401, "ivy.kron"]], "kronecker() (in module ivy)": [[348, "ivy.kronecker"], [402, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[348, "ivy.make_svd_non_negative"], [403, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[348, "ivy.matrix_exp"], [404, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[348, "ivy.mode_dot"], [405, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[348, "ivy.multi_dot"], [406, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[348, "ivy.multi_mode_dot"], [407, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[348, "ivy.partial_tucker"], [408, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[348, "ivy.svd_flip"], [409, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[348, "ivy.truncated_svd"], [410, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[348, "ivy.tucker"], [411, "ivy.tucker"]], "huber_loss() (in module ivy)": [[349, "ivy.huber_loss"], [412, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[349, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[349, "ivy.l1_loss"], [413, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[349, "ivy.log_poisson_loss"], [414, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[349, "ivy.smooth_l1_loss"], [415, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[349, "ivy.soft_margin_loss"], [416, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[350, "ivy.as_strided"], [417, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[350, "ivy.associative_scan"], [418, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[350, "ivy.atleast_1d"], [419, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[350, "ivy.atleast_2d"], [420, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[350, "ivy.atleast_3d"], [421, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[350, "ivy.broadcast_shapes"], [422, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[350, "ivy.choose"], [423, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[350, "ivy.concat_from_sequence"], [424, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[350, "ivy.dsplit"], [425, "ivy.dsplit"]], "dstack() (in module ivy)": [[350, "ivy.dstack"], [426, "ivy.dstack"]], "expand() (in module ivy)": [[350, "ivy.expand"], [427, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[350, "ivy.fill_diagonal"], [428, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[350, "ivy.flatten"], [429, "ivy.flatten"]], "fliplr() (in module ivy)": [[350, "ivy.fliplr"], [430, "ivy.fliplr"]], "flipud() (in module ivy)": [[350, "ivy.flipud"], [431, "ivy.flipud"]], "fold() (in module ivy)": [[350, "ivy.fold"], [432, "ivy.fold"]], "heaviside() (in module ivy)": [[350, "ivy.heaviside"], [433, "ivy.heaviside"]], "hsplit() (in module ivy)": [[350, "ivy.hsplit"], [434, "ivy.hsplit"]], "hstack() (in module ivy)": [[350, "ivy.hstack"], [435, "ivy.hstack"]], "i0() (in module ivy)": [[350, "ivy.i0"], [436, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[350, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[350, "ivy.matricize"], [437, "ivy.matricize"]], "moveaxis() (in module ivy)": [[350, "ivy.moveaxis"], [438, "ivy.moveaxis"]], "pad() (in module ivy)": [[350, "ivy.pad"], [439, "ivy.pad"]], "partial_fold() (in module ivy)": [[350, "ivy.partial_fold"], [440, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[350, "ivy.partial_tensor_to_vec"], [441, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[350, "ivy.partial_unfold"], [442, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[350, "ivy.partial_vec_to_tensor"], [443, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[350, "ivy.put_along_axis"], [444, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[350, "ivy.rot90"], [445, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[350, "ivy.soft_thresholding"], [446, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[350, "ivy.take_along_axis"], [447, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[350, "ivy.top_k"], [448, "ivy.top_k"]], "unfold() (in module ivy)": [[350, "ivy.unfold"], [449, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[350, "ivy.unique_consecutive"], [450, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[350, "ivy.vsplit"], [451, "ivy.vsplit"]], "vstack() (in module ivy)": [[350, "ivy.vstack"], [452, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[351, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[352, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[353, "ivy.batch_norm"], [453, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[353, "ivy.group_norm"], [454, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[353, "ivy.instance_norm"], [455, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[353, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[353, "ivy.l1_normalize"], [456, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[353, "ivy.l2_normalize"], [457, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[353, "ivy.lp_normalize"], [458, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[354, "ivy.bernoulli"], [459, "ivy.bernoulli"]], "beta() (in module ivy)": [[354, "ivy.beta"], [460, "ivy.beta"]], "dirichlet() (in module ivy)": [[354, "ivy.dirichlet"], [461, "ivy.dirichlet"]], "gamma() (in module ivy)": [[354, "ivy.gamma"], [462, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[354, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[354, "ivy.poisson"], [463, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[355, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[355, "ivy.unravel_index"], [464, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[356, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[357, "ivy.invert_permutation"], [465, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[357, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[357, "ivy.lexsort"], [466, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[358, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[358, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[358, "ivy.is_ivy_sparse_array"], [467, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[358, "ivy.is_native_sparse_array"], [468, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[358, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[358, "ivy.native_sparse_array"], [469, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[358, "ivy.native_sparse_array_to_indices_values_and_shape"], [470, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[359, "ivy.bincount"], [471, "ivy.bincount"]], "corrcoef() (in module ivy)": [[359, "ivy.corrcoef"], [472, "ivy.corrcoef"]], "cov() (in module ivy)": [[359, "ivy.cov"], [473, "ivy.cov"]], "cummax() (in module ivy)": [[359, "ivy.cummax"], [474, "ivy.cummax"]], "cummin() (in module ivy)": [[359, "ivy.cummin"], [475, "ivy.cummin"]], "histogram() (in module ivy)": [[359, "ivy.histogram"], [476, "ivy.histogram"]], "igamma() (in module ivy)": [[359, "ivy.igamma"], [477, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[359, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[359, "ivy.median"], [478, "ivy.median"]], "nanmean() (in module ivy)": [[359, "ivy.nanmean"], [479, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[359, "ivy.nanmedian"], [480, "ivy.nanmedian"]], "nanprod() (in module ivy)": [[359, "ivy.nanprod"], [481, "ivy.nanprod"]], "quantile() (in module ivy)": [[359, "ivy.quantile"], [482, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[360, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[360, "ivy.optional_get_element"], [483, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[361, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[361, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[362, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[362, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[363, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[363, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[365, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[365, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[366, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[366, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[367, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[367, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[368, "ivy.Array.dct"]], "dct() (ivy.container method)": [[368, "ivy.Container.dct"]], "dft() (ivy.array method)": [[369, "ivy.Array.dft"]], "dft() (ivy.container method)": [[369, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[370, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[370, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[371, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[371, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[372, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[372, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[373, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[373, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[374, "ivy.Array.fft"]], "fft() (ivy.container method)": [[374, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[375, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[378, "ivy.Array.idct"]], "idct() (ivy.container method)": [[378, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[379, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[379, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[380, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[380, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[382, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[382, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[383, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[383, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[384, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[384, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[385, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[385, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[389, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[389, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[390, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[390, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[391, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[391, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[392, "ivy.Array.cond"]], "cond() (ivy.container method)": [[392, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[393, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[393, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[394, "ivy.Array.dot"]], "dot() (ivy.container method)": [[394, "ivy.Container.dot"]], "eig() (ivy.array method)": [[395, "ivy.Array.eig"], [618, "ivy.Array.eig"]], "eig() (ivy.container method)": [[395, "ivy.Container.eig"], [618, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[396, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[396, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[397, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[397, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[398, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[398, "ivy.Container.general_inner_product"]], "initialize_tucker() (ivy.array method)": [[399, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[399, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[401, "ivy.Array.kron"]], "kron() (ivy.container method)": [[401, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[403, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[403, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[404, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[404, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[405, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[405, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[406, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[406, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[407, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[407, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[408, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[408, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[409, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[409, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[410, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[410, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[411, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[411, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[412, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[412, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[413, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[413, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[415, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[415, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[416, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[416, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[417, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[417, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[418, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[418, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[419, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[419, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[420, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[420, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[421, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[421, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[422, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[424, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[424, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[425, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[425, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[426, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[426, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[427, "ivy.Array.expand"]], "expand() (ivy.container method)": [[427, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[428, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[428, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[429, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[429, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[430, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[430, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[431, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[431, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[432, "ivy.Array.fold"]], "fold() (ivy.container method)": [[432, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[433, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[433, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[434, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[434, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[435, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[435, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[436, "ivy.Array.i0"]], "i0() (ivy.container method)": [[436, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[437, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[437, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[438, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[438, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[439, "ivy.Array.pad"]], "pad() (ivy.container method)": [[439, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[440, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[440, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[441, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[441, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[442, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[442, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[443, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[443, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[445, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[445, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[446, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[446, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[447, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[447, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[448, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[448, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[449, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[449, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[450, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[450, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[451, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[451, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[452, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[452, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[453, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[453, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[454, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[454, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[455, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[455, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[456, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[456, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[457, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[457, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[458, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[458, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[459, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[459, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[460, "ivy.Array.beta"]], "beta() (ivy.container method)": [[460, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[461, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[461, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[462, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[462, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[463, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[463, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[464, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[464, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[465, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[466, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[466, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[471, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[471, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[472, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[472, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[473, "ivy.Array.cov"]], "cov() (ivy.container method)": [[473, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[474, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[474, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[475, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[475, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[476, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[476, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[477, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[477, "ivy.Container.igamma"]], "median() (ivy.array method)": [[478, "ivy.Array.median"]], "median() (ivy.container method)": [[478, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[479, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[479, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[480, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[480, "ivy.Container.nanmedian"]], "nanprod() (ivy.array method)": [[481, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[481, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[482, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[482, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[483, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[483, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[484, "ivy.all_equal"], [583, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[484, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[484, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[485, "ivy.arg_info"], [583, "ivy.arg_info"]], "arg_names() (in module ivy)": [[486, "ivy.arg_names"], [583, "ivy.arg_names"]], "array_equal() (in module ivy)": [[487, "ivy.array_equal"], [583, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[487, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[487, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[488, "ivy.assert_supports_inplace"], [583, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[488, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[488, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[489, "ivy.cache_fn"], [583, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[490, "ivy.clip_matrix_norm"], [583, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[490, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[490, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[491, "ivy.clip_vector_norm"], [583, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[491, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[491, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[492, "ivy.container_types"], [583, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[493, "ivy.current_backend_str"], [583, "ivy.current_backend_str"]], "default() (in module ivy)": [[494, "ivy.default"], [583, "ivy.default"]], "default() (ivy.array method)": [[494, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[495, "ivy.einops_rearrange"], [583, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[495, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[495, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[496, "ivy.einops_reduce"], [583, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[496, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[496, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[497, "ivy.einops_repeat"], [583, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[497, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[497, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[498, "ivy.exists"], [583, "ivy.exists"]], "exists() (ivy.array method)": [[498, "ivy.Array.exists"]], "exists() (ivy.container method)": [[498, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[499, "ivy.fourier_encode"], [583, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[499, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[499, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[500, "ivy.function_supported_devices_and_dtypes"], [583, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[501, "ivy.function_unsupported_devices_and_dtypes"], [583, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[502, "ivy.gather"], [583, "ivy.gather"]], "gather() (ivy.array method)": [[502, "ivy.Array.gather"]], "gather() (ivy.container method)": [[502, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[503, "ivy.gather_nd"], [583, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[503, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[503, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[504, "ivy.get_all_arrays_in_memory"], [583, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[505, "ivy.get_item"], [583, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[506, "ivy.get_num_dims"], [583, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[506, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[506, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[507, "ivy.get_referrers_recursive"], [583, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[508, "ivy.has_nans"], [583, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[508, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[508, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[509, "ivy.inplace_arrays_supported"], [583, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[510, "ivy.inplace_decrement"], [583, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[510, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[510, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[511, "ivy.inplace_increment"], [583, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[511, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[511, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[512, "ivy.inplace_update"], [583, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[512, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[512, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[513, "ivy.inplace_variables_supported"], [583, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[514, "ivy.is_array"], [583, "ivy.is_array"]], "is_array() (ivy.array method)": [[514, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[514, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[515, "ivy.is_ivy_array"], [583, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[515, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[515, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[516, "ivy.is_ivy_container"], [583, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[516, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[517, "ivy.is_ivy_nested_array"], [583, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[518, "ivy.is_native_array"], [583, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[518, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[518, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[519, "ivy.isin"], [583, "ivy.isin"]], "isin() (ivy.array method)": [[519, "ivy.Array.isin"]], "isin() (ivy.container method)": [[519, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[520, "ivy.isscalar"], [583, "ivy.isscalar"]], "itemsize() (in module ivy)": [[521, "ivy.itemsize"], [583, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[521, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[521, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[522, "ivy.match_kwargs"], [583, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[523, "ivy.multiprocessing"], [583, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[524, "ivy.num_arrays_in_memory"], [583, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[525, "ivy.print_all_arrays_in_memory"], [583, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[526, "ivy.scatter_flat"], [583, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[526, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[526, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[527, "ivy.scatter_nd"], [583, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[527, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[527, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[528, "ivy.set_array_mode"], [583, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[529, "ivy.set_exception_trace_mode"], [583, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[530, "ivy.set_inplace_mode"], [583, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[531, "ivy.set_item"], [583, "ivy.set_item"]], "set_min_base() (in module ivy)": [[532, "ivy.set_min_base"], [583, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[533, "ivy.set_min_denominator"], [583, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[534, "ivy.set_nestable_mode"], [583, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[535, "ivy.set_precise_mode"], [583, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[536, "ivy.set_queue_timeout"], [583, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[537, "ivy.set_shape_array_mode"], [583, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[538, "ivy.set_show_func_wrapper_trace_mode"], [583, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[539, "ivy.set_tmp_dir"], [583, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[540, "ivy.shape"], [583, "ivy.shape"]], "shape() (ivy.array method)": [[540, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[541, "ivy.stable_divide"], [583, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[541, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[541, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[542, "ivy.stable_pow"], [583, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[542, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[542, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[543, "ivy.strides"], [583, "ivy.strides"]], "strides() (ivy.array method)": [[543, "ivy.Array.strides"]], "strides() (ivy.container method)": [[543, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[544, "ivy.supports_inplace_updates"], [583, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[544, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[544, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[545, "ivy.to_ivy_shape"], [583, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[546, "ivy.to_list"], [583, "ivy.to_list"]], "to_list() (ivy.array method)": [[546, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[546, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[547, "ivy.to_native_shape"], [583, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[548, "ivy.to_numpy"], [583, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[548, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[548, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[549, "ivy.to_scalar"], [583, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[549, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[549, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[550, "ivy.try_else_none"], [583, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[551, "ivy.unset_array_mode"], [583, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[552, "ivy.unset_exception_trace_mode"], [583, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[553, "ivy.unset_inplace_mode"], [583, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[554, "ivy.unset_min_base"], [583, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[555, "ivy.unset_min_denominator"], [583, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[556, "ivy.unset_nestable_mode"], [583, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[557, "ivy.unset_precise_mode"], [583, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[558, "ivy.unset_queue_timeout"], [583, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[559, "ivy.unset_shape_array_mode"], [583, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[560, "ivy.unset_show_func_wrapper_trace_mode"], [583, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[561, "ivy.unset_tmp_dir"], [583, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[562, "ivy.value_is_nan"], [583, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[562, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[562, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[563, "ivy.vmap"], [583, "ivy.vmap"]], "adam_step() (in module ivy)": [[564, "ivy.adam_step"], [584, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[564, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[564, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[565, "ivy.adam_update"], [584, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[565, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[565, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[566, "ivy.execute_with_gradients"], [584, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[567, "ivy.grad"], [584, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[568, "ivy.gradient_descent_update"], [584, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[568, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[568, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[569, "ivy.jac"], [584, "ivy.jac"]], "lamb_update() (in module ivy)": [[570, "ivy.lamb_update"], [584, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[570, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[570, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[571, "ivy.lars_update"], [584, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[571, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[571, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[572, "ivy.optimizer_update"], [584, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[572, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[572, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[573, "ivy.stop_gradient"], [584, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[573, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[573, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[574, "ivy.value_and_grad"], [584, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[575, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[576, "ivy.e"]], "inf (in module ivy)": [[576, "ivy.inf"]], "ivy.functional.ivy.constants": [[576, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[576, "ivy.nan"]], "newaxis (in module ivy)": [[576, "ivy.newaxis"]], "pi (in module ivy)": [[576, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[577, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[578, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[578, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[579, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[579, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[579, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[579, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[579, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[579, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[580, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[580, "ivy.Profiler"]], "ivy.functional.ivy.device": [[580, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[581, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[582, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[583, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[583, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[583, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[584, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[585, "ivy.conv"], [598, "ivy.conv"]], "conv1d() (in module ivy)": [[585, "ivy.conv1d"], [599, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[585, "ivy.conv1d_transpose"], [600, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[585, "ivy.conv2d"], [601, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[585, "ivy.conv2d_transpose"], [602, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[585, "ivy.conv3d"], [603, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[585, "ivy.conv3d_transpose"], [604, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[585, "ivy.conv_general_dilated"], [605, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[585, "ivy.conv_general_transpose"], [606, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[585, "ivy.depthwise_conv2d"], [607, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[585, "ivy.dropout"], [608, "ivy.dropout"]], "ivy.functional.ivy.layers": [[585, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[585, "ivy.linear"], [609, "ivy.linear"]], "lstm_update() (in module ivy)": [[585, "ivy.lstm_update"], [610, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[585, "ivy.multi_head_attention"], [611, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[585, "ivy.scaled_dot_product_attention"], [612, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[586, "ivy.cholesky"], [613, "ivy.cholesky"]], "cross() (in module ivy)": [[586, "ivy.cross"], [614, "ivy.cross"]], "det() (in module ivy)": [[586, "ivy.det"], [615, "ivy.det"]], "diag() (in module ivy)": [[586, "ivy.diag"], [616, "ivy.diag"]], "diagonal() (in module ivy)": [[586, "ivy.diagonal"], [617, "ivy.diagonal"]], "eigh() (in module ivy)": [[586, "ivy.eigh"], [619, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[586, "ivy.eigvalsh"], [620, "ivy.eigvalsh"]], "inner() (in module ivy)": [[586, "ivy.inner"], [621, "ivy.inner"]], "inv() (in module ivy)": [[586, "ivy.inv"], [622, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[586, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[586, "ivy.lu_factor"], [623, "ivy.lu_factor"]], "matmul() (in module ivy)": [[586, "ivy.matmul"], [624, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[586, "ivy.matrix_norm"], [625, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[586, "ivy.matrix_power"], [626, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[586, "ivy.matrix_rank"], [627, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[586, "ivy.matrix_transpose"], [628, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[586, "ivy.outer"], [629, "ivy.outer"]], "pinv() (in module ivy)": [[586, "ivy.pinv"], [630, "ivy.pinv"]], "qr() (in module ivy)": [[586, "ivy.qr"], [631, "ivy.qr"]], "slogdet() (in module ivy)": [[586, "ivy.slogdet"], [632, "ivy.slogdet"]], "solve() (in module ivy)": [[586, "ivy.solve"], [633, "ivy.solve"]], "svd() (in module ivy)": [[586, "ivy.svd"], [634, "ivy.svd"]], "svdvals() (in module ivy)": [[586, "ivy.svdvals"], [635, "ivy.svdvals"]], "tensordot() (in module ivy)": [[586, "ivy.tensordot"], [636, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[586, "ivy.tensorsolve"], [637, "ivy.tensorsolve"]], "trace() (in module ivy)": [[586, "ivy.trace"], [638, "ivy.trace"]], "vander() (in module ivy)": [[586, "ivy.vander"], [639, "ivy.vander"]], "vecdot() (in module ivy)": [[586, "ivy.vecdot"], [640, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[586, "ivy.vector_norm"], [641, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[586, "ivy.vector_to_skew_symmetric_matrix"], [642, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[587, "ivy.binary_cross_entropy"], [643, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[587, "ivy.cross_entropy"], [644, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[587, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[587, "ivy.sparse_cross_entropy"], [645, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[588, "ivy.clip"], [646, "ivy.clip"]], "concat() (in module ivy)": [[588, "ivy.concat"], [647, "ivy.concat"]], "constant_pad() (in module ivy)": [[588, "ivy.constant_pad"], [648, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[588, "ivy.expand_dims"], [649, "ivy.expand_dims"]], "flip() (in module ivy)": [[588, "ivy.flip"], [650, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[588, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[588, "ivy.permute_dims"], [651, "ivy.permute_dims"]], "repeat() (in module ivy)": [[588, "ivy.repeat"], [652, "ivy.repeat"]], "reshape() (in module ivy)": [[588, "ivy.reshape"], [653, "ivy.reshape"]], "roll() (in module ivy)": [[588, "ivy.roll"], [654, "ivy.roll"]], "split() (in module ivy)": [[588, "ivy.split"], [655, "ivy.split"]], "squeeze() (in module ivy)": [[588, "ivy.squeeze"], [656, "ivy.squeeze"]], "stack() (in module ivy)": [[588, "ivy.stack"], [657, "ivy.stack"]], "swapaxes() (in module ivy)": [[588, "ivy.swapaxes"], [658, "ivy.swapaxes"]], "tile() (in module ivy)": [[588, "ivy.tile"], [659, "ivy.tile"]], "unstack() (in module ivy)": [[588, "ivy.unstack"], [660, "ivy.unstack"]], "zero_pad() (in module ivy)": [[588, "ivy.zero_pad"], [661, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[589, "ivy.fomaml_step"], [662, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[589, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[589, "ivy.maml_step"], [663, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[589, "ivy.reptile_step"], [664, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[590, "ivy.all_nested_indices"], [665, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[590, "ivy.copy_nest"], [666, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[590, "ivy.duplicate_array_index_chains"], [667, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[590, "ivy.index_nest"], [668, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[590, "ivy.insert_into_nest_at_index"], [669, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[590, "ivy.insert_into_nest_at_indices"], [670, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[590, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[590, "ivy.map"], [671, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[590, "ivy.map_nest_at_index"], [672, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[590, "ivy.map_nest_at_indices"], [673, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[590, "ivy.multi_index_nest"], [674, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[590, "ivy.nested_any"], [675, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[590, "ivy.nested_argwhere"], [676, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[590, "ivy.nested_map"], [677, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[590, "ivy.nested_multi_map"], [678, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[590, "ivy.prune_empty"], [679, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[590, "ivy.prune_nest_at_index"], [680, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[590, "ivy.prune_nest_at_indices"], [681, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[590, "ivy.set_nest_at_index"], [682, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[590, "ivy.set_nest_at_indices"], [683, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[591, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[591, "ivy.layer_norm"], [684, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[592, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[592, "ivy.multinomial"], [685, "ivy.multinomial"]], "randint() (in module ivy)": [[592, "ivy.randint"], [686, "ivy.randint"]], "random_normal() (in module ivy)": [[592, "ivy.random_normal"], [687, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[592, "ivy.random_uniform"], [688, "ivy.random_uniform"]], "seed() (in module ivy)": [[592, "ivy.seed"], [689, "ivy.seed"]], "shuffle() (in module ivy)": [[592, "ivy.shuffle"], [690, "ivy.shuffle"]], "argmax() (in module ivy)": [[593, "ivy.argmax"], [691, "ivy.argmax"]], "argmin() (in module ivy)": [[593, "ivy.argmin"], [692, "ivy.argmin"]], "argwhere() (in module ivy)": [[593, "ivy.argwhere"], [693, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[593, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[593, "ivy.nonzero"], [694, "ivy.nonzero"]], "where() (in module ivy)": [[593, "ivy.where"], [695, "ivy.where"]], "ivy.functional.ivy.set": [[594, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[594, "ivy.unique_all"], [696, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[594, "ivy.unique_counts"], [697, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[594, "ivy.unique_inverse"], [698, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[594, "ivy.unique_values"], [699, "ivy.unique_values"]], "argsort() (in module ivy)": [[595, "ivy.argsort"], [700, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[595, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[595, "ivy.msort"], [701, "ivy.msort"]], "searchsorted() (in module ivy)": [[595, "ivy.searchsorted"], [702, "ivy.searchsorted"]], "sort() (in module ivy)": [[595, "ivy.sort"], [703, "ivy.sort"]], "cumprod() (in module ivy)": [[596, "ivy.cumprod"], [704, "ivy.cumprod"]], "cumsum() (in module ivy)": [[596, "ivy.cumsum"], [705, "ivy.cumsum"]], "einsum() (in module ivy)": [[596, "ivy.einsum"], [706, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[596, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[596, "ivy.max"], [707, "ivy.max"]], "mean() (in module ivy)": [[596, "ivy.mean"], [708, "ivy.mean"]], "min() (in module ivy)": [[596, "ivy.min"], [709, "ivy.min"]], "prod() (in module ivy)": [[596, "ivy.prod"], [710, "ivy.prod"]], "std() (in module ivy)": [[596, "ivy.std"], [711, "ivy.std"]], "sum() (in module ivy)": [[596, "ivy.sum"], [712, "ivy.sum"]], "var() (in module ivy)": [[596, "ivy.var"], [713, "ivy.var"]], "all() (in module ivy)": [[597, "ivy.all"], [714, "ivy.all"]], "any() (in module ivy)": [[597, "ivy.any"], [715, "ivy.any"]], "ivy.functional.ivy.utility": [[597, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[597, "ivy.load"], [716, "ivy.load"]], "save() (in module ivy)": [[597, "ivy.save"], [717, "ivy.save"]], "conv1d() (ivy.array method)": [[599, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[599, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[600, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[600, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[601, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[601, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[602, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[602, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[603, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[603, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[604, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[604, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[607, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[607, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[608, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[608, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[609, "ivy.Array.linear"]], "linear() (ivy.container method)": [[609, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[610, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[610, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[611, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[611, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[612, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[612, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[613, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[613, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[614, "ivy.Array.cross"]], "cross() (ivy.container method)": [[614, "ivy.Container.cross"]], "det() (ivy.array method)": [[615, "ivy.Array.det"]], "det() (ivy.container method)": [[615, "ivy.Container.det"]], "diag() (ivy.array method)": [[616, "ivy.Array.diag"]], "diag() (ivy.container method)": [[616, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[617, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[617, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[619, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[619, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[620, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[620, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[621, "ivy.Array.inner"]], "inner() (ivy.container method)": [[621, "ivy.Container.inner"]], "inv() (ivy.array method)": [[622, "ivy.Array.inv"]], "inv() (ivy.container method)": [[622, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[624, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[624, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[625, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[625, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[626, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[626, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[627, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[627, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[628, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[628, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[629, "ivy.Array.outer"]], "outer() (ivy.container method)": [[629, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[630, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[630, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[631, "ivy.Array.qr"]], "qr() (ivy.container method)": [[631, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[632, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[632, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[633, "ivy.Array.solve"]], "solve() (ivy.container method)": [[633, "ivy.Container.solve"]], "svd() (ivy.array method)": [[634, "ivy.Array.svd"]], "svd() (ivy.container method)": [[634, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[635, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[635, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[636, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[636, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[637, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[637, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[638, "ivy.Array.trace"]], "trace() (ivy.container method)": [[638, "ivy.Container.trace"]], "vander() (ivy.array method)": [[639, "ivy.Array.vander"]], "vander() (ivy.container method)": [[639, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[640, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[640, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[641, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[641, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[642, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[642, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[643, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[643, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[644, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[644, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[645, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[645, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[646, "ivy.Array.clip"]], "clip() (ivy.container method)": [[646, "ivy.Container.clip"]], "concat() (ivy.array method)": [[647, "ivy.Array.concat"]], "concat() (ivy.container method)": [[647, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[648, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[648, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[649, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[649, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[650, "ivy.Array.flip"]], "flip() (ivy.container method)": [[650, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[651, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[651, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[652, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[652, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[653, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[653, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[654, "ivy.Array.roll"]], "roll() (ivy.container method)": [[654, "ivy.Container.roll"]], "split() (ivy.array method)": [[655, "ivy.Array.split"]], "split() (ivy.container method)": [[655, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[656, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[656, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[657, "ivy.Array.stack"]], "stack() (ivy.container method)": [[657, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[658, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[658, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[659, "ivy.Array.tile"]], "tile() (ivy.container method)": [[659, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[660, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[660, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[661, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[661, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[684, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[684, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[685, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[685, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[686, "ivy.Array.randint"]], "randint() (ivy.container method)": [[686, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[687, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[687, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[688, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[688, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[690, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[690, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[691, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[691, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[692, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[692, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[693, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[693, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[694, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[694, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[695, "ivy.Array.where"]], "where() (ivy.container method)": [[695, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[696, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[696, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[697, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[697, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[698, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[698, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[699, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[699, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[700, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[700, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[701, "ivy.Array.msort"]], "msort() (ivy.container method)": [[701, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[702, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[702, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[703, "ivy.Array.sort"]], "sort() (ivy.container method)": [[703, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[704, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[704, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[705, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[705, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[706, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[706, "ivy.Container.einsum"]], "max() (ivy.array method)": [[707, "ivy.Array.max"]], "max() (ivy.container method)": [[707, "ivy.Container.max"]], "mean() (ivy.array method)": [[708, "ivy.Array.mean"]], "mean() (ivy.container method)": [[708, "ivy.Container.mean"]], "min() (ivy.array method)": [[709, "ivy.Array.min"]], "min() (ivy.container method)": [[709, "ivy.Container.min"]], "prod() (ivy.array method)": [[710, "ivy.Array.prod"]], "prod() (ivy.container method)": [[710, "ivy.Container.prod"]], "std() (ivy.array method)": [[711, "ivy.Array.std"]], "std() (ivy.container method)": [[711, "ivy.Container.std"]], "sum() (ivy.array method)": [[712, "ivy.Array.sum"]], "sum() (ivy.container method)": [[712, "ivy.Container.sum"]], "var() (ivy.array method)": [[713, "ivy.Array.var"]], "var() (ivy.container method)": [[713, "ivy.Container.var"]], "all() (ivy.array method)": [[714, "ivy.Array.all"]], "all() (ivy.container method)": [[714, "ivy.Container.all"]], "any() (ivy.array method)": [[715, "ivy.Array.any"]], "any() (ivy.container method)": [[715, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[720, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[720, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[720, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[720, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[720, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[720, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[720, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[720, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[720, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[720, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[720, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[720, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[720, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[720, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[720, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[720, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[720, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[720, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[720, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[720, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[721, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[721, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[721, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[721, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[721, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[721, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[721, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[721, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[722, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[722, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[722, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[723, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[723, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[723, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[723, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[723, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[723, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[723, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[723, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[723, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[723, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[723, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[723, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[723, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[723, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[723, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[723, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[724, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[724, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[724, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[724, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[724, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[724, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[724, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[724, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[724, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[724, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[724, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[724, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[724, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[724, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[724, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[724, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[724, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[724, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[724, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[724, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[724, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[724, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[724, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[724, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[724, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[724, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[725, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[725, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[725, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[725, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[725, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[725, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[725, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[726, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[726, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[726, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[726, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[726, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[726, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[726, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[727, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[727, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[727, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[727, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[727, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[728, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[728, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[728, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[728, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[728, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[728, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[728, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[728, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[728, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[728, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[728, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[728, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[728, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[728, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[728, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[728, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[728, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[728, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[728, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[728, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[728, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[729, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[729, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[729, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[730, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[730, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[731, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[732, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[732, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[732, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[732, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[732, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[732, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[732, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[732, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[732, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[732, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[732, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[733, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[733, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[733, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[734, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[734, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[734, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[734, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[734, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[734, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[735, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[735, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[736, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[736, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[737, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[737, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[737, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[737, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[737, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[737, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[737, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[737, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[737, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[737, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[737, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[737, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[737, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[737, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[737, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[737, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[737, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[737, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[737, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[737, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[737, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[737, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[737, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[737, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[737, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[737, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[738, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[738, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[738, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[739, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[739, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[739, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[740, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[740, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[740, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[740, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[740, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[741, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[741, "module-ivy.utils.verbosity"]], "automatic code conversions": [[783, "term-Automatic-Code-Conversions"]], "backend handler": [[783, "term-Backend-Handler"]], "compositional functions": [[783, "term-Compositional-Functions"]], "convenience functions": [[783, "term-Convenience-Functions"]], "framework": [[783, "term-Framework"]], "framework handler": [[783, "term-Framework-Handler"]], "graph compiler": [[783, "term-Graph-Compiler"]], "ivy array": [[783, "term-Ivy-Array"]], "ivy backends": [[783, "term-Ivy-Backends"]], "ivy compiler": [[783, "term-Ivy-Compiler"]], "ivy container": [[783, "term-Ivy-Container"]], "ivy frontends": [[783, "term-Ivy-Frontends"]], "ivy functional api": [[783, "term-Ivy-Functional-API"]], "ivy graph compiler": [[783, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[783, "term-Ivy-Transpiler"]], "mixed functions": [[783, "term-Mixed-Functions"]], "native array": [[783, "term-Native-Array"]], "nestable functions": [[783, "term-Nestable-Functions"]], "pipeline": [[783, "term-Pipeline"]], "primary functions": [[783, "term-Primary-Functions"]], "standalone functions": [[783, "term-Standalone-Functions"]], "submodule helper functions": [[783, "term-Submodule-Helper-Functions"]], "built-in function": [[789, "ivy.compile"], [790, "ivy.transpile"], [790, "ivy.unify"]], "ivy.compile()": [[789, "ivy.compile"]], "ivy.transpile()": [[790, "ivy.transpile"]], "ivy.unify()": [[790, "ivy.unify"]]}})