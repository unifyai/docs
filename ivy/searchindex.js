Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/ivy.stateful", "docs/ivy.utils", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cast_bool.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.sequence_length.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cast_bool", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "sequence_length", "silu", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "random_cp", "random_tucker", "tril_indices", "trilu", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "initialize_tucker", "khatri_rao", "kron", "kronecker", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "svd_flip", "truncated_svd", "tucker", "huber_loss", "l1_loss", "log_poisson_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "choose", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take_along_axis", "top_k", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Framework classes", "Utils", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Einsum parser", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 701, 716, 739], "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 88, 89, 91, 93, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 126, 127, 128, 131, 132, 134, 135, 137, 138, 139, 140, 146, 147, 148, 149, 150, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 361, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 397, 400, 401, 406, 407, 409, 410, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 483, 485, 488, 489, 492, 494, 495, 498, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 690, 695, 698, 704, 705, 706, 708, 709, 710, 711, 712, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 740, 741, 742, 745, 746, 747, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "transpil": [0, 1, 714, 728, 735, 741, 742, 743, 751, 752, 757, 763, 764], "ar": [0, 1, 2, 4, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 49, 51, 52, 76, 91, 93, 96, 101, 155, 160, 162, 167, 191, 193, 194, 197, 201, 222, 223, 227, 232, 233, 237, 239, 244, 245, 246, 270, 272, 273, 275, 276, 278, 279, 280, 282, 283, 288, 293, 296, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 325, 326, 332, 333, 334, 335, 338, 343, 345, 353, 358, 359, 361, 369, 370, 371, 373, 374, 377, 381, 382, 383, 391, 392, 393, 395, 401, 404, 406, 408, 415, 417, 421, 422, 423, 424, 425, 435, 440, 441, 442, 443, 444, 446, 449, 450, 451, 466, 471, 475, 486, 487, 496, 506, 518, 528, 540, 542, 543, 545, 546, 547, 548, 550, 552, 554, 555, 556, 570, 571, 573, 574, 576, 580, 581, 582, 586, 587, 589, 592, 596, 597, 601, 602, 603, 608, 609, 612, 616, 618, 628, 633, 638, 639, 640, 648, 649, 650, 653, 654, 655, 656, 658, 660, 684, 685, 688, 691, 692, 698, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764], "publicli": [0, 2], "avail": [0, 2, 10, 33, 150, 156, 158, 159, 170, 313, 406, 458, 542, 545, 704, 706, 715, 716, 722, 723, 724, 725, 727, 728, 735, 737, 740, 750, 751, 762, 763], "yet": [0, 2, 303, 305, 306, 314, 315, 319, 714, 715, 750], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 307, 320, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 547, 552, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 592, 593, 594, 596, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 704, 706, 707, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 750, 757, 758, 759, 761], "certain": [0, 1, 2, 26, 76, 92, 93, 540, 715, 716, 718, 724, 731, 737, 740, 750, 761], "part": [0, 2, 5, 8, 9, 31, 32, 37, 51, 61, 64, 67, 99, 100, 101, 207, 211, 234, 270, 271, 292, 304, 307, 311, 313, 322, 359, 401, 444, 537, 540, 543, 548, 581, 582, 687, 688, 704, 710, 714, 716, 718, 721, 724, 729, 731, 734, 735, 737, 738, 740, 742, 743, 747, 749, 750, 755, 757, 762, 763, 764], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 119, 122, 125, 126, 127, 129, 133, 134, 148, 151, 161, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 346, 347, 348, 349, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 492, 498, 503, 504, 505, 506, 508, 510, 511, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 629, 631, 633, 634, 639, 640, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "doc": [0, 2, 32, 101, 270, 304, 437, 540, 704, 709, 713, 714, 717, 726, 727, 729, 730, 737, 742, 745, 746], "won": [0, 2, 707, 708, 715, 716, 722, 724, 747, 751], "t": [0, 1, 2, 9, 13, 24, 32, 36, 47, 49, 51, 286, 301, 307, 309, 311, 359, 474, 492, 506, 528, 545, 546, 547, 552, 571, 572, 635, 686, 704, 707, 708, 710, 711, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 729, 731, 732, 733, 734, 737, 738, 740, 742, 744, 745, 746, 747, 750, 751, 755, 757, 759], "work": [0, 1, 2, 9, 32, 49, 322, 444, 552, 634, 635, 639, 644, 645, 704, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 734, 735, 736, 737, 738, 741, 742, 744, 746, 747, 751, 755, 757, 759, 761, 764], "expect": [0, 2, 9, 14, 15, 32, 38, 133, 201, 245, 310, 332, 353, 448, 541, 543, 545, 549, 591, 605, 684, 685, 686, 688, 704, 708, 715, 716, 718, 724, 725, 728, 729, 732, 734, 736, 737, 740, 750, 751], "now": [0, 2, 686, 687, 688, 704, 708, 715, 718, 719, 720, 721, 722, 723, 724, 725, 730, 732, 735, 736, 737, 738, 740, 744, 745, 747, 749, 750, 757], "when": [0, 1, 2, 4, 5, 6, 8, 9, 14, 15, 18, 19, 22, 26, 28, 29, 31, 32, 37, 38, 41, 42, 45, 52, 96, 106, 177, 194, 199, 201, 217, 227, 232, 245, 246, 250, 302, 310, 311, 313, 316, 317, 322, 332, 345, 359, 361, 370, 373, 406, 415, 417, 422, 442, 444, 474, 490, 498, 504, 540, 541, 543, 545, 547, 548, 549, 550, 552, 554, 555, 558, 560, 573, 589, 594, 605, 606, 607, 615, 627, 628, 637, 638, 639, 648, 649, 650, 653, 654, 656, 657, 669, 671, 673, 675, 684, 685, 686, 687, 688, 689, 695, 706, 707, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 747, 750, 755, 757, 760, 761, 762, 763], "we": [0, 1, 2, 9, 14, 15, 16, 24, 32, 37, 38, 47, 49, 67, 301, 309, 313, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 410, 413, 457, 467, 506, 528, 529, 531, 536, 537, 545, 546, 548, 549, 550, 589, 605, 611, 612, 613, 615, 617, 618, 620, 622, 684, 688, 695, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 757, 758, 762, 763], "call": [0, 2, 9, 24, 29, 32, 47, 49, 52, 72, 126, 127, 167, 311, 322, 368, 442, 492, 498, 512, 528, 529, 531, 539, 542, 545, 546, 548, 552, 594, 627, 633, 637, 638, 684, 686, 687, 688, 690, 695, 704, 707, 714, 716, 719, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 750, 757, 758, 761], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 119, 122, 125, 129, 133, 134, 164, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 259, 260, 262, 263, 264, 266, 267, 270, 271, 272, 273, 274, 277, 280, 282, 287, 291, 296, 302, 304, 307, 310, 311, 312, 313, 316, 317, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 341, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 360, 376, 380, 381, 382, 383, 386, 387, 389, 396, 400, 401, 406, 407, 412, 413, 415, 416, 417, 421, 422, 424, 427, 428, 433, 434, 435, 436, 437, 438, 439, 442, 445, 450, 452, 453, 461, 464, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 483, 489, 492, 493, 502, 506, 510, 511, 512, 525, 528, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 633, 646, 648, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 704, 707, 708, 710, 712, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 757, 758, 760, 761, 763, 764], "ivi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 715, 717, 718, 720, 722, 724, 725, 727, 729, 730, 731, 732, 734, 740, 741, 748, 750, 751, 752, 753, 764], "function": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 119, 120, 121, 122, 125, 126, 127, 129, 133, 134, 151, 153, 154, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 319, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 349, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 484, 487, 488, 489, 492, 493, 496, 498, 500, 503, 504, 505, 506, 508, 510, 511, 512, 518, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 631, 633, 634, 635, 637, 638, 639, 640, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 685, 688, 695, 700, 704, 706, 712, 715, 716, 717, 718, 719, 720, 721, 723, 726, 727, 734, 741, 743, 744, 745, 746, 748, 749, 752, 754, 755, 756, 757, 758, 763, 764], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 146, 148, 150, 151, 153, 154, 156, 158, 161, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 341, 343, 345, 346, 347, 348, 349, 352, 353, 356, 357, 358, 359, 361, 362, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 381, 382, 383, 386, 387, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 484, 485, 488, 489, 490, 492, 498, 502, 503, 504, 506, 508, 510, 511, 512, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 698, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "alwai": [0, 5, 6, 9, 10, 16, 28, 29, 32, 39, 59, 78, 106, 177, 227, 283, 307, 311, 313, 371, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 467, 474, 537, 541, 543, 545, 550, 611, 612, 613, 615, 617, 618, 620, 622, 704, 714, 715, 716, 719, 720, 722, 724, 727, 729, 730, 731, 734, 735, 736, 737, 738, 740, 742, 750], "small": [0, 2, 8, 9, 14, 17, 31, 32, 37, 40, 194, 201, 227, 228, 275, 288, 307, 311, 316, 365, 415, 416, 417, 543, 548, 553, 589, 592, 594, 646, 685, 689, 704, 715, 723, 726, 731, 736, 740, 742, 746, 750, 758], "perform": [0, 2, 5, 9, 13, 14, 22, 23, 28, 32, 33, 36, 37, 45, 46, 62, 66, 92, 93, 164, 172, 194, 227, 248, 280, 300, 307, 308, 310, 311, 313, 320, 322, 332, 333, 334, 335, 337, 338, 342, 343, 351, 370, 380, 428, 436, 437, 457, 458, 459, 472, 473, 474, 490, 500, 537, 540, 542, 543, 545, 547, 548, 551, 552, 558, 559, 570, 572, 596, 598, 603, 624, 625, 626, 634, 635, 666, 667, 676, 677, 686, 708, 718, 719, 720, 722, 724, 725, 726, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 745, 750, 754, 757, 758, 759, 760, 761, 762, 764], "hit": [0, 737, 742], "due": [0, 2, 227, 237, 543, 707, 710, 715, 718, 723, 728, 734, 735, 757], "ad": [0, 9, 16, 32, 39, 47, 194, 227, 275, 288, 307, 316, 415, 416, 417, 503, 504, 543, 545, 548, 550, 581, 582, 611, 686, 691, 704, 707, 712, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 746, 750, 756, 757], "python": [0, 9, 18, 32, 41, 76, 161, 173, 201, 236, 317, 421, 422, 423, 424, 425, 525, 540, 542, 543, 545, 554, 647, 648, 649, 650, 652, 695, 698, 705, 706, 707, 713, 715, 716, 718, 721, 722, 723, 728, 735, 737, 742, 744, 745, 750, 752, 754, 757, 758, 759, 763, 764], "wrap": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 313, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 500, 503, 504, 505, 506, 508, 510, 511, 522, 524, 526, 527, 530, 532, 533, 534, 535, 545, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 592, 593, 594, 596, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 704, 717, 718, 719, 720, 722, 723, 724, 725, 727, 728, 730, 731, 734, 735, 737, 742, 744, 747, 750, 752, 753, 757, 758, 763, 764], "overhead": [0, 750, 760], "becom": [0, 9, 32, 49, 283, 307, 313, 383, 550, 608, 695, 706, 708, 716, 722, 726, 728, 734, 750], "increasingli": [0, 726], "notic": [0, 714, 719, 723, 729, 737, 740], "larg": [0, 8, 9, 31, 32, 177, 194, 201, 227, 228, 322, 435, 543, 548, 594, 715, 716, 723, 745, 757], "model": [0, 2, 9, 194, 227, 312, 374, 543, 704, 745, 746, 752, 755, 756, 757, 758, 759, 760, 761, 763, 764], "multipl": [0, 8, 9, 14, 17, 22, 23, 26, 31, 32, 33, 34, 37, 39, 40, 45, 46, 89, 188, 212, 219, 225, 226, 227, 229, 310, 311, 313, 320, 331, 338, 341, 343, 368, 387, 396, 413, 428, 446, 484, 526, 527, 530, 532, 534, 535, 540, 543, 545, 546, 547, 548, 550, 553, 555, 558, 559, 562, 563, 564, 565, 575, 584, 586, 587, 608, 611, 616, 617, 646, 653, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 704, 708, 714, 716, 719, 720, 722, 726, 728, 729, 731, 734, 735, 736, 737, 740, 742, 750, 755, 756, 757, 764], "improv": [0, 708, 716, 724, 730, 731, 740, 742, 752, 755, 757, 759, 760], "remov": [0, 2, 14, 26, 37, 548, 550, 551, 552, 579, 586, 600, 618, 624, 625, 641, 701, 704, 714, 720, 721, 723, 724, 727, 731, 737, 740, 747, 757], "extra": [0, 2, 26, 52, 72, 525, 539, 545, 719, 724, 726, 732, 734, 735, 736, 740, 742, 754, 759], "around": [0, 26, 52, 313, 401, 406, 716, 718, 719, 721, 725, 730, 731, 735, 738, 744, 750, 752, 755, 757, 764], "each": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 20, 22, 26, 29, 31, 32, 33, 34, 36, 37, 39, 42, 43, 45, 49, 51, 52, 60, 61, 63, 64, 65, 67, 72, 94, 107, 119, 122, 167, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 254, 256, 257, 262, 269, 272, 273, 277, 283, 287, 291, 296, 299, 302, 304, 307, 310, 311, 313, 317, 320, 322, 328, 329, 330, 333, 334, 335, 338, 346, 347, 348, 349, 352, 353, 358, 359, 362, 369, 370, 372, 373, 381, 382, 383, 386, 387, 392, 393, 395, 396, 398, 400, 401, 404, 412, 413, 421, 428, 433, 434, 435, 436, 437, 438, 446, 449, 457, 464, 465, 481, 505, 525, 527, 528, 530, 532, 533, 534, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 552, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 575, 576, 577, 580, 581, 582, 586, 588, 589, 590, 592, 594, 595, 596, 601, 610, 614, 616, 617, 619, 621, 623, 633, 640, 647, 656, 658, 659, 661, 667, 668, 675, 686, 689, 690, 691, 706, 707, 708, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 747, 749, 750, 753, 754, 758, 760, 763], "take": [0, 2, 9, 14, 16, 22, 32, 39, 49, 72, 73, 75, 96, 189, 234, 241, 252, 302, 310, 313, 329, 337, 342, 347, 385, 391, 409, 436, 437, 539, 540, 543, 547, 548, 550, 551, 573, 586, 590, 615, 626, 666, 685, 686, 698, 704, 708, 709, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 737, 740, 742, 744, 746, 747, 750, 751, 754, 755, 763], "ani": [0, 1, 2, 4, 5, 7, 8, 9, 10, 14, 23, 24, 28, 30, 31, 32, 33, 46, 47, 49, 51, 52, 72, 73, 75, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 110, 125, 129, 133, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 255, 259, 270, 271, 277, 280, 302, 304, 307, 310, 311, 313, 316, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 353, 359, 362, 390, 401, 415, 416, 417, 435, 438, 441, 442, 446, 456, 457, 458, 459, 460, 464, 468, 470, 472, 476, 478, 479, 497, 504, 511, 512, 519, 525, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 630, 633, 634, 636, 637, 644, 646, 650, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 682, 683, 685, 686, 688, 689, 690, 691, 695, 698, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 755, 756, 757, 758, 760, 763, 764], "framework": [0, 2, 4, 10, 124, 146, 156, 159, 170, 455, 471, 475, 506, 509, 541, 542, 545, 552, 629, 683, 690, 695, 706, 707, 708, 712, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 742, 744, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 761], "specif": [0, 2, 7, 9, 10, 30, 32, 33, 134, 165, 168, 201, 222, 223, 232, 317, 425, 457, 458, 459, 485, 541, 542, 543, 545, 548, 550, 551, 554, 557, 558, 581, 582, 598, 619, 624, 625, 626, 647, 664, 669, 670, 671, 673, 687, 688, 695, 700, 704, 706, 712, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 728, 729, 730, 731, 734, 735, 736, 737, 738, 740, 742, 743, 744, 746, 747, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 764], "backend": [0, 2, 4, 5, 9, 10, 14, 26, 32, 33, 37, 51, 84, 120, 121, 124, 146, 153, 154, 156, 159, 170, 311, 357, 359, 442, 450, 462, 463, 471, 474, 475, 485, 492, 506, 509, 540, 541, 542, 545, 548, 596, 683, 688, 690, 694, 695, 706, 712, 713, 715, 716, 717, 718, 719, 723, 725, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 743, 744, 747, 752, 757, 760, 763, 764], "composit": [0, 120, 121, 153, 154, 246, 311, 363, 462, 463, 541, 542, 543, 545, 714, 717, 719, 720, 722, 724, 725, 732, 734, 735, 736, 737, 740, 742, 746, 747, 750, 752, 758], "both": [0, 2, 5, 8, 9, 10, 13, 14, 28, 31, 32, 33, 36, 37, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 109, 125, 129, 132, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 271, 277, 278, 280, 283, 288, 304, 307, 310, 311, 313, 317, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 395, 401, 421, 435, 438, 464, 468, 470, 472, 481, 511, 535, 536, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 704, 714, 716, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 734, 735, 737, 740, 742, 744, 745, 746, 747, 749, 750, 757, 760, 762, 763, 764], "produc": [0, 9, 10, 13, 32, 36, 252, 255, 258, 261, 302, 304, 547, 574, 714, 724, 729, 734, 736, 737, 738, 758, 760], "simplifi": [0, 698, 707, 728, 735, 742, 743, 746, 753, 755, 756, 757, 760, 763, 764], "execut": [0, 73, 75, 512, 539, 542, 545, 715, 716, 721, 722, 723, 724, 725, 726, 728, 731, 732, 734, 737, 740, 742, 744, 747, 750, 752, 753, 757, 758, 759, 760, 761, 763], "comput": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 20, 22, 25, 26, 31, 32, 33, 34, 36, 37, 38, 45, 49, 62, 66, 167, 177, 184, 187, 189, 194, 195, 196, 201, 202, 203, 205, 206, 212, 213, 214, 221, 222, 223, 224, 226, 227, 230, 235, 236, 250, 260, 263, 264, 272, 273, 277, 281, 284, 286, 287, 291, 293, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 320, 322, 328, 329, 330, 331, 332, 337, 338, 341, 342, 343, 346, 347, 348, 349, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 366, 368, 370, 372, 373, 374, 375, 376, 377, 378, 395, 398, 410, 415, 417, 427, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 451, 452, 453, 497, 519, 526, 528, 529, 531, 535, 536, 542, 543, 545, 546, 547, 548, 549, 550, 552, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 575, 576, 580, 581, 582, 585, 586, 587, 589, 591, 593, 595, 596, 598, 600, 602, 603, 605, 606, 607, 611, 633, 658, 659, 660, 661, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 686, 689, 704, 707, 708, 715, 722, 723, 724, 731, 733, 735, 737, 739, 740, 742, 745, 750, 752, 753, 755, 757, 758, 760, 761, 763], "compos": [0, 9, 32, 310, 324, 325, 326, 684, 715, 722, 735, 737, 750, 757, 764], "from": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 49, 52, 76, 78, 86, 88, 89, 90, 91, 94, 95, 98, 101, 103, 109, 127, 133, 134, 150, 155, 160, 166, 167, 193, 201, 202, 229, 233, 234, 241, 245, 258, 259, 265, 270, 272, 273, 278, 281, 283, 284, 286, 287, 299, 304, 307, 310, 311, 313, 317, 322, 333, 334, 335, 349, 353, 365, 371, 374, 385, 387, 396, 401, 407, 409, 412, 413, 421, 422, 423, 424, 425, 436, 437, 456, 464, 465, 467, 487, 498, 508, 525, 527, 528, 532, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 561, 569, 570, 576, 579, 596, 600, 601, 602, 609, 612, 615, 618, 624, 625, 626, 628, 639, 640, 641, 647, 648, 649, 650, 654, 657, 658, 660, 666, 667, 672, 673, 674, 675, 676, 677, 683, 684, 685, 686, 688, 690, 695, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764], "onli": [0, 2, 5, 8, 9, 14, 16, 18, 26, 28, 31, 32, 37, 39, 41, 49, 51, 67, 93, 132, 133, 162, 222, 223, 228, 234, 258, 281, 286, 304, 307, 310, 311, 313, 317, 322, 332, 345, 359, 362, 372, 373, 381, 382, 383, 391, 421, 422, 438, 451, 537, 540, 541, 542, 543, 545, 547, 548, 550, 552, 554, 555, 557, 558, 573, 586, 593, 596, 612, 615, 627, 628, 634, 635, 637, 638, 639, 644, 645, 648, 649, 650, 653, 654, 664, 670, 673, 686, 688, 690, 698, 704, 706, 709, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 750, 756, 757, 758, 763, 764], "which": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 111, 117, 119, 122, 124, 127, 134, 146, 151, 155, 160, 162, 165, 166, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 285, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 322, 332, 333, 334, 335, 337, 338, 342, 343, 352, 353, 356, 359, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 386, 406, 407, 408, 409, 410, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 449, 450, 452, 453, 456, 457, 458, 459, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 480, 481, 486, 487, 488, 489, 503, 504, 506, 508, 510, 511, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 570, 571, 573, 574, 575, 576, 578, 579, 581, 582, 583, 584, 586, 587, 589, 590, 591, 593, 594, 595, 596, 600, 602, 603, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 622, 623, 632, 633, 634, 635, 640, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 700, 704, 706, 707, 708, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764], "result": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 133, 134, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 362, 363, 365, 366, 367, 368, 369, 374, 375, 376, 377, 378, 380, 386, 389, 391, 392, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 452, 453, 457, 458, 459, 464, 465, 474, 481, 488, 489, 526, 527, 528, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 627, 630, 633, 634, 636, 640, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 692, 702, 704, 712, 714, 716, 718, 719, 721, 722, 723, 724, 726, 727, 730, 731, 733, 734, 735, 736, 737, 738, 742, 745, 750, 758, 760], "code": [0, 2, 7, 8, 26, 30, 31, 52, 168, 214, 322, 442, 450, 458, 459, 474, 488, 492, 506, 542, 545, 547, 548, 550, 569, 588, 589, 590, 619, 702, 704, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 732, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764], "all": [0, 2, 4, 5, 9, 10, 13, 14, 16, 18, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 39, 41, 46, 47, 49, 76, 89, 96, 99, 100, 101, 155, 162, 194, 198, 226, 227, 270, 271, 280, 297, 304, 307, 310, 311, 313, 322, 343, 352, 353, 359, 362, 370, 373, 401, 412, 441, 446, 449, 466, 486, 487, 503, 510, 511, 525, 528, 540, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 555, 559, 570, 572, 573, 576, 589, 594, 595, 598, 603, 612, 616, 618, 624, 625, 626, 627, 628, 629, 638, 639, 640, 641, 647, 650, 655, 684, 685, 686, 692, 695, 700, 704, 706, 707, 708, 709, 710, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 763, 764], "don": [0, 24, 47, 704, 708, 714, 715, 716, 723, 724, 725, 729, 733, 737, 740, 746, 750], "contribut": [0, 9, 32, 322, 438, 710, 713, 714, 715, 716, 721, 729, 735, 742, 751, 761], "output": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 108, 133, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 307, 309, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 359, 362, 363, 366, 367, 368, 369, 371, 374, 375, 376, 377, 378, 379, 385, 386, 389, 391, 392, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 451, 452, 453, 457, 458, 459, 461, 465, 474, 481, 488, 489, 490, 513, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 627, 640, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 698, 704, 711, 715, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 744, 746, 747, 750, 752, 758], "print": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121, 124, 126, 127, 129, 134, 146, 147, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 266, 267, 270, 275, 277, 290, 291, 296, 300, 302, 304, 307, 310, 311, 312, 313, 316, 322, 328, 329, 330, 331, 333, 334, 336, 338, 341, 343, 346, 347, 348, 349, 351, 353, 357, 359, 368, 374, 375, 376, 377, 378, 384, 385, 386, 397, 401, 406, 407, 409, 410, 414, 418, 419, 420, 435, 436, 437, 438, 444, 446, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 484, 487, 488, 489, 493, 494, 495, 498, 501, 502, 503, 504, 506, 508, 510, 511, 512, 516, 517, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 574, 575, 576, 577, 579, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 594, 596, 597, 598, 600, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 695, 698, 702, 704, 715, 716, 722, 726, 736, 737, 739, 742, 744, 745, 746], "statement": [0, 2, 723, 734, 737, 740, 750], "logger": 0, "etc": [0, 5, 9, 18, 20, 24, 28, 32, 41, 47, 84, 92, 93, 96, 310, 317, 338, 343, 353, 421, 422, 424, 425, 540, 554, 556, 647, 648, 649, 650, 658, 659, 660, 661, 685, 686, 687, 688, 689, 690, 691, 708, 714, 715, 716, 718, 719, 720, 721, 722, 724, 726, 728, 730, 735, 736, 737, 738, 742, 744, 745, 750, 752, 755, 757, 763], "ha": [0, 1, 5, 9, 14, 16, 20, 22, 26, 29, 32, 33, 37, 39, 43, 45, 49, 94, 150, 174, 194, 197, 199, 201, 211, 227, 229, 232, 234, 237, 239, 240, 244, 272, 273, 304, 310, 312, 313, 322, 345, 376, 385, 408, 409, 412, 434, 436, 437, 439, 470, 540, 542, 543, 547, 548, 550, 555, 556, 558, 573, 586, 587, 595, 596, 598, 600, 603, 611, 618, 656, 659, 660, 661, 666, 667, 670, 672, 673, 674, 675, 684, 695, 706, 707, 708, 714, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 746, 747, 749, 750, 753, 756, 757, 759, 760, 763], "": [0, 1, 2, 5, 9, 10, 11, 14, 22, 32, 34, 37, 45, 72, 94, 99, 100, 120, 121, 150, 153, 154, 166, 201, 236, 271, 275, 277, 286, 288, 294, 298, 300, 304, 307, 308, 310, 311, 312, 313, 316, 317, 322, 325, 326, 332, 338, 343, 353, 357, 365, 372, 376, 392, 393, 401, 415, 416, 417, 425, 435, 444, 462, 463, 483, 505, 506, 527, 529, 530, 531, 532, 534, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 552, 558, 562, 564, 566, 568, 578, 589, 596, 597, 603, 639, 673, 675, 684, 685, 686, 687, 688, 689, 690, 691, 695, 704, 707, 708, 709, 710, 712, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763], "likewis": [0, 2, 704, 716, 722, 724, 727, 730, 731, 735, 740, 745, 763], "redund": [0, 704, 724, 728, 735], "oper": [0, 5, 6, 8, 9, 10, 13, 26, 28, 29, 31, 32, 33, 36, 52, 67, 92, 93, 134, 164, 172, 177, 179, 188, 191, 194, 201, 216, 218, 227, 228, 232, 236, 239, 244, 252, 272, 273, 301, 302, 304, 309, 310, 313, 324, 325, 326, 328, 329, 330, 336, 337, 338, 342, 346, 347, 348, 349, 351, 352, 353, 408, 450, 457, 458, 459, 506, 537, 540, 541, 542, 543, 545, 547, 548, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 598, 600, 672, 674, 686, 704, 706, 714, 715, 717, 718, 719, 722, 724, 725, 726, 727, 728, 731, 734, 735, 737, 740, 742, 745, 746, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764], "origin": [0, 2, 9, 14, 16, 22, 26, 32, 37, 39, 45, 49, 51, 52, 182, 207, 234, 265, 304, 311, 313, 322, 370, 394, 400, 402, 405, 436, 437, 441, 442, 443, 444, 543, 548, 550, 558, 587, 615, 616, 667, 695, 704, 708, 714, 715, 716, 720, 721, 723, 724, 732, 734, 735, 736, 742, 757, 758], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 122, 125, 126, 127, 129, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 307, 310, 311, 313, 320, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 349, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 540, 541, 543, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 637, 638, 639, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 695, 704, 706, 707, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764], "increas": [0, 9, 14, 16, 32, 37, 39, 313, 322, 401, 438, 548, 550, 552, 601, 610, 623, 639, 706, 724, 728, 735, 738, 740, 757], "its": [0, 4, 6, 9, 16, 26, 29, 32, 33, 39, 61, 64, 67, 73, 107, 112, 113, 114, 115, 116, 167, 194, 227, 246, 252, 302, 310, 313, 322, 349, 412, 438, 461, 509, 537, 539, 541, 542, 543, 545, 548, 550, 552, 586, 611, 615, 616, 620, 633, 684, 704, 714, 715, 719, 722, 723, 724, 725, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 747, 750, 752, 756, 757, 763], "overal": [0, 547, 570, 722, 724, 725, 727, 747, 753, 755, 756, 757], "obj": [0, 2, 77, 78, 540], "none": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 124, 125, 126, 127, 129, 131, 134, 144, 146, 149, 150, 162, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 310, 311, 312, 313, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 480, 485, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 637, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 697, 704, 712, 718, 719, 720, 722, 723, 724, 725, 726, 728, 730, 731, 734, 735, 736, 737, 738, 740, 742, 744, 746, 747], "arg_stateful_idx": [0, 687, 688], "kwarg_stateful_idx": [0, 687, 688], "include_gener": 0, "true": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 75, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 134, 146, 150, 151, 153, 154, 158, 161, 162, 163, 164, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 274, 275, 276, 277, 279, 281, 287, 288, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 386, 387, 388, 389, 391, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 427, 428, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 488, 489, 490, 493, 496, 497, 499, 500, 502, 503, 504, 506, 508, 510, 511, 513, 518, 519, 521, 522, 524, 527, 528, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 686, 687, 688, 689, 690, 692, 695, 698, 702, 704, 712, 715, 720, 722, 723, 724, 725, 726, 728, 730, 731, 732, 734, 735, 736, 737, 739, 740, 742, 745, 746, 747], "array_cach": 0, "return_backend_compiled_fn": 0, "fals": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 150, 151, 156, 158, 161, 162, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 274, 275, 276, 277, 279, 281, 287, 288, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 427, 428, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 484, 488, 489, 490, 493, 496, 497, 499, 500, 502, 503, 504, 506, 508, 510, 511, 513, 518, 519, 521, 522, 524, 527, 528, 530, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 633, 637, 638, 639, 640, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 687, 688, 690, 692, 695, 698, 699, 702, 704, 712, 715, 718, 720, 723, 724, 725, 726, 728, 734, 735, 736, 737, 739, 740, 742, 745, 746, 747], "static_argnum": [0, 742], "static_argnam": [0, 742], "arg": [0, 2, 4, 26, 48, 55, 72, 157, 167, 512, 539, 540, 542, 545, 682, 683, 686, 688, 692, 695, 698, 702, 704, 719, 724, 725, 728, 733, 734, 735, 740, 742, 746], "kwarg": [0, 2, 4, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 52, 55, 157, 313, 401, 484, 512, 540, 542, 545, 682, 683, 686, 688, 695, 702, 704, 719, 724, 725, 728, 731, 734, 735, 740, 742, 746], "callabl": [0, 2, 9, 10, 24, 32, 33, 36, 47, 72, 73, 75, 79, 80, 81, 82, 83, 120, 121, 153, 154, 167, 300, 308, 310, 313, 352, 380, 401, 447, 451, 456, 458, 462, 463, 484, 512, 525, 529, 531, 536, 539, 540, 541, 542, 545, 546, 551, 552, 624, 625, 626, 633, 634, 635, 637, 638, 639, 640, 690, 699, 722, 728, 733, 735, 742], "set": [0, 2, 4, 9, 10, 13, 14, 19, 21, 22, 26, 32, 33, 36, 37, 42, 44, 45, 64, 67, 75, 99, 101, 135, 136, 137, 138, 139, 150, 163, 164, 165, 166, 167, 182, 270, 279, 293, 295, 300, 304, 307, 308, 310, 311, 313, 322, 332, 356, 360, 361, 377, 391, 401, 404, 410, 435, 440, 441, 442, 443, 444, 446, 450, 457, 474, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 506, 514, 537, 539, 540, 541, 542, 543, 545, 547, 548, 552, 554, 555, 557, 558, 570, 574, 576, 587, 589, 592, 595, 596, 627, 634, 637, 638, 639, 644, 645, 651, 653, 654, 658, 660, 661, 662, 665, 673, 675, 684, 685, 686, 688, 690, 695, 701, 706, 709, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 734, 735, 736, 737, 738, 740, 742, 744, 745, 751, 755, 756, 757, 758, 759, 761, 764], "them": [0, 2, 451, 487, 545, 686, 704, 705, 706, 707, 708, 711, 714, 716, 718, 719, 720, 721, 722, 723, 724, 728, 729, 732, 734, 735, 736, 737, 739, 742, 744, 745, 746, 750, 752, 754, 755, 757, 759, 763], "If": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 134, 150, 166, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 270, 271, 272, 275, 276, 277, 279, 280, 281, 283, 287, 288, 293, 294, 296, 298, 299, 300, 304, 307, 308, 310, 311, 312, 313, 316, 317, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 338, 341, 343, 345, 346, 347, 348, 353, 357, 359, 361, 362, 367, 369, 371, 372, 374, 375, 376, 377, 378, 381, 382, 383, 386, 387, 389, 391, 392, 393, 396, 400, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 480, 481, 488, 489, 493, 503, 504, 506, 508, 510, 511, 524, 525, 528, 530, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 570, 571, 573, 574, 575, 576, 578, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 639, 640, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 688, 689, 695, 704, 706, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 747, 750, 751], "specifi": [0, 2, 3, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 45, 46, 49, 59, 61, 64, 67, 76, 85, 90, 92, 97, 99, 100, 102, 106, 108, 155, 160, 162, 166, 167, 168, 236, 245, 271, 275, 288, 293, 304, 307, 310, 311, 312, 313, 317, 322, 328, 329, 330, 332, 338, 343, 353, 359, 367, 369, 372, 376, 377, 379, 391, 394, 403, 404, 406, 407, 422, 433, 435, 436, 437, 440, 441, 444, 447, 464, 465, 467, 470, 483, 493, 525, 537, 540, 541, 542, 543, 545, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 573, 574, 576, 578, 579, 581, 582, 587, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 616, 618, 619, 622, 623, 631, 632, 634, 635, 642, 643, 644, 645, 648, 649, 650, 652, 653, 654, 656, 659, 660, 661, 662, 666, 667, 668, 672, 674, 676, 677, 682, 684, 686, 687, 688, 715, 717, 721, 724, 725, 730, 731, 732, 734, 735, 736, 737, 742, 745, 746, 763], "eagerli": [0, 2, 704], "otherwis": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 76, 78, 84, 89, 91, 92, 93, 96, 98, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 125, 129, 133, 134, 150, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 253, 254, 256, 257, 259, 268, 269, 275, 276, 277, 279, 280, 281, 287, 288, 294, 296, 298, 299, 300, 302, 304, 307, 310, 311, 316, 328, 329, 330, 333, 334, 335, 371, 372, 374, 375, 377, 378, 381, 382, 383, 386, 387, 389, 391, 392, 393, 400, 407, 409, 410, 413, 415, 417, 418, 419, 420, 422, 434, 435, 436, 437, 438, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 481, 488, 489, 503, 504, 506, 508, 510, 511, 512, 524, 528, 530, 535, 539, 540, 541, 542, 543, 545, 546, 547, 548, 551, 552, 555, 556, 557, 558, 559, 561, 562, 563, 564, 570, 571, 573, 574, 575, 576, 577, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 596, 600, 602, 603, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 640, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 688, 689, 695, 704, 716, 719, 722, 724, 725, 726, 731, 732, 734, 737, 742], "happen": [0, 2, 246, 543, 704, 708, 715, 716, 725, 734, 737, 745], "lazili": [0, 2, 704], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 485, 488, 489, 492, 493, 494, 495, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 698, 700, 704, 714, 719, 727, 728, 730, 735, 736, 737, 738, 742, 744, 745, 749, 758], "creat": [0, 1, 2, 5, 8, 9, 18, 26, 28, 31, 32, 37, 41, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 228, 258, 259, 268, 269, 270, 304, 310, 311, 313, 317, 328, 329, 330, 351, 361, 370, 373, 379, 401, 406, 421, 422, 423, 424, 425, 492, 508, 525, 536, 540, 543, 545, 546, 554, 591, 647, 648, 649, 650, 652, 683, 685, 686, 687, 688, 689, 690, 691, 707, 709, 710, 715, 716, 719, 720, 721, 723, 724, 725, 728, 731, 732, 734, 735, 736, 737, 740, 742, 743, 746, 748, 749, 752, 757, 758, 763], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 122, 124, 134, 146, 150, 162, 165, 166, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 455, 457, 458, 459, 461, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 480, 485, 488, 489, 493, 503, 504, 506, 508, 510, 511, 512, 524, 526, 527, 528, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 633, 634, 637, 638, 639, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 685, 688, 690, 691, 698, 702, 714, 715, 716, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 740, 742, 747, 750, 757, 763], "list": [0, 4, 5, 6, 8, 9, 10, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 89, 91, 94, 95, 96, 98, 103, 107, 109, 122, 126, 127, 134, 150, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 275, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288, 294, 295, 296, 298, 299, 300, 307, 310, 311, 313, 320, 328, 329, 330, 332, 333, 334, 335, 346, 347, 348, 349, 359, 361, 364, 369, 370, 373, 374, 375, 377, 378, 381, 382, 383, 384, 386, 387, 396, 407, 409, 410, 413, 415, 417, 418, 419, 420, 422, 427, 435, 436, 437, 438, 446, 448, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 466, 468, 470, 472, 473, 474, 476, 477, 480, 484, 488, 489, 503, 504, 506, 508, 509, 510, 511, 512, 524, 525, 530, 535, 540, 541, 542, 543, 545, 547, 548, 550, 552, 553, 556, 557, 561, 562, 563, 564, 565, 566, 569, 570, 571, 573, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 598, 600, 605, 606, 607, 608, 609, 612, 615, 616, 617, 618, 619, 622, 623, 627, 628, 629, 630, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 670, 672, 673, 675, 676, 677, 683, 684, 686, 692, 698, 713, 714, 715, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 734, 735, 736, 737, 738, 742, 745, 746, 747, 750, 757, 758, 763], "instanc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 119, 122, 125, 126, 127, 129, 134, 151, 163, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 307, 310, 311, 312, 313, 316, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 346, 347, 348, 349, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 499, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 710, 714, 715, 716, 718, 719, 720, 724, 726, 727, 728, 730, 731, 732, 733, 734, 737, 745, 746, 747, 752, 758], "consid": [0, 9, 14, 20, 32, 37, 67, 101, 222, 223, 270, 275, 278, 288, 304, 307, 311, 322, 359, 361, 370, 435, 537, 540, 543, 548, 556, 578, 589, 658, 659, 660, 661, 685, 706, 707, 719, 720, 723, 724, 731, 733, 738, 740, 743, 744, 745, 754, 758, 762, 764], "dure": [0, 7, 11, 22, 26, 30, 34, 45, 168, 310, 333, 334, 335, 492, 512, 526, 527, 532, 542, 545, 546, 547, 548, 551, 558, 570, 586, 624, 625, 626, 673, 675, 684, 687, 688, 689, 690, 715, 722, 724, 725, 728, 731, 732, 734, 735, 736, 737, 740, 750, 757, 758, 763], "posit": [0, 4, 8, 9, 10, 14, 15, 16, 31, 32, 33, 37, 38, 39, 49, 87, 89, 101, 119, 174, 175, 176, 180, 183, 194, 201, 208, 209, 215, 217, 227, 228, 235, 236, 240, 241, 245, 259, 270, 275, 278, 288, 304, 307, 311, 313, 356, 371, 377, 400, 451, 461, 525, 538, 540, 541, 543, 545, 548, 549, 550, 554, 555, 559, 575, 578, 600, 605, 611, 616, 651, 656, 676, 677, 683, 704, 714, 716, 718, 722, 735, 737, 738, 745, 749, 759], "argument": [0, 2, 4, 5, 8, 9, 10, 14, 26, 27, 31, 32, 33, 49, 52, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 271, 277, 280, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 346, 347, 348, 349, 359, 401, 435, 438, 442, 447, 448, 450, 451, 456, 458, 459, 464, 468, 470, 472, 474, 484, 488, 489, 506, 511, 512, 525, 535, 540, 541, 543, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 633, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 686, 687, 688, 695, 698, 700, 704, 706, 714, 717, 718, 719, 720, 721, 722, 726, 727, 729, 731, 736, 737, 738, 740, 742, 744, 745, 752, 757], "keyword": [0, 2, 4, 5, 9, 26, 32, 52, 94, 228, 313, 322, 401, 435, 448, 451, 484, 512, 540, 543, 545, 552, 558, 633, 674, 687, 688, 698, 714, 719, 722, 724, 725, 732, 734, 735, 736, 737, 738, 740, 745], "str": [0, 2, 4, 5, 9, 10, 13, 14, 15, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 94, 96, 98, 103, 104, 107, 109, 111, 112, 113, 114, 118, 119, 122, 123, 124, 125, 126, 127, 129, 131, 134, 135, 136, 137, 138, 139, 146, 147, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 310, 311, 312, 313, 316, 322, 328, 329, 330, 332, 333, 334, 335, 337, 338, 342, 343, 346, 347, 348, 349, 351, 352, 353, 355, 359, 370, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 386, 391, 407, 409, 410, 415, 416, 417, 418, 419, 420, 422, 424, 435, 436, 437, 438, 444, 446, 447, 449, 450, 452, 453, 455, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 485, 488, 489, 491, 492, 501, 503, 504, 506, 508, 510, 511, 524, 528, 535, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 633, 634, 644, 647, 648, 649, 650, 652, 655, 658, 659, 660, 662, 666, 667, 668, 670, 672, 673, 675, 676, 677, 686, 688, 689, 698, 724, 725, 728, 731, 734, 735, 738, 742, 747], "current": [0, 9, 10, 26, 32, 52, 72, 120, 121, 124, 141, 142, 143, 144, 145, 146, 152, 153, 154, 155, 160, 162, 311, 313, 357, 358, 401, 462, 463, 466, 471, 475, 486, 487, 506, 539, 541, 542, 545, 548, 552, 580, 627, 637, 638, 684, 688, 695, 701, 704, 708, 711, 714, 715, 716, 718, 720, 722, 723, 724, 725, 728, 729, 731, 734, 735, 736, 737, 740, 742, 747, 749, 750, 757, 763, 764], "bool": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 77, 78, 84, 89, 90, 91, 92, 93, 94, 96, 98, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 142, 146, 150, 151, 153, 154, 156, 158, 161, 162, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 271, 275, 276, 277, 279, 281, 287, 288, 293, 294, 296, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 322, 328, 329, 330, 332, 333, 334, 335, 345, 346, 347, 348, 351, 359, 361, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 389, 390, 391, 392, 393, 396, 400, 404, 407, 409, 410, 413, 415, 417, 418, 419, 420, 422, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 493, 502, 503, 504, 506, 508, 510, 511, 524, 527, 528, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 571, 573, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 596, 600, 601, 603, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 637, 638, 639, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 686, 689, 690, 698, 702, 724, 726, 728, 734, 735, 737, 738, 740, 742, 747], "includ": [0, 2, 5, 8, 9, 10, 14, 19, 22, 23, 26, 28, 31, 32, 33, 37, 42, 45, 46, 76, 77, 78, 92, 93, 95, 101, 174, 198, 202, 203, 204, 207, 209, 212, 220, 228, 241, 246, 260, 263, 264, 265, 270, 272, 274, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 298, 299, 304, 310, 313, 322, 328, 329, 330, 355, 358, 360, 392, 393, 395, 398, 400, 402, 405, 423, 425, 426, 434, 438, 440, 441, 443, 444, 470, 524, 540, 543, 545, 548, 552, 554, 555, 558, 559, 580, 601, 603, 627, 650, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 689, 700, 704, 707, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 734, 735, 736, 737, 738, 740, 742, 749, 750, 754, 755, 757, 759, 762, 763, 764], "creation": [0, 9, 26, 32, 52, 721, 724, 725, 730, 732, 735, 736, 737, 738, 742, 757, 759, 763], "constant": [0, 9, 16, 17, 32, 39, 40, 49, 312, 313, 376, 401, 550, 552, 553, 610, 633, 646, 685, 687, 688, 689, 704, 731, 736, 738, 746, 747, 750], "appear": [0, 313, 392, 393, 525, 545, 715, 716, 718, 735, 740], "whether": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 77, 78, 89, 91, 96, 98, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 146, 150, 151, 153, 154, 156, 158, 161, 162, 164, 167, 168, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 271, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 304, 307, 310, 311, 312, 313, 322, 328, 329, 330, 332, 333, 334, 335, 351, 365, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 389, 391, 392, 393, 396, 400, 407, 409, 410, 413, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 488, 489, 490, 491, 493, 496, 497, 499, 500, 502, 503, 504, 506, 508, 510, 511, 518, 519, 522, 524, 527, 528, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 558, 559, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 682, 683, 686, 687, 688, 689, 690, 698, 704, 709, 714, 715, 719, 722, 724, 726, 730, 734, 735, 737, 739, 740], "appli": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 307, 308, 310, 311, 312, 313, 316, 322, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 345, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 537, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 591, 592, 593, 594, 596, 600, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 633, 636, 639, 640, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 682, 686, 689, 704, 709, 711, 714, 715, 716, 719, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 740, 744, 745, 746, 747, 748, 750, 752, 758], "nativ": [0, 2, 4, 5, 7, 10, 27, 30, 33, 51, 55, 95, 104, 105, 111, 112, 113, 114, 115, 116, 130, 133, 148, 149, 150, 151, 161, 169, 173, 474, 476, 480, 487, 492, 509, 540, 541, 542, 545, 683, 695, 704, 712, 714, 720, 724, 725, 728, 731, 732, 734, 735, 736, 737, 742, 744, 745, 752, 755, 764], "e": [0, 5, 9, 14, 18, 20, 21, 22, 24, 31, 32, 37, 41, 44, 45, 47, 49, 51, 84, 93, 94, 97, 98, 101, 105, 134, 147, 174, 175, 176, 180, 182, 183, 186, 188, 190, 194, 195, 197, 200, 201, 207, 208, 215, 216, 217, 218, 225, 226, 227, 228, 230, 232, 234, 236, 237, 240, 241, 245, 251, 270, 304, 310, 311, 317, 322, 323, 328, 329, 332, 346, 347, 348, 349, 362, 368, 421, 422, 423, 424, 425, 436, 437, 445, 538, 540, 541, 542, 543, 547, 548, 550, 552, 554, 556, 557, 558, 573, 576, 581, 582, 586, 587, 589, 592, 595, 596, 597, 600, 603, 611, 619, 630, 634, 635, 636, 639, 644, 645, 648, 649, 650, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 686, 698, 704, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 720, 722, 724, 728, 733, 735, 737, 742, 745, 750, 751, 752, 753], "tf": [0, 2, 704, 719, 720, 724, 725, 730, 734, 735, 737, 738, 740, 742, 747, 750, 752, 757], "after": [0, 2, 9, 10, 11, 13, 17, 26, 32, 33, 34, 36, 40, 140, 241, 294, 307, 310, 311, 313, 332, 333, 334, 335, 352, 368, 390, 401, 474, 527, 530, 532, 533, 534, 541, 543, 545, 546, 547, 552, 553, 560, 561, 562, 563, 565, 567, 569, 570, 638, 646, 690, 695, 704, 710, 714, 715, 716, 718, 720, 721, 723, 724, 726, 728, 730, 733, 736, 737, 741, 751, 757], "union": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 480, 481, 483, 484, 488, 489, 493, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 635, 636, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 690, 691, 719, 722, 724, 725, 726, 728, 730, 731, 734, 738, 740, 742, 747], "int": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 55, 62, 66, 67, 77, 78, 87, 89, 90, 91, 92, 93, 96, 99, 100, 101, 108, 115, 118, 119, 122, 129, 144, 158, 159, 160, 167, 168, 177, 184, 185, 186, 187, 188, 189, 201, 204, 228, 237, 243, 246, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 279, 280, 282, 286, 293, 295, 297, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 355, 359, 361, 362, 364, 367, 369, 370, 372, 373, 376, 379, 380, 384, 386, 387, 390, 391, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 447, 457, 458, 459, 461, 464, 465, 468, 483, 486, 488, 503, 504, 505, 509, 525, 526, 527, 528, 529, 532, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 578, 579, 587, 588, 598, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 633, 634, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 698, 722, 724, 725, 726, 728, 730, 731, 734, 736, 737, 738, 740, 742, 747], "iter": [0, 4, 9, 10, 16, 24, 26, 32, 33, 39, 47, 52, 72, 73, 75, 167, 266, 267, 304, 311, 313, 361, 370, 373, 401, 446, 484, 539, 542, 545, 550, 552, 610, 614, 621, 623, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 642, 643, 645, 698, 708, 718, 720, 722, 742, 745], "For": [0, 1, 5, 9, 14, 20, 32, 37, 76, 94, 174, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 229, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 272, 273, 277, 296, 304, 307, 311, 313, 367, 369, 383, 401, 404, 540, 543, 548, 550, 556, 558, 594, 596, 600, 608, 619, 658, 659, 660, 661, 669, 671, 672, 674, 683, 706, 707, 708, 710, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 749, 750, 754, 755, 758, 763, 764], "jax": [0, 2, 3, 8, 9, 10, 20, 25, 31, 33, 59, 61, 64, 67, 245, 286, 307, 322, 444, 474, 506, 525, 537, 543, 545, 556, 658, 659, 660, 661, 682, 695, 704, 707, 708, 712, 713, 714, 715, 716, 718, 720, 724, 725, 728, 730, 733, 734, 735, 736, 737, 738, 740, 742, 744, 747, 750, 758, 760, 763, 764], "jit": [0, 742, 750, 757], "tupl": [0, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 77, 78, 89, 91, 95, 96, 98, 101, 103, 107, 108, 109, 120, 121, 122, 126, 127, 133, 134, 140, 150, 153, 154, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 262, 267, 270, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 292, 293, 294, 295, 296, 298, 299, 300, 301, 304, 307, 309, 310, 311, 313, 316, 317, 318, 320, 322, 328, 329, 330, 332, 333, 334, 335, 337, 342, 343, 346, 347, 348, 349, 351, 352, 353, 358, 359, 361, 365, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 384, 386, 396, 401, 407, 409, 410, 412, 415, 417, 418, 419, 420, 422, 423, 425, 426, 427, 435, 436, 437, 438, 440, 441, 442, 443, 446, 449, 450, 452, 453, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 493, 503, 504, 505, 506, 508, 509, 510, 511, 524, 525, 526, 527, 528, 530, 532, 535, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 596, 598, 599, 600, 603, 605, 606, 607, 608, 609, 610, 612, 613, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 648, 649, 650, 652, 655, 656, 658, 659, 660, 661, 662, 663, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 688, 698, 719, 724, 730, 731, 734, 736, 737, 742, 745, 746, 750], "dict": [0, 2, 4, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 120, 121, 122, 126, 127, 134, 150, 153, 154, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 259, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 313, 332, 333, 334, 335, 374, 375, 377, 378, 381, 382, 383, 386, 401, 407, 409, 410, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 447, 449, 450, 452, 453, 457, 458, 459, 461, 462, 463, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 484, 488, 489, 503, 504, 506, 508, 510, 511, 524, 535, 541, 542, 545, 552, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 627, 628, 630, 633, 634, 635, 636, 638, 639, 640, 644, 645, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 683, 686, 688, 695, 719, 722, 745, 746, 752], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 685, 686, 688, 690, 695, 698, 699, 700, 701, 704, 715, 716, 719, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 750, 758], "type": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 688, 692, 695, 698, 699, 702, 704, 710, 714, 715, 716, 717, 718, 719, 722, 725, 726, 727, 728, 730, 732, 734, 736, 737, 738, 740, 742, 744, 745, 757, 758, 761], "lazygraph": [0, 2], "modul": [0, 24, 26, 47, 52, 303, 305, 306, 314, 315, 319, 485, 545, 559, 678, 682, 683, 684, 686, 687, 689, 691, 694, 695, 704, 708, 711, 715, 719, 720, 721, 728, 731, 734, 735, 737, 742, 743, 745, 747, 749, 750, 757, 758, 760], "moduletyp": [0, 2, 24, 47], "A": [0, 1, 2, 5, 6, 9, 10, 16, 18, 22, 23, 26, 29, 31, 32, 33, 36, 37, 39, 41, 43, 46, 49, 52, 72, 73, 75, 87, 95, 101, 107, 148, 167, 229, 231, 235, 259, 270, 272, 273, 275, 285, 288, 292, 293, 304, 307, 310, 311, 313, 316, 317, 322, 338, 352, 359, 368, 377, 386, 389, 407, 410, 415, 416, 417, 418, 421, 422, 423, 424, 425, 433, 442, 444, 449, 451, 472, 473, 503, 504, 505, 508, 536, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 552, 554, 558, 559, 570, 579, 581, 584, 585, 590, 591, 595, 596, 608, 611, 613, 617, 619, 627, 630, 632, 634, 635, 636, 637, 638, 642, 643, 644, 645, 647, 648, 649, 650, 652, 658, 668, 676, 677, 684, 685, 702, 704, 705, 706, 707, 708, 713, 714, 715, 717, 722, 724, 725, 728, 730, 731, 735, 736, 737, 742, 745, 750, 752, 757, 758], "non": [0, 2, 6, 8, 9, 14, 18, 19, 22, 23, 29, 31, 32, 37, 41, 42, 45, 46, 89, 106, 124, 133, 202, 222, 223, 228, 279, 284, 297, 307, 311, 313, 322, 359, 361, 365, 382, 383, 438, 441, 540, 541, 543, 548, 552, 554, 555, 558, 559, 576, 577, 587, 589, 596, 598, 602, 603, 640, 649, 653, 654, 655, 656, 669, 670, 671, 672, 673, 675, 676, 677, 685, 687, 688, 690, 719, 722, 724, 726, 742, 757], "initi": [0, 2, 9, 13, 26, 32, 36, 52, 311, 322, 361, 370, 373, 443, 547, 572, 683, 684, 686, 687, 688, 690, 691, 704, 707, 716, 720, 724, 725, 736, 737, 742, 757, 763, 764], "object": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 55, 56, 84, 88, 89, 110, 119, 122, 130, 133, 168, 226, 422, 528, 540, 541, 542, 546, 552, 554, 630, 631, 632, 634, 635, 636, 642, 643, 644, 645, 652, 683, 686, 687, 688, 695, 698, 704, 719, 720, 722, 723, 731, 732, 735, 736, 737, 740, 744, 747, 757, 763], "forward": [0, 9, 32, 310, 332, 337, 338, 342, 343, 353, 683, 685, 687, 688, 690, 704, 715, 720, 727, 733, 737, 738, 740, 747, 749, 750, 757, 758], "pass": [0, 2, 8, 9, 24, 26, 31, 32, 47, 52, 72, 73, 75, 111, 133, 148, 167, 182, 228, 313, 316, 317, 322, 391, 415, 417, 421, 441, 442, 474, 539, 541, 542, 543, 545, 551, 624, 625, 683, 687, 688, 690, 691, 695, 698, 702, 704, 712, 714, 716, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 750, 755], "same": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 45, 49, 50, 51, 65, 76, 86, 91, 93, 94, 96, 98, 99, 100, 101, 103, 106, 107, 108, 119, 122, 167, 174, 175, 176, 177, 179, 181, 185, 187, 190, 194, 200, 201, 207, 227, 229, 231, 234, 236, 237, 238, 247, 251, 259, 269, 270, 271, 272, 273, 277, 283, 299, 302, 304, 307, 310, 311, 313, 316, 318, 320, 322, 328, 329, 330, 346, 347, 348, 349, 351, 352, 353, 358, 361, 362, 370, 371, 372, 373, 385, 386, 401, 409, 415, 417, 426, 428, 433, 434, 435, 436, 437, 438, 439, 444, 481, 535, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 600, 602, 609, 612, 613, 615, 616, 618, 619, 624, 625, 640, 650, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 686, 698, 704, 706, 708, 710, 715, 716, 719, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 746, 747, 750, 754, 756, 763, 764], "copi": [0, 2, 5, 6, 7, 8, 9, 10, 16, 26, 28, 29, 30, 31, 32, 33, 39, 49, 50, 77, 78, 84, 88, 106, 168, 228, 313, 379, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 467, 493, 503, 510, 511, 540, 541, 542, 543, 545, 550, 552, 557, 611, 612, 613, 615, 617, 618, 620, 622, 628, 663, 665, 715, 716, 718, 720, 723, 724, 727, 735, 736, 742, 749, 750], "everi": [0, 2, 5, 9, 10, 32, 33, 90, 91, 251, 286, 302, 307, 310, 313, 346, 347, 348, 412, 446, 540, 545, 710, 714, 716, 718, 720, 721, 723, 724, 726, 729, 730, 731, 732, 734, 735, 736, 737, 742, 744, 746, 757], "method": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 312, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 540, 541, 543, 545, 546, 548, 549, 552, 555, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 638, 639, 640, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 684, 685, 686, 687, 688, 714, 716, 718, 719, 720, 723, 724, 725, 726, 727, 730, 737, 738, 742, 743, 746, 747, 750, 758, 764], "To": [0, 1, 2, 201, 312, 376, 498, 543, 545, 685, 710, 714, 715, 718, 719, 720, 721, 724, 726, 728, 729, 731, 732, 735, 736, 737, 738, 745, 746, 747], "you": [0, 1, 2, 9, 10, 32, 33, 49, 51, 52, 313, 322, 389, 442, 464, 465, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 573, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 757], "need": [0, 1, 2, 9, 10, 16, 32, 33, 39, 310, 311, 322, 332, 337, 338, 342, 358, 442, 452, 453, 474, 545, 547, 548, 550, 552, 573, 580, 608, 611, 638, 704, 708, 710, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745, 749, 750, 753, 757, 758, 759, 763], "correspond": [0, 2, 6, 8, 9, 10, 13, 16, 19, 20, 22, 26, 29, 31, 32, 36, 39, 45, 49, 52, 107, 119, 122, 182, 232, 246, 272, 282, 283, 304, 307, 310, 311, 313, 316, 322, 332, 338, 349, 353, 355, 358, 359, 360, 392, 393, 406, 415, 416, 417, 436, 437, 503, 525, 541, 543, 545, 547, 548, 550, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 576, 580, 581, 587, 594, 595, 615, 616, 647, 653, 654, 658, 659, 660, 661, 666, 667, 672, 673, 674, 675, 698, 704, 714, 716, 719, 720, 722, 723, 724, 726, 727, 728, 730, 731, 733, 735, 737, 740, 742, 757], "input": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 148, 150, 151, 164, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 467, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 488, 489, 490, 496, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 518, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 633, 634, 635, 636, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 685, 686, 688, 689, 698, 718, 719, 720, 722, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 750, 758, 761], "let": [0, 2, 10, 22, 33, 174, 175, 176, 177, 180, 183, 192, 195, 197, 199, 208, 209, 210, 215, 217, 230, 238, 240, 241, 245, 464, 465, 543, 545, 548, 558, 600, 670, 672, 673, 674, 675, 704, 708, 710, 714, 719, 721, 722, 724, 725, 726, 727, 728, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 764], "start": [0, 1, 2, 5, 9, 26, 28, 32, 36, 76, 89, 92, 93, 290, 300, 307, 308, 310, 313, 322, 352, 391, 394, 402, 404, 411, 443, 540, 684, 698, 704, 709, 710, 714, 715, 716, 717, 723, 724, 726, 727, 729, 730, 735, 737, 740, 741, 742, 744, 745, 746, 749, 750, 757, 763], "simpl": [0, 2, 9, 32, 322, 435, 686, 704, 706, 714, 715, 716, 719, 721, 722, 724, 725, 726, 727, 731, 734, 735, 737, 738, 740, 744, 746, 747, 750, 752, 756, 757, 758, 759], "import": [0, 1, 2, 9, 20, 24, 28, 32, 47, 148, 149, 153, 163, 165, 322, 435, 542, 551, 556, 626, 661, 695, 704, 707, 710, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 732, 733, 734, 735, 736, 737, 738, 742, 744, 745, 747, 750, 753, 755, 757, 760, 761, 763], "set_backend": [0, 2, 8, 10, 24, 31, 33, 121, 130, 148, 149, 163, 165, 178, 450, 474, 541, 542, 545, 551, 626, 695, 704, 718, 720, 724, 725, 731, 732, 733, 742, 744, 747], "torch": [0, 2, 5, 10, 14, 24, 33, 37, 84, 121, 148, 149, 163, 165, 237, 450, 474, 506, 540, 541, 542, 543, 545, 548, 551, 596, 626, 683, 695, 704, 712, 715, 716, 718, 719, 720, 721, 723, 724, 725, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 745, 747, 750, 752, 763], "def": [0, 2, 8, 31, 72, 178, 451, 539, 545, 551, 552, 626, 633, 698, 704, 714, 715, 718, 719, 722, 724, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747], "fn": [0, 9, 26, 29, 32, 55, 79, 80, 81, 82, 83, 120, 121, 153, 154, 157, 313, 380, 447, 462, 463, 512, 540, 541, 542, 545, 552, 633, 634, 635, 637, 638, 639, 692, 695, 699, 700, 702, 725, 728, 734, 735, 742], "x": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 76, 77, 78, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 129, 134, 150, 151, 155, 160, 161, 162, 166, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 270, 271, 274, 276, 277, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 388, 389, 391, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 493, 494, 495, 498, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 524, 525, 527, 528, 529, 531, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 630, 633, 634, 635, 636, 637, 638, 639, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 689, 692, 695, 698, 702, 704, 714, 719, 720, 722, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747], "y": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 103, 106, 107, 108, 117, 119, 122, 134, 147, 151, 155, 160, 161, 162, 166, 168, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 259, 275, 281, 287, 288, 289, 290, 291, 296, 298, 300, 302, 304, 307, 310, 311, 312, 313, 316, 322, 329, 331, 333, 334, 338, 341, 343, 347, 355, 359, 363, 368, 374, 375, 376, 377, 378, 386, 388, 397, 401, 409, 410, 414, 418, 419, 420, 428, 434, 435, 436, 437, 438, 441, 443, 444, 446, 449, 452, 453, 456, 457, 459, 460, 461, 464, 465, 466, 470, 472, 473, 474, 476, 477, 480, 481, 486, 493, 494, 495, 498, 501, 502, 503, 504, 506, 508, 510, 511, 512, 516, 517, 520, 523, 524, 525, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 562, 564, 566, 569, 570, 571, 575, 576, 577, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 594, 596, 597, 598, 600, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 630, 633, 634, 636, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 702, 704, 720, 722, 725, 726, 733, 735, 736, 737, 738, 740, 742, 744], "z": [0, 5, 8, 9, 10, 14, 15, 18, 20, 22, 28, 31, 32, 33, 37, 38, 39, 41, 45, 51, 52, 92, 93, 95, 96, 155, 177, 178, 182, 184, 187, 189, 194, 205, 206, 209, 210, 211, 213, 214, 219, 221, 223, 224, 225, 226, 234, 243, 250, 251, 277, 302, 307, 312, 322, 374, 375, 376, 377, 378, 384, 386, 397, 434, 435, 438, 444, 449, 461, 464, 465, 472, 473, 489, 502, 503, 504, 512, 525, 540, 542, 543, 545, 548, 549, 550, 552, 554, 555, 556, 558, 576, 586, 591, 592, 596, 603, 605, 606, 607, 608, 630, 634, 636, 644, 648, 649, 650, 653, 658, 668, 669, 671, 672, 673, 685, 704, 720, 722, 725, 726, 742, 744], "k": [0, 5, 9, 13, 14, 18, 28, 31, 32, 36, 37, 41, 49, 72, 87, 99, 100, 101, 221, 259, 270, 271, 304, 311, 313, 317, 320, 322, 356, 367, 407, 410, 421, 422, 423, 424, 425, 428, 438, 449, 539, 540, 545, 547, 548, 552, 554, 555, 574, 578, 586, 587, 593, 595, 596, 597, 600, 635, 648, 649, 650, 656, 704, 717, 718, 735, 736, 742, 753, 757], "j": [0, 5, 8, 9, 14, 22, 28, 31, 32, 37, 49, 75, 96, 175, 176, 177, 178, 180, 183, 192, 194, 197, 199, 207, 215, 217, 221, 227, 238, 240, 241, 244, 245, 277, 307, 310, 311, 322, 337, 338, 342, 353, 354, 358, 360, 367, 444, 449, 539, 540, 543, 545, 548, 558, 580, 600, 668, 716, 717, 721, 753], "concat": [0, 10, 16, 26, 39, 167, 461, 542, 545, 550, 623, 736, 740, 742], "sum_j": 0, "sum": [0, 2, 8, 9, 10, 13, 14, 15, 22, 26, 31, 32, 33, 36, 37, 38, 45, 49, 51, 52, 167, 177, 219, 243, 273, 293, 304, 307, 311, 312, 322, 352, 357, 374, 375, 376, 377, 378, 441, 442, 458, 488, 489, 542, 543, 545, 547, 548, 549, 558, 570, 574, 587, 596, 600, 603, 605, 606, 607, 667, 668, 685, 687, 698, 704, 722, 724, 731, 733, 734, 735, 742], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 106, 107, 108, 109, 113, 117, 118, 119, 122, 127, 129, 134, 150, 151, 155, 159, 160, 162, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 484, 486, 488, 489, 493, 502, 503, 504, 505, 506, 508, 510, 511, 512, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 684, 685, 686, 687, 688, 689, 690, 691, 695, 698, 704, 707, 708, 712, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 740, 741, 742, 744, 745, 746, 747, 750], "2": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 106, 107, 108, 109, 113, 117, 119, 127, 129, 134, 150, 151, 152, 155, 158, 160, 162, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 267, 270, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 366, 368, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 400, 401, 406, 407, 408, 409, 410, 412, 413, 414, 418, 419, 420, 423, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 484, 486, 488, 489, 493, 502, 503, 504, 505, 506, 508, 512, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 685, 686, 695, 698, 704, 712, 715, 716, 718, 720, 721, 722, 723, 724, 726, 728, 730, 731, 733, 734, 735, 736, 737, 741, 742, 744, 745, 746, 747, 750, 763, 764], "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 77, 78, 87, 89, 91, 92, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 113, 117, 119, 127, 129, 134, 148, 150, 151, 162, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 328, 329, 330, 331, 333, 336, 337, 338, 341, 342, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 368, 373, 374, 375, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 400, 401, 406, 407, 408, 409, 410, 412, 413, 414, 418, 419, 420, 423, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 484, 488, 489, 502, 503, 504, 508, 511, 512, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 596, 597, 598, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 698, 704, 714, 715, 718, 719, 720, 722, 723, 724, 726, 728, 731, 733, 736, 737, 742, 744, 745, 746, 747, 764], "4": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 66, 67, 75, 76, 77, 78, 84, 87, 89, 91, 92, 93, 94, 95, 96, 98, 101, 103, 107, 108, 109, 117, 119, 122, 127, 129, 134, 151, 152, 160, 165, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 261, 266, 267, 270, 277, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 296, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 328, 329, 330, 331, 333, 334, 336, 337, 338, 341, 342, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 374, 375, 377, 379, 381, 382, 383, 385, 386, 387, 388, 391, 392, 393, 396, 397, 398, 400, 401, 406, 407, 408, 409, 410, 412, 413, 414, 418, 419, 420, 423, 425, 426, 428, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 452, 453, 456, 457, 458, 459, 461, 464, 465, 467, 470, 472, 473, 474, 481, 488, 489, 503, 504, 505, 506, 508, 512, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 596, 597, 598, 600, 601, 603, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 690, 698, 704, 708, 712, 714, 715, 720, 721, 722, 723, 724, 726, 733, 736, 737, 740, 742, 744, 745, 746, 747, 757, 763, 764], "compiled_fn": 0, "In": [0, 2, 7, 9, 10, 16, 30, 33, 39, 49, 161, 168, 169, 173, 177, 194, 195, 201, 209, 210, 227, 230, 236, 238, 310, 313, 316, 333, 334, 335, 381, 382, 383, 387, 389, 391, 392, 393, 394, 396, 400, 407, 413, 415, 417, 447, 467, 474, 492, 542, 543, 545, 548, 550, 554, 594, 611, 612, 613, 615, 617, 618, 620, 622, 650, 704, 706, 708, 710, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 749, 750, 753, 755, 757, 758, 760, 763], "case": [0, 2, 4, 5, 9, 10, 16, 22, 26, 28, 32, 33, 39, 49, 52, 78, 94, 120, 121, 148, 153, 154, 161, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 284, 286, 296, 307, 310, 313, 316, 317, 323, 333, 334, 335, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 415, 417, 423, 445, 467, 474, 488, 489, 490, 540, 541, 542, 543, 545, 548, 550, 552, 558, 594, 600, 611, 612, 613, 615, 617, 618, 620, 622, 630, 636, 669, 670, 671, 672, 673, 674, 675, 687, 688, 690, 704, 707, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 744, 746, 747, 750, 756, 760], "would": [0, 1, 5, 7, 9, 28, 30, 32, 39, 62, 66, 78, 168, 310, 313, 337, 342, 381, 382, 387, 389, 391, 392, 393, 400, 404, 413, 537, 542, 611, 612, 613, 615, 617, 618, 620, 622, 704, 707, 709, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 726, 727, 730, 732, 734, 735, 736, 737, 738, 740, 741, 742, 744, 746, 747, 750, 757, 763], "can": [0, 1, 2, 5, 6, 9, 10, 14, 16, 18, 20, 28, 29, 32, 33, 37, 39, 41, 43, 49, 61, 64, 77, 78, 93, 95, 109, 148, 165, 166, 167, 252, 255, 265, 302, 304, 310, 311, 316, 317, 320, 322, 332, 345, 362, 367, 369, 372, 386, 415, 422, 423, 428, 435, 481, 492, 525, 528, 537, 540, 541, 542, 545, 546, 547, 548, 550, 554, 573, 579, 586, 596, 600, 615, 619, 648, 649, 650, 658, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 754, 755, 756, 757, 758, 760, 761, 763, 764], "observ": [0, 9, 32, 322, 434, 435, 716, 728, 742, 759], "As": [0, 2, 20, 24, 47, 556, 658, 659, 660, 661, 704, 706, 714, 715, 716, 719, 721, 722, 723, 724, 725, 728, 729, 730, 731, 734, 735, 736, 737, 740, 744, 745, 746, 750, 757, 762], "variabl": [0, 1, 9, 10, 11, 17, 26, 32, 33, 34, 40, 72, 73, 75, 311, 317, 322, 371, 423, 434, 435, 450, 474, 475, 476, 477, 480, 506, 527, 528, 530, 532, 533, 534, 539, 545, 546, 548, 551, 553, 595, 624, 625, 626, 646, 683, 684, 685, 686, 687, 688, 689, 690, 691, 716, 720, 724, 727, 730, 733, 734, 737, 738, 742, 745, 746, 747, 750, 758], "calcul": [0, 8, 9, 10, 15, 22, 26, 31, 32, 33, 37, 38, 45, 52, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 192, 194, 197, 198, 199, 215, 216, 217, 218, 219, 220, 225, 226, 227, 232, 239, 240, 241, 243, 244, 245, 286, 296, 307, 310, 311, 313, 316, 322, 328, 329, 330, 359, 401, 415, 417, 442, 481, 543, 545, 548, 549, 558, 582, 591, 594, 605, 606, 607, 669, 670, 671, 672, 673, 674, 675, 685, 686, 689, 707, 714, 727, 742], "valu": [0, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 67, 72, 73, 75, 76, 87, 90, 91, 92, 93, 96, 101, 106, 123, 127, 133, 166, 167, 174, 175, 176, 177, 179, 181, 182, 183, 190, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 252, 257, 259, 266, 270, 272, 273, 275, 276, 277, 279, 280, 281, 282, 285, 286, 288, 289, 291, 294, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 321, 322, 332, 345, 352, 356, 359, 361, 365, 370, 371, 372, 373, 374, 375, 377, 385, 390, 395, 401, 406, 408, 409, 410, 412, 415, 417, 421, 422, 424, 425, 431, 433, 436, 437, 438, 441, 442, 443, 444, 450, 452, 453, 454, 456, 461, 464, 465, 467, 469, 472, 473, 474, 481, 488, 489, 493, 494, 495, 498, 506, 511, 516, 517, 520, 523, 524, 525, 526, 527, 528, 532, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 578, 581, 582, 587, 588, 589, 592, 593, 594, 595, 596, 597, 600, 603, 608, 609, 610, 614, 615, 623, 624, 625, 629, 631, 632, 633, 634, 635, 640, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 684, 685, 686, 687, 688, 689, 690, 712, 715, 716, 718, 721, 722, 724, 725, 726, 727, 728, 730, 731, 734, 735, 737, 739, 740, 742, 744, 750, 757, 758], "wa": [0, 2, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 275, 276, 277, 279, 281, 287, 288, 294, 295, 296, 298, 299, 300, 304, 307, 333, 334, 335, 374, 375, 377, 378, 381, 382, 383, 386, 407, 409, 410, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 512, 524, 530, 535, 543, 545, 552, 558, 559, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 695, 704, 707, 712, 716, 718, 723, 726, 731, 733, 735, 742, 744, 756, 757, 759], "like": [0, 2, 5, 8, 9, 16, 28, 31, 32, 36, 39, 44, 93, 110, 133, 178, 198, 204, 207, 220, 238, 280, 283, 295, 307, 310, 311, 313, 320, 322, 352, 353, 358, 382, 383, 391, 427, 428, 444, 540, 541, 543, 548, 550, 554, 557, 580, 615, 650, 663, 704, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 749, 750, 757, 762], "were": [0, 26, 29, 122, 126, 127, 201, 543, 716, 724, 728, 729, 733, 734, 736, 737, 738, 740, 742, 757, 758, 763], "exclud": [0, 22, 32, 45, 76, 101, 270, 304, 436, 437, 540, 554, 650, 666, 695, 726, 742], "process": [0, 161, 173, 542, 707, 708, 709, 715, 716, 721, 722, 723, 729, 731, 733, 735, 736, 737, 740, 742, 747, 755, 756, 757, 760, 761, 763, 764], "tensor": [0, 2, 5, 8, 9, 10, 13, 15, 16, 18, 26, 28, 31, 32, 33, 36, 37, 38, 39, 41, 48, 84, 92, 93, 96, 101, 117, 133, 225, 226, 252, 255, 265, 268, 269, 270, 276, 297, 302, 304, 307, 310, 311, 312, 313, 322, 323, 328, 329, 332, 336, 345, 346, 347, 348, 361, 362, 365, 367, 369, 370, 373, 377, 391, 394, 399, 402, 403, 404, 405, 408, 411, 441, 445, 488, 489, 540, 541, 543, 545, 547, 548, 549, 550, 554, 570, 572, 573, 585, 598, 605, 615, 617, 647, 686, 695, 704, 706, 719, 720, 724, 725, 730, 731, 734, 735, 736, 737, 738, 740, 742, 744, 745, 747, 750, 752, 754, 755, 758, 760, 761, 764], "shape": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 162, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 268, 269, 270, 271, 276, 277, 278, 280, 283, 285, 287, 289, 290, 291, 292, 296, 297, 299, 302, 304, 307, 310, 311, 312, 313, 316, 317, 318, 320, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 342, 343, 345, 346, 347, 348, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 389, 394, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 434, 435, 436, 437, 438, 452, 453, 457, 458, 459, 461, 464, 465, 468, 474, 481, 488, 489, 499, 507, 509, 521, 525, 526, 527, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 627, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 662, 663, 665, 666, 667, 668, 670, 672, 673, 675, 676, 677, 685, 686, 689, 698, 704, 716, 722, 724, 725, 726, 727, 728, 730, 734, 735, 736, 737, 738, 739, 742, 744, 745, 746, 747], "indic": [0, 5, 9, 10, 13, 14, 16, 17, 19, 20, 21, 26, 28, 29, 32, 33, 36, 37, 39, 40, 42, 43, 44, 49, 77, 78, 96, 99, 101, 122, 126, 127, 238, 270, 271, 286, 304, 307, 310, 311, 313, 318, 320, 328, 329, 330, 332, 336, 337, 338, 342, 343, 346, 347, 348, 349, 353, 359, 373, 381, 382, 383, 385, 387, 389, 391, 392, 393, 396, 400, 406, 407, 409, 410, 412, 413, 426, 427, 428, 449, 464, 465, 467, 488, 489, 493, 525, 528, 529, 540, 543, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 561, 563, 564, 565, 566, 569, 573, 589, 603, 611, 612, 613, 615, 616, 617, 618, 620, 622, 627, 630, 632, 634, 635, 636, 638, 642, 643, 644, 645, 646, 647, 653, 654, 655, 656, 658, 660, 662, 664, 665, 684, 686, 687, 688, 692, 698, 700, 723, 730, 733, 735, 747], "trace": [0, 2, 10, 14, 26, 33, 37, 476, 477, 480, 491, 500, 514, 522, 545, 548, 704, 718, 724, 739, 742, 750, 752, 758, 763], "doesn": [0, 474, 492, 545, 686, 715, 720, 722, 723, 724, 725, 726, 729, 731, 733, 737, 740, 742, 750, 755], "impos": 0, "addit": [0, 7, 9, 10, 17, 30, 32, 33, 40, 73, 75, 168, 177, 237, 322, 434, 439, 457, 458, 459, 525, 539, 542, 543, 545, 551, 553, 626, 646, 686, 714, 715, 716, 720, 724, 726, 727, 729, 731, 733, 734, 735, 737, 738, 740, 744, 745, 747, 757, 758, 759, 763], "restrict": [0, 722, 723, 735, 742, 754], "datatyp": [0, 5, 26, 28, 78, 91, 95, 111, 132, 136, 540, 541, 738], "out": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 117, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 304, 307, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 362, 363, 364, 366, 367, 368, 369, 374, 375, 376, 377, 378, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 452, 453, 457, 458, 459, 461, 464, 465, 474, 484, 488, 489, 526, 527, 530, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 627, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 757, 764], "differ": [0, 1, 2, 8, 9, 10, 14, 22, 26, 32, 33, 45, 51, 52, 61, 64, 119, 177, 194, 201, 202, 227, 243, 275, 280, 283, 284, 288, 307, 310, 311, 313, 322, 343, 353, 370, 373, 392, 393, 407, 436, 437, 444, 464, 465, 537, 541, 543, 545, 547, 548, 550, 558, 570, 571, 583, 594, 609, 619, 666, 667, 672, 674, 675, 688, 704, 706, 707, 708, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 750, 754, 755, 756, 757, 760, 763, 764], "b": [0, 3, 8, 9, 10, 13, 14, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 77, 78, 84, 89, 90, 91, 93, 96, 98, 103, 106, 107, 108, 109, 117, 127, 129, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 302, 304, 307, 310, 311, 312, 313, 317, 320, 322, 328, 329, 330, 331, 333, 334, 337, 341, 342, 343, 346, 347, 348, 352, 357, 359, 363, 368, 373, 374, 375, 377, 381, 382, 383, 384, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 400, 401, 407, 409, 410, 413, 414, 419, 420, 422, 423, 425, 426, 428, 435, 436, 437, 438, 440, 442, 444, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 481, 488, 489, 503, 504, 506, 510, 511, 524, 526, 527, 528, 530, 532, 534, 535, 537, 540, 541, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 577, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 630, 633, 634, 635, 636, 638, 639, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 698, 704, 705, 708, 709, 712, 716, 717, 718, 720, 722, 723, 726, 731, 733, 736, 741, 742, 743, 745, 746, 747, 748, 753], "new": [0, 1, 9, 10, 11, 16, 17, 26, 28, 32, 33, 34, 37, 39, 40, 85, 88, 90, 91, 96, 97, 98, 102, 103, 140, 183, 229, 231, 235, 275, 278, 288, 293, 307, 313, 322, 379, 386, 400, 406, 442, 457, 458, 459, 461, 464, 465, 467, 488, 489, 492, 494, 501, 503, 504, 510, 527, 530, 532, 533, 534, 540, 541, 543, 545, 546, 550, 552, 553, 583, 591, 611, 615, 619, 632, 644, 645, 646, 683, 686, 689, 690, 695, 704, 706, 707, 708, 709, 714, 715, 716, 717, 719, 720, 722, 723, 724, 726, 727, 729, 732, 734, 735, 736, 737, 738, 740, 741, 744, 747, 749, 752, 755, 759, 763, 764], "run": [0, 2, 9, 11, 32, 34, 316, 415, 417, 526, 527, 532, 546, 551, 624, 625, 626, 686, 687, 688, 689, 698, 704, 710, 711, 714, 715, 717, 719, 720, 723, 725, 726, 728, 729, 730, 732, 735, 736, 742, 743, 744, 745, 746, 747, 749, 750, 751, 755, 757, 758, 759, 760, 762, 763, 764], "under": [0, 2, 312, 376, 698, 704, 714, 715, 717, 718, 725, 726, 727, 729, 735, 736, 737, 740, 741, 742, 745, 747, 750, 757, 760, 764], "hood": [0, 2, 704, 717, 725, 726, 729, 735, 737, 740, 741, 742, 745, 747, 764], "track": [0, 552, 639, 684, 687, 688, 715, 716, 718, 733, 734, 757], "befor": [0, 2, 9, 13, 14, 16, 20, 22, 26, 32, 36, 37, 164, 167, 172, 310, 313, 322, 337, 342, 352, 392, 393, 394, 401, 436, 437, 542, 547, 548, 550, 551, 552, 556, 558, 560, 561, 562, 563, 565, 567, 569, 573, 574, 586, 603, 609, 624, 625, 639, 658, 659, 660, 661, 666, 667, 672, 674, 684, 695, 698, 714, 715, 716, 718, 719, 721, 724, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 742, 745, 750, 757], "instead": [0, 2, 8, 9, 14, 31, 32, 37, 148, 236, 262, 304, 310, 322, 346, 347, 348, 435, 438, 542, 543, 548, 589, 714, 715, 716, 718, 721, 723, 724, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 750, 755, 757, 763, 764], "allow": [0, 2, 9, 32, 92, 232, 322, 438, 442, 484, 540, 543, 545, 557, 664, 684, 687, 688, 702, 704, 707, 710, 714, 716, 719, 720, 723, 724, 728, 729, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 750, 752, 755, 757, 761, 762], "dynam": [0, 550, 615, 695, 717, 723, 724, 725, 734, 735, 739, 742, 757, 761], "done": [0, 2, 548, 582, 713, 714, 715, 716, 718, 721, 723, 725, 726, 729, 734, 735, 737, 745, 757], "first": [0, 1, 2, 5, 8, 9, 14, 16, 18, 19, 20, 22, 28, 31, 32, 33, 37, 39, 41, 43, 45, 49, 51, 52, 72, 73, 92, 93, 101, 132, 140, 150, 177, 182, 184, 186, 187, 188, 189, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 227, 230, 232, 243, 244, 252, 258, 259, 270, 272, 273, 275, 284, 286, 287, 288, 294, 298, 299, 302, 304, 307, 310, 311, 312, 313, 320, 322, 332, 357, 358, 359, 363, 377, 387, 391, 398, 401, 403, 404, 407, 412, 422, 424, 428, 436, 437, 438, 444, 449, 539, 540, 541, 542, 543, 545, 547, 548, 550, 551, 552, 555, 556, 557, 558, 573, 576, 579, 580, 581, 583, 586, 591, 593, 594, 596, 598, 602, 615, 616, 619, 620, 624, 625, 626, 627, 628, 637, 638, 640, 652, 653, 654, 658, 659, 660, 663, 664, 666, 667, 685, 686, 687, 688, 690, 695, 704, 706, 707, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 725, 726, 729, 730, 731, 732, 734, 735, 737, 740, 742, 744, 745, 747, 755, 757, 758, 762], "invok": [0, 2, 9, 310, 332, 704, 729], "onc": [0, 1, 14, 18, 37, 41, 167, 311, 358, 542, 548, 554, 580, 581, 582, 596, 647, 708, 714, 715, 716, 722, 723, 724, 725, 726, 729, 734, 735, 737, 740, 742, 745, 750], "been": [0, 1, 9, 10, 18, 32, 33, 41, 150, 237, 313, 408, 457, 458, 459, 542, 543, 545, 554, 647, 698, 714, 716, 718, 720, 722, 723, 724, 725, 727, 728, 730, 731, 734, 737, 742, 744, 749, 750, 752, 757, 764], "directli": [0, 1, 2, 311, 362, 552, 639, 704, 708, 716, 718, 719, 722, 723, 724, 725, 727, 729, 731, 732, 734, 735, 736, 738, 739, 742, 744, 746, 747, 749, 750, 761, 762, 763], "here": [0, 2, 32, 237, 378, 543, 704, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 726, 729, 730, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 749, 750, 757, 758], "eager_graph": [0, 2, 704], "doe": [0, 8, 9, 10, 16, 26, 31, 32, 39, 49, 101, 189, 228, 230, 238, 270, 304, 311, 312, 322, 323, 358, 376, 441, 442, 445, 474, 540, 543, 545, 548, 550, 580, 617, 707, 712, 714, 716, 717, 720, 723, 724, 726, 727, 729, 730, 731, 734, 735, 736, 737, 740, 742, 744, 745, 750, 752, 753, 757, 758, 764], "lazy_graph": [0, 2, 704], "up": [0, 9, 10, 32, 33, 310, 313, 332, 345, 393, 481, 545, 547, 570, 684, 706, 707, 708, 709, 710, 712, 714, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 758, 763, 764], "enabl": [0, 9, 14, 26, 37, 52, 310, 312, 332, 376, 492, 545, 548, 589, 704, 707, 715, 716, 719, 722, 724, 731, 732, 733, 734, 735, 737, 738, 741, 743, 745, 747, 750, 752, 755, 756, 757, 758, 759, 760, 763, 764], "delai": [0, 716], "until": [0, 707, 716, 734, 742, 750, 764], "have": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 119, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 271, 276, 277, 285, 287, 289, 290, 291, 292, 296, 299, 302, 304, 307, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 342, 343, 345, 346, 347, 348, 351, 353, 354, 355, 356, 358, 359, 362, 363, 366, 367, 368, 369, 372, 374, 375, 376, 377, 378, 382, 383, 386, 387, 389, 394, 402, 403, 404, 405, 407, 410, 411, 418, 419, 420, 421, 422, 424, 425, 426, 428, 435, 436, 437, 438, 442, 445, 452, 453, 457, 458, 459, 464, 465, 474, 488, 489, 492, 526, 527, 530, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 627, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 688, 689, 690, 691, 698, 704, 705, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 763, 764], "necessari": [0, 2, 5, 9, 28, 32, 39, 78, 194, 227, 313, 381, 382, 383, 387, 389, 391, 392, 393, 400, 413, 497, 519, 543, 545, 611, 612, 613, 615, 617, 618, 620, 622, 704, 715, 719, 720, 722, 726, 734, 735, 737, 739, 740], "particularli": [0, 716, 745, 750, 755], "librari": [0, 7, 20, 30, 168, 199, 201, 217, 222, 223, 245, 542, 543, 548, 556, 558, 581, 582, 658, 659, 660, 661, 669, 670, 671, 673, 704, 706, 707, 708, 709, 711, 714, 715, 718, 747, 748, 750, 752, 753, 754, 755, 757, 761, 764], "where": [0, 5, 8, 9, 10, 14, 16, 18, 19, 22, 23, 26, 28, 31, 32, 33, 37, 39, 41, 42, 45, 46, 49, 90, 91, 94, 96, 101, 182, 192, 194, 197, 199, 201, 202, 211, 216, 217, 218, 225, 226, 227, 232, 234, 238, 240, 244, 250, 252, 270, 272, 273, 284, 288, 295, 302, 304, 307, 310, 311, 312, 313, 316, 317, 322, 324, 325, 326, 332, 337, 338, 342, 358, 359, 361, 362, 364, 370, 373, 374, 381, 382, 383, 395, 401, 415, 416, 417, 421, 422, 424, 425, 435, 443, 444, 474, 488, 525, 540, 543, 545, 547, 548, 550, 552, 554, 555, 558, 559, 573, 576, 580, 581, 585, 587, 589, 591, 592, 593, 596, 597, 600, 602, 608, 610, 611, 613, 619, 623, 631, 638, 647, 648, 649, 650, 655, 656, 673, 675, 676, 677, 685, 689, 704, 706, 707, 708, 709, 712, 715, 716, 718, 719, 720, 721, 722, 724, 725, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 745, 746, 747, 750, 751, 755, 764], "feasibl": [0, 707, 714, 723], "provid": [0, 2, 5, 9, 10, 14, 16, 19, 22, 23, 26, 28, 32, 33, 37, 39, 42, 45, 46, 72, 94, 96, 112, 113, 114, 115, 116, 124, 134, 146, 150, 246, 311, 313, 316, 322, 357, 370, 373, 387, 396, 413, 415, 417, 444, 456, 488, 489, 539, 540, 541, 542, 543, 545, 547, 548, 550, 552, 555, 558, 559, 573, 588, 591, 602, 611, 612, 619, 631, 653, 673, 675, 676, 677, 686, 690, 695, 704, 706, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 744, 746, 749, 750, 755, 756, 757, 758, 759, 760, 761, 764], "valid": [0, 9, 13, 23, 32, 36, 46, 49, 111, 310, 311, 328, 329, 330, 346, 347, 348, 349, 351, 352, 368, 373, 477, 541, 545, 547, 550, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 611, 619, 676, 677, 686, 698, 715, 720, 724, 726, 729, 733, 736, 737, 758], "look": [0, 704, 706, 710, 714, 715, 716, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 742, 744, 746, 747, 751, 753, 757], "find": [0, 1, 14, 20, 26, 37, 548, 552, 556, 589, 629, 658, 659, 660, 661, 698, 704, 706, 709, 713, 714, 715, 716, 718, 721, 723, 733, 737, 740, 742, 745, 752], "abl": [0, 26, 49, 715, 716, 718, 724, 731, 734, 735, 738, 742, 747, 760, 763], "through": [0, 9, 32, 182, 322, 441, 442, 543, 552, 630, 636, 688, 698, 704, 709, 712, 713, 714, 716, 717, 720, 721, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 745, 746, 747, 749, 755, 757, 758, 759], "flag": [0, 2, 26, 150, 322, 435, 542, 547, 573, 689, 716, 724, 725, 734, 735, 736, 737], "reduc": [0, 9, 10, 14, 19, 22, 23, 26, 32, 33, 37, 42, 45, 46, 167, 293, 307, 308, 322, 440, 441, 442, 443, 444, 458, 542, 545, 548, 555, 558, 559, 593, 653, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 698, 723, 728, 735, 740, 742, 744, 755, 759, 760, 761], "time": [0, 1, 2, 9, 11, 14, 20, 32, 34, 43, 49, 89, 280, 307, 310, 311, 313, 322, 338, 343, 369, 373, 401, 407, 435, 527, 532, 540, 546, 547, 548, 550, 551, 555, 556, 570, 572, 586, 621, 624, 625, 626, 653, 654, 658, 659, 686, 687, 688, 706, 707, 708, 714, 715, 716, 720, 722, 723, 724, 726, 730, 731, 732, 734, 735, 737, 738, 742, 745, 747, 750, 755, 757, 758, 761, 762, 763], "comp_func": 0, "default": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 126, 127, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 150, 151, 153, 154, 158, 161, 162, 163, 165, 166, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 498, 502, 503, 504, 506, 508, 510, 511, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 698, 714, 715, 716, 720, 721, 724, 725, 726, 727, 728, 730, 731, 735, 737, 740, 742, 746, 752, 757], "follow": [0, 9, 10, 11, 13, 14, 20, 26, 32, 33, 34, 36, 37, 89, 122, 167, 177, 194, 201, 227, 229, 236, 237, 265, 304, 310, 313, 316, 332, 345, 389, 401, 406, 415, 417, 472, 473, 474, 503, 504, 527, 530, 532, 533, 534, 540, 541, 542, 543, 545, 546, 547, 548, 552, 556, 573, 574, 587, 593, 603, 633, 639, 658, 659, 660, 661, 686, 690, 704, 706, 707, 711, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 754, 757, 760], "show": [0, 491, 500, 522, 545, 684, 704, 714, 715, 716, 721, 723, 726, 729, 734, 735, 737, 739, 749, 750, 757], "simpler": [0, 714, 716, 729, 758, 764], "obtain": [0, 9, 32, 265, 304, 310, 349, 547, 573, 735], "howev": [0, 14, 37, 201, 244, 245, 316, 415, 417, 492, 543, 545, 548, 594, 596, 695, 707, 714, 715, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 740, 742, 744, 745, 746, 747, 750, 756, 757, 763], "desir": [0, 6, 7, 9, 19, 26, 29, 30, 32, 42, 49, 106, 108, 109, 168, 265, 297, 304, 307, 313, 322, 399, 441, 443, 444, 541, 542, 548, 555, 598, 655, 685, 686, 706, 716, 720, 723, 724, 725, 735, 742, 757], "below": [0, 2, 5, 9, 14, 37, 45, 99, 100, 101, 201, 211, 234, 270, 271, 277, 304, 307, 540, 543, 548, 579, 600, 675, 704, 709, 714, 715, 717, 718, 722, 723, 724, 725, 726, 728, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 753, 755, 760, 762], "ultim": 0, "trade": 0, "off": [0, 13, 14, 36, 37, 333, 334, 335, 547, 548, 570, 579, 600, 685, 686, 708, 715, 741, 763], "between": [0, 2, 8, 9, 10, 13, 14, 15, 16, 20, 26, 31, 32, 36, 38, 39, 52, 76, 119, 182, 195, 230, 232, 246, 275, 288, 290, 307, 310, 311, 312, 313, 322, 333, 334, 335, 346, 347, 348, 357, 374, 375, 376, 377, 378, 401, 444, 540, 541, 543, 547, 549, 550, 552, 554, 556, 570, 591, 605, 606, 607, 611, 619, 633, 648, 659, 660, 661, 690, 706, 719, 720, 726, 730, 731, 732, 734, 735, 736, 737, 740, 741, 743, 744, 745, 747, 749, 753, 754, 756, 757, 758, 763], "memori": [0, 5, 9, 16, 28, 32, 39, 78, 94, 149, 161, 167, 169, 173, 313, 322, 381, 382, 387, 389, 391, 392, 393, 400, 413, 442, 487, 492, 515, 540, 542, 545, 547, 550, 572, 611, 612, 613, 615, 617, 618, 620, 622, 704, 723, 724, 725, 734, 735, 740, 742, 748, 750, 757, 759, 760, 761], "store": [0, 6, 9, 10, 14, 16, 26, 29, 32, 33, 37, 39, 108, 310, 311, 353, 357, 461, 545, 548, 550, 600, 617, 686, 687, 688, 711, 716, 719, 720, 722, 727, 732, 734, 735, 736, 742, 744, 745, 746, 752], "thei": [0, 9, 14, 18, 20, 26, 37, 41, 43, 132, 246, 283, 307, 541, 543, 548, 551, 554, 556, 601, 624, 625, 647, 658, 691, 704, 713, 714, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 740, 742, 744, 745, 746, 747, 750, 754, 757, 759, 760, 763, 764], "By": [0, 9, 15, 16, 22, 23, 32, 38, 39, 45, 46, 241, 274, 286, 293, 304, 307, 310, 312, 320, 322, 332, 376, 428, 435, 438, 492, 543, 545, 548, 549, 550, 558, 559, 576, 602, 605, 614, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 715, 720, 724, 726, 728, 731, 733, 734, 735, 742, 746, 747], "choos": [0, 7, 19, 20, 30, 168, 194, 201, 222, 223, 227, 313, 542, 543, 555, 556, 558, 657, 658, 659, 660, 661, 669, 670, 671, 673, 714, 715, 716, 732, 737, 743, 747], "node": [0, 2, 26, 33, 52, 450, 506, 552, 637, 638, 685, 694, 707, 721, 722, 735, 758], "bake": 0, "randint": [0, 13, 18, 20, 36, 41, 554, 556, 569, 572, 658, 724], "0": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 75, 76, 84, 87, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 117, 119, 122, 123, 127, 129, 134, 147, 150, 152, 155, 160, 161, 162, 163, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 320, 322, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 369, 370, 373, 374, 375, 376, 377, 378, 380, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 449, 451, 452, 453, 456, 457, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 484, 486, 488, 489, 493, 498, 502, 503, 504, 506, 508, 510, 511, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 586, 587, 588, 589, 590, 592, 594, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 698, 704, 712, 715, 716, 718, 720, 722, 723, 724, 725, 726, 727, 728, 733, 734, 735, 736, 737, 738, 742, 744, 745, 746, 747, 750], "100": [0, 5, 8, 9, 28, 31, 32, 33, 36, 50, 93, 101, 188, 228, 241, 270, 288, 297, 304, 307, 310, 311, 333, 334, 370, 373, 465, 473, 489, 540, 543, 545, 548, 552, 584, 633, 704, 707, 708, 723, 724, 737, 745, 746, 747, 750], "size": [0, 9, 10, 13, 14, 16, 18, 19, 26, 32, 33, 36, 37, 39, 41, 42, 49, 51, 52, 89, 92, 165, 166, 167, 258, 261, 265, 272, 273, 274, 279, 293, 300, 304, 307, 308, 310, 311, 313, 316, 317, 320, 322, 324, 325, 326, 327, 328, 329, 345, 346, 347, 349, 350, 359, 370, 373, 387, 399, 410, 416, 417, 423, 428, 440, 441, 442, 443, 444, 483, 488, 540, 542, 545, 547, 548, 550, 554, 555, 559, 574, 576, 579, 583, 587, 591, 593, 596, 602, 611, 616, 617, 618, 647, 653, 656, 676, 677, 686, 704, 734, 736, 737, 740, 745], "rand": [0, 698, 704], "And": [0, 29, 704, 718, 721, 729, 731, 737], "final": [0, 2, 5, 10, 32, 33, 49, 75, 92, 93, 310, 353, 461, 539, 540, 545, 547, 573, 714, 716, 718, 719, 720, 721, 723, 724, 726, 727, 731, 733, 734, 735, 740, 741, 745, 753, 763], "__setattr__": [0, 722], "__getattr__": [0, 722], "arbitrari": [0, 2, 5, 6, 9, 26, 29, 94, 107, 134, 381, 382, 383, 528, 540, 541, 546, 730, 731, 733, 734, 735, 737, 746, 750, 758, 763], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 89, 98, 103, 119, 122, 135, 137, 138, 197, 234, 277, 297, 307, 321, 322, 329, 330, 358, 441, 442, 448, 457, 461, 474, 484, 506, 540, 541, 542, 543, 545, 547, 549, 552, 553, 572, 574, 580, 591, 596, 605, 621, 627, 628, 639, 646, 661, 668, 672, 673, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 698, 702, 704, 714, 720, 721, 722, 724, 725, 726, 727, 730, 732, 733, 736, 737, 740, 742, 743, 745, 746, 747, 748, 749, 750, 752, 755, 757, 758, 764], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 117, 119, 120, 121, 122, 125, 126, 127, 129, 131, 134, 151, 153, 154, 155, 160, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 309, 310, 311, 312, 313, 316, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 493, 496, 498, 503, 504, 505, 506, 508, 510, 511, 518, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 634, 635, 636, 639, 640, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 686, 687, 688, 690, 691, 695, 698, 704, 706, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 723, 724, 726, 727, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 746, 750, 751, 752, 757, 758, 763], "cont_deep_copi": [0, 26, 745], "some": [0, 2, 26, 34, 199, 201, 217, 310, 333, 334, 335, 526, 527, 530, 532, 533, 534, 542, 543, 546, 552, 638, 686, 704, 707, 708, 712, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 749, 750, 751, 752, 753, 754, 756, 757, 758, 763, 764], "still": [0, 2, 14, 26, 37, 548, 596, 707, 714, 716, 719, 720, 724, 727, 728, 729, 731, 734, 735, 737, 740, 746, 750, 754, 757, 763], "develop": [0, 2, 704, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 721, 723, 738, 749, 750, 752, 755, 756, 757, 758, 759, 762, 763, 764], "account": [0, 9, 16, 32, 39, 241, 313, 391, 543, 550, 615, 685, 698, 715, 723, 727, 735, 738], "point": [0, 6, 8, 9, 14, 18, 20, 22, 29, 31, 32, 37, 41, 45, 76, 77, 78, 85, 87, 90, 97, 98, 102, 106, 119, 123, 127, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 207, 208, 209, 210, 215, 216, 217, 218, 219, 227, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 258, 259, 261, 290, 291, 294, 296, 304, 307, 310, 311, 312, 317, 322, 333, 334, 335, 358, 372, 374, 421, 422, 423, 424, 425, 435, 436, 437, 444, 538, 540, 541, 543, 548, 554, 555, 556, 557, 558, 575, 577, 580, 581, 582, 584, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 600, 603, 649, 650, 656, 658, 659, 660, 661, 664, 666, 667, 669, 670, 671, 672, 673, 674, 675, 695, 708, 712, 714, 715, 716, 718, 719, 720, 721, 723, 726, 727, 730, 734, 735, 737, 738, 740, 742, 744, 745, 749, 763], "wip": [0, 729], "ll": [0, 1, 2, 704, 708, 709, 712, 714, 715, 716, 721, 726, 729, 733, 734, 745], "soon": [0, 714, 716, 723, 724, 748, 750], "control": [0, 9, 32, 101, 249, 270, 302, 304, 310, 313, 333, 334, 335, 385, 409, 492, 540, 545, 548, 578, 684, 722, 724, 725, 733, 734, 735, 736, 740, 744, 745, 749, 752, 757, 763], "flow": [0, 722, 749, 757, 758], "built": [0, 76, 540, 686, 687, 688, 704, 715, 716, 721, 722, 737, 743, 751, 752, 756, 757, 761], "moment": [0, 2, 11, 34, 526, 527, 532, 546, 690, 714, 720, 750], "condit": [0, 19, 32, 42, 73, 311, 355, 539, 552, 555, 637, 638, 657, 718, 724, 726, 728, 731, 732, 734, 737, 749], "branch": [0, 182, 194, 197, 199, 227, 239, 240, 241, 244, 543, 715, 716, 718, 723, 729, 750, 757], "loop": [0, 24, 47, 72, 75, 539, 551, 624, 625, 626, 704, 720, 750], "regist": [0, 716], "correctli": [0, 2, 9, 14, 19, 32, 37, 42, 279, 307, 322, 441, 442, 443, 444, 548, 555, 587, 653, 714, 715, 716, 719, 722, 724, 726, 728, 729, 730, 736, 737, 740, 746, 750], "while": [0, 1, 9, 13, 26, 32, 36, 49, 52, 75, 96, 133, 201, 202, 222, 223, 284, 307, 310, 311, 313, 353, 368, 403, 404, 434, 539, 540, 541, 543, 547, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 658, 670, 673, 706, 707, 712, 714, 715, 716, 719, 720, 721, 723, 724, 725, 726, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 744, 746, 747, 750, 757, 763, 764], "your": [0, 1, 2, 704, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 721, 723, 727, 729, 733, 735, 738, 740, 745, 746, 750, 751, 757], "depend": [0, 5, 6, 9, 10, 14, 20, 21, 29, 32, 37, 44, 45, 73, 84, 106, 174, 175, 176, 179, 180, 181, 182, 191, 192, 194, 197, 199, 215, 216, 217, 218, 227, 229, 232, 239, 240, 244, 245, 296, 307, 311, 358, 371, 506, 539, 540, 541, 543, 545, 548, 555, 557, 580, 581, 593, 594, 595, 596, 657, 662, 665, 675, 704, 707, 710, 711, 712, 714, 715, 716, 721, 724, 725, 727, 732, 734, 735, 736, 737, 740, 742, 750, 751, 755, 757, 758], "chang": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 313, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 537, 543, 550, 552, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 592, 593, 594, 596, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 639, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 704, 708, 710, 714, 715, 716, 718, 720, 721, 722, 723, 724, 726, 727, 729, 735, 736, 737, 738, 739, 740, 742, 746, 750, 751, 760, 763], "number": [0, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 49, 51, 52, 55, 76, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 107, 112, 113, 114, 115, 116, 118, 119, 122, 125, 126, 127, 129, 131, 134, 158, 159, 160, 174, 175, 176, 177, 178, 180, 182, 183, 190, 192, 194, 195, 197, 199, 200, 201, 207, 208, 209, 211, 215, 217, 225, 226, 227, 228, 229, 230, 232, 234, 236, 237, 238, 240, 241, 245, 247, 255, 265, 268, 269, 270, 272, 273, 275, 277, 278, 279, 280, 288, 293, 297, 302, 304, 307, 310, 311, 313, 316, 322, 343, 353, 355, 358, 361, 362, 370, 372, 373, 381, 382, 383, 401, 402, 403, 404, 405, 407, 410, 412, 415, 416, 417, 433, 435, 436, 437, 438, 443, 461, 468, 486, 503, 504, 511, 524, 525, 538, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 554, 555, 556, 558, 559, 560, 567, 568, 570, 573, 576, 580, 581, 582, 589, 594, 596, 600, 601, 602, 605, 608, 610, 611, 613, 614, 616, 617, 619, 621, 623, 624, 625, 626, 647, 651, 656, 658, 659, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 689, 704, 705, 706, 715, 716, 722, 723, 724, 725, 726, 732, 733, 734, 737, 738, 739, 740, 742, 745], "underli": [0, 9, 16, 32, 39, 184, 187, 189, 224, 313, 391, 543, 548, 550, 594, 615, 722, 734, 740, 757], "piec": [0, 716, 719, 731, 732, 742, 753, 755], "insid": [0, 14, 37, 52, 313, 410, 548, 589, 715, 716, 719, 722, 724, 725, 731, 732, 737, 738, 763], "said": [0, 708, 738], "other": [0, 2, 6, 8, 9, 10, 16, 22, 26, 29, 31, 32, 33, 39, 45, 49, 51, 52, 76, 96, 107, 133, 194, 199, 201, 217, 226, 227, 276, 280, 307, 313, 386, 394, 406, 446, 447, 540, 541, 543, 545, 554, 558, 609, 619, 650, 673, 675, 704, 707, 710, 714, 715, 716, 718, 719, 722, 723, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 763, 764], "numpi": [0, 2, 8, 9, 10, 22, 31, 32, 33, 101, 130, 148, 178, 238, 270, 304, 322, 435, 442, 450, 474, 503, 506, 510, 540, 541, 542, 543, 545, 558, 668, 695, 698, 704, 706, 707, 713, 714, 715, 716, 718, 719, 720, 723, 724, 725, 728, 730, 734, 736, 737, 738, 740, 742, 744, 747, 751, 752, 759, 764], "len": [0, 5, 9, 14, 32, 37, 94, 262, 304, 310, 311, 322, 343, 353, 362, 370, 373, 444, 540, 548, 601, 704, 722, 723, 728, 734, 735, 737, 744, 747], "incorrectli": [0, 727], "There": [0, 49, 303, 305, 306, 314, 315, 319, 704, 706, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 728, 729, 731, 733, 735, 736, 739, 742, 745, 750, 758, 759, 763, 764], "succe": [0, 715], "hide": [0, 728], "shouldn": [0, 738], "realli": [0, 715, 722, 750, 762, 763], "check": [0, 4, 6, 10, 14, 26, 29, 33, 37, 67, 110, 111, 120, 121, 124, 126, 127, 128, 131, 146, 153, 154, 161, 173, 450, 460, 462, 463, 470, 476, 477, 478, 479, 480, 496, 506, 518, 524, 537, 541, 542, 545, 548, 552, 581, 582, 589, 627, 628, 637, 638, 639, 684, 698, 704, 711, 713, 714, 715, 716, 718, 722, 723, 725, 726, 728, 732, 734, 735, 736, 737, 738, 739, 741, 742, 744, 745, 746, 751], "recommend": [0, 222, 223, 236, 543, 558, 670, 673, 715, 720, 721, 729, 732, 733], "nois": [0, 2, 704], "anoth": [0, 2, 88, 107, 109, 540, 541, 704, 707, 714, 715, 716, 720, 722, 724, 725, 728, 729, 731, 734, 735, 737, 742, 744, 747, 752, 757, 763], "right": [0, 9, 14, 26, 32, 37, 52, 70, 71, 186, 188, 241, 287, 307, 310, 311, 313, 344, 365, 371, 372, 392, 457, 539, 543, 545, 548, 557, 596, 601, 664, 709, 714, 715, 716, 717, 718, 726, 740, 745], "feel": [0, 1, 51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 704, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741], "free": [0, 1, 51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 704, 710, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 749, 758, 760], "open": [0, 1, 2, 10, 18, 41, 76, 540, 554, 648, 650, 704, 706, 707, 708, 709, 715, 716, 721, 724, 727, 735, 736, 740, 749, 755, 756, 757, 759, 760], "issu": [0, 685, 708, 709, 712, 713, 715, 718, 720, 723, 724, 725, 726, 728, 735, 737, 738, 740, 742, 746, 750], "minim": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 592, 593, 594, 596, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 727, 734, 736, 740, 742, 755, 763], "resnet50": 0, "hug": 0, "face": [0, 709, 715, 718, 729, 733, 740, 742, 757, 763], "classifi": [0, 2, 704], "breed": 0, "cat": [0, 2, 736, 740, 742, 747], "transform": [0, 2, 9, 13, 32, 36, 310, 311, 331, 332, 337, 338, 341, 342, 343, 353, 365, 547, 571, 686, 704, 732, 737, 747, 749, 752, 755, 757, 758, 759], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 26, 704, 745, 748], "load_dataset": [0, 2], "download": [0, 2, 715, 737], "imag": [0, 2, 8, 9, 13, 31, 32, 36, 51, 174, 175, 176, 177, 180, 183, 192, 195, 197, 199, 208, 209, 210, 215, 217, 230, 237, 238, 240, 241, 245, 310, 328, 329, 345, 346, 347, 349, 457, 543, 545, 547, 560, 561, 562, 563, 564, 567, 568, 569, 686, 704, 710, 715, 740, 742, 743, 745, 747, 749, 751, 757], "huggingfac": [0, 2], "test": [0, 2, 8, 10, 23, 31, 33, 46, 75, 125, 129, 208, 209, 210, 211, 234, 310, 333, 334, 335, 481, 539, 541, 543, 545, 559, 676, 677, 704, 708, 712, 713, 714, 717, 721, 724, 726, 728, 729, 732, 735, 738, 750, 751, 757], "image_processor": [0, 2], "from_pretrain": [0, 2], "microsoft": [0, 2, 707, 757, 762, 764], "resnet": [0, 2], "50": [0, 2, 9, 22, 31, 32, 33, 193, 233, 294, 307, 310, 311, 338, 357, 363, 459, 465, 472, 473, 489, 503, 543, 545, 548, 552, 555, 558, 584, 591, 628, 630, 656, 668, 733, 744], "preprocess": 0, "return_tensor": [0, 2], "pt": 0, "normal": [0, 9, 17, 18, 32, 40, 41, 49, 296, 307, 310, 316, 322, 331, 332, 337, 338, 341, 342, 343, 353, 415, 416, 417, 418, 419, 420, 435, 438, 550, 553, 554, 609, 619, 646, 647, 649, 685, 686, 689, 704, 714, 734, 735, 740, 745, 755], "feed": [0, 167, 542, 757, 758], "itself": [0, 8, 49, 228, 447, 512, 543, 545, 552, 639, 706, 712, 715, 716, 718, 721, 722, 723, 724, 725, 728, 729, 734, 735, 746, 749, 750, 756, 757, 758, 763], "without": [0, 20, 26, 498, 512, 545, 550, 552, 556, 615, 628, 658, 659, 660, 661, 698, 716, 719, 720, 722, 723, 724, 725, 726, 728, 730, 731, 735, 737, 738, 740, 744, 745, 746, 749, 750, 754, 757, 758, 759, 763], "pytorch": [0, 2, 237, 543, 690, 704, 707, 708, 713, 714, 719, 724, 725, 728, 730, 731, 734, 735, 736, 740, 742, 747, 750, 752, 758, 760, 761, 763, 764], "no_grad": 0, "logit": [0, 9, 15, 32, 38, 302, 317, 421, 424, 549, 605, 607, 682, 704], "With": [0, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 106, 107, 108, 109, 111, 117, 118, 119, 122, 129, 134, 135, 136, 137, 138, 148, 151, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 258, 259, 261, 277, 279, 285, 288, 289, 290, 292, 293, 296, 302, 304, 307, 310, 311, 312, 313, 322, 331, 333, 334, 341, 355, 356, 357, 359, 360, 368, 377, 391, 392, 393, 395, 398, 400, 401, 407, 410, 412, 426, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 450, 451, 452, 453, 456, 457, 458, 459, 460, 464, 465, 468, 470, 472, 473, 474, 488, 489, 503, 504, 506, 508, 510, 511, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 574, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 588, 589, 590, 594, 596, 597, 598, 600, 601, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 707, 708, 715, 726, 735, 737, 740, 742, 757, 760], "compiled_graph": 0, "our": [0, 24, 47, 51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 709, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 726, 728, 729, 732, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 750, 762, 763], "predicted_label": 0, "argmax": [0, 19, 42, 555, 704, 735], "item": [0, 4, 10, 24, 26, 28, 31, 32, 33, 89, 113, 150, 204, 220, 228, 280, 282, 295, 454, 464, 465, 469, 503, 504, 540, 541, 542, 545, 552, 559, 632, 633, 634, 635, 639, 644, 645, 679, 687, 688, 704, 714, 722, 724, 742, 744, 745, 747], "config": [0, 26, 552, 640, 704, 710, 715, 718, 721, 723, 729, 736, 745, 758], "id2label": 0, "us": [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 41, 42, 47, 49, 52, 59, 93, 96, 106, 118, 120, 121, 132, 133, 153, 154, 156, 161, 165, 166, 167, 168, 170, 173, 179, 187, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 237, 241, 246, 258, 260, 261, 263, 264, 265, 269, 286, 289, 290, 293, 304, 307, 310, 311, 313, 316, 317, 318, 320, 322, 328, 329, 330, 332, 333, 334, 335, 336, 338, 343, 345, 346, 347, 348, 351, 353, 357, 359, 361, 365, 367, 369, 370, 371, 372, 373, 391, 395, 399, 401, 415, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 442, 444, 462, 463, 472, 473, 484, 492, 494, 495, 497, 503, 504, 516, 517, 519, 526, 527, 532, 533, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 558, 571, 573, 574, 579, 581, 589, 597, 603, 605, 614, 615, 616, 620, 624, 625, 626, 627, 629, 630, 636, 637, 638, 640, 647, 648, 649, 650, 652, 653, 654, 655, 658, 660, 668, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 698, 702, 708, 709, 710, 713, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "compil": [1, 2, 245, 543, 687, 688, 690, 704, 722, 735, 738, 740, 741, 743, 750, 751, 752, 753, 756, 757, 758, 761, 764], "grant": [1, 704], "pilot": [1, 704, 713], "access": [1, 2, 26, 704, 714, 715, 716, 723, 724, 729, 734, 735, 757, 759, 761], "user": [1, 228, 245, 313, 401, 492, 543, 545, 684, 686, 687, 688, 698, 704, 706, 707, 710, 715, 716, 717, 719, 720, 722, 723, 724, 725, 728, 732, 733, 734, 735, 737, 739, 740, 741, 742, 750, 751, 755, 757, 763, 764], "join": [1, 16, 26, 32, 39, 386, 550, 609, 619, 704], "waitlist": [1, 704], "want": [1, 2, 9, 24, 32, 47, 194, 227, 313, 389, 543, 684, 688, 704, 707, 709, 711, 714, 715, 716, 721, 723, 725, 728, 729, 731, 732, 733, 734, 737, 740, 745, 746, 747, 750, 751], "get": [1, 2, 7, 14, 26, 30, 37, 51, 117, 118, 119, 122, 150, 151, 152, 155, 161, 166, 169, 173, 448, 466, 487, 505, 541, 542, 545, 548, 552, 603, 629, 684, 685, 686, 698, 704, 708, 709, 713, 714, 715, 717, 718, 723, 724, 725, 731, 732, 733, 734, 735, 736, 737, 742, 743, 744, 745, 746, 752, 757, 763], "one": [1, 2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 42, 43, 44, 45, 49, 76, 84, 94, 96, 97, 98, 107, 109, 167, 188, 194, 201, 202, 219, 225, 226, 227, 246, 252, 258, 261, 262, 275, 279, 284, 285, 288, 289, 290, 292, 293, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 322, 331, 333, 337, 338, 341, 342, 345, 354, 355, 362, 369, 377, 381, 382, 383, 391, 392, 393, 398, 400, 405, 408, 415, 416, 417, 421, 426, 436, 437, 440, 441, 442, 443, 444, 446, 484, 488, 489, 491, 508, 510, 511, 524, 526, 527, 530, 532, 534, 535, 540, 541, 542, 543, 545, 546, 547, 548, 550, 553, 555, 556, 558, 561, 562, 563, 564, 565, 566, 569, 583, 586, 587, 591, 593, 602, 603, 611, 612, 613, 616, 618, 622, 646, 653, 656, 658, 659, 660, 661, 666, 668, 689, 692, 695, 701, 704, 707, 708, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 744, 745, 747, 750, 752, 757, 758, 760, 763], "directori": [1, 501, 523, 542, 545, 710, 711, 714, 715, 716, 721, 723, 735, 737], "keep": [1, 2, 9, 16, 26, 32, 39, 49, 297, 311, 373, 550, 622, 713, 714, 715, 716, 718, 720, 721, 722, 723, 728, 734, 735, 737, 738, 740, 745, 747, 751], "locat": [1, 96, 322, 436, 540, 552, 554, 557, 631, 647, 664, 714, 716, 720, 721, 725, 735, 736, 737, 738, 755], "ivy_root": 1, "environ": [1, 704, 709, 710, 716, 749, 751, 757, 759], "path": [1, 694, 715, 721, 734, 735, 736, 757], "either": [1, 2, 8, 9, 10, 13, 22, 26, 31, 32, 33, 36, 37, 61, 64, 67, 73, 88, 89, 174, 175, 176, 177, 182, 192, 194, 195, 197, 199, 201, 208, 209, 215, 216, 217, 218, 219, 227, 236, 238, 239, 241, 244, 245, 276, 296, 307, 310, 322, 331, 341, 351, 352, 436, 437, 456, 476, 484, 485, 493, 512, 537, 539, 540, 543, 545, 547, 548, 551, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 586, 591, 594, 598, 624, 625, 626, 666, 667, 672, 674, 684, 686, 687, 688, 695, 714, 715, 716, 720, 722, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 737, 740, 742, 745, 750, 757], "manual": [1, 552, 627, 637, 638, 714, 715, 716, 724, 729, 737, 746], "automat": [1, 708, 714, 715, 716, 717, 720, 721, 723, 724, 729, 731, 734, 737, 740, 741, 743, 746, 747, 752, 757, 760, 764], "past": [1, 716, 718, 736, 737, 757], "content": [1, 9, 26, 32, 322, 442, 714, 716, 721, 725, 734, 742, 745], "pem": 1, "file": [1, 10, 26, 501, 523, 545, 688, 714, 715, 716, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 731, 735, 736, 737, 738, 742, 745, 753, 756, 757, 758], "refer": [1, 9, 16, 22, 23, 32, 34, 39, 45, 46, 87, 101, 199, 217, 259, 270, 295, 304, 307, 310, 311, 313, 338, 343, 353, 356, 373, 391, 526, 527, 540, 543, 546, 548, 550, 558, 559, 576, 578, 602, 615, 673, 675, 676, 677, 686, 704, 713, 714, 715, 716, 718, 719, 721, 723, 724, 730, 731, 732, 733, 734, 735, 736, 737, 750, 752, 757], "equival": [1, 2, 14, 37, 49, 76, 188, 201, 222, 223, 236, 237, 313, 412, 540, 543, 548, 589, 592, 595, 603, 695, 734, 735, 740, 745, 747], "echo": [1, 715, 723], "n": [1, 2, 5, 8, 9, 13, 14, 16, 18, 19, 22, 23, 31, 32, 36, 37, 39, 41, 42, 45, 46, 49, 51, 94, 99, 100, 101, 174, 244, 246, 270, 271, 280, 304, 307, 310, 311, 313, 316, 317, 320, 322, 324, 325, 326, 331, 332, 337, 338, 341, 342, 343, 351, 352, 353, 359, 360, 367, 369, 373, 383, 387, 390, 394, 396, 407, 413, 415, 416, 417, 421, 422, 423, 424, 425, 428, 435, 444, 540, 543, 547, 548, 550, 552, 554, 555, 558, 559, 560, 561, 562, 563, 565, 567, 569, 576, 579, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 600, 601, 602, 603, 610, 611, 613, 619, 623, 635, 648, 649, 650, 656, 670, 672, 673, 674, 675, 676, 677, 686, 689, 698, 704, 717, 721, 723, 737], "api_kei": 1, "bug": [1, 201, 543, 704, 714, 716, 721, 729, 735, 737], "pleas": [1, 51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749], "rais": [1, 5, 9, 10, 18, 20, 23, 26, 28, 32, 33, 39, 41, 43, 46, 78, 108, 197, 232, 283, 307, 310, 313, 317, 322, 343, 353, 381, 382, 387, 389, 391, 392, 393, 400, 406, 413, 422, 441, 442, 450, 474, 492, 494, 504, 506, 512, 516, 541, 543, 545, 548, 550, 554, 555, 556, 558, 559, 586, 588, 602, 611, 612, 613, 615, 617, 618, 619, 620, 622, 648, 649, 650, 656, 661, 669, 671, 676, 677, 687, 688, 690, 704, 707, 716, 718, 720, 724, 725, 728, 734, 735, 738, 739, 742, 744], "github": [1, 704, 706, 710, 711, 713, 716, 718, 723, 724, 726, 727, 729, 737, 751], "add": [1, 8, 9, 17, 24, 26, 31, 32, 40, 47, 51, 52, 300, 308, 310, 352, 484, 512, 543, 545, 548, 553, 558, 600, 646, 674, 686, 689, 704, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 734, 735, 737, 738, 740, 742, 744, 750, 753, 755, 757], "label": [1, 9, 15, 32, 38, 312, 374, 376, 377, 378, 549, 605, 606, 607, 704, 714, 718, 735, 741, 742, 743, 747, 757], "accordingli": [1, 14, 19, 20, 22, 23, 37, 42, 45, 46, 94, 194, 199, 201, 217, 227, 241, 540, 543, 548, 555, 556, 558, 559, 603, 654, 658, 659, 660, 661, 669, 670, 671, 672, 673, 674, 675, 676, 677, 735, 742], "member": [1, 707, 714, 716, 735], "team": [1, 704, 709, 714, 715, 716, 735, 759], "back": [1, 9, 16, 32, 39, 313, 391, 490, 513, 545, 547, 550, 573, 615, 685, 687, 688, 690, 707, 715, 719, 724, 725, 728, 732, 733, 739, 741, 750, 755, 759], "asap": 1, "haven": [1, 757], "found": [1, 14, 16, 20, 26, 32, 37, 39, 43, 52, 155, 322, 386, 436, 542, 552, 579, 586, 619, 638, 658, 684, 710, 714, 715, 716, 719, 720, 721, 722, 724, 725, 727, 729, 732, 734, 735, 759], "ask": [1, 704, 708, 714, 715, 726, 742, 744, 750], "suggest": [1, 714, 715, 716, 721, 724, 729, 733, 735, 737, 738, 739], "someth": [1, 704, 716, 720, 729, 738, 745, 746, 750, 763], "help": [1, 447, 492, 545, 558, 674, 685, 704, 709, 710, 711, 714, 715, 719, 720, 721, 722, 723, 724, 726, 729, 731, 732, 734, 735, 737, 738, 744, 745, 746, 748, 752, 753, 757, 759, 763], "post": [1, 17, 40, 553, 646, 715, 733, 747], "forum": [1, 721], "discord": [1, 51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749], "server": [1, 704, 715, 716, 721, 757], "convert": [2, 4, 5, 8, 26, 27, 28, 31, 49, 77, 78, 95, 104, 105, 147, 148, 149, 150, 161, 169, 173, 193, 233, 313, 318, 381, 382, 383, 426, 490, 507, 509, 510, 511, 513, 540, 541, 542, 543, 545, 548, 552, 604, 628, 639, 640, 695, 698, 704, 708, 714, 719, 720, 732, 733, 735, 737, 739, 742, 750, 752, 755, 756, 763], "written": [2, 10, 704, 706, 715, 718, 719, 727, 729, 730, 734, 735, 738, 742, 744, 747, 750, 755, 757, 761, 763, 764], "choic": [2, 9, 22, 32, 45, 311, 313, 371, 385, 558, 673, 675, 704, 708, 715, 723, 734, 735, 745, 757, 764], "preserv": [2, 9, 10, 11, 26, 32, 33, 34, 52, 310, 311, 313, 322, 345, 370, 381, 382, 383, 392, 393, 442, 474, 535, 545, 546, 550, 612, 737, 747, 750], "logic": [2, 23, 46, 158, 194, 195, 221, 222, 223, 227, 230, 542, 543, 559, 676, 677, 714, 719, 723, 724, 725, 728, 731, 732, 733, 734, 735, 737, 740, 744], "target": [2, 9, 32, 149, 312, 375, 376, 377, 378, 542, 686, 688, 694, 704, 712, 715, 717, 720, 729, 736, 741, 745, 746, 747, 753, 755, 756, 757, 760, 762, 763], "optim": [2, 11, 34, 258, 304, 312, 376, 448, 534, 545, 546, 551, 624, 625, 626, 685, 704, 708, 724, 734, 740, 743, 745, 747, 749, 755, 756, 757, 758, 759, 760, 761, 764], "tool": [2, 704, 705, 708, 715, 716, 726, 729, 743, 747, 749, 750, 755, 756, 757, 758, 760, 763, 764], "make": [2, 695, 704, 707, 708, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 745, 747, 751, 755, 757, 758, 759, 760, 763, 764], "ml": [2, 704, 705, 707, 708, 709, 713, 735, 741, 742, 743, 745, 746, 747, 749, 753, 754, 755, 756, 757, 760, 762, 764], "relat": [2, 201, 543, 704, 710, 713, 714, 715, 716, 728, 735, 737, 738, 739, 740, 749, 760], "project": [2, 547, 573, 686, 704, 706, 707, 708, 711, 714, 715, 716, 719, 720, 721, 737, 746, 749, 750, 753, 755, 757, 760, 764], "independ": [2, 9, 18, 32, 41, 177, 194, 227, 237, 317, 421, 543, 548, 554, 576, 595, 647, 704, 718, 724, 726, 732, 742, 747, 755], "research": [2, 704, 706, 749, 757, 764], "deploi": [2, 704, 723, 752, 755, 756, 757, 759, 763], "system": [2, 548, 595, 704, 715, 716, 720, 723, 724, 750, 755, 757, 760, 762, 764], "build": [2, 20, 26, 52, 556, 658, 659, 660, 661, 686, 687, 688, 704, 707, 709, 710, 715, 717, 723, 724, 731, 733, 741, 743, 746, 747, 750, 752, 755, 757, 759, 762, 763, 764], "block": [2, 311, 363, 704, 716, 722, 724, 728, 731, 737, 741, 743, 747, 750, 752, 762, 764], "neural": [2, 547, 682, 686, 704, 749, 753, 755, 756, 757, 761, 763, 764], "network": [2, 547, 571, 682, 684, 685, 686, 687, 688, 704, 707, 722, 731, 742, 746, 749, 753, 755, 756, 757, 761, 763, 764], "layer": [2, 9, 17, 32, 40, 553, 572, 573, 646, 683, 684, 685, 687, 688, 689, 690, 691, 704, 706, 727, 735, 738, 740, 742, 743, 746, 755, 757, 761, 764], "activ": [2, 9, 10, 13, 24, 32, 36, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 249, 253, 254, 256, 257, 506, 547, 573, 574, 685, 686, 704, 710, 715, 716, 724, 729, 738, 739, 746, 757, 760], "train": [2, 9, 11, 13, 32, 34, 36, 310, 316, 333, 334, 335, 415, 417, 526, 527, 532, 546, 547, 570, 573, 574, 685, 686, 687, 688, 689, 704, 708, 722, 725, 731, 745, 746, 747, 748, 749, 750, 752, 755, 756, 761, 763, 764], "pipelin": [2, 704, 706, 711, 717, 718, 719, 736, 738, 747, 752, 757, 758, 763], "publish": [2, 704, 708, 750], "ex": [2, 723], "haiku": [2, 683, 704, 708, 747, 757], "latest": [2, 8, 31, 109, 197, 207, 208, 223, 322, 435, 541, 543, 548, 550, 558, 594, 623, 673, 686, 704, 714, 715, 716, 718, 720, 723, 727, 738, 750, 751, 762], "integr": [2, 6, 8, 9, 29, 31, 32, 106, 246, 292, 307, 322, 438, 541, 543, 704, 713, 715, 717, 732, 755, 757, 759, 760, 761], "kornia": [2, 704], "advantag": [2, 704, 715, 716, 734, 735, 751, 757], "featur": [2, 9, 32, 310, 324, 325, 326, 333, 334, 335, 685, 686, 704, 714, 715, 716, 719, 720, 723, 730, 738, 740, 745, 750, 757, 758, 759, 763], "tensorflow": [2, 8, 9, 10, 31, 32, 101, 148, 178, 270, 304, 311, 359, 506, 540, 542, 545, 695, 704, 707, 708, 712, 713, 714, 715, 716, 718, 720, 723, 724, 725, 730, 734, 735, 736, 737, 738, 740, 742, 747, 750, 752, 755, 758, 760, 761, 763, 764], "deploy": [2, 715, 756, 759, 760, 763, 764], "definit": [2, 8, 14, 31, 37, 246, 543, 548, 575, 704, 716, 719, 724, 731, 744], "job": [2, 704, 721, 723], "graph": [2, 20, 556, 658, 659, 660, 661, 687, 688, 704, 708, 722, 731, 735, 740, 743, 750, 752, 753, 757, 760], "leverag": [2, 704, 715, 734, 755, 757], "frontend": [2, 491, 545, 704, 713, 716, 717, 723, 724, 728, 733, 737, 740, 741, 743, 752, 757], "link": [2, 704, 710, 714, 715, 716, 721, 723, 724, 729, 735, 753, 755], "swap": [2, 16, 39, 550, 620, 695], "replac": [2, 8, 10, 16, 18, 26, 31, 33, 39, 41, 87, 228, 259, 304, 488, 489, 493, 540, 543, 545, 550, 554, 608, 647, 707, 716, 721, 722, 724, 725, 732, 735, 737, 744, 747, 750, 764], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 714, 715, 716, 718, 719, 721, 722, 723, 735, 756, 757, 758, 759, 760], "debug_mod": 2, "params_v": [2, 704], "must": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 167, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 261, 271, 272, 273, 276, 277, 278, 280, 283, 285, 287, 289, 290, 291, 292, 296, 299, 302, 304, 307, 310, 311, 312, 313, 316, 317, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 351, 353, 354, 355, 356, 358, 362, 363, 366, 367, 368, 369, 372, 374, 375, 376, 377, 378, 381, 382, 383, 386, 387, 389, 391, 392, 393, 394, 396, 400, 402, 403, 404, 405, 407, 409, 410, 411, 413, 418, 419, 420, 421, 422, 424, 425, 428, 435, 436, 437, 438, 444, 452, 453, 457, 458, 459, 464, 465, 467, 474, 488, 489, 525, 526, 527, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 690, 692, 706, 708, 710, 713, 714, 715, 716, 718, 719, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 735, 737, 738, 739, 740, 742, 746, 747, 758, 764], "unless": [2, 5, 9, 14, 28, 32, 96, 227, 275, 288, 293, 307, 540, 543, 548, 589, 720, 725, 734, 750], "explicitli": [2, 548, 581, 582, 598, 686, 687, 688, 718, 719, 720, 722, 724, 727, 728, 731, 732, 733, 734, 736, 737, 742, 750, 757], "nn": [2, 94, 540, 704, 731, 736, 740, 747, 758], "kera": [2, 683, 704, 708, 763], "hk": [2, 704, 747], "trainabl": [2, 683, 687, 688, 691, 704, 727, 743, 745, 746], "transpile_kwarg": 2, "It": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 258, 259, 271, 276, 277, 285, 287, 289, 290, 291, 292, 296, 302, 304, 307, 310, 311, 312, 313, 316, 317, 322, 323, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 342, 343, 345, 346, 347, 348, 351, 354, 355, 356, 362, 363, 366, 367, 368, 369, 374, 375, 376, 377, 378, 386, 389, 394, 402, 403, 404, 405, 407, 411, 415, 418, 419, 420, 421, 422, 424, 425, 435, 436, 437, 438, 445, 452, 453, 457, 458, 459, 464, 465, 474, 488, 489, 490, 526, 527, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 626, 627, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 661, 662, 665, 666, 667, 670, 672, 673, 675, 676, 677, 685, 686, 704, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 732, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 755, 757, 758, 760, 761, 762, 763, 764], "alia": [2, 538, 714, 735], "similar": [2, 236, 543, 547, 573, 686, 706, 712, 714, 715, 722, 723, 724, 725, 728, 729, 731, 732, 733, 735, 736, 737, 738, 745, 750, 753, 754, 755, 756, 763], "instantli": [2, 704], "proper": [2, 704, 714, 735], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 140, 150, 151, 155, 160, 162, 164, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 639, 640, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 691, 695, 698, 700, 704, 712, 714, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 750, 752, 755, 756, 757, 759, 763, 764], "snippet": [2, 737], "test_fn": [2, 75, 539, 704], "x1": [2, 6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 44, 51, 52, 56, 107, 117, 133, 140, 160, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 236, 243, 248, 259, 275, 278, 283, 284, 285, 287, 289, 294, 298, 304, 307, 313, 322, 395, 435, 446, 449, 541, 542, 543, 545, 548, 555, 557, 576, 583, 586, 591, 595, 598, 599, 602, 657, 664, 692, 704, 718, 724, 726, 728, 730, 734, 735], "effici": [2, 14, 37, 311, 312, 365, 376, 548, 589, 704, 715, 716, 722, 731, 732, 734, 737, 742, 745, 750, 757, 759, 760], "ret": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 360, 363, 366, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 493, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 633, 634, 635, 636, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 688, 690, 695, 700, 704, 724, 725, 727, 728, 733, 734, 735, 736, 738, 742, 747], "entir": [2, 9, 22, 23, 26, 32, 33, 45, 46, 167, 197, 199, 239, 240, 310, 313, 322, 333, 334, 335, 401, 438, 470, 542, 543, 558, 559, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 707, 708, 714, 715, 716, 718, 719, 722, 724, 726, 728, 734, 735, 736, 737, 740, 742, 745, 746, 747, 750, 757, 763, 764], "just": [2, 9, 14, 22, 37, 49, 101, 270, 304, 311, 369, 540, 548, 558, 589, 668, 686, 704, 707, 708, 715, 716, 718, 720, 723, 724, 725, 726, 727, 731, 732, 734, 735, 736, 737, 742, 744, 745, 750, 757, 758, 763], "line": [2, 244, 543, 704, 708, 715, 718, 719, 720, 723, 725, 726, 728, 735, 737, 740, 743, 744, 745, 746, 748, 760], "request": [2, 9, 158, 317, 425, 542, 704, 708, 709, 714, 726, 729, 738, 740], "jnp": [2, 704, 724, 725, 728, 730, 734, 738, 742, 747], "pil": [2, 704], "jax_kornia": [2, 704], "url": [2, 704], "http": [2, 8, 31, 34, 101, 109, 197, 207, 208, 223, 270, 304, 322, 435, 526, 527, 540, 541, 543, 546, 548, 550, 558, 594, 623, 673, 704, 710, 711, 715, 716, 718, 721, 723, 724, 727, 751], "cocodataset": [2, 704], "org": [2, 8, 31, 34, 101, 109, 197, 207, 208, 223, 270, 304, 322, 435, 526, 527, 540, 541, 543, 546, 548, 550, 558, 594, 623, 673, 704, 727], "train2017": [2, 704], "000000000034": [2, 704], "jpg": [2, 704], "raw_img": [2, 704], "stream": [2, 7, 30, 168, 542, 704, 761], "raw": [2, 26, 704, 727, 758], "format": [2, 7, 10, 22, 25, 26, 27, 30, 67, 117, 151, 310, 321, 351, 431, 457, 537, 541, 542, 545, 547, 558, 559, 560, 561, 563, 564, 565, 567, 568, 668, 678, 679, 704, 716, 717, 723, 724, 725, 726, 727, 728, 735, 738, 742, 744, 745, 753, 755, 757, 758], "img": [2, 704, 745], "transpos": [2, 9, 13, 14, 26, 32, 36, 37, 51, 311, 354, 367, 369, 434, 547, 548, 560, 562, 564, 566, 567, 568, 586, 590, 592, 598, 686, 704, 734, 744, 747], "expand_dim": [2, 16, 39, 547, 550, 569, 704, 735, 742, 745], "255": [2, 13, 32, 36, 188, 543, 569, 704], "version": [2, 3, 9, 32, 49, 59, 245, 279, 281, 307, 322, 440, 444, 525, 543, 545, 548, 581, 582, 695, 704, 706, 707, 708, 715, 716, 721, 723, 724, 727, 734, 736, 742, 763, 764], "enhanc": [2, 704], "5": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 76, 77, 78, 89, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 107, 108, 109, 113, 117, 119, 127, 129, 134, 151, 160, 165, 168, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 274, 277, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 318, 320, 322, 328, 329, 330, 331, 333, 334, 336, 337, 338, 341, 342, 346, 347, 348, 349, 351, 352, 353, 357, 358, 360, 361, 370, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 391, 392, 395, 396, 397, 400, 401, 406, 407, 408, 409, 410, 413, 414, 419, 420, 423, 425, 426, 428, 433, 435, 436, 437, 438, 439, 440, 442, 444, 450, 451, 452, 453, 456, 457, 458, 459, 461, 464, 465, 467, 470, 472, 473, 474, 488, 489, 493, 503, 504, 505, 506, 508, 512, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 591, 592, 594, 596, 597, 598, 600, 601, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 698, 704, 714, 715, 716, 718, 720, 722, 723, 724, 726, 728, 730, 733, 736, 737, 744, 745, 746], "last": [2, 5, 9, 13, 14, 15, 16, 19, 21, 22, 23, 26, 28, 32, 36, 37, 38, 39, 44, 45, 46, 51, 92, 93, 96, 150, 259, 280, 304, 307, 310, 312, 313, 320, 322, 338, 343, 353, 376, 391, 401, 403, 428, 436, 437, 540, 542, 547, 548, 549, 550, 555, 557, 558, 559, 572, 573, 576, 579, 591, 600, 602, 606, 607, 609, 612, 615, 616, 617, 619, 653, 654, 662, 664, 665, 666, 667, 676, 677, 686, 695, 704, 708, 716, 718, 720, 721, 724, 726, 734, 736, 737, 740, 742, 750, 757], "least": [2, 8, 9, 14, 31, 32, 194, 212, 227, 310, 313, 322, 337, 342, 381, 382, 383, 390, 392, 435, 543, 548, 555, 586, 656, 704, 716, 719, 723, 724, 725, 726, 731, 734, 737], "support": [2, 7, 9, 10, 14, 30, 32, 33, 37, 101, 120, 124, 146, 153, 168, 177, 194, 201, 222, 223, 227, 237, 252, 270, 286, 302, 304, 307, 310, 311, 345, 358, 450, 462, 471, 474, 475, 492, 506, 540, 541, 542, 543, 545, 547, 548, 571, 580, 581, 582, 585, 587, 596, 603, 690, 695, 698, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 725, 726, 727, 730, 731, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 747, 751, 752, 754, 756, 757, 760, 762, 763, 764], "timm": [2, 704], "pretrain": [2, 704], "mlp_encod": [2, 704], "create_model": [2, 704], "mixer_b16_224": [2, 704], "num_class": [2, 704, 747], "randn": [2, 704], "224": [2, 704], "encod": [2, 10, 15, 33, 38, 461, 545, 549, 605, 704, 707, 745], "__init__": [2, 26, 48, 49, 50, 51, 52, 54, 55, 682, 685, 686, 687, 688, 689, 690, 691, 694, 695, 698, 699, 702, 704, 714, 719, 720, 724, 728, 735, 738, 742, 744, 745, 746, 747], "self": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 547, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 690, 698, 704, 716, 719, 722, 728, 735, 736, 742, 744, 745, 746, 747], "1000": [2, 5, 28, 93, 540, 704, 745], "super": [2, 9, 32, 311, 359, 704, 728, 742, 745, 746, 747], "fc": [2, 704, 746], "linear": [2, 9, 10, 13, 25, 32, 33, 36, 59, 61, 63, 64, 67, 253, 254, 256, 257, 290, 302, 307, 310, 313, 322, 345, 401, 444, 461, 484, 537, 545, 547, 552, 573, 595, 634, 685, 686, 704, 722, 727, 731, 732, 734, 735, 737, 740, 742, 745, 746, 747, 755, 756, 757, 760], "output_s": [2, 9, 32, 310, 324, 325, 326, 686, 704], "with_bia": [2, 686, 704, 746], "__call__": [2, 686, 687, 688, 704], "_forward_classifi": [2, 704], "standard": [2, 8, 14, 17, 18, 22, 31, 40, 41, 45, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 277, 307, 311, 322, 372, 435, 525, 540, 541, 543, 545, 548, 550, 553, 554, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 609, 611, 612, 613, 615, 616, 618, 619, 623, 646, 649, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 689, 698, 704, 705, 717, 718, 719, 722, 724, 727, 730, 734, 737, 738, 750, 753, 755, 756, 759, 760, 762], "rng_kei": [2, 704], "random": [2, 9, 13, 26, 32, 36, 268, 269, 304, 311, 361, 370, 373, 421, 422, 423, 424, 425, 547, 570, 647, 648, 649, 650, 651, 652, 685, 698, 704, 714, 725, 736, 737, 738, 747, 749, 757], "prngkei": [2, 704, 747], "42": [2, 3, 18, 25, 34, 41, 67, 188, 310, 331, 341, 526, 530, 537, 543, 546, 548, 553, 554, 558, 587, 591, 646, 647, 648, 649, 650, 651, 666, 668, 704, 742, 747], "uniform": [2, 9, 18, 32, 41, 322, 438, 554, 647, 648, 650, 685, 704, 746, 764], "kei": [2, 4, 9, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 275, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 320, 333, 334, 335, 374, 375, 377, 378, 386, 407, 410, 415, 417, 418, 419, 420, 422, 428, 435, 436, 437, 438, 446, 447, 449, 450, 452, 453, 454, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 545, 547, 551, 552, 561, 562, 563, 564, 570, 571, 573, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 624, 625, 630, 636, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 683, 684, 686, 690, 704, 721, 722, 723, 731, 734, 735, 736, 737, 745, 751, 757, 760, 764], "dtype": [2, 5, 6, 9, 10, 13, 14, 18, 19, 22, 28, 29, 31, 32, 33, 36, 37, 41, 42, 45, 51, 54, 55, 56, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 162, 228, 258, 259, 260, 261, 262, 263, 264, 268, 269, 274, 277, 279, 293, 304, 307, 310, 317, 322, 331, 341, 353, 421, 422, 423, 424, 425, 435, 436, 437, 438, 441, 443, 444, 461, 462, 463, 465, 474, 483, 510, 540, 541, 542, 545, 547, 548, 551, 552, 554, 555, 557, 558, 559, 563, 570, 587, 603, 626, 627, 648, 649, 650, 653, 654, 655, 664, 665, 666, 667, 672, 674, 676, 677, 685, 686, 688, 689, 691, 692, 704, 712, 718, 720, 724, 725, 726, 728, 731, 732, 734, 735, 736, 737, 738, 742, 744], "float32": [2, 5, 6, 10, 13, 28, 29, 33, 36, 45, 93, 96, 98, 103, 104, 105, 109, 113, 114, 117, 118, 119, 120, 123, 126, 127, 129, 134, 137, 143, 207, 234, 274, 283, 304, 307, 310, 322, 331, 341, 353, 438, 474, 510, 540, 541, 543, 545, 547, 548, 551, 563, 565, 566, 569, 594, 596, 597, 603, 626, 704, 724, 726, 736, 737, 738], "forward_classifi": [2, 704], "param": [2, 26, 33, 52, 447, 464, 465, 545, 692, 704, 747], "init": [2, 9, 32, 311, 361, 370, 373, 685, 704, 718, 747], "rng": [2, 704, 747], "mention": [2, 707, 714, 715, 716, 719, 720, 726, 730, 731, 734, 735, 737, 740, 757], "abov": [2, 5, 8, 9, 14, 18, 25, 31, 32, 37, 41, 67, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 259, 270, 271, 277, 280, 302, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 343, 346, 347, 348, 349, 353, 358, 359, 401, 435, 438, 464, 468, 470, 472, 474, 511, 535, 537, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 648, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 704, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 736, 737, 740, 742, 744, 745, 746, 747, 757, 762], "exactli": [2, 244, 543, 706, 708, 722, 723, 724, 725, 726, 728, 737, 740], "wai": [2, 49, 704, 706, 707, 711, 713, 715, 718, 719, 720, 721, 723, 724, 725, 734, 735, 736, 737, 740, 744, 745, 746, 747, 750, 751, 759, 763, 764], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 737], "rough": 2, "edg": [2, 9, 16, 32, 39, 265, 304, 310, 313, 322, 345, 401, 438, 550, 608, 610, 623, 718, 737, 757, 759, 763], "These": [2, 9, 32, 311, 313, 322, 358, 400, 435, 547, 548, 573, 580, 581, 704, 706, 707, 708, 710, 713, 714, 715, 716, 718, 722, 724, 726, 727, 730, 731, 734, 735, 737, 742, 743, 745, 746, 747, 750, 752, 757, 761, 763, 764], "subclass": [2, 732, 735, 740], "within": [2, 4, 9, 32, 76, 275, 288, 307, 310, 346, 347, 348, 381, 382, 383, 540, 554, 650, 688, 704, 714, 716, 719, 723, 724, 735, 736, 737, 746, 750, 753, 754, 758], "sequenti": [2, 704, 721, 722, 746], "more": [2, 3, 8, 9, 14, 16, 20, 25, 31, 32, 37, 39, 43, 59, 61, 64, 67, 76, 107, 199, 201, 217, 232, 245, 300, 308, 311, 312, 313, 354, 355, 365, 368, 376, 381, 382, 383, 386, 407, 492, 537, 540, 541, 543, 545, 548, 550, 556, 579, 585, 586, 589, 592, 594, 596, 603, 612, 619, 658, 659, 660, 661, 682, 704, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 755, 756, 757, 758, 759, 760, 763, 764], "complex": [2, 3, 8, 9, 14, 25, 29, 31, 32, 37, 59, 61, 64, 67, 97, 98, 112, 126, 135, 141, 174, 175, 176, 177, 178, 179, 180, 183, 191, 192, 194, 195, 197, 199, 207, 208, 209, 210, 211, 215, 216, 217, 218, 227, 229, 232, 234, 237, 238, 239, 240, 241, 244, 245, 277, 307, 310, 311, 322, 332, 343, 353, 354, 358, 359, 360, 367, 369, 443, 503, 504, 537, 540, 541, 543, 545, 548, 555, 558, 580, 581, 582, 587, 594, 596, 598, 600, 603, 656, 672, 674, 682, 710, 714, 721, 724, 726, 732, 735, 737, 738, 740, 745, 746, 747, 750, 752, 753, 755, 757, 759, 763, 764], "should": [2, 3, 5, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 31, 32, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 49, 51, 52, 62, 66, 75, 94, 96, 99, 100, 108, 133, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 259, 271, 285, 289, 290, 291, 292, 296, 301, 302, 304, 307, 309, 310, 311, 312, 313, 317, 322, 333, 334, 335, 337, 342, 361, 370, 373, 377, 400, 401, 421, 422, 435, 436, 437, 451, 474, 525, 527, 530, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 567, 568, 573, 574, 575, 576, 577, 579, 581, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 598, 600, 602, 603, 615, 631, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 671, 672, 674, 675, 682, 683, 684, 685, 686, 688, 689, 690, 691, 698, 705, 707, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 753, 754, 757, 759, 764], "util": [2, 9, 32, 152, 311, 371, 542, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 710, 715, 721, 725, 728, 731, 734, 737, 738, 742, 755, 763, 764], "requir": [2, 8, 9, 26, 31, 32, 228, 241, 245, 311, 313, 358, 359, 401, 543, 548, 550, 580, 581, 582, 619, 683, 710, 711, 714, 715, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 735, 736, 737, 738, 740, 742, 744, 750, 757, 763], "state": [2, 13, 36, 141, 142, 143, 144, 145, 227, 513, 515, 518, 520, 521, 541, 543, 545, 547, 572, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 704, 707, 712, 715, 721, 724, 725, 727, 728, 729, 730, 735, 737, 741, 742, 743, 745, 749, 763, 764], "mean": [2, 9, 10, 13, 15, 16, 18, 22, 24, 26, 28, 32, 33, 36, 38, 39, 41, 45, 47, 49, 89, 167, 279, 307, 310, 311, 312, 313, 316, 317, 322, 338, 343, 356, 365, 374, 375, 376, 377, 378, 386, 391, 401, 415, 417, 422, 441, 442, 458, 528, 529, 531, 536, 540, 542, 545, 546, 547, 548, 549, 550, 551, 552, 554, 558, 562, 564, 565, 566, 569, 570, 578, 605, 615, 624, 625, 626, 633, 648, 649, 685, 686, 689, 704, 715, 716, 717, 718, 720, 722, 724, 725, 726, 731, 733, 734, 735, 737, 738, 740, 742, 744, 745, 746, 747, 749, 750, 752, 754, 757], "transformed_with_st": 2, "map": [2, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 307, 310, 333, 334, 335, 374, 375, 377, 378, 381, 382, 383, 386, 407, 409, 410, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 525, 530, 535, 545, 552, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 634, 635, 639, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 719, 722, 724, 730, 731, 735, 737, 738, 745, 749, 750, 752, 758], "convolut": [2, 9, 13, 32, 36, 310, 330, 348, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686, 755, 757], "c": [2, 5, 9, 10, 11, 13, 16, 22, 28, 29, 31, 32, 33, 34, 36, 37, 39, 43, 45, 49, 65, 77, 78, 93, 96, 119, 122, 177, 188, 194, 195, 215, 216, 227, 230, 238, 245, 310, 311, 313, 316, 322, 324, 325, 326, 337, 342, 354, 355, 357, 358, 360, 368, 381, 382, 383, 391, 415, 416, 417, 437, 449, 457, 458, 459, 468, 472, 473, 511, 526, 527, 530, 532, 533, 534, 537, 540, 541, 543, 545, 546, 547, 548, 550, 552, 555, 556, 558, 561, 562, 563, 564, 565, 566, 580, 582, 584, 615, 619, 627, 630, 634, 635, 636, 638, 639, 644, 645, 656, 661, 667, 668, 673, 675, 689, 698, 705, 707, 708, 709, 715, 717, 720, 721, 722, 726, 731, 733, 741, 742, 743, 745, 750, 752, 753, 757, 761, 762, 764], "h": [2, 9, 10, 13, 32, 33, 36, 310, 329, 330, 347, 348, 457, 459, 545, 547, 552, 560, 563, 564, 565, 566, 567, 568, 569, 630, 634, 636, 639, 644, 717, 721, 722, 723, 753], "w": [2, 9, 10, 11, 13, 26, 31, 32, 33, 34, 36, 49, 221, 286, 301, 307, 309, 310, 311, 328, 329, 330, 332, 346, 347, 348, 349, 360, 373, 434, 457, 459, 503, 526, 527, 528, 530, 532, 533, 534, 545, 546, 547, 552, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 633, 704, 717, 733, 742, 745, 746], "bigger": 2, "permut": [2, 16, 39, 51, 320, 427, 550, 613, 620], "infer": [2, 5, 9, 10, 13, 16, 28, 32, 33, 36, 39, 76, 78, 86, 90, 91, 95, 98, 103, 112, 113, 114, 115, 116, 258, 259, 317, 423, 468, 502, 540, 541, 545, 547, 550, 570, 615, 695, 717, 720, 724, 725, 737, 742, 747, 755, 756, 759, 761], "correct": [2, 22, 45, 140, 311, 371, 541, 550, 558, 608, 673, 675, 704, 714, 716, 717, 722, 723, 724, 725, 728, 730, 731, 734, 736, 737], "mind": [2, 714, 719, 720, 722, 737, 751], "well": [2, 33, 312, 376, 470, 545, 548, 595, 704, 711, 714, 716, 721, 723, 724, 728, 734, 735, 736, 737, 746, 747, 749, 756, 757, 758, 762], "hf": 2, "tf_model": 2, "tf_input": 2, "data_class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 329, 330, 457, 461, 596, 621], "_arraywithactiv": [3, 51], "base": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 56, 93, 101, 133, 197, 198, 215, 216, 217, 218, 232, 265, 270, 276, 279, 283, 290, 304, 307, 310, 311, 320, 352, 371, 427, 494, 504, 516, 540, 541, 543, 545, 548, 550, 556, 558, 587, 611, 658, 659, 660, 661, 668, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 699, 702, 704, 715, 716, 718, 722, 723, 724, 728, 730, 732, 733, 734, 736, 737, 738, 739, 740, 742, 749, 757, 762, 764], "abc": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 55, 460, 545, 552, 645, 684, 685, 690, 698, 744], "_abc_impl": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "_abc": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "_abc_data": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56], "gelu": [3, 25, 537, 682, 704], "approxim": [3, 8, 9, 14, 25, 31, 32, 37, 49, 59, 175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 201, 215, 216, 217, 218, 232, 239, 240, 244, 245, 246, 286, 296, 307, 312, 376, 537, 543, 548, 589, 592, 682, 727, 735], "complex_mod": [3, 8, 25, 31, 59, 61, 64, 67, 245, 537, 543, 682, 732], "variant": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 592, 593, 594, 596, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 719, 726, 727, 740], "simpli": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 93, 94, 95, 96, 98, 99, 100, 103, 107, 108, 109, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 526, 527, 530, 532, 533, 534, 535, 543, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 592, 593, 594, 596, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 704, 714, 715, 716, 719, 720, 721, 723, 724, 725, 726, 727, 730, 731, 734, 735, 736, 737, 740, 742, 746, 747, 750, 752, 758, 763], "docstr": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 107, 108, 109, 119, 122, 126, 127, 134, 151, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 322, 328, 329, 330, 331, 333, 334, 335, 337, 341, 342, 343, 346, 347, 348, 352, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 488, 489, 503, 504, 505, 506, 508, 510, 511, 524, 525, 526, 527, 530, 532, 533, 534, 535, 540, 541, 543, 545, 548, 550, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 713, 714, 717, 721, 729, 730, 731, 732, 735, 738], "liter": [3, 8, 9, 14, 25, 31, 32, 37, 59, 61, 64, 67, 245, 310, 311, 313, 331, 341, 345, 361, 365, 370, 373, 401, 537, 543, 548, 557, 587, 603, 664, 682, 740], "split": [3, 8, 9, 16, 25, 26, 31, 32, 39, 59, 61, 64, 67, 165, 166, 167, 245, 285, 292, 313, 387, 396, 413, 457, 484, 537, 542, 543, 545, 547, 550, 560, 567, 568, 620, 682, 686, 704, 709, 716, 723, 741, 742, 750, 764], "magnitud": [3, 8, 25, 31, 59, 61, 64, 67, 174, 177, 194, 201, 227, 245, 537, 543, 548, 596, 597, 682], "how": [3, 8, 9, 25, 31, 32, 59, 61, 64, 67, 194, 227, 245, 313, 385, 406, 409, 537, 543, 682, 684, 685, 686, 687, 688, 704, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 753, 757], "handl": [3, 7, 8, 9, 25, 26, 30, 31, 32, 52, 59, 61, 64, 67, 147, 148, 149, 150, 151, 155, 160, 161, 169, 173, 179, 191, 216, 232, 238, 239, 244, 245, 313, 385, 406, 409, 537, 542, 543, 548, 558, 600, 672, 674, 682, 690, 709, 717, 722, 723, 724, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 746, 754, 764], "data": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 59, 61, 64, 67, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 146, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 258, 259, 260, 261, 262, 263, 264, 271, 272, 273, 274, 276, 291, 296, 302, 304, 307, 310, 311, 313, 317, 321, 322, 333, 334, 335, 351, 356, 358, 372, 385, 406, 409, 421, 422, 423, 424, 425, 431, 435, 436, 437, 441, 443, 444, 461, 474, 476, 477, 480, 506, 537, 540, 542, 543, 545, 547, 548, 550, 552, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 609, 612, 613, 615, 616, 618, 619, 623, 631, 648, 649, 650, 652, 653, 654, 656, 657, 662, 664, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 688, 692, 704, 705, 707, 715, 717, 718, 719, 720, 721, 722, 725, 727, 730, 731, 732, 734, 736, 738, 740, 742, 744, 752, 757, 758, 759, 761, 762, 763], "see": [3, 6, 8, 14, 19, 20, 22, 23, 25, 31, 32, 37, 42, 45, 46, 49, 51, 52, 59, 61, 64, 67, 76, 88, 92, 101, 108, 127, 134, 177, 182, 184, 186, 187, 188, 189, 194, 195, 199, 201, 205, 206, 213, 214, 217, 219, 221, 223, 224, 227, 230, 232, 236, 243, 245, 248, 270, 304, 311, 355, 537, 540, 541, 543, 548, 555, 556, 558, 559, 576, 589, 592, 595, 602, 603, 654, 658, 659, 660, 661, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 704, 706, 709, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 729, 730, 731, 735, 736, 737, 740, 742, 744, 745, 749, 750, 753], "func_wrapp": [3, 8, 25, 31, 59, 61, 64, 67, 245, 537, 543, 682, 725, 735, 739], "handle_complex_input": [3, 8, 25, 31, 59, 61, 64, 67, 245, 537, 543, 682, 732], "detail": [3, 8, 14, 16, 20, 25, 31, 32, 37, 39, 43, 59, 61, 64, 67, 88, 245, 311, 355, 386, 537, 540, 543, 556, 579, 586, 592, 596, 619, 658, 659, 660, 661, 682, 704, 714, 716, 718, 720, 721, 722, 723, 729, 730, 731, 732, 735, 736, 737, 738, 739, 742, 744, 745, 746, 759, 763], "write": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 108, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 271, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 289, 290, 291, 292, 295, 296, 297, 302, 304, 307, 310, 311, 312, 313, 316, 317, 318, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 362, 363, 366, 367, 368, 369, 374, 375, 376, 377, 378, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 452, 453, 457, 458, 459, 464, 465, 474, 488, 489, 526, 527, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 627, 646, 647, 648, 649, 650, 652, 654, 655, 657, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 704, 708, 713, 714, 716, 717, 718, 720, 721, 723, 724, 726, 727, 728, 731, 734, 736, 738, 742, 744, 747, 757, 764], "broadcast": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 77, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 271, 276, 277, 278, 279, 283, 285, 287, 289, 290, 291, 292, 296, 302, 304, 307, 310, 311, 312, 313, 316, 317, 322, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 342, 343, 345, 346, 347, 348, 351, 354, 355, 356, 362, 363, 366, 367, 369, 374, 375, 376, 377, 378, 384, 386, 389, 394, 402, 403, 404, 405, 407, 410, 411, 415, 418, 419, 420, 421, 422, 424, 425, 435, 436, 437, 438, 441, 442, 443, 444, 452, 453, 457, 458, 459, 464, 465, 474, 488, 489, 526, 527, 530, 532, 533, 534, 535, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 627, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 661, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 698, 722, 724, 726, 727, 728, 737, 738, 742], "element": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 84, 90, 91, 99, 100, 101, 117, 119, 122, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 270, 271, 272, 273, 275, 276, 277, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 304, 307, 310, 311, 313, 322, 323, 333, 334, 335, 338, 343, 346, 347, 348, 352, 353, 357, 358, 359, 381, 382, 383, 391, 392, 393, 395, 398, 408, 410, 412, 433, 434, 436, 437, 438, 439, 440, 441, 443, 445, 449, 452, 453, 464, 465, 481, 483, 503, 504, 506, 510, 511, 537, 540, 543, 545, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 570, 576, 578, 580, 581, 586, 591, 593, 594, 596, 600, 608, 611, 612, 613, 614, 615, 616, 617, 618, 627, 630, 636, 647, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 727, 736, 737, 740, 742, 761], "wise": [3, 8, 9, 14, 25, 31, 32, 37, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 235, 236, 243, 248, 249, 251, 253, 254, 256, 257, 275, 276, 281, 282, 283, 284, 287, 288, 289, 290, 294, 295, 298, 299, 302, 307, 310, 311, 313, 333, 334, 335, 357, 362, 388, 395, 397, 398, 414, 537, 543, 550, 576, 608, 690, 740], "exampl": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 328, 329, 330, 331, 333, 334, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 366, 368, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 400, 401, 406, 407, 408, 409, 410, 412, 413, 414, 418, 419, 420, 423, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 633, 634, 635, 636, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 695, 698, 702, 708, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 731, 732, 734, 735, 737, 738, 742, 744, 745, 746, 747, 749, 750, 754, 755, 758, 760, 763, 764], "6": [3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 21, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 59, 61, 66, 72, 77, 78, 90, 91, 94, 95, 98, 103, 107, 108, 109, 117, 119, 173, 174, 176, 177, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 265, 277, 279, 286, 287, 289, 290, 291, 293, 300, 302, 304, 307, 308, 310, 311, 312, 313, 318, 320, 322, 331, 333, 336, 337, 341, 342, 346, 349, 352, 353, 357, 360, 363, 375, 377, 378, 379, 381, 382, 383, 387, 391, 392, 396, 397, 400, 401, 406, 407, 409, 413, 414, 423, 425, 426, 428, 433, 435, 436, 437, 438, 440, 442, 443, 444, 450, 452, 453, 456, 457, 458, 464, 465, 472, 473, 474, 489, 503, 504, 505, 506, 508, 512, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 576, 577, 578, 579, 581, 582, 583, 586, 587, 588, 591, 594, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 627, 628, 638, 639, 645, 646, 647, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 685, 704, 712, 715, 718, 720, 722, 723, 726, 733, 737, 740, 742, 744, 745, 746], "138": [3, 59, 537], "165": [3, 59, 537, 547, 571], "hardswish": [3, 25, 537, 682], "leaky_relu": [3, 25, 537], "alpha": [3, 8, 9, 25, 31, 32, 56, 61, 177, 243, 249, 260, 302, 304, 311, 317, 359, 422, 423, 424, 537, 543, 682, 730, 735, 736], "float": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 45, 49, 51, 61, 67, 76, 77, 78, 85, 87, 89, 90, 91, 92, 93, 97, 98, 102, 106, 110, 114, 119, 123, 127, 133, 134, 137, 143, 152, 161, 165, 166, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 258, 259, 260, 261, 263, 264, 265, 275, 276, 282, 283, 288, 290, 291, 294, 295, 296, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 322, 333, 334, 335, 352, 355, 358, 359, 370, 372, 373, 374, 377, 390, 408, 415, 416, 417, 420, 421, 422, 423, 424, 425, 435, 436, 437, 438, 443, 444, 451, 452, 453, 461, 470, 494, 495, 498, 503, 504, 524, 526, 527, 530, 532, 533, 534, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 570, 573, 574, 575, 577, 580, 581, 582, 584, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 600, 603, 605, 606, 607, 624, 625, 626, 633, 646, 649, 650, 656, 658, 659, 660, 661, 666, 667, 669, 670, 671, 672, 673, 674, 675, 682, 685, 686, 689, 690, 718, 722, 724, 727, 728, 730, 731, 733, 734, 736, 737, 738, 740, 742, 744, 746], "slope": [3, 9, 25, 32, 61, 249, 252, 302, 537, 682], "neg": [3, 8, 9, 14, 16, 18, 23, 25, 31, 32, 37, 39, 41, 46, 49, 61, 64, 67, 76, 87, 89, 101, 194, 201, 208, 209, 227, 228, 232, 236, 241, 259, 270, 272, 304, 311, 317, 356, 361, 365, 425, 537, 540, 543, 548, 550, 554, 559, 576, 578, 596, 600, 602, 603, 609, 611, 612, 616, 649, 676, 677, 682, 722, 734], "section": [3, 9, 20, 32, 61, 310, 313, 343, 353, 387, 396, 413, 556, 658, 659, 660, 661, 704, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 745, 746, 753, 760, 763], "leaki": [3, 25, 61, 537, 682], "relu": [3, 9, 24, 25, 32, 61, 252, 253, 257, 302, 537, 682, 704, 736, 745, 746], "39": [3, 8, 9, 14, 18, 25, 31, 32, 34, 37, 41, 61, 180, 215, 217, 219, 249, 302, 310, 322, 329, 331, 348, 351, 436, 526, 537, 543, 546, 548, 558, 583, 591, 649, 668], "85": [3, 9, 18, 25, 31, 32, 34, 36, 41, 52, 61, 179, 188, 189, 233, 249, 255, 302, 322, 436, 503, 530, 537, 543, 545, 546, 547, 554, 571, 648, 649, 650], "17": [3, 9, 14, 25, 31, 32, 33, 34, 36, 37, 41, 52, 61, 62, 93, 177, 194, 219, 227, 258, 300, 304, 310, 313, 328, 329, 337, 338, 341, 342, 346, 347, 349, 352, 391, 458, 473, 526, 528, 537, 540, 543, 545, 546, 547, 548, 552, 554, 561, 570, 571, 579, 583, 635, 648, 649, 650, 652, 722], "log_softmax": [3, 25, 537], "axi": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 62, 66, 92, 93, 96, 167, 241, 246, 279, 280, 286, 293, 307, 310, 312, 313, 316, 320, 322, 331, 332, 338, 341, 343, 353, 376, 380, 386, 387, 388, 391, 392, 393, 396, 401, 406, 407, 409, 410, 412, 413, 418, 419, 420, 428, 433, 436, 437, 438, 440, 441, 442, 443, 444, 457, 464, 525, 537, 540, 542, 543, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 569, 576, 579, 587, 602, 603, 605, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 652, 653, 654, 658, 662, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 686, 687, 692, 722, 724, 726, 728, 730, 731, 734, 735, 737, 740, 742, 744, 747, 749], "ax": [3, 9, 14, 16, 19, 22, 23, 25, 32, 37, 39, 42, 45, 46, 51, 55, 62, 66, 167, 279, 280, 293, 300, 307, 308, 310, 313, 316, 322, 338, 343, 353, 400, 401, 407, 418, 440, 441, 442, 443, 444, 457, 525, 542, 545, 548, 550, 555, 558, 559, 576, 587, 595, 598, 599, 603, 610, 612, 613, 616, 618, 620, 623, 653, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 724, 726, 737, 738, 742, 744], "along": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 44, 45, 46, 49, 62, 66, 72, 92, 93, 167, 241, 244, 246, 272, 273, 279, 280, 293, 300, 304, 307, 308, 310, 311, 312, 313, 316, 322, 331, 337, 338, 341, 342, 343, 353, 370, 376, 386, 387, 388, 392, 393, 401, 406, 410, 418, 419, 420, 436, 437, 438, 440, 441, 442, 443, 444, 457, 464, 539, 540, 542, 543, 545, 548, 549, 550, 551, 554, 555, 557, 558, 559, 576, 591, 600, 602, 603, 605, 606, 607, 609, 612, 613, 614, 616, 617, 619, 621, 622, 624, 625, 626, 652, 653, 654, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 704, 714, 717, 726, 734, 738, 740, 742, 757], "98": [3, 9, 11, 18, 25, 31, 34, 41, 62, 189, 192, 240, 297, 307, 530, 537, 543, 546, 548, 552, 555, 558, 591, 628, 639, 648, 650, 657, 668], "37": [3, 8, 9, 25, 31, 32, 36, 51, 62, 180, 188, 237, 240, 244, 318, 352, 426, 543, 547, 548, 552, 554, 571, 588, 635, 649, 723], "35": [3, 13, 14, 25, 31, 32, 36, 37, 41, 62, 182, 241, 310, 331, 341, 543, 547, 548, 555, 558, 571, 576, 583, 649, 657, 668], "0719": [3, 25, 62], "62": [3, 25, 31, 41, 62, 212, 240, 543, 553, 554, 646, 648, 650], "221": [3, 62], "7": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 61, 62, 63, 64, 76, 77, 78, 92, 95, 96, 113, 119, 122, 152, 174, 177, 180, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 211, 212, 213, 214, 215, 216, 217, 219, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 237, 238, 239, 241, 244, 245, 247, 248, 249, 251, 253, 254, 256, 257, 258, 259, 261, 264, 265, 275, 277, 279, 280, 286, 287, 288, 290, 292, 293, 300, 302, 304, 307, 308, 310, 311, 312, 313, 318, 322, 328, 329, 330, 331, 336, 337, 341, 342, 346, 349, 351, 352, 353, 357, 366, 374, 375, 376, 377, 378, 381, 382, 383, 387, 391, 396, 397, 400, 401, 406, 407, 409, 413, 414, 423, 425, 426, 433, 436, 437, 439, 440, 444, 450, 452, 453, 457, 458, 461, 472, 473, 474, 481, 488, 489, 503, 506, 526, 527, 529, 530, 531, 532, 534, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 561, 562, 564, 566, 569, 570, 571, 574, 576, 577, 578, 579, 582, 583, 586, 588, 591, 594, 596, 597, 598, 600, 601, 605, 606, 607, 608, 611, 612, 617, 619, 620, 622, 627, 628, 635, 639, 646, 647, 648, 649, 650, 652, 657, 658, 660, 662, 663, 665, 666, 667, 668, 670, 672, 674, 675, 715, 716, 720, 722, 723, 726, 731, 734, 737], "82": [3, 8, 34, 41, 62, 180, 322, 436, 526, 546, 649, 650, 712], "mish": [3, 25, 537, 682], "30340147": [3, 63, 537], "86509842": [3, 25, 63, 537], "sigmoid": [3, 9, 25, 32, 251, 302, 317, 421, 537, 682, 742, 745, 746], "269": [3, 65], "731": [3, 65], "881": [3, 8, 31, 65, 180, 193, 233, 543], "softmax": [3, 13, 24, 25, 36, 537, 547, 573, 574, 682, 704], "422": [3, 66, 537], "155": [3, 36, 66, 537, 547, 571], "softplu": [3, 25, 537, 682, 740], "beta": [3, 9, 17, 25, 32, 40, 67, 260, 263, 264, 304, 311, 312, 317, 359, 377, 423, 424, 537, 553, 646, 682, 740], "threshold": [3, 8, 9, 25, 31, 32, 67, 225, 226, 257, 276, 302, 307, 312, 313, 374, 377, 408, 537, 543, 682, 740], "3461": [3, 25, 67, 537], "6491": [3, 25, 67, 537], "535": [3, 25, 67, 537, 728], "22": [3, 8, 9, 10, 18, 22, 25, 32, 33, 36, 41, 62, 67, 189, 197, 310, 311, 313, 318, 322, 328, 329, 331, 346, 347, 348, 349, 352, 357, 385, 426, 436, 458, 489, 524, 537, 543, 547, 548, 552, 555, 558, 570, 571, 579, 584, 591, 635, 645, 648, 649, 650, 657, 667, 668, 715, 722, 728], "09": [3, 8, 34, 41, 67, 232, 242, 526, 537, 543, 546, 649], "31": [3, 8, 9, 31, 32, 33, 36, 41, 62, 67, 93, 188, 219, 227, 310, 313, 322, 330, 331, 385, 436, 452, 537, 540, 543, 545, 649, 650, 745], "55": [3, 32, 41, 67, 188, 247, 322, 436, 472, 543, 545, 548, 554, 558, 584, 591, 649, 650, 668, 718], "13": [3, 8, 9, 13, 14, 18, 22, 31, 32, 33, 34, 36, 39, 41, 45, 51, 67, 122, 152, 177, 189, 192, 201, 212, 232, 241, 286, 293, 300, 307, 310, 313, 330, 331, 341, 346, 352, 385, 387, 391, 396, 413, 425, 436, 437, 452, 453, 457, 458, 473, 495, 503, 526, 537, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 555, 556, 558, 561, 562, 570, 571, 579, 583, 591, 597, 622, 626, 639, 648, 649, 650, 657, 658, 666, 667, 668, 722, 726, 735], "collect": [4, 26, 27, 537, 542, 545, 546, 547, 549, 552, 553, 554, 640, 682, 686, 687, 689, 690, 715, 723, 728, 732, 733, 736, 737, 749, 755, 757, 760], "accept": [4, 5, 8, 9, 14, 27, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 271, 277, 280, 281, 301, 304, 307, 309, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 401, 435, 438, 442, 450, 458, 459, 464, 468, 470, 472, 474, 488, 506, 511, 535, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 704, 714, 715, 716, 719, 722, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 744, 752, 755], "_to_ivi": 4, "_to_n": 4, "inplac": [4, 10, 26, 33, 49, 448, 450, 471, 474, 475, 492, 493, 545, 552, 634, 635, 639, 644, 645, 683, 690, 717, 719, 726, 730, 732, 735, 740, 744, 746], "to_ignor": [4, 24, 47, 552, 638, 639], "args_to_ivi": 4, "include_deriv": [4, 27, 552, 628, 639], "form": [4, 5, 9, 14, 26, 28, 37, 48, 49, 77, 78, 95, 99, 100, 258, 261, 271, 277, 304, 307, 311, 313, 358, 365, 388, 397, 401, 414, 447, 507, 509, 540, 545, 547, 548, 552, 575, 577, 579, 580, 581, 582, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600, 628, 639, 685, 707, 709, 714, 731, 737, 740, 746, 747, 757, 758, 763], "nest": [4, 26, 27, 52, 55, 197, 479, 508, 525, 528, 543, 545, 546, 551, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 684, 687, 688, 690, 719, 721, 722, 731, 733, 738, 745, 746, 750, 752, 757], "unchang": [4, 8, 310, 313, 353, 391, 547, 570], "recurs": [4, 26, 27, 120, 121, 153, 154, 462, 463, 541, 542, 545, 552, 627, 628, 631, 637, 638, 639, 715, 718, 721, 722, 731, 734, 746, 750], "deriv": [4, 5, 9, 11, 27, 28, 32, 34, 86, 91, 98, 103, 259, 263, 281, 304, 307, 526, 527, 530, 531, 532, 533, 534, 540, 546, 551, 552, 626, 628, 639, 688, 690, 691, 724, 725, 744, 746], "word": [4, 76, 313, 394, 540, 554, 650, 683, 686, 722, 734, 735, 752], "args_to_n": [4, 734], "cont_inplac": 4, "updat": [4, 10, 11, 26, 33, 34, 49, 474, 488, 489, 492, 493, 515, 526, 527, 530, 532, 533, 534, 545, 546, 547, 551, 552, 570, 572, 624, 625, 626, 634, 635, 639, 644, 645, 683, 689, 690, 695, 704, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 726, 730, 732, 733, 735, 736, 737, 740, 742, 744, 745, 747, 750], "place": [4, 5, 8, 9, 10, 14, 16, 26, 28, 30, 31, 32, 33, 39, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 258, 259, 262, 270, 271, 275, 277, 280, 281, 285, 287, 288, 289, 290, 292, 293, 294, 298, 299, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 391, 401, 406, 422, 435, 438, 442, 450, 458, 459, 464, 468, 470, 472, 473, 474, 488, 492, 506, 511, 515, 535, 540, 541, 542, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 688, 690, 704, 710, 713, 716, 717, 718, 721, 722, 723, 725, 726, 727, 730, 731, 735, 736, 737, 738, 740, 747, 752, 759], "ignor": [4, 5, 9, 26, 32, 94, 310, 311, 313, 333, 334, 335, 359, 403, 404, 408, 540, 547, 548, 552, 573, 585, 638, 639, 690, 721, 723, 726, 737, 750, 763], "decid": [4, 26, 552, 627, 628, 637, 638, 639, 704, 714, 715, 724, 740], "go": [4, 9, 36, 310, 352, 552, 627, 628, 637, 638, 639, 704, 709, 710, 712, 714, 715, 716, 717, 720, 721, 723, 724, 726, 729, 735, 736, 737, 738, 741, 745, 750, 753, 757, 758, 762, 764], "deeper": [4, 552, 627, 628, 637, 638, 639, 706, 716, 717, 737, 741], "to_ivi": [4, 27, 552, 640, 734], "leaf": [4, 26, 45, 52, 552, 637, 638, 640, 667, 722, 731, 745], "nativearrai": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 77, 78, 84, 86, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 122, 125, 126, 127, 129, 131, 133, 134, 140, 150, 151, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 316, 317, 318, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 436, 437, 438, 439, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 477, 480, 481, 483, 488, 489, 490, 493, 502, 503, 504, 505, 506, 508, 510, 511, 513, 524, 526, 527, 528, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 628, 629, 630, 634, 635, 636, 639, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 691, 719, 722, 726, 728, 730, 731, 732, 734, 735, 738, 739, 742, 744, 752], "manner": [4, 27, 552, 639, 706, 715, 725, 727, 731, 735, 738, 745, 749, 750, 753, 755, 763, 764], "travers": [4, 27, 552, 631, 639, 722, 724, 728, 742], "lowest": [4, 9, 18, 27, 32, 41, 322, 438, 552, 554, 639, 648, 731, 750, 752, 754, 758, 762], "leav": [4, 9, 27, 29, 31, 32, 33, 36, 37, 39, 45, 52, 119, 122, 194, 250, 251, 313, 386, 391, 403, 404, 405, 418, 419, 420, 436, 437, 442, 461, 508, 550, 552, 566, 574, 579, 596, 610, 614, 619, 621, 622, 627, 628, 637, 638, 639, 640, 666, 667, 698, 704, 714, 722, 723, 724, 726, 727, 730, 731, 734, 735, 737, 745, 746], "search": [4, 9, 27, 32, 653, 654, 706, 713, 715, 722, 726, 737, 738], "to_n": [4, 27, 742], "mayb": [4, 704, 715, 723, 742, 744], "_arraywithcr": [5, 51], "asarrai": [5, 9, 10, 21, 28, 32, 33, 44, 77, 320, 427, 428, 457, 468, 472, 473, 503, 504, 540, 545, 547, 556, 557, 561, 659, 663, 728, 732, 735, 736], "devic": [5, 9, 18, 26, 28, 32, 41, 51, 54, 55, 56, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 173, 258, 259, 270, 271, 304, 317, 389, 421, 422, 424, 425, 448, 462, 463, 540, 545, 554, 647, 648, 649, 650, 683, 685, 686, 687, 688, 689, 690, 691, 692, 695, 704, 707, 716, 717, 720, 724, 728, 731, 732, 736, 737, 738, 740, 742, 747, 750, 751, 752, 756, 757, 759, 760, 761, 762], "ndarrai": [5, 9, 10, 28, 32, 77, 78, 95, 310, 311, 313, 322, 353, 370, 406, 441, 442, 510, 540, 545, 695, 698, 714, 719, 724, 725, 728, 730, 734, 735, 736, 738, 740, 742, 744, 747, 752], "boolean": [5, 6, 8, 9, 10, 16, 19, 22, 26, 28, 29, 31, 32, 33, 39, 42, 45, 51, 52, 73, 75, 77, 78, 84, 90, 106, 122, 124, 126, 127, 130, 146, 156, 164, 170, 184, 185, 186, 187, 188, 189, 221, 222, 223, 224, 288, 307, 311, 313, 361, 370, 373, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 446, 449, 467, 470, 471, 475, 476, 477, 478, 479, 480, 481, 490, 493, 496, 497, 499, 500, 524, 539, 540, 541, 542, 543, 545, 550, 551, 552, 555, 558, 611, 612, 613, 615, 617, 618, 620, 622, 624, 625, 637, 655, 656, 657, 669, 671, 689, 722, 724, 731, 735, 737, 740], "never": [5, 9, 16, 28, 32, 39, 78, 313, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 467, 545, 550, 611, 612, 613, 615, 617, 618, 620, 622, 716, 724, 734, 735, 737], "valueerror": [5, 16, 28, 32, 39, 43, 78, 310, 313, 343, 353, 381, 382, 387, 389, 391, 392, 393, 400, 406, 413, 550, 611, 612, 613, 615, 617, 618, 620, 622, 661, 699, 728], "reus": [5, 28, 32, 39, 78, 381, 382, 387, 389, 391, 392, 393, 400, 413, 611, 612, 613, 615, 617, 618, 620, 622, 728, 737, 762], "exist": [5, 9, 10, 26, 28, 32, 39, 78, 313, 381, 382, 386, 387, 389, 391, 392, 393, 400, 413, 456, 492, 545, 550, 609, 611, 612, 613, 615, 617, 618, 620, 622, 690, 692, 704, 706, 707, 714, 715, 718, 720, 725, 726, 727, 731, 732, 734, 735, 737, 740, 742, 750, 752, 755, 757, 760, 763], "buffer": [5, 28, 32, 39, 78, 89, 381, 382, 387, 389, 391, 392, 393, 400, 413, 540, 611, 612, 613, 615, 617, 618, 620, 622, 688, 734, 750], "possibl": [5, 9, 28, 32, 39, 49, 78, 201, 244, 258, 304, 310, 312, 313, 332, 374, 381, 382, 383, 387, 389, 391, 392, 393, 400, 413, 484, 543, 545, 547, 558, 570, 611, 612, 613, 615, 617, 618, 620, 622, 669, 671, 701, 704, 707, 709, 714, 715, 716, 718, 721, 722, 724, 726, 727, 729, 731, 733, 734, 735, 736, 737, 740, 742, 745, 749, 750, 755, 757, 763], "nativedtyp": [5, 6, 9, 13, 14, 18, 19, 22, 28, 32, 37, 41, 42, 45, 76, 77, 78, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 128, 130, 132, 136, 146, 258, 259, 260, 261, 262, 263, 264, 274, 279, 293, 304, 307, 317, 322, 421, 422, 423, 424, 425, 435, 436, 437, 438, 441, 443, 540, 541, 547, 548, 554, 555, 557, 558, 570, 603, 648, 649, 650, 653, 654, 664, 666, 667, 672, 674, 685, 724, 725, 730, 738, 742], "nativedevic": [5, 7, 9, 18, 28, 30, 32, 41, 76, 77, 78, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 148, 149, 150, 151, 152, 155, 160, 161, 162, 163, 165, 166, 167, 168, 169, 173, 258, 259, 270, 304, 317, 421, 422, 424, 425, 540, 542, 554, 647, 648, 649, 650, 685, 690, 691, 724, 725, 728, 730, 738], "interpret": [5, 9, 28, 32, 77, 78, 89, 95, 322, 435, 540, 723, 758], "9": [5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 25, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 51, 52, 59, 76, 77, 78, 95, 112, 113, 114, 115, 116, 119, 122, 175, 177, 179, 180, 183, 184, 185, 188, 194, 195, 201, 208, 214, 215, 216, 222, 223, 225, 226, 227, 230, 232, 233, 237, 238, 241, 242, 243, 248, 250, 253, 254, 281, 282, 286, 292, 293, 300, 302, 307, 308, 310, 312, 313, 320, 322, 328, 329, 330, 331, 336, 337, 341, 342, 346, 347, 349, 351, 352, 363, 374, 375, 377, 381, 382, 383, 387, 391, 396, 406, 407, 408, 410, 413, 423, 425, 428, 437, 453, 457, 458, 459, 461, 464, 472, 473, 476, 477, 480, 488, 489, 503, 505, 526, 527, 528, 532, 537, 540, 541, 543, 545, 546, 547, 548, 550, 552, 554, 555, 556, 557, 558, 561, 562, 563, 566, 569, 570, 571, 576, 577, 579, 582, 583, 586, 587, 588, 591, 594, 596, 597, 598, 600, 601, 608, 612, 616, 617, 619, 620, 622, 627, 628, 633, 635, 638, 639, 647, 648, 649, 650, 652, 657, 658, 660, 662, 663, 665, 667, 668, 670, 672, 674, 675, 690, 722, 726, 733, 737, 745, 746, 753], "39999998": [5, 77, 78, 540, 556, 659], "5999999": [5, 36, 77, 78, 540, 547, 570, 574], "0999999": [5, 22, 77, 78, 290, 307, 540, 670], "10000038": [5, 77, 78, 540], "np": [5, 8, 9, 31, 32, 33, 77, 78, 84, 95, 130, 207, 211, 310, 311, 337, 342, 354, 503, 540, 541, 543, 545, 552, 633, 695, 698, 704, 714, 719, 724, 725, 728, 730, 734, 735, 736, 737, 738, 740, 742, 744, 745, 747, 752], "order": [5, 9, 10, 13, 14, 16, 20, 21, 26, 32, 36, 37, 39, 43, 44, 49, 51, 52, 77, 78, 94, 101, 182, 201, 244, 270, 286, 304, 307, 311, 313, 316, 320, 355, 358, 359, 360, 364, 368, 370, 373, 391, 392, 393, 398, 399, 410, 415, 416, 417, 428, 540, 543, 547, 548, 550, 551, 555, 556, 557, 561, 562, 563, 564, 565, 566, 569, 580, 581, 587, 596, 597, 601, 603, 612, 615, 624, 625, 656, 658, 659, 660, 661, 662, 664, 665, 684, 688, 689, 691, 704, 706, 714, 715, 716, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 745, 747, 750, 753, 756, 757, 758, 760, 763], "90786433e": [5, 77, 78, 540], "310": [5, 77, 78, 540], "copy_arrai": [5, 28, 540], "to_ivy_arrai": [5, 28, 84, 540], "empty_lik": [5, 9, 28, 32, 311, 357, 540], "deafult": [5, 19, 42, 86, 540, 653], "uniniti": [5, 85, 86, 540, 729], "from_dlpack": [5, 28, 540], "full_lik": [5, 28, 540, 738], "fill_valu": [5, 9, 19, 28, 32, 42, 90, 91, 206, 214, 317, 425, 540, 543, 555, 656, 692, 724, 736, 738], "scalar": [5, 8, 9, 10, 14, 25, 28, 31, 32, 33, 37, 49, 61, 91, 96, 177, 198, 243, 255, 277, 278, 280, 283, 286, 288, 290, 295, 302, 307, 311, 313, 359, 381, 382, 383, 395, 511, 524, 540, 543, 545, 548, 603, 724, 733, 735, 750, 757], "fill": [5, 8, 9, 18, 19, 26, 28, 31, 32, 41, 42, 85, 90, 91, 93, 96, 97, 98, 102, 103, 228, 259, 304, 311, 313, 317, 361, 365, 370, 373, 390, 409, 422, 424, 425, 540, 543, 554, 555, 648, 656, 685, 714, 736], "equal": [5, 6, 8, 9, 10, 14, 15, 16, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 38, 39, 41, 44, 51, 52, 87, 89, 90, 91, 97, 98, 106, 186, 188, 192, 197, 199, 208, 209, 230, 232, 237, 240, 241, 245, 272, 273, 275, 288, 304, 307, 310, 313, 316, 322, 332, 387, 396, 413, 418, 419, 420, 438, 446, 449, 525, 540, 541, 543, 545, 548, 549, 550, 554, 555, 556, 557, 558, 579, 588, 589, 592, 594, 600, 605, 608, 610, 615, 617, 623, 650, 656, 658, 659, 660, 661, 662, 665, 670, 672, 673, 674, 675, 685, 686, 721, 722, 724, 726, 728, 736, 737], "000123": [5, 91, 540], "ones": [5, 9, 11, 13, 18, 26, 28, 32, 36, 41, 87, 91, 96, 98, 103, 153, 154, 190, 259, 304, 322, 443, 526, 540, 542, 543, 546, 547, 565, 566, 648, 649, 650, 704, 714, 719, 723, 726, 730, 731, 737, 744, 745, 757], "linspac": [5, 28, 76, 540, 704, 730, 740, 742, 764], "stop": [5, 9, 11, 28, 32, 34, 76, 92, 93, 167, 311, 370, 373, 490, 527, 530, 532, 533, 534, 535, 540, 542, 545, 546, 551, 552, 624, 625, 626, 638, 690, 730, 733, 740, 742, 750, 757], "num": [5, 28, 92, 93, 540, 716, 730, 742], "endpoint": [5, 28, 92, 93, 540, 685, 730], "logspac": [5, 28, 540, 742], "10": [5, 8, 9, 10, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 76, 91, 92, 93, 176, 184, 185, 188, 192, 199, 204, 206, 212, 214, 216, 227, 233, 240, 241, 246, 251, 275, 278, 283, 285, 286, 288, 289, 290, 292, 293, 297, 300, 307, 310, 313, 322, 328, 329, 330, 331, 341, 346, 347, 349, 351, 352, 353, 383, 385, 387, 391, 396, 407, 413, 433, 436, 437, 440, 442, 444, 457, 458, 459, 461, 464, 465, 467, 472, 473, 481, 489, 493, 498, 503, 505, 517, 520, 532, 540, 543, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 561, 562, 564, 570, 577, 579, 583, 584, 586, 587, 588, 591, 596, 597, 598, 612, 617, 618, 619, 620, 622, 633, 635, 638, 639, 646, 647, 648, 649, 650, 656, 658, 664, 666, 667, 668, 669, 671, 672, 674, 675, 690, 704, 707, 715, 718, 722, 723, 724, 726, 733, 736, 737, 742, 744, 745, 762], "rang": [5, 9, 22, 28, 32, 76, 92, 93, 241, 265, 304, 311, 313, 322, 359, 367, 394, 402, 404, 411, 436, 437, 438, 457, 525, 540, 543, 545, 556, 558, 658, 666, 667, 672, 674, 685, 704, 724, 728, 731, 737, 742, 745, 746, 747, 757, 763], "log": [5, 8, 9, 14, 28, 31, 32, 37, 67, 93, 217, 219, 232, 250, 251, 291, 298, 302, 307, 312, 317, 376, 421, 537, 540, 543, 594, 682, 716, 722, 723, 726, 731, 734, 735, 736, 737, 739, 740, 742, 745], "space": [5, 8, 9, 10, 28, 31, 32, 33, 76, 92, 93, 246, 286, 307, 457, 461, 540, 543, 545, 707, 740], "sequenc": [5, 9, 13, 14, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 87, 89, 91, 93, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 259, 262, 268, 269, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 302, 304, 308, 310, 311, 313, 317, 322, 323, 325, 326, 333, 334, 335, 337, 338, 342, 343, 345, 352, 353, 361, 362, 364, 368, 369, 370, 373, 374, 375, 377, 378, 379, 381, 382, 383, 386, 387, 388, 394, 396, 397, 399, 400, 402, 405, 407, 409, 410, 413, 414, 415, 417, 418, 419, 420, 422, 423, 435, 436, 437, 438, 444, 445, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 484, 488, 489, 503, 504, 506, 508, 510, 511, 524, 525, 528, 529, 530, 535, 540, 543, 545, 546, 547, 548, 550, 552, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 571, 573, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 603, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 622, 623, 627, 634, 644, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 689, 691, 716, 723, 724, 725, 726, 728, 737, 738, 740, 742, 747, 749, 760], "gener": [5, 8, 9, 13, 18, 24, 28, 31, 32, 36, 41, 47, 76, 92, 93, 101, 109, 194, 197, 207, 208, 223, 227, 236, 258, 261, 265, 266, 267, 268, 269, 270, 304, 311, 317, 322, 371, 423, 435, 540, 541, 543, 547, 548, 550, 554, 558, 570, 594, 598, 601, 623, 647, 648, 650, 651, 673, 690, 698, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 727, 728, 730, 731, 734, 735, 736, 738, 741, 742, 744, 746, 747, 749, 750, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763], "relev": [5, 28, 93, 540, 690, 704, 707, 714, 715, 716, 719, 722, 723, 724, 726, 732, 733, 736, 737, 745, 751, 755, 762, 763], "sampl": [5, 8, 9, 18, 22, 28, 31, 32, 41, 45, 92, 93, 246, 265, 304, 310, 313, 317, 333, 334, 335, 345, 404, 421, 422, 423, 424, 425, 540, 543, 554, 558, 647, 648, 649, 650, 673, 675, 686, 736, 737], "on_valu": [5, 28, 93, 96, 540], "off_valu": [5, 28, 93, 96, 540], "cuda": [5, 9, 18, 28, 32, 41, 92, 93, 96, 147, 148, 149, 163, 165, 317, 421, 422, 424, 425, 540, 542, 554, 647, 648, 649, 650, 685, 686, 687, 688, 689, 690, 691, 704, 742, 750, 752, 762], "cpu": [5, 7, 9, 18, 28, 30, 32, 41, 76, 87, 90, 92, 93, 96, 97, 98, 103, 147, 148, 150, 151, 152, 153, 158, 161, 163, 165, 168, 169, 171, 173, 317, 421, 422, 424, 425, 540, 542, 548, 554, 585, 647, 648, 649, 650, 685, 686, 687, 688, 689, 690, 691, 704, 712, 715, 716, 721, 724, 725, 735, 737, 750, 755, 757, 760, 762], "evenli": [5, 8, 9, 13, 16, 26, 28, 31, 36, 39, 76, 92, 93, 246, 310, 352, 540, 543, 547, 550, 560, 561, 562, 563, 565, 567, 569, 617], "descript": [5, 8, 9, 14, 31, 32, 37, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 271, 277, 280, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 401, 435, 438, 464, 468, 470, 472, 511, 535, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 714, 716, 727, 733, 734], "hint": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 271, 277, 280, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 401, 435, 438, 464, 468, 470, 472, 511, 535, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 714, 719, 727, 730, 731, 734, 735, 738], "assum": [5, 8, 9, 10, 13, 14, 15, 31, 32, 33, 36, 37, 38, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 259, 271, 277, 280, 296, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 369, 401, 435, 438, 464, 468, 470, 472, 481, 511, 535, 540, 541, 543, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 698, 704, 715, 718, 720, 723, 724, 727, 736, 737, 740, 744, 745, 750], "simplic": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 271, 277, 280, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 401, 435, 438, 464, 468, 470, 472, 511, 535, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 727, 740, 746, 749], "nestabl": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 271, 277, 280, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 401, 435, 438, 442, 450, 458, 459, 464, 468, 470, 472, 474, 488, 506, 511, 535, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 714, 717, 726, 727, 734, 737, 752], "therefor": [5, 8, 9, 14, 31, 32, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 109, 125, 129, 133, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 259, 270, 271, 277, 280, 304, 307, 310, 311, 313, 322, 328, 329, 330, 331, 333, 334, 335, 341, 346, 347, 348, 349, 359, 394, 401, 402, 404, 411, 435, 438, 442, 450, 458, 459, 464, 468, 470, 472, 474, 488, 506, 511, 535, 540, 541, 543, 545, 546, 547, 548, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 627, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 704, 706, 710, 714, 716, 718, 719, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 744, 746, 750, 754, 757, 763], "01": [5, 9, 10, 11, 32, 33, 34, 37, 41, 93, 219, 237, 238, 258, 264, 288, 304, 310, 331, 341, 342, 461, 503, 504, 526, 527, 532, 540, 543, 545, 546, 548, 551, 554, 582, 626, 649, 650, 720, 747], "02": [5, 10, 11, 17, 18, 31, 34, 41, 93, 179, 180, 219, 310, 331, 341, 342, 503, 504, 526, 527, 532, 540, 543, 545, 546, 549, 553, 554, 605, 646, 649, 650, 736], "03": [5, 8, 10, 11, 31, 34, 41, 93, 192, 217, 503, 504, 527, 532, 540, 543, 545, 546, 548, 549, 584, 605, 649], "04": [5, 11, 25, 29, 34, 61, 62, 93, 119, 199, 494, 526, 527, 532, 537, 540, 541, 543, 545, 546, 715, 737], "05": [5, 8, 9, 11, 17, 31, 32, 34, 40, 93, 219, 264, 275, 288, 304, 307, 316, 415, 416, 417, 472, 494, 516, 526, 527, 532, 540, 543, 545, 546, 548, 553, 587, 646, 685, 689, 736, 737], "464": [5, 8, 41, 93, 181, 182, 543], "15888336": [5, 93], "2154": [5, 93], "43469003": [5, 93], "10000": [5, 28, 93, 540], "meshgrid": [5, 28, 540], "spars": [5, 9, 15, 28, 32, 38, 94, 262, 304, 311, 361, 370, 373, 540, 549, 607], "index": [5, 9, 10, 16, 19, 20, 21, 26, 28, 32, 33, 39, 42, 43, 44, 87, 94, 163, 259, 266, 267, 272, 273, 304, 310, 311, 313, 318, 320, 322, 332, 338, 362, 364, 369, 385, 391, 394, 402, 404, 406, 409, 411, 426, 427, 436, 444, 447, 465, 467, 488, 489, 493, 538, 540, 542, 545, 550, 552, 555, 556, 557, 615, 619, 629, 630, 631, 634, 635, 636, 642, 644, 653, 654, 656, 658, 659, 660, 662, 664, 686, 700, 722, 723, 728, 731, 732, 733, 734, 736, 737, 744, 757], "xy": [5, 28, 94, 540], "dimension": [5, 8, 9, 14, 16, 19, 22, 23, 26, 28, 31, 32, 37, 39, 45, 46, 51, 76, 87, 89, 94, 101, 246, 270, 304, 310, 311, 313, 322, 337, 338, 342, 343, 353, 356, 381, 382, 383, 390, 391, 433, 444, 540, 543, 548, 550, 555, 558, 559, 576, 577, 583, 586, 589, 591, 592, 602, 603, 617, 653, 654, 656, 669, 670, 671, 672, 673, 674, 675, 676, 677, 731, 733, 737, 740, 742, 754, 757, 764], "repres": [5, 8, 9, 13, 14, 31, 32, 36, 37, 75, 94, 96, 118, 176, 177, 180, 183, 192, 194, 201, 227, 240, 244, 245, 262, 272, 273, 286, 304, 307, 310, 311, 313, 316, 317, 320, 352, 363, 401, 415, 416, 417, 421, 427, 434, 539, 540, 541, 543, 547, 548, 570, 571, 583, 591, 594, 595, 685, 689, 719, 740, 744, 754, 755, 758], "grid": [5, 94, 262, 304, 540, 726, 737, 749], "coordin": [5, 8, 19, 31, 32, 42, 94, 101, 182, 244, 266, 267, 270, 286, 304, 318, 426, 540, 543, 555, 656], "numer": [5, 6, 8, 9, 10, 14, 18, 19, 22, 29, 31, 32, 33, 37, 41, 42, 44, 51, 52, 94, 106, 174, 177, 190, 194, 199, 200, 201, 208, 209, 210, 213, 222, 223, 227, 229, 230, 231, 232, 236, 237, 238, 242, 243, 247, 248, 317, 322, 422, 435, 494, 495, 503, 504, 516, 517, 540, 541, 543, 545, 548, 554, 555, 558, 576, 583, 586, 591, 594, 596, 598, 600, 602, 648, 649, 650, 652, 653, 654, 656, 657, 662, 669, 672, 674, 685, 712, 724, 733, 735, 736, 737, 738, 739, 740, 742, 746, 754, 757, 763], "conserv": [5, 94, 540], "cartesian": [5, 94, 540], "matrix": [5, 9, 10, 13, 14, 32, 33, 36, 37, 49, 51, 94, 99, 100, 101, 270, 271, 304, 311, 313, 322, 355, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 399, 435, 446, 452, 540, 545, 547, 548, 571, 575, 577, 579, 580, 581, 582, 584, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 685, 686, 714, 724, 735, 755, 757], "ij": [5, 22, 94, 540, 558, 668], "zero": [5, 6, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 28, 29, 31, 32, 34, 36, 37, 41, 42, 45, 46, 61, 63, 64, 65, 67, 84, 85, 87, 89, 94, 96, 97, 98, 99, 100, 103, 106, 107, 175, 176, 177, 179, 180, 181, 182, 183, 186, 188, 189, 191, 192, 193, 194, 199, 200, 201, 208, 209, 210, 211, 217, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 244, 245, 247, 248, 249, 253, 254, 257, 259, 271, 278, 279, 280, 282, 290, 293, 295, 296, 297, 298, 302, 304, 307, 310, 311, 313, 320, 322, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 352, 353, 357, 359, 368, 395, 400, 401, 427, 436, 437, 453, 457, 464, 484, 526, 527, 532, 533, 534, 535, 537, 540, 541, 543, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 571, 574, 575, 577, 582, 584, 585, 586, 587, 588, 589, 590, 592, 594, 602, 603, 610, 611, 612, 613, 615, 616, 623, 646, 648, 649, 650, 653, 654, 655, 656, 658, 659, 660, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 690, 708, 719, 722, 724, 725, 726, 730, 732, 733, 736, 742, 745, 746, 756], "vector": [5, 9, 10, 13, 14, 32, 33, 36, 37, 49, 94, 310, 311, 313, 317, 322, 332, 358, 361, 367, 369, 372, 401, 403, 405, 423, 435, 453, 457, 474, 525, 540, 545, 547, 548, 571, 573, 576, 580, 581, 583, 586, 591, 596, 597, 601, 602, 603, 604, 686, 749, 757], "respect": [5, 8, 9, 11, 14, 31, 32, 34, 37, 49, 94, 174, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 236, 240, 243, 244, 250, 286, 301, 302, 307, 309, 311, 313, 316, 372, 380, 415, 417, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 540, 543, 546, 547, 548, 551, 560, 567, 568, 576, 593, 596, 624, 625, 626, 685, 713, 714, 715, 716, 719, 720, 722, 723, 724, 725, 726, 730, 731, 733, 734, 735, 737, 738, 739, 753, 763], "effect": [5, 9, 11, 22, 32, 34, 45, 94, 310, 312, 345, 376, 526, 534, 540, 546, 547, 558, 573, 673, 675, 707, 714, 719, 722, 723, 727, 730, 734, 736, 740, 750], "rank": [5, 9, 14, 16, 23, 32, 37, 39, 46, 49, 50, 55, 94, 268, 269, 304, 311, 313, 322, 361, 362, 370, 373, 401, 444, 540, 548, 550, 555, 559, 576, 578, 587, 589, 593, 595, 600, 602, 603, 610, 611, 619, 622, 623, 656, 676, 677], "length": [5, 9, 15, 16, 26, 32, 38, 39, 49, 52, 76, 89, 94, 255, 260, 263, 264, 274, 280, 302, 304, 307, 310, 311, 313, 317, 320, 332, 337, 338, 341, 342, 343, 353, 362, 369, 401, 409, 423, 428, 525, 540, 545, 547, 548, 549, 550, 556, 573, 596, 597, 605, 615, 658, 684, 686, 737, 745], "ni": [5, 94, 540], "xi": [5, 94, 540], "native_arrai": [5, 6, 8, 28, 30, 31, 32, 33, 44, 59, 62, 91, 94, 96, 98, 103, 106, 107, 108, 109, 117, 122, 129, 151, 160, 168, 184, 188, 189, 193, 194, 195, 197, 201, 205, 213, 214, 222, 227, 230, 233, 236, 241, 300, 312, 313, 377, 401, 407, 410, 446, 476, 477, 480, 510, 537, 540, 541, 542, 543, 545, 547, 548, 549, 550, 554, 555, 558, 559, 561, 562, 569, 574, 577, 582, 588, 589, 597, 598, 600, 603, 605, 607, 608, 615, 647, 656, 665, 671, 674, 676, 695, 712, 736, 737], "one_hot": [5, 28, 540, 704, 747], "depth": [5, 9, 13, 28, 32, 36, 96, 310, 313, 345, 388, 457, 469, 540, 545, 547, 552, 565, 566, 639, 684, 688, 716, 723, 745, 746, 747, 749, 751], "scatter": [5, 10, 28, 33, 96, 488, 489, 540, 545, 721, 734, 740, 764], "defin": [5, 9, 10, 14, 28, 32, 33, 37, 65, 96, 99, 100, 101, 177, 194, 201, 227, 228, 236, 238, 241, 250, 260, 263, 264, 265, 270, 271, 272, 273, 277, 302, 304, 307, 310, 311, 313, 322, 345, 357, 401, 407, 438, 472, 473, 493, 537, 540, 543, 545, 548, 558, 576, 581, 582, 595, 669, 670, 671, 673, 704, 714, 715, 719, 720, 723, 724, 727, 730, 733, 735, 736, 737, 738, 744, 746, 750, 752, 754, 755, 756, 757, 758, 761, 763, 764], "hot": [5, 28, 96, 540, 704], "dimens": [5, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 51, 52, 55, 62, 66, 96, 99, 100, 262, 269, 271, 272, 273, 279, 280, 286, 293, 300, 304, 307, 308, 310, 311, 312, 313, 316, 317, 320, 322, 324, 325, 326, 328, 329, 330, 332, 337, 338, 342, 346, 347, 348, 349, 352, 354, 355, 358, 371, 376, 381, 382, 383, 391, 402, 403, 404, 405, 407, 415, 416, 417, 423, 425, 428, 438, 440, 441, 442, 443, 444, 457, 458, 459, 461, 468, 502, 505, 525, 537, 540, 545, 547, 548, 549, 550, 551, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 602, 603, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 624, 625, 626, 652, 653, 654, 656, 658, 659, 660, 661, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 689, 726, 728, 733, 735, 736, 737, 740, 742, 745], "overrid": [5, 9, 28, 32, 96, 322, 435, 540, 719, 721], "ones_lik": [5, 28, 540, 720, 747], "tril": [5, 28, 540], "m": [5, 9, 14, 18, 31, 32, 37, 41, 51, 94, 99, 100, 101, 221, 270, 271, 304, 310, 311, 312, 313, 317, 332, 358, 361, 362, 364, 374, 383, 392, 393, 407, 421, 422, 423, 424, 425, 540, 548, 552, 554, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 635, 648, 649, 650, 704, 710, 715, 716, 717, 723, 742], "whose": [5, 8, 9, 10, 14, 16, 20, 22, 28, 31, 32, 33, 37, 39, 43, 45, 51, 91, 99, 100, 176, 180, 183, 191, 192, 193, 232, 233, 239, 240, 244, 245, 246, 271, 285, 289, 290, 292, 296, 304, 311, 313, 358, 400, 412, 451, 506, 540, 543, 545, 548, 550, 556, 558, 575, 577, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 603, 612, 616, 658, 659, 660, 667, 668, 727, 737], "innermost": [5, 9, 14, 37, 99, 100, 271, 304, 311, 358, 540, 548, 575, 577, 579, 580, 581, 582, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600], "two": [5, 9, 14, 20, 32, 33, 37, 51, 52, 73, 76, 87, 94, 99, 100, 101, 132, 140, 188, 202, 203, 237, 270, 271, 275, 284, 285, 287, 288, 290, 292, 299, 304, 307, 310, 311, 312, 313, 322, 338, 356, 357, 358, 368, 377, 382, 401, 407, 410, 435, 444, 449, 539, 540, 541, 543, 545, 548, 550, 556, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 602, 620, 658, 659, 660, 661, 686, 708, 714, 715, 718, 719, 724, 725, 726, 727, 731, 735, 736, 737, 740, 741, 745, 747, 754, 762], "mxn": [5, 9, 14, 37, 99, 100, 271, 304, 540, 548, 579, 587, 589, 590, 592, 593, 597, 600], "matric": [5, 9, 14, 32, 37, 49, 51, 94, 99, 100, 271, 304, 311, 313, 358, 361, 362, 364, 368, 369, 372, 390, 540, 547, 548, 571, 575, 577, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600, 601, 712, 749, 757], "diagon": [5, 9, 14, 32, 37, 87, 99, 100, 101, 259, 270, 271, 304, 311, 313, 356, 359, 365, 390, 540, 548, 578, 600], "main": [5, 9, 14, 32, 37, 87, 99, 100, 101, 259, 270, 271, 304, 311, 313, 356, 390, 540, 548, 578, 579, 600, 714, 715, 716, 718, 721, 722, 732, 734, 755, 757, 758, 763], "lower": [5, 8, 9, 14, 18, 31, 32, 37, 41, 87, 99, 225, 259, 265, 270, 271, 304, 322, 438, 439, 444, 540, 543, 548, 554, 575, 581, 582, 589, 650, 684, 685, 704, 716, 724, 726, 735, 737, 742, 750, 752, 753, 754, 755, 757, 758, 763, 764], "triangular": [5, 9, 14, 37, 99, 100, 101, 270, 271, 304, 540, 548, 575, 581, 582, 589, 593], "alloc": [5, 6, 9, 29, 99, 100, 106, 271, 304, 540, 541, 714, 716, 750], "triu": [5, 28, 540], "upper": [5, 9, 14, 18, 32, 37, 41, 87, 100, 101, 259, 271, 304, 322, 438, 540, 548, 554, 575, 581, 582, 593, 650, 684, 734, 737], "zeros_lik": [5, 28, 106, 223, 526, 527, 530, 532, 534, 540, 541, 543, 546, 550, 608, 735, 740], "data_typ": [6, 9, 29, 32, 136, 541, 721, 724, 737, 738], "_arraywithdatatyp": [6, 51], "astyp": [6, 13, 29, 36, 541, 547, 563, 565, 566, 569, 704, 724, 734, 735, 740], "irrespect": [6, 14, 29, 37, 106, 541, 548, 596, 722, 734, 744, 764], "promot": [6, 8, 9, 14, 29, 31, 32, 37, 44, 51, 52, 106, 109, 132, 133, 134, 140, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 199, 201, 215, 216, 217, 218, 219, 224, 227, 232, 236, 239, 240, 241, 242, 243, 244, 245, 248, 283, 291, 296, 307, 322, 435, 497, 519, 541, 543, 545, 548, 550, 558, 575, 576, 583, 584, 586, 587, 588, 589, 591, 592, 594, 595, 602, 603, 609, 619, 662, 670, 673, 718, 727, 728, 731, 739], "rule": [6, 8, 9, 14, 29, 31, 32, 37, 106, 109, 132, 133, 134, 183, 194, 227, 229, 236, 238, 246, 248, 313, 322, 389, 435, 541, 543, 548, 550, 575, 576, 583, 588, 591, 595, 609, 698, 718, 719, 722, 723, 724, 726, 729, 730, 731, 733, 737, 740, 758], "cast": [6, 8, 9, 14, 22, 29, 31, 37, 106, 109, 134, 228, 322, 436, 437, 541, 543, 548, 558, 603, 666, 667, 672, 674, 731, 736, 742], "nan": [6, 8, 9, 10, 20, 22, 29, 31, 32, 33, 106, 174, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 247, 250, 275, 284, 288, 293, 296, 302, 307, 322, 433, 434, 441, 442, 443, 470, 524, 538, 541, 543, 545, 556, 558, 559, 658, 659, 660, 661, 669, 670, 671, 673, 674, 675, 676, 677, 718, 724, 727, 733, 738, 739], "infin": [6, 8, 10, 14, 29, 31, 37, 106, 174, 175, 176, 177, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 215, 216, 217, 218, 219, 222, 227, 228, 230, 232, 236, 237, 239, 240, 241, 244, 245, 247, 296, 307, 470, 538, 541, 543, 545, 548, 558, 559, 594, 603, 669, 671, 676, 677, 718, 727], "implement": [6, 7, 9, 20, 21, 29, 30, 32, 37, 44, 49, 106, 120, 121, 134, 153, 154, 168, 174, 175, 176, 179, 180, 181, 182, 191, 192, 194, 197, 199, 201, 215, 216, 217, 218, 227, 229, 232, 236, 239, 240, 244, 245, 296, 307, 311, 322, 357, 358, 441, 442, 462, 463, 541, 542, 543, 545, 547, 548, 556, 557, 558, 573, 580, 581, 582, 591, 600, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 695, 704, 712, 714, 717, 718, 719, 720, 722, 724, 725, 727, 728, 730, 731, 732, 734, 736, 737, 738, 740, 742, 744, 745, 746, 747, 749, 750, 752, 754, 755, 756, 757, 760, 763, 764], "match": [6, 9, 26, 29, 32, 106, 201, 236, 278, 280, 307, 310, 313, 353, 385, 406, 409, 484, 541, 543, 545, 548, 581, 582, 587, 603, 712, 714, 719, 721, 722, 726, 736, 758, 763], "newli": [6, 29, 106, 451, 541, 545, 716, 720, 723, 734, 737], "float64": [6, 9, 18, 22, 28, 29, 31, 32, 33, 41, 45, 76, 89, 90, 106, 109, 113, 114, 119, 120, 123, 124, 129, 130, 134, 136, 137, 143, 146, 228, 283, 307, 322, 435, 483, 540, 541, 545, 548, 554, 581, 582, 587, 603, 649, 650, 667, 724, 736, 737], "broadcast_arrai": [6, 29, 541], "against": [6, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 107, 226, 245, 275, 276, 279, 288, 307, 322, 441, 442, 443, 444, 481, 541, 543, 545, 548, 555, 586, 587, 589, 592, 653, 706, 737, 742, 750, 757], "x2": [6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 51, 52, 56, 107, 133, 140, 160, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 230, 232, 236, 243, 248, 275, 278, 283, 284, 285, 287, 289, 294, 298, 307, 313, 322, 395, 435, 446, 541, 542, 543, 545, 548, 555, 576, 583, 586, 591, 595, 598, 599, 602, 657, 692, 718, 724, 726, 728, 730, 734, 735], "x3": [6, 10, 107, 446, 541, 545], "mix": [6, 8, 29, 31, 32, 33, 38, 41, 51, 52, 107, 120, 121, 134, 153, 154, 184, 187, 188, 189, 194, 195, 201, 205, 213, 214, 224, 227, 230, 236, 312, 322, 377, 442, 460, 462, 463, 464, 465, 474, 508, 511, 541, 542, 543, 545, 547, 548, 549, 550, 553, 558, 561, 563, 566, 569, 571, 574, 575, 598, 605, 607, 608, 646, 668, 670, 673, 714, 717, 724, 725, 726, 734, 740, 742, 752, 757, 761, 763], "broadcast_to": [6, 29, 541, 724], "can_cast": [6, 29, 541, 724, 731, 735], "occur": [6, 8, 20, 29, 31, 43, 109, 228, 244, 541, 543, 555, 556, 653, 654, 658, 659, 660, 661, 718, 723, 725, 728, 739], "accord": [6, 9, 10, 16, 22, 29, 39, 45, 109, 119, 177, 188, 194, 201, 227, 238, 265, 304, 310, 313, 353, 401, 464, 467, 488, 489, 541, 543, 545, 548, 550, 558, 602, 610, 623, 673, 675, 692, 698, 714, 715, 718, 724, 729, 731, 735, 737], "as_n": [6, 7, 26, 29, 30, 112, 113, 114, 115, 116, 117, 123, 150, 151, 163, 541, 542, 724], "int32": [6, 9, 10, 18, 19, 22, 29, 32, 33, 41, 42, 87, 92, 98, 103, 106, 109, 111, 113, 115, 117, 120, 122, 123, 127, 130, 134, 138, 142, 144, 162, 255, 302, 318, 322, 426, 436, 437, 438, 465, 474, 510, 540, 541, 542, 545, 554, 555, 558, 648, 649, 650, 654, 666, 667, 672, 674, 724, 735, 737, 742], "finfo": [6, 29, 541, 737], "inform": [6, 9, 11, 29, 34, 119, 122, 265, 304, 447, 535, 541, 545, 546, 551, 626, 704, 713, 714, 715, 716, 718, 722, 723, 728, 731, 732, 734, 736, 737, 760], "about": [6, 29, 119, 122, 541, 704, 708, 711, 713, 714, 715, 716, 717, 718, 721, 723, 724, 725, 729, 730, 734, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 750, 758, 759, 762], "8": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 51, 52, 59, 90, 91, 95, 98, 103, 112, 114, 115, 116, 119, 152, 169, 177, 179, 180, 184, 185, 188, 190, 192, 198, 201, 205, 206, 212, 213, 214, 219, 222, 223, 225, 226, 227, 232, 233, 236, 237, 238, 241, 242, 245, 246, 247, 253, 254, 256, 258, 259, 275, 283, 286, 288, 289, 290, 293, 300, 302, 304, 307, 310, 311, 312, 313, 322, 328, 329, 330, 331, 336, 337, 341, 342, 346, 347, 349, 351, 352, 357, 363, 374, 375, 377, 378, 379, 381, 382, 383, 387, 391, 396, 397, 406, 407, 409, 410, 413, 414, 423, 425, 437, 440, 441, 444, 450, 451, 453, 457, 458, 461, 464, 468, 472, 473, 474, 476, 477, 480, 483, 488, 489, 493, 503, 504, 505, 506, 526, 529, 531, 534, 536, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 561, 565, 566, 569, 570, 571, 573, 577, 578, 579, 582, 583, 586, 587, 588, 591, 594, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 612, 619, 620, 622, 628, 635, 639, 647, 648, 649, 650, 652, 657, 658, 660, 662, 663, 665, 667, 668, 670, 672, 674, 675, 686, 715, 722, 723, 726, 737, 741, 745], "14": [6, 8, 9, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 106, 119, 122, 175, 180, 182, 189, 193, 219, 223, 227, 233, 240, 248, 282, 310, 311, 313, 322, 328, 329, 330, 331, 341, 348, 351, 352, 355, 387, 391, 396, 413, 436, 503, 526, 541, 543, 545, 546, 547, 548, 550, 552, 556, 558, 561, 562, 564, 566, 570, 579, 583, 591, 600, 622, 639, 648, 649, 650, 658, 667, 668, 722, 726, 737], "resolut": [6, 29, 119, 541, 716], "1e": [6, 9, 11, 14, 15, 17, 29, 32, 34, 37, 38, 40, 50, 119, 275, 288, 307, 316, 415, 416, 417, 494, 495, 503, 516, 517, 526, 527, 532, 534, 541, 545, 546, 548, 549, 553, 596, 605, 606, 607, 646, 687, 689, 690, 704, 722, 731, 734, 736, 746, 747], "06": [6, 18, 31, 34, 50, 59, 119, 176, 192, 310, 331, 341, 532, 537, 541, 546, 650, 737, 745], "min": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 99, 101, 119, 122, 226, 270, 272, 304, 311, 359, 458, 488, 489, 503, 540, 541, 543, 545, 548, 558, 587, 593, 596, 597, 603, 704], "4028235e": [6, 119, 541], "38": [6, 9, 31, 32, 41, 119, 244, 294, 307, 310, 322, 329, 348, 351, 352, 436, 541, 543, 548, 588, 726], "max": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 119, 122, 225, 310, 311, 313, 328, 329, 330, 346, 347, 348, 349, 351, 359, 408, 452, 453, 458, 474, 488, 489, 541, 543, 545, 548, 558, 587, 589, 592, 686, 690, 723, 735], "iinfo": [6, 29, 541], "integ": [6, 8, 9, 13, 14, 16, 18, 22, 23, 26, 31, 32, 33, 36, 37, 39, 41, 45, 46, 51, 52, 76, 90, 122, 123, 129, 133, 134, 138, 174, 184, 185, 186, 187, 188, 189, 190, 200, 201, 212, 224, 229, 232, 236, 237, 247, 248, 272, 273, 279, 282, 283, 304, 307, 310, 313, 317, 320, 322, 337, 342, 352, 387, 396, 401, 413, 421, 422, 423, 424, 425, 427, 428, 433, 435, 436, 437, 442, 444, 467, 483, 493, 525, 540, 541, 543, 545, 547, 548, 550, 554, 557, 558, 559, 560, 561, 562, 563, 565, 567, 569, 576, 578, 588, 602, 603, 617, 647, 648, 649, 650, 651, 652, 664, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 716, 722, 724, 733, 736, 737, 742, 744], "119": [6, 122], "122": [6, 122, 192, 543], "int8": [6, 18, 28, 29, 41, 89, 115, 120, 122, 123, 127, 255, 302, 540, 541, 648, 724, 737], "128": [6, 8, 13, 29, 31, 36, 52, 122, 198, 310, 331, 341, 457, 467, 541, 543, 545, 547, 548, 562, 564, 569, 591, 704], "127": [6, 9, 14, 29, 32, 122, 296, 307, 541, 548, 583], "12": [6, 8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 40, 41, 45, 51, 52, 122, 177, 179, 184, 188, 189, 192, 194, 195, 196, 214, 227, 230, 237, 240, 247, 248, 263, 264, 286, 289, 290, 304, 307, 310, 313, 322, 328, 329, 330, 331, 333, 337, 338, 346, 347, 351, 352, 353, 385, 387, 391, 396, 413, 425, 436, 442, 443, 453, 457, 458, 489, 495, 503, 517, 543, 545, 547, 548, 550, 552, 553, 554, 555, 556, 558, 561, 565, 570, 571, 579, 583, 587, 591, 597, 598, 600, 612, 616, 618, 620, 622, 639, 646, 648, 649, 650, 657, 658, 666, 667, 668, 672, 674, 715, 720, 722, 724, 726, 733], "54": [6, 8, 13, 31, 32, 36, 41, 122, 191, 192, 197, 212, 241, 247, 260, 304, 310, 322, 331, 341, 436, 543, 547, 548, 558, 571, 588, 591, 648, 649, 650, 668, 723, 726], "1220": [6, 122], "int16": [6, 9, 18, 22, 29, 41, 109, 113, 115, 120, 122, 129, 144, 255, 302, 322, 436, 437, 541, 558, 648, 666, 667, 672, 674, 724, 735, 737, 742], "32768": [6, 29, 122, 504, 545], "32767": [6, 29, 122], "is_bool_dtyp": [6, 29, 541], "is_float_dtyp": [6, 29, 541, 738], "is_int_dtyp": [6, 29, 541, 736, 738], "is_uint_dtyp": [6, 29, 541, 736, 738], "result_typ": [6, 29, 541, 724], "arrays_and_dtyp": [6, 29, 134, 541], "involv": [6, 29, 134, 177, 194, 201, 227, 232, 541, 543, 707, 709, 717, 723, 724, 726, 736, 740, 747, 757, 763], "_arraywithdevic": [7, 51], "dev": [7, 26, 30, 155, 162, 542, 715, 725, 731, 744, 746], "to_devic": [7, 30, 150, 542, 704], "move": [7, 9, 30, 32, 101, 164, 168, 172, 270, 304, 313, 400, 540, 542, 704, 716, 725, 738], "__dlpack__": [7, 30, 88, 168, 540, 542], "mai": [7, 8, 9, 14, 20, 21, 30, 31, 37, 44, 51, 52, 76, 88, 168, 194, 195, 201, 206, 214, 222, 223, 227, 228, 230, 245, 338, 456, 492, 540, 542, 543, 545, 548, 556, 557, 558, 594, 603, 658, 659, 660, 661, 662, 665, 669, 670, 671, 673, 708, 713, 714, 715, 716, 718, 722, 723, 724, 728, 731, 732, 733, 735, 736, 737, 740, 743, 744, 746, 764], "caveat": [7, 30, 168, 312, 376, 542], "portabl": [7, 30, 168, 542, 704, 755], "_arraywithelementwis": [8, 51], "ab": [8, 14, 24, 31, 47, 51, 52, 232, 275, 288, 307, 313, 408, 543, 548, 552, 587, 597, 603, 635, 638, 698, 712, 719, 724, 732, 735, 737], "absolut": [8, 9, 14, 24, 26, 31, 32, 37, 51, 174, 238, 275, 288, 291, 297, 307, 311, 312, 359, 371, 374, 375, 543, 548, 587, 588, 589, 594, 709, 715], "aco": [8, 31, 543], "real": [8, 9, 22, 31, 32, 45, 51, 61, 64, 67, 97, 98, 174, 175, 176, 177, 179, 180, 181, 182, 183, 192, 194, 195, 197, 199, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 224, 227, 229, 230, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 281, 291, 307, 310, 311, 332, 353, 358, 359, 537, 540, 543, 548, 555, 558, 580, 581, 582, 587, 594, 596, 597, 600, 603, 656, 669, 671, 672, 673, 674, 722, 759], "invers": [8, 9, 14, 31, 32, 37, 175, 176, 179, 180, 181, 182, 183, 310, 320, 332, 341, 343, 427, 543, 548, 584, 588, 592, 692, 724, 749], "cosin": [8, 31, 175, 176, 191, 192, 258, 261, 304, 310, 331, 341, 543, 686], "57": [8, 9, 31, 32, 152, 175, 176, 179, 180, 182, 189, 192, 193, 233, 249, 542, 543], "69": [8, 34, 41, 175, 217, 310, 331, 341, 530, 543, 546, 548, 587, 588, 649, 737, 745], "acosh": [8, 31, 120, 121, 541, 543, 712], "area": [8, 9, 31, 32, 36, 176, 180, 183, 310, 345, 352, 543, 707, 734, 740, 748, 753], "hyperbol": [8, 31, 176, 180, 183, 192, 240, 244, 245, 543], "sector": [8, 31, 176, 180, 183, 543, 707], "32": [8, 9, 18, 31, 32, 36, 37, 41, 51, 52, 61, 118, 176, 188, 189, 198, 212, 234, 237, 238, 277, 307, 310, 311, 313, 322, 329, 330, 331, 341, 351, 352, 357, 385, 436, 457, 473, 537, 541, 543, 545, 547, 548, 554, 555, 558, 562, 564, 565, 566, 569, 571, 586, 591, 648, 649, 650, 657, 668, 704, 723, 733, 745, 762], "99": [8, 9, 11, 29, 31, 41, 90, 176, 191, 297, 307, 503, 530, 540, 543, 545, 546, 552, 558, 631, 639, 649, 668], "second": [8, 9, 11, 14, 16, 20, 31, 32, 33, 34, 37, 39, 43, 51, 52, 73, 101, 132, 140, 177, 182, 184, 186, 187, 188, 189, 195, 201, 202, 203, 204, 205, 206, 212, 213, 214, 219, 220, 221, 223, 224, 227, 230, 232, 243, 265, 270, 275, 284, 286, 287, 288, 294, 298, 299, 304, 307, 311, 312, 313, 320, 322, 357, 358, 359, 363, 377, 407, 412, 422, 424, 428, 435, 438, 449, 498, 520, 526, 527, 532, 539, 540, 541, 543, 545, 546, 548, 550, 551, 552, 556, 576, 579, 580, 581, 583, 586, 591, 593, 594, 596, 598, 602, 619, 620, 625, 628, 658, 659, 660, 690, 708, 715, 718, 721, 724, 726, 729, 734, 735, 737, 739, 744, 762], "compat": [8, 14, 16, 19, 22, 23, 31, 37, 39, 42, 45, 46, 51, 52, 108, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 248, 541, 543, 548, 550, 555, 558, 559, 576, 589, 592, 595, 598, 602, 603, 615, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 704, 707, 720, 730, 735, 736, 738, 742, 750], "multipli": [8, 9, 13, 22, 31, 32, 36, 49, 177, 243, 289, 310, 311, 345, 367, 368, 436, 437, 543, 547, 558, 570, 666, 672, 716, 719, 720, 722, 726], "determin": [8, 9, 14, 16, 20, 23, 26, 31, 32, 33, 37, 44, 46, 49, 51, 52, 87, 109, 111, 118, 124, 125, 126, 127, 129, 130, 131, 146, 156, 158, 159, 170, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 197, 199, 201, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 224, 227, 232, 236, 239, 240, 241, 242, 243, 244, 245, 248, 291, 296, 307, 310, 311, 312, 322, 345, 359, 374, 435, 446, 449, 470, 471, 475, 476, 477, 478, 479, 480, 506, 524, 540, 541, 542, 543, 545, 548, 550, 551, 556, 559, 575, 576, 577, 579, 583, 584, 586, 588, 589, 591, 592, 594, 595, 600, 602, 603, 609, 624, 625, 626, 658, 659, 660, 661, 662, 676, 677, 685, 689, 706, 722, 724, 725, 727, 731, 735, 737, 739, 740], "15": [8, 9, 10, 14, 18, 22, 28, 29, 31, 32, 33, 36, 37, 39, 41, 45, 52, 91, 119, 177, 184, 188, 194, 205, 212, 213, 219, 227, 236, 237, 238, 286, 300, 307, 308, 310, 311, 313, 322, 328, 329, 346, 348, 351, 352, 357, 387, 391, 396, 413, 436, 453, 457, 458, 461, 472, 473, 498, 503, 520, 540, 541, 543, 545, 547, 548, 550, 552, 554, 555, 556, 558, 561, 571, 579, 582, 583, 584, 591, 597, 598, 616, 622, 627, 639, 648, 649, 656, 658, 666, 667, 668, 715, 723, 726, 733, 760], "angl": [8, 31, 182, 192, 240, 245, 287, 307, 543, 749], "deg": [8, 31, 178, 543], "radian": [8, 9, 31, 32, 175, 178, 179, 181, 182, 191, 193, 233, 239, 244, 296, 307, 543, 727], "degre": [8, 9, 22, 31, 32, 45, 178, 193, 233, 313, 407, 543, 558, 673, 675, 756], "1j": [8, 31, 32, 178, 179, 191, 192, 197, 199, 211, 234, 239, 240, 244, 277, 503, 543, 545], "2j": [8, 9, 31, 32, 178, 207, 277, 310, 337, 342, 504, 543, 545], "3j": [8, 9, 31, 32, 178, 211, 234, 277, 307, 543], "35619449": [8, 178, 543], "78539816": [8, 178, 543], "135": [8, 178, 452, 543, 545], "45": [8, 9, 22, 31, 32, 34, 36, 41, 52, 178, 182, 194, 237, 238, 294, 307, 310, 322, 331, 341, 352, 436, 442, 526, 532, 543, 546, 548, 550, 558, 591, 617, 649, 650, 668], "asin": [8, 31, 543], "sine": [8, 31, 179, 180, 239, 240, 543], "927": [8, 31, 179], "asinh": [8, 31, 179, 543], "atan": [8, 31, 543], "tangent": [8, 31, 181, 182, 183, 244, 245, 543, 727], "785": [8, 31, 181, 182, 543], "atan2": [8, 31, 543], "quotient": [8, 31, 182, 194, 201, 543], "245": [8, 36, 182, 547, 570, 571], "68": [8, 41, 62, 90, 182, 310, 331, 341, 537, 540, 543, 553, 646, 649, 650], "588": [8, 182, 543], "inf": [8, 9, 10, 14, 31, 32, 33, 37, 182, 199, 208, 209, 210, 211, 215, 216, 228, 250, 291, 302, 307, 311, 322, 355, 438, 470, 524, 538, 543, 545, 548, 587, 603, 712, 724, 733], "36": [8, 9, 13, 22, 32, 33, 37, 182, 237, 238, 286, 307, 310, 322, 331, 341, 436, 457, 458, 504, 543, 545, 548, 552, 558, 571, 588, 591, 601, 638, 668], "75": [8, 9, 31, 32, 33, 36, 41, 68, 92, 180, 182, 194, 207, 261, 285, 286, 304, 307, 352, 444, 459, 472, 503, 537, 540, 543, 545, 548, 552, 554, 561, 584, 591, 635, 650], "52": [8, 31, 33, 34, 41, 182, 192, 194, 322, 436, 457, 458, 473, 526, 543, 545, 546, 547, 548, 558, 571, 591, 650, 668, 698], "719": [8, 182, 543], "197": [8, 182, 543], "atanh": [8, 31, 543], "549": [8, 31, 36, 183, 543, 547, 571], "47": [8, 9, 14, 18, 31, 32, 33, 34, 36, 41, 183, 241, 310, 322, 329, 347, 348, 436, 457, 458, 530, 543, 545, 546, 547, 548, 554, 571, 583, 649, 650], "bitwise_and": [8, 31, 543], "11": [8, 9, 10, 13, 14, 18, 22, 31, 32, 33, 36, 37, 39, 41, 45, 52, 177, 181, 184, 199, 236, 237, 243, 290, 307, 310, 311, 313, 328, 329, 341, 346, 347, 349, 351, 352, 360, 385, 387, 391, 396, 398, 413, 436, 437, 451, 457, 458, 464, 473, 489, 543, 545, 547, 548, 549, 550, 552, 554, 555, 556, 558, 561, 562, 570, 571, 579, 582, 583, 584, 586, 587, 591, 596, 597, 605, 607, 612, 617, 618, 620, 622, 633, 635, 645, 648, 649, 650, 657, 658, 666, 667, 668, 675, 722, 723, 724, 726, 733], "bitwise_invert": [8, 31, 543], "bitiwse_invert": [8, 185], "bitwise_left_shift": [8, 31, 543], "bitwise_or": [8, 31, 543], "bitwise_right_shift": [8, 31, 51, 543], "64": [8, 9, 13, 31, 32, 33, 36, 37, 41, 45, 52, 118, 188, 198, 232, 241, 242, 283, 307, 310, 331, 341, 457, 458, 504, 532, 541, 543, 545, 546, 547, 548, 552, 558, 562, 564, 566, 569, 588, 591, 601, 635, 639, 649, 668, 672, 704, 715, 745, 746, 762], "16": [8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 51, 52, 122, 188, 217, 237, 244, 283, 286, 290, 307, 310, 313, 322, 328, 329, 331, 337, 341, 342, 346, 347, 349, 352, 391, 436, 442, 458, 461, 483, 503, 504, 536, 541, 543, 545, 546, 547, 548, 550, 552, 554, 555, 558, 569, 571, 575, 579, 582, 583, 591, 597, 622, 635, 639, 648, 649, 650, 657, 667, 668, 704, 716, 726, 745], "bitwise_xor": [8, 31, 51, 543], "89": [8, 18, 29, 31, 32, 41, 52, 122, 189, 541, 543, 548, 558, 598, 649, 650, 674], "51": [8, 9, 31, 32, 33, 41, 189, 227, 240, 311, 331, 373, 543, 650], "18": [8, 9, 18, 31, 32, 36, 37, 41, 45, 62, 189, 194, 236, 240, 249, 286, 307, 310, 313, 331, 337, 341, 342, 346, 349, 352, 391, 537, 543, 548, 554, 558, 565, 579, 586, 591, 648, 649, 650, 667, 668, 672, 722, 726], "19": [8, 9, 18, 31, 32, 36, 37, 41, 180, 189, 217, 227, 244, 310, 311, 313, 322, 330, 331, 342, 346, 349, 352, 357, 391, 436, 543, 548, 552, 554, 557, 579, 587, 600, 638, 648, 649, 650, 665, 726], "26": [8, 9, 17, 18, 32, 33, 34, 41, 189, 194, 240, 310, 311, 331, 368, 472, 526, 543, 545, 546, 547, 548, 552, 553, 558, 569, 579, 591, 598, 628, 646, 648, 649, 668], "27": [8, 9, 14, 18, 31, 32, 36, 37, 41, 45, 188, 189, 192, 232, 240, 241, 283, 307, 310, 331, 341, 473, 543, 545, 548, 552, 558, 586, 591, 601, 628, 635, 649, 668, 672], "23": [8, 9, 14, 18, 28, 31, 32, 33, 36, 41, 91, 189, 192, 209, 210, 211, 234, 236, 237, 238, 240, 247, 277, 278, 307, 310, 313, 322, 328, 329, 331, 341, 346, 347, 348, 349, 352, 385, 436, 442, 540, 543, 547, 548, 552, 555, 566, 579, 583, 587, 597, 628, 635, 639, 648, 649, 650, 657, 704, 723, 737, 742], "20": [8, 9, 13, 18, 22, 31, 32, 33, 36, 37, 41, 45, 189, 193, 197, 233, 237, 241, 286, 288, 290, 307, 310, 313, 328, 330, 346, 349, 352, 385, 457, 464, 465, 467, 489, 493, 503, 543, 545, 548, 554, 555, 558, 561, 562, 572, 579, 584, 587, 591, 598, 648, 656, 657, 666, 667, 668, 672, 674, 704, 723, 740, 744], "74": [8, 41, 189, 219, 543, 548, 588], "41": [8, 9, 14, 31, 32, 33, 36, 37, 62, 181, 189, 227, 241, 310, 311, 318, 322, 329, 347, 352, 365, 426, 436, 452, 453, 537, 543, 545, 548, 558, 575, 583, 674], "59": [8, 189, 322, 436], "24": [8, 9, 14, 22, 31, 32, 33, 36, 37, 41, 51, 189, 197, 212, 214, 227, 237, 238, 241, 286, 289, 307, 310, 322, 328, 330, 331, 341, 346, 347, 348, 349, 352, 436, 457, 458, 543, 545, 548, 552, 558, 561, 579, 587, 591, 628, 639, 648, 649, 650, 666, 668, 728, 745], "ceil": [8, 9, 31, 32, 49, 76, 310, 328, 329, 330, 346, 347, 348, 351, 540, 543, 686, 734], "round": [8, 9, 31, 32, 49, 50, 177, 190, 194, 200, 201, 227, 241, 247, 248, 282, 307, 543, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749], "co": [8, 10, 31, 192, 197, 199, 240, 461, 543, 545, 707, 713, 724, 742, 749], "express": [8, 9, 31, 32, 175, 179, 181, 182, 191, 193, 233, 239, 244, 296, 307, 543, 692, 727, 735, 742, 747, 757, 758], "416": [8, 191, 543], "540": [8, 191], "990": [8, 191], "cosh": [8, 31, 191, 543], "76": [8, 22, 29, 31, 32, 41, 122, 176, 192, 240, 341, 541, 543, 548, 552, 558, 598, 635, 649, 668], "81": [8, 14, 29, 31, 37, 41, 122, 192, 217, 242, 322, 436, 541, 543, 548, 552, 554, 558, 583, 588, 601, 635, 650, 668, 737], "deg2rad": [8, 31, 543], "convers": [8, 9, 32, 193, 233, 490, 500, 545, 708, 714, 720, 741, 743, 747, 749, 750, 752, 756, 763], "90": [8, 9, 31, 32, 189, 193, 233, 237, 297, 307, 313, 322, 407, 436, 543, 548, 558, 591, 668, 707], "180": [8, 31, 193, 233, 543], "270": [8, 31, 193, 233, 543], "360": [8, 31, 193, 233, 543, 723], "71": [8, 31, 36, 193, 233, 352, 543], "28": [8, 9, 13, 17, 31, 32, 33, 36, 37, 41, 45, 193, 217, 233, 310, 311, 331, 341, 357, 442, 472, 526, 543, 545, 546, 547, 548, 553, 558, 562, 564, 566, 569, 571, 591, 646, 648, 649, 650, 668, 672, 704], "divid": [8, 9, 10, 16, 26, 31, 32, 39, 51, 52, 201, 316, 415, 416, 417, 503, 543, 545, 550, 617, 719, 722, 726, 729, 737], "dividend": [8, 31, 194, 201, 236, 248, 543], "divisor": [8, 9, 11, 22, 31, 32, 34, 45, 194, 201, 204, 205, 236, 248, 310, 313, 328, 329, 330, 387, 396, 413, 526, 527, 532, 543, 546, 558, 673, 675, 686, 690], "375": [8, 195, 230], "erf": [8, 31, 543], "exponenti": [8, 9, 31, 32, 196, 197, 199, 219, 232, 254, 302, 311, 366, 543], "gauss": [8, 31, 196, 543], "error": [8, 9, 13, 26, 31, 32, 36, 59, 196, 244, 311, 312, 322, 323, 370, 373, 374, 375, 442, 445, 492, 537, 543, 545, 547, 548, 558, 574, 594, 597, 669, 671, 687, 688, 690, 701, 708, 709, 713, 715, 716, 718, 719, 720, 723, 724, 725, 726, 729, 730, 735, 737, 738, 739, 744, 750, 757], "328": [8, 196, 244, 543], "677": [8, 196, 543], "842": [8, 196, 244, 543], "exp": [8, 9, 31, 32, 65, 67, 199, 219, 232, 251, 302, 310, 337, 342, 537, 543, 548, 594, 733, 735], "evalu": [8, 9, 26, 31, 32, 197, 199, 215, 216, 217, 218, 222, 229, 231, 238, 242, 291, 311, 313, 368, 398, 536, 543, 546, 552, 559, 637, 638, 676, 677, 687, 688, 716, 722, 724, 731, 732, 757], "71828198": [8, 31, 197], "38905573": [8, 31, 197], "08553696": [8, 31, 197, 543], "exp2": [8, 31, 543], "power": [8, 9, 10, 14, 31, 32, 33, 37, 51, 52, 188, 197, 198, 232, 274, 283, 304, 307, 494, 504, 516, 543, 545, 548, 552, 588, 601, 633, 685, 739, 744, 745, 746, 757, 759, 763], "expm1": [8, 31, 543, 724], "244": [8, 199, 704], "918": [8, 199], "48": [8, 9, 31, 32, 33, 34, 41, 61, 176, 199, 241, 310, 329, 330, 331, 341, 347, 348, 351, 472, 526, 530, 537, 543, 545, 546, 548, 552, 558, 591, 628, 649, 668], "_": [8, 26, 31, 34, 109, 197, 199, 207, 208, 223, 322, 373, 435, 457, 526, 527, 541, 543, 545, 546, 548, 550, 552, 558, 594, 597, 623, 634, 673, 710, 714, 727, 732, 734, 737, 745], "147": [8, 199, 543], "floor": [8, 9, 31, 32, 49, 188, 201, 310, 328, 329, 330, 332, 346, 347, 348, 351, 543, 686, 734], "floor_divid": [8, 31, 543], "fmin": [8, 31, 543], "minimum": [8, 9, 10, 16, 19, 22, 31, 32, 33, 39, 42, 45, 174, 202, 229, 272, 283, 304, 307, 313, 322, 401, 433, 437, 494, 495, 503, 504, 516, 517, 543, 545, 550, 555, 558, 608, 654, 669, 671, 739, 754, 760, 764], "gcd": [8, 31, 543, 724], "greater": [8, 9, 13, 16, 18, 31, 32, 36, 41, 51, 52, 89, 175, 176, 179, 180, 182, 183, 186, 188, 194, 200, 201, 215, 217, 232, 236, 238, 240, 241, 245, 246, 247, 276, 307, 310, 332, 337, 342, 540, 543, 547, 548, 550, 554, 574, 576, 588, 618, 650, 716, 736], "greater_equ": [8, 31, 51, 52, 219, 543], "imaginari": [8, 31, 51, 61, 64, 67, 97, 98, 175, 176, 177, 192, 194, 195, 197, 199, 207, 227, 229, 230, 237, 240, 241, 245, 277, 307, 311, 359, 537, 540, 543, 555, 656, 726], "4j": [8, 31, 207, 504, 543, 545], "6j": [8, 9, 31, 207, 211, 277, 543], "isfinit": [8, 31, 543, 735], "out_i": [8, 31, 208, 209, 210, 211, 234, 543], "self_i": [8, 31, 208, 209, 210, 211, 234], "finit": [8, 31, 174, 175, 176, 177, 180, 182, 183, 192, 194, 195, 197, 199, 201, 208, 209, 215, 217, 227, 228, 230, 232, 236, 240, 241, 245, 543], "isinf": [8, 31, 543], "detect_posit": [8, 31, 209, 543], "detect_neg": [8, 31, 209, 543], "detect": [8, 26, 31, 209, 543, 552, 627, 638, 714, 715, 720, 722, 723, 729, 737, 745, 746], "isnan": [8, 31, 543], "isreal": [8, 31, 543], "5j": [8, 31, 32, 211, 234, 277, 307, 543], "lcm": [8, 31, 543, 724], "common": [8, 9, 26, 31, 133, 204, 212, 278, 283, 307, 541, 543, 706, 709, 712, 714, 715, 721, 724, 725, 726, 731, 732, 735, 738, 740, 750, 754, 757, 764], "21": [8, 9, 10, 18, 28, 31, 32, 36, 37, 41, 45, 51, 93, 122, 177, 180, 182, 188, 189, 212, 227, 293, 310, 311, 313, 322, 328, 331, 341, 346, 349, 352, 353, 355, 385, 436, 489, 540, 541, 543, 548, 549, 552, 558, 579, 591, 607, 633, 648, 649, 666, 667, 668, 728, 733], "60": [8, 22, 31, 33, 41, 45, 178, 212, 465, 473, 489, 503, 525, 543, 545, 548, 552, 558, 591, 630, 648, 666, 668, 672, 723], "less": [8, 9, 14, 18, 22, 31, 32, 37, 41, 51, 52, 175, 176, 179, 182, 183, 190, 194, 201, 215, 216, 217, 218, 232, 236, 238, 241, 295, 307, 310, 311, 322, 331, 332, 341, 370, 373, 435, 438, 543, 548, 554, 558, 587, 588, 589, 592, 603, 650, 673, 675, 686, 707, 715, 716, 722, 724, 726, 728, 730, 735, 737, 740, 741, 742, 757, 759], "less_equ": [8, 31, 51, 52, 543, 728], "61": [8, 9, 14, 31, 32, 34, 38, 41, 180, 215, 217, 242, 331, 526, 543, 546, 547, 548, 549, 569, 583, 605, 607, 650], "log10": [8, 9, 31, 265, 304, 543], "logarithm": [8, 31, 197, 215, 216, 217, 218, 219, 281, 291, 307, 543, 548, 594], "602": [8, 216, 543], "699": [8, 216, 543], "log1p": [8, 31, 543, 733], "693": [8, 31, 66, 180, 217, 537, 543, 549, 607], "001": [8, 9, 17, 29, 32, 34, 119, 217, 234, 277, 288, 307, 527, 541, 543, 546, 553, 646, 745, 746], "0953": [8, 31, 215, 217, 543], "log2": [8, 31, 220, 543], "logaddexp": [8, 31, 543], "logaddexp2": [8, 31, 543, 712], "169925": [8, 31, 220, 543], "logical_and": [8, 31, 543, 735, 740, 764], "logical_not": [8, 31, 543, 724], "logical_or": [8, 31, 543, 764], "conform": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 277, 307, 322, 435, 540, 541, 543, 548, 550, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 609, 611, 612, 613, 615, 616, 618, 619, 623, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 727, 729], "api": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 132, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 277, 307, 322, 435, 540, 541, 543, 548, 550, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 609, 611, 612, 613, 615, 616, 618, 619, 623, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 705, 706, 712, 715, 716, 717, 719, 721, 724, 725, 726, 727, 728, 730, 732, 734, 735, 736, 737, 740, 741, 743, 745, 750, 751, 752, 753, 755, 757, 759, 762, 764], "extens": [8, 14, 31, 76, 77, 78, 85, 86, 87, 88, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 109, 119, 122, 134, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 277, 307, 322, 435, 540, 541, 543, 548, 550, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 609, 611, 612, 613, 615, 616, 618, 619, 623, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 704, 710, 713, 715, 716, 727, 729, 737, 754, 757, 764], "api_specif": [8, 31, 109, 197, 207, 208, 223, 541, 543, 550, 558, 623, 673, 727], "array_api": [8, 31, 109, 197, 207, 208, 223, 541, 543, 548, 550, 558, 594, 623, 673, 727], "html": [8, 31, 101, 109, 197, 207, 208, 223, 270, 304, 322, 435, 540, 541, 543, 548, 550, 558, 594, 623, 673, 707, 727], "logical_xor": [8, 31, 543], "maximum": [8, 9, 10, 11, 16, 19, 22, 26, 31, 32, 33, 34, 39, 42, 45, 52, 167, 284, 297, 307, 310, 311, 313, 322, 326, 336, 370, 373, 401, 436, 438, 452, 453, 461, 532, 542, 543, 545, 546, 548, 550, 552, 555, 558, 587, 608, 639, 653, 654, 669, 671, 716, 726, 734, 745, 764], "use_wher": [8, 31, 225, 226, 543], "formula": [8, 9, 31, 194, 216, 218, 225, 226, 227, 265, 290, 304, 307, 316, 415, 417, 543], "clip": [8, 9, 16, 31, 32, 33, 39, 225, 226, 313, 385, 406, 409, 452, 453, 543, 545, 550, 722, 731, 733, 734, 745, 747], "than": [8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 26, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 51, 52, 76, 89, 119, 167, 175, 176, 179, 180, 182, 183, 186, 188, 190, 194, 200, 201, 215, 216, 217, 218, 225, 227, 232, 236, 238, 240, 241, 245, 246, 247, 252, 258, 275, 276, 288, 295, 304, 307, 310, 311, 313, 322, 331, 332, 337, 338, 341, 342, 343, 353, 354, 355, 370, 373, 392, 393, 436, 437, 438, 476, 477, 480, 497, 519, 540, 541, 542, 543, 545, 547, 548, 550, 554, 555, 556, 558, 574, 576, 586, 587, 588, 589, 592, 603, 608, 612, 618, 650, 656, 659, 660, 661, 666, 667, 672, 673, 674, 675, 686, 707, 710, 712, 716, 718, 722, 723, 724, 726, 728, 734, 735, 736, 737, 738, 739, 740, 742, 745, 746, 747, 750, 751, 754, 755, 756, 757, 763, 764], "exce": [8, 9, 32, 226, 313, 410, 543], "product": [8, 9, 13, 14, 22, 31, 32, 36, 37, 45, 49, 227, 311, 322, 357, 362, 363, 364, 367, 368, 369, 436, 437, 443, 543, 547, 548, 558, 573, 574, 576, 583, 586, 591, 598, 602, 666, 667, 668, 672, 673, 714, 742, 757, 759], "30": [8, 9, 32, 33, 41, 45, 52, 227, 286, 294, 307, 310, 313, 331, 341, 352, 385, 426, 457, 459, 464, 465, 472, 473, 489, 498, 503, 543, 545, 548, 552, 558, 584, 591, 636, 648, 649, 667, 668, 672, 685, 723], "56": [8, 9, 13, 18, 31, 32, 36, 93, 227, 241, 244, 247, 310, 331, 341, 526, 540, 543, 546, 547, 548, 552, 558, 562, 564, 566, 571, 591, 627, 649, 668, 726], "nan_to_num": [8, 31, 543], "posinf": [8, 31, 228, 543], "neginf": [8, 31, 228, 543], "veri": [8, 31, 228, 275, 288, 307, 543, 548, 594, 706, 707, 713, 714, 715, 716, 721, 722, 724, 725, 726, 728, 730, 731, 734, 735, 736, 737, 738, 740, 743, 745, 746, 747, 750, 753, 754, 755, 757, 758, 759, 762, 763, 764], "5e": [8, 11, 31, 32, 228, 294, 532, 543, 546], "not_equ": [8, 31, 51, 52, 543], "pow": [8, 31, 51, 52, 543, 718], "expon": [8, 9, 10, 32, 33, 232, 283, 285, 289, 307, 504, 543, 545, 548, 588], "25": [8, 10, 14, 15, 18, 22, 25, 31, 32, 33, 36, 37, 40, 41, 45, 51, 52, 67, 92, 177, 178, 188, 194, 196, 207, 212, 227, 232, 235, 237, 240, 241, 242, 247, 261, 304, 312, 322, 352, 374, 376, 377, 436, 444, 472, 473, 489, 503, 540, 543, 545, 548, 549, 552, 553, 558, 561, 575, 579, 584, 601, 606, 628, 635, 639, 646, 648, 649, 650, 667, 668, 670, 675, 722, 733], "rad2deg": [8, 31, 543], "286": [8, 32, 233], "458": [8, 233], "573": [8, 233, 543], "hand": [8, 704, 718, 724, 725, 729, 731, 737, 750], "reciproc": [8, 31, 543], "333": [8, 31, 194, 235, 453, 543, 545], "remaind": [8, 9, 16, 26, 31, 32, 39, 203, 543, 550, 617, 718, 734], "modulu": [8, 31, 236, 543, 734], "sign": [8, 9, 14, 20, 22, 31, 32, 37, 49, 76, 174, 175, 176, 177, 180, 182, 183, 188, 192, 194, 197, 199, 201, 227, 229, 236, 240, 241, 245, 278, 307, 311, 313, 322, 371, 408, 436, 437, 540, 543, 548, 556, 558, 594, 658, 659, 660, 661, 666, 667, 672, 674, 707, 715, 742, 747], "x2_i": [8, 31, 177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 543, 718], "decim": [8, 31, 237, 543, 739], "94": [8, 9, 11, 18, 31, 32, 34, 41, 161, 237, 238, 297, 307, 341, 530, 542, 546, 650], "256": [8, 33, 237, 238, 504, 547, 562, 564, 566], "0001": [8, 9, 32, 237, 238, 311, 370, 373, 690], "67": [8, 10, 14, 31, 33, 36, 41, 51, 189, 192, 197, 237, 238, 240, 247, 322, 352, 436, 457, 458, 503, 529, 531, 543, 545, 546, 548, 583, 650], "678": [8, 237, 238], "33": [8, 18, 22, 31, 33, 34, 36, 180, 181, 188, 237, 310, 313, 322, 329, 351, 352, 385, 436, 453, 503, 530, 543, 545, 546, 547, 548, 552, 558, 570, 571, 591, 645, 648, 668, 675], "np_variant": [8, 31, 238, 543], "sin": [8, 10, 31, 192, 197, 199, 240, 461, 543, 545, 719, 742], "841": [8, 25, 31, 59, 239, 537, 543], "909": [8, 31, 33, 239, 543], "141": [8, 31, 106, 239, 541, 543], "sinh": [8, 31, 239, 543], "63": [8, 25, 31, 36, 37, 67, 233, 240, 241, 310, 322, 331, 341, 352, 436, 543, 548, 552, 558, 575, 591, 628, 639, 668], "232": [8, 31, 240, 543], "sqrt": [8, 9, 31, 32, 310, 332, 337, 338, 342, 343, 543, 685, 704], "squar": [8, 9, 14, 31, 32, 37, 241, 311, 312, 322, 358, 366, 374, 435, 528, 529, 531, 536, 543, 546, 548, 552, 575, 577, 578, 580, 581, 582, 584, 588, 594, 595, 596, 601, 633, 704], "root": [8, 31, 241, 543, 684, 711, 715, 716, 721, 735, 745], "73": [8, 37, 241, 322, 436, 548, 554, 575, 649, 737], "44": [8, 9, 18, 31, 32, 41, 180, 227, 237, 241, 242, 278, 307, 310, 330, 331, 543, 547, 548, 552, 555, 558, 570, 591, 635, 648, 649, 657, 668], "subtract": [8, 31, 51, 52, 89, 313, 401, 540, 543, 719, 722, 726], "tan": [8, 31, 448, 543, 545, 727, 730, 731, 734, 735, 742], "tanh": [8, 31, 244, 543, 682, 742], "762": [8, 31, 245, 543], "964": [8, 31, 245, 543], "trapz": [8, 31, 543], "dx": [8, 31, 246, 543], "apart": [8, 31, 246, 543], "singl": [8, 18, 26, 31, 41, 246, 288, 307, 311, 317, 368, 422, 511, 524, 528, 543, 545, 546, 547, 554, 556, 573, 648, 649, 650, 658, 686, 708, 714, 715, 716, 718, 723, 726, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 745, 746, 747, 750], "trapezoid": [8, 31, 246, 543], "trunc": [8, 31, 543], "025": [8, 247, 312, 377, 543, 551, 626], "trunc_divid": [8, 31, 543], "_arraywithactivationsexperiment": [9, 51], "elu": [9, 32, 302, 682], "scaler": [9, 32, 249, 302, 737], "ep": [9, 14, 17, 32, 37, 40, 119, 250, 302, 311, 316, 359, 415, 416, 417, 541, 548, 553, 589, 592, 646, 682, 689], "outpu": [9, 32, 250, 302], "clamp": [9, 32, 250, 302, 747], "elementwis": [9, 17, 32, 40, 250, 252, 299, 302, 548, 553, 601, 646, 731, 738, 742], "19722438": [9, 32, 250, 302], "38629448": [9, 32, 250, 302], "38629436": [9, 32, 250, 302], "logsigmoid": [9, 32, 302, 682], "31326175": [9, 25, 251, 302], "126928": [9, 32, 251], "01814993": [9, 251], "00004578": [9, 251], "57888985": [9, 251], "31326169": [9, 32, 251, 302], "69314718": [9, 14, 25, 32, 37, 251, 291, 302, 307, 548, 594], "01104775": [9, 251], "prelu": [9, 32, 302, 682], "f": [9, 16, 32, 39, 252, 265, 302, 304, 313, 391, 550, 552, 615, 630, 634, 635, 636, 639, 644, 645, 704, 708, 709, 716, 717, 722, 723, 742, 745, 753], "unidirect": [9, 252, 302], "smaller": [9, 16, 22, 32, 39, 252, 275, 288, 302, 307, 310, 322, 338, 343, 353, 435, 436, 437, 457, 545, 550, 558, 608, 616, 666, 667, 672, 674, 704, 716, 728, 742], "relu6": [9, 32, 302, 682], "rectifi": [9, 25, 32, 61, 63, 64, 253, 256, 257, 302, 537], "unit": [9, 25, 32, 49, 59, 61, 62, 63, 64, 65, 66, 67, 249, 253, 254, 256, 257, 302, 418, 419, 537, 704, 715, 718, 724, 735, 736, 737, 750, 758, 761], "selu": [9, 32, 302, 682], "scale": [9, 13, 17, 32, 34, 36, 40, 61, 165, 166, 254, 265, 286, 302, 304, 307, 310, 311, 316, 327, 333, 334, 335, 343, 353, 363, 415, 416, 417, 533, 537, 542, 546, 547, 553, 570, 573, 574, 646, 685, 686, 690, 757, 759], "11133075": [9, 254, 302], "05070102": [9, 32, 254, 302], "10140204": [9, 254, 302], "15210295": [9, 254, 302], "20280409": [9, 254, 302], "25350523": [9, 254, 302], "30420589": [9, 254, 302], "35490704": [9, 254, 302], "silu": [9, 32, 302, 682], "26894143": [9, 256], "73105854": [9, 32, 256], "thresholded_relu": [9, 32, 302], "custom": [9, 32, 257, 301, 302, 309, 698, 707, 711, 723, 728, 732, 736, 737, 740, 746, 757, 761, 762, 763], "_arraywithconversionsexperiment": [9, 51], "_arraywithcreationexperiment": [9, 51], "blackman_window": [9, 32, 304], "period": [9, 32, 240, 244, 258, 260, 261, 263, 264, 304, 310, 344, 543, 716], "window": [9, 13, 32, 36, 258, 260, 261, 263, 264, 274, 304, 310, 328, 329, 330, 332, 346, 347, 348, 349, 351, 352, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686, 710, 716, 762], "symmetr": [9, 14, 32, 37, 49, 258, 260, 261, 263, 264, 304, 311, 313, 358, 401, 548, 575, 580, 581, 582, 604, 722], "38777878e": [9, 32, 258, 304], "40000000e": [9, 258, 304], "00000000e": [9, 32, 33, 258, 304, 310, 331, 337, 341, 342, 712], "00": [9, 10, 32, 33, 37, 199, 258, 304, 310, 331, 337, 341, 342, 461, 504, 543, 545, 548, 549, 582, 605, 729, 737], "30000000e": [9, 32, 258, 304], "eye_lik": [9, 32, 304], "elsewher": [9, 32, 87, 259, 304, 540, 555, 657, 715], "static": [9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 55, 56, 84, 265, 330, 343, 348, 370, 373, 407, 416, 506, 540, 591, 683, 688, 735, 739, 750, 756, 757, 758], "mel_weight_matrix": [9, 32, 304], "num_mel_bin": [9, 32, 265, 304], "dft_length": [9, 32, 265, 304, 310, 332], "sample_r": [9, 32, 265, 304], "lower_edge_hertz": [9, 32, 265, 304], "upper_edge_hertz": [9, 32, 265, 304], "3000": [9, 32, 265, 304], "melweightmatrix": [9, 32, 265, 304], "re": [9, 10, 19, 32, 42, 167, 265, 304, 313, 402, 403, 457, 542, 545, 548, 550, 555, 598, 616, 655, 657, 705, 706, 707, 709, 714, 715, 716, 717, 718, 724, 733, 734, 735, 736, 738, 740, 744, 747, 750, 757], "weight": [9, 11, 13, 15, 32, 34, 36, 38, 49, 261, 265, 290, 304, 307, 310, 311, 322, 336, 362, 433, 435, 438, 526, 527, 530, 532, 533, 534, 546, 547, 549, 551, 571, 572, 573, 574, 605, 626, 685, 686, 688, 690, 704, 722, 731, 737, 742, 746, 747, 756], "linearli": [9, 10, 33, 265, 304, 461, 545, 548, 595], "frequenc": [9, 10, 32, 33, 265, 304, 322, 435, 461, 545, 716], "spectra": [9, 265, 304], "dft": [9, 32, 265, 304, 310], "stft": [9, 265, 304], "mel": [9, 32, 265, 304], "term": [9, 258, 265, 304, 312, 376, 547, 572, 686, 704, 706, 716, 722, 742, 752, 757], "hertz": [9, 265, 304], "2595": [9, 265, 304], "700": [9, 33, 265, 304, 465], "band": [9, 10, 32, 33, 265, 304, 461, 545], "spectrum": [9, 32, 265, 304], "n_fft": [9, 32, 265, 304, 310, 332], "per": [9, 13, 32, 36, 265, 304, 310, 311, 313, 328, 329, 330, 346, 347, 348, 349, 369, 408, 547, 561, 563, 564, 565, 566, 569, 573, 686, 716, 723, 732, 735, 745], "signal": [9, 32, 265, 304, 310, 324, 325, 326, 331, 332, 341, 686, 756, 757], "bound": [9, 32, 265, 304, 313, 385, 406, 409, 728, 735, 737, 742, 763], "top": [9, 16, 32, 265, 304, 313, 410, 457, 545, 609, 684, 704, 715, 716, 724, 735, 737, 740, 745, 746, 757, 761], "highest": [9, 18, 32, 41, 265, 304, 554, 648, 724], "frame": [9, 32, 265, 304, 707, 749, 757], "8000": [9, 32, 260, 265, 304], "75694758": [9, 265, 304], "trilu": [9, 32, 304], "retain": [9, 101, 270, 271, 304, 528, 540, 546, 733, 752], "unsorted_segment_min": [9, 32, 304], "segment_id": [9, 32, 272, 273, 304, 692], "num_seg": [9, 32, 272, 273, 304, 692], "given": [9, 10, 15, 16, 18, 26, 32, 33, 34, 38, 39, 41, 49, 51, 52, 76, 85, 92, 93, 112, 113, 114, 115, 116, 128, 133, 152, 161, 163, 165, 166, 167, 169, 173, 246, 272, 275, 279, 280, 286, 287, 288, 290, 293, 304, 307, 310, 311, 312, 313, 316, 317, 322, 328, 329, 330, 331, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 353, 359, 362, 375, 376, 377, 378, 379, 380, 388, 389, 390, 397, 399, 410, 414, 418, 419, 420, 421, 422, 423, 424, 425, 435, 436, 437, 438, 443, 465, 488, 489, 499, 526, 527, 530, 532, 533, 534, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 604, 605, 606, 607, 608, 611, 612, 613, 614, 616, 617, 621, 622, 634, 635, 644, 645, 648, 649, 650, 652, 664, 665, 666, 667, 682, 683, 685, 686, 688, 689, 690, 691, 692, 698, 707, 708, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 743, 744, 746, 749, 754, 759, 760, 763, 764], "segment": [9, 32, 272, 273, 304, 721, 726], "id": [9, 32, 150, 272, 273, 304, 542, 687, 688, 704, 710, 713, 715, 719, 721, 722, 729, 733, 737, 751], "drop": [9, 32, 272, 304, 312, 313, 376, 409, 685, 686, 715, 750], "gather": [9, 10, 32, 33, 272, 273, 304, 465, 467, 545, 764], "th": [9, 32, 272, 273, 280, 304, 307, 311, 322, 356, 361, 444], "identifi": [9, 32, 272, 273, 304, 718, 723, 737, 740], "total": [9, 22, 26, 32, 45, 52, 89, 169, 272, 273, 279, 304, 307, 540, 542, 555, 558, 656, 673, 675, 704, 708, 709, 716, 724, 725, 726, 737, 740, 745, 746, 750], "distinct": [9, 20, 32, 272, 273, 304, 556, 658, 659, 660, 661, 707, 715, 722, 727, 733, 734, 735, 741, 757], "unsorted_segment_sum": [9, 32, 304], "_arraywithdata_typeexperiment": [9, 51], "_arraywithdeviceexperiment": [9, 51], "_arraywithelementwiseexperiment": [9, 51], "allclos": [9, 32, 307], "rtol": [9, 14, 32, 37, 275, 288, 307, 548, 589, 592, 736], "atol": [9, 14, 32, 37, 275, 288, 307, 548, 589, 736], "08": [9, 22, 32, 41, 180, 275, 288, 307, 310, 331, 341, 543, 649, 650, 675, 729], "equal_nan": [9, 32, 275, 288, 307], "rel": [9, 11, 14, 16, 21, 28, 32, 34, 37, 39, 44, 51, 91, 275, 288, 307, 312, 322, 376, 435, 527, 530, 532, 533, 534, 546, 548, 550, 557, 579, 589, 592, 600, 612, 616, 662, 665, 716, 723, 736, 740, 757, 759], "toler": [9, 14, 32, 37, 275, 288, 307, 311, 359, 370, 373, 548, 589, 592, 718, 736, 757], "compar": [9, 10, 20, 21, 26, 32, 33, 44, 275, 288, 307, 446, 449, 545, 556, 557, 658, 659, 660, 661, 662, 665, 704, 720, 726, 728, 736, 737, 740, 745, 753, 755, 757, 763, 764], "altern": [9, 32, 49, 275, 281, 285, 287, 288, 289, 290, 292, 293, 294, 298, 299, 307, 704, 714, 715, 721, 734, 745, 760], "1e10": [9, 275, 288, 307], "00001e10": [9, 275, 288, 307], "00001e": [9, 275, 307], "005": [9, 32, 275, 288, 307, 374], "binar": [9, 32, 307], "outcom": [9, 32, 276, 286, 307], "comparison": [9, 32, 195, 230, 276, 307, 312, 376, 543, 548, 597, 728], "conj": [9, 32, 192, 197, 199, 240, 241, 245, 307, 543], "conjug": [9, 14, 32, 37, 277, 307, 310, 311, 317, 332, 354, 359, 367, 369, 423, 548, 586, 590, 598], "copysign": [9, 32, 307], "unsign": [9, 22, 32, 278, 307, 322, 436, 437, 558, 666, 667, 672, 674, 724, 742], "count_nonzero": [9, 32, 307], "keepdim": [9, 14, 16, 19, 22, 23, 26, 32, 37, 39, 42, 45, 46, 279, 293, 300, 307, 308, 322, 440, 441, 442, 443, 444, 548, 550, 555, 558, 559, 587, 603, 622, 653, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 728, 735, 742], "count": [9, 16, 20, 23, 28, 32, 39, 43, 46, 89, 160, 279, 307, 313, 322, 412, 433, 438, 540, 542, 548, 550, 556, 559, 576, 602, 609, 612, 658, 659, 676, 677, 721, 722, 726, 745], "flatten": [9, 10, 14, 16, 19, 20, 32, 33, 37, 39, 42, 43, 279, 293, 307, 311, 313, 322, 356, 400, 404, 409, 412, 433, 440, 441, 442, 443, 444, 457, 461, 545, 548, 550, 555, 556, 583, 591, 603, 609, 614, 616, 653, 654, 658, 659, 660, 661, 684, 704, 734, 740], "left": [9, 14, 19, 21, 32, 37, 42, 44, 70, 71, 186, 201, 279, 293, 300, 307, 308, 310, 311, 313, 322, 344, 358, 361, 365, 371, 372, 392, 402, 440, 441, 442, 443, 444, 457, 539, 543, 545, 548, 555, 557, 580, 581, 587, 596, 601, 653, 664, 715, 716, 718, 721, 723, 724, 726], "diff": [9, 26, 32, 307, 726, 734], "prepend": [9, 32, 280, 307, 548, 550, 586, 611, 715], "append": [9, 14, 26, 32, 186, 280, 307, 543, 548, 550, 579, 586, 611, 704, 723, 737, 742, 745], "differenc": [9, 32, 280, 307], "taken": [9, 14, 32, 37, 280, 307, 310, 353, 548, 579, 714, 723, 735, 738, 747, 758], "prior": [9, 32, 280, 307, 317, 423, 548, 598, 728, 738], "expand": [9, 10, 16, 32, 33, 280, 307, 313, 461, 545, 550, 611, 722], "direct": [9, 32, 280, 285, 289, 294, 298, 307, 310, 313, 343, 353, 392, 393, 407, 557, 665, 714, 719, 721, 735, 740, 746, 747, 749, 753, 757, 758, 761], "except": [9, 10, 16, 18, 23, 26, 32, 33, 37, 41, 46, 108, 280, 297, 307, 317, 322, 422, 441, 442, 456, 474, 491, 506, 512, 541, 545, 548, 550, 554, 555, 559, 592, 609, 611, 619, 648, 649, 650, 656, 676, 677, 688, 704, 716, 717, 718, 719, 723, 724, 725, 727, 730, 734, 735, 738, 739, 740, 744, 750], "discret": [9, 32, 280, 307, 310, 331, 332, 337, 338, 341, 342, 343, 353, 549, 606, 686], "digamma": [9, 32, 307], "7549271": [9, 281, 307], "92278427": [9, 32, 281, 307], "9988394": [9, 281, 307], "fix": [9, 32, 49, 307, 311, 373, 547, 573, 704, 715, 716, 718, 724, 729, 737, 738], "nearest": [9, 32, 177, 194, 227, 237, 282, 307, 310, 322, 345, 444, 543, 740], "toward": [9, 16, 32, 39, 201, 248, 282, 294, 307, 313, 322, 407, 438, 543, 550, 616, 704, 710, 712, 715, 742, 753, 757], "float_pow": [9, 32, 307], "125": [9, 14, 37, 188, 283, 307, 312, 374, 543, 548, 601], "fmax": [9, 32, 307], "fmod": [9, 32, 543], "divis": [9, 10, 11, 32, 33, 34, 188, 194, 201, 203, 236, 238, 248, 313, 387, 495, 503, 517, 526, 527, 532, 543, 545, 546, 547, 560, 567, 568, 690, 731, 739], "frexp": [9, 32, 307], "next": [9, 32, 119, 285, 289, 294, 298, 307, 541, 685, 687, 688, 690, 708, 710, 714, 715, 716, 720, 724, 726, 727, 729, 732, 743, 744, 745, 757, 759], "represent": [9, 10, 26, 32, 33, 52, 104, 105, 119, 122, 147, 148, 174, 177, 184, 187, 189, 194, 201, 224, 227, 229, 244, 262, 285, 289, 294, 298, 304, 307, 447, 508, 538, 541, 542, 543, 545, 686, 749, 755, 756, 758, 762, 763], "gradient": [9, 32, 49, 167, 301, 307, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 542, 551, 624, 625, 626, 690, 704, 717, 738, 745, 746, 749, 750, 757], "edge_ord": [9, 32, 286, 307], "r": [9, 14, 26, 32, 37, 49, 286, 301, 307, 309, 528, 546, 548, 550, 593, 622, 715, 716, 717, 733, 736], "estim": [9, 32, 286, 307, 322, 435], "boundari": [9, 18, 32, 41, 286, 307, 310, 345, 554, 650, 757], "note": [9, 10, 14, 16, 20, 32, 37, 39, 49, 89, 101, 133, 201, 236, 237, 244, 270, 271, 286, 304, 307, 310, 311, 313, 332, 358, 361, 369, 370, 373, 391, 541, 543, 547, 548, 550, 556, 558, 573, 580, 581, 594, 596, 615, 619, 659, 661, 670, 686, 710, 712, 714, 715, 716, 719, 724, 726, 727, 729, 734, 735, 736, 737, 738, 740], "over": [9, 14, 22, 23, 24, 29, 32, 36, 37, 45, 46, 47, 49, 72, 266, 267, 286, 293, 304, 307, 310, 311, 313, 320, 322, 324, 325, 326, 329, 338, 343, 347, 351, 352, 353, 369, 380, 391, 406, 409, 428, 438, 443, 492, 525, 539, 545, 548, 553, 554, 558, 559, 576, 587, 598, 600, 602, 603, 646, 650, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 689, 695, 698, 704, 706, 708, 715, 716, 720, 726, 727, 733, 734, 736, 738, 742, 744, 750, 755, 757], "partial": [9, 26, 32, 120, 121, 153, 154, 286, 307, 311, 313, 322, 370, 402, 403, 404, 405, 442, 462, 463, 531, 541, 542, 545, 546, 548, 585, 687, 688, 716, 721, 740], "diment": [9, 286, 307], "40": [9, 10, 31, 32, 33, 41, 45, 52, 188, 192, 212, 241, 286, 307, 310, 329, 331, 341, 347, 457, 459, 464, 465, 489, 503, 525, 528, 543, 545, 546, 548, 552, 558, 584, 591, 636, 649, 668, 672, 704, 723], "80": [9, 32, 286, 307, 311, 322, 368, 436, 548, 552, 558, 591, 638, 668, 707], "72": [9, 18, 32, 34, 199, 286, 307, 310, 331, 341, 530, 543, 546, 548, 558, 591, 649, 668], "33333333": [9, 32, 235, 286, 307, 543], "hypot": [9, 32, 307], "hypotenus": [9, 287, 307], "4031": [9, 287, 307], "8102": [9, 287, 307], "isclos": [9, 32, 307, 718], "hold": [9, 10, 14, 22, 32, 37, 45, 49, 275, 288, 293, 307, 322, 387, 413, 436, 437, 442, 488, 489, 545, 548, 558, 587, 667, 704, 745, 758], "ldexp": [9, 32, 307], "lerp": [9, 32, 307], "end": [9, 32, 76, 182, 238, 290, 307, 313, 391, 401, 403, 404, 406, 540, 543, 684, 704, 715, 716, 720, 723, 734, 738, 740, 741, 749, 750, 755, 760], "interpol": [9, 32, 290, 307, 310, 322, 444, 547, 573, 740, 757], "lgamma": [9, 307], "45373654": [9, 291, 307], "6477685": [9, 291, 307], "modf": [9, 32, 307], "fraction": [9, 32, 292, 307, 322, 444, 547, 570], "nansum": [9, 32, 307], "accumul": [9, 32, 293, 307], "nextaft": [9, 32, 307], "0e": [9, 11, 32, 34, 294, 307, 532, 546], "4013e": [9, 32, 294, 307], "4028e": [9, 32, 294, 307], "signbit": [9, 32, 307], "sinc": [9, 32, 307, 704, 707, 715, 716, 718, 719, 720, 722, 723, 724, 725, 728, 734, 735, 750, 757, 763], "637": [9, 32, 296, 307], "212": [9, 13, 32, 296, 307, 571], "0909": [9, 32, 296, 307], "sparsify_tensor": [9, 32, 307], "card": [9, 32, 297, 307, 762], "sparsifi": [9, 32, 297, 307], "arang": [9, 14, 22, 32, 37, 92, 297, 307, 310, 311, 328, 329, 330, 337, 342, 346, 347, 348, 349, 351, 355, 368, 393, 484, 525, 540, 545, 548, 551, 558, 587, 603, 626, 668, 704, 724, 734, 764], "reshap": [9, 13, 14, 16, 26, 32, 36, 37, 39, 297, 307, 310, 311, 313, 328, 329, 330, 333, 346, 347, 348, 349, 351, 355, 368, 391, 525, 545, 547, 548, 550, 563, 565, 569, 587, 603, 704, 734, 735, 737, 740, 742, 744, 747], "91": [9, 36, 41, 189, 297, 307, 352, 543, 547, 548, 554, 558, 571, 591, 649, 668], "92": [9, 10, 41, 297, 307, 524, 534, 546, 548, 577, 649, 650], "93": [9, 31, 33, 41, 152, 241, 297, 307, 457, 458, 542, 545, 649, 650], "95": [9, 11, 14, 18, 25, 34, 36, 41, 59, 297, 307, 352, 526, 530, 534, 537, 546, 548, 554, 583, 649, 650], "96": [9, 11, 31, 32, 33, 41, 191, 212, 244, 297, 307, 310, 331, 457, 458, 530, 543, 545, 546, 548, 558, 591, 650, 668], "97": [9, 11, 31, 34, 41, 180, 297, 307, 530, 543, 546, 649], "xlogi": [9, 32, 307], "0986": [9, 32, 298, 307], "3863": [9, 32, 298, 307], "0000": [9, 32, 260, 261, 264, 298, 304, 307, 311, 313, 366, 395], "zeta": [9, 32, 307], "q": [9, 13, 14, 32, 36, 37, 299, 307, 311, 322, 358, 444, 547, 548, 552, 574, 580, 581, 593, 635, 715, 716, 717, 736, 750], "0369": [9, 32, 299, 307], "2021": [9, 32, 299, 307, 704], "_arraywithgeneralexperiment": [9, 51], "init_valu": [9, 32, 36, 300, 308, 310, 352], "act": [9, 32, 300, 308, 716, 726, 739, 750, 764], "reduct": [9, 10, 15, 23, 26, 32, 33, 36, 38, 46, 300, 308, 310, 312, 352, 374, 375, 376, 377, 378, 458, 488, 489, 545, 549, 559, 605, 606, 607, 676, 677, 687, 724, 731, 734, 737, 744], "_arraywithgradientsexperiment": [9, 51], "_arraywithimageexperiment": [9, 51], "_arraywithlayersexperiment": [9, 51], "adaptive_avg_pool1d": [9, 32, 310], "1d": [9, 32, 49, 310, 311, 313, 322, 324, 331, 333, 335, 341, 367, 381, 385, 406, 409, 435, 686], "adapt": [9, 32, 34, 310, 324, 325, 326, 533, 546, 686, 690, 707], "averag": [9, 11, 15, 32, 34, 38, 310, 312, 322, 324, 325, 328, 329, 330, 375, 376, 377, 378, 435, 526, 527, 532, 546, 547, 549, 551, 573, 605, 624, 625, 685, 686], "pool": [9, 32, 36, 310, 324, 325, 326, 328, 329, 330, 346, 347, 348, 349, 352, 686, 715], "sever": [9, 32, 49, 310, 311, 324, 325, 326, 369, 715, 716, 738, 750, 755, 761], "plane": [9, 32, 194, 197, 199, 227, 239, 240, 241, 244, 310, 313, 324, 325, 326, 407, 543], "l_in": [9, 32, 310, 324], "batch": [9, 10, 14, 26, 32, 33, 37, 165, 166, 310, 316, 324, 325, 326, 332, 345, 415, 416, 417, 461, 464, 465, 525, 542, 545, 547, 548, 551, 553, 571, 573, 585, 603, 624, 625, 626, 646, 686, 689, 704, 722, 731, 736, 745, 755], "spatial": [9, 13, 32, 36, 310, 316, 324, 325, 326, 345, 352, 415, 416, 417, 547, 560, 561, 562, 563, 565, 567, 569, 689, 749], "Will": [9, 32, 310, 324, 325, 326, 684, 695, 750], "l_out": [9, 32, 310, 324], "adaptive_avg_pool2d": [9, 32, 310], "2d": [9, 32, 49, 259, 304, 310, 311, 313, 322, 325, 326, 333, 334, 367, 372, 382, 390, 435, 686, 704, 735, 740], "h_in": [9, 32, 310, 325, 326], "w_in": [9, 32, 310, 325, 326], "s_0": [9, 32, 310, 325, 326], "s_1": [9, 32, 310, 325, 326], "adaptive_max_pool2d": [9, 32, 310], "avg_pool1d": [9, 32, 310], "kernel": [9, 13, 32, 36, 310, 328, 329, 330, 346, 347, 348, 349, 547, 572, 742, 750, 757, 760, 761], "stride": [9, 13, 32, 33, 36, 51, 310, 313, 328, 329, 330, 346, 347, 348, 349, 351, 352, 379, 545, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686, 734, 738, 757], "pad": [9, 13, 16, 32, 36, 39, 310, 313, 328, 329, 330, 331, 332, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 461, 545, 547, 550, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 610, 623, 686, 704], "data_format": [9, 13, 32, 36, 310, 316, 328, 329, 330, 333, 334, 335, 346, 347, 348, 349, 351, 415, 416, 417, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686, 689, 704], "nwc": [9, 13, 32, 36, 310, 328, 333, 346, 349, 547, 560, 561, 562, 567, 568, 686], "count_include_pad": [9, 32, 310, 328, 329, 330, 686], "ceil_mod": [9, 32, 310, 328, 329, 330, 346, 347, 348, 351, 686], "batch_siz": [9, 13, 18, 32, 36, 41, 310, 312, 328, 329, 330, 346, 347, 348, 349, 378, 547, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 647, 704, 745], "d_in": [9, 13, 32, 36, 310, 328, 329, 330, 332, 337, 338, 342, 346, 347, 348, 349, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569], "slide": [9, 13, 32, 36, 310, 328, 329, 330, 346, 347, 348, 349, 352, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686], "algorithm": [9, 13, 25, 32, 36, 59, 310, 311, 328, 329, 330, 345, 346, 347, 348, 349, 370, 371, 373, 548, 561, 563, 564, 565, 566, 569, 594, 682, 686, 724, 735, 740, 750, 757, 759, 761], "ncw": [9, 13, 32, 36, 310, 328, 333, 334, 346, 349, 547, 560, 561, 562, 567, 568, 686], "avg_pool2d": [9, 32, 310], "nhwc": [9, 13, 32, 36, 310, 329, 334, 347, 351, 547, 560, 563, 564, 567, 568, 569, 686], "divisor_overrid": [9, 32, 310, 329, 330, 686], "nchw": [9, 13, 32, 36, 310, 329, 334, 347, 351, 547, 560, 563, 564, 567, 568, 569, 686, 704], "kernel_s": [9, 32, 310, 328, 329, 330, 686, 692], "max_pool2d": [9, 32, 310, 329], "46": [9, 18, 32, 36, 41, 93, 217, 238, 260, 304, 310, 329, 347, 348, 540, 543, 552, 628, 648, 649], "avg_pool3d": [9, 32, 310], "ndhwc": [9, 13, 32, 36, 310, 330, 335, 348, 547, 560, 565, 566, 567, 568, 686], "d": [9, 10, 13, 14, 16, 28, 32, 33, 36, 37, 39, 65, 93, 101, 134, 177, 194, 195, 227, 230, 270, 304, 310, 311, 313, 317, 320, 328, 329, 330, 337, 342, 346, 347, 348, 349, 351, 356, 368, 383, 387, 389, 392, 396, 409, 413, 421, 427, 449, 537, 540, 541, 543, 547, 548, 550, 552, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 578, 579, 583, 587, 591, 601, 617, 630, 634, 635, 636, 639, 644, 645, 704, 707, 708, 709, 715, 717, 720, 721, 722, 733, 737, 740, 745, 753], "volum": [9, 13, 32, 36, 310, 330, 332, 337, 338, 342, 348, 547, 565, 566, 710], "filter": [9, 13, 32, 36, 263, 264, 304, 310, 330, 348, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686, 704, 720, 723], "ncdhw": [9, 13, 32, 36, 310, 330, 335, 348, 547, 560, 565, 566, 567, 568, 686], "43": [9, 32, 41, 52, 188, 310, 311, 322, 330, 357, 436, 543, 554, 555, 649, 650, 657], "dct": [9, 32, 310, 686, 745], "norm": [9, 10, 14, 32, 33, 37, 48, 49, 310, 311, 331, 332, 336, 337, 338, 341, 342, 343, 353, 355, 359, 418, 419, 420, 452, 453, 474, 545, 548, 587, 603, 646, 686, 690, 738], "lenght": [9, 32, 260, 263, 264, 274, 310, 331, 686], "truncat": [9, 32, 310, 311, 331, 337, 341, 342, 343, 353, 372, 491, 545, 684, 686, 728, 745], "larger": [9, 16, 22, 32, 39, 45, 119, 310, 331, 338, 341, 343, 353, 541, 550, 558, 608, 616, 673, 675, 686, 737, 740, 764], "ortho": [9, 32, 310, 331, 332, 337, 338, 341, 342, 343, 353, 686], "102": [9, 32, 41, 331, 648], "406": [9, 32, 331, 452, 545], "onesid": [9, 32, 310, 332], "backward": [9, 23, 32, 46, 236, 310, 332, 337, 338, 342, 343, 353, 543, 548, 559, 576, 602, 676, 677, 686, 738, 750], "fourier": [9, 32, 310, 332, 337, 338, 342, 343, 353, 461, 545], "fft": [9, 32, 310, 332, 338, 353, 686, 714, 757], "becaus": [9, 310, 332, 715, 716, 718, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 746, 747, 750, 757, 760, 763], "satisfi": [9, 310, 311, 332, 359, 726], "symmetri": [9, 310, 332], "fast": [9, 310, 332, 757], "rfft": [9, 32, 310, 332, 353], "batch_idx": [9, 310, 332], "signal_dim1": [9, 310, 332], "signal_dim2": [9, 310, 332], "signal_dimn": [9, 310, 332], "signal_dim": [9, 310, 332], "embed": [9, 32, 310, 547, 573, 686, 757], "max_norm": [9, 10, 32, 33, 310, 336, 452, 453, 545, 686], "dim": [9, 26, 28, 32, 96, 259, 304, 310, 313, 327, 337, 338, 339, 342, 350, 391, 540, 547, 560, 567, 568, 686, 704, 724, 735, 736, 740], "ifft": [9, 32, 310, 337, 343], "pi": [9, 32, 240, 244, 310, 337, 342, 538, 543], "44509285e": [9, 32, 310, 337], "14423775e": [9, 32, 310, 337], "17j": [9, 32, 310, 337, 342], "11483250e": [9, 32, 310, 337], "16j": [9, 32, 310, 337, 342], "33486982e": [9, 32, 310, 337], "22464680e": [9, 32, 310, 337], "95799250e": [9, 32, 310, 337], "66951701e": [9, 32, 310, 337], "fft2": [9, 310], "crop": [9, 32, 310, 338, 343, 353], "repeat": [9, 10, 16, 32, 33, 39, 310, 322, 338, 343, 435, 459, 545, 550, 551, 621, 626, 698, 710, 716, 719, 720, 726, 727, 734, 737], "vari": [9, 20, 49, 245, 338, 457, 543, 545, 556, 659, 660, 661, 722, 726, 735, 737, 744], "20477401j": [9, 310, 338], "0614962j": [9, 310, 338], "idct": [9, 32, 310], "79": [9, 10, 32, 33, 36, 41, 51, 189, 194, 310, 331, 341, 352, 452, 453, 543, 545, 650], "49862671": [9, 32, 310, 331, 341], "70": [9, 32, 33, 310, 331, 341, 465, 489, 548, 558, 591, 668, 707], "37691498": [9, 32, 310, 331, 341], "00390816": [9, 32, 310, 331, 341], "58938599": [9, 32, 310, 331, 341], "92713165": [9, 32, 310, 331, 341], "078475": [9, 32, 310, 331, 341], "19664812": [9, 32, 310, 331, 341], "95411837": [9, 32, 310, 331, 341], "30636606e": [9, 32, 310, 342], "43029718e": [9, 32, 310, 342], "18j": [9, 32, 310, 337, 342], "53080850e": [9, 32, 310, 342], "58689626e": [9, 32, 310, 342], "24474906e": [9, 32, 310, 342], "91858728e": [9, 32, 310, 342], "01435406e": [9, 32, 310, 342], "ifftn": [9, 32, 310], "combin": [9, 26, 32, 52, 310, 322, 343, 353, 435, 462, 463, 545, 548, 576, 586, 716, 719, 722, 723, 724, 726, 728, 731, 737, 747, 757], "explain": [9, 32, 310, 343, 353, 704, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 737, 738, 740, 742, 743, 744, 745, 746, 747, 753, 760, 763], "24730653": [9, 32, 310, 343], "90832391j": [9, 32, 310, 343], "49495562": [9, 32, 310, 343], "9039565j": [9, 32, 310, 343], "98193269": [9, 32, 310, 343], "49560517j": [9, 32, 310, 343], "93280757": [9, 32, 310, 343], "48075343j": [9, 32, 310, 343], "28526384": [9, 32, 310, 343], "3351205j": [9, 32, 310, 343], "2343787": [9, 32, 310, 343], "83528011j": [9, 32, 310, 343], "18791352": [9, 32, 310, 343], "30690572j": [9, 32, 310, 343], "82115787": [9, 32, 310, 343], "96195183j": [9, 32, 310, 343], "44719226": [9, 32, 310, 343], "72654048j": [9, 32, 310, 343], "51476765": [9, 310, 343], "66160417j": [9, 310, 343], "04319742": [9, 310, 343], "05411636j": [9, 310, 343], "015561": [9, 310, 343], "04216015j": [9, 310, 343], "06310689": [9, 310, 343], "05347854j": [9, 310, 343], "13392983": [9, 310, 343], "16052352j": [9, 310, 343], "08371392": [9, 310, 343], "17252843j": [9, 310, 343], "0031429": [9, 310, 343], "05421245j": [9, 310, 343], "10446617": [9, 310, 343], "17747098j": [9, 310, 343], "05344324": [9, 310, 343], "07972424j": [9, 310, 343], "8344667": [9, 32, 310, 343], "98222595j": [9, 32, 310, 343], "48472244": [9, 32, 310, 343], "30233797j": [9, 32, 310, 343], "mode": [9, 14, 26, 32, 37, 48, 49, 50, 164, 167, 172, 177, 194, 227, 269, 304, 310, 311, 313, 340, 345, 353, 361, 367, 369, 370, 373, 385, 394, 399, 401, 402, 404, 406, 409, 411, 490, 491, 492, 496, 497, 499, 500, 513, 514, 518, 519, 521, 522, 542, 543, 545, 548, 593, 686, 687, 688, 701, 710, 715, 716, 717, 722, 725, 726, 740, 750, 757, 760], "scale_factor": [9, 32, 310, 345, 740], "recompute_scale_factor": [9, 32, 310, 345, 740], "align_corn": [9, 32, 310, 345, 740], "antialia": [9, 32, 310, 345, 740], "down": [9, 32, 310, 313, 345, 393, 684, 715, 737, 752, 757, 763], "channel": [9, 10, 13, 32, 33, 36, 51, 52, 310, 316, 333, 334, 335, 345, 415, 416, 417, 457, 461, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 682, 683, 685, 686, 688, 689, 690, 691, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740], "height": [9, 10, 13, 32, 33, 36, 310, 345, 457, 545, 547, 563, 564, 565, 566, 569, 684, 745], "width": [9, 10, 13, 32, 33, 36, 310, 311, 313, 322, 345, 359, 401, 438, 457, 545, 547, 561, 562, 563, 564, 565, 566, 569, 573], "bilinear": [9, 32, 310, 345, 740], "trilinear": [9, 32, 310, 345, 740], "nearest_exact": [9, 32, 310, 345, 740], "tf_area": [9, 32, 310, 345, 740], "bicub": [9, 32, 310, 345, 740], "mitchellcub": [9, 32, 310, 345, 740], "lanczos3": [9, 32, 310, 345, 740], "lanczos5": [9, 32, 310, 345, 740], "gaussian": [9, 32, 59, 310, 345, 537, 740], "overwrit": [9, 26, 32, 167, 310, 345, 542, 716, 734, 735, 742], "corner": [9, 32, 310, 345, 715, 716, 735], "pixel": [9, 32, 310, 345], "align": [9, 26, 32, 310, 311, 345, 356, 715, 723, 735, 742, 744, 752, 763], "thu": [9, 32, 188, 201, 232, 236, 244, 245, 310, 311, 345, 358, 543, 548, 580, 581, 710, 714, 723, 728, 732, 735, 738], "antialias": [9, 32, 310, 345], "downsampl": [9, 32, 310, 345], "resiz": [9, 32, 310, 345, 740], "max_pool1d": [9, 32, 310, 349], "dilat": [9, 13, 32, 36, 310, 313, 346, 347, 348, 351, 352, 401, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 686], "dilaton": [9, 32, 310, 346, 347, 348], "ensur": [9, 10, 32, 33, 310, 311, 346, 347, 348, 371, 474, 545, 704, 714, 715, 716, 719, 724, 725, 726, 728, 729, 730, 732, 734, 735, 736, 737, 738, 751, 757], "cover": [9, 32, 310, 346, 347, 348, 704, 714, 718, 719, 721, 726, 727, 731, 732, 737, 740, 741], "max_pool3d": [9, 32, 310], "reduce_window": [9, 36, 310], "window_dimens": [9, 36, 310, 352], "window_strid": [9, 36, 310, 352], "base_dil": [9, 36, 310, 352], "window_dil": [9, 36, 310, 352], "string": [9, 10, 13, 26, 32, 36, 104, 105, 117, 124, 146, 147, 148, 149, 150, 152, 161, 168, 169, 173, 255, 302, 310, 311, 313, 352, 359, 401, 437, 455, 541, 542, 545, 547, 548, 560, 561, 562, 563, 565, 567, 569, 582, 684, 698, 720, 721, 723, 724, 725, 728, 735, 742, 745], "low": [9, 13, 18, 36, 41, 310, 352, 547, 554, 560, 561, 562, 563, 565, 567, 569, 648, 650, 722, 728, 734, 735, 740, 742, 753, 755, 757, 758, 759, 761, 763], "high": [9, 13, 18, 36, 41, 310, 352, 497, 545, 547, 554, 560, 561, 562, 563, 565, 567, 569, 648, 650, 708, 714, 728, 733, 735, 745, 752, 753, 754, 755, 756, 757, 761, 763, 764], "pair": [9, 13, 36, 182, 201, 266, 299, 304, 307, 310, 343, 352, 353, 543, 547, 548, 560, 561, 562, 563, 565, 567, 569, 574, 576], "give": [9, 13, 36, 133, 310, 352, 541, 547, 550, 560, 561, 562, 563, 565, 567, 569, 615, 684, 685, 704, 708, 710, 715, 716, 717, 720, 723, 724, 726, 727, 729, 730, 737, 757, 761], "rfftn": [9, 32, 310], "linear_algebra": [9, 14, 32, 37, 548, 738], "_arraywithlinearalgebraexperiment": [9, 51], "adjoint": [9, 14, 32, 37, 311, 548, 584, 595, 596], "cond": [9, 32, 73, 311, 539, 750], "p": [9, 10, 14, 32, 33, 37, 94, 198, 311, 316, 355, 420, 452, 453, 540, 543, 545, 548, 552, 587, 603, 635, 686, 704, 715, 716, 717], "933034373659268": [9, 355], "diagflat": [9, 32, 311, 363, 366], "offset": [9, 14, 17, 28, 32, 37, 40, 89, 311, 316, 356, 415, 416, 417, 540, 548, 553, 579, 600, 646], "padding_valu": [9, 32, 311, 356], "right_left": [9, 32, 311, 356], "num_row": [9, 32, 311, 356], "num_col": [9, 32, 311, 356], "dot": [9, 13, 32, 36, 49, 311, 368, 547, 548, 573, 574, 602, 704, 715, 723], "eig": [9, 14, 32, 311, 548, 581, 582], "37228132": [9, 32, 311, 358, 360, 580], "82456484": [9, 358, 580], "41597356": [9, 358, 580], "56576746": [9, 358, 580], "90937671": [9, 358, 580], "eigh_tridiagon": [9, 32, 311], "eigvals_onli": [9, 32, 311, 359], "select": [9, 22, 32, 45, 311, 313, 322, 359, 368, 409, 436, 437, 558, 666, 667, 714, 715, 716, 723, 734, 737, 742, 744, 747, 750, 757, 760, 761], "select_rang": [9, 32, 311, 359], "tol": [9, 32, 50, 311, 359, 370, 373], "eigenvalu": [9, 14, 32, 37, 49, 311, 358, 359, 360, 548, 580, 581, 582, 589], "eigenvector": [9, 32, 311, 358, 359, 548, 580, 581], "v": [9, 13, 21, 28, 32, 36, 44, 93, 192, 197, 199, 240, 311, 313, 359, 365, 371, 390, 543, 547, 551, 557, 574, 626, 664, 684, 686, 687, 688, 689, 690, 691, 704, 710, 711, 715, 716, 717, 721, 742, 745, 746, 747], "interv": [9, 18, 23, 32, 41, 46, 76, 92, 93, 99, 311, 322, 359, 438, 540, 548, 550, 554, 559, 576, 602, 608, 611, 619, 648, 650, 676, 677], "togeth": [9, 26, 32, 275, 288, 307, 311, 359, 691, 704, 707, 719, 722, 724, 734, 735, 737, 738, 740, 746, 747, 750, 755, 757, 758, 763], "cluster": [9, 32, 311, 359, 750, 757], "converg": [9, 32, 311, 359, 708], "li": [9, 32, 311, 322, 359, 444, 706], "_2": [9, 32, 311, 359], "machin": [9, 14, 32, 37, 119, 122, 311, 359, 541, 548, 589, 592, 707, 715, 718, 731, 749, 752, 755, 757, 759, 760, 761, 762, 763], "precis": [9, 14, 32, 37, 119, 207, 227, 234, 241, 283, 307, 311, 322, 359, 435, 497, 519, 541, 543, 545, 548, 581, 582, 587, 594, 596, 597, 603, 723, 724, 735, 739, 740, 761], "eig_val": [9, 32, 311, 359], "decreas": [9, 32, 311, 359], "eig_vector": [9, 32, 311, 359], "38196": [9, 359], "61803": [9, 359], "eigval": [9, 32, 311], "initialize_tuck": [9, 32, 311], "svd": [9, 14, 32, 37, 311, 361, 365, 370, 371, 372, 373, 548, 597], "seed": [9, 13, 18, 20, 26, 32, 36, 41, 268, 269, 304, 311, 317, 361, 370, 373, 421, 422, 423, 424, 425, 547, 554, 556, 570, 647, 648, 649, 650, 652, 658, 683, 685, 732, 736, 737], "truncated_svd": [9, 32, 311, 361, 370, 373], "non_neg": [9, 32, 269, 304, 311, 361], "mask": [9, 13, 32, 36, 49, 311, 313, 361, 362, 370, 373, 408, 467, 545, 547, 570, 573, 574, 740], "svd_mask_repeat": [9, 32, 311, 361, 370, 373], "compon": [9, 32, 97, 98, 175, 176, 177, 180, 183, 192, 194, 195, 197, 199, 227, 229, 230, 237, 240, 241, 244, 245, 268, 269, 277, 304, 307, 311, 361, 370, 540, 543, 555, 656, 704, 707, 742, 753, 758, 760], "distribut": [9, 15, 18, 32, 38, 41, 310, 311, 312, 317, 333, 334, 335, 361, 370, 373, 376, 378, 421, 422, 423, 424, 425, 549, 554, 605, 606, 607, 647, 648, 649, 650, 652, 685, 686, 687, 688, 714, 715, 723, 725, 750, 757, 760], "tuckertensor": [9, 32, 50, 269, 304, 311, 361, 370, 373], "scheme": [9, 32, 311, 361, 370, 718, 746, 757], "tucker": [9, 32, 269, 304, 311, 361, 370], "decomposit": [9, 14, 32, 37, 49, 268, 269, 304, 311, 361, 370, 373, 548, 575, 581, 585, 593, 596, 714, 764], "factor": [9, 11, 13, 14, 32, 34, 36, 37, 48, 49, 165, 166, 167, 310, 311, 343, 353, 361, 362, 370, 373, 526, 527, 532, 533, 542, 546, 547, 548, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 685, 686, 690, 707, 728], "miss": [9, 32, 311, 313, 361, 370, 373, 408, 690, 714, 715, 719, 722, 723, 726, 735, 737, 740], "everywher": [9, 32, 311, 361, 370, 373], "els": [9, 10, 18, 31, 32, 41, 112, 113, 114, 115, 116, 128, 234, 238, 311, 317, 361, 370, 372, 373, 422, 456, 460, 541, 543, 545, 552, 554, 637, 640, 648, 649, 650, 698, 704, 714, 715, 716, 718, 720, 724, 725, 728, 731, 734, 735, 736, 737, 738, 740, 742, 744, 746, 747, 750, 758], "imput": [9, 32, 311, 361, 370, 373], "core": [9, 32, 49, 158, 311, 361, 370, 373, 542, 706, 715, 725, 737, 747, 755, 756, 757, 758, 762, 764], "kron": [9, 32, 311, 366, 764], "make_svd_non_neg": [9, 32, 311, 372], "u": [9, 14, 28, 32, 37, 49, 93, 311, 365, 371, 372, 548, 552, 575, 582, 596, 635, 704, 707, 709, 715, 716, 717, 722, 723, 729, 732, 734, 735, 736, 737, 738, 740, 746, 750], "nntype": [9, 32, 311, 365], "nndsvd": [9, 32, 311, 365], "being": [9, 26, 32, 47, 51, 55, 76, 311, 313, 365, 401, 498, 540, 545, 548, 582, 684, 685, 704, 707, 708, 715, 716, 718, 719, 720, 722, 724, 725, 726, 730, 732, 734, 735, 736, 737, 738, 740, 742, 745, 749, 750, 753, 755, 756, 757, 758, 763, 764], "decompos": [9, 32, 49, 268, 269, 285, 292, 304, 307, 311, 365, 370, 373, 735], "singular": [9, 14, 32, 37, 311, 361, 365, 371, 372, 548, 587, 589, 592, 596, 597, 724], "nndsvda": [9, 32, 311, 365], "boutsidi": [9, 32, 311, 365], "gallopoulo": [9, 32, 311, 365], "pattern": [9, 10, 32, 33, 311, 365, 457, 458, 459, 545, 708, 724, 727], "recognit": [9, 32, 311, 365], "1350": [9, 32, 311, 365], "1362": [9, 32, 311, 365], "2008": [9, 32, 311, 365, 757], "matrix_exp": [9, 32, 311], "7183": [9, 32, 311, 366], "3891": [9, 32, 311, 366], "mode_dot": [9, 32, 48, 49, 50, 311], "matrix_or_vector": [9, 32, 49, 50, 311, 367], "i_1": [9, 32, 49, 311, 367], "i_k": [9, 32, 49, 311, 367], "i_n": [9, 32, 49, 311, 367], "i_": [9, 32, 49, 311, 322, 367, 438], "multi_dot": [9, 32, 311], "49": [9, 18, 32, 36, 37, 241, 310, 311, 322, 331, 341, 352, 368, 436, 543, 558, 601, 649, 668], "148": [9, 31, 32, 197, 311, 368], "multi_mode_dot": [9, 32, 311], "mat_or_vec_list": [9, 32, 311, 369], "skip": [9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 311, 313, 333, 334, 335, 362, 364, 369, 374, 375, 377, 378, 381, 382, 383, 386, 402, 405, 407, 409, 410, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 552, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 698, 721, 731, 737], "ndim": [9, 14, 19, 32, 37, 42, 51, 55, 311, 313, 369, 370, 373, 381, 382, 383, 394, 402, 404, 411, 525, 545, 548, 555, 593, 596, 656, 722, 731, 737], "text": [9, 10, 311, 369, 714, 716, 721, 726, 727], "times_0": [9, 311, 369], "vec": [9, 311, 369], "times_1": [9, 311, 369], "cdot": [9, 227, 311, 369, 543], "times_n": [9, 311, 369], "noqa": [9, 49, 174, 241, 310, 311, 346, 369, 543, 549, 605, 686, 695, 736], "partial_tuck": [9, 32, 311], "n_iter_max": [9, 32, 311, 370, 373], "verbos": [9, 32, 311, 370, 373, 737, 742], "return_error": [9, 32, 311, 370, 373], "variat": [9, 32, 311, 370, 373, 726, 735, 737], "reconstruct": [9, 14, 20, 32, 43, 311, 313, 370, 373, 412, 548, 556, 596, 658, 660, 736], "return_erro": [9, 311, 370, 373], "svd_flip": [9, 32, 311], "u_based_decis": [9, 32, 311, 371], "column": [9, 14, 32, 37, 49, 87, 101, 270, 304, 311, 313, 320, 322, 358, 362, 371, 390, 392, 393, 397, 399, 428, 434, 435, 540, 548, 580, 581, 587, 593, 595, 596, 601, 685], "basi": [9, 32, 311, 371, 716, 718, 745], "flip": [9, 16, 32, 39, 49, 185, 311, 313, 371, 392, 393, 543, 550, 734, 744, 745, 747], "row": [9, 32, 87, 101, 270, 304, 311, 313, 320, 322, 362, 371, 393, 399, 414, 428, 434, 435, 540, 548, 554, 555, 587, 595, 596, 601, 647, 656, 685], "decis": [9, 32, 311, 371, 718, 724, 740, 742, 744, 757], "u_adjust": [9, 32, 311, 371], "v_adjust": [9, 32, 311, 371], "compute_uv": [9, 14, 32, 37, 311, 372, 548, 596], "n_eigenvec": [9, 32, 311, 372], "returnedv": [9, 372], "vh": [9, 14, 32, 37, 311, 372, 548, 596], "significantli": [9, 14, 32, 37, 311, 372, 548, 596, 706, 723, 755], "faster": [9, 14, 32, 37, 311, 372, 548, 596, 713, 752, 759, 762], "eigen": [9, 32, 311, 372], "full": [9, 14, 32, 36, 37, 49, 119, 206, 214, 268, 269, 304, 311, 312, 313, 372, 376, 402, 405, 491, 500, 514, 522, 540, 541, 543, 545, 547, 548, 562, 564, 565, 566, 589, 593, 595, 596, 704, 707, 708, 715, 716, 721, 724, 727, 728, 730, 731, 735, 737, 740, 742, 750, 755, 757, 763], "namedtupl": [9, 14, 20, 32, 37, 43, 311, 313, 358, 372, 412, 548, 556, 580, 581, 593, 594, 596, 658, 659, 660], "fixed_factor": [9, 32, 311, 373], "tl": [9, 32, 311, 373], "g": [9, 18, 20, 22, 24, 32, 41, 47, 49, 105, 134, 147, 194, 207, 227, 234, 237, 310, 311, 317, 322, 346, 348, 373, 421, 422, 423, 424, 425, 436, 437, 541, 542, 543, 548, 552, 554, 556, 558, 581, 582, 587, 594, 596, 597, 603, 630, 634, 636, 639, 644, 648, 649, 650, 658, 659, 660, 661, 666, 667, 669, 671, 672, 674, 685, 708, 709, 714, 715, 717, 718, 720, 721, 722, 733, 735, 737, 742, 750, 752, 753], "kolda": [9, 32, 311, 373], "bader": [9, 32, 311, 373], "applic": [9, 13, 32, 36, 311, 373, 547, 548, 552, 558, 573, 574, 600, 633, 634, 635, 639, 640, 672, 674, 704, 715, 723, 724, 725, 732, 746, 754, 755, 757, 759, 761, 763], "siam": [9, 32, 311, 373], "review": [9, 32, 311, 373, 714, 716, 723, 726, 735, 738], "vol": [9, 32, 311, 373], "pp": [9, 32, 311, 373], "455": [9, 32, 311, 373], "500": [9, 32, 33, 36, 310, 311, 333, 334, 373, 465, 545], "2009": [9, 32, 311, 373], "loss": [9, 32, 49, 374, 375, 376, 377, 378, 497, 519, 545, 605, 606, 607, 704, 723, 724, 731, 735, 738, 739, 745, 746, 747, 757, 764], "_arraywithlossesexperiment": [9, 51], "huber_loss": [9, 32, 312], "pred": [9, 15, 32, 38, 312, 374, 376, 549, 605, 606, 607, 704, 722, 731, 734], "delta": [9, 11, 32, 34, 312, 374, 526, 546], "ground": [9, 312, 374, 706, 712, 735, 737], "truth": [9, 195, 205, 206, 213, 214, 230, 312, 374, 543, 712, 735, 737], "predict": [9, 15, 32, 38, 312, 374, 376, 378, 549, 605, 606, 607, 704], "transit": [9, 32, 312, 374, 757], "huber": [9, 32, 312, 374], "l1_loss": [9, 32, 312], "No": [9, 15, 32, 38, 312, 375, 376, 377, 378, 549, 605, 716, 723, 724, 757], "l1": [9, 14, 32, 37, 312, 316, 374, 375, 377, 418, 548, 603, 722, 745], "targetict": [9, 32, 312, 375, 377, 378], "20000000000000004": [9, 375], "smooth_l1_loss": [9, 32, 312], "smooth": [9, 15, 32, 38, 312, 374, 377, 549, 605, 606, 607, 733], "8125": [9, 377], "soft_margin_loss": [9, 32, 312], "soft": [9, 32, 312, 313, 378, 408, 725], "margin": [9, 32, 312, 378, 735], "35667497": [9, 378, 549, 606], "22314353": [9, 378], "60943791": [9, 378], "manipul": [9, 32, 706, 734, 735, 738, 740, 742, 747, 749, 757], "_arraywithmanipulationexperiment": [9, 51], "as_strid": [9, 32, 313], "nativeshap": [9, 13, 16, 18, 32, 39, 41, 77, 78, 85, 90, 97, 102, 313, 317, 379, 389, 394, 402, 405, 421, 422, 423, 424, 425, 489, 502, 507, 509, 540, 545, 547, 550, 554, 560, 562, 564, 566, 568, 615, 648, 649, 650, 730, 732], "byte": [9, 10, 28, 32, 33, 51, 89, 313, 379, 483, 540, 545, 762, 763], "associative_scan": [9, 32, 313], "revers": [9, 10, 14, 22, 32, 37, 45, 51, 52, 311, 313, 322, 364, 380, 392, 393, 436, 437, 456, 545, 548, 550, 558, 601, 612, 666, 667, 714, 722, 723, 724, 726, 727, 734, 735, 740, 747, 750], "associ": [9, 14, 32, 37, 177, 227, 313, 322, 380, 438, 543, 548, 589, 592, 604, 716, 724, 731, 732, 735, 736, 737, 750], "scan": [9, 32, 313, 380, 750], "atleast_1d": [9, 32, 313], "ari": [9, 32, 313, 381, 382, 383, 387, 396, 413], "cannot": [9, 244, 381, 382, 383, 543, 716, 718, 720, 724, 735, 742, 747, 763], "avoid": [9, 16, 32, 194, 199, 201, 217, 227, 313, 316, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 415, 416, 417, 451, 467, 492, 497, 519, 543, 545, 550, 611, 612, 613, 615, 617, 618, 620, 622, 715, 716, 720, 721, 722, 723, 724, 728, 732, 735, 737, 738, 739, 740, 757], "view": [9, 16, 32, 51, 88, 313, 381, 382, 383, 387, 389, 391, 392, 393, 396, 400, 407, 413, 467, 540, 545, 550, 611, 612, 613, 615, 617, 618, 620, 622, 715, 716, 728, 757], "made": [9, 16, 32, 311, 313, 363, 381, 382, 383, 619, 707, 710, 714, 716, 718, 719, 722, 723, 728, 729, 731, 733, 734, 735, 738, 740, 742, 744, 757], "a1": [9, 33, 381, 382, 383, 449], "a2": [9, 381, 382, 383], "atleast_2d": [9, 32, 313], "atleast_3d": [9, 32, 313], "three": [9, 94, 258, 304, 313, 383, 540, 715, 716, 722, 723, 724, 726, 735, 737, 740, 741, 742, 758, 763], "concat_from_sequ": [9, 32, 313], "input_sequ": [9, 32, 313, 386], "new_axi": [9, 32, 313, 386, 747], "concaten": [9, 10, 16, 32, 37, 313, 386, 457, 461, 545, 547, 550, 573, 591, 609, 736, 740, 742, 745], "insert": [9, 19, 32, 42, 313, 378, 386, 550, 552, 555, 557, 611, 631, 632, 653, 664, 723, 729], "do": [9, 10, 26, 32, 33, 194, 227, 236, 313, 322, 386, 442, 444, 474, 543, 545, 552, 627, 634, 637, 638, 639, 644, 704, 708, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 744, 745, 746, 747, 750, 752, 758, 763, 764], "stack": [9, 14, 16, 26, 32, 37, 39, 51, 99, 100, 271, 304, 311, 313, 358, 386, 388, 397, 414, 491, 500, 522, 540, 545, 548, 550, 552, 577, 579, 580, 581, 582, 584, 586, 588, 589, 590, 592, 593, 594, 596, 597, 600, 627, 637, 638, 686, 704, 713, 718, 720, 734, 742, 753, 755, 762, 763], "dsplit": [9, 32, 313], "indices_or_sect": [9, 32, 313, 387, 396, 413], "3rd": [9, 32, 313, 387], "dstack": [9, 32, 313], "fill_diagon": [9, 32, 313], "fill_diag": [9, 390], "start_dim": [9, 32, 313, 391, 704], "end_dim": [9, 32, 313, 391, 704], "read": [9, 16, 26, 28, 32, 39, 89, 313, 391, 540, 550, 615, 714, 715, 721, 723, 737, 739, 740, 757], "fastest": [9, 16, 32, 39, 311, 313, 368, 391, 550, 615], "slowest": [9, 16, 32, 39, 313, 391, 550, 615], "fortran": [9, 16, 32, 39, 313, 391, 550, 615, 757, 761], "layout": [9, 16, 32, 39, 313, 391, 550, 615, 720, 734, 735, 740], "fliplr": [9, 32, 313, 734], "diag": [9, 14, 32, 37, 313, 392, 393, 548, 581, 742], "flipud": [9, 32, 313, 734], "fold": [9, 32, 313, 402, 403, 723], "unfold": [9, 32, 49, 311, 313, 361, 394, 402, 404], "folded_tensor": [9, 313, 394], "heavisid": [9, 32, 313], "step": [9, 11, 28, 32, 34, 76, 92, 313, 395, 526, 527, 530, 532, 533, 534, 540, 546, 551, 624, 625, 626, 684, 690, 704, 708, 710, 714, 715, 716, 719, 720, 722, 723, 724, 725, 726, 733, 735, 737, 742, 745, 746, 747, 749, 757], "5000": [9, 313, 395, 548, 584], "hsplit": [9, 32, 313], "horizont": [9, 32, 313, 396, 457, 545], "hstack": [9, 32, 313], "vstack": [9, 32, 313, 397], "i0": [9, 32, 313, 322, 438], "modifi": [9, 26, 32, 49, 313, 322, 398, 401, 406, 442, 714, 715, 716, 718, 720, 721, 724, 725, 727, 729, 731, 734, 736, 737, 738, 742], "bessel": [9, 22, 32, 45, 263, 304, 313, 398, 558, 673, 675], "kind": [9, 22, 32, 119, 122, 123, 232, 322, 398, 436, 437, 442, 541, 543, 558, 666, 667, 672, 674, 713, 735, 737, 740, 742, 750], "26606588": [9, 32, 313, 398], "2795853": [9, 32, 313, 398], "88079259": [9, 32, 313, 398], "row_mod": [9, 32, 313, 399], "column_mod": [9, 32, 313, 399], "ascend": [9, 21, 32, 44, 313, 320, 399, 428, 557, 662, 664], "prod": [9, 10, 22, 33, 45, 311, 313, 362, 364, 399, 443, 458, 545, 558, 724, 726, 742], "moveaxi": [9, 32, 313], "destin": [9, 32, 313, 400], "unstack": [9, 16, 26, 39, 400, 550, 722, 742, 745, 764], "reorder": [9, 16, 32, 39, 313, 400, 457, 545, 550, 612], "uniqu": [9, 10, 20, 32, 33, 43, 313, 400, 401, 412, 481, 545, 551, 552, 556, 624, 625, 626, 629, 633, 658, 659, 660, 661, 704, 706, 718, 722, 731, 735, 736, 740, 750, 760], "pad_width": [9, 16, 32, 39, 313, 401, 550, 610, 623], "stat_length": [9, 32, 313, 401], "constant_valu": [9, 32, 313, 401], "end_valu": [9, 32, 313, 401], "reflect_typ": [9, 32, 313, 401], "even": [9, 32, 49, 194, 227, 232, 237, 313, 322, 401, 435, 543, 707, 708, 715, 716, 718, 723, 724, 725, 727, 730, 731, 734, 735, 736, 740, 744, 745, 746, 747, 750, 763], "partial_fold": [9, 32, 313], "skip_begin": [9, 32, 313, 402, 403, 404, 405], "untouch": [9, 32, 313, 402, 403, 404, 405], "begin": [9, 32, 238, 313, 401, 402, 403, 404, 405, 543, 552, 627, 638, 684, 715, 718, 723, 736], "partial_tensor_to_vec": [9, 32, 313], "skip_end": [9, 32, 313, 403, 404], "vectoris": [9, 32, 49, 313, 403, 405], "partial_unfold": [9, 32, 313], "ravel_tensor": [9, 32, 313, 404], "n_sampl": [9, 32, 313, 404], "n_1": [9, 32, 313, 404], "n_2": [9, 32, 313, 404], "n_i": [9, 32, 311, 313, 362, 404], "partial_vec_to_tensor": [9, 32, 313], "rot90": [9, 32, 313, 734], "rotat": [9, 32, 313, 407, 749], "soft_threshold": [9, 32, 313], "whole": [9, 32, 313, 316, 408, 418, 419, 420, 716, 721, 729], "take_along_axi": [9, 32, 313], "extract": [9, 32, 313, 385, 409, 735, 738, 753, 757, 758, 763], "One": [9, 10, 16, 18, 32, 33, 39, 41, 313, 381, 382, 383, 385, 401, 409, 458, 545, 550, 554, 615, 648, 719, 722, 724, 726, 731, 736, 737, 742, 744, 745], "arr": [9, 10, 29, 32, 127, 313, 385, 406, 409, 489, 541, 720, 724, 725], "top_k": [9, 32, 313], "largest": [9, 26, 32, 119, 122, 311, 313, 371, 410, 541, 548, 587, 596, 749], "sort": [9, 20, 26, 32, 43, 52, 246, 311, 313, 322, 358, 410, 428, 442, 543, 548, 556, 580, 581, 596, 597, 658, 662, 663, 664, 704, 713, 723, 738], "retun": [9, 32, 313, 410], "smallest": [9, 26, 32, 119, 122, 190, 313, 410, 541, 543, 548, 587], "name": [9, 14, 20, 24, 37, 43, 47, 201, 311, 313, 358, 410, 412, 447, 448, 543, 545, 548, 556, 580, 581, 585, 593, 594, 596, 601, 658, 659, 660, 688, 695, 697, 714, 715, 716, 720, 721, 722, 723, 726, 727, 728, 730, 735, 736, 737, 738, 739, 740, 742, 745, 747, 757], "unfolded_tensor": [9, 313, 411], "unique_consecut": [9, 32, 313], "vsplit": [9, 32, 313], "vertic": [9, 32, 313, 413, 414, 457, 545, 716], "_arraywithnormsexperiment": [9, 51], "batch_norm": [9, 32, 316], "varianc": [9, 22, 32, 45, 316, 415, 417, 558, 675, 685, 689], "momentum": [9, 32, 316, 415, 417, 689, 707], "nsc": [9, 32, 316, 415, 416, 417, 689], "braodcast": [9, 32, 316, 415], "present": [9, 26, 32, 277, 307, 316, 415, 416, 417, 706, 714, 716, 722, 724, 725, 730, 734, 742, 754, 755, 764], "running_mean": [9, 32, 316, 415, 417, 689], "running_var": [9, 32, 316, 415, 417, 689], "nc": [9, 32, 316, 415, 416, 417, 689], "group_norm": [9, 32, 316], "num_group": [9, 32, 316, 416], "group": [9, 32, 313, 316, 412, 416, 547, 552, 560, 567, 568, 629, 718, 722, 724, 731, 735, 736, 753, 756, 762], "separ": [9, 10, 32, 316, 416, 547, 573, 716, 719, 722, 723, 737, 742, 744, 745, 758, 762], "instance_norm": [9, 32, 316], "l1_normal": [9, 32, 316], "33333334": [9, 316, 418, 420, 528, 546, 547, 548, 569, 603], "33333337": [9, 92, 316, 418, 528, 540, 546], "28571439": [9, 316, 418], "l2_normal": [9, 32, 316, 420], "l2": [9, 14, 37, 48, 49, 316, 419, 420, 548, 603, 686, 722], "44721359": [9, 32, 316, 419, 420], "89442718": [9, 32, 316, 419, 420], "60000002": [9, 45, 52, 316, 419, 420, 670], "80000001": [9, 316, 419, 420], "lp_normal": [9, 32, 316], "lp": [9, 316, 420], "_arraywithrandomexperiment": [9, 51], "bernoulli": [9, 32, 310, 317, 333, 334, 335], "probabl": [9, 13, 15, 18, 32, 36, 38, 41, 310, 317, 322, 333, 334, 335, 421, 435, 438, 442, 547, 549, 554, 570, 573, 574, 605, 647, 685, 686, 704, 708, 737, 751], "event": [9, 32, 317, 421, 737], "entri": [9, 16, 26, 32, 39, 43, 92, 313, 317, 392, 393, 421, 540, 550, 552, 617, 640, 658, 715, 723, 737, 757], "parameter": [9, 18, 32, 41, 317, 421, 422, 424, 425, 554, 647, 649, 650], "prob": [9, 13, 32, 36, 41, 310, 317, 333, 334, 335, 421, 547, 554, 570, 647, 686, 704], "odd": [9, 32, 232, 313, 317, 401, 421, 543, 713, 718], "drawn": [9, 18, 32, 41, 317, 421, 422, 423, 424, 425, 554, 647, 648, 649, 650, 685, 737], "dirichlet": [9, 32, 317], "shuffl": [9, 18, 26, 32, 41, 423, 554], "10598304": [9, 317, 423], "21537054": [9, 317, 423], "67864642": [9, 317, 423], "48006698": [9, 317, 423], "07472073": [9, 317, 423], "44521229": [9, 317, 423], "55479872": [9, 317, 423], "05426367": [9, 317, 423], "39093761": [9, 317, 423], "19531053": [9, 317, 423], "51675832": [9, 317, 423], "28793114": [9, 317, 423], "12315625": [9, 317, 423], "29823365": [9, 317, 423], "5786101": [9, 317, 423], "15564976": [9, 317, 423], "50542368": [9, 317, 423], "33892656": [9, 317, 423], "1325352": [9, 317, 423], "44439589": [9, 317, 423], "42306891": [9, 317, 423], "gamma": [9, 17, 32, 40, 281, 291, 307, 317, 322, 439, 553, 646], "poisson": [9, 32, 312, 317, 376], "rate": [9, 11, 32, 34, 310, 317, 351, 425, 527, 530, 532, 533, 534, 546, 551, 624, 625, 626, 690, 723], "paramt": [9, 425, 552, 634, 644], "lam": [9, 32, 317, 425], "_arraywithsearchingexperiment": [9, 51], "unravel_index": [9, 32, 318], "unravel": [9, 32, 318, 426], "_arraywithsetexperiment": [9, 51], "_arraywithsortingexperiment": [9, 51], "lexsort": [9, 32, 320], "indirectli": [9, 32, 320, 428], "statist": [9, 32, 47, 313, 401, 689, 702, 714, 724, 737, 738, 757], "_arraywithstatisticalexperiment": [9, 51], "bincount": [9, 32, 322], "minlength": [9, 32, 322, 433], "alreadi": [9, 14, 26, 32, 37, 190, 200, 227, 237, 247, 313, 322, 382, 383, 401, 433, 442, 543, 548, 583, 591, 698, 704, 714, 715, 716, 720, 722, 724, 725, 730, 734, 735, 740, 750, 751, 757, 759, 764], "bin": [9, 32, 322, 433, 438, 710, 715, 716, 718, 722], "corrcoef": [9, 32, 322], "rowvar": [9, 32, 322, 434, 435], "relationship": [9, 32, 434, 685], "cov": [9, 32, 322], "bia": [9, 13, 32, 36, 40, 322, 435, 484, 545, 547, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 646, 686, 731, 737, 742, 746], "ddof": [9, 32, 322, 435], "fweight": [9, 32, 322, 435], "aweight": [9, 32, 322, 435], "overridden": [9, 32, 322, 435, 690, 719], "unbias": [9, 22, 32, 45, 322, 435, 558, 675], "typic": [9, 32, 275, 288, 307, 322, 435, 557, 664, 686, 718, 731, 756, 764], "assign": [9, 32, 49, 322, 435, 714, 716, 720, 724, 734, 744], "covari": [9, 32, 322, 435], "cummax": [9, 32, 322], "exclus": [9, 10, 22, 26, 32, 33, 45, 76, 311, 322, 370, 436, 437, 476, 477, 480, 540, 545, 554, 558, 648, 666, 667, 722, 724, 731, 747, 761, 763], "cumul": [9, 22, 32, 45, 322, 436, 437, 558, 666, 667, 749], "int64": [9, 18, 19, 21, 22, 29, 41, 42, 44, 45, 97, 109, 115, 118, 120, 122, 126, 127, 131, 138, 255, 262, 302, 304, 320, 322, 428, 436, 437, 540, 541, 555, 557, 558, 648, 653, 654, 655, 664, 666, 667, 672, 674, 724, 735, 737, 742], "uint64": [9, 22, 116, 121, 123, 124, 134, 136, 139, 255, 302, 322, 436, 437, 541, 558, 666, 667, 672, 674, 724, 737, 742], "uint16": [9, 22, 111, 116, 121, 122, 131, 255, 302, 322, 436, 437, 541, 558, 666, 667, 672, 674, 724, 735, 737, 742], "bit": [9, 22, 118, 119, 122, 185, 186, 188, 322, 436, 437, 541, 543, 558, 666, 667, 672, 674, 713, 714, 715, 722, 723, 724, 726, 731, 742, 744, 763], "uint32": [9, 22, 116, 121, 122, 123, 145, 255, 302, 322, 436, 437, 541, 558, 666, 667, 672, 674, 724, 737, 742], "resolv": [9, 22, 201, 322, 436, 437, 543, 550, 558, 611, 666, 667, 672, 674, 716, 721, 724, 729, 742], "cummin": [9, 32, 322], "histogram": [9, 32, 322], "extend_lower_interv": [9, 32, 322, 438], "extend_upper_interv": [9, 32, 322, 438], "densiti": [9, 32, 322, 438], "monoton": [9, 32, 322, 438], "rightmost": [9, 32, 322, 438], "extend": [9, 32, 313, 322, 401, 438, 720, 721, 727, 728, 730, 735, 738, 750, 754, 757, 763], "c1": [9, 32, 322, 438, 722], "ff": [9, 32, 322, 438], "c_": [9, 32, 322, 438], "igamma": [9, 32, 322], "incomplet": [9, 32, 322, 439, 716], "3614": [9, 32, 322, 439], "2085": [9, 32, 322, 439], "median": [9, 32, 313, 322, 401, 442], "nanmean": [9, 32, 322], "anyth": [9, 32, 322, 441, 442, 716, 728, 737, 738, 757, 758], "sub": [9, 14, 16, 26, 27, 31, 32, 33, 37, 39, 52, 226, 311, 313, 322, 359, 387, 396, 413, 441, 442, 548, 550, 551, 579, 617, 624, 625, 626, 684, 714, 716, 717, 722, 728, 735, 736, 737, 744, 745, 746, 753], "6666666666666665": [9, 32, 322, 441], "nanmedian": [9, 32, 322], "overwrite_input": [9, 32, 322, 442], "save": [9, 26, 32, 322, 442, 501, 523, 542, 545, 559, 688, 708, 710, 715, 723, 729, 737, 750, 756], "treat": [9, 26, 32, 52, 232, 293, 307, 313, 322, 409, 442, 443, 543, 733, 737, 743, 747], "undefin": [9, 32, 313, 322, 323, 401, 442, 445, 728, 733], "fulli": [9, 32, 322, 442, 686, 704, 708, 719, 724, 730, 733, 740, 742, 743, 744, 745, 746, 747, 750, 755, 756, 757, 763, 764], "nanprod": [9, 32, 322], "Not": [9, 32, 293, 307, 311, 322, 360, 443, 538, 720, 728, 736, 745, 746, 750], "quantil": [9, 32, 322], "inclus": [9, 32, 76, 322, 444, 540, 554, 648, 709, 720, 734, 740], "higher": [9, 32, 311, 313, 322, 370, 373, 381, 382, 383, 444, 685, 724, 734, 741, 742, 747, 750, 754, 757, 758, 761, 763, 764], "midpoint": [9, 32, 322, 444], "surround": [9, 32, 322, 444, 740], "whichev": [9, 32, 322, 444], "_arraywithutilityexperiment": [9, 51], "optional_get_el": [9, 32, 323], "empti": [9, 10, 26, 33, 76, 255, 302, 313, 323, 401, 445, 452, 489, 540, 545, 548, 552, 558, 559, 600, 603, 641, 672, 674, 676, 677, 714, 715, 719, 721, 724, 725, 734], "behavior": [9, 20, 194, 201, 227, 232, 236, 323, 445, 492, 515, 543, 545, 556, 658, 659, 660, 661, 714, 721, 722, 723, 724, 734, 735, 736, 737, 740, 742, 750, 754], "_arraywithgener": [10, 51], "all_equ": [10, 33, 545], "equality_matrix": [10, 33, 446, 545], "array_equ": [10, 33, 545], "assert_supports_inplac": [10, 33, 545], "ivybackendexcept": [10, 33, 450, 474, 545, 699, 719, 725, 728], "clip_matrix_norm": [10, 33, 545], "downscal": [10, 33, 452, 453, 474, 545], "894": [10, 33, 452, 453, 545, 553, 646], "clip_vector_norm": [10, 33, 545], "default_v": [10, 456, 545], "catch_except": [10, 456, 545], "rev": [10, 456, 545], "with_cal": [10, 456, 545], "catch": [10, 456, 545, 732, 737], "might": [10, 133, 456, 541, 545, 712, 714, 715, 716, 723, 724, 726, 729, 732, 735, 737, 738, 740, 742, 744, 745, 752], "einops_rearrang": [10, 33, 545], "axes_length": [10, 33, 457, 458, 459, 545], "arrang": [10, 457, 545], "rearrang": [10, 33, 457, 459, 545], "einop": [10, 33, 457, 458, 459, 545, 707], "einops_reduc": [10, 33, 545], "einops_repeat": [10, 33, 545], "fourier_encod": [10, 33, 545], "max_freq": [10, 33, 461, 545], "num_band": [10, 33, 461, 545], "oppos": [10, 33, 461, 545, 724], "geometr": [10, 33, 461, 545, 548, 601], "seper": [10, 461, 545, 726, 736], "0000000e": [10, 33, 461, 545], "2246468e": [10, 33, 461, 545], "4492936e": [10, 461, 545], "6739404e": [10, 33, 461, 545], "batch_dim": [10, 33, 464, 465, 545, 692], "gather_nd": [10, 33, 545], "get_num_dim": [10, 33, 545], "as_arrai": [10, 33, 468, 502, 545, 692], "has_nan": [10, 33, 545], "include_inf": [10, 33, 470, 524, 545], "inplace_decr": [10, 33, 545], "val": [10, 26, 31, 33, 207, 472, 473, 474, 493, 494, 495, 543, 545, 724, 734, 744], "decrement": [10, 33, 472, 545], "inplace_incr": [10, 33, 545], "increment": [10, 33, 473, 545, 716, 757], "inplace_upd": [10, 33, 492, 545, 683, 734], "ensure_in_backend": [10, 33, 474, 545, 734], "keep_input_dtyp": [10, 33, 474, 545, 734], "is_arrai": [10, 33, 545, 734, 735], "rather": [10, 26, 33, 76, 167, 476, 477, 480, 540, 542, 545, 707, 712, 716, 718, 722, 724, 727, 735, 736, 737, 738, 747, 750, 753, 756, 757], "is_ivy_arrai": [10, 33, 545, 734, 744], "is_ivy_contain": [10, 545], "is_native_arrai": [10, 33, 130, 477, 541, 545, 744], "isin": [10, 33, 545], "test_el": [10, 33, 481, 545], "assume_uniqu": [10, 33, 481, 545], "invert": [10, 33, 185, 481, 543, 545, 548, 588], "speed": [10, 33, 481, 545, 706, 737, 760], "scatter_flat": [10, 33, 545], "occupi": [10, 119, 122, 488, 489, 541, 545], "scatter_nd": [10, 33, 545, 740, 744], "stable_divid": [10, 33, 545, 731], "denomin": [10, 17, 33, 40, 495, 503, 517, 545, 553, 646, 689, 731, 739, 750, 754], "min_denomin": [10, 33, 495, 503, 517, 545, 739], "global": [10, 26, 33, 52, 112, 113, 114, 115, 116, 165, 166, 167, 494, 495, 498, 503, 504, 516, 517, 520, 541, 542, 545, 689, 695, 715, 719, 720, 723, 724, 725, 728, 731, 735, 742, 757], "_min_denomin": [10, 503, 545], "stable_pow": [10, 33, 545], "min_bas": [10, 33, 494, 504, 516, 545, 689, 739], "stabl": [10, 21, 33, 44, 101, 270, 304, 320, 428, 494, 495, 503, 504, 516, 517, 540, 545, 557, 662, 665, 715, 720, 724, 735, 739, 742, 750], "00004": [10, 33, 504, 545], "00008": [10, 33, 504, 545], "00004000e": [10, 504], "56002560e": [10, 504], "60001200e": [10, 504], "09602048e": [10, 504], "supports_inplace_upd": [10, 33, 545], "to_fil": 10, "fid": 10, "sep": 10, "format_": 10, "binari": [10, 13, 15, 36, 38, 184, 187, 189, 224, 244, 312, 376, 378, 543, 547, 549, 570, 605], "filenam": [10, 688, 694, 745], "txt": [10, 715, 718, 721], "recov": [10, 728, 735], "appropri": [10, 19, 24, 42, 47, 177, 194, 201, 227, 275, 288, 307, 543, 555, 653, 714, 715, 716, 728, 732, 737], "to_list": [10, 33, 545], "to_numpi": [10, 33, 545, 704, 736, 745], "address": [10, 510, 545, 708, 714, 716, 718, 719, 730, 742, 753, 755, 757, 763], "to_scalar": [10, 33, 545], "value_is_nan": [10, 33, 545], "_arraywithgradi": [11, 51], "adam_step": [11, 34, 546], "mw": [11, 34, 526, 527, 546, 746], "vw": [11, 34, 526, 527, 546, 746], "beta1": [11, 34, 448, 526, 527, 532, 545, 546, 690, 746], "beta2": [11, 34, 448, 526, 527, 532, 545, 546, 690, 746], "999": [11, 31, 34, 245, 526, 527, 532, 534, 543, 546, 690, 746], "epsilon": [11, 14, 15, 34, 37, 38, 448, 526, 527, 532, 545, 546, 548, 549, 589, 592, 605, 606, 607, 687, 689, 690, 722, 731, 734, 746], "07": [11, 15, 31, 34, 38, 41, 182, 215, 219, 238, 310, 341, 516, 526, 527, 529, 530, 531, 532, 543, 545, 546, 549, 606, 607, 649, 687, 690, 746], "cost": [11, 34, 526, 527, 530, 532, 533, 534, 546, 551, 624, 625, 626, 740, 755], "dc": [11, 34, 526, 527, 530, 532, 533, 534, 546], "dw": [11, 34, 526, 527, 530, 532, 533, 534, 546], "forget": [11, 34, 526, 527, 532, 546, 690, 704, 724], "adam": [11, 34, 448, 526, 527, 532, 545, 546, 690, 704, 745, 746, 747, 757], "prevent": [11, 34, 526, 527, 532, 546, 547, 558, 570, 674, 685, 690, 714, 716, 723, 724, 728, 734, 735, 738], "dcdw": [11, 34, 526, 527, 530, 532, 533, 546], "adam_step_delta": [11, 34, 526, 546], "2020105": [11, 526, 546], "22187898": [11, 526, 546], "24144873": [11, 526, 546], "10000002": [11, 45, 249, 302, 526, 670], "20000005": [11, 249, 302, 526], "00300002": [11, 526], "00800002": [11, 526], "adam_upd": [11, 34, 546, 746], "lr": [11, 34, 448, 527, 530, 532, 533, 534, 545, 546, 690, 745, 746], "mw_tm1": [11, 34, 527, 532, 546], "vw_tm1": [11, 34, 527, 532, 546], "stop_gradi": [11, 34, 167, 448, 527, 530, 532, 533, 534, 542, 545, 546, 551, 624, 625, 626, 690, 746], "learn": [11, 34, 311, 371, 457, 527, 530, 532, 533, 534, 545, 546, 551, 624, 625, 626, 690, 704, 706, 707, 709, 713, 714, 715, 717, 718, 729, 731, 733, 741, 749, 752, 755, 759, 760, 761, 762, 763, 764], "previou": [11, 34, 141, 142, 143, 144, 145, 301, 309, 513, 515, 516, 517, 518, 520, 521, 523, 527, 532, 541, 545, 546, 685, 701, 716, 718, 720, 723, 725, 730, 735, 737, 740, 747, 750, 760], "ws_new": [11, 34, 527, 532, 533, 534, 546], "updated_weight": [11, 34, 527, 546], "92558753": [11, 527], "92558873": [11, 527, 546], "92558718": [11, 527, 546], "00000063e": [11, 34, 527, 546], "00000016e": [11, 34, 527, 546], "00000086e": [11, 34, 527, 546], "gradient_descent_upd": [11, 34, 546, 551, 624, 625, 626], "descent": [11, 34, 530, 546, 690, 746, 757], "new_weight": [11, 34, 530, 532, 546, 745], "lamb_upd": [11, 34, 546], "max_trust_ratio": [11, 34, 532, 546, 690], "decay_lambda": [11, 34, 532, 533, 546, 690], "trust": [11, 34, 532, 546, 690], "ratio": [11, 34, 532, 546, 690], "decai": [11, 34, 532, 533, 546, 690], "lamb": [11, 34, 532, 546, 690, 746], "784": [11, 532, 546], "78": [11, 189, 238, 532, 543, 546, 548, 554, 558, 591, 649, 668], "lars_upd": [11, 34, 546], "lar": [11, 34, 533, 546, 690, 746], "optimizer_upd": [11, 34, 546], "effective_grad": [11, 34, 534, 546], "3e": [11, 34, 534, 546], "preserve_typ": [11, 34, 535, 546], "_arraywithimag": [12, 51], "_arraywithlay": [13, 51], "conv1d": [13, 36, 547, 686], "filter_format": [13, 36, 547, 560, 561, 563, 564, 565, 567], "channel_last": [13, 36, 547, 560, 561, 563, 564, 565, 567, 568], "x_dilat": [13, 36, 547, 560, 561, 563, 564, 565, 567], "fw": [13, 36, 322, 435, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 715, 737], "d_out": [13, 36, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568], "channel_first": [13, 36, 547, 560, 561, 563, 564, 565, 567, 568], "wio": [13, 547, 560, 561, 562, 567], "conv1d_transpos": [13, 36, 547], "output_shap": [13, 36, 547, 560, 562, 564, 566, 568, 686], "conv2d": [13, 36, 547, 564, 686, 704], "fh": [13, 36, 547, 552, 560, 563, 564, 565, 566, 567, 568, 569, 639], "hwio": [13, 547, 560, 561, 563, 567], "conv2d_transpos": [13, 36, 547], "random_norm": [13, 14, 18, 36, 37, 41, 457, 545, 547, 548, 554, 562, 564, 565, 566, 569, 572, 596, 704], "std": [13, 18, 22, 36, 41, 45, 317, 422, 547, 554, 558, 562, 564, 565, 566, 569, 648, 649, 704, 726], "conv3d": [13, 36, 547, 566, 686], "fd": [13, 36, 547, 560, 565, 566, 567, 568], "conv3d_transpos": [13, 36, 547], "depthwise_conv2d": [13, 36, 547], "dropout": [13, 36, 310, 333, 334, 335, 547, 573, 574, 686, 745], "noise_shap": [13, 36, 547, 570], "droput": [13, 570], "turn": [13, 36, 49, 333, 334, 335, 547, 570, 686, 708, 715, 721, 722, 725, 726, 735, 737], "reproduc": [13, 36, 547, 570, 712, 718], "42857146": [13, 547, 570], "85714293": [13, 547, 570], "28571415": [13, 36, 547, 570], "71428585": [13, 36, 547, 570], "14285755": [13, 36, 547, 570], "5714283": [13, 547, 570], "4285717": [13, 36, 547, 570], "8571434": [13, 36, 547, 570], "2857151": [13, 547, 570], "dropout1d": [13, 36, 310], "droput1d": [13, 333, 334], "dropout2d": [13, 36, 310], "dropout3d": [13, 36, 310], "droput3d": [13, 335], "outer_batch_shap": [13, 36, 547, 571], "inner_batch_shap": [13, 36, 547, 571], "in_featur": [13, 36, 547, 571, 737], "out_featur": [13, 36, 547, 571, 737], "84": [13, 22, 31, 41, 122, 152, 217, 541, 542, 548, 553, 558, 571, 591, 646, 649, 650, 668], "133": [13, 453, 545, 571], "134": [13, 548, 571, 588], "lstm_updat": [13, 36, 547, 742], "init_h": [13, 36, 547, 572, 742], "init_c": [13, 36, 547, 572, 742], "recurrent_kernel": [13, 36, 547, 572, 742], "recurrent_bia": [13, 36, 547, 572, 742], "cell": [13, 36, 547, 572, 686, 723, 742], "batch_shap": [13, 18, 28, 36, 41, 87, 96, 540, 547, 548, 554, 572, 573, 574, 604, 647, 686, 740, 742, 744], "hidden": [13, 36, 547, 572, 686, 721, 728, 742, 746], "recurr": [13, 36, 547, 572, 742, 757, 761], "timestep": [13, 36, 547, 572, 573, 686, 742], "h_i": [13, 36, 572], "c_i": [13, 36, 572], "rc": [13, 36, 572], "multi_head_attent": [13, 36, 547, 734], "num_head": [13, 36, 547, 573, 686], "attention_mask": [13, 36, 547, 573], "in_proj_weight": [13, 36, 547, 573], "q_proj_weight": [13, 36, 547, 573], "k_proj_weight": [13, 36, 547, 573], "v_proj_weight": [13, 36, 547, 573], "out_proj_weight": [13, 36, 547, 573], "in_proj_bia": [13, 36, 547, 573], "out_proj_bia": [13, 36, 547, 573], "is_caus": [13, 36, 547, 573, 574], "return_attention_weight": [13, 36, 547, 573], "average_attention_weight": [13, 36, 547, 573], "scaled_dot_product_attent": [13, 36, 547], "dropout_p": [13, 36, 547, 574], "queri": [13, 26, 36, 152, 166, 467, 493, 542, 545, 547, 573, 574, 686, 722, 724, 744, 757], "num_queri": [13, 36, 547, 573, 574], "feat_dim": [13, 36, 547, 574], "num_kei": [13, 36, 547, 573, 574], "causal": [13, 36, 547, 573, 574], "attent": [13, 36, 547, 573, 574, 686, 707, 716, 719], "score": [13, 36, 312, 378, 547, 574, 704], "40000001": [13, 25, 51, 52, 61, 64, 249, 302, 537, 547, 556, 574, 659], "29999995": [13, 249, 302, 547, 556, 574, 659], "19994521": [13, 547, 574], "09994531": [13, 547, 574], "30000019": [13, 547, 574], "_arraywithlinearalgebra": [14, 51], "choleski": [14, 37, 548, 734], "l": [14, 31, 37, 221, 311, 358, 548, 575, 580, 581, 582, 586, 600, 716, 717], "625": [14, 32, 285, 548, 575], "cross": [14, 15, 37, 38, 548, 549, 605, 606, 607, 704, 723, 724], "vif": [14, 37, 576], "det": [14, 37, 548, 594, 723], "axis1": [14, 16, 37, 39, 548, 550, 579, 600, 620], "axis2": [14, 37, 548, 579, 600], "eigh": [14, 37, 311, 358, 548, 580], "uplo": [14, 37, 548, 581, 582], "eigvalsh": [14, 37, 548], "inner": [14, 28, 37, 55, 96, 311, 358, 540, 548, 551, 580, 581, 586, 624, 625, 626, 714, 734], "array_lik": [14, 37, 310, 312, 313, 353, 374, 377, 378, 406, 548, 583, 591], "ident": [14, 26, 87, 155, 467, 493, 540, 542, 545, 548, 552, 583, 588, 640, 686, 706, 708, 722, 731, 732, 735, 736, 738, 740, 744, 745, 750, 752], "53": [14, 18, 31, 36, 113, 169, 199, 352, 529, 531, 541, 542, 546, 548, 553, 583, 646, 650], "83": [14, 36, 41, 241, 310, 322, 331, 341, 352, 436, 543, 547, 548, 571, 583, 649], "3d": [14, 32, 310, 333, 334, 383, 548, 583, 686, 740, 749], "29": [14, 31, 33, 34, 36, 41, 182, 322, 352, 436, 457, 458, 528, 532, 543, 545, 546, 548, 583, 648, 649, 650], "109": [14, 548, 583], "105": [14, 36, 547, 548, 549, 570, 571, 583, 591, 605], "149": [14, 548, 583], "171": [14, 548, 583], "143": [14, 31, 52, 244, 543, 548, 583, 726], "173": [14, 548, 583], "203": [14, 31, 183, 548, 553, 583, 646], "233": [14, 548, 583], "inv": [14, 37, 548], "matmul": [14, 37, 525, 545, 548, 596, 720, 737, 738, 742], "transpose_a": [14, 37, 548, 586], "transpose_b": [14, 37, 548, 586], "adjoint_a": [14, 37, 548, 586], "adjoint_b": [14, 37, 548, 586], "matrix_norm": [14, 37, 548], "ord": [14, 37, 548, 587, 603], "fro": [14, 37, 312, 374, 548, 587], "nuc": [14, 37, 548, 587], "matrix_pow": [14, 37, 548], "matrix_rank": [14, 37, 548], "hermitian": [14, 37, 311, 358, 359, 548, 580, 581, 582, 589, 596], "largest_singular_valu": [14, 37, 548, 589, 592], "defici": [14, 548, 589], "matrix_transpos": [14, 37, 548, 744], "outer": [14, 37, 49, 548, 551, 624, 625, 626, 714], "pinv": [14, 37, 548], "pseudo": [14, 37, 548, 592, 733], "99999988": [14, 37, 548, 592], "qr": [14, 37, 548, 736], "orthonorm": [14, 37, 548, 593, 596], "lead": [14, 26, 37, 52, 201, 311, 365, 492, 543, 545, 548, 593, 596, 707, 708, 723, 724, 726, 738, 750], "complet": [14, 26, 37, 548, 593, 707, 714, 715, 716, 718, 719, 722, 723, 726, 728, 731, 735, 736, 737, 740, 744, 745, 755], "field": [14, 20, 37, 43, 311, 313, 358, 412, 548, 556, 580, 581, 593, 594, 596, 658, 659, 660, 704, 723, 749, 755, 763], "those": [14, 16, 26, 32, 37, 39, 76, 133, 194, 227, 409, 525, 540, 541, 543, 545, 548, 550, 552, 555, 593, 596, 608, 629, 656, 706, 714, 715, 716, 719, 722, 723, 724, 732, 734, 735, 736, 737, 740, 754], "slogdet": [14, 37, 548], "logabsdet": [14, 37, 548, 594], "natur": [14, 37, 197, 215, 216, 217, 218, 237, 291, 307, 543, 548, 594, 707, 719, 726, 728, 736, 749], "098611": [14, 548, 594], "solv": [14, 37, 311, 365, 548, 704, 715, 718, 735, 743, 749, 759], "full_matric": [14, 37, 548, 596], "svf": [14, 596], "close": [14, 199, 217, 237, 258, 304, 543, 548, 550, 596, 611, 714, 715, 716, 724, 727, 735, 740, 757], "reconstructed_x": [14, 548, 596], "svdval": [14, 37, 548], "tensordot": [14, 37, 548, 724], "tensorsolv": [14, 37, 548], "vander": [14, 37, 548], "vandermond": [14, 37, 548, 601], "vecdot": [14, 37, 548], "vector_norm": [14, 37, 548], "singleton": [14, 19, 22, 23, 37, 42, 45, 46, 548, 550, 555, 558, 559, 603, 611, 618, 654, 669, 670, 671, 672, 673, 674, 675, 676, 677, 742], "mathemat": [14, 37, 177, 182, 194, 199, 201, 217, 227, 538, 543, 548, 587, 603, 724, 735, 740, 757, 763], "manhattan": [14, 37, 548, 603], "euclidean": [14, 37, 49, 548, 603], "7416575": [14, 37, 548, 603], "vector_to_skew_symmetric_matrix": [14, 37, 548], "_arraywithloss": [15, 51], "binary_cross_entropi": [15, 38, 549, 723], "from_logit": [15, 38, 549, 605, 687], "pos_weight": [15, 38, 549, 605], "amount": [15, 38, 169, 542, 549, 605, 606, 607, 715, 723, 725, 736], "crossentropi": [15, 38, 549, 605], "entropi": [15, 38, 549, 605, 606, 607, 704], "357": [15, 38, 549, 605, 607], "223": [15, 38, 549, 605, 607], "cross_entropi": [15, 38, 549, 607, 704, 722, 731, 734], "3862944": [15, 549, 606], "sparse_cross_entropi": [15, 38, 549], "_arraywithmanipul": [16, 51], "x_min": [16, 39, 550, 608, 747], "x_max": [16, 39, 550, 608, 747], "constant_pad": [16, 39, 550], "before_1": [16, 39, 313, 401, 550, 610, 623], "after_1": [16, 39, 313, 401, 550, 610, 623], "before_n": [16, 39, 313, 401, 550, 610, 623], "after_n": [16, 39, 313, 401, 550, 610, 623], "permute_dim": [16, 39, 550], "repetit": [16, 39, 550, 614, 621, 740], "fit": [16, 39, 550, 614, 714, 735, 742, 753, 754, 757], "flat": [16, 26, 39, 318, 426, 488, 545, 550, 614, 684], "allowzero": [16, 39, 550, 615], "remain": [16, 19, 32, 39, 42, 177, 194, 195, 201, 209, 210, 227, 230, 236, 238, 310, 333, 334, 335, 353, 543, 550, 552, 555, 615, 633, 656, 715, 716, 723, 726, 728, 731, 738, 740, 750], "roll": [16, 39, 550, 730], "shift": [16, 28, 39, 52, 91, 101, 186, 188, 270, 304, 540, 543, 550, 616, 715, 716, 725, 726, 730], "restor": [16, 39, 550, 616, 729], "num_or_size_split": [16, 26, 39, 550, 617, 742], "with_remaind": [16, 26, 39, 550, 617], "mani": [16, 26, 39, 101, 270, 304, 540, 550, 617, 684, 704, 706, 707, 708, 714, 715, 716, 719, 720, 722, 723, 724, 725, 726, 727, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 750, 753, 757, 760, 763, 764], "squeez": [16, 39, 550, 757], "squeezabl": [16, 550, 618], "document": [16, 201, 525, 543, 545, 619, 709, 711, 713, 716, 721, 723, 724, 726, 734, 735, 736, 737, 745, 747], "swapax": [16, 39, 550], "axis0": [16, 39, 550, 620], "swap_ax": [16, 620], "tile": [16, 33, 39, 459, 550], "unpack": [16, 39, 550, 622, 736, 737], "zero_pad": [16, 39, 550], "_arraywithnorm": [17, 51], "layer_norm": [17, 40, 553], "normalized_idx": [17, 40, 553, 646], "new_std": [17, 40, 553, 646, 689], "learnabl": [17, 40, 551, 553, 626, 646, 686, 689, 747], "deviat": [17, 18, 22, 40, 41, 45, 553, 554, 558, 646, 649, 673, 685, 689, 708, 718], "0976": [17, 553, 646], "3452": [17, 553, 646], "2740": [17, 553, 646], "1047": [17, 553, 646], "5886": [17, 553, 646], "2732": [17, 553, 646], "7696": [17, 553, 646], "7024": [17, 553, 646], "2518": [17, 553, 646], "826": [17, 553, 646], "178": [17, 553, 646], "981": [17, 553, 646], "831": [17, 553, 646], "421": [17, 553, 646], "_arraywithrandom": [18, 51], "multinomi": [18, 41, 317, 423, 554], "population_s": [18, 41, 554, 647], "num_sampl": [18, 41, 554, 647], "unnorm": [18, 41, 554, 647, 737], "popul": [18, 22, 26, 41, 45, 554, 558, 647, 673, 675, 724, 725, 734, 737, 742, 763], "draw": [18, 41, 317, 421, 423, 425, 554, 647, 649, 650, 685, 714, 718, 736, 737], "ve": [18, 41, 554, 647, 714, 715, 716, 737, 740, 741, 744, 752], "half": [18, 41, 76, 241, 540, 543, 554, 648, 650, 712, 740], "235": [18, 649], "float16": [18, 29, 41, 89, 111, 113, 114, 119, 121, 255, 283, 302, 307, 540, 541, 548, 603, 649, 650, 712, 724, 735, 737], "807": [18, 649], "random_uniform": [18, 41, 554, 725, 728, 737, 742, 746], "86": [18, 32, 41, 310, 322, 341, 436, 526, 546, 649, 650], "_arraywithsearch": [19, 51], "select_last_index": [19, 42, 555, 653, 654], "occurr": [19, 313, 322, 412, 433, 555, 556, 653, 654, 658], "argmin": [19, 42, 555], "output_dtyp": [19, 42, 555, 654], "across": [19, 26, 33, 42, 51, 165, 166, 194, 201, 227, 245, 316, 417, 449, 470, 505, 542, 543, 545, 547, 552, 555, 570, 573, 633, 653, 654, 686, 714, 718, 724, 726, 728, 730, 731, 733, 737, 740, 755, 757, 762], "argwher": [19, 42, 555], "nonzero": [19, 42, 175, 176, 177, 180, 183, 192, 194, 197, 199, 201, 227, 240, 245, 543, 555], "as_tupl": [19, 42, 555, 656], "fewer": [19, 42, 555, 656], "yield": [19, 266, 267, 304, 313, 401, 555, 657, 704, 723], "_arraywithset": [20, 51], "unique_al": [20, 43, 556], "by_valu": [20, 43, 556, 658], "inverse_indic": [20, 43, 313, 412, 556, 658, 660], "unique_count": [20, 43, 556], "unique_invers": [20, 43, 556], "unique_valu": [20, 43, 556], "admonit": [20, 661], "henc": [20, 177, 277, 307, 543, 550, 556, 611, 658, 659, 660, 661, 695, 715, 722, 723, 724, 734, 737], "dask": [20, 556, 658, 659, 660, 661, 707], "difficult": [20, 556, 658, 659, 660, 661, 716, 718, 724, 737, 750], "know": [20, 556, 658, 659, 660, 661, 708, 711, 714, 716, 725, 732, 736, 737, 740, 758], "omit": [20, 237, 543, 556, 658, 659, 660, 661, 730, 734, 735], "x_i": [20, 22, 31, 174, 175, 176, 179, 180, 181, 183, 185, 190, 191, 192, 197, 199, 200, 207, 208, 209, 210, 211, 215, 216, 217, 218, 222, 229, 234, 237, 238, 239, 240, 241, 242, 244, 245, 247, 277, 296, 307, 543, 556, 558, 658, 659, 660, 661, 669, 670, 671, 673, 674, 675, 685, 727], "x_j": [20, 556, 658, 659, 660, 661], "impli": [20, 556, 658, 659, 660, 661, 737], "could": [20, 556, 658, 659, 660, 661, 707, 708, 714, 715, 716, 718, 723, 724, 726, 732, 734, 735, 736, 737, 742, 744, 745, 746, 757, 762, 763], "typeerror": [20, 43, 556, 661, 744], "_arraywithsort": [21, 51], "argsort": [21, 44, 557, 664, 735], "descend": [21, 44, 548, 557, 596, 597, 662, 665], "stabil": [21, 44, 503, 504, 545, 557, 662, 665, 724, 733, 738, 740], "maintain": [21, 44, 557, 662, 665, 706, 716, 718, 729, 734, 736, 737, 756], "msort": [21, 44, 557], "searchsort": [21, 44, 557], "side": [21, 44, 287, 307, 557, 664, 686, 698, 715, 716, 721], "sorter": [21, 44, 557, 664], "ret_dtyp": [21, 44, 557, 664], "_arraywithstatist": [22, 51], "cumprod": [22, 45, 558, 735, 747], "120": [22, 45, 52, 548, 591, 666, 704], "cumsum": [22, 45, 558, 724], "einsum": [22, 45, 558], "equat": [22, 32, 45, 260, 304, 548, 558, 595, 668, 698, 723, 757], "operand": [22, 32, 36, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 296, 300, 307, 308, 310, 352, 543, 548, 558, 594, 600, 668, 669, 671, 672, 674, 698, 719, 722, 727, 735], "describ": [22, 32, 177, 194, 195, 227, 230, 232, 317, 320, 425, 428, 543, 547, 558, 573, 668, 672, 674, 711, 714, 715, 716, 721, 723, 734, 735, 737, 742, 747, 757], "contract": [22, 548, 558, 598, 668], "seq": [22, 558, 668], "consist": [22, 26, 194, 201, 227, 311, 358, 543, 548, 558, 580, 581, 668, 687, 688, 706, 718, 719, 723, 724, 729, 734, 742, 758], "ii": [22, 45, 558, 668, 716], "jk": [22, 558, 668], "ik": [22, 558, 668], "66": [22, 32, 33, 34, 189, 310, 341, 457, 458, 530, 543, 545, 546, 548, 558, 591, 668], "104": [22, 548, 558, 591, 668], "126": [22, 59, 233, 537, 543, 548, 558, 588, 668], "510": [22, 558, 668], "special": [22, 37, 49, 51, 52, 174, 175, 176, 177, 179, 180, 181, 182, 183, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 247, 296, 307, 543, 548, 558, 594, 600, 669, 670, 671, 672, 673, 674, 675, 685, 714, 718, 719, 721, 723, 726, 727, 728, 730, 734, 736, 737, 738, 740, 757, 758, 759], "arithmet": [22, 45, 188, 194, 227, 543, 558, 670, 735], "propag": [22, 188, 543, 558, 669, 670, 671, 673, 674, 675, 733], "04999995": [22, 670], "freedom": [22, 45, 558, 673, 675, 720], "adjust": [22, 45, 311, 371, 558, 673, 675, 695], "constitut": [22, 45, 558, 673, 675, 731, 742, 758], "commonli": [22, 45, 558, 673, 675, 728, 731, 733], "81649661": [22, 558, 673], "var": [22, 45, 47, 72, 73, 74, 75, 539, 551, 558, 624, 625, 692, 715, 726, 742], "6666665": [22, 675, 745], "667": [22, 33, 194, 453, 503, 543, 545, 675], "_arraywithutil": [23, 51], "AND": [23, 46, 184, 195, 221, 543, 559, 676], "invalid": [23, 46, 548, 550, 559, 602, 611, 676, 677, 715, 724], "OR": [23, 46, 187, 223, 230, 543, 559, 677, 715, 716, 733], "_wrap_funct": [24, 47, 721, 731, 732], "function_nam": [24, 47, 714, 738], "new_funct": [24, 47, 721], "add_ivy_array_instance_method": 24, "cl": [24, 47], "shown": [24, 26, 47, 211, 234, 277, 307, 543, 714, 715, 716, 718, 721, 723, 724, 726, 728, 729, 730, 735, 736, 737, 738, 739, 742, 744, 750], "toi": [24, 47], "arrayexampl": 24, "hasattr": [24, 47], "_containerwithactiv": [25, 52], "dict_in": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "queue": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 498, 520, 545, 739, 745], "queue_load_s": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "container_combine_method": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "list_join": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "queue_timeout": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 498, 520, 545, 739], "print_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "key_length_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "print_ind": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "print_line_spac": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "ivyh": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "default_key_color": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "green": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 703, 714, 715, 716], "keyword_color_dict": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "rebuild_child_contain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "types_to_iteratively_nest": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "alphabetical_kei": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "dynamic_backend": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 688, 720, 739], "build_cal": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52], "containerbas": [25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 722], "_static_gelu": 25, "key_chain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 270, 271, 274, 275, 276, 277, 279, 281, 287, 288, 294, 296, 297, 298, 299, 300, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 386, 388, 397, 399, 401, 402, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 427, 428, 435, 436, 437, 438, 444, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "to_appli": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 270, 271, 274, 275, 276, 277, 279, 281, 287, 288, 294, 296, 297, 298, 299, 300, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 386, 388, 397, 399, 401, 402, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 427, 428, 435, 436, 437, 438, 444, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 552, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "prune_unappli": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 270, 271, 274, 275, 276, 277, 279, 281, 287, 288, 294, 296, 297, 298, 299, 300, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 352, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 386, 388, 397, 399, 401, 402, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 427, 428, 435, 436, 437, 438, 444, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 552, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "map_sequ": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 78, 84, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 107, 108, 109, 117, 119, 122, 125, 126, 127, 129, 131, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 270, 271, 274, 275, 276, 277, 279, 281, 287, 288, 294, 296, 297, 298, 299, 300, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 345, 346, 347, 348, 352, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 386, 388, 397, 399, 401, 402, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 422, 427, 428, 435, 436, 437, 438, 444, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "exact": [25, 26, 59, 310, 312, 345, 350, 376, 556, 658, 660, 682, 715, 716, 718, 726, 742], "formul": [25, 59, 682], "chain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 275, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 333, 334, 335, 374, 375, 377, 378, 386, 407, 410, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 551, 552, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 624, 625, 629, 640, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 684, 691, 719, 722, 733, 735, 746, 747, 750, 757], "prune": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 91, 96, 98, 103, 107, 109, 122, 126, 127, 134, 168, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 253, 254, 256, 257, 259, 275, 276, 277, 279, 281, 287, 288, 294, 296, 298, 299, 300, 333, 334, 335, 374, 375, 377, 378, 381, 382, 383, 386, 407, 409, 410, 415, 417, 418, 419, 420, 422, 435, 436, 437, 438, 446, 449, 450, 452, 453, 457, 458, 459, 461, 464, 465, 468, 470, 472, 473, 474, 476, 477, 480, 488, 489, 503, 504, 506, 508, 510, 511, 524, 530, 535, 552, 561, 562, 563, 564, 570, 571, 574, 575, 576, 581, 582, 583, 584, 586, 587, 589, 591, 593, 594, 600, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 622, 623, 640, 641, 642, 643, 647, 648, 649, 650, 652, 655, 658, 659, 660, 661, 662, 666, 667, 670, 672, 673, 675, 676, 677, 723], "static_gelu": 25, "185": 25, "046": 25, "_static_hardswish": 25, "_static_leaky_relu": 25, "static_leaky_relu": 25, "38999999": [25, 32, 61, 249, 302], "_static_log_softmax": 25, "static_log_softmax": 25, "371": [25, 62], "_static_mish": 25, "static_mish": 25, "30883577": [25, 63, 537], "28903052": [25, 63, 537], "10714479": [25, 63, 537], "_static_relu": 25, "static_relu": 25, "_static_sigmoid": 25, "static_sigmoid": 25, "2689414": [25, 65, 66, 537], "7310586": [25, 65, 66, 537], "88079703": [25, 65, 537], "62245935": [25, 65], "4750208": [25, 65], "_static_softmax": 25, "static_softmax": 25, "72844321": [25, 66], "19852395": [25, 66], "07303288": [25, 66], "_static_softplu": 25, "revert": [25, 67, 537], "static_softplu": 25, "53499615": 25, "42036411": 25, "948": [25, 67], "166": [25, 59, 537], "159": [25, 59, 537, 547, 571], "__getitem__": [26, 722], "slice": [26, 33, 101, 270, 304, 313, 385, 406, 409, 464, 465, 467, 493, 540, 545, 552, 636, 757], "dictionari": [26, 43, 52, 166, 528, 542, 546, 661, 719, 723, 724, 731, 735, 736, 745, 750], "multiprocess": [26, 52, 545, 745, 750], "asynchron": [26, 52, 757], "wait": [26, 52, 498, 545, 704, 714, 716, 723, 735], "arriv": [26, 52, 498, 545, 740], "cont_list_join": [26, 52], "timeout": [26, 52, 498, 520, 545, 739], "limit": [26, 52, 119, 122, 452, 453, 541, 545, 550, 608, 685, 692, 704, 715, 716, 721, 723, 726, 728, 735, 737, 740, 745, 750, 756, 757, 758], "whitespac": [26, 52], "indent": [26, 52, 745], "newlin": [26, 52, 727], "color": [26, 52, 703], "termin": [26, 52, 715, 716, 722, 729, 742, 745], "termcolor": [26, 52], "rebuild": [26, 52, 710], "constructor": [26, 52, 448, 545, 683, 691, 724, 725, 727, 744], "kept": [26, 52, 551, 624, 625, 716, 734, 738], "encount": [26, 52, 686, 712, 714, 724, 728, 737], "further": [26, 52, 707, 708, 716, 718, 719, 723, 726, 728, 730, 731, 734, 735, 737, 741, 742, 745, 746, 762, 763], "instruct": [26, 52, 704, 714, 715, 718, 728, 729, 736, 737, 751, 755, 758, 761, 763], "structur": [26, 29, 52, 119, 122, 454, 545, 552, 631, 640, 684, 704, 714, 716, 719, 722, 731, 736, 737, 738, 745, 746, 756, 757], "alphabet": [26, 52], "__setitem__": [26, 719, 722, 744], "_cont_at_key_chains_input_as_dict": 26, "current_chain": 26, "ignore_key_error": 26, "_cont_at_key_chains_input_as_seq": 26, "_cont_call_static_method_with_flexible_arg": 26, "static_method": 26, "kw": 26, "self_idx": 26, "_cont_concat_unifi": 26, "_cont_get_dev": 26, "_cont_get_shap": 26, "properti": [26, 49, 50, 51, 55, 688, 690, 718, 722, 731, 736, 737, 744, 745, 746, 763], "_cont_ivi": 26, "_cont_mean_unifi": 26, "_1": 26, "_cont_prune_key_chains_input_as_dict": 26, "return_cont": 26, "_cont_prune_key_chains_input_as_seq": 26, "_cont_slice_kei": 26, "key_slic": 26, "_cont_sum_unifi": 26, "_get_queue_item": 26, "cont_all_fals": 26, "assert_is_bool": 26, "assert": [26, 450, 545, 712, 717, 718, 731, 734, 735, 736, 737, 738, 744, 745], "cont_all_key_chain": 26, "include_empti": 26, "cont_all_tru": [26, 722, 745], "cont_as_bool": 26, "cont_assert_contains_sub_contain": 26, "sub_cont": 26, "screen": [26, 714, 715, 745], "cont_assert_contains_sub_structur": 26, "check_shap": [26, 692], "cont_assert_ident": 26, "check_typ": 26, "same_arrai": [26, 745], "arrays_equ": 26, "cont_assert_identical_structur": 26, "assert_and_assign": 26, "strucutr": 26, "congruent": 26, "cont_at_key_chain": 26, "ignore_non": 26, "cont_at_kei": 26, "substr": 26, "try": [26, 512, 545, 685, 695, 704, 705, 707, 708, 714, 715, 716, 718, 719, 722, 723, 724, 728, 729, 734, 736, 742, 744, 750], "cont_combin": 26, "prioriti": [26, 695, 716, 725, 734], "most": [26, 28, 49, 96, 311, 358, 497, 519, 540, 545, 548, 580, 581, 701, 704, 707, 713, 714, 715, 719, 722, 723, 724, 725, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 750, 757, 758, 760, 761, 763, 764], "duplic": [26, 552, 629, 720, 727, 732, 733, 736, 746, 763], "configur": [26, 166, 542, 552, 640, 710, 715, 716, 721, 723, 724, 729], "container_rightmost": 26, "cont_common_key_chain": 26, "cont_config": 26, "cont_contains_sub_contain": 26, "cont_contains_sub_structur": 26, "cont_copi": [26, 745], "cont_create_if_abs": 26, "noth": [26, 740, 763], "cont_cutoff_at_depth": 26, "depth_cutoff": 26, "summari": [26, 123, 454, 469, 541, 545, 715, 716, 737], "cont_cutoff_at_height": 26, "height_cutoff": 26, "deep": [26, 457, 545, 704, 706, 709, 711, 713, 714, 716, 718, 721, 722, 724, 729, 733, 736, 741, 744, 745, 755, 757, 760, 761, 763, 764], "intern": [26, 54, 55, 56, 552, 627, 637, 638, 685, 686, 687, 688, 689, 691, 719, 722, 725, 727, 734, 736, 737, 739], "cont_dev": 26, "belong": [26, 714, 718, 746], "cont_dev_str": 26, "cont_diff": [26, 745], "diff_kei": 26, "detect_key_diff": 26, "detect_value_diff": 26, "detect_shape_diff": 26, "share": [26, 140, 541, 704, 707, 720, 722, 726, 731, 733, 735, 736, 737, 740, 742, 755, 756, 763], "among": [26, 708, 722, 723, 737, 740, 757], "container0": 26, "cont_duplicate_array_keychain": 26, "cont_find_sub_contain": 26, "sub_cont_to_find": 26, "exsit": 26, "cont_find_sub_structur": 26, "sub_struc_to_find": 26, "cont_flatten_key_chain": [26, 745], "__": [26, 726, 745], "above_height": [26, 745], "below_depth": [26, 745], "cont_format_key_chain": 26, "format_fn": 26, "cont_from_disk_as_hdf5": [26, 745], "h5_obj_or_filepath": 26, "slice_obj": 26, "load": [26, 311, 371, 559, 688, 704, 737, 750, 756, 763], "disk": [26, 688, 745, 756], "h5py": 26, "hdf5": [26, 688, 745], "filepath": [26, 559, 678, 679, 716, 718], "h5": 26, "cont_from_disk_as_json": [26, 745], "json_filepath": 26, "json": [26, 710, 715, 745], "cont_from_disk_as_pickl": [26, 745], "pickle_filepath": 26, "pickl": [26, 688, 722, 745], "cont_from_flat_list": 26, "flat_list": 26, "hierarchi": [26, 714, 745, 753, 763], "cont_handle_inplac": 26, "prime": [26, 724], "overwritten": [26, 719, 720], "cont_has_kei": 26, "query_kei": 26, "somewher": [26, 723], "cont_has_key_chain": 26, "cont_ident": [26, 745], "cont_identical_array_shap": 26, "regardless": [26, 708, 709, 724, 728, 744, 747], "cont_identical_config": 26, "cont_identical_structur": 26, "cont_if_exist": 26, "cont_inplace_upd": 26, "cont_ivi": 26, "cont_key_chains_contain": 26, "sub_str": 26, "cont_list_stack": [26, 745], "cont_load": 26, "cont_map": [26, 722, 745], "func": [26, 49, 167, 301, 309, 451, 525, 528, 529, 531, 536, 542, 545, 546, 552, 640, 714, 718, 719, 726, 728, 733, 734], "cont_map_sub_cont": 26, "include_self": 26, "possibi": 26, "cont_max_depth": 26, "cont_multi_map": 26, "map_nest": 26, "assert_ident": 26, "leftmost": [26, 552, 640], "cont_multi_map_in_funct": 26, "cont_num_arrai": 26, "cont_overwrite_at_key_chain": 26, "target_dict": 26, "return_dict": 26, "cont_prune_empti": 26, "keep_non": 26, "cont_prune_key_chain": 26, "key1": [26, 704, 746], "key2": [26, 704], "key3": 26, "cont_prune_key_from_key_chain": 26, "cont_prune_kei": 26, "cont_prune_keys_from_key_chain": 26, "cont_reduc": 26, "cont_remove_key_length_limit": 26, "cont_remove_print_limit": 26, "cont_reshape_lik": 26, "leading_shap": 26, "cont_restructur": 26, "keep_orig": 26, "old": [26, 715, 720, 734], "cont_restructure_key_chain": 26, "keychain_map": 26, "cont_sav": 26, "cont_set_at_key_chain": 26, "cont_set_at_kei": 26, "cont_shap": [26, 547, 565], "attribut": [26, 119, 120, 121, 122, 153, 154, 162, 462, 463, 541, 542, 545, 720, 721, 722, 724, 727, 728, 731, 732, 734, 735, 740, 743, 744, 745, 746], "cont_show": 26, "cont_show_sub_contain": 26, "sub_cont_or_keychain": 26, "cont_size_ordered_arrai": 26, "keychain": [26, 32, 276, 381, 382, 383, 409], "cont_slice_kei": 26, "all_depth": 26, "cont_slice_via_kei": 26, "slice_kei": 26, "cont_sort_by_kei": 26, "cont_structural_diff": 26, "cont_to_dict": 26, "cont_to_disk_as_hdf5": [26, 745], "starting_index": 26, "max_batch_s": 26, "later": [26, 451, 545, 714, 729, 734, 737, 738, 757], "cont_to_disk_as_json": [26, 745], "cont_to_disk_as_pickl": [26, 745], "cont_to_flat_list": 26, "cont_to_iter": [26, 722], "leaf_keys_onli": 26, "cont_to_iterator_kei": 26, "cont_to_iterator_valu": 26, "cont_to_json": 26, "cont_to_nested_list": 26, "cont_to_raw": 26, "cont_trim_kei": 26, "max_length": 26, "trim": 26, "cont_try_kc": 26, "cont_unifi": 26, "unifi": [26, 167, 542, 705, 707, 717, 718, 719, 724, 728, 732, 733, 735, 740, 742, 750, 753, 754, 755, 757, 761, 764], "concatten": [26, 167, 542], "cont_unstack_cont": 26, "dim_siz": 26, "cont_update_config": 26, "cont_with_default_key_color": 26, "cont_with_entries_as_list": 26, "cont_with_ivy_backend": 26, "ivy_backend": [26, 736], "cont_with_key_length_limit": [26, 745], "cont_with_print_ind": [26, 745], "cont_with_print_limit": [26, 745], "cont_with_print_line_spac": 26, "h5_file_s": 26, "shuffle_h5_fil": 26, "seed_valu": [26, 554, 651], "split_cont": 26, "constitu": [26, 747], "_is_json": 26, "_repr": 26, "_containerwithconvers": [27, 52], "_static_to_ivi": 27, "_static_to_n": 27, "_containerwithcr": [28, 52], "_static_arang": 28, "_static_asarrai": 28, "_static_copy_arrai": 28, "_static_empti": 28, "_static_empty_lik": 28, "_static_ey": 28, "n_row": [28, 32, 87, 101, 270, 304, 311, 364, 540], "n_col": [28, 32, 87, 101, 270, 304, 540], "_static_from_dlpack": 28, "_static_ful": 28, "_static_full_lik": 28, "static_full_lik": 28, "2324": [28, 91, 540], "234": [28, 31, 91, 113, 196, 247, 540, 541, 543, 547, 571], "123": [28, 29, 91, 122, 460, 540, 545, 737], "_static_linspac": 28, "_static_logspac": 28, "static_logspac": 28, "15443469": [28, 93], "64158883": [28, 93], "_static_meshgrid": 28, "_static_native_arrai": 28, "_static_one_hot": 28, "static_one_hot": 28, "_static_on": 28, "_static_ones_lik": 28, "_static_tril": 28, "_static_triu": 28, "_static_zero": 28, "_static_zeros_lik": 28, "frombuff": [28, 540], "expos": [28, 89, 454, 540, 545, 704, 706, 723, 742, 746], "interfac": [28, 89, 540, 707, 744, 747, 750, 752, 753, 754, 755, 756, 757, 761, 764], "x00": [28, 89, 540], "xf0": [28, 89, 540], "x01": [28, 89, 540], "x02": [28, 89, 540], "x03": [28, 89, 540], "x04": [28, 89, 540], "x05": [28, 89], "5443469": [28, 93, 540], "static_frombuff": 28, "static_triu_indic": 28, "triu_indic": [28, 540], "_containerwithdatatyp": [29, 52], "_static_astyp": 29, "718": [29, 31, 106, 223, 541], "618": [29, 31, 106, 223, 541], "static_astyp": 29, "_static_broadcast_arrai": 29, "static_broadcast_arrai": 29, "_static_broadcast_to": 29, "static_broadcast_to": 29, "_static_can_cast": 29, "from_": [29, 109, 541], "static_can_cast": 29, "_static_default_complex_dtyp": 29, "complex_dtyp": [29, 112, 135, 541], "_static_default_float_dtyp": 29, "float_dtyp": [29, 114, 137, 541], "_static_dtyp": 29, "_static_finfo": 29, "inquir": [29, 119, 122], "static_finfo": 29, "55040e": [29, 119, 541], "7976931348623157e": [29, 119, 541], "308": [29, 119, 541, 737], "_static_function_supported_dtyp": 29, "_static_function_unsupported_dtyp": 29, "_static_iinfo": 29, "1800": [29, 122, 541], "1084": 29, "40000": 29, "static_iinfo": 29, "2147483648": [29, 122, 541], "2147483647": [29, 122, 541], "_static_is_bool_dtyp": 29, "dtype_in": [29, 104, 105, 118, 124, 125, 126, 127, 128, 129, 130, 131, 146, 541], "_static_is_complex_dtyp": 29, "is_complex_dtyp": [29, 541, 738], "roughli": [29, 715, 718, 760], "static_is_complex_dtyp": 29, "complex64": [29, 112, 126, 135, 141, 207, 234, 255, 302, 541, 543, 548, 594, 596, 597, 724], "_static_is_float_dtyp": 29, "static_is_float_dtyp": 29, "_static_is_int_dtyp": 29, "_static_is_uint_dtyp": 29, "_static_result_typ": 29, "static_result_typ": 29, "broadcats": [29, 107], "_containerwithdevic": [30, 52], "_static_dev": 30, "static_dev": 30, "_static_to_devic": 30, "static_to_devic": 30, "contaion": [30, 151], "_containerwithelementwis": [31, 52], "_static_ab": 31, "static_ab": 31, "_static_aco": 31, "static_aco": 31, "_static_acosh": 31, "static_acosh": 31, "_static_add": 31, "static_add": [31, 56], "_static_asin": 31, "static_asin": 31, "524": [31, 179, 543], "412": [31, 36, 179, 543], "201": [31, 32, 179, 331, 543], "_static_asinh": 31, "static_asinh": 31, "_static_atan": 31, "static_atan": 31, "_static_atan2": 31, "static_atan2": 31, "915": [31, 182, 543], "983": [31, 182, 543], "978": [31, 182, 543], "696": [31, 41, 182, 543, 649], "993": [31, 182, 543], "_static_atanh": 31, "static_atanh": 31, "_static_bitwise_and": 31, "static_bitwise_and": 31, "_static_bitwise_invert": 31, "static_bitwise_invert": 31, "_static_bitwise_left_shift": 31, "_static_bitwise_or": 31, "static_bitwise_or": 31, "_static_bitwise_right_shift": 31, "static_bitwise_right_shift": 31, "_static_bitwise_xor": 31, "static_bitwise_xor": 31, "_static_ceil": 31, "static_ceil": 31, "_static_co": 31, "static_co": 31, "_static_cosh": 31, "static_cosh": 31, "34": [31, 32, 33, 41, 122, 189, 192, 219, 240, 310, 322, 352, 442, 457, 458, 541, 543, 545, 547, 548, 554, 571, 588, 649, 650, 725], "_static_deg2rad": 31, "static_deg2rad": 31, "0262": [31, 193, 233, 543], "873": [31, 193, 233, 543], "_static_divid": 31, "static_divid": 31, "_static_equ": 31, "static_equ": 31, "_static_erf": 31, "static_erf": 31, "27632612": [31, 196], "934008": [31, 196], "99999928": [31, 196], "91903949": [31, 196], "_static_exp": 31, "static_exp": 31, "59814835": [31, 197, 543], "4131622": [31, 197], "_static_expm1": 31, "thefunct": [31, 196], "areal": 31, "static_expm1": 31, "71828175": [31, 197, 543], "38905621": [31, 197, 543], "59815216": 31, "_static_floor": 31, "static_floor": 31, "_static_floor_divid": 31, "static_floor_divid": 31, "_static_great": 31, "static_great": 31, "_static_greater_equ": 31, "static_greater_equ": 31, "_static_isfinit": 31, "999999999999": [31, 208, 543], "static_isfinit": 31, "_static_isinf": 31, "static_isinf": 31, "_static_isnan": 31, "static_isnan": 31, "_static_isr": 31, "0j": [31, 32, 97, 98, 175, 176, 177, 180, 183, 192, 197, 199, 211, 215, 217, 234, 238, 240, 241, 245, 277, 307, 540, 543, 548, 594], "23j": [31, 32], "9j": [31, 32], "static_isr": 31, "_static_lcm": 31, "1080": [31, 212], "1550": [31, 212], "130": [31, 212], "_static_less": 31, "static_less": 31, "_static_less_equ": 31, "static_less_equ": 31, "_static_log": 31, "static_log": 31, "_static_log10": 31, "static_log10": 31, "898": [31, 216, 543], "0414": [31, 216, 543], "_static_log1p": 31, "static_log1p": 31, "_static_log2": 31, "_static_logaddexp": 31, "static_logaddexp": 31, "_static_logical_and": 31, "static_logical_and": 31, "_static_logical_not": 31, "static_logical_not": 31, "_static_logical_or": 31, "static_logical_or": 31, "_static_logical_xor": 31, "static_logical_xor": 31, "_static_maximum": 31, "static_maximum": 31, "_static_minimum": 31, "static_minimum": 31, "_static_multipli": 31, "static_multipli": 31, "_static_neg": 31, "static_neg": 31, "_static_not_equ": 31, "static_not_equ": 31, "_static_posit": 31, "static_posit": 31, "_static_pow": 31, "static_pow": 31, "_static_rad2deg": 31, "static_rad2deg": 31, "5160": 31, "10300": [31, 233, 543], "15500": 31, "20600": 31, "2860": [31, 233], "_static_reciproc": 31, "recirpoc": [31, 235], "static_reciproc": 31, "_static_remaind": 31, "static_remaind": 31, "_static_round": 31, "thevfunct": 31, "300": [31, 33, 36, 237, 310, 333, 334, 465, 489, 543, 545, 548, 584, 737], "527": [31, 237, 543], "static_round": 31, "301": [31, 237, 543], "_static_sign": 31, "static_sign": 31, "_static_sin": 31, "static_sin": 31, "757": [31, 239, 543], "959": [31, 199, 239, 543], "279": [31, 239, 310, 331, 341, 452, 543, 545], "_static_sinh": 31, "static_sinh": 31, "835": [31, 240], "347": [31, 240], "721": [31, 240], "_static_sqrt": 31, "static_sqrt": 31, "_static_squar": 31, "static_squar": 31, "_static_subtract": 31, "static_subtract": 31, "_static_tan": 31, "static_tan": 31, "_static_tanh": 31, "static_tanh": 31, "995": [31, 245, 543], "9999": 31, "_static_trapz": 31, "static_trapz": 31, "_static_trunc": 31, "static_trunc": 31, "_static_trunc_divid": 31, "75j": [31, 178, 207], "01317055": [31, 178], "05634501": [31, 178], "115": [31, 178, 233, 543], "3461759": [31, 178], "524111": [31, 178], "644": [31, 179, 543, 746], "305": [31, 36, 179, 543], "351": [31, 193, 233], "00613": [31, 193], "0154": [31, 193], "403": [31, 197], "428772": [31, 197], "649": [31, 199], "220": [31, 199], "865": [31, 199], "metho": [31, 206, 218], "7j": [31, 32, 211, 234, 277, 307, 543], "956": [31, 217], "08746284": [31, 220], "32192809": [31, 220], "nuner": [31, 227], "65": [31, 34, 41, 188, 227, 472, 526, 543, 545, 546, 548, 558, 591, 649, 650, 668, 723], "000": [31, 228, 712, 723], "413": [31, 233], "took": [31, 234], "335": [31, 32, 234, 277], "345j": [31, 32, 234, 277], "static_angl": 31, "static_exp2": 31, "static_fmin": 31, "static_gcd": 31, "static_imag": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_r": 31, "_containerwithactivationexperiment": [32, 52], "_static_elu": 32, "static_elu": 32, "_static_silu": 32, "static_silu": 32, "27777028": [32, 256], "23947507": [32, 256], "0900332": [32, 256], "contan": [32, 250], "19722462": [32, 250], "84729779": [32, 250], "31326163": [32, 251], "46328258": [32, 251], "51301527": [32, 251], "79813886": [32, 251], "22856998": [32, 254], "42028043": [32, 254], "31868932": [32, 254], "static_logit": 32, "static_logsigmoid": 32, "34115386": 32, "64439666": 32, "24115384": 32, "55435526": 32, "07888974": 32, "00741899": 32, "26328245": 32, "00012302": 32, "static_prelu": 32, "static_relu6": 32, "static_selu": 32, "static_thresholded_relu": 32, "_containerwithconversionexperiment": [32, 52], "_containerwithcreationexperiment": [32, 52], "_static_trilu": 32, "blackman": [32, 258, 304], "00770143e": [32, 258], "49229857e": [32, 258], "hamming_window": [32, 304], "coeffici": [32, 260, 304, 548, 595], "ham": [32, 260, 304], "2000": [32, 260, 304, 704], "4180": [32, 260], "8180": [32, 260], "hann_window": [32, 304], "hann": [32, 261, 304], "7500": [32, 261], "3455": [32, 261], "9045": [32, 261], "kaiser_bessel_derived_window": [32, 304], "suitabl": [32, 263, 264, 304, 557, 664, 715, 716, 722, 738, 757], "spectral": [32, 263, 264, 304], "analysi": [32, 263, 264, 304, 757, 758], "design": [32, 201, 258, 263, 264, 304, 543, 704, 706, 707, 717, 721, 723, 724, 734, 735, 736, 740, 742, 744, 750, 753, 755, 757, 760, 761, 762], "kaiser": [32, 258, 263, 264, 304], "70710677": [32, 263, 419, 420], "18493208": [32, 263, 304], "9827513": [32, 263, 304], "kaiser_window": [32, 304], "static_kaiser_window": [32, 264], "2049": [32, 264], "8712": [32, 264], "0367": [32, 264, 304], "7753": [32, 264], "static_blackman_window": 32, "window_length": [32, 258, 260, 263, 264, 274, 304], "static_eye_lik": 32, "static_hamming_window": 32, "static_hann_window": 32, "static_hann": 32, "static_kaiser_bessel_derived_window": 32, "static_mel_weight_matrix": 32, "static_tril_indic": 32, "static_unsorted_segment_min": 32, "static_unsorted_segment_sum": 32, "static_vorbis_window": 32, "vorbis_window": [32, 304], "vorbi": [32, 274, 304], "38268343": [32, 274], "92387953": [32, 274], "14943586": [32, 274, 304], "51644717": [32, 274], "85631905": [32, 274], "98877142": [32, 274], "tril_indic": [32, 304], "_containerwithdata_typeexperiment": [32, 52], "_containerwithdeviceexperiment": [32, 52], "_containerwithelementwiseexperiment": [32, 52], "0003": [32, 275, 548, 584], "0006": [32, 275, 299], "2345j": [32, 277], "5772": [32, 281], "9635": [32, 281], "4228": [32, 281], "9228": [32, 281], "mantissa": [32, 285, 307], "frist": [32, 286, 307], "coord": [32, 286], "6055": [32, 287], "160": [32, 289], "10240": [32, 289], "60000038": [32, 290, 307], "0707": [32, 296, 307], "0579": [32, 296, 307], "static_allclos": 32, "static_binar": 32, "static_conj": 32, "static_copysign": 32, "static_count_nonzero": 32, "static_diff": 32, "static_digamma": 32, "57721537": 32, "96351004": 32, "static_fix": 32, "static_float_pow": 32, "static_fmax": 32, "static_fmod": 32, "static_frexp": 32, "static_gradi": 32, "static_hypot": 32, "static_isclos": 32, "static_ldexp": 32, "static_lerp": 32, "90000057": [32, 290, 307], "80000019": [32, 290, 307], "70000076": [32, 290, 307], "55000019": [32, 290, 307], "05000019": [32, 290, 307], "static_modf": 32, "static_nansum": 32, "static_nextaft": 32, "static_signbit": 32, "static_sinc": 32, "636": 32, "090": 32, "070": 32, "057": 32, "static_sparsify_tensor": 32, "static_xlogi": 32, "static_zeta": 32, "0244": [32, 299], "_containerwithgeneralexperiment": [32, 52], "_static_reduc": 32, "static_reduc": 32, "_containerwithgradientsexperiment": [32, 52], "_containerwithimageexperiment": [32, 52], "_containerwithlayersexperiment": [32, 52], "_static_fft": 32, "static_fft": 32, "673": [32, 331], "0507": [32, 331], "79711437": [32, 310, 331, 341], "94867325": [32, 310, 331, 341], "74089146": [32, 310, 331, 341], "25980937": [32, 310, 331, 341], "64958102": [32, 310, 331, 341], "2442648": [32, 310, 331, 341], "247306": [32, 343], "908323j": [32, 343], "494955": [32, 343], "90395j": [32, 343], "static_adaptive_avg_pool1d": 32, "static_adaptive_avg_pool2d": 32, "static_adaptive_max_pool2d": 32, "static_avg_pool1d": 32, "static_avg_pool2d": 32, "static_avg_pool3d": 32, "static_dct": 32, "132": 32, "182": 32, "242": 32, "253": [32, 240, 543], "515": [32, 554, 649], "467": 32, "static_dft": 32, "static_embed": 32, "static_idct": 32, "93732834": [32, 310, 331], "75048852": [32, 310, 331], "29723358": [32, 310, 341], "6950531": 32, "93914509": 32, "88008738": 32, "18951225": 32, "06697273": [32, 310, 341], "57439804": 32, "68861485": [32, 310, 341], "41308832": [32, 310, 341], "0700836": 32, "2449036": 32, "285": 32, "6711426": 32, "514": 32, "501709": 32, "4924011": 32, "static_ifft": 32, "static_ifftn": 32, "static_interpol": 32, "static_max_pool1d": 32, "static_max_pool2d": 32, "max_pool2dd": 32, "static_max_pool3d": 32, "static_rfftn": 32, "_containerwithlinearalgebraexperiment": [32, 52], "933034": [32, 311, 355], "eigenvealu": [32, 358, 580], "xx": [32, 358, 360, 580], "37228107": [32, 358, 580], "3722816": [32, 358, 580], "8245648": [32, 358, 580], "41597357": [32, 358, 580], "56576747": [32, 358, 580], "9093767": [32, 358, 580], "56155": [32, 359], "82842": [32, 359], "450": [32, 363], "static_adjoint": 32, "static_cond": 32, "static_diagflat": 32, "static_dot": 32, "static_eig": 32, "static_eigh_tridiagon": 32, "static_eigv": 32, "static_initialize_tuck": 32, "static_kron": 32, "kroneck": [32, 311, 362, 363], "static_make_svd_non_neg": 32, "static_matrix_exp": 32, "static_mode_dot": 32, "static_multi_dot": 32, "regular": [32, 311, 322, 368, 439, 548, 585, 715, 735, 757], "static_multi_mode_dot": 32, "static_partial_tuck": 32, "static_svd_flip": 32, "static_truncated_svd": 32, "static_tuck": 32, "_containerwithlossesexperiment": [32, 52], "_static_huber_loss": 32, "static_huber_loss": 32, "0575": [32, 374], "_static_l1_loss": 32, "static_l1_loss": 32, "_static_smooth_l1_loss": 32, "static_smooth_l1_loss": 32, "_static_soft_margin_loss": 32, "_containerwithmanipulationexperiment": [32, 52], "_static_fill_diagon": 32, "_static_unique_consecut": 32, "atleast": [32, 313, 381, 382, 383, 725], "ary1": [32, 313, 381, 382, 383], "ary2": [32, 313, 381, 382, 383], "broadcast_shap": [32, 55, 313], "static_concat_from_sequ": [32, 386], "30192195": [32, 398], "static_as_strid": 32, "static_atleast_1d": 32, "static_atleast_2d": 32, "static_atleast_3d": 32, "static_broadcast_shap": 32, "static_dsplit": 32, "static_dstack": 32, "static_expand": 32, "static_flatten": 32, "static_fliplr": 32, "static_flipud": 32, "static_fold": 32, "static_heavisid": 32, "static_hsplit": 32, "static_hstack": 32, "static_i0": 32, "static_matric": 32, "static_moveaxi": 32, "static_pad": 32, "static_partial_fold": 32, "static_partial_tensor_to_vec": 32, "static_partial_unfold": 32, "static_partial_vec_to_tensor": 32, "static_rot90": 32, "static_soft_threshold": 32, "static_take_along_axi": 32, "static_top_k": 32, "static_unfold": 32, "static_vsplit": 32, "static_vstack": 32, "_containerwithnormsexperiment": [32, 52], "16903085": [32, 419, 420], "50709254": [32, 419, 420], "84515423": [32, 419, 420], "44183609": [32, 419, 420], "56807494": [32, 419, 420], "69431382": [32, 419, 420], "static_batch_norm": 32, "static_group_norm": 32, "static_instance_norm": 32, "static_l1_norm": 32, "static_l2_norm": 32, "static_lp_norm": 32, "12500000": 32, "37500000": 32, "62500000": 32, "27500000": 32, "35000000": 32, "42500000": 32, "0000000": 32, "5000000": 32, "2500000": 32, "_containerwithrandomexperiment": [32, 52], "43643127": [32, 423], "32325703": [32, 423], "24031169": [32, 423], "34251311": [32, 423], "31692529": [32, 423], "3405616": [32, 423], "5319725": [32, 423], "22458365": [32, 423], "24344385": [32, 423], "26588406": [32, 423], "61075421": [32, 423], "12336174": [32, 423], "51142915": [32, 423], "25041268": [32, 423], "23815817": [32, 423], "64042903": [32, 423], "25763214": [32, 423], "10193883": [32, 423], "31624692": [32, 423], "46567987": [32, 423], "21807321": [32, 423], "37677699": [32, 423], "39914594": [32, 423], "22407707": [32, 423], "static_bernoulli": 32, "static_beta": 32, "static_dirichlet": 32, "static_gamma": 32, "static_poisson": 32, "_containerwithsearchingexperiment": [32, 52], "static_unravel_index": 32, "_containerwithsetexperiment": [32, 52], "_containerwithsortingexperiment": [32, 52], "invert_permut": [32, 320], "static_invert_permut": 32, "static_lexsort": [32, 44], "_containerwithstatisticalexperiment": [32, 52], "_static_cummax": 32, "static_cummax": 32, "_static_cummin": 32, "todo": [32, 437, 714, 724, 735], "static_cummin": 32, "func_nam": [32, 438, 714, 726, 727, 731, 735], "static_bincount": 32, "static_corrcoef": 32, "static_cov": [32, 322, 435], "static_histogram": 32, "static_igamma": 32, "static_median": 32, "static_nanmean": 32, "static_nanmedian": 32, "static_nanprod": 32, "static_quantil": 32, "_containerwithutilityexperiment": [32, 52], "static_optional_get_el": 32, "_containerwithgener": [33, 52], "_static_all_equ": 33, "static_all_equ": 33, "_static_array_equ": 33, "x0": [33, 449, 545, 726], "level": [33, 449, 684, 704, 708, 709, 714, 716, 722, 724, 728, 731, 733, 734, 735, 739, 740, 741, 742, 745, 746, 747, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764], "a0": [33, 449], "static_array_equ": 33, "_static_assert_supports_inplac": 33, "_static_clip_matrix_norm": 33, "static_clip_matrix_norm": 33, "849": [33, 452, 453, 545], "_static_clip_vector_norm": 33, "static_clip_vector_norm": 33, "_static_einops_rearrang": 33, "static_einops_rearrang": 33, "_static_einops_reduc": 33, "static_einops_reduc": 33, "29333329": [33, 458, 545], "53000069": [33, 458, 545], "39666676": [33, 458, 545], "20666695": [33, 458, 545], "_static_einops_repeat": 33, "static_einops_repeat": 33, "_static_fourier_encod": 33, "static_fourier_encod": 33, "classivi": [33, 550, 556, 617, 659], "89858720e": 33, "79717439e": 33, "_static_gath": 33, "static_gath": 33, "_static_gather_nd": 33, "200": [33, 36, 188, 310, 333, 334, 465, 489, 543, 545, 698, 745], "400": [33, 36, 310, 333, 334, 465, 489, 545, 548, 584], "static_gather_nd": 33, "_static_get_num_dim": 33, "static_get_num_dim": 33, "_static_has_nan": 33, "leafwis": 33, "static_has_nan": 33, "_static_inplace_decr": 33, "_static_inplace_incr": 33, "_static_inplace_upd": 33, "_static_is_arrai": 33, "static_is_arrai": 33, "_static_is_ivy_arrai": 33, "static_is_ivy_arrai": 33, "_static_is_native_arrai": 33, "static_is_native_arrai": 33, "_static_scatter_flat": 33, "ref": [33, 37, 213, 227, 230, 236, 243, 543, 550, 619, 715, 734], "_static_scatter_nd": 33, "static_scatter_nd": 33, "_static_stable_divid": 33, "22222222": 33, "11111111": 33, "857": [33, 503, 545], "444": 33, "_static_stable_pow": 33, "00012": [33, 504, 545], "00016": [33, 34, 504, 532, 545, 546], "00001": [33, 504, 545], "00032": [33, 504], "00256": [33, 504], "1679638": [33, 504], "395": [33, 504], "16777383": [33, 504], "77": [33, 189, 504, 543, 548, 558, 591, 668], "_static_supports_inplace_upd": 33, "_static_to_list": 33, "static_to_list": 33, "_static_to_numpi": 33, "static_to_numpi": 33, "_static_to_scalar": 33, "static_to_scalar": 33, "_static_value_is_nan": 33, "452": 33, "static_value_is_nan": 33, "833": [33, 453], "600": [33, 36, 310, 333, 334, 465, 723], "items": [33, 51, 545], "static_isin": 33, "static_items": 33, "complex128": [33, 112, 113, 126, 135, 141, 255, 302, 483, 541, 545, 548, 581, 582, 587, 603, 712, 724], "static_strid": 33, "425": [33, 524], "_containerwithgradi": [34, 52], "_static_stop_gradi": 34, "static_stop_gradi": 34, "87": [34, 36, 188, 217, 322, 352, 436, 526, 543, 546], "976": [34, 245, 526, 543, 546], "49e": [34, 526, 546], "74e": [34, 526, 546], "95e": [34, 526, 546], "024": [34, 526, 546], "096": [34, 526, 546], "216": [34, 37, 526, 546, 601], "384": [34, 526, 546], "626": [34, 526, 546], "en": [34, 526, 527, 546, 723], "wikipedia": [34, 526, 527, 546], "wiki": [34, 526, 527, 546], "stochastic_gradient_desc": [34, 526, 527, 546], "01099": [34, 527], "01003": [34, 527, 546], "01015": [34, 527, 546], "99936122": [34, 527, 546], "99936116": [34, 527, 546], "99936128": [34, 527, 546], "99936104": [34, 527, 546], "w_new": [34, 530, 546], "88": [34, 41, 61, 189, 322, 436, 530, 537, 543, 546, 548, 554, 558, 591, 650, 668], "708": [34, 532, 546], "445": [34, 532, 546], "6e": [34, 532, 546], "00036": [34, 532, 546], "00049": [34, 532, 546], "layerwis": [34, 533, 546], "_containerwithimag": [35, 52], "_containerwithlay": [36, 52], "_static_conv1d": 36, "static_conv1d": 36, "_static_conv1d_transpos": 36, "static_conv1d_transpos": 36, "112": [36, 548, 558, 562, 591, 668], "_static_conv2d": 36, "ey": [36, 540, 547, 563, 569, 740, 747], "static_conv2d": 36, "_static_conv2d_transpos": 36, "static_conv2d_transpos": 36, "_static_conv3d": 36, "fdfh": [36, 565], "static_conv3d": 36, "_static_conv3d_transpos": 36, "static_conv3d_transpos": 36, "_static_depthwise_conv2d": 36, "inp": [36, 547, 569], "static_depthwise_conv2d": 36, "_static_dropout": 36, "static_dropout": 36, "_static_dropout1d": 36, "static_dropout1d": 36, "_static_dropout2d": 36, "_static_dropout3d": 36, "_static_linear": 36, "278": [36, 547, 570, 571], "static_linear": 36, "352": [36, 547, 571, 728], "195": 36, "_static_lstm_upd": 36, "_static_multi_head_attent": 36, "_static_reduce_window": 36, "_static_scaled_dot_product_attent": 36, "static_scaled_dot_product_attent": 36, "39999962": [36, 547, 570, 571], "19999695": [36, 571], "11600018": [36, 571], "88399887": [36, 571], "196": [36, 547, 571], "306": [36, 547, 571], "19999981": [36, 547, 570, 574], "59249449": [36, 547, 574], "68226194": [36, 547, 574], "4000001": [36, 547, 570, 574], "19603825": [36, 547, 574], "9960382": [36, 547, 574], "26894283": [36, 547, 574], "40236187": [36, 547, 574], "39999437": [36, 547, 574], "59999037": [36, 547, 574], "35046196": [36, 547, 574], "54282808": [36, 547, 574], "39989519": [36, 547, 574], "5998764": [36, 547, 574], "_containerwithlinearalgebra": [37, 52], "_static_choleski": 37, "static_choleski": 37, "577": [37, 548, 575], "707": [37, 548, 575], "static_rol": [37, 39], "_static_cross": 37, "static_cross": 37, "_static_det": 37, "_static_diag": 37, "_static_diagon": 37, "static_diagon": 37, "_static_eigh": 37, "_static_eigvalsh": 37, "static_eigvalsh": 37, "51572949": [37, 548, 582], "17091519": [37, 548, 582], "3448143": [37, 548, 582], "88178420e": [37, 548, 582], "35898387e": [37, 548, 582], "46410179e": [37, 548, 582], "_static_inn": 37, "static_inn": 37, "_static_inv": 37, "static_inv": 37, "_static_matmul": 37, "matul": 37, "static_matmul": 37, "_static_matrix_norm": 37, "deimens": 37, "static_matrix_norm": 37, "_static_matrix_pow": 37, "_static_matrix_rank": 37, "static_matrix_rank": 37, "_static_matrix_transpos": 37, "static_matrix_transpos": 37, "_static_out": 37, "n1": [37, 94, 540], "n2": [37, 94, 540], "static_out": [37, 591], "_static_pinv": 37, "static_pinv": 37, "0426": 37, "0964": 37, "0605": 37, "1368": 37, "_static_qr": 37, "_static_slogdet": 37, "static_slogdet": 37, "6931472": 37, "0986123": 37, "_static_solv": 37, "_static_svd": 37, "static_svd": 37, "au": 37, "aS": 37, "avh": 37, "bu": [37, 707], "bvh": 37, "_static_svdv": 37, "_static_tensordot": 37, "_static_tensorsolv": 37, "_static_trac": 37, "static_trac": 37, "_static_vand": 37, "static_vand": 37, "343": [37, 237, 543, 601], "512": [37, 547, 562, 601, 704], "729": [37, 601, 746], "_static_vecdot": 37, "_static_vector_norm": 37, "static_vector_norm": 37, "77359247": [37, 603], "_static_vector_to_skew_symmetric_matrix": 37, "09861231": [37, 548, 594], "3475602": [37, 596], "93765765": [37, 596], "58776021": [37, 596], "10416126": [37, 596], "80644298": [37, 596], "87024701": [37, 596], "48127627": [37, 596], "79101127": [37, 596], "98288572": [37, 596], "68917423": [37, 596], "_containerwithloss": [38, 52], "_static_binary_cross_entropi": 38, "static_binary_cross_entropi": 38, "511": [38, 549, 605, 607], "_static_cross_entropi": 38, "static_cross_entropi": 38, "20397282": 38, "83258148": 38, "60943794": [38, 548, 594], "_static_sparse_cross_entropi": 38, "static_sparse_cross_entropi": 38, "5108256": [38, 606], "609438": [38, 606], "_containerwithmanipul": [39, 52], "_static_clip": 39, "static_clip": 39, "_static_concat": 39, "_static_constant_pad": 39, "static_constant_pad": 39, "_static_expand_dim": 39, "static_expand_dim": 39, "container_axi": [39, 550, 611], "_static_flip": 39, "static_flip": 39, "_static_permute_dim": 39, "static_permute_dim": 39, "_static_repeat": 39, "static_repeat": 39, "_static_reshap": 39, "static_reshap": 39, "_static_rol": 39, "positivclip": 39, "_static_split": 39, "static_split": 39, "_static_squeez": 39, "static_squeez": 39, "_static_stack": 39, "leavv": 39, "static_stack": 39, "_static_swapax": 39, "_static_til": 39, "static_til": 39, "_static_unstack": 39, "static_unstack": 39, "_static_zero_pad": 39, "repreat": [39, 614], "_containerwithnorm": [40, 52], "34198591": [40, 553, 646], "04274819": [40, 553, 646], "29923761": [40, 553, 646], "24053511": [40, 553, 646], "62221265": [40, 646], "20277636": [40, 646], "41943574": [40, 646], "83710337": [40, 646], "_containerwithrandom": [41, 52], "_static_multinomi": 41, "_static_randint": 41, "static_randint": 41, "_static_random_norm": 41, "static_random_norm": 41, "651": 41, "_static_random_uniform": 41, "static_random_uniform": 41, "481": 41, "0999": 41, "_static_shuffl": 41, "static_shuffl": 41, "431": [41, 649], "274": [41, 649], "_containerwithsearch": [42, 52], "_static_argmax": 42, "static_argmax": 42, "_static_argmin": 42, "static_argmin": 42, "_static_argwher": 42, "static_argwher": 42, "_static_nonzero": 42, "_static_wher": 42, "static_wher": 42, "_containerwithset": [43, 52], "_static_unique_al": 43, "static_unique_al": 43, "_static_unique_count": 43, "static_unique_count": 43, "_static_unique_invers": 43, "static_unique_invers": 43, "_static_unique_valu": 43, "_containerwithsort": [44, 52], "_static_argsort": 44, "static_argsort": 44, "_static_searchsort": 44, "_static_sort": 44, "static_sort": 44, "static_msort": 44, "_containerwithstatist": [45, 52], "_static_cumprod": 45, "static_cumprod": 45, "_static_cumsum": 45, "static_cumsum": 45, "_static_prod": 45, "static_prod": 45, "11000001": [45, 672], "23100001": [45, 672], "30800003": [45, 558, 672], "_static_sum": 45, "_static_var": 45, "static_var": 45, "12666667": [45, 558, 675], "11555555": [45, 558, 675], "rtype": [45, 668, 698], "py": [45, 311, 371, 668, 695, 698, 704, 714, 715, 716, 718, 720, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 738, 742, 744, 746, 747], "respectv": [45, 673], "81649649": [45, 673], "94280904": [45, 673], "509902": [45, 558, 673], "2472192": [45, 673], "44948983": [45, 673], "41421354": [45, 673], "contian": [45, 675], "6666667": [45, 675], "_containerwithutil": [46, 52], "_static_al": 46, "static_al": 46, "_static_ani": 46, "static_ani": 46, "add_ivy_container_instance_method": 47, "containerexampl": 47, "factorized_tensor": [48, 49, 50], "factorizedtensor": [48, 49, 50], "matrix_or_tensor": 48, "to_tensor": [48, 49, 50], "to_unfold": [48, 49, 50], "to_vec": [48, 49, 50], "cp_tensor": 49, "cptensor": [49, 268, 304], "cp_copi": 49, "cp_flip_sign": 49, "s_i": 49, "receiv": [49, 448, 484, 545, 551, 624, 625, 626, 686, 716, 724, 725, 737, 740], "summar": [49, 737], "normalisation_weight": 49, "normalised_factor": 49, "cp_lstsq_grad": 49, "return_loss": 49, "third": [49, 313, 388, 412, 548, 556, 596, 658, 721, 734, 750, 756, 757, 763], "nabla": 49, "mathcal": 49, "mathbf": 49, "factor_matric": 49, "cp_gradient": 49, "quantiti": 49, "cp_mode_dot": 49, "keep_dim": [49, 50], "cp_multi_mode_dot": 49, "cp_n_param": 49, "tensor_shap": [49, 50], "n_param": [49, 50], "cp_norm": 49, "cp_to_tensor": 49, "fact": [49, 716, 718, 723, 735, 737, 742, 745], "khatria": 49, "rao": [49, 311, 362], "khatri": [49, 311, 362], "cp_normal": 49, "normalis": 49, "u_1": 49, "u_n": 49, "v_1": 49, "v_n": 49, "v_k": 49, "u_k": 49, "absorb": 49, "refold": [49, 313, 394, 405], "cp_to_unfold": 49, "ie": 49, "s_u_i": 49, "exploit": [49, 760], "khatri_rao": [49, 311], "cp_to_vec": 49, "ravel": [49, 740], "unfolding_dot_khatri_rao": 49, "mttkrp": 49, "validate_cp_rank": 49, "percent": 49, "validate_cp_tensor": 49, "tucker_tensor": 50, "tucker_copi": 50, "tucker_mode_dot": [50, 764], "tucker_n_param": 50, "tucker_norm": 50, "tucker_to_tensor": 50, "skip_factor": 50, "transpose_factor": 50, "tucker_to_unfold": 50, "tucker_to_vec": 50, "validate_tucker_rank": 50, "fixed_mod": 50, "validate_tucker_tensor": 50, "_bisection_root_find": 50, "fun": [50, 525, 545, 552, 638, 723], "max_it": 50, "__abs__": [51, 52], "__add__": [51, 52, 719, 722, 726, 727, 730, 735, 736, 744], "__eq__": [51, 52], "__ge__": [51, 52], "__gt__": [51, 52, 740], "__le__": [51, 52], "__lt__": [51, 52], "__ne__": [51, 52], "__pow__": [51, 52, 744], "69678056": 51, "59876156": 51, "82660675": 51, "__radd__": [51, 52, 726, 727, 735], "__rrshift__": [51, 52], "__rshift__": [51, 52], "__rsub__": [51, 52], "__sub__": [51, 52, 719, 722, 726, 730, 744], "__truediv__": [51, 52, 719, 722, 726], "__xor__": [51, 52], "referenc": [51, 728, 734], "hardwar": [51, 55, 707, 715, 740, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763], "resid": [51, 55, 550, 611, 735, 742, 746], "mt": [51, 744], "hopefulli": [51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 706, 707, 708, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749], "overview": [51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 721, 723, 737, 741, 749], "submodul": [51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 684, 685, 686, 688, 689, 690, 691, 714, 715, 716, 718, 721, 723, 725, 731, 732, 737, 741, 742, 746, 752], "question": [51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 682, 683, 685, 686, 688, 689, 690, 691, 704, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749, 750], "reach": [51, 52, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 639, 682, 683, 685, 686, 688, 689, 690, 691, 706, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 749, 756, 757], "eq": 52, "ge": 52, "gt": [52, 736, 742], "le": 52, "lt": 52, "ne": 52, "75979435": 52, "52153397": 52, "13532257": 52, "rshift": 52, "truediv": 52, "66666669": [52, 316, 420, 528, 546], "nested_arrai": [54, 55, 56, 721], "nestedarrai": 54, "nested_rank": [54, 55, 56], "inner_shap": [54, 55, 56], "nestedarraybas": [54, 55, 56], "classmethod": [54, 55], "from_row_length": 54, "row_length": 54, "from_row_split": 54, "row_split": 54, "ragged_map": 55, "ragged_multi_map": 55, "ragged_arrai": 55, "ragged_multi_map_in_funct": 55, "replace_ivy_arrai": 55, "unbind": 55, "nestedarrayelementwis": 56, "strictli": [61, 64, 67, 201, 537, 543, 730, 734], "behaviour": [61, 64, 228, 537, 543, 713, 716, 717, 718, 719, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 737, 738, 744], "24000001": [61, 537], "703": [62, 537], "683": [62, 537], "408": [62, 537], "313": [62, 537], "437": [62, 537], "40337825": [63, 537], "56114835": [63, 537], "20788449": [63, 537], "0768": [66, 537], "231": [66, 537], "\u03b2": [67, 537], "66666667": [68, 322, 435, 537], "body_fn": [72, 73, 75, 539], "bodi": [72, 75, 539, 718, 737], "lst": [72, 539], "orelse_fn": [73, 539], "lambda": [73, 75, 456, 528, 529, 531, 536, 539, 545, 546, 548, 552, 581, 634, 635, 639, 704, 714, 731, 732, 733, 736, 740, 742, 745], "body1": [74, 539], "body2": [74, 539], "repeatedli": [75, 539, 552, 636, 723, 737], "continu": [75, 241, 539, 543, 704, 707, 708, 713, 714, 715, 717, 718, 734, 737, 750, 757], "chosen": [76, 182, 540, 543, 555, 657, 714, 723, 735], "ml_framework": [76, 540], "distanc": [76, 540], "adjac": [76, 540], "nestedsequ": [77, 78, 540], "typevar": [77, 78, 540], "supportsbufferprotocol": [77, 78, 540], "static_copy_arrai": [84, 540], "intdtyp": [87, 98, 103, 115, 126, 131, 138, 144, 255, 302, 540, 541], "interchang": [88, 540, 550, 620], "plu": [89, 540], "x00b": [89, 540], "x00d": [89, 540], "x00e": [89, 540], "66666663": [92, 540], "41588834": [93, 540], "7827941": [93, 540], "6227766": [93, 540], "23413252": [93, 540], "n3": [94, 540], "similarli": [94, 101, 177, 270, 304, 540, 543, 720, 724, 735, 740, 744, 763], "xv": [94, 540], "yv": [94, 540], "x_nativ": [95, 540, 734], "y_nativ": [95, 540], "z_nativ": [95, 540], "d_type": [97, 540], "col": [101, 270, 304, 540], "primari": [101, 120, 121, 153, 154, 270, 304, 320, 428, 462, 463, 540, 541, 542, 545, 714, 717, 720, 724, 732, 734, 735, 737, 740, 750, 752], "purpos": [101, 199, 217, 270, 304, 540, 543, 548, 594, 716, 717, 719, 722, 723, 725, 726, 728, 730, 731, 732, 735, 737, 740, 741, 744, 752, 756, 758, 761, 762, 763], "upward": [101, 270, 304, 540], "downward": [101, 270, 304, 540], "2xn": [101, 270, 304, 540], "subarrai": [101, 270, 304, 540], "incompat": [108, 541], "uint8": [109, 116, 120, 131, 134, 139, 145, 255, 302, 541, 724, 737], "closest": [111, 190, 200, 201, 237, 247, 313, 406, 541, 543, 737, 740], "xtype": [111, 541], "ytype": [111, 541], "native_uint16": [111, 541], "complexdtyp": [112, 126, 135, 541], "set_default_complex_dtyp": [112, 141, 541], "4294": [112, 114, 541], "967346": [112, 114, 541], "set_default_dtyp": [113, 142, 541, 724, 731], "floatdtyp": [114, 137, 541], "set_default_float_dtyp": [114, 123, 135, 143, 541, 724], "int_dtyp": [115, 138, 541], "set_default_int_dtyp": [115, 123, 144, 541, 724], "4294967346": [115, 116, 541], "uint_dtyp": [116, 139, 541], "uint": [116, 131, 139, 145, 541, 724, 736], "uintdtyp": [116, 131, 139, 145, 541], "set_default_uint_dtyp": [116, 123, 145, 541], "native_bool": [118, 541], "followng": [119, 541], "ieee": [119, 177, 194, 199, 217, 227, 236, 241, 244, 538, 541, 543, 707], "754": [119, 177, 194, 199, 217, 227, 236, 241, 244, 538, 541, 543, 707], "smallest_norm": [119, 541], "bfloat16": [120, 541, 724, 735, 737, 738], "unsupport": [121, 154, 463, 541, 542, 545, 715, 735], "encapsul": [122, 541, 723], "314": [122, 234, 277, 307, 541, 543], "9223372036854775808": [122, 541], "9223372036854775807": [122, 541], "65535": [122, 541], "4294967295": [122, 541], "un": [124, 541, 724, 742], "native_uint8": [124, 541], "hashabl": [128, 541], "type1": [132, 541], "type2": [132, 541], "array_api_promot": [132, 133, 541], "unexpect": [133, 201, 541, 543, 724], "default_complex_dtyp": [135, 541], "default_dtype_stack": [136, 142, 541], "unset_default_dtyp": [136, 541], "native_uint64": [136, 541], "default_float_dtyp": [137, 541, 724], "default_int_dtyp": [138, 144, 541, 724], "default_uint_dtyp": [139, 145, 541], "ret1": [140, 541], "ret2": [140, 541], "reset": [141, 142, 143, 144, 145, 171, 172, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 541, 542, 545, 725], "default_complex_dtype_stack": [141, 541], "default_float_dtype_stack": [143, 541], "native_float16": [146, 541], "unmodifi": [148, 542, 720, 724], "tpu": [148, 154, 165, 170, 542, 725, 757, 760], "clear": [149, 542, 704, 706, 707, 708, 714, 716, 720, 724, 725, 726, 735, 740, 742, 744, 757], "cach": [149, 451, 542, 545, 695, 729, 731, 734, 737], "gpu": [150, 152, 153, 156, 159, 161, 163, 165, 166, 169, 171, 173, 542, 704, 715, 716, 723, 725, 744, 751, 755, 757, 760, 761, 762], "aliv": [155, 160, 162, 466, 486, 487, 542, 545, 725], "139740789224448": [155, 542], "physic": [158, 542], "default_devic": [160, 163, 164, 165, 171, 172, 542, 725, 728], "process_specif": [161, 173, 542], "percentag": [161, 542], "ram": [161, 169, 173, 542], "alon": [161, 173, 542, 704, 710, 729, 737], "036902561555": [161, 542], "7024003467681645": [161, 542], "as_native_dev": [161, 542], "7095597456708771": [161, 542], "attr_onli": [162, 542], "soft_device_mod": [164, 172, 542], "chunk": [165, 166, 167, 542], "codebas": [165, 166, 542, 708, 709, 717, 724, 729, 734, 735, 737, 738, 741], "split_factor": [165, 542, 728], "max_chunk_s": [167, 542], "chunk_siz": [167, 542], "input_ax": [167, 542], "output_ax": [167, 542], "usag": [167, 542, 707, 724, 731, 734, 737, 742, 750, 760], "fed": [167, 542, 746], "fist": [167, 542], "gb": [169, 173, 542, 715], "66700032": [169, 542], "589934592": [169, 542], "set_default_devic": [171, 542, 725], "set_soft_device_mod": [172, 542, 725], "219563008": [173, 542], "902400346": [173, 542], "525205504": [173, 542], "na": [174, 543, 737], "princip": [175, 179, 181, 296, 307, 543], "domain": [175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 215, 216, 218, 239, 240, 241, 244, 245, 296, 307, 543, 727, 755, 757], "codomain": [175, 176, 179, 180, 181, 182, 191, 192, 197, 199, 215, 216, 218, 239, 240, 241, 244, 245, 296, 307, 543, 727], "\u03c0": [175, 179, 181, 182, 538, 543], "3\u03c0": [175, 182, 543], "unspecifi": [175, 176, 180, 183, 192, 197, 199, 201, 232, 236, 240, 241, 245, 311, 358, 543, 548, 550, 580, 581, 619, 734], "\u03c0j": [176, 180, 183, 215, 217, 543], "3\u03c0j": [176, 215, 217, 543], "x1_i": [177, 182, 184, 186, 187, 188, 189, 194, 195, 201, 205, 206, 213, 214, 219, 221, 223, 224, 227, 230, 232, 236, 243, 543, 718], "neither": [177, 194, 201, 227, 543, 548, 598, 723, 735, 740], "nor": [177, 194, 201, 227, 543, 723, 735, 761], "2019": [177, 194, 199, 217, 227, 543, 757, 760], "too": [177, 194, 201, 227, 543, 685, 714, 715, 716, 718, 724, 728, 738, 750], "overflow": [177, 194, 201, 543, 548, 558, 594, 674, 713, 724], "commut": [177, 543], "tabl": [177, 194, 227, 497, 519, 543, 545, 686, 724, 735, 739, 757], "dj": [177, 194, 227, 543], "bj": [177, 194, 227, 277, 307, 543], "invlov": [177, 543], "z1": [177, 543], "z2": [177, 543], "yj": [178, 543], "nanj": [180, 543], "809": [180, 543], "199": [180, 543], "569": [180, 543], "733": [180, 543], "notat": [182, 543, 558, 668, 723], "denot": [182, 543, 688], "quadrant": [182, 543], "rai": [182, 543, 707], "bitwis": [184, 187, 189, 224, 543], "170": [188, 543], "243": [188, 543], "225": [188, 543], "xor": [189, 224, 543], "654": [191, 543], "ci": [192, 197, 199, 240, 543, 718, 724, 729, 736, 737, 750], "368": [192, 543], "670": [192, 543], "202": [192, 543, 718], "548": [192, 543], "1490": [192, 543], "57079633": [193, 543], "14159265": [193, 543], "71238898": [193, 543], "28318531": [193, 543], "02617994": [193, 543], "87266463": [193, 543], "01919862": [193, 543], "03839725": [193, 543], "05759586": [193, 543], "07679449": [193, 543], "09599311": [193, 543], "11519173": [193, 543], "35081118": [193, 543], "88139129": [193, 543], "underflow": [194, 201, 543, 548, 594, 724], "textbook": [194, 227, 543], "frac": [194, 216, 218, 238, 240, 244, 310, 316, 337, 338, 342, 343, 415, 417, 543], "ac": [194, 227, 543, 698], "bd": [194, 227, 543], "bc": [194, 227, 543, 698], "versu": [194, 227, 232, 543], "riemann": [194, 227, 543], "sphere": [194, 227, 543], "c99": [194, 227, 543], "infinit": [194, 227, 241, 543], "usual": [194, 227, 543, 698, 715, 718, 724, 735, 737, 740], "interest": [194, 227, 543, 714, 716], "unlik": [194, 227, 543, 707, 718, 723, 726, 762, 764], "698": [194, 543], "cut": [197, 199, 239, 240, 241, 244, 543, 706, 763], "08553692": [197, 543], "567": [197, 543], "00344786": [197, 543], "76297021": [197, 543], "197948": [197, 543], "53253174": [197, 543], "accur": [199, 217, 543, 548, 594, 732], "fdlibm": [199, 217, 543], "compliant": [199, 217, 222, 223, 543, 558, 669, 670, 671, 673], "potenti": [199, 217, 543, 704, 714, 715, 723, 724, 735, 741, 760], "632": [199, 543], "20e": [199, 543], "72e": [199, 543], "greatest": [200, 201, 204, 543], "introduc": [201, 543, 550, 556, 616, 658, 706, 722, 723, 724, 732, 736, 737, 740, 745], "via": [201, 311, 370, 373, 543, 552, 637, 638, 716, 718, 722, 724, 725, 734, 738, 740, 742, 744, 745, 749, 757], "pep": [201, 543, 730], "238": [201, 543], "goal": [201, 543, 704, 707, 714, 757, 763], "disambigu": [201, 543, 733], "former": [201, 543, 724, 727, 735], "latter": [201, 543, 718, 720, 724, 727, 735], "overload": [201, 543, 737], "led": [201, 543, 718, 759], "subtl": [201, 543, 724, 763], "ambigu": [201, 543], "semant": [201, 236, 543, 706, 742, 747, 758], "ill": [201, 543], "diverg": [201, 543], "prefer": [201, 543, 704, 715, 722, 728, 732, 735, 751, 757], "surpris": [201, 543, 750], "arrau": [207, 543], "log_": [216, 218, 543], "742": [217, 543], "hanl": [218, 543], "NOT": [222, 543, 698, 714], "particular": [222, 543, 715, 716, 718, 720, 723, 724, 726, 732, 734, 735, 737, 738, 753, 757, 763], "negat": [229, 277, 307, 543], "omplex": [230, 543], "carefulli": [232, 543, 685, 735, 755, 760], "52095687": [232, 543], "92457771": [232, 543], "49372482": [232, 543], "22738838": [232, 543], "156": [232, 543], "5877228": [232, 543], "189": [233, 543], "252": [233, 543], "315": [233, 543], "378": [233, 543], "1150": [233, 543], "2890": [233, 543], "172": [233, 543], "229": [233, 543], "487": [233, 543, 547, 571], "344": [233, 543], "355j": [234, 277, 307, 543], "55j": [234, 277, 307, 543], "That": [236, 312, 376, 543, 698, 715, 716, 719, 737, 744, 745, 746, 758], "primarili": [236, 543, 714, 722, 757], "reason": [236, 245, 543, 707, 714, 716, 718, 719, 722, 723, 724, 726, 731, 734, 735, 737, 738, 740, 742, 744, 763], "counterpart": [237, 543, 722, 732], "deliber": [237, 543, 740], "imprecis": [237, 543], "5654": [237, 543], "034": [237, 543], "433": [237, 529, 531, 543, 546], "known": [238, 543, 685, 718, 723, 724, 735, 737], "signum": [238, 543], "x_": [238, 543], "operatornam": [238, 240, 543, 548, 581], "textrm": [238, 543], "932": [239, 543], "746": [239, 543], "443": [239, 543], "657": [239, 453, 543, 545], "indistinguish": [241, 543], "convent": [241, 543, 548, 558, 586, 668, 706, 716, 720, 730, 738, 749, 763], "infti": [241, 543], "32455532": [241, 543], "89897949": [241, 543], "169": [241, 543], "analyt": [244, 543, 757, 759, 763], "math": [244, 543, 734, 735, 736, 747, 755], "pole": [244, 543], "546": [244, 543, 547, 571], "916": [244, 543, 549, 605], "996": [244, 543], "histor": [245, 543], "stem": [245, 543, 734], "older": [245, 543], "patch": [245, 543, 724, 757], "advis": [245, 543, 735], "462": [245, 543], "604": [245, 543], "984": [245, 543], "997": [245, 543], "0375": [247, 543], "032": [247, 543], "57258511": [249, 302], "69999999": [249, 302, 536, 546], "90928203": [249, 302], "98772264": [249, 302], "99591321": [249, 302], "99863964": [249, 302], "69880581": [249, 302], "18126924": [249, 302], "20141329": [251, 302], "40318608": [251, 302], "48683619": [251, 302], "46328247": [251, 302], "59813893": [251, 302], "43748799": [251, 302], "parametr": [252, 302, 718, 737, 757], "6705687": [254, 302], "52016652": [254, 302], "40560818": [254, 302], "45630932": [254, 302], "doubl": [255, 302], "2689": [256, 302], "7310": [256, 302], "7615": [256, 302], "2784": [256, 302], "7168": [256, 302], "8708": [256, 302], "4374": [256, 302], "1379": [256, 302], "0089": [256, 302], "taper": [258, 261, 304], "summat": [258, 304, 558, 668, 698], "leakag": [258, 304], "slightli": [258, 304, 710, 722, 735, 737, 742, 746], "wors": [258, 304, 707], "y1": [259, 304], "0800": [260, 304], "3979": [260, 304], "9121": [260, 304], "5400": [260, 304], "han": [261, 304], "dens": [262, 304, 686, 704], "ith": [262, 304], "00726415": [263, 304], "9999736": [263, 304], "2773e": [264, 304], "0172e": [264, 304], "9294e": [264, 304], "4149": [264, 304], "9138": [264, 304], "5529": [264, 304], "multidimension": [266, 267, 304, 757], "orthogon": [268, 269, 304, 311, 358, 370, 373, 548, 580, 581], "normalise_factor": [268, 304], "cp": [268, 304, 716], "complementari": [274, 304, 755, 763], "38268346": [274, 304], "38268352": [274, 304], "8563191": [274, 304], "14943568": [274, 304], "much": [275, 288, 307, 685, 707, 714, 715, 716, 719, 722, 724, 731, 734, 735, 736, 738, 739, 740, 742, 744, 745, 755, 757, 763, 764], "arrrai": [277, 307], "position": [283, 307], "inexact": [283, 307], "triangl": [287, 307], "999999e": [288, 307], "65999985": [290, 307], "52000046": [290, 307], "1500001": [290, 307, 458, 545], "11259177": [291, 307], "3574118": [291, 307], "20097363": [291, 307], "suppli": [295, 307, 313, 401, 698, 719, 721, 737], "217234": [296, 307], "hurwitz": [299, 307], "custom_grad_func": [301, 309], "bind": [301, 309, 714, 733, 756, 757], "upstream": [301, 309, 715, 716, 718, 733], "sequence_length": 302, "ndenumer": 304, "ndindex": 304, "random_cp": 304, "random_tuck": 304, "bind_custom_gradient_funct": [309, 733], "area_interpol": 310, "division_overrid": [310, 328], "avg": [310, 328, 330, 351], "dimensio": [310, 329], "tranform": [310, 331, 341], "01823380e": [310, 331, 341], "15385818e": [310, 331, 341], "36371466e": [310, 331, 341], "38763905e": [310, 331, 341], "60722279e": [310, 331, 341], "80319249e": [310, 331, 341], "05617893e": [310, 331, 341], "21500000e": [310, 331, 341], "24000015e": [310, 331, 341], "90734863e": [310, 331, 341], "10000420e": [310, 331, 341], "15899994e": [310, 331, 341], "24000053e": [310, 331, 341], "81469727e": [310, 331, 341], "09999847e": [310, 331, 341], "4135742": [310, 331, 341], "6779785": [310, 331, 341], "3770599": [310, 331, 341], "114": [310, 331, 341], "8719864": [310, 331, 341], "72109985": [310, 331, 341], "52869415": [310, 331, 341], "79182434": [310, 331, 341], "72489166": [310, 331, 341], "container_n": [310, 331, 341], "container_typ": [310, 331, 341, 545], "container_norm": [310, 331, 341], "1580677": [310, 331], "89422607": [310, 331], "86190414": [310, 331], "00041008": [310, 331], "75149155": [310, 331], "97056389": [310, 331], "87819386": [310, 331], "89381361": [310, 331], "50000000e": [310, 331, 341], "22044605e": [310, 331, 341], "randomli": [310, 333, 334, 335, 547, 570, 686], "ed": [310, 333, 334, 335], "rest": [310, 313, 333, 334, 335, 387, 715, 721, 723, 737, 747, 759], "4d": [310, 334, 335], "5d": [310, 335, 686], "emb": [310, 336], "51285338": [310, 336], "87183261": [310, 336], "2308116": [310, 336], "02733949e": [310, 337], "00j": [310, 337], "49660576e": [310, 337], "68178638e": [310, 337], "01j": [310, 337, 342], "98912367e": [310, 337], "21802426e": [310, 337, 342], "04549134e": [310, 337, 342], "82842712e": [310, 337, 342], "86902654e": [310, 337, 342], "25501143e": [310, 337, 342], "32978028e": [310, 337, 342], "52068201e": [310, 337, 342], "71158374e": [310, 337, 342], "generate_einsum_equ": 310, "get_interpolate_kernel": 310, "27279224e": [310, 341], "44232273e": [310, 341], "70464332e": [310, 341], "73454881e": [310, 341], "00902849e": [310, 341], "10039906e": [310, 341], "07022366e": [310, 341], "69506073": [310, 341], "93914604": [310, 341], "88008881": [310, 341], "18951607": [310, 341], "57439613": [310, 341], "15318303e": [310, 342], "15148591e": [310, 342], "19j": [310, 342], "25000000e": [310, 342], "35378602e": [310, 342], "02j": [310, 342], "65404249e": [310, 342], "17611649e": [310, 342], "24320230e": [310, 342], "79344813e": [310, 342], "22374531e": [310, 342], "45929364e": [310, 342], "14208718e": [310, 342], "07177031e": [310, 342], "what": [310, 343, 353, 704, 707, 708, 710, 716, 717, 722, 723, 726, 727, 729, 730, 732, 733, 734, 735, 736, 737, 741, 742, 744, 745, 746, 747, 749, 750, 753, 758, 759, 762], "indexerror": [310, 343, 353, 550, 611, 699, 728], "interp": [310, 740], "xp": [310, 344, 718], "fp": [310, 344], "nd": [310, 345], "bicubic_tensorflow": [310, 345, 740], "max_unpool1d": 310, "unpool": [310, 349], "pool_result": [310, 349], "unpool_result": [310, 349], "nearest_interpol": 310, "input_shap": [310, 350, 704], "window_shap": [310, 351], "pool_typ": [310, 351], "99038106j": [310, 353], "33012702": [310, 353], "23205081j": [310, 353], "33012702j": [310, 353], "superdiagon": [311, 356, 548, 578], "subdiagon": [311, 356, 548, 578], "eigendecomposit": [311, 358, 548, 580, 581], "qlq\u1d40": [311, 358, 548, 580, 581], "behav": [311, 358, 548, 580, 718, 728, 732, 734, 735, 736, 744, 758], "tridiagon": [311, 359], "38196602": [311, 359], "61803389": [311, 359], "35048741": [311, 359], "56710052": [311, 359], "06693714": [311, 359], "74234426": [311, 359], "56155282": [311, 359], "56155276": [311, 359], "82842714": [311, 359], "82842731": [311, 359], "necessarili": [311, 360, 719, 722], "random_st": [311, 361], "skip_matrix": [311, 362, 364], "seen": [311, 317, 362, 423, 695, 706, 707, 723, 724, 726, 728, 735, 737, 742, 744, 745, 763], "khatri_rao_product": [311, 362], "kronecker_product": [311, 364], "n_column": [311, 364], "nnmf": [311, 365], "hoi": [311, 370, 373], "determinist": [311, 371], "borrow": [311, 371, 717], "scikit": [311, 371, 707], "extmath": [311, 371], "mae": [312, 375], "log_poisson_loss": 312, "compute_full_loss": [312, 376, 687], "likelihood": [312, 376], "assumpt": [312, 376], "minu": [312, 376], "plai": [312, 376, 704, 715, 719, 725, 735, 737, 747, 757, 760], "factori": [312, 376], "stirl": [312, 376], "favor": [312, 376], "28402555": [312, 376], "03402555": [312, 376], "1573164": [312, 376], "3467": [312, 377], "0133": [312, 377], "0250": [312, 377], "0056": [312, 377], "0025": [312, 377], "0675": [312, 377], "hing": [312, 378], "6987": [312, 378], "1606": [312, 378], "3711": [312, 378], "4032": [312, 378], "6931": [312, 378], "whilst": [313, 381, 382, 383, 747, 752, 757], "ary3": [313, 383], "goe": [313, 385, 717, 720, 729, 734, 740], "mod": [313, 385, 718], "tall": [313, 390], "horizot": [313, 397], "shortcut": [313, 401, 715], "linear_ramp": [313, 401], "reflect": [313, 401, 710, 716, 719, 734, 737], "ramp": [313, 401], "mirror": [313, 401, 714, 757], "signatur": [313, 322, 401, 435, 707, 724, 725, 726, 727, 730, 734, 737, 738, 740, 754, 763], "padding_func": [313, 401], "iaxis_pad_width": [313, 401], "iaxi": [313, 401], "style": [313, 401, 555, 656, 716, 729, 757], "unalt": [313, 401], "put_along_axi": 313, "put": [313, 406, 704, 714, 737, 750, 763], "basic": [313, 408, 709, 714, 726, 737], "shrinkag": [313, 408], "elimin": [313, 412, 715], "consecut": [313, 412], "batch_mean": [316, 415, 417], "batch_var": [316, 415, 417], "running_vari": [316, 415, 417], "42857143": [316, 420], "5714286": [316, 420], "distrubut": [317, 421], "paramter": [317, 421], "multivari": [317, 423], "bayesian": [317, 423], "supposedli": [320, 427], "indirect": [320, 428], "secondari": [320, 428], "is_ivy_sparse_arrai": 321, "is_native_sparse_arrai": 321, "native_sparse_arrai": 321, "coo_indic": [321, 431], "crow_indic": [321, 431], "col_indic": [321, 431], "ccol_indic": [321, 431], "row_indic": [321, 431], "dense_shap": [321, 431], "native_sparse_array_to_indices_values_and_shap": 321, "nativesparsearrai": 321, "sparsearrai": 321, "linalg": [322, 435, 548, 594, 714, 734, 736], "aw": [322, 435, 707], "48447205": [322, 435], "c0": [322, 438], "ck": [322, 438], "i1": [322, 438], "c2": [322, 438], "nearest_jax": [322, 444], "idx": [447, 545, 704, 725, 744], "inspect": [447, 545], "retriev": [447, 545, 716, 735], "compile_on_next_step": [448, 545, 687, 688, 690, 746], "decor": [451, 545, 712, 718, 719, 722, 724, 725, 731, 734, 735, 736, 740], "recalcul": [451, 545], "my_sum": [451, 545], "val1": [451, 545], "val2": [451, 545], "cached_sum": [451, 545], "line_eq": [451, 545], "slp": [451, 545], "itc": [451, 545], "cached_line_eq": [451, 545], "0353": [452, 545], "424": [452, 545], "58": [452, 545], "176": [452, 545], "339": [452, 545], "271": [452, 545], "168": [452, 545], "391": [452, 545], "417": [453, 545], "583": [453, 545], "0667": [453, 545], "267": [453, 545], "131": [453, 545], "263": [453, 545], "394": [453, 545, 554, 652], "526": [453, 545], "788": [453, 545], "public": [454, 545, 723, 733, 744, 760], "default_str": [456, 545], "46999979": [457, 545], "66000009": [457, 545], "93000001": [457, 545], "29000092": [457, 545], "33999991": [457, 545], "6400001": [457, 545], "96000004": [457, 545], "36000013": [457, 545], "51999998": [457, 545], "67000008": [457, 545], "30000001": [457, 545, 556, 659], "suppos": [457, 545, 724, 737], "960": [457, 545], "1280": [457, 545, 704], "3600": [457, 545], "bottom": [457, 545, 714, 715, 723, 763], "h1": [457, 545], "w1": [457, 545], "40499985": [458, 545], "61000061": [458, 545], "incas": [462, 463, 545], "max_depth": [469, 545, 552, 639], "seen_set": [469, 545], "local_set": [469, 545], "thrown": [474, 545, 719, 725, 728, 729, 750], "ivyexcept": [474, 506, 545, 699, 725, 728, 732, 734, 735, 738], "allow_dupl": [484, 545], "best": [484, 545, 704, 709, 713, 714, 715, 716, 717, 723, 724, 728, 737, 738, 751, 760, 761], "o": [484, 545, 704, 715, 717, 723, 742, 751], "context": [485, 545, 715, 716, 720, 724, 725, 726], "fork": [485, 545, 709, 718, 723], "forkserv": [485, 545], "spawn": [485, 545], "consol": [487, 545, 716, 729, 737, 744], "garbag": [487, 545], "collector": [487, 545], "get_all_arrays_in_memori": [487, 545], "array_mod": [490, 513, 545, 739], "exept": [491, 545], "exception_trace_mod": [491, 514, 545, 739], "lenient": [492, 515, 545], "manag": [492, 515, 545, 704, 708, 709, 720, 724, 725, 734, 750, 759, 761], "inplace_mod": [492, 515, 545], "break": [492, 545, 704, 720, 724, 730, 738, 750], "strict": [492, 515, 545], "infus": [493, 545], "nestable_mod": [496, 518, 545, 739], "effeci": [497, 519, 545, 739], "wider": [497, 519, 545, 739, 763], "promtion": [497, 545], "precise_mod": [497, 519, 545, 739], "shape_array_mod": [499, 521, 545, 739], "show_func_wrapper_trace_mod": [500, 522, 545, 739], "tmp_dr": [501, 545], "temporari": [501, 523, 545, 714, 724, 739], "tmp_dir": [501, 523, 545, 739], "tmp": [501, 523, 545], "my_tmp": [501, 545], "49999999999975": [503, 545], "5015015015010504": [503, 545], "000444502911705e": [503, 545], "9999999999995j": [503, 545], "00000262": [504, 545], "15605032": [504, 545], "01208451j": [504, 545], "00048": [504, 545], "1296": [504, 545], "00864": [504, 545], "2048": [504, 545], "isn": [506, 545, 716, 732, 734, 745, 750, 759], "possibli": [508, 545, 737, 750], "100000023841858": [508, 545], "200000047683716": [508, 545], "299999952316284": [508, 545], "400000095367432": [508, 545], "599999904632568": [508, 545], "dictionai": [512, 545], "__name__": [512, 545, 704, 728], "hemant": [512, 545], "set_array_mod": [513, 545, 739], "unset_shape_array_mod": [513, 545], "previous": [514, 545, 695, 715, 720, 731, 733, 737, 742], "set_exception_trace_mod": [514, 545, 728], "set_inplace_mod": [515, 545], "set_min_bas": [516, 545], "set_min_denomin": [517, 545], "set_nestable_mod": [518, 545], "set_precise_mod": [519, 545], "set_queue_timeout": [520, 545], "set_shape_array_mod": [521, 545], "set_show_func_wrapper_trace_mod": [522, 545, 728], "set_tmp_dir": [523, 545], "my_dir": [523, 545], "451": [524, 545], "in_ax": [525, 545], "out_ax": [525, 545], "thereof": [525, 545], "summaris": [525, 545], "grad": [526, 546, 690, 704, 733, 745, 746, 747], "99999998": [526, 546], "09999998": [526, 546], "19999998": [526, 546], "00000001": [526, 546], "00300001": [526, 546], "00800001": [526, 546], "0125": [526, 546], "17294501": [526, 546], "15770318": [526, 546], "20863818": [526, 546], "90000075": [527, 546], "90000164": [527, 546], "9000032": [527, 546], "50000012e": [527, 546], "92558754": [527, 546], "92558694": [527, 546], "92558682": [527, 546], "92558861": [527, 546], "60000025e": [527, 546], "01024": [527, 546], "retain_grad": [528, 546], "xs_grad_idx": [528, 546, 733], "ret_grad_idx": [528, 546, 733], "func_ret": [528, 546, 733], "666666": [528, 546], "333332": [528, 546], "66666675": [528, 536, 546], "argnum": [529, 546], "grad_fn": [529, 536, 546, 745], "933": [529, 531, 546], "jacobian": [531, 546, 750, 757], "jac_fn": [531, 546], "639": [532, 546], "361": [532, 546], "value_grad": [536, 546], "42333412": [536, 546], "5333333": [536, 546], "93333334": [536, 546], "43333334": [536, 546], "0666666": [536, 546], "softsign": 537, "718281828459045": 538, "euler": [538, 749], "141592653589793": 538, "newaxi": 538, "cast_bool": 539, "cmp_i": 539, "cmp_isnot": 539, "for_loop": 539, "if_els": 539, "try_except": 539, "while_loop": 539, "asarray_handle_nest": 540, "asarray_infer_devic": 540, "asarray_infer_dtyp": 540, "asarray_inputs_to_native_shap": 540, "asarray_to_native_arrays_and_back": 540, "as_ivy_dtyp": [541, 735], "as_native_dtyp": 541, "check_float": 541, "closest_valid_dtyp": 541, "default_dtyp": [541, 724, 731], "dtype_bit": 541, "function_supported_dtyp": [541, 724, 737], "function_unsupported_dtyp": [541, 724], "infer_default_dtyp": 541, "invalid_dtyp": [541, 724], "is_hashable_dtyp": 541, "is_native_dtyp": 541, "promote_typ": [541, 724], "promote_types_of_input": [541, 724, 734], "type_promote_arrai": [541, 724], "unset_default_complex_dtyp": 541, "unset_default_float_dtyp": 541, "unset_default_int_dtyp": 541, "unset_default_uint_dtyp": 541, "valid_dtyp": 541, "defaultcomplexdtyp": 541, "defaultdtyp": 541, "defaultfloatdtyp": 541, "defaultintdtyp": 541, "defaultuintdtyp": 541, "as_ivy_dev": [542, 744], "clear_cached_mem_on_dev": 542, "dev_util": [542, 725], "function_supported_devic": 542, "function_unsupported_devic": 542, "get_all_ivy_arrays_on_dev": [542, 725], "gpu_is_avail": [542, 704], "handle_soft_device_vari": [542, 725], "num_cpu_cor": [542, 725], "num_gpu": [542, 725, 737], "num_ivy_arrays_on_dev": 542, "percent_used_mem_on_dev": 542, "print_all_ivy_arrays_on_dev": 542, "set_split_factor": [542, 728], "split_func_cal": 542, "total_mem_on_dev": [542, 725], "tpu_is_avail": 542, "unset_default_devic": [542, 725], "unset_soft_device_mod": [542, 725], "used_mem_on_dev": 542, "defaultdevic": [542, 725], "profil": 542, "save_dir": 542, "arg_info": 545, "arg_nam": 545, "cache_fn": [545, 731], "current_backend_str": [545, 737, 742, 744], "function_supported_devices_and_dtyp": 545, "function_unsupported_devices_and_dtyp": 545, "get_item": [545, 734], "get_referrers_recurs": 545, "inplace_arrays_support": 545, "inplace_variables_support": 545, "is_ivy_nested_arrai": 545, "isscalar": 545, "match_kwarg": 545, "num_arrays_in_memori": 545, "print_all_arrays_in_memori": 545, "set_item": 545, "to_ivy_shap": 545, "to_native_shap": 545, "try_else_non": 545, "unset_array_mod": [545, 739], "unset_exception_trace_mod": 545, "unset_inplace_mod": 545, "unset_min_bas": 545, "unset_min_denomin": 545, "unset_nestable_mod": 545, "unset_precise_mod": 545, "unset_queue_timeout": 545, "unset_show_func_wrapper_trace_mod": 545, "unset_tmp_dir": 545, "vmap": [545, 750, 757], "arraymod": 545, "precisemod": 545, "execute_with_gradi": [546, 704, 745, 746, 747, 750], "jac": 546, "value_and_grad": [546, 733], "conv": [547, 686, 740], "feature_group_count": [547, 560, 567, 568], "oiw": [547, 560, 561, 567], "oihw": [547, 560, 563, 567], "oidhw": [547, 560, 564, 565, 567], "dhwio": [547, 560, 561, 564, 565, 567], "258": [547, 562, 564, 566], "conv_general_dil": [547, 735], "conv_general_transpos": 547, "depthwis": [547, 569, 686], "overfit": [547, 570], "1428566": [547, 570], "49000001": [547, 570], "55599999": [547, 570], "21000004": [547, 570], "incom": [547, 571], "666": [547, 548, 571, 587], "4269": [547, 571], "911": [547, 571, 728], "157": [547, 571], "753": [547, 571], "101": [547, 548, 552, 571, 584, 633], "545": [547, 554, 571, 650], "547": [547, 571, 725], "124": [547, 571], "852": [547, 571], "963": [547, 571], "98495483": [547, 571], "0293808": [547, 571], "0159359": [547, 571], "74752808": [547, 571], "20942307": [547, 571], "108": [547, 558, 571, 668], "3205719": [547, 571], "long": [547, 572, 715, 716, 723, 724, 726, 728, 735, 742, 757], "short": [547, 572, 716, 724, 742, 746], "unrol": [547, 572, 742, 745], "lstm": [547, 572, 686, 742, 757], "multi": [547, 548, 573, 576, 686, 726, 741, 750, 753, 755, 757, 761], "head": [547, 573, 686, 704, 713, 715, 723, 735], "paper": [547, 573, 704, 708], "vaswani": [547, 573], "et": [547, 548, 573, 596], "al": [547, 573], "2017": [547, 573], "attend": [547, 573], "num_attention_head": [547, 573], "key_dim": [547, 573, 686], "value_dim": [547, 573, 686], "Then": [547, 573, 711, 714, 715, 716, 720, 721, 723, 729, 732, 734, 737, 738, 750], "query_dim": [547, 573], "measur": [547, 573, 686], "new_": [547, 573], "attention_weight": [547, 573], "alongsid": [547, 573, 707], "attenion_weight": [547, 573], "out_feat_dim": [547, 573], "23333359": [547, 574], "03946018": [547, 574], "0280633": [547, 574], "29981947": [547, 574], "29981089": [547, 574], "06345534": [547, 574], "9634552": [547, 574], "19336844": [547, 574], "09336829": [547, 574], "axisa": [548, 576], "axisb": [548, 576], "axisc": [548, 576], "293": [548, 577], "46997": [548, 577], "futur": [548, 581, 582, 704, 706, 708, 715, 716, 723, 724, 737, 738, 740, 744, 750, 763], "45033181e": [548, 582], "02829754e": [548, 582], "54220343e": [548, 582], "12647155e": [548, 582], "38447177e": [548, 582], "56155300e": [548, 582], "26794919": [548, 582], "7320509": [548, 582], "0012": [548, 584], "00342": [548, 584], "000565": [548, 584], "0104": [548, 584], "000981": [548, 584], "00282": [548, 584], "000766": [548, 584], "0322": [548, 584], "00237": [548, 584], "000151": [548, 584], "00101": [548, 584], "00019": [548, 584], "0214": [548, 584], "00171": [548, 584], "0107": [548, 584], "0167": [548, 584], "0472": [548, 584], "0536": [548, 584], "0177": [548, 584], "000429": [548, 584], "00762": [548, 584], "lu_factor": 548, "pivot": [548, 585], "lu": [548, 585], "frobeniu": [548, 587], "nuclear": [548, 587], "induc": [548, 587], "ranl": [548, 587], "47722558": [548, 587], "776": [548, 587], "6000004": [548, 587], "118": [548, 588], "moor": [548, 592], "penros": [548, 592], "deteremin": [548, 594], "logsabsdet": [548, 594], "although": [548, 594, 719, 722, 735, 740, 755, 757], "again": [548, 594, 707, 708, 716, 719, 720, 721, 722, 726, 728, 729, 734, 735, 737, 738, 740, 745, 747, 750, 762, 763], "subject": [548, 594], "solut": [548, 595, 704, 715, 716, 722, 724, 736, 737, 740, 755, 759], "ordin": [548, 595, 749], "usvh": [548, 596], "cetera": [548, 596], "86217213": [548, 597], "31816804": [548, 597], "615": [548, 597], "ss": [548, 597], "25994301": [548, 597], "16403675": [548, 597], "61529762": [548, 597], "51231241": [548, 597], "39777088": [548, 597], "15413129": [548, 597], "1029852": [548, 597], "01383495": [548, 597], "86647356": [548, 597], "7786541": [548, 597], "55970621": [548, 597], "16857576": [548, 597], "86412698": [548, 597], "37566757": [548, 597], "88477993": [548, 597], "95925522": [548, 597], "6444726": [548, 597], "54687881": [548, 597], "16134834": [548, 597], "35037804": [548, 597], "31025076": [548, 597], "35769391": [548, 597], "transposit": [548, 598], "success": [548, 558, 600, 672, 674, 707, 723], "0x": [548, 601], "Such": [548, 601, 731, 737], "progress": [548, 601, 715, 716, 747], "alexandr": [548, 601], "theophil": [548, 601], "9000001": [548, 603], "64158917": [548, 603], "skew": [548, 604], "6666193": [549, 605], "67164493e": [549, 605], "05471958e": [549, 605], "32684899e": [549, 605], "30496836e": [549, 605], "e501": [549, 605, 686], "05393649": [549, 605], "49992943": [549, 605], "83330965": [549, 605], "35667494": [549, 607], "79329094": [549, 607], "512926": [549, 607], "outsid": [550, 608, 619, 725, 731, 744, 762], "honor": [550, 615], "beyond": [550, 616, 727, 735, 763], "famili": [550, 619], "intxx": [550, 619], "floatxx": [550, 619], "construct": [550, 621, 686, 689, 690, 691, 742, 746, 747, 755, 757, 764], "rep": [550, 621], "fomaml_step": 551, "inner_cost_fn": [551, 624, 625, 626], "outer_cost_fn": [551, 624, 625], "inner_grad_step": [551, 624, 625, 626], "inner_learning_r": [551, 624, 625, 626], "inner_optimization_step": [551, 624, 625, 626], "inner_batch_fn": [551, 624, 625], "outer_batch_fn": [551, 624, 625], "average_across_step": [551, 624, 625], "inner_v": [551, 624, 625], "keep_inner_v": [551, 624, 625], "outer_v": [551, 624, 625], "keep_outer_v": [551, 624, 625], "return_inner_v": [551, 624, 625, 626], "num_task": [551, 624, 625, 626], "maml": [551, 624, 625], "task": [551, 624, 625, 626, 704, 709, 716, 735, 736, 749, 757, 763, 764], "0x7f21e6fa0790": [551, 624, 625, 626], "maml_step": 551, "vanilla": [551, 625, 746, 757], "recev": [551, 625], "reptile_step": 551, "cost_fn": [551, 626], "reptil": [551, 626], "_variabl": [551, 626], "batch_in": [551, 626], "latent": [551, 626], "4485182": [551, 626], "139": [551, 626], "9569855": [551, 626], "9880483": [551, 626], "01766968": [551, 626], "02197957": [551, 626], "02197981": [551, 626], "all_nested_indic": 552, "include_nest": [552, 627], "_index": [552, 627, 638], "_base": [552, 627, 637, 638, 734], "extra_nest_typ": [552, 627, 628, 637, 638, 639], "themselv": [552, 627, 722, 724, 725, 727, 731, 735, 746, 754, 763], "far": [552, 627, 638, 725, 726, 743, 762, 763], "copy_nest": 552, "to_mut": [552, 628, 639], "deepli": [552, 628, 750, 757], "mutabl": [552, 628, 634, 635, 639, 644, 645, 720], "copied_nest": [552, 628], "1337": [552, 628, 639], "duplicate_array_index_chain": 552, "index_nest": [552, 731], "insert_into_nest_at_index": 552, "insert_into_nest_at_indic": 552, "onto": [552, 633, 639, 705, 706, 757], "special_squar": [552, 633], "6666666666666667": [552, 633], "special_pow": [552, 633], "linear_model": [552, 633], "map_nest_at_index": 552, "shallow": [552, 634, 635, 639, 644, 645], "_result": [552, 634, 644], "placehold": [552, 634, 639, 644, 686, 716, 719, 730, 752], "hh": [552, 634, 639], "map_nest_at_indic": 552, "ub": [552, 635], "tb": [552, 635], "multi_index_nest": 552, "nested_ani": 552, "check_nest": [552, 637, 638], "conditon": [552, 637, 638], "nested_argwher": 552, "stop_after_n_found": [552, 638], "nested_indic": [552, 638], "nested_map": [552, 725, 731], "_depth": [552, 639], "_tuple_check_fn": [552, 639], "_list_check_fn": [552, 639], "_dict_check_fn": [552, 639], "wherebi": [552, 639, 714, 754], "ah": [552, 639], "bh": [552, 639], "ch": [552, 639], "dh": [552, 639, 718], "eh": [552, 639], "gh": [552, 639, 715], "ih": [552, 639], "1338": [552, 639], "nested_multi_map": 552, "index_chain": [552, 640], "nest0": [552, 640], "ivy_arrai": [552, 640, 719, 735], "unappli": [552, 640], "prune_empti": 552, "prune_nest_at_index": 552, "prune_nest_at_indic": 552, "set_nest_at_index": 552, "set_nest_at_indic": 552, "111": [552, 645], "xyz": [552, 645], "pqr": [552, 645], "mini": [553, 646, 686, 689], "uniformli": [554, 648, 650], "22346112": [554, 649], "0922": [554, 649], "49671414": [554, 649], "1382643": [554, 649], "64768857": [554, 649], "5230298": [554, 649], "23415337": [554, 649], "23413695": [554, 649], "9213753": [554, 649], "12818667": [554, 649], "799": [554, 649], "469": [554, 649], "287": [554, 649], "0366": [554, 649], "26431865": [554, 650], "475": [554, 650], "878": [554, 650], "861": [554, 650], "929": [554, 650], "789": [554, 650], "519": [554, 650], "0435": [554, 650], "381": [554, 650], "4608004": [554, 650], "8458502": [554, 650], "67270088": [554, 650], "31128597": [554, 650], "zeroel": [555, 656], "major": [555, 656, 707, 724, 725, 736, 737, 750, 754, 757], "guarante": [556, 658, 660, 708, 719, 724, 734, 750], "aggreg": [556, 658, 723], "fourth": [556, 658], "1141": [556, 658], "8101": [556, 658], "9298": [556, 658], "8460": [556, 658], "2119": [556, 658], "3519": [556, 658], "6252": [556, 658], "4033": [556, 658], "7443": [556, 658], "2577": [556, 658], "3707": [556, 658], "0545": [556, 658], "3238": [556, 658], "5944": [556, 658], "0775": [556, 658], "4327": [556, 658], "62519997": [556, 658], "40329999": [556, 658], "59439999": [556, 658], "74430001": [556, 658], "81010002": [556, 658], "84600002": [556, 658], "92979997": [556, 658], "einstein": [558, 668, 698], "117": [558, 668], "sentinel": [558, 669, 671], "90000004": [558, 670], "intend": [558, 674, 685, 718, 730, 733, 755, 757, 761, 762], "07472222": [558, 675], "00666667": [558, 675], "08966666": [558, 675], "simplicit": [559, 676, 677], "meta": [624, 625, 626, 719, 738, 757], "geglu": 682, "leakyrelu": 682, "logsoftmax": 682, "moduleconvert": [683, 688], "from_flax_modul": 683, "native_modul": 683, "params_fx": 683, "rng_seed": 683, "constructor_arg": 683, "constructor_kwarg": 683, "instance_arg": 683, "instance_kwarg": 683, "flax": [683, 708, 747, 750, 757], "from_haiku_modul": 683, "params_hk": 683, "from_keras_modul": 683, "from_paddle_modul": 683, "paddl": [683, 695, 714, 715, 724], "from_torch_modul": 683, "dedic": [683, 730, 740, 744, 746], "to_ivy_modul": [683, 747], "native_module_class": 683, "modulehelp": [684, 688], "check_submod_ret": 684, "expected_submod_ret": [684, 688], "get_mod_kei": 684, "top_mod": 684, "explicit": [684, 715, 722, 724, 733, 734, 735, 742, 750, 757], "mod_depth": 684, "mod_height": 684, "mod_with_top_mod_key_chain": 684, "flatten_key_chain": 684, "iimedi": 684, "parent": [684, 714, 723, 744], "show_mod_in_top_mod": 684, "upper_depth": 684, "lower_depth": 684, "coverag": [684, 724, 737], "prompt": [684, 714, 716], "show_structur": 684, "this_repr": 684, "show_v_in_top_v": 684, "perspect": 684, "top_v": 684, "sub_mod": 684, "show_v": 684, "comopos": 684, "enumer": [684, 704], "track_submod_call_ord": [684, 688], "track_submod_ret": [684, 688], "v_with_top_v_key_chain": 684, "create_vari": [685, 746], "var_shap": [685, 746], "fan_out": [685, 746], "fan_in": [685, 746], "rectangular": 685, "firstlayersiren": 685, "siren": 685, "distribt": 685, "glorotuniform": [685, 686, 746], "glorot": 685, "xavier": 685, "neuron": 685, "w_1x_1": 685, "w_2x_2": 685, "w_nx_n": 685, "w_i": 685, "vanish": 685, "explod": [685, 705, 706], "big": [685, 709, 750, 757], "pick": 685, "abstract": [685, 690, 706, 722, 724, 734, 735, 737, 740, 746, 750, 755, 757, 759, 760, 764], "kaimingnorm": 685, "fan_mod": [685, 746], "kaim": 685, "he": 685, "center": 685, "negative_slop": 685, "fan": 685, "propog": 685, "fan_sum": [685, 746], "proport": 685, "Ones": 685, "randomnorm": 685, "stddev": 685, "w0": 685, "gain": [685, 716, 718, 741, 746, 757], "wlim": 685, "predefin": 685, "initialz": 685, "fan_avg": 685, "adaptiveavgpool1d": 686, "adaptiveavgpool2d": 686, "avgpool1d": 686, "implicit": [686, 722, 727, 735, 737, 742, 757], "avgpool2d": 686, "avgpool3d": 686, "input_channel": [686, 704, 742, 746], "output_channel": [686, 704, 746], "filter_s": 686, "weight_initi": [686, 746], "bias_initi": [686, 746], "0x7f21e6ea3f70": 686, "0x7f21e6ea0280": 686, "conv1dtranspos": 686, "0x7f21e6ea3e80": 686, "0x7f21e6ea3e20": 686, "filter_shap": 686, "0x7f21e6ea2f80": 686, "0x7f21e6ea2f50": 686, "conv2dtranspos": 686, "0x7f21e6ea11b0": 686, "0x7f21e6ea1180": 686, "0x7f21e6ea2050": 686, "0x7f21e6ea2140": 686, "conv3dtranspos": 686, "0x7f21e6ea1990": 686, "0x7f21e6ea18d0": 686, "depthwiseconv2d": 686, "num_channel": 686, "0x7f21e6ea3700": 686, "0x7f21e6ea18a0": 686, "bernoul": 686, "num_embed": 686, "embedding_dim": 686, "padding_idx": 686, "lookup": 686, "num_embeddingss": 686, "whenev": [686, 716, 720, 723, 724, 728, 734, 737, 739, 745], "renorm": 686, "insensit": 686, "num_lay": 686, "return_sequ": 686, "return_st": 686, "0x7f21e6ea3430": 686, "get_initial_st": 686, "connect": [686, 707, 715, 746, 747, 755], "0x7f21e6ea3520": 686, "0x7f21e6ea00d0": 686, "maxpool1d": 686, "maxpool2d": [686, 704], "maxpool3d": 686, "multiheadattent": 686, "embed_dim": 686, "head_dim": 686, "dropout_r": 686, "use_proj_bia": 686, "attention_ax": 686, "build_mod": [686, 687, 688], "on_init": [686, 688], "parallel": [686, 721, 757, 761, 762], "binarycrossentropyloss": 687, "store_var": [687, 688], "fallback_to_non_compil": [687, 688, 690], "fall": [687, 688, 690, 714, 724, 741], "with_partial_v": [687, 688], "crossentropyloss": 687, "logpoissonloss": 687, "modulemeta": 688, "submod_depth": 688, "submods_to_track": 688, "varibl": 688, "temporarili": [688, 712, 718], "from_cal": 688, "trigger": [688, 714, 729], "successfulli": [688, 715, 719], "built_": 688, "compile_kwarg": 688, "_unified_ivy_graph": 688, "_call": 688, "eval": 688, "register_buff": 688, "var_nam": 688, "save_weight": 688, "weights_path": 688, "show_graph": 688, "randomness_factor": 688, "save_to_disk": 688, "notebook": 688, "with_edge_label": 688, "with_arg_label": 688, "with_output_label": 688, "output_connected_onli": 688, "highlight_subgraph": 688, "fname": [688, 745], "batchnorm2d": 689, "num_featur": 689, "affin": 689, "track_running_stat": 689, "trail": 689, "layernorm": 689, "normalized_shap": 689, "elementwise_affin": 689, "set_stat": [690, 746], "init_on_first_step": 690, "ignore_miss": 690, "privat": [690, 735, 737], "_step": [690, 746], "sgd": [690, 757], "stochast": [690, 757], "sub_modul": 691, "check_al": 692, "messag": [692, 699, 703, 707, 715, 716, 723, 726, 728, 729, 735, 742, 744], "check_all_or_any_fn": 692, "check_ani": 692, "check_dev_correct_format": 692, "check_dimens": 692, "check_elem_in_list": [692, 731, 734, 735], "elem": 692, "check_equ": [692, 735], "check_exist": 692, "check_fals": 692, "check_fill_value_and_dtype_are_compat": [692, 738], "check_gather_input_valid": 692, "check_gather_nd_input_valid": 692, "check_great": 692, "allow_equ": [692, 728], "check_inplace_sizes_valid": [692, 734], "check_isinst": 692, "allowed_typ": 692, "check_kernel_padding_s": 692, "padding_s": 692, "check_less": [692, 728], "check_one_way_broadcast": 692, "check_same_dtyp": 692, "check_shapes_broadcast": 692, "check_tru": 692, "check_unsorted_segment_min_valid_param": 692, "ast_help": 694, "importtransform": 694, "nodetransform": 694, "impersonate_import": 694, "tree": [694, 710, 724], "local_ivy_id": 694, "visit_import": 694, "visit_importfrom": 694, "ivyload": 694, "loader": [694, 704, 745, 750], "exec_modul": 694, "ivypathfind": 694, "metapathfind": 694, "find_spec": 694, "fullnam": 694, "contextmanag": 695, "choose_random_backend": 695, "convert_from_numpy_to_target_backend": 695, "variable_id": 695, "numpy_obj": 695, "convert_from_source_backend_to_numpi": 695, "current_backend": [695, 714, 728, 731, 736, 738, 742], "global_backend": 695, "fn_name_from_version_specific_fn_nam": 695, "prevent_access_loc": 695, "previous_backend": [695, 720], "unset": [695, 720, 742], "op": [695, 738, 742, 750], "eagertensor": [695, 736], "subsequ": [695, 715, 719, 723, 724, 726, 730, 731, 734, 737, 746, 758], "Or": [695, 704, 711, 734, 745], "jaxlib": [695, 715, 719, 724, 725, 730, 738, 742, 744], "xla_extens": [695, 719, 724, 725, 730, 738, 742, 744], "arrayimpl": 695, "set_backend_to_specific_vers": 695, "set_jax_backend": 695, "set_mxnet_backend": 695, "mxnet": [695, 707, 714, 715, 764], "mx": 695, "set_numpy_backend": 695, "set_paddle_backend": 695, "set_tensorflow_backend": 695, "set_torch_backend": 695, "unset_backend": [695, 720], "with_backend": 695, "sub_backend_handl": 696, "available_sub_backend": 696, "clear_sub_backend": 696, "find_available_sub_backend": 696, "sub_backends_loc": 696, "set_sub_backend": 696, "sub_backend_str": 696, "unset_sub_backend": 696, "dynamic_import": 697, "import_modul": [697, 742], "packag": [697, 704, 710, 712, 715, 723, 735, 750, 751, 757, 759], "einsum_pars": 698, "convert_interleaved_input": 698, "interleav": 698, "convert_subscript": 698, "old_sub": 698, "symbol_map": 698, "subscript": 698, "oe": 698, "ellipsi": 698, "find_output_shap": 698, "find_output_str": 698, "canon": 698, "gen_unused_symbol": 698, "symbol": [698, 714, 715, 757, 758], "abd": 698, "get_symbol": 698, "letter": 698, "resort": 698, "unicod": 698, "charact": [698, 707, 735], "chr": 698, "192": 698, "surrog": 698, "\u0155": 698, "20000": 698, "\u4eac": 698, "has_valid_einsum_chars_onli": 698, "einsum_str": 698, "abaz": 698, "\u00f6ver": 698, "is_valid_einsum_char": 698, "\u01f5": 698, "legalise_einsum_expr": 698, "reproduct": 698, "pars": [698, 721, 726, 750], "intak": 698, "contract_path": 698, "parse_einsum_input": 698, "einsum_eqn": 698, "legalis": 698, "legalise_einsum_eqn": 698, "za": 698, "xza": 698, "xz": 698, "possibly_convert_to_numpi": 698, "thing": [698, 706, 707, 708, 713, 714, 715, 716, 720, 735, 737, 740, 744, 745, 757], "everyth": [698, 704, 708, 714, 715, 716, 717, 723, 726, 734, 735, 736, 737, 743, 750, 751], "myshap": 698, "__main__": 698, "0x10f850710": 698, "inplaceupdateexcept": 699, "include_backend": [699, 728], "invalidbackendexcept": 699, "ivyattributeerror": [699, 728], "attributeerror": [699, 728, 744], "ivybroadcastshapeerror": [699, 728], "ivydeviceerror": 699, "ivydtypepromotionerror": [699, 728], "ivyerror": [699, 704, 728], "ivyindexerror": [699, 728], "ivynotimplementedexcept": [699, 728], "notimplementederror": 699, "ivyvalueerror": [699, 728], "handle_except": [699, 730, 732], "add_array_spec": 700, "fn_array_spec": 700, "set_logging_mod": 701, "debug": [701, 715, 716, 722, 723, 733, 737, 740, 745, 757], "info": [701, 704, 721, 727, 729], "unset_logging_mod": 701, "recent": [701, 706, 707, 715, 716, 737], "print_stat": 702, "viz": 702, "visual": [702, 704, 715, 735, 737, 750, 757, 759, 762], "snakeviz": 702, "bonu": 702, "cprofil": 702, "cprint": [703, 742], "straight": [704, 723, 735, 737, 744], "awai": [704, 755, 757], "dive": [704, 709, 711, 713, 714, 716, 718, 722, 724, 729, 736, 741, 744, 745, 750, 763], "grow": [704, 757], "guid": [704, 709, 714, 715, 716, 721, 729, 735, 763], "own": [704, 707, 708, 715, 718, 723, 724, 727, 728, 734, 735, 738, 742, 750, 752, 753, 756, 757, 762, 763], "variou": [704, 716, 718, 723, 724, 727, 728, 730, 732, 733, 735, 736, 737, 749, 751, 752, 753, 755, 756, 757, 760, 763], "perk": [704, 719, 722], "essenti": [704, 706, 707, 714, 720, 722, 725, 726, 731, 734, 735, 736, 763], "mainli": [704, 714, 717, 733, 735, 737, 743, 745, 752, 757], "handler": [704, 741, 743, 747, 752], "behind": [704, 717, 730, 737, 741, 743], "scene": [704, 705, 706, 717, 741, 743, 757], "facilit": 704, "agnost": [704, 719, 730, 742, 744, 747, 750, 763, 764], "mse_loss": 704, "jax_ms": 704, "tf_mse": 704, "np_mse": 704, "torch_ms": 704, "regressor": 704, "input_dim": 704, "output_dim": 704, "_build": 704, "linear0": [704, 745, 746], "linear1": [704, 745, 746], "_forward": [704, 727, 742, 745, 746], "easili": [704, 707, 715, 719, 723, 735, 740, 745, 746, 747, 750, 757, 763, 764], "favorit": 704, "n_training_exampl": 704, "loss_fn": [704, 745, 746, 747], "epoch": 704, "5f": 704, "finish": [704, 709, 714, 715, 717], "usabl": [704, 730, 738], "topic": [704, 732, 744, 757], "mechan": [704, 723, 748, 750], "vision": [704, 710, 748, 753, 763], "robot": [704, 748], "reinforc": [704, 749], "gym": 704, "builder": [704, 711, 748, 750, 752], "trainer": [704, 708, 748, 750, 764], "highli": [704, 757], "flexibl": [704, 722, 724, 730, 733, 738, 740, 757], "everyon": [704, 708, 709, 714, 715, 716, 750], "plan": [704, 749, 751], "interoper": [704, 707, 754, 755, 757, 760], "easiest": [704, 711, 715, 751], "command": [704, 711, 715, 718, 721, 723, 729, 751], "python3": [704, 710, 715, 716], "pre": [704, 710, 712, 714, 737, 747, 750, 751, 757], "pull": [704, 708, 709, 710, 714, 715, 718, 726, 729, 738, 740, 750, 751], "unifyai": [704, 710, 711, 715, 716, 721, 751], "sweat_smil": 704, "git": [704, 710, 711, 713, 715, 716, 718, 721, 723, 729, 737, 751], "clone": [704, 710, 711, 716, 751], "com": [704, 710, 711, 715, 716, 718, 721, 723, 724, 751], "cd": [704, 710, 711, 715, 716, 751], "page": [704, 714, 715, 716, 721, 723, 743, 744, 747, 748, 751], "video": [704, 709, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 751, 755], "tutori": [704, 716, 735, 751], "quit": [704, 712, 716, 719, 726, 727, 731, 732, 737, 740, 757, 763], "lot": [704, 707, 708, 723, 724, 732, 737, 750, 756], "jax_fn": 704, "jax_x": 704, "torch_x": 704, "torch_fn": 704, "focus": [704, 738, 749, 755, 756, 757, 763, 764], "architectur": [704, 715, 747, 750, 755, 756, 757, 760, 761, 762], "orient": [704, 749], "contributor": [704, 709, 712, 714, 715, 716, 735, 741, 757], "nuanc": 704, "background": [704, 715, 721, 757, 759], "contextualis": 704, "problem": [704, 707, 716, 718, 719, 720, 725, 735, 744, 753, 759, 763], "explos": [704, 705, 707], "why": [704, 705, 707, 716, 734, 744], "adher": [704, 706, 707, 718, 724, 727, 730, 740, 742, 747, 753, 754, 763], "lastli": [704, 719], "paint": [704, 706, 742], "pictur": [704, 706, 714, 742], "role": [704, 716, 725, 735, 743, 758, 760, 764], "wide": [704, 716, 737, 755, 757], "demo": [704, 710, 749], "showcas": [704, 749], "shorter": [704, 744], "ensp": 704, "eff_encod": 704, "efficientnet_v2": 704, "efficientnetv2b0": 704, "include_top": 704, "imagenet": 704, "torch_eff_encod": 704, "customiz": [704, 721], "script": [704, 710, 715, 716, 723, 726, 742, 750, 757], "deepmind_perceiver_io": 704, "perceiver_backbon": 704, "dummy_input": 704, "backbon": [704, 742, 745], "perceiverioclassifi": 704, "max_pool": 704, "1024": 704, "sm_framework": 704, "segmentation_model": 704, "sm": 704, "torch_sm": 704, "metric": [704, 750], "iou_scor": 704, "rax": 704, "torch_rax": 704, "poly1_softmax_loss": 704, "madmom": 704, "madmon": 704, "torch_madmom": 704, "freq": 704, "audio": 704, "hz2midi": 704, "reduce_mean": [704, 745, 746, 747], "torch_loss": 704, "output_dens": 704, "maxpooling1d": 704, "pool_siz": 704, "tf_kornia": 704, "sharp": 704, "tf_rax": 704, "tf_madmom": 704, "tf_loss": 704, "hk_eff_encod": 704, "dummy_x": 704, "jax_sm": 704, "jax_madmom": 704, "jax_loss": 704, "jax_enable_x64": 704, "np_kornia": 704, "np_sm": 704, "np_rax": 704, "np_loss": 704, "yourself": [704, 714, 716, 729, 737, 740, 749], "anyon": [704, 707, 709, 716, 723, 750, 763], "classif": [704, 757], "ivynet": 704, "h_w": 704, "extractor": 704, "image_height": 704, "image_width": 704, "favourit": [704, 715], "pure": [704, 727, 730, 735, 740, 744, 747, 750, 757, 763, 764], "helper": [704, 721, 724, 728, 745, 752], "generate_batch": 704, "dataset_s": 704, "y_train": 704, "num_correct": 704, "y_pred": 704, "hyperparam": 704, "num_epoch": 704, "model_nam": 704, "epoch_loss": 704, "running_loss": 704, "training_accuraci": 704, "train_loss": 704, "train_correct": 704, "train_loop": 704, "tqdm": 704, "xbatch": 704, "ybatch": 704, "ybatch_encod": 704, "loss_prob": 704, "batch_loss": 704, "set_descript": 704, "set_postfix": 704, "accuracy_percentag": 704, "naverag": 704, "6f": 704, "plot": [704, 757], "_train_summari": 704, "csv": 704, "writer": 704, "writerow": 704, "prepar": [704, 723], "folder": [704, 710, 715, 716, 718, 721, 723, 731, 735, 737, 738, 739], "believ": [704, 707, 716], "feedback": [704, 723], "welcom": [704, 709, 715, 716], "appreci": 704, "amaz": 704, "acceler": [704, 735, 755, 759, 760, 761, 762], "journei": [704, 709], "achiev": [704, 723, 724, 731, 732, 737, 740, 745, 747, 752], "ambiti": 704, "season": 704, "perfect": [704, 749], "idea": [704, 708, 710, 714, 738, 743, 749, 756], "fellow": 704, "twitter": 704, "sneak": 704, "peek": 704, "certainli": [704, 707, 763], "great": [704, 707, 708, 716, 737, 742, 744, 763], "stai": [704, 723], "credit": 704, "accompani": 704, "articl": [704, 729], "lenton2021ivi": 704, "titl": [704, 714, 716, 721], "templat": [704, 721, 727, 737], "inter": 704, "author": [704, 714, 716, 755, 759], "lenton": 704, "daniel": 704, "pardo": 704, "fabio": 704, "falck": 704, "fabian": 704, "jame": 704, "stephen": 704, "clark": 704, "ronald": 704, "journal": 704, "arxiv": 704, "preprint": 704, "2102": 704, "02886": 704, "year": [704, 706, 708, 718, 750, 757], "huge": [705, 707, 723, 745, 757, 763], "collabor": [705, 706, 707], "consortium": [705, 707], "grown": 706, "consider": [706, 714, 726, 730, 740, 754, 755], "especi": [706, 715, 720, 729, 757], "rapidli": 706, "repo": [706, 710, 713, 716, 718, 721, 723, 724, 736, 737], "wonder": [706, 708, 744], "evolv": [706, 757], "shareabl": 706, "hinder": [706, 730], "outdat": 706, "matter": [706, 726], "month": [706, 715], "rigor": [706, 737], "newest": 706, "softwar": [706, 707, 715, 716, 755, 760, 761, 762], "rapid": [706, 707, 715, 757], "prototyp": [706, 757], "vital": [706, 747], "signific": [706, 707, 739, 750, 757], "bottleneck": 706, "quickli": [706, 708, 715, 716, 723, 745, 746, 757, 764], "obsolet": [706, 708], "constantli": [706, 740], "invent": 706, "wheel": 706, "simultan": [706, 708], "modern": [706, 707, 733, 762], "scalabl": [706, 742, 762, 763], "univers": [706, 735], "languag": [706, 708, 735, 742, 752, 755, 758, 760, 761, 762, 763], "front": [706, 735, 741, 742, 745, 755, 757], "runner": 706, "littl": [706, 744, 759], "principl": [706, 755, 757, 760], "almost": [706, 713, 722, 736, 743, 745], "syntax": [706, 707, 724, 757], "unsurprisingli": [706, 726], "fundament": [706, 723, 735, 740, 742, 757], "2006": 706, "cloth": 706, "central": [707, 714, 729, 740, 763], "forgiven": 707, "eyebrow": 707, "somehow": 707, "strong": [707, 750, 757], "industri": [707, 757, 759], "funni": 707, "comic": 707, "strip": 707, "easi": [707, 715, 716, 719, 720, 722, 731, 733, 736, 737, 740, 755, 757, 763, 764], "charger": 707, "instant": 707, "mandat": [707, 724, 734, 737, 738], "adopt": [707, 716, 719, 730, 740, 756, 757, 762], "despit": [707, 722, 724, 725, 736, 742, 754, 757], "bring": [707, 718, 737, 742, 743, 752], "benefit": [707, 708, 715, 719, 722, 734, 740, 744, 745, 750, 755, 759, 762], "unrel": [707, 716], "contrari": 707, "bumpi": 707, "road": 707, "allud": [707, 745], "technologi": [707, 755, 759], "thank": [707, 745], "bio": [707, 715], "pcie": 707, "motherboard": 707, "raid": 707, "storag": [707, 745], "virtual": [707, 710, 716, 735, 760, 761], "bluetooth": 707, "wireless": 707, "exchang": [707, 713, 753, 755], "btx": 707, "sata": 707, "host": [707, 711, 723, 750, 762], "websit": [707, 715, 718], "tcp": 707, "ip": 707, "commun": [707, 709, 714, 715, 716, 750, 756, 757, 759], "smtp": 707, "send": [707, 762], "gmail": [707, 723], "outlook": 707, "pop": [707, 715], "email": [707, 723], "live": [707, 708, 720, 721, 724, 753, 755], "did": [707, 714, 721, 747, 763], "aris": [707, 724, 729, 750], "substanti": [707, 716, 719, 724, 737, 757], "innov": 707, "growth": [707, 760], "necess": 707, "parti": [707, 721, 750, 756, 757, 763], "engag": [707, 709, 716], "regard": [707, 713, 722, 735, 736, 740], "2015": [707, 757], "matur": [707, 750, 757], "preced": [707, 746], "aros": 707, "effort": [707, 709, 714, 750, 753, 757, 763], "stage": [707, 709, 716, 717, 718, 721, 737, 757], "mission": [707, 759], "At": [707, 714, 715, 716, 718, 737, 738, 757], "ourselv": [707, 763], "quansight": [707, 763], "compani": [707, 753], "organ": [707, 719, 722, 731, 735, 738, 752], "panda": 707, "scipi": [707, 714, 759, 764], "conda": [707, 715, 759], "apach": [707, 759, 763], "onnx": [707, 755, 763], "jupyt": [707, 759], "cupi": [707, 757, 764], "net": [707, 708, 742, 747], "sympi": 707, "modin": 707, "spyder": 707, "googl": [707, 723], "octoml": [707, 763], "sponsor": 707, "lg": 707, "electron": 707, "shaw": 707, "intel": [707, 715, 755, 762], "promis": 707, "pursuit": 707, "unif": [707, 709, 744, 753, 763], "clearli": [707, 714, 716, 726, 736, 737, 761], "thought": [707, 715, 716, 730, 755], "care": [707, 716, 725, 735, 740, 747], "gone": [707, 741], "excit": [707, 709, 717], "complianc": 707, "hope": [707, 750, 763], "suit": [707, 715, 717, 718, 723, 737, 745, 749, 752, 757, 763], "motiv": [707, 744], "convinc": 707, "celebr": 707, "encourag": [707, 729, 749, 750], "foundat": [707, 760], "perfectli": 708, "happi": [708, 715, 750], "abund": 708, "better": [708, 710, 714, 717, 735, 736, 738, 740, 741, 744, 745, 746, 760], "streamlin": [708, 760], "workflow": [708, 714, 716, 720, 724, 733, 735, 745, 748, 752, 756, 763, 764], "week": [708, 716], "sai": [708, 714, 715, 732, 744], "deepmind": 708, "releas": [708, 714, 715, 724, 738, 740, 750, 757, 763], "awesom": 708, "love": 708, "perceiverio": 708, "slew": 708, "rush": 708, "inevit": [708, 758], "often": [708, 713, 718, 728, 730, 731, 735, 737, 750, 758, 761, 764], "erron": 708, "poor": 708, "repositori": [708, 710, 711, 715, 716, 717, 718, 721], "confus": [708, 724, 728, 734, 740, 752], "hour": [708, 723], "spent": 708, "spin": 708, "discuss": [708, 714, 716, 721, 724, 725, 734, 735, 737, 740, 743, 744, 745, 750, 753, 758], "sake": 708, "few": [708, 713, 714, 716, 722, 724, 725, 730, 731, 733, 734, 736, 737, 740, 742, 743, 744, 745, 746, 748, 757, 759], "wouldn": 708, "nice": [708, 737, 757], "frantic": 708, "port": 708, "lucid": 708, "honk": 708, "understand": [708, 710, 712, 713, 714, 715, 716, 717, 718, 721, 726, 727, 730, 736, 741, 753, 763], "hasn": 708, "spend": [708, 757], "torchvis": 708, "sonnet": 708, "statu": [708, 714, 723, 729], "quo": 708, "dopamin": 708, "ignit": 708, "catalyst": 708, "lightn": 708, "fastai": 708, "trax": [708, 747], "objax": [708, 747], "offer": [708, 735, 746, 757, 763, 764], "strongli": [709, 715, 735, 763, 764], "skill": [709, 759], "veteran": 709, "beginn": [709, 757], "aspect": [709, 733, 745, 757], "board": [709, 721], "local": [709, 710, 715, 718, 721, 731, 736, 737], "resourc": [709, 714, 715, 723], "setup": [710, 715, 716, 721, 723], "mech": [710, 711], "grasp": [710, 735], "dir": [710, 745], "mutual": [710, 722, 731], "venv": 710, "ivy_dev": [710, 715, 716], "bat": [710, 715, 716], "mac": [710, 715, 716], "linux": [710, 715, 716, 760, 762], "instal": [710, 711, 715, 716, 720, 721, 729, 749], "edit": [710, 714, 715, 716, 729], "pip": [710, 712, 715, 721, 729, 749], "immedi": [710, 715], "ivy_robot": [710, 749], "docker": [710, 712, 713], "desktop": [710, 715], "my": [710, 723], "mount": [710, 711, 716], "rm": [710, 711, 716], "pwd": [710, 711], "pycharm": [710, 712, 737], "vscode": [710, 715], "devcontain": [710, 715], "remot": [710, 715, 718, 729], "codespac": 710, "good": [710, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 742, 743, 746], "commit": [710, 712, 714, 718, 726, 737], "make_doc": 711, "sh": [711, 715, 716, 718, 723], "ssh": [711, 723], "make_docs_without_dock": [711, 721], "sphinx": [711, 721], "aim": [712, 716, 718, 732, 735, 737, 741, 755, 757, 760], "assist": 712, "navig": [712, 715, 716, 717], "actual": [712, 716, 717, 723, 731, 732, 734, 735, 736, 737, 740, 741, 746, 750, 758, 763], "runtimeerror": 712, "logaddexp2_cpu": 712, "falsifi": [712, 718, 737], "test_logaddexp2": 712, "backend_fw": [712, 736], "on_devic": [712, 736], "dtype_and_x": [712, 736, 737], "test_flag": [712, 736, 737], "functiontestflag": 712, "ground_truth_backend": [712, 736], "num_positional_arg": [712, 736, 737], "with_out": [712, 736, 737], "instance_method": [712, 737], "test_gradi": [712, 737], "test_compil": 712, "as_vari": [712, 736, 737], "fn_name": [712, 720, 736, 737], "reproduce_failur": [712, 718, 732, 737], "axicy2bkaamobaar2waaaacvaai": 712, "assertionerror": [712, 718, 728, 736, 737], "25830078125": 712, "258544921875": 712, "test_acosh": 712, "axicy2baabyqwqgiaabdaai": 712, "instabl": [712, 724], "41421356": 712, "41421356e": 712, "34078079e": 712, "154": 712, "test_ab": [712, 715, 737], "000j": 712, "154j": 712, "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": 712, "deal": [712, 725, 731, 733, 735, 750], "experiment": [712, 716, 724, 735, 738, 742, 757], "climb": 713, "steep": 713, "curv": 713, "realpython": 713, "pyn": 713, "platform": [713, 755, 759, 761], "stuck": [713, 714], "spell": 713, "though": [713, 714, 716, 724, 725, 727, 731, 734, 735, 740, 745, 750], "sound": [713, 723, 741], "peopl": [713, 715, 716, 717, 757, 759], "action": [713, 723, 726, 729, 737], "frequent": [714, 716, 720, 757], "outlin": [714, 715, 716, 717, 722, 724, 727, 731, 734, 735, 737], "broad": [714, 759], "individu": [714, 716, 718, 720, 724, 731, 735, 757, 760, 763, 764], "explan": [714, 715, 716, 722, 727, 730, 735, 738, 744], "focu": [714, 733, 755, 756, 759, 764], "pypi": [714, 715, 738, 750], "familiar": [714, 715], "hypothesi": [714, 716, 718, 723, 732], "fail": [714, 715, 716, 718, 723, 724, 726, 729, 732, 734, 735, 736], "sure": [714, 715, 716, 718, 723, 728, 735, 736, 737, 740, 751], "aforement": 714, "categori": [714, 718, 719, 722, 724, 728, 735, 738, 741], "arraywithelementwis": [714, 719, 744], "containerwithmanipul": 714, "thorough": [714, 727, 730, 737], "comment": [714, 715, 716, 718, 724, 729, 735, 740], "add_reformatting_checklist_": 714, "category_nam": [714, 724, 725, 727, 730, 731], "pr": [714, 716, 718, 729, 735, 736, 737], "autom": [714, 723, 729, 737, 752, 759], "bot": [714, 729], "markdown": [714, 721], "patient": [714, 715], "emoji": 714, "legend": 714, "mark": [714, 716, 718, 737, 742], "checkbox": [714, 715], "proce": [714, 715], "elabor": 714, "struggl": 714, "assigne": 714, "status": 714, "refrain": 714, "mindspor": 714, "subsect": [714, 715, 716, 718, 723], "verifi": [714, 724, 725, 735, 737, 738], "assess": [714, 740], "merg": [714, 716, 718, 723, 735, 757], "composition": 714, "pend": 714, "helpfulli": [714, 740, 755], "problemat": [714, 715], "unimpl": 714, "issue_link": 714, "alias": [714, 735, 736], "alias_nam": 714, "push": [714, 716, 718, 736, 737, 763], "liner": 714, "meanwhil": [714, 723], "reselect": 714, "placement": 714, "categoris": [714, 718, 735], "faithfulli": 714, "creation_routin": [714, 736], "indexing_routin": 714, "ma": 714, "manipulation_routin": 714, "mathematical_funct": [714, 735], "sorting_searching_count": 714, "ufunc": [714, 735], "matrix_and_vector_product": 714, "matrix_eigenvalu": 714, "norms_and_other_numb": 714, "solving_equations_and_inverting_matric": 714, "seem": [714, 715, 740, 746, 747, 750, 757], "namespac": [714, 724, 732, 735, 736, 738, 742, 747], "gleam": 714, "uncom": 714, "test_numpy_inn": 714, "ivy_test": [714, 715, 716, 718, 721, 723, 736], "test_ivi": [714, 715, 716, 721, 723, 736, 737], "test_frontend": [714, 723, 736], "unsur": [714, 737], "explor": [714, 715, 716, 724, 740, 743, 747, 749, 757, 760], "confirm": 714, "worri": [714, 715, 729], "readi": [714, 715], "analyz": [714, 752], "relevant_submodul": 714, "strategi": [714, 736], "invit": [714, 735, 740], "roadmap": [714, 723], "think": [714, 716, 723, 726, 740, 758], "deem": [714, 735], "subtask": 714, "defer": [714, 719, 724, 725, 731, 734, 735, 737, 763], "clearer": [714, 728, 736, 745], "backend_nam": [714, 720, 724, 725, 727, 730, 731, 732], "approach": [714, 715, 716, 719, 722, 724, 725, 731, 735, 737, 738, 740, 744, 745, 750, 754, 761, 763], "sometim": [714, 715, 716, 718, 724, 731, 735, 737, 740], "standalon": [714, 719, 737, 752, 753, 758, 763, 764], "conveni": [714, 724, 725, 730, 736, 743, 745, 746, 752, 763], "rare": [714, 725, 750, 762], "come": [714, 715, 716, 719, 723, 735, 739, 740, 746, 748, 752, 757], "tab": [714, 715, 723, 745], "click": [714, 715, 716, 723, 727, 729, 743], "button": [714, 715, 716], "centr": 714, "predetermin": 714, "report": [714, 737], "superset": [714, 717, 731, 734, 750], "reserv": 714, "interact": [714, 756, 757, 762], "submit": [714, 729], "your_usernam": 715, "your_fold": 715, "enter": [715, 716, 719, 724, 725, 730, 732], "sync": [715, 718], "nutshel": [715, 730], "hook": [715, 729], "lint": 715, "attempt": [715, 739, 750], "properli": [715, 717, 728, 729, 735, 737], "cours": [715, 716, 718, 719, 726, 734, 735, 740, 745, 750, 762, 763], "whatev": [715, 722, 750], "elig": 715, "student": 715, "licens": [715, 760], "remind": 715, "expir": 715, "profession": 715, "trial": 715, "jetbrain": 715, "bui": [715, 763], "paid": 715, "pace": 715, "person": [715, 716], "experi": [715, 728, 737, 743, 745, 750], "abil": [715, 740, 743, 750, 757], "perhap": [715, 744, 745, 746, 750, 763], "icon": [715, 716], "panel": 715, "palett": 715, "ctrl": [715, 716], "On": [715, 724, 725, 729, 735, 737, 740, 743, 747], "m1": 715, "optional_apple_silicon_1": 715, "optional_apple_silicon_2": 715, "builtin": [715, 744, 746], "cmd": 715, "virtualenv": 715, "tick": [715, 716, 723], "paddlepaddl": 715, "wget": 715, "nz2": 715, "archiv": 715, "openssl": 715, "libssl1": 715, "1_1": 715, "1f": 715, "1ubuntu2": 715, "19_amd64": 715, "deb": 715, "sudo": 715, "dpkg": 715, "array_api_test": [715, 716, 718], "test_array_api": [715, 716, 718, 737], "mitig": [715, 763], "conflict": [715, 716, 723, 735, 745], "powershel": 715, "admin": 715, "visit": [715, 716, 723], "menu": 715, "tag": [715, 716], "introspect": 715, "usr": 715, "dialog": 715, "persist": 715, "opt": [715, 720, 724, 734, 737, 740], "caus": [715, 716, 718, 720, 722, 723, 724, 726, 734, 736, 737, 750], "earlier": [715, 716, 724, 738], "virtualis": 715, "dropdown": [715, 723], "dockerfil": 715, "apt": 715, "ca": 715, "certif": 715, "curl": 715, "gnupg": 715, "lsb": 715, "mkdir": [715, 723], "keyr": 715, "fssl": 715, "gpg": 715, "dearmor": 715, "arch": 715, "lsb_releas": 715, "tee": 715, "null": 715, "ce": 715, "cli": 715, "containerd": 715, "io": [715, 723], "plugin": 715, "systemctl": 715, "permiss": [715, 723], "press": [715, 716, 745], "ok": 715, "successful": 715, "4a": 715, "socket": 715, "chmod": [715, 723], "rwx": 715, "sock": 715, "pid": 715, "coupl": [715, 719, 744, 746, 757], "editor": 715, "pytest": [715, 716, 718, 723, 732, 737], "keyboard": 715, "displai": [715, 721, 723, 728, 737, 745], "screenshot": 715, "test_elementwis": 715, "bar": 715, "shell": [715, 716], "run_tests_cli": [715, 718], "run_ivy_core_test": 715, "run_ivy_nn_test": 715, "run_ivy_stateful_test": 715, "run_test": [715, 723], "test_depend": 715, "test_ivy_cor": 715, "test_ivy_nn": 715, "test_ivy_st": 715, "unix": 715, "test_": [715, 736], "test_funct": [715, 716, 723, 736, 737], "test_cor": [715, 716, 736], "bash": [715, 716, 718], "offici": [715, 724, 742], "wish": [715, 735], "ivy_cor": 715, "ivy_nn": 715, "ivy_st": 715, "simplest": [715, 726, 737, 740], "header": [715, 716], "advanc": [715, 756], "arrow": 715, "test_stat": 715, "test_submodule_nam": 715, "test_function_nam": 715, "debugg": 715, "studio": [715, 737], "afterward": [715, 745], "restart": 715, "overlap": [715, 723, 738, 740, 758], "test_file_path": 715, "test_fn_nam": 715, "engin": [715, 757, 759, 760], "comma": 715, "postcreatecommand": 715, "post_create_command": 715, "poststartcommand": 715, "safe": [715, 735], "containerworkspacefold": 715, "reopen": 715, "test_fle_path": 715, "slash": 715, "computation": 715, "heavi": [715, 735, 736, 740, 758], "comfort": [715, 728], "isol": [715, 716, 758, 763], "fledg": [715, 742, 743], "container": 715, "intens": 715, "headach": 715, "arm": [715, 716], "vm": [715, 723], "azur": 715, "cloud": [715, 723, 749, 759], "longer": [715, 724, 734, 737, 757], "theme": [715, 721], "slow": 715, "ipad": 715, "browser": [715, 721], "quota": 715, "requisit": 715, "pane": [715, 716, 723], "six": [715, 740], "dockerfilegpu": 715, "ivv": 715, "multiv": 715, "multivers": [715, 738], "dockerfilemultivers": 715, "dockerhub": 715, "region": 715, "box": 715, "upto": [715, 716], "minut": [715, 723], "launch": 715, "kindli": 715, "guidelin": 715, "conatin": 715, "colour": 715, "chanc": 715, "troubleshoot": 715, "ever": 715, "flask": 715, "toolbar": [715, 716], "_array_modul": [715, 718], "refresh": 715, "workspac": 715, "pytestarg": 715, "unittesten": 715, "pytesten": 715, "autotestdiscoveronsaveen": 715, "conftest": 715, "quick": [716, 717, 736, 746], "tendenc": 716, "land": 716, "world": [716, 759], "fly": [716, 757], "hard": [716, 744, 757], "respons": [716, 723, 724], "internship": 716, "serv": [716, 719, 722, 730, 731, 735, 736, 737, 740, 741, 752, 755], "suspect": 716, "iii": 716, "reformat": [716, 729], "issue_numb": 716, "12345": 716, "delet": [716, 723], "clean": [716, 738, 742, 743, 745], "rememb": 716, "respond": 716, "dai": [716, 729], "freed": 716, "situat": [716, 723, 747], "upon": [716, 726, 734, 737, 740, 750, 756, 757], "unabl": [716, 740], "obvious": [716, 723], "qualiti": 716, "hypothet": 716, "frustrat": 716, "busi": 716, "fine": [716, 724, 726, 735, 744, 747, 763], "inact": 716, "me": 716, "unfairli": 716, "investig": 716, "wherea": [716, 719, 720, 722, 724, 725, 726, 730, 731, 737, 747, 754], "practic": [716, 720, 723, 735, 760], "checkout": [716, 718, 737], "name_of_your_branch": 716, "date": [716, 718], "complic": [716, 736, 742], "merge_with_upstream": 716, "abort": 716, "tediou": [716, 726, 740], "stash": [716, 729], "reinstat": 716, "fetch": [716, 718, 723], "uncommit": 716, "unstag": [716, 729], "untrack": 716, "comprehens": [716, 718], "atlassian": 716, "wrote": 716, "blame": 716, "revis": 716, "eg": 716, "grep": 716, "commit_id": 716, "handi": 716, "histori": 716, "toggl": 716, "highlight": [716, 723, 726, 735], "approv": 716, "someon": [716, 750], "hash": [716, 745], "cancel": 716, "speedup": 716, "unavail": 716, "tickbox": 716, "span": [716, 755, 763], "intent": [716, 734], "discourag": 716, "philosophi": 716, "valuabl": 716, "infrequ": 716, "earli": [716, 757], "wast": [716, 723], "spot": [716, 726, 731], "mistak": 716, "propos": [716, 735, 740, 757], "mountain": 716, "advoc": [716, 750], "session": [716, 757], "beauti": 716, "concern": [716, 717, 722, 724, 726, 734, 740, 741, 763], "undo": 716, "stress": 716, "nifti": 716, "reassur": 716, "local_path_to_ivi": 716, "subfold": [716, 736, 737, 738], "dep": 716, "fresh": 716, "arsen": 716, "declar": 716, "exec": 716, "rf": 716, "ivy_contain": 716, "test_imag": 716, "test_random_crop": 716, "test_creation_funct": 716, "test_arang": 716, "cursor": 716, "alt": 716, "blog": 716, "breakpoint": 716, "gutter": 716, "caret": 716, "f8": 716, "f9": 716, "Into": 716, "f7": 716, "smart": 716, "fragment": [716, 753, 755, 759], "dummi": 716, "wherein": [716, 731, 737], "failur": [716, 723, 736, 737], "who": [717, 728, 741, 750, 757, 759], "weed": [717, 741], "tour": 717, "runtim": [717, 731, 737, 740, 757], "conjunct": 718, "establish": [718, 759], "2020": [718, 757], "popular": [718, 757], "sens": [718, 726, 735, 744], "unconnect": 718, "initialis": [718, 735, 737], "everytim": [718, 724], "strang": [718, 744], "thoroughli": 718, "test_linalg": [718, 736], "test_set_funct": 718, "test_signatur": 718, "excess": [718, 720, 726], "array_modul": 718, "vv": 718, "test_manipulation_funct": 718, "test_concat": [718, 737], "nb": 718, "liber": 718, "fortun": 718, "______________________": 718, "test_remaind": 718, "_______________________": 718, "test_operators_and_elementwise_funct": 718, "1264": 718, "st": [718, 736, 737], "1277": 718, "binary_param_assert_against_refimpl": 718, "ctx": 718, "620": 718, "binary_assert_against_refimpl": 718, "324": 718, "scalar_o": 718, "17304064": 718, "binaryparamcontext": 718, "axic42baaowcnp": 718, "rumwmabaear0": 718, "make_binary_param": 718, "numeric_dtyp": 718, "left_strat": 718, "left_sym": 718, "right_strat": 718, "right_sym": 718, "right_is_scalar": 718, "binary_param_assert_dtyp": 718, "binary_param_assert_shap": 718, "recreat": 718, "unexpectedli": 718, "discrep": [718, 736], "varieti": [718, 723, 724, 725, 737, 739, 753, 755, 759, 760, 763, 764], "test_asarray_arrai": 718, "test_floor_divid": 718, "health": 718, "test_iop": 718, "__imod__": 718, "isequ": 718, "test_matrix_norm": 718, "alter": 718, "tweak": 718, "array_api_methods_to_test": 718, "test_trac": 718, "test_special_cas": 718, "__ipow__": 718, "is_integ": 718, "easier": [718, 719, 720, 724, 736, 738, 752, 757, 759], "revisit": [718, 730], "devicearrai": [719, 735, 742, 744], "wrapper": [719, 721, 722, 724, 728, 731, 734, 735, 744, 752, 753, 757], "_data": [719, 734, 735, 744], "organiz": [719, 722, 735], "inherit": [719, 722, 728, 744, 750, 752], "bear": [719, 722, 724, 735], "underpin": [719, 722, 742], "programmat": [719, 722, 758], "backup": [719, 721, 722], "accident": [719, 722, 735], "readabl": [719, 722, 728, 729, 730, 737, 738, 744, 745], "absent": [719, 722], "auto": [719, 721, 722, 729, 745], "__mul__": [719, 722, 726, 730, 740, 744], "throw": [719, 724, 725, 728, 744, 757], "imposs": 719, "inputs_to_native_arrai": [719, 731, 732], "outputs_to_ivy_arrai": [719, 724, 725, 730, 731, 732], "firstli": [719, 724, 726, 727, 728, 731, 732, 734, 740, 745, 753, 763], "anywai": [719, 732, 735], "secondli": [719, 724], "permit": [719, 730, 735, 737, 740], "dictat": [719, 726, 730, 734], "__ivy_array_function__": 719, "inspir": [719, 749], "__torch_function__": 719, "myarrai": 719, "handled_funct": 719, "notimpl": 719, "issubclass": 719, "four": [719, 724, 726, 730, 731, 737, 740, 745], "enough": [719, 723, 725, 737, 744, 745, 746], "ivy_funct": 719, "my_ab": 719, "my_arrai": 719, "Of": [719, 734, 735, 745, 762, 763], "subset": [719, 723, 727, 730, 733, 735, 737, 742, 757], "implicit_backend": [720, 742], "__dict__": [720, 734, 742], "ivy_original_dict": [720, 742], "get_backend": [720, 731], "fallback": 720, "challeng": [720, 763], "switch": [720, 728, 731, 732, 764], "scope": [720, 758, 762], "intermediari": 720, "illustr": [720, 742, 749], "set_dynamic_backend": 720, "unset_dynamic_backend": 720, "dynamic_backend_a": 720, "set_": 720, "unset_": 720, "technic": [720, 730, 734, 750, 757, 759], "setter": 720, "backend_handl": 720, "requires_grad": 720, "memory_format": 720, "preserve_format": 720, "weren": 720, "vast": [720, 724, 757], "minor": [720, 740, 750], "fn_name_v_1p12_and_abov": 720, "fn_name_v_1p01_to_1p1": 720, "heavili": [721, 732, 750], "characterist": 721, "conf": 721, "cleanup": 721, "disabl": 721, "procedur": [721, 723, 726, 736], "readm": [721, 750], "toctre": 721, "maxdepth": 721, "caption": 721, "related_work": 721, "deep_div": 721, "faq": 721, "glossari": 721, "autosummari": 721, "top_functional_toc": 721, "restructuredtext": 721, "render": [721, 727], "inlin": 721, "discov": [721, 724], "ivy_toctree_caption_map": 721, "stub": 721, "unfortun": [721, 729], "forc": [721, 723, 725], "linker": 721, "foo": 721, "discussion_channel_map": 721, "1000043690254946374": 721, "1000043749088436315": 721, "seri": [721, 735, 737, 757, 759], "discussion_paragraph": 721, "discord_link": 721, "channel_link": 721, "gg": 721, "zvqdvbznqj": 721, "799879767196958751": 721, "channel_id": 721, "paragraph": 721, "autoskippablemethod": 721, "skippable_method_attribut": 721, "__qualname__": 721, "autodoc": 721, "atribut": 721, "__doc__": 721, "autoivydata": 721, "containerwithelementwis": 722, "__repr__": 722, "__contains__": 722, "__getstate__": 722, "__setstate__": 722, "unpickl": 722, "num_dim": [722, 747], "__len__": 722, "enforc": [722, 744], "extern": [722, 730, 735, 737, 738], "lefthand": 722, "righthand": 722, "handle_nest": [722, 730, 731, 732, 742], "addition": [722, 734, 735, 763], "presenc": [722, 734], "absenc": [722, 730, 757], "implicitli": [722, 733, 737, 742], "log_pr": [722, 731, 734], "intuit": [722, 737, 745, 746, 753], "chronolog": 722, "concurr": [722, 723, 731, 757], "had": [722, 723, 734, 738, 742, 757, 758], "consum": [722, 723, 730, 736, 737], "__list__": 722, "But": [722, 723, 727, 729, 732, 740, 747], "implic": 722, "whatsoev": [722, 731, 752, 763], "eager": [722, 750, 757], "children": 722, "shallowest": 722, "deepest": 722, "regularli": 723, "rollback": 723, "incorpor": [723, 736, 745, 757], "techniqu": 723, "triplet": 723, "test_torch": [723, 736], "test_tensor": [723, 736], "test_torch_instance_arctan_": 723, "12500": 723, "daili": 723, "shoot": 723, "ideal": [723, 735, 740, 745], "impact": [723, 737, 746, 759], "_reduce_loss": [723, 731, 734], "test_nn": 723, "test_loss": 723, "test_binary_cross_entropy_with_logit": 723, "test_cross_entropi": 723, "test_binary_cross_entropi": 723, "test_sparse_cross_entropi": 723, "test_loss_funct": 723, "test_torch_binary_cross_entropi": 723, "test_torch_cross_entropi": 723, "binary_cross_entropy_with_logit": 723, "torch_binary_cross_entropi": 723, "torch_cross_entropi": 723, "underneath": [723, 755], "magic": 723, "readthedoc": 723, "affect": [723, 735], "pedagog": 723, "f_1": 723, "t_1": 723, "t_3": 723, "t_7": 723, "t_": 723, "f_m": 723, "cyclic": 723, "intellig": [723, 737, 759], "tests_fil": 723, "file_nam": [723, 737, 738], "del": 723, "intersect": [723, 737, 749], "tests_lin": 723, "elif": [723, 728, 734, 735, 736], "correspondingli": 723, "tests_to_run": 723, "determine_tests_lin": 723, "mongodb": 723, "databas": [723, 737], "secret": 723, "db": 723, "ssh_deploy_kei": 723, "suffic": [723, 732, 737], "massiv": 723, "constraint": [723, 724, 733], "mb": 723, "yml": 723, "felicit": 723, "clone_map": 723, "master": [723, 757], "home": 723, "deploy_kei": 723, "user_email": 723, "rashul": 723, "chutani": 723, "user_nam": 723, "target_branch": 723, "github_serv": 723, "deploy_key_fil": 723, "ssh_known_hosts_fil": 723, "known_host": 723, "keyscan": 723, "export": [723, 756, 763], "git_ssh_command": 723, "userknownhostsfil": 723, "methodologi": 723, "master1": 723, "restructur": 723, "_map": 723, "t_2": 723, "t_n": 723, "index_map": 723, "test_map": 723, "routin": [723, 734, 735, 740, 750, 757], "incorrect": 723, "snowbal": 723, "irrelev": [723, 724, 726], "recalibr": 723, "workflow_dispatch": 723, "schedul": [723, 750, 757, 764], "cron": 723, "saturdai": 723, "night": 723, "pm": 723, "gut": 723, "lesser": [723, 728], "lol": 723, "cater": 723, "master2": 723, "master32": 723, "synchron": 723, "runner2": 723, "corrupt": 723, "discard": 723, "decoupl": [723, 746], "150": 723, "cycl": [723, 737], "rashulchutani": 723, "yellow": 723, "queu": 723, "redirect": 723, "book": 723, "onrend": 723, "jo": 723, "ran": 723, "badg": 723, "clickabl": 723, "all_dtyp": 724, "all_numeric_dtyp": 724, "all_int_dtyp": 724, "all_float_dtyp": 724, "replic": [724, 733, 734, 735], "thirdli": 724, "native_float32": 724, "importantli": [724, 744, 747, 749], "arguabl": [724, 725, 735], "jaxarrai": [724, 725, 728, 730, 734, 738, 742], "_handle_0_dim_output": 724, "subtli": [724, 734], "promote_types_frontend_nam": 724, "promote_types_of_frontend_name_input": 724, "frontend_nam": 724, "demonstr": [724, 726, 728, 744], "accuraci": 724, "upcast": 724, "nearli": [724, 730, 732, 757], "downcast": 724, "footprint": 724, "concret": 724, "compound": 724, "infer_dtyp": [724, 725, 730, 732], "settabl": [724, 725], "handle_out_argu": [724, 725, 730, 731, 732, 734, 742], "infer_devic": [724, 725, 730, 732], "deleg": [724, 764], "shape_to_tupl": 724, "with_supported_dtyp": 724, "with_unsupported_dtyp": [724, 735], "unment": 724, "backend_vers": 724, "_cast_for_unary_op": [724, 731, 734], "target_typ": 724, "unsupported_dtyp": 724, "supported_dtypes_and_devic": 724, "with_unsupported_device_and_dtyp": 724, "globals_getter_func": 724, "f1": 724, "f2": 724, "lack": [724, 734, 757, 764], "inconsist": [724, 728, 733], "84530": 724, "unwarr": 724, "risk": [724, 763], "needlessli": 724, "bloat": 724, "undergo": [724, 750], "supported_dtyp": 724, "unsupported_devic": 724, "supported_devic": 724, "slight": [724, 737, 746], "downsid": 724, "inflat": 724, "undesir": 724, "accomplish": 724, "upcast_data_typ": 724, "downcast_data_typ": 724, "crosscast_data_typ": 724, "cast_data_typ": 724, "downcast_data_dtyp": 724, "tri": 724, "vice": 724, "versa": 724, "till": 724, "crosscast": 724, "exmp1": 724, "watch": [724, 735], "handle_numpy_arrays_in_specific_backend": [724, 730], "cate": 724, "understood": 724, "consumpt": [724, 761], "dual": 725, "categor": [725, 731, 735], "210": 725, "_handle_except": [725, 728], "1013": 725, "_handle_nest": [725, 728], "905": 725, "_handle_out_argu": [725, 728], "441": 725, "_inputs_to_native_arrai": [725, 728], "new_arg": [725, 728], "new_kwarg": [725, 728], "_outputs_to_ivy_arrai": [725, 728], "358": 725, "_handle_array_funct": [725, 728], "863": 725, "_handle_device_shift": 725, "handle_device_shift": [725, 732], "crucial": [725, 733], "device_shifting_dev": 725, "__enter__": 725, "exit": 725, "__exit__": 725, "mostli": [725, 734, 737], "soft_devic": 725, "eight": [726, 741], "op_nam": 726, "__r": 726, "recap": [726, 746], "combinatori": 726, "unus": [726, 734], "okai": [726, 740, 742], "meant": [726, 734], "spec": [726, 727], "my_func": [726, 738], "some_flag": 726, "another_flag": 726, "jointli": 726, "5574077": 726, "1850398": 726, "5463025": 726, "8422884": 726, "91601413": 726, "9647598": 726, "3738229": 726, "1597457": 726, "0963247": 726, "9955841": 726, "3278579": 726, "asid": [726, 749], "14254655": 726, "1578213": 726, "380515": 726, "trivial": [726, 734], "exlud": 726, "failing_fn_nam": 726, "onlin": [726, 727], "minutest": 726, "suffici": [726, 735, 737], "fault": [726, 757], "contrast": [727, 730, 735, 763], "instanti": 727, "preview": 727, "needless": [727, 736], "renam": [727, 735], "judgment": 727, "operator_nam": 727, "succinct": 727, "docst": 727, "native_error": 728, "isinst": [728, 735, 737, 738, 746, 747], "_combine_messag": 728, "truli": [728, 744], "wrong": [728, 729, 732, 735, 740], "198": 728, "392": 728, "_handle_array_like_without_promot": 728, "805": 728, "432": 728, "349": 728, "other_test": 728, "523": 728, "_handle_numpy_out": 728, "396": [728, 746], "_outputs_to_numpy_arrai": 728, "_inputs_to_ivy_arrays_np": 728, "ivy_arg": 728, "ivy_kwarg": 728, "453": 728, "_from_zero_dim_arrays_to_scalar": 728, "truth_value_test": 728, "217": 728, "visibl": 728, "unwieldi": 728, "awar": [728, 729], "squash": 728, "cleaner": [728, 745], "caught": [728, 729], "functool": [728, 735, 744], "rethrow": 728, "_print_traceback_histori": 728, "error_stack": 728, "axiserror": 728, "got": 728, "polici": [728, 732, 737, 739, 749], "moreov": 728, "met": 728, "black": 729, "flake8": 729, "formatt": 729, "linter": 729, "autoflak": 729, "docformatt": 729, "pydocstyl": 729, "cfg": 729, "yaml": 729, "patch1687898304": 729, "8072": 729, "3516aed563": 729, "akshai": 729, "jain": 729, "gui": 729, "cryptic": 729, "garden": 729, "utc": 729, "didn": 729, "human": 729, "intervent": 729, "typo": 729, "ui": 729, "handle_array_like_without_promot": [730, 732], "to_native_arrays_and_back": [730, 732, 742], "handle_array_funct": [730, 732], "inputs_to_native_shap": [730, 732], "sole": [730, 738, 756, 757, 758], "rational": [730, 734, 740], "__div__": [730, 740], "484": 730, "annot": 730, "brittl": 730, "freeli": 730, "inde": [730, 740, 750, 755], "original_typ": 730, "cumbersom": 730, "venn": 731, "diagram": [731, 763], "light": [731, 738, 750, 752, 758, 763], "maximis": 731, "array_arg": 731, "encompass": 731, "maxim": [731, 734, 742, 754, 755, 759, 760, 761], "partial_mixed_handl": [731, 732, 740], "handle_partial_mixed_funct": [731, 732, 740], "fn_decor": 731, "mixed_backend_wrapp": [731, 734], "to_add": 731, "to_skip": 731, "inputs_to_ivy_arrai": [731, 732], "modif": [731, 757], "briefli": [731, 737, 745], "get_all_arrays_on_dev": 731, "outputs_to_ivy_shap": 732, "outputs_to_native_arrai": 732, "handle_view_index": [732, 734], "handle_view": [732, 734], "handle_rag": 732, "handle_backend_invalid": 732, "handle_nan": 732, "to_native_shapes_and_back": 732, "scenario": 733, "inter_func": 733, "custom_grad_fn": 733, "args1": 733, "detach": 733, "eas": [733, 757], "captur": [733, 737, 747, 758], "program": [734, 754, 755, 757, 760, 761, 764], "speak": 734, "val_n": 734, "base_idx": 734, "_manipulation_stack": 734, "base_flat": 734, "_view_ref": 734, "_update_view": 734, "contigu": 734, "c_contigu": 734, "ascontiguousarrai": 734, "copyto": 734, "_is_vari": 734, "tensor_scatter_nd_upd": 734, "is_vari": 734, "_update_torch_view": 734, "predominantli": [734, 738, 749], "support_native_out": [734, 742], "_scalar_output_to_0d_arrai": 734, "_wrap_fn": 734, "dim0": 734, "dim1": 734, "res_floor": 734, "mul": [734, 744], "extent": [734, 735], "to_out_fn": 734, "add_wrapp": 734, "input_arrai": 734, "metadata": 734, "paradigm": [734, 750, 757], "expans": 734, "brief": [734, 737], "weak": 734, "_torch_bas": 734, "_torch_view_ref": 734, "_torch_manipul": 734, "weakli": 734, "adequ": 734, "exhaust": [734, 737, 754, 763], "tf_frontend": 735, "lax": [735, 736, 740, 747, 750], "fn_tree": [735, 736, 737], "torch_frontend": [735, 736], "numpy_frontend": 735, "jax_frontend": 735, "to_ivy_arrays_and_back": [735, 736], "fidel": 735, "algebra": [735, 755, 756, 757, 760, 764], "xla": [735, 750, 752, 757], "dynamic": 735, "mimic": 735, "arithmetic_oper": 735, "handle_numpy_out": 735, "handle_numpy_dtyp": 735, "handle_numpy_cast": 735, "from_zero_dim_arrays_to_scalar": 735, "_add": 735, "same_kind": 735, "subok": [735, 736, 740], "promote_types_of_numpy_input": 735, "underscor": 735, "unhandl": 735, "trigonometric_funct": 735, "_tan": 735, "check_tensorflow_cast": 735, "raw_op": [735, 736], "tackl": 735, "map_raw_ops_alia": 735, "unnecessari": 735, "output_typ": 735, "kwargs_to_upd": 735, "pointwise_op": 735, "slower": 735, "sensibl": 735, "ahead": [735, 738, 757], "reduce_logsumexp": 735, "input_tensor": 735, "logsumexp": 735, "trick": 735, "max_input_tensor": 735, "meet": 735, "preferred_element_typ": 735, "finer": 735, "logicaland": 735, "np_frontend": 735, "_ivy_arrai": 735, "radd": 735, "_init_data": 735, "_process_str_data": 735, "_dtype": [735, 736, 744], "_shape": [735, 744], "govern": 735, "promote_types_of_": 735, "_input": 735, "promote_types_of_torch_input": [735, 736], "saniti": 735, "handle_numpy_casting_speci": 735, "new_fn": 735, "equiv": 735, "unsaf": 735, "array_type_test": 735, "_isfinit": 735, "organis": 735, "youtub": 735, "jump": 736, "knowledg": 736, "handle_frontend_test": [736, 737], "handle_frontend_method": [736, 737], "test_frontend_funct": 736, "lift": [736, 758], "get_dtyp": [736, 737], "dtype_and_valu": [736, 737], "get_shap": [736, 737], "np_frontend_help": 736, "test_jax": 736, "test_lax": 736, "test_oper": 736, "available_dtyp": [736, 737], "test_with_out": [736, 737], "test_jax_tan": 736, "input_dtyp": [736, 737], "backend_to_test": 736, "test_numpi": 736, "test_mathematical_funct": 736, "test_trigonometric_funct": 736, "dtypes_values_cast": 736, "dtypes_values_casting_dtyp": 736, "arr_func": 736, "number_positional_arg": 736, "get_num_positional_args_ufunc": 736, "test_numpy_tan": 736, "handle_where_and_array_bool": 736, "test_tensorflow": 736, "test_math": 736, "test_tensorflow_tan": 736, "test_pointwise_op": 736, "test_torch_tan": 736, "_fill_valu": 736, "update_backend": 736, "test_glob": 736, "min_valu": [736, 737], "max_valu": [736, 737], "allow_non": [736, 737], "min_num_dim": [736, 737], "max_num_dim": [736, 737], "min_dim_s": [736, 737], "max_dim_s": 736, "test_jax_ful": 736, "test_from_shape_or_valu": 736, "_input_fill_and_dtyp": 736, "dtype_and_input": 736, "large_abs_safety_factor": [736, 737], "small_abs_safety_factor": 736, "safety_factor_scal": [736, 737], "dtype_to_cast": 736, "input_fill_dtyp": 736, "test_numpy_ful": 736, "test_raw_op": 736, "test_tensorflow_fil": 736, "test_creation_op": 736, "with_arrai": 736, "sampled_from": [736, 737], "test_torch_ful": 736, "test_valu": [736, 737], "add_nois": 736, "all_clos": 736, "_get_dtype_and_matrix": 736, "test_torch_qr": 736, "frontend_ret": 736, "frontend_q": 736, "frontend_r": 736, "assert_all_clos": 736, "ret_np": 736, "ret_from_gt_np": 736, "walkthrough": 736, "comparison_op": 736, "test_comparison_op": 736, "num_arrai": [736, 737], "allow_inf": [736, 737], "shared_dtyp": 736, "test_torch_great": 736, "all_alias": 736, "class_tre": 736, "init_tre": 736, "method_nam": 736, "test_frontend_method": 736, "init_input_dtyp": 736, "init_all_as_kwargs_np": 736, "intial": 736, "method_input_dtyp": 736, "method_all_as_kwargs_np": 736, "test_ndarrai": 736, "test_numpy_instance_add__": 736, "frontend_method_data": 736, "init_flag": [736, 737], "method_flag": [736, 737], "test_tensorflow_instance_add": 736, "method_tre": [736, 737], "1e04": 736, "allow_infin": 736, "test_torch_instance_add": 736, "atol_": 736, "_arrays_idx_n_dtyp": 736, "test_manipul": [736, 737], "surprisingli": 736, "closest_relevant_group": 736, "strive": [736, 737, 740, 750, 759], "fixtur": 737, "eleg": [737, 757], "unexplor": 737, "upload": 737, "artifact": 737, "bespok": 737, "_array_or_typ": 737, "test_default_int_dtyp": 737, "clariti": [737, 740, 757], "print_hypothesis_exampl": 737, "searchstrategi": 737, "custom_strategi": 737, "randomis": 737, "simplist": 737, "intricaci": 737, "glanc": 737, "capabl": [737, 740], "one_of": 737, "datum": 737, "pipe": 737, "shorthand": 737, "array_or_scal": 737, "len_of_arrai": 737, "test_add": 737, "gradient_test": 737, "test_gpu_is_avail": 737, "handle_test": 737, "pretest": 737, "handle_method": 737, "thankfulli": 737, "as_variable_flag": 737, "min_siz": 737, "max_siz": 737, "native_array_flag": 737, "container_flag": 737, "test_instance_method": 737, "test_inplac": 737, "seamlessli": 737, "criterion": 737, "array_valu": 737, "valid_ax": 737, "craft": 737, "hoc": 737, "44758124e": 737, "11228": 737, "456": 737, "268": 737, "wherev": 737, "dtype_values_axi": 737, "9622": 737, "28136": 737, "6375": 737, "12720": 737, "21354": 737, "900e": 737, "955e": 737, "exclude_min": 737, "57384": 737, "25687": 737, "248": 737, "array_dtyp": 737, "array_bool": 737, "test_devic": 737, "array_shap": 737, "common_shap": 737, "test_lay": 737, "size_bound": 737, "reshape_shap": 737, "stand": 737, "some_sequ": 737, "allow_nan": 737, "allow_subnorm": 737, "get_bound": 737, "arrays_valu": 737, "36418": 737, "213": 737, "21716926": 737, "none_or_list_of_float": 737, "get_prob": 737, "103515625e": 737, "099609375": 737, "probabilist": 737, "get_axi": 737, "number_positional_argu": 737, "unreproduc": 737, "x_and_linear": 737, "mixed_fn_compo": 737, "is_torch_backend": 737, "x_shape": [737, 742], "weight_shap": 737, "bias_shap": 737, "ivy_np": 737, "valid_float_dtyp": 737, "test_demo": 737, "failing_test": 737, "traceback": 737, "shrink": 737, "prescrib": 737, "scratch": 737, "therebi": 737, "test_gelu": 737, "test_fil": 737, "phase": [737, 750, 757], "notabl": [737, 757], "newer": 737, "max_exampl": 737, "deadlin": 737, "weird": 737, "systemat": 737, "safeguard": 737, "inabl": 737, "test_result_typ": 737, "9090909090909091": 737, "judgement": 738, "some_namespac": 738, "some_backend": 738, "another_backend": 738, "refactor": 738, "ongo": 738, "_assert_fill_value_and_dtype_are_compat": 738, "_to_devic": 738, "pin": 738, "conclud": 738, "unpinn": 738, "culmin": 738, "unsett": 739, "array_significant_figur": 739, "figur": 739, "array_decimal_valu": 739, "warning_level": 739, "nan_polici": 739, "stablest": 739, "answer": [740, 744, 750], "contradict": 740, "entail": 740, "sacrif": 740, "jacfwd": 740, "jacrev": 740, "banner": 740, "expens": 740, "incredibli": [740, 745, 750, 760], "price": 740, "pai": 740, "intrus": 740, "x_beta": 740, "equip": 740, "priorit": 740, "simplif": 740, "allevi": 740, "ineffici": [740, 750, 757], "fuse": 740, "hybrid": 740, "workaround": 740, "slip": 740, "radar": 740, "stumbl": 740, "fulfil": 741, "syntact": [742, 747], "power_seq": 742, "backend_stack": 742, "_determine_backend_from_arg": 742, "importlib": 742, "_backend_dict": 742, "x_flat": 742, "wi": 742, "wi_x": 742, "wii_x": 742, "wif_x": 742, "wig_x": 742, "wio_x": 742, "wh": 742, "ht": 742, "ct": 742, "hts_list": 742, "wii_xt": 742, "wif_xt": 742, "wig_xt": 742, "wio_xt": 742, "zip": 742, "htm1": 742, "ctm1": 742, "wh_htm1": 742, "whi_htm1": 742, "whf_htm1": 742, "whg_htm1": 742, "who_htm1": 742, "ft": 742, "ot": 742, "reliabl": 742, "sacrific": 742, "hear": 742, "virtu": [742, 754], "pure_ivi": 742, "compile_graph": [742, 747], "pure_torch": 742, "_layer": 742, "unclean": 742, "wx": 742, "temp": 742, "ivy_func": 742, "emphas": 742, "torchscript": [742, 752, 764], "example_input": 742, "primit": [743, 750, 755, 757], "upcom": 743, "hierarch": [743, 745, 746, 757], "arraywithactiv": 744, "arraywithcr": 744, "arraywithdatatyp": 744, "arraywithdevic": 744, "arraywithgener": 744, "arraywithgradi": 744, "arraywithimag": 744, "arraywithlay": 744, "arraywithlinearalgebra": 744, "arraywithloss": 744, "arraywithmanipul": 744, "arraywithnorm": 744, "arraywithrandom": 744, "arraywithsearch": 744, "arraywithset": 744, "arraywithsort": 744, "arraywithstatist": 744, "arraywithutil": 744, "_init": 744, "_size": 744, "_devic": 744, "_dev_str": 744, "_pre_repr": 744, "_post_repr": 744, "framework_str": 744, "noinspect": 744, "pypep8nam": 744, "immut": 744, "claim": 744, "_native_wrapp": 744, "genuin": 744, "some_method": 744, "rewritten": 744, "compartment": 744, "newshap": 744, "new_shap": 744, "tidi": 744, "crystal": 744, "ton": 745, "ado": [745, 746], "arbitrarili": 745, "soup": 745, "walk": [745, 746], "cnt": 745, "combo": 745, "3333335": 745, "delimit": 745, "autocomplet": 745, "midwai": 745, "agent": 745, "total_spe": 745, "total_height": 745, "total_width": 745, "ag": 745, "tot": 745, "total_": 745, "total_h": 745, "cnt0": 745, "cnt1": 745, "diff_0": 745, "diff_1": 745, "config0": 745, "config1": 745, "decod": 745, "l0": 745, "decoder__l0": 745, "decoder__l1": 745, "encoder__l0": 745, "encoder__l1": 745, "l0__b": 745, "l0__w": 745, "l1__b": 745, "l1__w": 745, "printabl": 745, "obviou": [745, 757], "foresight": 745, "untidili": 745, "update_ag": 745, "normalize_img": 745, "img_max": 745, "reduce_max": 745, "img_min": 745, "reduce_min": 745, "img_rang": 745, "agent_posit": 745, "agent_veloc": 745, "agent_cam_front_rgb": 745, "agent_cam_front_depth": 745, "agent_cam_rear_rgb": 745, "agent_cam_rear_depth": 745, "agent_cam_lidar": 745, "camera": 745, "front_rgb": 745, "front_depth": 745, "rear_rgb": 745, "rear_depth": 745, "lidar": 745, "rgb": 745, "rear": 745, "veloc": 745, "cam": 745, "cam_max": 745, "cam_min": 745, "cam_rang": 745, "five": 745, "perman": 745, "thread": [745, 757], "pretti": [745, 763], "straightforward": 745, "dataload": [745, 748], "_cnt": 745, "img_": 745, "png": 745, "_dataset_s": 745, "_batch_siz": 745, "_count": [745, 746], "__next__": 745, "img_fnam": 745, "loaded_img": 745, "cv2": 745, "imread": 745, "from_numpi": 745, "batch_slic": 745, "mymodel": 745, "x_in": [745, 746, 747], "0145": 745, "addbackward0": 745, "_create_vari": 746, "_input_channel": 746, "_output_channel": 746, "_w_shape": 746, "_b_shape": 746, "_with_bia": 746, "764": 746, "872": 746, "211": 746, "439": 746, "nightmar": 746, "overcom": 746, "v0": 746, "v1": 746, "key0": 746, "linear3": 746, "v2": 746, "counter": 746, "_w_init": 746, "_b_init": 746, "misnom": 746, "saw": 746, "_beta1": 746, "_beta2": 746, "_epsilon": 746, "_mw": 746, "_vw": 746, "_first_pass": 746, "_should_compil": 746, "new_v": 746, "_lr": 746, "_inplac": 746, "_stop_gradi": 746, "clip_by_valu": 747, "sparse_funct": 747, "_linear": 747, "jax_graph": 747, "to_backend": 747, "thinli": 747, "to_haiku_modul": 747, "loss_fn_t": 747, "without_apply_rng": 747, "update_rul": 747, "tree_multimap": 747, "differenti": [749, 757], "pose": 749, "quaternion": 749, "ivy_mech": 749, "target_facing_rotation_matrix": 749, "polar_to_cartesian_coord": 749, "warp": 749, "optic": 749, "voxel": 749, "ivy_vis": 749, "coords_to_voxel_grid": 749, "render_pixel_coord": 749, "radianc": 749, "nerf": 749, "trajectori": 749, "motion": 749, "mobil": [749, 757], "sample_spline_path": 749, "rigidmobil": 749, "sample_bodi": 749, "drone": 749, "sample_link": 749, "openai": 749, "swimmer": 749, "reward": 749, "supervis": 749, "door": [749, 750], "cartpol": 749, "mountain_car": 749, "pendulum": 749, "reacher": 749, "learnt": 749, "ture": 749, "ntm": 749, "egospher": 749, "esm": 749, "ivy_memori": 749, "egocentr": 749, "room": 749, "doubt": 750, "grate": 750, "probe": 750, "remark": 750, "lock": 750, "gold": 750, "dex": 750, "ye": 750, "tricki": [750, 752], "predictor": 750, "tight": 750, "driver": 750, "dispatch": [750, 757, 760], "ast": 750, "checkpoint": 750, "autodiff": 750, "shine": 750, "merci": 750, "autograd": 750, "compet": [750, 757], "parallelis": 750, "spmd": 750, "mixtur": 750, "expert": 750, "sophist": 750, "depart": 750, "hundr": 750, "thousand": 750, "broadli": [750, 763], "supplementari": 750, "reusabl": [750, 755, 757], "fanci": [750, 757], "fusion": [750, 761], "lose": 750, "pmap": 750, "eventu": 750, "supplement": 750, "backdoor": 750, "callback": 750, "record": [750, 758], "somewhat": [750, 757], "outsourc": 750, "nail": 752, "asset": 752, "scientist": 752, "correl": 752, "conceptu": [753, 758], "broken": [753, 757], "tracer": 753, "infrastructur": [753, 759, 760], "vendor": [753, 759], "complimentari": [753, 763], "acycl": [753, 758], "insert_numb": 754, "insert_t": 754, "scaffold": [755, 763], "heart": 755, "toolchain": [755, 760], "intermedi": [755, 756, 757, 758, 763], "ir": [755, 758, 763], "assembli": [755, 762, 763], "idl": 755, "middl": 755, "emit": 755, "gnu": [755, 760], "gcc": [755, 762], "broader": 755, "heterogen": 755, "aid": 755, "coprocessor": 755, "ai": [755, 759], "programm": [755, 762], "gate": 755, "onednn": 755, "sit": [755, 758, 763], "tandem": 755, "possess": 755, "khrono": [756, 762], "appl": 756, "coremltool": 756, "albeit": 756, "promin": 757, "abbrevi": 757, "laboratori": 757, "proprietari": [757, 761, 762], "mathwork": 757, "commerci": 757, "1984": 757, "toolbox": 757, "mupad": 757, "simulink": 757, "graphic": [757, 761, 762], "simul": 757, "million": [757, 760], "worldwid": 757, "scienc": [757, 759], "econom": 757, "2001": 757, "scientif": 757, "od": 757, "solver": 757, "cython": 757, "friendli": 757, "2002": 757, "lua": 757, "luajit": 757, "idiap": 757, "epfl": 757, "2005": 757, "numarrai": 757, "cpython": 757, "partli": 757, "2007": 757, "regress": [757, 764], "forest": 757, "boost": 757, "dbscan": 757, "inbuilt": 757, "esqu": 757, "aesara": 757, "datafram": 757, "critic": [757, 763], "2012": 757, "Its": 757, "polymorph": 757, "mpi": 757, "openmp": 757, "glue": 757, "jaot": 757, "nasa": 757, "cern": 757, "climat": 757, "allianc": 757, "influenti": 757, "2014": 757, "scala": 757, "ship": 757, "forgiv": 757, "decemb": 757, "announc": 757, "mainten": 757, "v7": 757, "meaning": 757, "2016": 757, "imper": 757, "amazon": 757, "traction": 757, "cognit": [757, 764], "toolkit": [757, 758, 764], "grade": 757, "realiz": 757, "dnn": 757, "cnn": 757, "rnn": 757, "backpropag": 757, "succumb": 757, "came": 757, "monitor": 757, "practition": [757, 761, 762, 763], "hobbyist": 757, "tremend": 757, "ecosystem": 757, "gear": 757, "batteri": 757, "zygot": 757, "jl": 757, "workload": 757, "daggerflux": 757, "frontier": 757, "hessian": 757, "2018": 757, "lightweight": [757, 764], "shortcom": 757, "barrier": 757, "inexperienc": 757, "underdevelop": 757, "fanat": 757, "ounc": 757, "infanc": 757, "emerg": 757, "nich": 757, "introduct": 757, "lite": 757, "enterpris": 757, "reinvent": [757, 759], "inertia": 757, "creator": [757, 759], "paszk": 757, "hi": 757, "safeti": 757, "bulk": 757, "haskel": 757, "dataflow": 758, "distil": 758, "essenc": [758, 763], "enclos": 758, "trace_modul": 758, "scriptfunct": 758, "scriptmodul": 758, "fake": 758, "proxi": 758, "site": 758, "graphmodul": 758, "travi": 759, "oliph": 759, "leader": 759, "cornerston": 759, "numba": 759, "numfocu": 759, "pydata": 759, "confer": 759, "consult": 759, "servic": 759, "expertis": 759, "devop": 759, "mlop": 759, "dashboard": 759, "startup": 759, "mlir": [759, 760, 763], "Their": 759, "held": 759, "privileg": 759, "presum": 759, "llvm": [759, 762], "founder": 759, "tvm": [759, 763], "sustain": 759, "empow": 759, "har": 759, "burden": 759, "benchmark": 759, "convention": 760, "precompil": 760, "executor": 760, "julia": [760, 763], "fsf": 760, "gpl": 760, "biggest": [760, 763], "nvidia": [761, 762], "conduct": 761, "throughput": 761, "autotun": 761, "gpgpu": 761, "talk": 762, "classic": 762, "sycl": 762, "dpc": 762, "processor": 762, "maco": 762, "x86": 762, "oneapi": 762, "ia": 762, "aka": 762, "xeon": 762, "gen9": 762, "xe": 762, "arria": 762, "gx": 762, "fpga": 762, "tune": [762, 763], "lofti": 763, "ambit": 763, "realm": 763, "bedrock": 763, "flux": 763, "bite": 763, "chew": 763, "eagerpi": 763, "tensorli": 763, "thinc": 763, "neuropod": 763, "exhibit": 763, "emploi": 763, "fx": 763, "retrain": 763, "closer": 763, "greatli": 763, "modular": 763, "anywher": 763, "theano": 764, "plaidml": 764, "partial_svd": 764, "excel": 764, "subsystem": 764}, "objects": {"ivy.Array": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [526, 0, 1, "", "adam_step"], [527, 0, 1, "", "adam_update"], [324, 0, 1, "", "adaptive_avg_pool1d"], [325, 0, 1, "", "adaptive_avg_pool2d"], [326, 0, 1, "", "adaptive_max_pool2d"], [177, 0, 1, "", "add"], [354, 0, 1, "", "adjoint"], [676, 0, 1, "", "all"], [446, 0, 1, "", "all_equal"], [275, 0, 1, "", "allclose"], [178, 0, 1, "", "angle"], [677, 0, 1, "", "any"], [653, 0, 1, "", "argmax"], [654, 0, 1, "", "argmin"], [662, 0, 1, "", "argsort"], [655, 0, 1, "", "argwhere"], [449, 0, 1, "", "array_equal"], [379, 0, 1, "", "as_strided"], [78, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [450, 0, 1, "", "assert_supports_inplace"], [380, 0, 1, "", "associative_scan"], [106, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [381, 0, 1, "", "atleast_1d"], [382, 0, 1, "", "atleast_2d"], [383, 0, 1, "", "atleast_3d"], [328, 0, 1, "", "avg_pool1d"], [329, 0, 1, "", "avg_pool2d"], [330, 0, 1, "", "avg_pool3d"], [415, 0, 1, "", "batch_norm"], [421, 0, 1, "", "bernoulli"], [422, 0, 1, "", "beta"], [276, 0, 1, "", "binarizer"], [605, 0, 1, "", "binary_cross_entropy"], [433, 0, 1, "", "bincount"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [258, 0, 1, "", "blackman_window"], [107, 0, 1, "", "broadcast_arrays"], [108, 0, 1, "", "broadcast_to"], [109, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [575, 0, 1, "", "cholesky"], [608, 0, 1, "", "clip"], [452, 0, 1, "", "clip_matrix_norm"], [453, 0, 1, "", "clip_vector_norm"], [609, 0, 1, "", "concat"], [386, 0, 1, "", "concat_from_sequence"], [355, 0, 1, "", "cond"], [277, 0, 1, "", "conj"], [610, 0, 1, "", "constant_pad"], [561, 0, 1, "", "conv1d"], [562, 0, 1, "", "conv1d_transpose"], [563, 0, 1, "", "conv2d"], [564, 0, 1, "", "conv2d_transpose"], [565, 0, 1, "", "conv3d"], [566, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "copy_array"], [278, 0, 1, "", "copysign"], [434, 0, 1, "", "corrcoef"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [279, 0, 1, "", "count_nonzero"], [435, 0, 1, "", "cov"], [576, 0, 1, "", "cross"], [606, 0, 1, "", "cross_entropy"], [436, 0, 1, "", "cummax"], [437, 0, 1, "", "cummin"], [666, 0, 1, "", "cumprod"], [667, 0, 1, "", "cumsum"], [331, 0, 1, "", "dct"], [456, 0, 1, "", "default"], [193, 0, 1, "", "deg2rad"], [569, 0, 1, "", "depthwise_conv2d"], [577, 0, 1, "", "det"], [151, 0, 1, "", "dev"], [332, 0, 1, "", "dft"], [578, 0, 1, "", "diag"], [356, 0, 1, "", "diagflat"], [579, 0, 1, "", "diagonal"], [280, 0, 1, "", "diff"], [281, 0, 1, "", "digamma"], [423, 0, 1, "", "dirichlet"], [194, 0, 1, "", "divide"], [357, 0, 1, "", "dot"], [570, 0, 1, "", "dropout"], [333, 0, 1, "", "dropout1d"], [334, 0, 1, "", "dropout2d"], [335, 0, 1, "", "dropout3d"], [387, 0, 1, "", "dsplit"], [388, 0, 1, "", "dstack"], [117, 0, 1, "", "dtype"], [358, 0, 1, "", "eig"], [581, 0, 1, "", "eigh"], [359, 0, 1, "", "eigh_tridiagonal"], [360, 0, 1, "", "eigvals"], [582, 0, 1, "", "eigvalsh"], [457, 0, 1, "", "einops_rearrange"], [458, 0, 1, "", "einops_reduce"], [459, 0, 1, "", "einops_repeat"], [668, 0, 1, "", "einsum"], [249, 0, 1, "", "elu"], [336, 0, 1, "", "embedding"], [86, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [460, 0, 1, "", "exists"], [197, 0, 1, "", "exp"], [198, 0, 1, "", "exp2"], [389, 0, 1, "", "expand"], [611, 0, 1, "", "expand_dims"], [199, 0, 1, "", "expm1"], [259, 0, 1, "", "eye_like"], [337, 0, 1, "", "fft"], [338, 0, 1, "", "fft2"], [390, 0, 1, "", "fill_diagonal"], [119, 0, 1, "", "finfo"], [282, 0, 1, "", "fix"], [391, 0, 1, "", "flatten"], [612, 0, 1, "", "flip"], [392, 0, 1, "", "fliplr"], [393, 0, 1, "", "flipud"], [283, 0, 1, "", "float_power"], [200, 0, 1, "", "floor"], [201, 0, 1, "", "floor_divide"], [284, 0, 1, "", "fmax"], [202, 0, 1, "", "fmin"], [203, 0, 1, "", "fmod"], [394, 0, 1, "", "fold"], [461, 0, 1, "", "fourier_encode"], [285, 0, 1, "", "frexp"], [88, 0, 1, "", "from_dlpack"], [91, 0, 1, "", "full_like"], [424, 0, 1, "", "gamma"], [464, 0, 1, "", "gather"], [465, 0, 1, "", "gather_nd"], [204, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [468, 0, 1, "", "get_num_dims"], [286, 0, 1, "", "gradient"], [530, 0, 1, "", "gradient_descent_update"], [205, 0, 1, "", "greater"], [206, 0, 1, "", "greater_equal"], [416, 0, 1, "", "group_norm"], [60, 0, 1, "", "hardswish"], [470, 0, 1, "", "has_nans"], [395, 0, 1, "", "heaviside"], [438, 0, 1, "", "histogram"], [396, 0, 1, "", "hsplit"], [397, 0, 1, "", "hstack"], [374, 0, 1, "", "huber_loss"], [287, 0, 1, "", "hypot"], [398, 0, 1, "", "i0"], [341, 0, 1, "", "idct"], [342, 0, 1, "", "ifft"], [343, 0, 1, "", "ifftn"], [439, 0, 1, "", "igamma"], [122, 0, 1, "", "iinfo"], [207, 0, 1, "", "imag"], [361, 0, 1, "", "initialize_tucker"], [583, 0, 1, "", "inner"], [472, 0, 1, "", "inplace_decrement"], [473, 0, 1, "", "inplace_increment"], [474, 0, 1, "", "inplace_update"], [417, 0, 1, "", "instance_norm"], [345, 0, 1, "", "interpolate"], [584, 0, 1, "", "inv"], [476, 0, 1, "", "is_array"], [125, 0, 1, "", "is_bool_dtype"], [127, 0, 1, "", "is_float_dtype"], [129, 0, 1, "", "is_int_dtype"], [477, 0, 1, "", "is_ivy_array"], [478, 0, 1, "", "is_ivy_container"], [480, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [288, 0, 1, "", "isclose"], [208, 0, 1, "", "isfinite"], [481, 0, 1, "", "isin"], [209, 0, 1, "", "isinf"], [210, 0, 1, "", "isnan"], [211, 0, 1, "", "isreal"], [483, 0, 1, "", "itemsize"], [363, 0, 1, "", "kron"], [375, 0, 1, "", "l1_loss"], [418, 0, 1, "", "l1_normalize"], [419, 0, 1, "", "l2_normalize"], [532, 0, 1, "", "lamb_update"], [533, 0, 1, "", "lars_update"], [646, 0, 1, "", "layer_norm"], [212, 0, 1, "", "lcm"], [289, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [290, 0, 1, "", "lerp"], [213, 0, 1, "", "less"], [214, 0, 1, "", "less_equal"], [428, 0, 1, "", "lexsort"], [291, 0, 1, "", "lgamma"], [571, 0, 1, "", "linear"], [92, 0, 1, "", "linspace"], [215, 0, 1, "", "log"], [216, 0, 1, "", "log10"], [217, 0, 1, "", "log1p"], [218, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [219, 0, 1, "", "logaddexp"], [220, 0, 1, "", "logaddexp2"], [221, 0, 1, "", "logical_and"], [222, 0, 1, "", "logical_not"], [223, 0, 1, "", "logical_or"], [224, 0, 1, "", "logical_xor"], [250, 0, 1, "", "logit"], [251, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "logspace"], [420, 0, 1, "", "lp_normalize"], [572, 0, 1, "", "lstm_update"], [365, 0, 1, "", "make_svd_non_negative"], [586, 0, 1, "", "matmul"], [399, 0, 1, "", "matricize"], [366, 0, 1, "", "matrix_exp"], [587, 0, 1, "", "matrix_norm"], [588, 0, 1, "", "matrix_power"], [589, 0, 1, "", "matrix_rank"], [590, 0, 1, "", "matrix_transpose"], [669, 0, 1, "", "max"], [346, 0, 1, "", "max_pool1d"], [347, 0, 1, "", "max_pool2d"], [348, 0, 1, "", "max_pool3d"], [225, 0, 1, "", "maximum"], [670, 0, 1, "", "mean"], [440, 0, 1, "", "median"], [265, 0, 1, "", "mel_weight_matrix"], [94, 0, 1, "", "meshgrid"], [671, 0, 1, "", "min"], [226, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [367, 0, 1, "", "mode_dot"], [292, 0, 1, "", "modf"], [400, 0, 1, "", "moveaxis"], [663, 0, 1, "", "msort"], [368, 0, 1, "", "multi_dot"], [573, 0, 1, "", "multi_head_attention"], [369, 0, 1, "", "multi_mode_dot"], [647, 0, 1, "", "multinomial"], [227, 0, 1, "", "multiply"], [228, 0, 1, "", "nan_to_num"], [441, 0, 1, "", "nanmean"], [442, 0, 1, "", "nanmedian"], [443, 0, 1, "", "nanprod"], [293, 0, 1, "", "nansum"], [95, 0, 1, "", "native_array"], [229, 0, 1, "", "negative"], [294, 0, 1, "", "nextafter"], [656, 0, 1, "", "nonzero"], [230, 0, 1, "", "not_equal"], [96, 0, 1, "", "one_hot"], [98, 0, 1, "", "ones_like"], [534, 0, 1, "", "optimizer_update"], [445, 0, 1, "", "optional_get_element"], [591, 0, 1, "", "outer"], [401, 0, 1, "", "pad"], [402, 0, 1, "", "partial_fold"], [403, 0, 1, "", "partial_tensor_to_vec"], [370, 0, 1, "", "partial_tucker"], [404, 0, 1, "", "partial_unfold"], [405, 0, 1, "", "partial_vec_to_tensor"], [613, 0, 1, "", "permute_dims"], [592, 0, 1, "", "pinv"], [425, 0, 1, "", "poisson"], [231, 0, 1, "", "positive"], [232, 0, 1, "", "pow"], [252, 0, 1, "", "prelu"], [672, 0, 1, "", "prod"], [593, 0, 1, "", "qr"], [444, 0, 1, "", "quantile"], [233, 0, 1, "", "rad2deg"], [648, 0, 1, "", "randint"], [649, 0, 1, "", "random_normal"], [650, 0, 1, "", "random_uniform"], [234, 0, 1, "", "real"], [235, 0, 1, "", "reciprocal"], [300, 0, 1, "", "reduce"], [352, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [253, 0, 1, "", "relu6"], [236, 0, 1, "", "remainder"], [614, 0, 1, "", "repeat"], [615, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [353, 0, 1, "", "rfftn"], [616, 0, 1, "", "roll"], [407, 0, 1, "", "rot90"], [237, 0, 1, "", "round"], [574, 0, 1, "", "scaled_dot_product_attention"], [488, 0, 1, "", "scatter_flat"], [489, 0, 1, "", "scatter_nd"], [664, 0, 1, "", "searchsorted"], [254, 0, 1, "", "selu"], [502, 0, 1, "", "shape"], [652, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [238, 0, 1, "", "sign"], [295, 0, 1, "", "signbit"], [256, 0, 1, "", "silu"], [239, 0, 1, "", "sin"], [296, 0, 1, "", "sinc"], [240, 0, 1, "", "sinh"], [594, 0, 1, "", "slogdet"], [377, 0, 1, "", "smooth_l1_loss"], [378, 0, 1, "", "soft_margin_loss"], [408, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [595, 0, 1, "", "solve"], [665, 0, 1, "", "sort"], [607, 0, 1, "", "sparse_cross_entropy"], [297, 0, 1, "", "sparsify_tensor"], [617, 0, 1, "", "split"], [241, 0, 1, "", "sqrt"], [242, 0, 1, "", "square"], [618, 0, 1, "", "squeeze"], [503, 0, 1, "", "stable_divide"], [504, 0, 1, "", "stable_pow"], [619, 0, 1, "", "stack"], [673, 0, 1, "", "std"], [535, 0, 1, "", "stop_gradient"], [505, 0, 1, "", "strides"], [243, 0, 1, "", "subtract"], [674, 0, 1, "", "sum"], [506, 0, 1, "", "supports_inplace_updates"], [596, 0, 1, "", "svd"], [371, 0, 1, "", "svd_flip"], [597, 0, 1, "", "svdvals"], [620, 0, 1, "", "swapaxes"], [409, 0, 1, "", "take_along_axis"], [244, 0, 1, "", "tan"], [245, 0, 1, "", "tanh"], [598, 0, 1, "", "tensordot"], [599, 0, 1, "", "tensorsolve"], [257, 0, 1, "", "thresholded_relu"], [621, 0, 1, "", "tile"], [168, 0, 1, "", "to_device"], [508, 0, 1, "", "to_list"], [510, 0, 1, "", "to_numpy"], [511, 0, 1, "", "to_scalar"], [410, 0, 1, "", "top_k"], [600, 0, 1, "", "trace"], [246, 0, 1, "", "trapz"], [99, 0, 1, "", "tril"], [271, 0, 1, "", "trilu"], [100, 0, 1, "", "triu"], [247, 0, 1, "", "trunc"], [248, 0, 1, "", "trunc_divide"], [372, 0, 1, "", "truncated_svd"], [373, 0, 1, "", "tucker"], [411, 0, 1, "", "unfold"], [658, 0, 1, "", "unique_all"], [412, 0, 1, "", "unique_consecutive"], [659, 0, 1, "", "unique_counts"], [660, 0, 1, "", "unique_inverse"], [661, 0, 1, "", "unique_values"], [426, 0, 1, "", "unravel_index"], [272, 0, 1, "", "unsorted_segment_min"], [273, 0, 1, "", "unsorted_segment_sum"], [622, 0, 1, "", "unstack"], [524, 0, 1, "", "value_is_nan"], [601, 0, 1, "", "vander"], [675, 0, 1, "", "var"], [602, 0, 1, "", "vecdot"], [603, 0, 1, "", "vector_norm"], [604, 0, 1, "", "vector_to_skew_symmetric_matrix"], [413, 0, 1, "", "vsplit"], [414, 0, 1, "", "vstack"], [657, 0, 1, "", "where"], [298, 0, 1, "", "xlogy"], [623, 0, 1, "", "zero_pad"], [103, 0, 1, "", "zeros_like"], [299, 0, 1, "", "zeta"]], "ivy": [[545, 1, 1, "", "ArrayMode"], [541, 1, 1, "", "DefaultComplexDtype"], [542, 1, 1, "", "DefaultDevice"], [541, 1, 1, "", "DefaultDtype"], [541, 1, 1, "", "DefaultFloatDtype"], [541, 1, 1, "", "DefaultIntDtype"], [541, 1, 1, "", "DefaultUintDtype"], [321, 1, 1, "", "NativeSparseArray"], [540, 1, 1, "", "NestedSequence"], [545, 1, 1, "", "PreciseMode"], [542, 1, 1, "", "Profiler"], [321, 1, 1, "", "SparseArray"], [174, 2, 1, "", "abs"], [175, 2, 1, "", "acos"], [176, 2, 1, "", "acosh"], [546, 2, 1, "", "adam_step"], [546, 2, 1, "", "adam_update"], [324, 2, 1, "", "adaptive_avg_pool1d"], [325, 2, 1, "", "adaptive_avg_pool2d"], [326, 2, 1, "", "adaptive_max_pool2d"], [177, 2, 1, "", "add"], [354, 2, 1, "", "adjoint"], [559, 2, 1, "", "all"], [446, 2, 1, "", "all_equal"], [552, 2, 1, "", "all_nested_indices"], [275, 2, 1, "", "allclose"], [178, 2, 1, "", "angle"], [559, 2, 1, "", "any"], [540, 2, 1, "", "arange"], [327, 2, 1, "", "area_interpolate"], [447, 2, 1, "", "arg_info"], [448, 2, 1, "", "arg_names"], [555, 2, 1, "", "argmax"], [555, 2, 1, "", "argmin"], [557, 2, 1, "", "argsort"], [555, 2, 1, "", "argwhere"], [540, 2, 1, "", "array"], [449, 2, 1, "", "array_equal"], [147, 2, 1, "", "as_ivy_dev"], [541, 2, 1, "", "as_ivy_dtype"], [148, 2, 1, "", "as_native_dev"], [541, 2, 1, "", "as_native_dtype"], [313, 2, 1, "", "as_strided"], [540, 2, 1, "", "asarray"], [540, 2, 1, "", "asarray_handle_nestable"], [540, 2, 1, "", "asarray_infer_device"], [540, 2, 1, "", "asarray_infer_dtype"], [540, 2, 1, "", "asarray_inputs_to_native_shapes"], [540, 2, 1, "", "asarray_to_native_arrays_and_back"], [179, 2, 1, "", "asin"], [180, 2, 1, "", "asinh"], [450, 2, 1, "", "assert_supports_inplace"], [313, 2, 1, "", "associative_scan"], [541, 2, 1, "", "astype"], [181, 2, 1, "", "atan"], [182, 2, 1, "", "atan2"], [183, 2, 1, "", "atanh"], [313, 2, 1, "", "atleast_1d"], [313, 2, 1, "", "atleast_2d"], [313, 2, 1, "", "atleast_3d"], [328, 2, 1, "", "avg_pool1d"], [329, 2, 1, "", "avg_pool2d"], [330, 2, 1, "", "avg_pool3d"], [316, 2, 1, "", "batch_norm"], [317, 2, 1, "", "bernoulli"], [317, 2, 1, "", "beta"], [276, 2, 1, "", "binarizer"], [605, 2, 1, "", "binary_cross_entropy"], [322, 2, 1, "", "bincount"], [301, 2, 1, "", "bind_custom_gradient_function"], [184, 2, 1, "", "bitwise_and"], [185, 2, 1, "", "bitwise_invert"], [186, 2, 1, "", "bitwise_left_shift"], [187, 2, 1, "", "bitwise_or"], [188, 2, 1, "", "bitwise_right_shift"], [189, 2, 1, "", "bitwise_xor"], [304, 2, 1, "", "blackman_window"], [541, 2, 1, "", "broadcast_arrays"], [313, 2, 1, "", "broadcast_shapes"], [541, 2, 1, "", "broadcast_to"], [451, 2, 1, "", "cache_fn"], [541, 2, 1, "", "can_cast"], [539, 2, 1, "", "cast_bool"], [190, 2, 1, "", "ceil"], [541, 2, 1, "", "check_float"], [548, 2, 1, "", "cholesky"], [313, 2, 1, "", "choose"], [149, 2, 1, "", "clear_cached_mem_on_dev"], [608, 2, 1, "", "clip"], [452, 2, 1, "", "clip_matrix_norm"], [453, 2, 1, "", "clip_vector_norm"], [541, 2, 1, "", "closest_valid_dtype"], [539, 2, 1, "", "cmp_is"], [539, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [609, 2, 1, "", "concat"], [313, 2, 1, "", "concat_from_sequence"], [355, 2, 1, "", "cond"], [277, 2, 1, "", "conj"], [550, 2, 1, "", "constant_pad"], [454, 2, 1, "", "container_types"], [547, 2, 1, "", "conv"], [547, 2, 1, "", "conv1d"], [547, 2, 1, "", "conv1d_transpose"], [547, 2, 1, "", "conv2d"], [547, 2, 1, "", "conv2d_transpose"], [547, 2, 1, "", "conv3d"], [547, 2, 1, "", "conv3d_transpose"], [547, 2, 1, "", "conv_general_dilated"], [547, 2, 1, "", "conv_general_transpose"], [540, 2, 1, "", "copy_array"], [552, 2, 1, "", "copy_nest"], [278, 2, 1, "", "copysign"], [322, 2, 1, "", "corrcoef"], [191, 2, 1, "", "cos"], [192, 2, 1, "", "cosh"], [279, 2, 1, "", "count_nonzero"], [322, 2, 1, "", "cov"], [548, 2, 1, "", "cross"], [606, 2, 1, "", "cross_entropy"], [322, 2, 1, "", "cummax"], [322, 2, 1, "", "cummin"], [558, 2, 1, "", "cumprod"], [558, 2, 1, "", "cumsum"], [455, 2, 1, "", "current_backend_str"], [331, 2, 1, "", "dct"], [456, 2, 1, "", "default"], [541, 2, 1, "", "default_complex_dtype"], [150, 2, 1, "", "default_device"], [541, 2, 1, "", "default_dtype"], [541, 2, 1, "", "default_float_dtype"], [541, 2, 1, "", "default_int_dtype"], [541, 2, 1, "", "default_uint_dtype"], [193, 2, 1, "", "deg2rad"], [547, 2, 1, "", "depthwise_conv2d"], [548, 2, 1, "", "det"], [151, 2, 1, "", "dev"], [152, 2, 1, "", "dev_util"], [332, 2, 1, "", "dft"], [548, 2, 1, "", "diag"], [356, 2, 1, "", "diagflat"], [548, 2, 1, "", "diagonal"], [280, 2, 1, "", "diff"], [281, 2, 1, "", "digamma"], [317, 2, 1, "", "dirichlet"], [194, 2, 1, "", "divide"], [357, 2, 1, "", "dot"], [547, 2, 1, "", "dropout"], [333, 2, 1, "", "dropout1d"], [334, 2, 1, "", "dropout2d"], [335, 2, 1, "", "dropout3d"], [313, 2, 1, "", "dsplit"], [313, 2, 1, "", "dstack"], [541, 2, 1, "", "dtype"], [541, 2, 1, "", "dtype_bits"], [552, 2, 1, "", "duplicate_array_index_chains"], [538, 6, 1, "", "e"], [358, 2, 1, "", "eig"], [548, 2, 1, "", "eigh"], [359, 2, 1, "", "eigh_tridiagonal"], [360, 2, 1, "", "eigvals"], [548, 2, 1, "", "eigvalsh"], [457, 2, 1, "", "einops_rearrange"], [458, 2, 1, "", "einops_reduce"], [459, 2, 1, "", "einops_repeat"], [558, 2, 1, "", "einsum"], [302, 2, 1, "", "elu"], [336, 2, 1, "", "embedding"], [540, 2, 1, "", "empty"], [540, 2, 1, "", "empty_like"], [195, 2, 1, "", "equal"], [196, 2, 1, "", "erf"], [546, 2, 1, "", "execute_with_gradients"], [460, 2, 1, "", "exists"], [197, 2, 1, "", "exp"], [198, 2, 1, "", "exp2"], [313, 2, 1, "", "expand"], [550, 2, 1, "", "expand_dims"], [199, 2, 1, "", "expm1"], [540, 2, 1, "", "eye"], [304, 2, 1, "", "eye_like"], [337, 2, 1, "", "fft"], [338, 2, 1, "", "fft2"], [313, 2, 1, "", "fill_diagonal"], [541, 2, 1, "", "finfo"], [282, 2, 1, "", "fix"], [313, 2, 1, "", "flatten"], [550, 2, 1, "", "flip"], [313, 2, 1, "", "fliplr"], [313, 2, 1, "", "flipud"], [283, 2, 1, "", "float_power"], [200, 2, 1, "", "floor"], [201, 2, 1, "", "floor_divide"], [284, 2, 1, "", "fmax"], [202, 2, 1, "", "fmin"], [203, 2, 1, "", "fmod"], [313, 2, 1, "", "fold"], [551, 2, 1, "", "fomaml_step"], [539, 2, 1, "", "for_loop"], [461, 2, 1, "", "fourier_encode"], [285, 2, 1, "", "frexp"], [540, 2, 1, "", "from_dlpack"], [540, 2, 1, "", "frombuffer"], [540, 2, 1, "", "full"], [540, 2, 1, "", "full_like"], [153, 2, 1, "", "function_supported_devices"], [462, 2, 1, "", "function_supported_devices_and_dtypes"], [541, 2, 1, "", "function_supported_dtypes"], [154, 2, 1, "", "function_unsupported_devices"], [463, 2, 1, "", "function_unsupported_devices_and_dtypes"], [541, 2, 1, "", "function_unsupported_dtypes"], [317, 2, 1, "", "gamma"], [464, 2, 1, "", "gather"], [465, 2, 1, "", "gather_nd"], [204, 2, 1, "", "gcd"], [59, 2, 1, "", "gelu"], [339, 2, 1, "", "generate_einsum_equation"], [466, 2, 1, "", "get_all_arrays_in_memory"], [155, 2, 1, "", "get_all_ivy_arrays_on_dev"], [340, 2, 1, "", "get_interpolate_kernel"], [467, 2, 1, "", "get_item"], [468, 2, 1, "", "get_num_dims"], [469, 2, 1, "", "get_referrers_recursive"], [156, 2, 1, "", "gpu_is_available"], [546, 2, 1, "", "grad"], [286, 2, 1, "", "gradient"], [546, 2, 1, "", "gradient_descent_update"], [205, 2, 1, "", "greater"], [206, 2, 1, "", "greater_equal"], [316, 2, 1, "", "group_norm"], [304, 2, 1, "", "hamming_window"], [157, 2, 1, "", "handle_soft_device_variable"], [304, 2, 1, "", "hann_window"], [60, 2, 1, "", "hardswish"], [470, 2, 1, "", "has_nans"], [313, 2, 1, "", "heaviside"], [322, 2, 1, "", "histogram"], [313, 2, 1, "", "hsplit"], [313, 2, 1, "", "hstack"], [312, 2, 1, "", "huber_loss"], [287, 2, 1, "", "hypot"], [313, 2, 1, "", "i0"], [341, 2, 1, "", "idct"], [539, 2, 1, "", "if_else"], [342, 2, 1, "", "ifft"], [343, 2, 1, "", "ifftn"], [322, 2, 1, "", "igamma"], [122, 2, 1, "", "iinfo"], [207, 2, 1, "", "imag"], [552, 2, 1, "", "index_nest"], [304, 2, 1, "", "indices"], [538, 6, 1, "", "inf"], [123, 2, 1, "", "infer_default_dtype"], [361, 2, 1, "", "initialize_tucker"], [548, 2, 1, "", "inner"], [471, 2, 1, "", "inplace_arrays_supported"], [472, 2, 1, "", "inplace_decrement"], [473, 2, 1, "", "inplace_increment"], [474, 2, 1, "", "inplace_update"], [475, 2, 1, "", "inplace_variables_supported"], [552, 2, 1, "", "insert_into_nest_at_index"], [552, 2, 1, "", "insert_into_nest_at_indices"], [316, 2, 1, "", "instance_norm"], [344, 2, 1, "", "interp"], [345, 2, 1, "", "interpolate"], [548, 2, 1, "", "inv"], [124, 2, 1, "", "invalid_dtype"], [320, 2, 1, "", "invert_permutation"], [476, 2, 1, "", "is_array"], [125, 2, 1, "", "is_bool_dtype"], [126, 2, 1, "", "is_complex_dtype"], [127, 2, 1, "", "is_float_dtype"], [128, 2, 1, "", "is_hashable_dtype"], [129, 2, 1, "", "is_int_dtype"], [477, 2, 1, "", "is_ivy_array"], [478, 2, 1, "", "is_ivy_container"], [479, 2, 1, "", "is_ivy_nested_array"], [321, 2, 1, "", "is_ivy_sparse_array"], [480, 2, 1, "", "is_native_array"], [130, 2, 1, "", "is_native_dtype"], [321, 2, 1, "", "is_native_sparse_array"], [131, 2, 1, "", "is_uint_dtype"], [288, 2, 1, "", "isclose"], [208, 2, 1, "", "isfinite"], [481, 2, 1, "", "isin"], [209, 2, 1, "", "isinf"], [210, 2, 1, "", "isnan"], [211, 2, 1, "", "isreal"], [482, 2, 1, "", "isscalar"], [483, 2, 1, "", "itemsize"], [546, 2, 1, "", "jac"], [304, 2, 1, "", "kaiser_bessel_derived_window"], [304, 2, 1, "", "kaiser_window"], [362, 2, 1, "", "khatri_rao"], [363, 2, 1, "", "kron"], [364, 2, 1, "", "kronecker"], [312, 2, 1, "", "l1_loss"], [316, 2, 1, "", "l1_normalize"], [316, 2, 1, "", "l2_normalize"], [546, 2, 1, "", "lamb_update"], [546, 2, 1, "", "lars_update"], [553, 2, 1, "", "layer_norm"], [212, 2, 1, "", "lcm"], [289, 2, 1, "", "ldexp"], [537, 2, 1, "", "leaky_relu"], [290, 2, 1, "", "lerp"], [213, 2, 1, "", "less"], [214, 2, 1, "", "less_equal"], [320, 2, 1, "", "lexsort"], [291, 2, 1, "", "lgamma"], [547, 2, 1, "", "linear"], [540, 2, 1, "", "linspace"], [559, 2, 1, "", "load"], [215, 2, 1, "", "log"], [216, 2, 1, "", "log10"], [217, 2, 1, "", "log1p"], [218, 2, 1, "", "log2"], [312, 2, 1, "", "log_poisson_loss"], [537, 2, 1, "", "log_softmax"], [219, 2, 1, "", "logaddexp"], [220, 2, 1, "", "logaddexp2"], [221, 2, 1, "", "logical_and"], [222, 2, 1, "", "logical_not"], [223, 2, 1, "", "logical_or"], [224, 2, 1, "", "logical_xor"], [302, 2, 1, "", "logit"], [302, 2, 1, "", "logsigmoid"], [540, 2, 1, "", "logspace"], [316, 2, 1, "", "lp_normalize"], [547, 2, 1, "", "lstm_update"], [548, 2, 1, "", "lu_factor"], [365, 2, 1, "", "make_svd_non_negative"], [551, 2, 1, "", "maml_step"], [552, 2, 1, "", "map"], [552, 2, 1, "", "map_nest_at_index"], [552, 2, 1, "", "map_nest_at_indices"], [484, 2, 1, "", "match_kwargs"], [548, 2, 1, "", "matmul"], [313, 2, 1, "", "matricize"], [311, 2, 1, "", "matrix_exp"], [548, 2, 1, "", "matrix_norm"], [548, 2, 1, "", "matrix_power"], [548, 2, 1, "", "matrix_rank"], [548, 2, 1, "", "matrix_transpose"], [558, 2, 1, "", "max"], [346, 2, 1, "", "max_pool1d"], [347, 2, 1, "", "max_pool2d"], [348, 2, 1, "", "max_pool3d"], [349, 2, 1, "", "max_unpool1d"], [225, 2, 1, "", "maximum"], [558, 2, 1, "", "mean"], [322, 2, 1, "", "median"], [304, 2, 1, "", "mel_weight_matrix"], [540, 2, 1, "", "meshgrid"], [558, 2, 1, "", "min"], [226, 2, 1, "", "minimum"], [537, 2, 1, "", "mish"], [311, 2, 1, "", "mode_dot"], [292, 2, 1, "", "modf"], [313, 2, 1, "", "moveaxis"], [557, 2, 1, "", "msort"], [311, 2, 1, "", "multi_dot"], [547, 2, 1, "", "multi_head_attention"], [552, 2, 1, "", "multi_index_nest"], [311, 2, 1, "", "multi_mode_dot"], [554, 2, 1, "", "multinomial"], [227, 2, 1, "", "multiply"], [485, 2, 1, "", "multiprocessing"], [538, 6, 1, "", "nan"], [228, 2, 1, "", "nan_to_num"], [322, 2, 1, "", "nanmean"], [322, 2, 1, "", "nanmedian"], [322, 2, 1, "", "nanprod"], [293, 2, 1, "", "nansum"], [540, 2, 1, "", "native_array"], [321, 2, 1, "", "native_sparse_array"], [321, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [304, 2, 1, "", "ndenumerate"], [304, 2, 1, "", "ndindex"], [350, 2, 1, "", "nearest_interpolate"], [229, 2, 1, "", "negative"], [552, 2, 1, "", "nested_any"], [552, 2, 1, "", "nested_argwhere"], [552, 2, 1, "", "nested_map"], [552, 2, 1, "", "nested_multi_map"], [538, 6, 1, "", "newaxis"], [294, 2, 1, "", "nextafter"], [555, 2, 1, "", "nonzero"], [230, 2, 1, "", "not_equal"], [486, 2, 1, "", "num_arrays_in_memory"], [158, 2, 1, "", "num_cpu_cores"], [159, 2, 1, "", "num_gpus"], [160, 2, 1, "", "num_ivy_arrays_on_dev"], [540, 2, 1, "", "one_hot"], [540, 2, 1, "", "ones"], [540, 2, 1, "", "ones_like"], [546, 2, 1, "", "optimizer_update"], [323, 2, 1, "", "optional_get_element"], [548, 2, 1, "", "outer"], [313, 2, 1, "", "pad"], [313, 2, 1, "", "partial_fold"], [313, 2, 1, "", "partial_tensor_to_vec"], [311, 2, 1, "", "partial_tucker"], [313, 2, 1, "", "partial_unfold"], [313, 2, 1, "", "partial_vec_to_tensor"], [161, 2, 1, "", "percent_used_mem_on_dev"], [550, 2, 1, "", "permute_dims"], [538, 6, 1, "", "pi"], [548, 2, 1, "", "pinv"], [317, 2, 1, "", "poisson"], [351, 2, 1, "", "pool"], [231, 2, 1, "", "positive"], [232, 2, 1, "", "pow"], [302, 2, 1, "", "prelu"], [487, 2, 1, "", "print_all_arrays_in_memory"], [162, 2, 1, "", "print_all_ivy_arrays_on_dev"], [558, 2, 1, "", "prod"], [132, 2, 1, "", "promote_types"], [133, 2, 1, "", "promote_types_of_inputs"], [552, 2, 1, "", "prune_empty"], [552, 2, 1, "", "prune_nest_at_index"], [552, 2, 1, "", "prune_nest_at_indices"], [313, 2, 1, "", "put_along_axis"], [548, 2, 1, "", "qr"], [322, 2, 1, "", "quantile"], [233, 2, 1, "", "rad2deg"], [554, 2, 1, "", "randint"], [304, 2, 1, "", "random_cp"], [554, 2, 1, "", "random_normal"], [304, 2, 1, "", "random_tucker"], [554, 2, 1, "", "random_uniform"], [234, 2, 1, "", "real"], [235, 2, 1, "", "reciprocal"], [300, 2, 1, "", "reduce"], [352, 2, 1, "", "reduce_window"], [537, 2, 1, "", "relu"], [302, 2, 1, "", "relu6"], [236, 2, 1, "", "remainder"], [550, 2, 1, "", "repeat"], [551, 2, 1, "", "reptile_step"], [550, 2, 1, "", "reshape"], [134, 2, 1, "", "result_type"], [353, 2, 1, "", "rfftn"], [550, 2, 1, "", "roll"], [313, 2, 1, "", "rot90"], [237, 2, 1, "", "round"], [559, 2, 1, "", "save"], [547, 2, 1, "", "scaled_dot_product_attention"], [545, 2, 1, "", "scatter_flat"], [545, 2, 1, "", "scatter_nd"], [557, 2, 1, "", "searchsorted"], [554, 2, 1, "", "seed"], [302, 2, 1, "", "selu"], [302, 2, 1, "", "sequence_length"], [545, 2, 1, "", "set_array_mode"], [135, 2, 1, "", "set_default_complex_dtype"], [163, 2, 1, "", "set_default_device"], [136, 2, 1, "", "set_default_dtype"], [137, 2, 1, "", "set_default_float_dtype"], [138, 2, 1, "", "set_default_int_dtype"], [139, 2, 1, "", "set_default_uint_dtype"], [545, 2, 1, "", "set_exception_trace_mode"], [545, 2, 1, "", "set_inplace_mode"], [545, 2, 1, "", "set_item"], [545, 2, 1, "", "set_min_base"], [545, 2, 1, "", "set_min_denominator"], [552, 2, 1, "", "set_nest_at_index"], [552, 2, 1, "", "set_nest_at_indices"], [545, 2, 1, "", "set_nestable_mode"], [545, 2, 1, "", "set_precise_mode"], [545, 2, 1, "", "set_queue_timeout"], [545, 2, 1, "", "set_shape_array_mode"], [545, 2, 1, "", "set_show_func_wrapper_trace_mode"], [164, 2, 1, "", "set_soft_device_mode"], [165, 2, 1, "", "set_split_factor"], [545, 2, 1, "", "set_tmp_dir"], [545, 2, 1, "", "shape"], [554, 2, 1, "", "shuffle"], [537, 2, 1, "", "sigmoid"], [238, 2, 1, "", "sign"], [295, 2, 1, "", "signbit"], [302, 2, 1, "", "silu"], [239, 2, 1, "", "sin"], [296, 2, 1, "", "sinc"], [240, 2, 1, "", "sinh"], [548, 2, 1, "", "slogdet"], [312, 2, 1, "", "smooth_l1_loss"], [312, 2, 1, "", "soft_margin_loss"], [313, 2, 1, "", "soft_thresholding"], [537, 2, 1, "", "softmax"], [537, 2, 1, "", "softplus"], [537, 2, 1, "", "softsign"], [548, 2, 1, "", "solve"], [557, 2, 1, "", "sort"], [607, 2, 1, "", "sparse_cross_entropy"], [297, 2, 1, "", "sparsify_tensor"], [550, 2, 1, "", "split"], [166, 2, 1, "", "split_factor"], [167, 2, 1, "", "split_func_call"], [241, 2, 1, "", "sqrt"], [242, 2, 1, "", "square"], [550, 2, 1, "", "squeeze"], [545, 2, 1, "", "stable_divide"], [545, 2, 1, "", "stable_pow"], [550, 2, 1, "", "stack"], [558, 2, 1, "", "std"], [546, 2, 1, "", "stop_gradient"], [545, 2, 1, "", "strides"], [243, 2, 1, "", "subtract"], [558, 2, 1, "", "sum"], [545, 2, 1, "", "supports_inplace_updates"], [548, 2, 1, "", "svd"], [311, 2, 1, "", "svd_flip"], [548, 2, 1, "", "svdvals"], [550, 2, 1, "", "swapaxes"], [313, 2, 1, "", "take_along_axis"], [244, 2, 1, "", "tan"], [245, 2, 1, "", "tanh"], [548, 2, 1, "", "tensordot"], [548, 2, 1, "", "tensorsolve"], [302, 2, 1, "", "thresholded_relu"], [550, 2, 1, "", "tile"], [168, 2, 1, "", "to_device"], [545, 2, 1, "", "to_ivy_shape"], [545, 2, 1, "", "to_list"], [545, 2, 1, "", "to_native_shape"], [545, 2, 1, "", "to_numpy"], [545, 2, 1, "", "to_scalar"], [313, 2, 1, "", "top_k"], [169, 2, 1, "", "total_mem_on_dev"], [170, 2, 1, "", "tpu_is_available"], [548, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [246, 2, 1, "", "trapz"], [540, 2, 1, "", "tril"], [304, 2, 1, "", "tril_indices"], [304, 2, 1, "", "trilu"], [540, 2, 1, "", "triu"], [540, 2, 1, "", "triu_indices"], [247, 2, 1, "", "trunc"], [248, 2, 1, "", "trunc_divide"], [311, 2, 1, "", "truncated_svd"], [545, 2, 1, "", "try_else_none"], [539, 2, 1, "", "try_except"], [311, 2, 1, "", "tucker"], [140, 2, 1, "", "type_promote_arrays"], [313, 2, 1, "", "unfold"], [2, 2, 1, "", "unify"], [556, 2, 1, "", "unique_all"], [313, 2, 1, "", "unique_consecutive"], [556, 2, 1, "", "unique_counts"], [556, 2, 1, "", "unique_inverse"], [556, 2, 1, "", "unique_values"], [318, 2, 1, "", "unravel_index"], [545, 2, 1, "", "unset_array_mode"], [141, 2, 1, "", "unset_default_complex_dtype"], [171, 2, 1, "", "unset_default_device"], [142, 2, 1, "", "unset_default_dtype"], [143, 2, 1, "", "unset_default_float_dtype"], [144, 2, 1, "", "unset_default_int_dtype"], [145, 2, 1, "", "unset_default_uint_dtype"], [545, 2, 1, "", "unset_exception_trace_mode"], [545, 2, 1, "", "unset_inplace_mode"], [545, 2, 1, "", "unset_min_base"], [545, 2, 1, "", "unset_min_denominator"], [545, 2, 1, "", "unset_nestable_mode"], [545, 2, 1, "", "unset_precise_mode"], [545, 2, 1, "", "unset_queue_timeout"], [545, 2, 1, "", "unset_shape_array_mode"], [545, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [172, 2, 1, "", "unset_soft_device_mode"], [545, 2, 1, "", "unset_tmp_dir"], [304, 2, 1, "", "unsorted_segment_min"], [304, 2, 1, "", "unsorted_segment_sum"], [550, 2, 1, "", "unstack"], [173, 2, 1, "", "used_mem_on_dev"], [146, 2, 1, "", "valid_dtype"], [546, 2, 1, "", "value_and_grad"], [545, 2, 1, "", "value_is_nan"], [548, 2, 1, "", "vander"], [558, 2, 1, "", "var"], [548, 2, 1, "", "vecdot"], [548, 2, 1, "", "vector_norm"], [548, 2, 1, "", "vector_to_skew_symmetric_matrix"], [545, 2, 1, "", "vmap"], [304, 2, 1, "", "vorbis_window"], [313, 2, 1, "", "vsplit"], [313, 2, 1, "", "vstack"], [555, 2, 1, "", "where"], [539, 2, 1, "", "while_loop"], [298, 2, 1, "", "xlogy"], [550, 2, 1, "", "zero_pad"], [540, 2, 1, "", "zeros"], [540, 2, 1, "", "zeros_like"], [299, 2, 1, "", "zeta"]], "ivy.Container": [[174, 0, 1, "", "abs"], [175, 0, 1, "", "acos"], [176, 0, 1, "", "acosh"], [526, 0, 1, "", "adam_step"], [527, 0, 1, "", "adam_update"], [324, 0, 1, "", "adaptive_avg_pool1d"], [325, 0, 1, "", "adaptive_avg_pool2d"], [326, 0, 1, "", "adaptive_max_pool2d"], [177, 0, 1, "", "add"], [354, 0, 1, "", "adjoint"], [676, 0, 1, "", "all"], [446, 0, 1, "", "all_equal"], [275, 0, 1, "", "allclose"], [178, 0, 1, "", "angle"], [677, 0, 1, "", "any"], [653, 0, 1, "", "argmax"], [654, 0, 1, "", "argmin"], [662, 0, 1, "", "argsort"], [655, 0, 1, "", "argwhere"], [449, 0, 1, "", "array_equal"], [379, 0, 1, "", "as_strided"], [78, 0, 1, "", "asarray"], [179, 0, 1, "", "asin"], [180, 0, 1, "", "asinh"], [450, 0, 1, "", "assert_supports_inplace"], [380, 0, 1, "", "associative_scan"], [106, 0, 1, "", "astype"], [181, 0, 1, "", "atan"], [182, 0, 1, "", "atan2"], [183, 0, 1, "", "atanh"], [381, 0, 1, "", "atleast_1d"], [382, 0, 1, "", "atleast_2d"], [383, 0, 1, "", "atleast_3d"], [328, 0, 1, "", "avg_pool1d"], [329, 0, 1, "", "avg_pool2d"], [330, 0, 1, "", "avg_pool3d"], [415, 0, 1, "", "batch_norm"], [421, 0, 1, "", "bernoulli"], [422, 0, 1, "", "beta"], [276, 0, 1, "", "binarizer"], [605, 0, 1, "", "binary_cross_entropy"], [433, 0, 1, "", "bincount"], [184, 0, 1, "", "bitwise_and"], [185, 0, 1, "", "bitwise_invert"], [186, 0, 1, "", "bitwise_left_shift"], [187, 0, 1, "", "bitwise_or"], [188, 0, 1, "", "bitwise_right_shift"], [189, 0, 1, "", "bitwise_xor"], [258, 0, 1, "", "blackman_window"], [107, 0, 1, "", "broadcast_arrays"], [384, 0, 1, "", "broadcast_shapes"], [108, 0, 1, "", "broadcast_to"], [109, 0, 1, "", "can_cast"], [190, 0, 1, "", "ceil"], [575, 0, 1, "", "cholesky"], [608, 0, 1, "", "clip"], [452, 0, 1, "", "clip_matrix_norm"], [453, 0, 1, "", "clip_vector_norm"], [609, 0, 1, "", "concat"], [386, 0, 1, "", "concat_from_sequence"], [355, 0, 1, "", "cond"], [277, 0, 1, "", "conj"], [610, 0, 1, "", "constant_pad"], [561, 0, 1, "", "conv1d"], [562, 0, 1, "", "conv1d_transpose"], [563, 0, 1, "", "conv2d"], [564, 0, 1, "", "conv2d_transpose"], [565, 0, 1, "", "conv3d"], [566, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "copy_array"], [278, 0, 1, "", "copysign"], [434, 0, 1, "", "corrcoef"], [191, 0, 1, "", "cos"], [192, 0, 1, "", "cosh"], [279, 0, 1, "", "count_nonzero"], [435, 0, 1, "", "cov"], [576, 0, 1, "", "cross"], [606, 0, 1, "", "cross_entropy"], [436, 0, 1, "", "cummax"], [437, 0, 1, "", "cummin"], [666, 0, 1, "", "cumprod"], [667, 0, 1, "", "cumsum"], [331, 0, 1, "", "dct"], [193, 0, 1, "", "deg2rad"], [569, 0, 1, "", "depthwise_conv2d"], [577, 0, 1, "", "det"], [151, 0, 1, "", "dev"], [332, 0, 1, "", "dft"], [578, 0, 1, "", "diag"], [356, 0, 1, "", "diagflat"], [579, 0, 1, "", "diagonal"], [280, 0, 1, "", "diff"], [281, 0, 1, "", "digamma"], [423, 0, 1, "", "dirichlet"], [194, 0, 1, "", "divide"], [357, 0, 1, "", "dot"], [570, 0, 1, "", "dropout"], [333, 0, 1, "", "dropout1d"], [334, 0, 1, "", "dropout2d"], [335, 0, 1, "", "dropout3d"], [387, 0, 1, "", "dsplit"], [388, 0, 1, "", "dstack"], [117, 0, 1, "", "dtype"], [358, 0, 1, "", "eig"], [581, 0, 1, "", "eigh"], [359, 0, 1, "", "eigh_tridiagonal"], [360, 0, 1, "", "eigvals"], [582, 0, 1, "", "eigvalsh"], [457, 0, 1, "", "einops_rearrange"], [458, 0, 1, "", "einops_reduce"], [459, 0, 1, "", "einops_repeat"], [668, 0, 1, "", "einsum"], [249, 0, 1, "", "elu"], [336, 0, 1, "", "embedding"], [86, 0, 1, "", "empty_like"], [195, 0, 1, "", "equal"], [196, 0, 1, "", "erf"], [197, 0, 1, "", "exp"], [198, 0, 1, "", "exp2"], [389, 0, 1, "", "expand"], [611, 0, 1, "", "expand_dims"], [199, 0, 1, "", "expm1"], [259, 0, 1, "", "eye_like"], [337, 0, 1, "", "fft"], [390, 0, 1, "", "fill_diagonal"], [119, 0, 1, "", "finfo"], [282, 0, 1, "", "fix"], [391, 0, 1, "", "flatten"], [612, 0, 1, "", "flip"], [392, 0, 1, "", "fliplr"], [393, 0, 1, "", "flipud"], [283, 0, 1, "", "float_power"], [200, 0, 1, "", "floor"], [201, 0, 1, "", "floor_divide"], [284, 0, 1, "", "fmax"], [202, 0, 1, "", "fmin"], [203, 0, 1, "", "fmod"], [394, 0, 1, "", "fold"], [461, 0, 1, "", "fourier_encode"], [285, 0, 1, "", "frexp"], [88, 0, 1, "", "from_dlpack"], [89, 0, 1, "", "frombuffer"], [91, 0, 1, "", "full_like"], [424, 0, 1, "", "gamma"], [464, 0, 1, "", "gather"], [465, 0, 1, "", "gather_nd"], [204, 0, 1, "", "gcd"], [59, 0, 1, "", "gelu"], [468, 0, 1, "", "get_num_dims"], [286, 0, 1, "", "gradient"], [530, 0, 1, "", "gradient_descent_update"], [205, 0, 1, "", "greater"], [206, 0, 1, "", "greater_equal"], [416, 0, 1, "", "group_norm"], [260, 0, 1, "", "hamming_window"], [261, 0, 1, "", "hann_window"], [60, 0, 1, "", "hardswish"], [470, 0, 1, "", "has_nans"], [395, 0, 1, "", "heaviside"], [438, 0, 1, "", "histogram"], [396, 0, 1, "", "hsplit"], [397, 0, 1, "", "hstack"], [374, 0, 1, "", "huber_loss"], [287, 0, 1, "", "hypot"], [398, 0, 1, "", "i0"], [341, 0, 1, "", "idct"], [342, 0, 1, "", "ifft"], [343, 0, 1, "", "ifftn"], [439, 0, 1, "", "igamma"], [122, 0, 1, "", "iinfo"], [207, 0, 1, "", "imag"], [361, 0, 1, "", "initialize_tucker"], [583, 0, 1, "", "inner"], [472, 0, 1, "", "inplace_decrement"], [473, 0, 1, "", "inplace_increment"], [474, 0, 1, "", "inplace_update"], [417, 0, 1, "", "instance_norm"], [345, 0, 1, "", "interpolate"], [584, 0, 1, "", "inv"], [427, 0, 1, "", "invert_permutation"], [476, 0, 1, "", "is_array"], [125, 0, 1, "", "is_bool_dtype"], [126, 0, 1, "", "is_complex_dtype"], [127, 0, 1, "", "is_float_dtype"], [129, 0, 1, "", "is_int_dtype"], [477, 0, 1, "", "is_ivy_array"], [480, 0, 1, "", "is_native_array"], [131, 0, 1, "", "is_uint_dtype"], [288, 0, 1, "", "isclose"], [208, 0, 1, "", "isfinite"], [481, 0, 1, "", "isin"], [209, 0, 1, "", "isinf"], [210, 0, 1, "", "isnan"], [211, 0, 1, "", "isreal"], [483, 0, 1, "", "itemsize"], [263, 0, 1, "", "kaiser_bessel_derived_window"], [264, 0, 1, "", "kaiser_window"], [363, 0, 1, "", "kron"], [375, 0, 1, "", "l1_loss"], [418, 0, 1, "", "l1_normalize"], [419, 0, 1, "", "l2_normalize"], [532, 0, 1, "", "lamb_update"], [533, 0, 1, "", "lars_update"], [646, 0, 1, "", "layer_norm"], [212, 0, 1, "", "lcm"], [289, 0, 1, "", "ldexp"], [61, 0, 1, "", "leaky_relu"], [290, 0, 1, "", "lerp"], [213, 0, 1, "", "less"], [214, 0, 1, "", "less_equal"], [428, 0, 1, "", "lexsort"], [571, 0, 1, "", "linear"], [92, 0, 1, "", "linspace"], [215, 0, 1, "", "log"], [216, 0, 1, "", "log10"], [217, 0, 1, "", "log1p"], [218, 0, 1, "", "log2"], [62, 0, 1, "", "log_softmax"], [219, 0, 1, "", "logaddexp"], [220, 0, 1, "", "logaddexp2"], [221, 0, 1, "", "logical_and"], [222, 0, 1, "", "logical_not"], [223, 0, 1, "", "logical_or"], [224, 0, 1, "", "logical_xor"], [250, 0, 1, "", "logit"], [251, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "logspace"], [420, 0, 1, "", "lp_normalize"], [572, 0, 1, "", "lstm_update"], [365, 0, 1, "", "make_svd_non_negative"], [586, 0, 1, "", "matmul"], [399, 0, 1, "", "matricize"], [366, 0, 1, "", "matrix_exp"], [587, 0, 1, "", "matrix_norm"], [588, 0, 1, "", "matrix_power"], [589, 0, 1, "", "matrix_rank"], [590, 0, 1, "", "matrix_transpose"], [669, 0, 1, "", "max"], [346, 0, 1, "", "max_pool1d"], [347, 0, 1, "", "max_pool2d"], [348, 0, 1, "", "max_pool3d"], [225, 0, 1, "", "maximum"], [670, 0, 1, "", "mean"], [440, 0, 1, "", "median"], [265, 0, 1, "", "mel_weight_matrix"], [94, 0, 1, "", "meshgrid"], [671, 0, 1, "", "min"], [226, 0, 1, "", "minimum"], [63, 0, 1, "", "mish"], [367, 0, 1, "", "mode_dot"], [292, 0, 1, "", "modf"], [400, 0, 1, "", "moveaxis"], [663, 0, 1, "", "msort"], [368, 0, 1, "", "multi_dot"], [573, 0, 1, "", "multi_head_attention"], [369, 0, 1, "", "multi_mode_dot"], [647, 0, 1, "", "multinomial"], [227, 0, 1, "", "multiply"], [228, 0, 1, "", "nan_to_num"], [441, 0, 1, "", "nanmean"], [442, 0, 1, "", "nanmedian"], [443, 0, 1, "", "nanprod"], [293, 0, 1, "", "nansum"], [95, 0, 1, "", "native_array"], [229, 0, 1, "", "negative"], [294, 0, 1, "", "nextafter"], [656, 0, 1, "", "nonzero"], [230, 0, 1, "", "not_equal"], [96, 0, 1, "", "one_hot"], [98, 0, 1, "", "ones_like"], [534, 0, 1, "", "optimizer_update"], [445, 0, 1, "", "optional_get_element"], [591, 0, 1, "", "outer"], [401, 0, 1, "", "pad"], [402, 0, 1, "", "partial_fold"], [403, 0, 1, "", "partial_tensor_to_vec"], [370, 0, 1, "", "partial_tucker"], [404, 0, 1, "", "partial_unfold"], [405, 0, 1, "", "partial_vec_to_tensor"], [613, 0, 1, "", "permute_dims"], [592, 0, 1, "", "pinv"], [425, 0, 1, "", "poisson"], [231, 0, 1, "", "positive"], [232, 0, 1, "", "pow"], [252, 0, 1, "", "prelu"], [672, 0, 1, "", "prod"], [593, 0, 1, "", "qr"], [444, 0, 1, "", "quantile"], [233, 0, 1, "", "rad2deg"], [648, 0, 1, "", "randint"], [649, 0, 1, "", "random_normal"], [650, 0, 1, "", "random_uniform"], [234, 0, 1, "", "real"], [235, 0, 1, "", "reciprocal"], [300, 0, 1, "", "reduce"], [352, 0, 1, "", "reduce_window"], [64, 0, 1, "", "relu"], [253, 0, 1, "", "relu6"], [236, 0, 1, "", "remainder"], [614, 0, 1, "", "repeat"], [615, 0, 1, "", "reshape"], [134, 0, 1, "", "result_type"], [353, 0, 1, "", "rfftn"], [616, 0, 1, "", "roll"], [407, 0, 1, "", "rot90"], [237, 0, 1, "", "round"], [574, 0, 1, "", "scaled_dot_product_attention"], [488, 0, 1, "", "scatter_flat"], [489, 0, 1, "", "scatter_nd"], [664, 0, 1, "", "searchsorted"], [254, 0, 1, "", "selu"], [652, 0, 1, "", "shuffle"], [65, 0, 1, "", "sigmoid"], [238, 0, 1, "", "sign"], [295, 0, 1, "", "signbit"], [256, 0, 1, "", "silu"], [239, 0, 1, "", "sin"], [296, 0, 1, "", "sinc"], [240, 0, 1, "", "sinh"], [594, 0, 1, "", "slogdet"], [377, 0, 1, "", "smooth_l1_loss"], [378, 0, 1, "", "soft_margin_loss"], [408, 0, 1, "", "soft_thresholding"], [66, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"], [595, 0, 1, "", "solve"], [665, 0, 1, "", "sort"], [607, 0, 1, "", "sparse_cross_entropy"], [297, 0, 1, "", "sparsify_tensor"], [617, 0, 1, "", "split"], [241, 0, 1, "", "sqrt"], [242, 0, 1, "", "square"], [618, 0, 1, "", "squeeze"], [503, 0, 1, "", "stable_divide"], [504, 0, 1, "", "stable_pow"], [619, 0, 1, "", "stack"], [673, 0, 1, "", "std"], [535, 0, 1, "", "stop_gradient"], [505, 0, 1, "", "strides"], [243, 0, 1, "", "subtract"], [674, 0, 1, "", "sum"], [506, 0, 1, "", "supports_inplace_updates"], [596, 0, 1, "", "svd"], [371, 0, 1, "", "svd_flip"], [597, 0, 1, "", "svdvals"], [620, 0, 1, "", "swapaxes"], [409, 0, 1, "", "take_along_axis"], [244, 0, 1, "", "tan"], [245, 0, 1, "", "tanh"], [598, 0, 1, "", "tensordot"], [599, 0, 1, "", "tensorsolve"], [257, 0, 1, "", "thresholded_relu"], [621, 0, 1, "", "tile"], [168, 0, 1, "", "to_device"], [508, 0, 1, "", "to_list"], [510, 0, 1, "", "to_numpy"], [511, 0, 1, "", "to_scalar"], [410, 0, 1, "", "top_k"], [600, 0, 1, "", "trace"], [246, 0, 1, "", "trapz"], [99, 0, 1, "", "tril"], [270, 0, 1, "", "tril_indices"], [271, 0, 1, "", "trilu"], [100, 0, 1, "", "triu"], [101, 0, 1, "", "triu_indices"], [247, 0, 1, "", "trunc"], [248, 0, 1, "", "trunc_divide"], [372, 0, 1, "", "truncated_svd"], [373, 0, 1, "", "tucker"], [411, 0, 1, "", "unfold"], [658, 0, 1, "", "unique_all"], [412, 0, 1, "", "unique_consecutive"], [659, 0, 1, "", "unique_counts"], [660, 0, 1, "", "unique_inverse"], [661, 0, 1, "", "unique_values"], [426, 0, 1, "", "unravel_index"], [272, 0, 1, "", "unsorted_segment_min"], [273, 0, 1, "", "unsorted_segment_sum"], [622, 0, 1, "", "unstack"], [524, 0, 1, "", "value_is_nan"], [601, 0, 1, "", "vander"], [675, 0, 1, "", "var"], [602, 0, 1, "", "vecdot"], [603, 0, 1, "", "vector_norm"], [604, 0, 1, "", "vector_to_skew_symmetric_matrix"], [274, 0, 1, "", "vorbis_window"], [413, 0, 1, "", "vsplit"], [414, 0, 1, "", "vstack"], [657, 0, 1, "", "where"], [298, 0, 1, "", "xlogy"], [623, 0, 1, "", "zero_pad"], [103, 0, 1, "", "zeros_like"], [299, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[3, 3, 0, "-", "activations"], [51, 3, 0, "-", "array"], [4, 3, 0, "-", "conversions"], [5, 3, 0, "-", "creation"], [6, 3, 0, "-", "data_type"], [7, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "experimental"], [10, 3, 0, "-", "general"], [11, 3, 0, "-", "gradients"], [12, 3, 0, "-", "image"], [13, 3, 0, "-", "layers"], [14, 3, 0, "-", "linear_algebra"], [15, 3, 0, "-", "losses"], [16, 3, 0, "-", "manipulation"], [17, 3, 0, "-", "norms"], [18, 3, 0, "-", "random"], [19, 3, 0, "-", "searching"], [20, 3, 0, "-", "set"], [21, 3, 0, "-", "sorting"], [22, 3, 0, "-", "statistical"], [23, 3, 0, "-", "utility"], [24, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[3, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "gelu"], [3, 0, 1, "", "hardswish"], [3, 0, 1, "", "leaky_relu"], [3, 0, 1, "", "log_softmax"], [3, 0, 1, "", "mish"], [3, 0, 1, "", "relu"], [3, 0, 1, "", "sigmoid"], [3, 0, 1, "", "softmax"], [3, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[51, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[51, 5, 1, "", "T"], [51, 0, 1, "", "__abs__"], [51, 0, 1, "", "__add__"], [51, 0, 1, "", "__eq__"], [51, 0, 1, "", "__ge__"], [51, 0, 1, "", "__gt__"], [51, 0, 1, "", "__init__"], [51, 0, 1, "", "__le__"], [51, 0, 1, "", "__lt__"], [51, 0, 1, "", "__ne__"], [51, 0, 1, "", "__pow__"], [51, 0, 1, "", "__radd__"], [51, 0, 1, "", "__rrshift__"], [51, 0, 1, "", "__rshift__"], [51, 0, 1, "", "__rsub__"], [51, 0, 1, "", "__sub__"], [51, 0, 1, "", "__truediv__"], [51, 0, 1, "", "__xor__"], [51, 5, 1, "", "backend"], [51, 5, 1, "", "base"], [51, 5, 1, "", "data"], [51, 5, 1, "", "device"], [51, 5, 1, "", "dtype"], [51, 5, 1, "", "dynamic_backend"], [51, 5, 1, "", "imag"], [51, 5, 1, "", "itemsize"], [51, 5, 1, "", "mT"], [51, 5, 1, "", "ndim"], [51, 5, 1, "", "real"], [51, 5, 1, "", "shape"], [51, 5, 1, "", "size"], [51, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[4, 2, 1, "", "_to_ivy"], [4, 2, 1, "", "_to_native"], [4, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [4, 2, 1, "", "to_ivy"], [4, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[5, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "asarray"], [5, 0, 1, "", "copy_array"], [5, 0, 1, "", "empty_like"], [5, 0, 1, "", "from_dlpack"], [5, 0, 1, "", "full_like"], [5, 0, 1, "", "linspace"], [5, 0, 1, "", "logspace"], [5, 0, 1, "", "meshgrid"], [5, 0, 1, "", "native_array"], [5, 0, 1, "", "one_hot"], [5, 0, 1, "", "ones_like"], [5, 0, 1, "", "tril"], [5, 0, 1, "", "triu"], [5, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[6, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "astype"], [6, 0, 1, "", "broadcast_arrays"], [6, 0, 1, "", "broadcast_to"], [6, 0, 1, "", "can_cast"], [6, 0, 1, "", "dtype"], [6, 0, 1, "", "finfo"], [6, 0, 1, "", "iinfo"], [6, 0, 1, "", "is_bool_dtype"], [6, 0, 1, "", "is_float_dtype"], [6, 0, 1, "", "is_int_dtype"], [6, 0, 1, "", "is_uint_dtype"], [6, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[7, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "dev"], [7, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[8, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "abs"], [8, 0, 1, "", "acos"], [8, 0, 1, "", "acosh"], [8, 0, 1, "", "add"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "asin"], [8, 0, 1, "", "asinh"], [8, 0, 1, "", "atan"], [8, 0, 1, "", "atan2"], [8, 0, 1, "", "atanh"], [8, 0, 1, "", "bitwise_and"], [8, 0, 1, "", "bitwise_invert"], [8, 0, 1, "", "bitwise_left_shift"], [8, 0, 1, "", "bitwise_or"], [8, 0, 1, "", "bitwise_right_shift"], [8, 0, 1, "", "bitwise_xor"], [8, 0, 1, "", "ceil"], [8, 0, 1, "", "cos"], [8, 0, 1, "", "cosh"], [8, 0, 1, "", "deg2rad"], [8, 0, 1, "", "divide"], [8, 0, 1, "", "equal"], [8, 0, 1, "", "erf"], [8, 0, 1, "", "exp"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "expm1"], [8, 0, 1, "", "floor"], [8, 0, 1, "", "floor_divide"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "greater"], [8, 0, 1, "", "greater_equal"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isfinite"], [8, 0, 1, "", "isinf"], [8, 0, 1, "", "isnan"], [8, 0, 1, "", "isreal"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "less"], [8, 0, 1, "", "less_equal"], [8, 0, 1, "", "log"], [8, 0, 1, "", "log10"], [8, 0, 1, "", "log1p"], [8, 0, 1, "", "log2"], [8, 0, 1, "", "logaddexp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "logical_and"], [8, 0, 1, "", "logical_not"], [8, 0, 1, "", "logical_or"], [8, 0, 1, "", "logical_xor"], [8, 0, 1, "", "maximum"], [8, 0, 1, "", "minimum"], [8, 0, 1, "", "multiply"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "negative"], [8, 0, 1, "", "not_equal"], [8, 0, 1, "", "positive"], [8, 0, 1, "", "pow"], [8, 0, 1, "", "rad2deg"], [8, 0, 1, "", "real"], [8, 0, 1, "", "reciprocal"], [8, 0, 1, "", "remainder"], [8, 0, 1, "", "round"], [8, 0, 1, "", "sign"], [8, 0, 1, "", "sin"], [8, 0, 1, "", "sinh"], [8, 0, 1, "", "sqrt"], [8, 0, 1, "", "square"], [8, 0, 1, "", "subtract"], [8, 0, 1, "", "tan"], [8, 0, 1, "", "tanh"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "trunc"], [8, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[9, 3, 0, "-", "activations"], [9, 3, 0, "-", "conversions"], [9, 3, 0, "-", "creation"], [9, 3, 0, "-", "data_type"], [9, 3, 0, "-", "device"], [9, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "general"], [9, 3, 0, "-", "gradients"], [9, 3, 0, "-", "image"], [9, 3, 0, "-", "layers"], [9, 3, 0, "-", "linear_algebra"], [9, 3, 0, "-", "losses"], [9, 3, 0, "-", "manipulation"], [9, 3, 0, "-", "norms"], [9, 3, 0, "-", "random"], [9, 3, 0, "-", "searching"], [9, 3, 0, "-", "set"], [9, 3, 0, "-", "sorting"], [9, 3, 0, "-", "statistical"], [9, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[9, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "elu"], [9, 0, 1, "", "logit"], [9, 0, 1, "", "logsigmoid"], [9, 0, 1, "", "prelu"], [9, 0, 1, "", "relu6"], [9, 0, 1, "", "selu"], [9, 0, 1, "", "silu"], [9, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[9, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[9, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "blackman_window"], [9, 0, 1, "", "eye_like"], [9, 0, 1, "", "mel_weight_matrix"], [9, 0, 1, "", "trilu"], [9, 0, 1, "", "unsorted_segment_min"], [9, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[9, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[9, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[9, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "allclose"], [9, 0, 1, "", "binarizer"], [9, 0, 1, "", "conj"], [9, 0, 1, "", "copysign"], [9, 0, 1, "", "count_nonzero"], [9, 0, 1, "", "diff"], [9, 0, 1, "", "digamma"], [9, 0, 1, "", "fix"], [9, 0, 1, "", "float_power"], [9, 0, 1, "", "fmax"], [9, 0, 1, "", "fmod"], [9, 0, 1, "", "frexp"], [9, 0, 1, "", "gradient"], [9, 0, 1, "", "hypot"], [9, 0, 1, "", "isclose"], [9, 0, 1, "", "ldexp"], [9, 0, 1, "", "lerp"], [9, 0, 1, "", "lgamma"], [9, 0, 1, "", "modf"], [9, 0, 1, "", "nansum"], [9, 0, 1, "", "nextafter"], [9, 0, 1, "", "signbit"], [9, 0, 1, "", "sinc"], [9, 0, 1, "", "sparsify_tensor"], [9, 0, 1, "", "xlogy"], [9, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[9, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[9, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[9, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[9, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adaptive_avg_pool1d"], [9, 0, 1, "", "adaptive_avg_pool2d"], [9, 0, 1, "", "adaptive_max_pool2d"], [9, 0, 1, "", "avg_pool1d"], [9, 0, 1, "", "avg_pool2d"], [9, 0, 1, "", "avg_pool3d"], [9, 0, 1, "", "dct"], [9, 0, 1, "", "dft"], [9, 0, 1, "", "embedding"], [9, 0, 1, "", "fft"], [9, 0, 1, "", "fft2"], [9, 0, 1, "", "idct"], [9, 0, 1, "", "ifft"], [9, 0, 1, "", "ifftn"], [9, 0, 1, "", "interpolate"], [9, 0, 1, "", "max_pool1d"], [9, 0, 1, "", "max_pool2d"], [9, 0, 1, "", "max_pool3d"], [9, 0, 1, "", "reduce_window"], [9, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adjoint"], [9, 0, 1, "", "cond"], [9, 0, 1, "", "diagflat"], [9, 0, 1, "", "dot"], [9, 0, 1, "", "eig"], [9, 0, 1, "", "eigh_tridiagonal"], [9, 0, 1, "", "eigvals"], [9, 0, 1, "", "initialize_tucker"], [9, 0, 1, "", "kron"], [9, 0, 1, "", "make_svd_non_negative"], [9, 0, 1, "", "matrix_exp"], [9, 0, 1, "", "mode_dot"], [9, 0, 1, "", "multi_dot"], [9, 0, 1, "", "multi_mode_dot"], [9, 0, 1, "", "partial_tucker"], [9, 0, 1, "", "svd_flip"], [9, 0, 1, "", "truncated_svd"], [9, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[9, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "huber_loss"], [9, 0, 1, "", "l1_loss"], [9, 0, 1, "", "smooth_l1_loss"], [9, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[9, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "as_strided"], [9, 0, 1, "", "associative_scan"], [9, 0, 1, "", "atleast_1d"], [9, 0, 1, "", "atleast_2d"], [9, 0, 1, "", "atleast_3d"], [9, 0, 1, "", "concat_from_sequence"], [9, 0, 1, "", "dsplit"], [9, 0, 1, "", "dstack"], [9, 0, 1, "", "expand"], [9, 0, 1, "", "fill_diagonal"], [9, 0, 1, "", "flatten"], [9, 0, 1, "", "fliplr"], [9, 0, 1, "", "flipud"], [9, 0, 1, "", "fold"], [9, 0, 1, "", "heaviside"], [9, 0, 1, "", "hsplit"], [9, 0, 1, "", "hstack"], [9, 0, 1, "", "i0"], [9, 0, 1, "", "matricize"], [9, 0, 1, "", "moveaxis"], [9, 0, 1, "", "pad"], [9, 0, 1, "", "partial_fold"], [9, 0, 1, "", "partial_tensor_to_vec"], [9, 0, 1, "", "partial_unfold"], [9, 0, 1, "", "partial_vec_to_tensor"], [9, 0, 1, "", "rot90"], [9, 0, 1, "", "soft_thresholding"], [9, 0, 1, "", "take_along_axis"], [9, 0, 1, "", "top_k"], [9, 0, 1, "", "unfold"], [9, 0, 1, "", "unique_consecutive"], [9, 0, 1, "", "vsplit"], [9, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[9, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "batch_norm"], [9, 0, 1, "", "group_norm"], [9, 0, 1, "", "instance_norm"], [9, 0, 1, "", "l1_normalize"], [9, 0, 1, "", "l2_normalize"], [9, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[9, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bernoulli"], [9, 0, 1, "", "beta"], [9, 0, 1, "", "dirichlet"], [9, 0, 1, "", "gamma"], [9, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[9, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[9, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[9, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[9, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bincount"], [9, 0, 1, "", "corrcoef"], [9, 0, 1, "", "cov"], [9, 0, 1, "", "cummax"], [9, 0, 1, "", "cummin"], [9, 0, 1, "", "histogram"], [9, 0, 1, "", "igamma"], [9, 0, 1, "", "median"], [9, 0, 1, "", "nanmean"], [9, 0, 1, "", "nanmedian"], [9, 0, 1, "", "nanprod"], [9, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[9, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[10, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "all_equal"], [10, 0, 1, "", "array_equal"], [10, 0, 1, "", "assert_supports_inplace"], [10, 0, 1, "", "clip_matrix_norm"], [10, 0, 1, "", "clip_vector_norm"], [10, 0, 1, "", "default"], [10, 0, 1, "", "einops_rearrange"], [10, 0, 1, "", "einops_reduce"], [10, 0, 1, "", "einops_repeat"], [10, 0, 1, "", "exists"], [10, 0, 1, "", "fourier_encode"], [10, 0, 1, "", "gather"], [10, 0, 1, "", "gather_nd"], [10, 0, 1, "", "get_num_dims"], [10, 0, 1, "", "has_nans"], [10, 0, 1, "", "inplace_decrement"], [10, 0, 1, "", "inplace_increment"], [10, 0, 1, "", "inplace_update"], [10, 0, 1, "", "is_array"], [10, 0, 1, "", "is_ivy_array"], [10, 0, 1, "", "is_ivy_container"], [10, 0, 1, "", "is_native_array"], [10, 0, 1, "", "isin"], [10, 0, 1, "", "scatter_flat"], [10, 0, 1, "", "scatter_nd"], [10, 0, 1, "", "stable_divide"], [10, 0, 1, "", "stable_pow"], [10, 0, 1, "", "supports_inplace_updates"], [10, 0, 1, "", "to_file"], [10, 0, 1, "", "to_list"], [10, 0, 1, "", "to_numpy"], [10, 0, 1, "", "to_scalar"], [10, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[11, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "adam_step"], [11, 0, 1, "", "adam_update"], [11, 0, 1, "", "gradient_descent_update"], [11, 0, 1, "", "lamb_update"], [11, 0, 1, "", "lars_update"], [11, 0, 1, "", "optimizer_update"], [11, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[12, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[13, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "conv1d"], [13, 0, 1, "", "conv1d_transpose"], [13, 0, 1, "", "conv2d"], [13, 0, 1, "", "conv2d_transpose"], [13, 0, 1, "", "conv3d"], [13, 0, 1, "", "conv3d_transpose"], [13, 0, 1, "", "depthwise_conv2d"], [13, 0, 1, "", "dropout"], [13, 0, 1, "", "dropout1d"], [13, 0, 1, "", "dropout2d"], [13, 0, 1, "", "dropout3d"], [13, 0, 1, "", "linear"], [13, 0, 1, "", "lstm_update"], [13, 0, 1, "", "multi_head_attention"], [13, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[14, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "cholesky"], [14, 0, 1, "", "cross"], [14, 0, 1, "", "det"], [14, 0, 1, "", "diag"], [14, 0, 1, "", "diagonal"], [14, 0, 1, "", "eig"], [14, 0, 1, "", "eigh"], [14, 0, 1, "", "eigvalsh"], [14, 0, 1, "", "inner"], [14, 0, 1, "", "inv"], [14, 0, 1, "", "matmul"], [14, 0, 1, "", "matrix_norm"], [14, 0, 1, "", "matrix_power"], [14, 0, 1, "", "matrix_rank"], [14, 0, 1, "", "matrix_transpose"], [14, 0, 1, "", "outer"], [14, 0, 1, "", "pinv"], [14, 0, 1, "", "qr"], [14, 0, 1, "", "slogdet"], [14, 0, 1, "", "solve"], [14, 0, 1, "", "svd"], [14, 0, 1, "", "svdvals"], [14, 0, 1, "", "tensordot"], [14, 0, 1, "", "tensorsolve"], [14, 0, 1, "", "trace"], [14, 0, 1, "", "vander"], [14, 0, 1, "", "vecdot"], [14, 0, 1, "", "vector_norm"], [14, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[15, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "binary_cross_entropy"], [15, 0, 1, "", "cross_entropy"], [15, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[16, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "clip"], [16, 0, 1, "", "concat"], [16, 0, 1, "", "constant_pad"], [16, 0, 1, "", "expand_dims"], [16, 0, 1, "", "flip"], [16, 0, 1, "", "permute_dims"], [16, 0, 1, "", "repeat"], [16, 0, 1, "", "reshape"], [16, 0, 1, "", "roll"], [16, 0, 1, "", "split"], [16, 0, 1, "", "squeeze"], [16, 0, 1, "", "stack"], [16, 0, 1, "", "swapaxes"], [16, 0, 1, "", "tile"], [16, 0, 1, "", "unstack"], [16, 0, 1, "", "view"], [16, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[17, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[18, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "multinomial"], [18, 0, 1, "", "randint"], [18, 0, 1, "", "random_normal"], [18, 0, 1, "", "random_uniform"], [18, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[19, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "argmax"], [19, 0, 1, "", "argmin"], [19, 0, 1, "", "argwhere"], [19, 0, 1, "", "nonzero"], [19, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[20, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "unique_all"], [20, 0, 1, "", "unique_counts"], [20, 0, 1, "", "unique_inverse"], [20, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[21, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "argsort"], [21, 0, 1, "", "msort"], [21, 0, 1, "", "searchsorted"], [21, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[22, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "cumprod"], [22, 0, 1, "", "cumsum"], [22, 0, 1, "", "einsum"], [22, 0, 1, "", "max"], [22, 0, 1, "", "mean"], [22, 0, 1, "", "min"], [22, 0, 1, "", "prod"], [22, 0, 1, "", "std"], [22, 0, 1, "", "sum"], [22, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[23, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "all"], [23, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[24, 2, 1, "", "_wrap_function"], [24, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[25, 3, 0, "-", "activations"], [26, 3, 0, "-", "base"], [52, 3, 0, "-", "container"], [27, 3, 0, "-", "conversions"], [28, 3, 0, "-", "creation"], [29, 3, 0, "-", "data_type"], [30, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "experimental"], [33, 3, 0, "-", "general"], [34, 3, 0, "-", "gradients"], [35, 3, 0, "-", "image"], [36, 3, 0, "-", "layers"], [37, 3, 0, "-", "linear_algebra"], [38, 3, 0, "-", "losses"], [39, 3, 0, "-", "manipulation"], [40, 3, 0, "-", "norms"], [41, 3, 0, "-", "random"], [42, 3, 0, "-", "searching"], [43, 3, 0, "-", "set"], [44, 3, 0, "-", "sorting"], [45, 3, 0, "-", "statistical"], [46, 3, 0, "-", "utility"], [47, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[25, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_gelu"], [25, 0, 1, "", "_static_hardswish"], [25, 0, 1, "", "_static_leaky_relu"], [25, 0, 1, "", "_static_log_softmax"], [25, 0, 1, "", "_static_mish"], [25, 0, 1, "", "_static_relu"], [25, 0, 1, "", "_static_sigmoid"], [25, 0, 1, "", "_static_softmax"], [25, 0, 1, "", "_static_softplus"], [25, 0, 1, "", "gelu"], [25, 0, 1, "", "hardswish"], [25, 0, 1, "", "leaky_relu"], [25, 0, 1, "", "log_softmax"], [25, 0, 1, "", "mish"], [25, 0, 1, "", "relu"], [25, 0, 1, "", "sigmoid"], [25, 0, 1, "", "softmax"], [25, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[26, 1, 1, "", "ContainerBase"], [26, 2, 1, "", "_is_jsonable"], [26, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[26, 0, 1, "", "__getitem__"], [26, 0, 1, "", "__init__"], [26, 0, 1, "", "__setitem__"], [26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [26, 0, 1, "", "_cont_concat_unify"], [26, 0, 1, "", "_cont_get_dev"], [26, 0, 1, "", "_cont_get_shape"], [26, 0, 1, "", "_cont_get_shapes"], [26, 5, 1, "", "_cont_ivy"], [26, 0, 1, "", "_cont_mean_unify"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_slice_keys"], [26, 0, 1, "", "_cont_sum_unify"], [26, 0, 1, "", "_get_queue_item"], [26, 0, 1, "", "cont_all_false"], [26, 0, 1, "", "cont_all_key_chains"], [26, 0, 1, "", "cont_all_true"], [26, 0, 1, "", "cont_as_bools"], [26, 0, 1, "", "cont_assert_contains_sub_container"], [26, 0, 1, "", "cont_assert_contains_sub_structure"], [26, 0, 1, "", "cont_assert_identical"], [26, 0, 1, "", "cont_assert_identical_structure"], [26, 0, 1, "", "cont_at_key_chain"], [26, 0, 1, "", "cont_at_key_chains"], [26, 0, 1, "", "cont_at_keys"], [26, 0, 1, "", "cont_combine"], [26, 0, 1, "", "cont_common_key_chains"], [26, 5, 1, "", "cont_config"], [26, 0, 1, "", "cont_contains_sub_container"], [26, 0, 1, "", "cont_contains_sub_structure"], [26, 0, 1, "", "cont_copy"], [26, 0, 1, "", "cont_create_if_absent"], [26, 0, 1, "", "cont_cutoff_at_depth"], [26, 0, 1, "", "cont_cutoff_at_height"], [26, 0, 1, "", "cont_deep_copy"], [26, 5, 1, "", "cont_dev"], [26, 5, 1, "", "cont_dev_str"], [26, 0, 1, "", "cont_diff"], [26, 0, 1, "", "cont_duplicate_array_keychains"], [26, 0, 1, "", "cont_find_sub_container"], [26, 0, 1, "", "cont_find_sub_structure"], [26, 0, 1, "", "cont_flatten_key_chain"], [26, 0, 1, "", "cont_flatten_key_chains"], [26, 0, 1, "", "cont_format_key_chains"], [26, 0, 1, "", "cont_from_disk_as_hdf5"], [26, 0, 1, "", "cont_from_disk_as_json"], [26, 0, 1, "", "cont_from_disk_as_pickled"], [26, 0, 1, "", "cont_from_flat_list"], [26, 0, 1, "", "cont_handle_inplace"], [26, 0, 1, "", "cont_has_key"], [26, 0, 1, "", "cont_has_key_chain"], [26, 0, 1, "", "cont_identical"], [26, 0, 1, "", "cont_identical_array_shapes"], [26, 0, 1, "", "cont_identical_configs"], [26, 0, 1, "", "cont_identical_structure"], [26, 0, 1, "", "cont_if_exists"], [26, 0, 1, "", "cont_inplace_update"], [26, 5, 1, "", "cont_ivy"], [26, 0, 1, "", "cont_key_chains_containing"], [26, 0, 1, "", "cont_list_join"], [26, 0, 1, "", "cont_list_stack"], [26, 0, 1, "", "cont_load"], [26, 0, 1, "", "cont_map"], [26, 0, 1, "", "cont_map_sub_conts"], [26, 5, 1, "", "cont_max_depth"], [26, 0, 1, "", "cont_multi_map"], [26, 0, 1, "", "cont_multi_map_in_function"], [26, 0, 1, "", "cont_num_arrays"], [26, 0, 1, "", "cont_overwrite_at_key_chain"], [26, 0, 1, "", "cont_overwrite_at_key_chains"], [26, 0, 1, "", "cont_prune_empty"], [26, 0, 1, "", "cont_prune_key_chain"], [26, 0, 1, "", "cont_prune_key_chains"], [26, 0, 1, "", "cont_prune_key_from_key_chains"], [26, 0, 1, "", "cont_prune_keys"], [26, 0, 1, "", "cont_prune_keys_from_key_chains"], [26, 0, 1, "", "cont_reduce"], [26, 0, 1, "", "cont_remove_key_length_limit"], [26, 0, 1, "", "cont_remove_print_limit"], [26, 0, 1, "", "cont_reshape_like"], [26, 0, 1, "", "cont_restructure"], [26, 0, 1, "", "cont_restructure_key_chains"], [26, 0, 1, "", "cont_save"], [26, 0, 1, "", "cont_set_at_key_chain"], [26, 0, 1, "", "cont_set_at_key_chains"], [26, 0, 1, "", "cont_set_at_keys"], [26, 5, 1, "", "cont_shape"], [26, 5, 1, "", "cont_shapes"], [26, 0, 1, "", "cont_show"], [26, 0, 1, "", "cont_show_sub_container"], [26, 0, 1, "", "cont_size_ordered_arrays"], [26, 0, 1, "", "cont_slice_keys"], [26, 0, 1, "", "cont_slice_via_key"], [26, 0, 1, "", "cont_sort_by_key"], [26, 0, 1, "", "cont_structural_diff"], [26, 0, 1, "", "cont_to_dict"], [26, 0, 1, "", "cont_to_disk_as_hdf5"], [26, 0, 1, "", "cont_to_disk_as_json"], [26, 0, 1, "", "cont_to_disk_as_pickled"], [26, 0, 1, "", "cont_to_flat_list"], [26, 0, 1, "", "cont_to_iterator"], [26, 0, 1, "", "cont_to_iterator_keys"], [26, 0, 1, "", "cont_to_iterator_values"], [26, 0, 1, "", "cont_to_jsonable"], [26, 0, 1, "", "cont_to_nested_list"], [26, 0, 1, "", "cont_to_raw"], [26, 0, 1, "", "cont_trim_key"], [26, 0, 1, "", "cont_try_kc"], [26, 0, 1, "", "cont_unify"], [26, 0, 1, "", "cont_unstack_conts"], [26, 0, 1, "", "cont_update_config"], [26, 0, 1, "", "cont_with_default_key_color"], [26, 0, 1, "", "cont_with_entries_as_lists"], [26, 0, 1, "", "cont_with_ivy_backend"], [26, 0, 1, "", "cont_with_key_length_limit"], [26, 0, 1, "", "cont_with_print_indent"], [26, 0, 1, "", "cont_with_print_limit"], [26, 0, 1, "", "cont_with_print_line_spacing"], [26, 5, 1, "", "dynamic_backend"], [26, 0, 1, "", "h5_file_size"], [26, 0, 1, "", "shuffle_h5_file"], [26, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[52, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[52, 0, 1, "", "__abs__"], [52, 0, 1, "", "__add__"], [52, 0, 1, "", "__eq__"], [52, 0, 1, "", "__ge__"], [52, 0, 1, "", "__gt__"], [52, 0, 1, "", "__init__"], [52, 0, 1, "", "__le__"], [52, 0, 1, "", "__lt__"], [52, 0, 1, "", "__ne__"], [52, 0, 1, "", "__pow__"], [52, 0, 1, "", "__radd__"], [52, 0, 1, "", "__rrshift__"], [52, 0, 1, "", "__rshift__"], [52, 0, 1, "", "__rsub__"], [52, 0, 1, "", "__sub__"], [52, 0, 1, "", "__truediv__"], [52, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[27, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_to_ivy"], [27, 0, 1, "", "_static_to_native"], [27, 0, 1, "", "to_ivy"], [27, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[28, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_arange"], [28, 0, 1, "", "_static_asarray"], [28, 0, 1, "", "_static_copy_array"], [28, 0, 1, "", "_static_empty"], [28, 0, 1, "", "_static_empty_like"], [28, 0, 1, "", "_static_eye"], [28, 0, 1, "", "_static_from_dlpack"], [28, 0, 1, "", "_static_full"], [28, 0, 1, "", "_static_full_like"], [28, 0, 1, "", "_static_linspace"], [28, 0, 1, "", "_static_logspace"], [28, 0, 1, "", "_static_meshgrid"], [28, 0, 1, "", "_static_native_array"], [28, 0, 1, "", "_static_one_hot"], [28, 0, 1, "", "_static_ones"], [28, 0, 1, "", "_static_ones_like"], [28, 0, 1, "", "_static_tril"], [28, 0, 1, "", "_static_triu"], [28, 0, 1, "", "_static_zeros"], [28, 0, 1, "", "_static_zeros_like"], [28, 0, 1, "", "asarray"], [28, 0, 1, "", "copy_array"], [28, 0, 1, "", "empty_like"], [28, 0, 1, "", "from_dlpack"], [28, 0, 1, "", "frombuffer"], [28, 0, 1, "", "full_like"], [28, 0, 1, "", "linspace"], [28, 0, 1, "", "logspace"], [28, 0, 1, "", "meshgrid"], [28, 0, 1, "", "native_array"], [28, 0, 1, "", "one_hot"], [28, 0, 1, "", "ones_like"], [28, 0, 1, "", "static_frombuffer"], [28, 0, 1, "", "static_triu_indices"], [28, 0, 1, "", "tril"], [28, 0, 1, "", "triu"], [28, 0, 1, "", "triu_indices"], [28, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[29, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_astype"], [29, 0, 1, "", "_static_broadcast_arrays"], [29, 0, 1, "", "_static_broadcast_to"], [29, 0, 1, "", "_static_can_cast"], [29, 0, 1, "", "_static_default_complex_dtype"], [29, 0, 1, "", "_static_default_float_dtype"], [29, 0, 1, "", "_static_dtype"], [29, 0, 1, "", "_static_finfo"], [29, 0, 1, "", "_static_function_supported_dtypes"], [29, 0, 1, "", "_static_function_unsupported_dtypes"], [29, 0, 1, "", "_static_iinfo"], [29, 0, 1, "", "_static_is_bool_dtype"], [29, 0, 1, "", "_static_is_complex_dtype"], [29, 0, 1, "", "_static_is_float_dtype"], [29, 0, 1, "", "_static_is_int_dtype"], [29, 0, 1, "", "_static_is_uint_dtype"], [29, 0, 1, "", "_static_result_type"], [29, 0, 1, "", "astype"], [29, 0, 1, "", "broadcast_arrays"], [29, 0, 1, "", "broadcast_to"], [29, 0, 1, "", "can_cast"], [29, 0, 1, "", "dtype"], [29, 0, 1, "", "finfo"], [29, 0, 1, "", "iinfo"], [29, 0, 1, "", "is_bool_dtype"], [29, 0, 1, "", "is_complex_dtype"], [29, 0, 1, "", "is_float_dtype"], [29, 0, 1, "", "is_int_dtype"], [29, 0, 1, "", "is_uint_dtype"], [29, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[30, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_dev"], [30, 0, 1, "", "_static_to_device"], [30, 0, 1, "", "dev"], [30, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[31, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_abs"], [31, 0, 1, "", "_static_acos"], [31, 0, 1, "", "_static_acosh"], [31, 0, 1, "", "_static_add"], [31, 0, 1, "", "_static_asin"], [31, 0, 1, "", "_static_asinh"], [31, 0, 1, "", "_static_atan"], [31, 0, 1, "", "_static_atan2"], [31, 0, 1, "", "_static_atanh"], [31, 0, 1, "", "_static_bitwise_and"], [31, 0, 1, "", "_static_bitwise_invert"], [31, 0, 1, "", "_static_bitwise_left_shift"], [31, 0, 1, "", "_static_bitwise_or"], [31, 0, 1, "", "_static_bitwise_right_shift"], [31, 0, 1, "", "_static_bitwise_xor"], [31, 0, 1, "", "_static_ceil"], [31, 0, 1, "", "_static_cos"], [31, 0, 1, "", "_static_cosh"], [31, 0, 1, "", "_static_deg2rad"], [31, 0, 1, "", "_static_divide"], [31, 0, 1, "", "_static_equal"], [31, 0, 1, "", "_static_erf"], [31, 0, 1, "", "_static_exp"], [31, 0, 1, "", "_static_expm1"], [31, 0, 1, "", "_static_floor"], [31, 0, 1, "", "_static_floor_divide"], [31, 0, 1, "", "_static_greater"], [31, 0, 1, "", "_static_greater_equal"], [31, 0, 1, "", "_static_isfinite"], [31, 0, 1, "", "_static_isinf"], [31, 0, 1, "", "_static_isnan"], [31, 0, 1, "", "_static_isreal"], [31, 0, 1, "", "_static_lcm"], [31, 0, 1, "", "_static_less"], [31, 0, 1, "", "_static_less_equal"], [31, 0, 1, "", "_static_log"], [31, 0, 1, "", "_static_log10"], [31, 0, 1, "", "_static_log1p"], [31, 0, 1, "", "_static_log2"], [31, 0, 1, "", "_static_logaddexp"], [31, 0, 1, "", "_static_logical_and"], [31, 0, 1, "", "_static_logical_not"], [31, 0, 1, "", "_static_logical_or"], [31, 0, 1, "", "_static_logical_xor"], [31, 0, 1, "", "_static_maximum"], [31, 0, 1, "", "_static_minimum"], [31, 0, 1, "", "_static_multiply"], [31, 0, 1, "", "_static_negative"], [31, 0, 1, "", "_static_not_equal"], [31, 0, 1, "", "_static_positive"], [31, 0, 1, "", "_static_pow"], [31, 0, 1, "", "_static_rad2deg"], [31, 0, 1, "", "_static_reciprocal"], [31, 0, 1, "", "_static_remainder"], [31, 0, 1, "", "_static_round"], [31, 0, 1, "", "_static_sign"], [31, 0, 1, "", "_static_sin"], [31, 0, 1, "", "_static_sinh"], [31, 0, 1, "", "_static_sqrt"], [31, 0, 1, "", "_static_square"], [31, 0, 1, "", "_static_subtract"], [31, 0, 1, "", "_static_tan"], [31, 0, 1, "", "_static_tanh"], [31, 0, 1, "", "_static_trapz"], [31, 0, 1, "", "_static_trunc"], [31, 0, 1, "", "_static_trunc_divide"], [31, 0, 1, "", "abs"], [31, 0, 1, "", "acos"], [31, 0, 1, "", "acosh"], [31, 0, 1, "", "add"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "asin"], [31, 0, 1, "", "asinh"], [31, 0, 1, "", "atan"], [31, 0, 1, "", "atan2"], [31, 0, 1, "", "atanh"], [31, 0, 1, "", "bitwise_and"], [31, 0, 1, "", "bitwise_invert"], [31, 0, 1, "", "bitwise_left_shift"], [31, 0, 1, "", "bitwise_or"], [31, 0, 1, "", "bitwise_right_shift"], [31, 0, 1, "", "bitwise_xor"], [31, 0, 1, "", "ceil"], [31, 0, 1, "", "cos"], [31, 0, 1, "", "cosh"], [31, 0, 1, "", "deg2rad"], [31, 0, 1, "", "divide"], [31, 0, 1, "", "equal"], [31, 0, 1, "", "erf"], [31, 0, 1, "", "exp"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "expm1"], [31, 0, 1, "", "floor"], [31, 0, 1, "", "floor_divide"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "greater"], [31, 0, 1, "", "greater_equal"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isfinite"], [31, 0, 1, "", "isinf"], [31, 0, 1, "", "isnan"], [31, 0, 1, "", "isreal"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "less"], [31, 0, 1, "", "less_equal"], [31, 0, 1, "", "log"], [31, 0, 1, "", "log10"], [31, 0, 1, "", "log1p"], [31, 0, 1, "", "log2"], [31, 0, 1, "", "logaddexp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "logical_and"], [31, 0, 1, "", "logical_not"], [31, 0, 1, "", "logical_or"], [31, 0, 1, "", "logical_xor"], [31, 0, 1, "", "maximum"], [31, 0, 1, "", "minimum"], [31, 0, 1, "", "multiply"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "negative"], [31, 0, 1, "", "not_equal"], [31, 0, 1, "", "positive"], [31, 0, 1, "", "pow"], [31, 0, 1, "", "rad2deg"], [31, 0, 1, "", "real"], [31, 0, 1, "", "reciprocal"], [31, 0, 1, "", "remainder"], [31, 0, 1, "", "round"], [31, 0, 1, "", "sign"], [31, 0, 1, "", "sin"], [31, 0, 1, "", "sinh"], [31, 0, 1, "", "sqrt"], [31, 0, 1, "", "square"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "subtract"], [31, 0, 1, "", "tan"], [31, 0, 1, "", "tanh"], [31, 0, 1, "", "trapz"], [31, 0, 1, "", "trunc"], [31, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[32, 3, 0, "-", "activations"], [32, 3, 0, "-", "conversions"], [32, 3, 0, "-", "creation"], [32, 3, 0, "-", "data_type"], [32, 3, 0, "-", "device"], [32, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "general"], [32, 3, 0, "-", "gradients"], [32, 3, 0, "-", "image"], [32, 3, 0, "-", "layers"], [32, 3, 0, "-", "linear_algebra"], [32, 3, 0, "-", "losses"], [32, 3, 0, "-", "manipulation"], [32, 3, 0, "-", "norms"], [32, 3, 0, "-", "random"], [32, 3, 0, "-", "searching"], [32, 3, 0, "-", "set"], [32, 3, 0, "-", "sorting"], [32, 3, 0, "-", "statistical"], [32, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[32, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_elu"], [32, 0, 1, "", "_static_silu"], [32, 0, 1, "", "elu"], [32, 0, 1, "", "logit"], [32, 0, 1, "", "logsigmoid"], [32, 0, 1, "", "prelu"], [32, 0, 1, "", "relu6"], [32, 0, 1, "", "selu"], [32, 0, 1, "", "silu"], [32, 0, 1, "", "static_logit"], [32, 0, 1, "", "static_logsigmoid"], [32, 0, 1, "", "static_prelu"], [32, 0, 1, "", "static_relu6"], [32, 0, 1, "", "static_selu"], [32, 0, 1, "", "static_thresholded_relu"], [32, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[32, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[32, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_trilu"], [32, 0, 1, "", "blackman_window"], [32, 0, 1, "", "eye_like"], [32, 0, 1, "", "hamming_window"], [32, 0, 1, "", "hann_window"], [32, 0, 1, "", "kaiser_bessel_derived_window"], [32, 0, 1, "", "kaiser_window"], [32, 0, 1, "", "mel_weight_matrix"], [32, 0, 1, "", "static_blackman_window"], [32, 0, 1, "", "static_eye_like"], [32, 0, 1, "", "static_hamming_window"], [32, 0, 1, "", "static_hann_window"], [32, 0, 1, "", "static_kaiser_bessel_derived_window"], [32, 0, 1, "", "static_kaiser_window"], [32, 0, 1, "", "static_mel_weight_matrix"], [32, 0, 1, "", "static_tril_indices"], [32, 0, 1, "", "static_unsorted_segment_min"], [32, 0, 1, "", "static_unsorted_segment_sum"], [32, 0, 1, "", "static_vorbis_window"], [32, 0, 1, "", "tril_indices"], [32, 0, 1, "", "trilu"], [32, 0, 1, "", "unsorted_segment_min"], [32, 0, 1, "", "unsorted_segment_sum"], [32, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[32, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[32, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[32, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "allclose"], [32, 0, 1, "", "binarizer"], [32, 0, 1, "", "conj"], [32, 0, 1, "", "copysign"], [32, 0, 1, "", "count_nonzero"], [32, 0, 1, "", "diff"], [32, 0, 1, "", "digamma"], [32, 0, 1, "", "fix"], [32, 0, 1, "", "float_power"], [32, 0, 1, "", "fmax"], [32, 0, 1, "", "fmod"], [32, 0, 1, "", "frexp"], [32, 0, 1, "", "gradient"], [32, 0, 1, "", "hypot"], [32, 0, 1, "", "isclose"], [32, 0, 1, "", "ldexp"], [32, 0, 1, "", "lerp"], [32, 0, 1, "", "modf"], [32, 0, 1, "", "nansum"], [32, 0, 1, "", "nextafter"], [32, 0, 1, "", "signbit"], [32, 0, 1, "", "sinc"], [32, 0, 1, "", "sparsify_tensor"], [32, 0, 1, "", "static_allclose"], [32, 0, 1, "", "static_binarizer"], [32, 0, 1, "", "static_conj"], [32, 0, 1, "", "static_copysign"], [32, 0, 1, "", "static_count_nonzero"], [32, 0, 1, "", "static_diff"], [32, 0, 1, "", "static_digamma"], [32, 0, 1, "", "static_fix"], [32, 0, 1, "", "static_float_power"], [32, 0, 1, "", "static_fmax"], [32, 0, 1, "", "static_fmod"], [32, 0, 1, "", "static_frexp"], [32, 0, 1, "", "static_gradient"], [32, 0, 1, "", "static_hypot"], [32, 0, 1, "", "static_isclose"], [32, 0, 1, "", "static_ldexp"], [32, 0, 1, "", "static_lerp"], [32, 0, 1, "", "static_modf"], [32, 0, 1, "", "static_nansum"], [32, 0, 1, "", "static_nextafter"], [32, 0, 1, "", "static_signbit"], [32, 0, 1, "", "static_sinc"], [32, 0, 1, "", "static_sparsify_tensor"], [32, 0, 1, "", "static_xlogy"], [32, 0, 1, "", "static_zeta"], [32, 0, 1, "", "xlogy"], [32, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[32, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_reduce"], [32, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[32, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[32, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[32, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fft"], [32, 0, 1, "", "adaptive_avg_pool1d"], [32, 0, 1, "", "adaptive_avg_pool2d"], [32, 0, 1, "", "adaptive_max_pool2d"], [32, 0, 1, "", "avg_pool1d"], [32, 0, 1, "", "avg_pool2d"], [32, 0, 1, "", "avg_pool3d"], [32, 0, 1, "", "dct"], [32, 0, 1, "", "dft"], [32, 0, 1, "", "embedding"], [32, 0, 1, "", "fft"], [32, 0, 1, "", "idct"], [32, 0, 1, "", "ifft"], [32, 0, 1, "", "ifftn"], [32, 0, 1, "", "interpolate"], [32, 0, 1, "", "max_pool1d"], [32, 0, 1, "", "max_pool2d"], [32, 0, 1, "", "max_pool3d"], [32, 0, 1, "", "rfftn"], [32, 0, 1, "", "static_adaptive_avg_pool1d"], [32, 0, 1, "", "static_adaptive_avg_pool2d"], [32, 0, 1, "", "static_adaptive_max_pool2d"], [32, 0, 1, "", "static_avg_pool1d"], [32, 0, 1, "", "static_avg_pool2d"], [32, 0, 1, "", "static_avg_pool3d"], [32, 0, 1, "", "static_dct"], [32, 0, 1, "", "static_dft"], [32, 0, 1, "", "static_embedding"], [32, 0, 1, "", "static_idct"], [32, 0, 1, "", "static_ifft"], [32, 0, 1, "", "static_ifftn"], [32, 0, 1, "", "static_interpolate"], [32, 0, 1, "", "static_max_pool1d"], [32, 0, 1, "", "static_max_pool2d"], [32, 0, 1, "", "static_max_pool3d"], [32, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "adjoint"], [32, 0, 1, "", "cond"], [32, 0, 1, "", "diagflat"], [32, 0, 1, "", "dot"], [32, 0, 1, "", "eig"], [32, 0, 1, "", "eigh_tridiagonal"], [32, 0, 1, "", "eigvals"], [32, 0, 1, "", "initialize_tucker"], [32, 0, 1, "", "kron"], [32, 0, 1, "", "make_svd_non_negative"], [32, 0, 1, "", "matrix_exp"], [32, 0, 1, "", "mode_dot"], [32, 0, 1, "", "multi_dot"], [32, 0, 1, "", "multi_mode_dot"], [32, 0, 1, "", "partial_tucker"], [32, 0, 1, "", "static_adjoint"], [32, 0, 1, "", "static_cond"], [32, 0, 1, "", "static_diagflat"], [32, 0, 1, "", "static_dot"], [32, 0, 1, "", "static_eig"], [32, 0, 1, "", "static_eigh_tridiagonal"], [32, 0, 1, "", "static_eigvals"], [32, 0, 1, "", "static_initialize_tucker"], [32, 0, 1, "", "static_kron"], [32, 0, 1, "", "static_make_svd_non_negative"], [32, 0, 1, "", "static_matrix_exp"], [32, 0, 1, "", "static_mode_dot"], [32, 0, 1, "", "static_multi_dot"], [32, 0, 1, "", "static_multi_mode_dot"], [32, 0, 1, "", "static_partial_tucker"], [32, 0, 1, "", "static_svd_flip"], [32, 0, 1, "", "static_truncated_svd"], [32, 0, 1, "", "static_tucker"], [32, 0, 1, "", "svd_flip"], [32, 0, 1, "", "truncated_svd"], [32, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[32, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_huber_loss"], [32, 0, 1, "", "_static_l1_loss"], [32, 0, 1, "", "_static_smooth_l1_loss"], [32, 0, 1, "", "_static_soft_margin_loss"], [32, 0, 1, "", "huber_loss"], [32, 0, 1, "", "l1_loss"], [32, 0, 1, "", "smooth_l1_loss"], [32, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[32, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fill_diagonal"], [32, 0, 1, "", "_static_unique_consecutive"], [32, 0, 1, "", "as_strided"], [32, 0, 1, "", "associative_scan"], [32, 0, 1, "", "atleast_1d"], [32, 0, 1, "", "atleast_2d"], [32, 0, 1, "", "atleast_3d"], [32, 0, 1, "", "broadcast_shapes"], [32, 0, 1, "", "concat_from_sequence"], [32, 0, 1, "", "dsplit"], [32, 0, 1, "", "dstack"], [32, 0, 1, "", "expand"], [32, 0, 1, "", "fill_diagonal"], [32, 0, 1, "", "flatten"], [32, 0, 1, "", "fliplr"], [32, 0, 1, "", "flipud"], [32, 0, 1, "", "fold"], [32, 0, 1, "", "heaviside"], [32, 0, 1, "", "hsplit"], [32, 0, 1, "", "hstack"], [32, 0, 1, "", "i0"], [32, 0, 1, "", "matricize"], [32, 0, 1, "", "moveaxis"], [32, 0, 1, "", "pad"], [32, 0, 1, "", "partial_fold"], [32, 0, 1, "", "partial_tensor_to_vec"], [32, 0, 1, "", "partial_unfold"], [32, 0, 1, "", "partial_vec_to_tensor"], [32, 0, 1, "", "rot90"], [32, 0, 1, "", "soft_thresholding"], [32, 0, 1, "", "static_as_strided"], [32, 0, 1, "", "static_atleast_1d"], [32, 0, 1, "", "static_atleast_2d"], [32, 0, 1, "", "static_atleast_3d"], [32, 0, 1, "", "static_broadcast_shapes"], [32, 0, 1, "", "static_concat_from_sequence"], [32, 0, 1, "", "static_dsplit"], [32, 0, 1, "", "static_dstack"], [32, 0, 1, "", "static_expand"], [32, 0, 1, "", "static_flatten"], [32, 0, 1, "", "static_fliplr"], [32, 0, 1, "", "static_flipud"], [32, 0, 1, "", "static_fold"], [32, 0, 1, "", "static_heaviside"], [32, 0, 1, "", "static_hsplit"], [32, 0, 1, "", "static_hstack"], [32, 0, 1, "", "static_i0"], [32, 0, 1, "", "static_matricize"], [32, 0, 1, "", "static_moveaxis"], [32, 0, 1, "", "static_pad"], [32, 0, 1, "", "static_partial_fold"], [32, 0, 1, "", "static_partial_tensor_to_vec"], [32, 0, 1, "", "static_partial_unfold"], [32, 0, 1, "", "static_partial_vec_to_tensor"], [32, 0, 1, "", "static_rot90"], [32, 0, 1, "", "static_soft_thresholding"], [32, 0, 1, "", "static_take_along_axis"], [32, 0, 1, "", "static_top_k"], [32, 0, 1, "", "static_unfold"], [32, 0, 1, "", "static_vsplit"], [32, 0, 1, "", "static_vstack"], [32, 0, 1, "", "take_along_axis"], [32, 0, 1, "", "top_k"], [32, 0, 1, "", "unfold"], [32, 0, 1, "", "unique_consecutive"], [32, 0, 1, "", "vsplit"], [32, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[32, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "batch_norm"], [32, 0, 1, "", "group_norm"], [32, 0, 1, "", "instance_norm"], [32, 0, 1, "", "l1_normalize"], [32, 0, 1, "", "l2_normalize"], [32, 0, 1, "", "lp_normalize"], [32, 0, 1, "", "static_batch_norm"], [32, 0, 1, "", "static_group_norm"], [32, 0, 1, "", "static_instance_norm"], [32, 0, 1, "", "static_l1_normalize"], [32, 0, 1, "", "static_l2_normalize"], [32, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[32, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "bernoulli"], [32, 0, 1, "", "beta"], [32, 0, 1, "", "dirichlet"], [32, 0, 1, "", "gamma"], [32, 0, 1, "", "poisson"], [32, 0, 1, "", "static_bernoulli"], [32, 0, 1, "", "static_beta"], [32, 0, 1, "", "static_dirichlet"], [32, 0, 1, "", "static_gamma"], [32, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[32, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "static_unravel_index"], [32, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[32, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[32, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "invert_permutation"], [32, 0, 1, "", "lexsort"], [32, 0, 1, "", "static_invert_permutation"], [32, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[32, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_cummax"], [32, 0, 1, "", "_static_cummin"], [32, 0, 1, "", "bincount"], [32, 0, 1, "", "corrcoef"], [32, 0, 1, "", "cov"], [32, 0, 1, "", "cummax"], [32, 0, 1, "", "cummin"], [32, 0, 1, "", "histogram"], [32, 0, 1, "", "igamma"], [32, 0, 1, "", "median"], [32, 0, 1, "", "nanmean"], [32, 0, 1, "", "nanmedian"], [32, 0, 1, "", "nanprod"], [32, 0, 1, "", "quantile"], [32, 0, 1, "", "static_bincount"], [32, 0, 1, "", "static_corrcoef"], [32, 0, 1, "", "static_cov"], [32, 0, 1, "", "static_histogram"], [32, 0, 1, "", "static_igamma"], [32, 0, 1, "", "static_median"], [32, 0, 1, "", "static_nanmean"], [32, 0, 1, "", "static_nanmedian"], [32, 0, 1, "", "static_nanprod"], [32, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[32, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "optional_get_element"], [32, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[33, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_all_equal"], [33, 0, 1, "", "_static_array_equal"], [33, 0, 1, "", "_static_assert_supports_inplace"], [33, 0, 1, "", "_static_clip_matrix_norm"], [33, 0, 1, "", "_static_clip_vector_norm"], [33, 0, 1, "", "_static_einops_rearrange"], [33, 0, 1, "", "_static_einops_reduce"], [33, 0, 1, "", "_static_einops_repeat"], [33, 0, 1, "", "_static_fourier_encode"], [33, 0, 1, "", "_static_gather"], [33, 0, 1, "", "_static_gather_nd"], [33, 0, 1, "", "_static_get_num_dims"], [33, 0, 1, "", "_static_has_nans"], [33, 0, 1, "", "_static_inplace_decrement"], [33, 0, 1, "", "_static_inplace_increment"], [33, 0, 1, "", "_static_inplace_update"], [33, 0, 1, "", "_static_is_array"], [33, 0, 1, "", "_static_is_ivy_array"], [33, 0, 1, "", "_static_is_native_array"], [33, 0, 1, "", "_static_scatter_flat"], [33, 0, 1, "", "_static_scatter_nd"], [33, 0, 1, "", "_static_stable_divide"], [33, 0, 1, "", "_static_stable_pow"], [33, 0, 1, "", "_static_supports_inplace_updates"], [33, 0, 1, "", "_static_to_list"], [33, 0, 1, "", "_static_to_numpy"], [33, 0, 1, "", "_static_to_scalar"], [33, 0, 1, "", "_static_value_is_nan"], [33, 0, 1, "", "all_equal"], [33, 0, 1, "", "array_equal"], [33, 0, 1, "", "assert_supports_inplace"], [33, 0, 1, "", "clip_matrix_norm"], [33, 0, 1, "", "clip_vector_norm"], [33, 0, 1, "", "einops_rearrange"], [33, 0, 1, "", "einops_reduce"], [33, 0, 1, "", "einops_repeat"], [33, 0, 1, "", "fourier_encode"], [33, 0, 1, "", "gather"], [33, 0, 1, "", "gather_nd"], [33, 0, 1, "", "get_num_dims"], [33, 0, 1, "", "has_nans"], [33, 0, 1, "", "inplace_decrement"], [33, 0, 1, "", "inplace_increment"], [33, 0, 1, "", "inplace_update"], [33, 0, 1, "", "is_array"], [33, 0, 1, "", "is_ivy_array"], [33, 0, 1, "", "is_native_array"], [33, 0, 1, "", "isin"], [33, 0, 1, "", "itemsize"], [33, 0, 1, "", "scatter_flat"], [33, 0, 1, "", "scatter_nd"], [33, 0, 1, "", "stable_divide"], [33, 0, 1, "", "stable_pow"], [33, 0, 1, "", "static_isin"], [33, 0, 1, "", "static_itemsize"], [33, 0, 1, "", "static_strides"], [33, 0, 1, "", "strides"], [33, 0, 1, "", "supports_inplace_updates"], [33, 0, 1, "", "to_list"], [33, 0, 1, "", "to_numpy"], [33, 0, 1, "", "to_scalar"], [33, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[34, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_stop_gradient"], [34, 0, 1, "", "adam_step"], [34, 0, 1, "", "adam_update"], [34, 0, 1, "", "gradient_descent_update"], [34, 0, 1, "", "lamb_update"], [34, 0, 1, "", "lars_update"], [34, 0, 1, "", "optimizer_update"], [34, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[35, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[36, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_conv1d"], [36, 0, 1, "", "_static_conv1d_transpose"], [36, 0, 1, "", "_static_conv2d"], [36, 0, 1, "", "_static_conv2d_transpose"], [36, 0, 1, "", "_static_conv3d"], [36, 0, 1, "", "_static_conv3d_transpose"], [36, 0, 1, "", "_static_depthwise_conv2d"], [36, 0, 1, "", "_static_dropout"], [36, 0, 1, "", "_static_dropout1d"], [36, 0, 1, "", "_static_dropout2d"], [36, 0, 1, "", "_static_dropout3d"], [36, 0, 1, "", "_static_linear"], [36, 0, 1, "", "_static_lstm_update"], [36, 0, 1, "", "_static_multi_head_attention"], [36, 0, 1, "", "_static_reduce_window"], [36, 0, 1, "", "_static_scaled_dot_product_attention"], [36, 0, 1, "", "conv1d"], [36, 0, 1, "", "conv1d_transpose"], [36, 0, 1, "", "conv2d"], [36, 0, 1, "", "conv2d_transpose"], [36, 0, 1, "", "conv3d"], [36, 0, 1, "", "conv3d_transpose"], [36, 0, 1, "", "depthwise_conv2d"], [36, 0, 1, "", "dropout"], [36, 0, 1, "", "dropout1d"], [36, 0, 1, "", "dropout2d"], [36, 0, 1, "", "dropout3d"], [36, 0, 1, "", "linear"], [36, 0, 1, "", "lstm_update"], [36, 0, 1, "", "multi_head_attention"], [36, 0, 1, "", "reduce_window"], [36, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[37, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_cholesky"], [37, 0, 1, "", "_static_cross"], [37, 0, 1, "", "_static_det"], [37, 0, 1, "", "_static_diag"], [37, 0, 1, "", "_static_diagonal"], [37, 0, 1, "", "_static_eigh"], [37, 0, 1, "", "_static_eigvalsh"], [37, 0, 1, "", "_static_inner"], [37, 0, 1, "", "_static_inv"], [37, 0, 1, "", "_static_matmul"], [37, 0, 1, "", "_static_matrix_norm"], [37, 0, 1, "", "_static_matrix_power"], [37, 0, 1, "", "_static_matrix_rank"], [37, 0, 1, "", "_static_matrix_transpose"], [37, 0, 1, "", "_static_outer"], [37, 0, 1, "", "_static_pinv"], [37, 0, 1, "", "_static_qr"], [37, 0, 1, "", "_static_slogdet"], [37, 0, 1, "", "_static_solve"], [37, 0, 1, "", "_static_svd"], [37, 0, 1, "", "_static_svdvals"], [37, 0, 1, "", "_static_tensordot"], [37, 0, 1, "", "_static_tensorsolve"], [37, 0, 1, "", "_static_trace"], [37, 0, 1, "", "_static_vander"], [37, 0, 1, "", "_static_vecdot"], [37, 0, 1, "", "_static_vector_norm"], [37, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [37, 0, 1, "", "cholesky"], [37, 0, 1, "", "cross"], [37, 0, 1, "", "det"], [37, 0, 1, "", "diag"], [37, 0, 1, "", "diagonal"], [37, 0, 1, "", "eigh"], [37, 0, 1, "", "eigvalsh"], [37, 0, 1, "", "inner"], [37, 0, 1, "", "inv"], [37, 0, 1, "", "matmul"], [37, 0, 1, "", "matrix_norm"], [37, 0, 1, "", "matrix_power"], [37, 0, 1, "", "matrix_rank"], [37, 0, 1, "", "matrix_transpose"], [37, 0, 1, "", "outer"], [37, 0, 1, "", "pinv"], [37, 0, 1, "", "qr"], [37, 0, 1, "", "slogdet"], [37, 0, 1, "", "solve"], [37, 0, 1, "", "svd"], [37, 0, 1, "", "svdvals"], [37, 0, 1, "", "tensordot"], [37, 0, 1, "", "tensorsolve"], [37, 0, 1, "", "trace"], [37, 0, 1, "", "vander"], [37, 0, 1, "", "vecdot"], [37, 0, 1, "", "vector_norm"], [37, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[38, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_binary_cross_entropy"], [38, 0, 1, "", "_static_cross_entropy"], [38, 0, 1, "", "_static_sparse_cross_entropy"], [38, 0, 1, "", "binary_cross_entropy"], [38, 0, 1, "", "cross_entropy"], [38, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[39, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_clip"], [39, 0, 1, "", "_static_concat"], [39, 0, 1, "", "_static_constant_pad"], [39, 0, 1, "", "_static_expand_dims"], [39, 0, 1, "", "_static_flip"], [39, 0, 1, "", "_static_permute_dims"], [39, 0, 1, "", "_static_repeat"], [39, 0, 1, "", "_static_reshape"], [39, 0, 1, "", "_static_roll"], [39, 0, 1, "", "_static_split"], [39, 0, 1, "", "_static_squeeze"], [39, 0, 1, "", "_static_stack"], [39, 0, 1, "", "_static_swapaxes"], [39, 0, 1, "", "_static_tile"], [39, 0, 1, "", "_static_unstack"], [39, 0, 1, "", "_static_zero_pad"], [39, 0, 1, "", "clip"], [39, 0, 1, "", "concat"], [39, 0, 1, "", "constant_pad"], [39, 0, 1, "", "expand_dims"], [39, 0, 1, "", "flip"], [39, 0, 1, "", "permute_dims"], [39, 0, 1, "", "repeat"], [39, 0, 1, "", "reshape"], [39, 0, 1, "", "roll"], [39, 0, 1, "", "split"], [39, 0, 1, "", "squeeze"], [39, 0, 1, "", "stack"], [39, 0, 1, "", "swapaxes"], [39, 0, 1, "", "tile"], [39, 0, 1, "", "unstack"], [39, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[40, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[41, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_multinomial"], [41, 0, 1, "", "_static_randint"], [41, 0, 1, "", "_static_random_normal"], [41, 0, 1, "", "_static_random_uniform"], [41, 0, 1, "", "_static_shuffle"], [41, 0, 1, "", "multinomial"], [41, 0, 1, "", "randint"], [41, 0, 1, "", "random_normal"], [41, 0, 1, "", "random_uniform"], [41, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[42, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_argmax"], [42, 0, 1, "", "_static_argmin"], [42, 0, 1, "", "_static_argwhere"], [42, 0, 1, "", "_static_nonzero"], [42, 0, 1, "", "_static_where"], [42, 0, 1, "", "argmax"], [42, 0, 1, "", "argmin"], [42, 0, 1, "", "argwhere"], [42, 0, 1, "", "nonzero"], [42, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[43, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_unique_all"], [43, 0, 1, "", "_static_unique_counts"], [43, 0, 1, "", "_static_unique_inverse"], [43, 0, 1, "", "_static_unique_values"], [43, 0, 1, "", "unique_all"], [43, 0, 1, "", "unique_counts"], [43, 0, 1, "", "unique_inverse"], [43, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[44, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_argsort"], [44, 0, 1, "", "_static_searchsorted"], [44, 0, 1, "", "_static_sort"], [44, 0, 1, "", "argsort"], [44, 0, 1, "", "msort"], [44, 0, 1, "", "searchsorted"], [44, 0, 1, "", "sort"], [44, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[45, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_cumprod"], [45, 0, 1, "", "_static_cumsum"], [45, 0, 1, "", "_static_prod"], [45, 0, 1, "", "_static_sum"], [45, 0, 1, "", "_static_var"], [45, 0, 1, "", "cumprod"], [45, 0, 1, "", "cumsum"], [45, 0, 1, "", "einsum"], [45, 0, 1, "", "max"], [45, 0, 1, "", "mean"], [45, 0, 1, "", "min"], [45, 0, 1, "", "prod"], [45, 0, 1, "", "std"], [45, 0, 1, "", "sum"], [45, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[46, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "_static_all"], [46, 0, 1, "", "_static_any"], [46, 0, 1, "", "all"], [46, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[47, 2, 1, "", "_wrap_function"], [47, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[48, 3, 0, "-", "base"], [49, 3, 0, "-", "cp_tensor"], [50, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[48, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[48, 0, 1, "", "__init__"], [48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "mode_dot"], [48, 0, 1, "", "norm"], [48, 0, 1, "", "to_tensor"], [48, 0, 1, "", "to_unfolded"], [48, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[49, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[49, 0, 1, "", "__init__"], [49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "cp_copy"], [49, 0, 1, "", "cp_flip_sign"], [49, 0, 1, "", "cp_lstsq_grad"], [49, 0, 1, "", "cp_mode_dot"], [49, 0, 1, "", "cp_n_param"], [49, 0, 1, "", "cp_norm"], [49, 0, 1, "", "cp_normalize"], [49, 0, 1, "", "cp_to_tensor"], [49, 0, 1, "", "cp_to_unfolded"], [49, 0, 1, "", "cp_to_vec"], [49, 0, 1, "", "mode_dot"], [49, 5, 1, "", "n_param"], [49, 0, 1, "", "norm"], [49, 0, 1, "", "normalize"], [49, 0, 1, "", "to_tensor"], [49, 0, 1, "", "to_unfolded"], [49, 0, 1, "", "to_vec"], [49, 0, 1, "", "unfolding_dot_khatri_rao"], [49, 0, 1, "", "validate_cp_rank"], [49, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[50, 1, 1, "", "TuckerTensor"], [50, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[50, 0, 1, "", "__init__"], [50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "mode_dot"], [50, 5, 1, "", "n_param"], [50, 0, 1, "", "to_tensor"], [50, 0, 1, "", "to_unfolded"], [50, 0, 1, "", "to_vec"], [50, 0, 1, "", "tucker_copy"], [50, 0, 1, "", "tucker_mode_dot"], [50, 0, 1, "", "tucker_n_param"], [50, 0, 1, "", "tucker_normalize"], [50, 0, 1, "", "tucker_to_tensor"], [50, 0, 1, "", "tucker_to_unfolded"], [50, 0, 1, "", "tucker_to_vec"], [50, 0, 1, "", "validate_tucker_rank"], [50, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[55, 3, 0, "-", "base"], [56, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[55, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[55, 0, 1, "", "__init__"], [55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "broadcast_shapes"], [55, 5, 1, "", "data"], [55, 5, 1, "", "device"], [55, 5, 1, "", "dtype"], [55, 5, 1, "", "inner_shape"], [55, 5, 1, "", "ndim"], [55, 0, 1, "", "nested_array"], [55, 5, 1, "", "nested_rank"], [55, 0, 1, "", "ragged_map"], [55, 0, 1, "", "ragged_multi_map"], [55, 0, 1, "", "ragged_multi_map_in_function"], [55, 0, 1, "", "replace_ivy_arrays"], [55, 5, 1, "", "shape"], [55, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[56, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[54, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[54, 0, 1, "", "__init__"], [54, 0, 1, "", "from_row_lengths"], [54, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[537, 3, 0, "-", "activations"], [538, 3, 0, "-", "constants"], [539, 3, 0, "-", "control_flow_ops"], [540, 3, 0, "-", "creation"], [541, 3, 0, "-", "data_type"], [542, 3, 0, "-", "device"], [543, 3, 0, "-", "elementwise"], [544, 3, 0, "-", "experimental"], [545, 3, 0, "-", "general"], [546, 3, 0, "-", "gradients"], [547, 3, 0, "-", "layers"], [548, 3, 0, "-", "linear_algebra"], [549, 3, 0, "-", "losses"], [550, 3, 0, "-", "manipulation"], [551, 3, 0, "-", "meta"], [552, 3, 0, "-", "nest"], [553, 3, 0, "-", "norms"], [554, 3, 0, "-", "random"], [555, 3, 0, "-", "searching"], [556, 3, 0, "-", "set"], [557, 3, 0, "-", "sorting"], [558, 3, 0, "-", "statistical"], [559, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[302, 3, 0, "-", "activations"], [303, 3, 0, "-", "constants"], [304, 3, 0, "-", "creation"], [305, 3, 0, "-", "data_type"], [306, 3, 0, "-", "device"], [307, 3, 0, "-", "elementwise"], [308, 3, 0, "-", "general"], [309, 3, 0, "-", "gradients"], [310, 3, 0, "-", "layers"], [311, 3, 0, "-", "linear_algebra"], [312, 3, 0, "-", "losses"], [313, 3, 0, "-", "manipulation"], [314, 3, 0, "-", "meta"], [315, 3, 0, "-", "nest"], [316, 3, 0, "-", "norms"], [317, 3, 0, "-", "random"], [318, 3, 0, "-", "searching"], [319, 3, 0, "-", "set"], [320, 3, 0, "-", "sorting"], [321, 3, 0, "-", "sparse_array"], [322, 3, 0, "-", "statistical"], [323, 3, 0, "-", "utility"]], "ivy.stateful": [[682, 3, 0, "-", "activations"], [683, 3, 0, "-", "converters"], [684, 3, 0, "-", "helpers"], [685, 3, 0, "-", "initializers"], [686, 3, 0, "-", "layers"], [687, 3, 0, "-", "losses"], [688, 3, 0, "-", "module"], [689, 3, 0, "-", "norms"], [690, 3, 0, "-", "optimizers"], [691, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[682, 1, 1, "", "ELU"], [682, 1, 1, "", "GEGLU"], [682, 1, 1, "", "GELU"], [682, 1, 1, "", "Hardswish"], [682, 1, 1, "", "LeakyReLU"], [682, 1, 1, "", "LogSigmoid"], [682, 1, 1, "", "LogSoftmax"], [682, 1, 1, "", "Logit"], [682, 1, 1, "", "Mish"], [682, 1, 1, "", "PReLU"], [682, 1, 1, "", "ReLU"], [682, 1, 1, "", "ReLU6"], [682, 1, 1, "", "SeLU"], [682, 1, 1, "", "SiLU"], [682, 1, 1, "", "Sigmoid"], [682, 1, 1, "", "Softmax"], [682, 1, 1, "", "Softplus"], [682, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[682, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[682, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[683, 1, 1, "", "ModuleConverters"], [683, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[683, 0, 1, "", "from_flax_module"], [683, 0, 1, "", "from_haiku_module"], [683, 0, 1, "", "from_keras_module"], [683, 0, 1, "", "from_paddle_module"], [683, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[684, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[684, 0, 1, "", "check_submod_rets"], [684, 0, 1, "", "get_mod_key"], [684, 0, 1, "", "mod_depth"], [684, 0, 1, "", "mod_height"], [684, 0, 1, "", "mod_with_top_mod_key_chain"], [684, 0, 1, "", "show_mod_in_top_mod"], [684, 0, 1, "", "show_structure"], [684, 0, 1, "", "show_v_in_top_v"], [684, 0, 1, "", "sub_mods"], [684, 0, 1, "", "track_submod_call_order"], [684, 0, 1, "", "track_submod_rets"], [684, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[685, 1, 1, "", "Constant"], [685, 1, 1, "", "FirstLayerSiren"], [685, 1, 1, "", "GlorotUniform"], [685, 1, 1, "", "Initializer"], [685, 1, 1, "", "KaimingNormal"], [685, 1, 1, "", "Ones"], [685, 1, 1, "", "RandomNormal"], [685, 1, 1, "", "Siren"], [685, 1, 1, "", "Uniform"], [685, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[685, 0, 1, "", "__init__"], [685, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[685, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[685, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[685, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[685, 0, 1, "", "__init__"], [685, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[685, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[685, 0, 1, "", "__init__"], [685, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[685, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[685, 0, 1, "", "__init__"], [685, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[685, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[686, 1, 1, "", "AdaptiveAvgPool1d"], [686, 1, 1, "", "AdaptiveAvgPool2d"], [686, 1, 1, "", "AvgPool1D"], [686, 1, 1, "", "AvgPool2D"], [686, 1, 1, "", "AvgPool3D"], [686, 1, 1, "", "Conv1D"], [686, 1, 1, "", "Conv1DTranspose"], [686, 1, 1, "", "Conv2D"], [686, 1, 1, "", "Conv2DTranspose"], [686, 1, 1, "", "Conv3D"], [686, 1, 1, "", "Conv3DTranspose"], [686, 1, 1, "", "Dct"], [686, 1, 1, "", "DepthwiseConv2D"], [686, 1, 1, "", "Dropout"], [686, 1, 1, "", "Embedding"], [686, 1, 1, "", "FFT"], [686, 1, 1, "", "Identity"], [686, 1, 1, "", "LSTM"], [686, 1, 1, "", "Linear"], [686, 1, 1, "", "MaxPool1D"], [686, 1, 1, "", "MaxPool2D"], [686, 1, 1, "", "MaxPool3D"], [686, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[686, 0, 1, "", "__init__"], [686, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[686, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[686, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[687, 1, 1, "", "BinaryCrossEntropyLoss"], [687, 1, 1, "", "CrossEntropyLoss"], [687, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[687, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[687, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[687, 0, 1, "", "__init__"]], "ivy.stateful.module": [[688, 1, 1, "", "Module"], [688, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[688, 0, 1, "", "__call__"], [688, 0, 1, "", "__init__"], [688, 0, 1, "", "build"], [688, 5, 1, "", "build_mode"], [688, 5, 1, "", "built_"], [688, 0, 1, "", "compile"], [688, 0, 1, "", "eval"], [688, 0, 1, "", "load"], [688, 0, 1, "", "register_buffer"], [688, 0, 1, "", "save"], [688, 0, 1, "", "save_weights"], [688, 0, 1, "", "show_graph"], [688, 0, 1, "", "train"]], "ivy.stateful.norms": [[689, 1, 1, "", "BatchNorm2D"], [689, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[689, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[689, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[690, 1, 1, "", "Adam"], [690, 1, 1, "", "LAMB"], [690, 1, 1, "", "LARS"], [690, 1, 1, "", "Optimizer"], [690, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "set_state"], [690, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "set_state"], [690, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "set_state"], [690, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "set_state"], [690, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[690, 0, 1, "", "__init__"], [690, 0, 1, "", "set_state"], [690, 5, 1, "", "state"]], "ivy.stateful.sequential": [[691, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[691, 0, 1, "", "__init__"]], "ivy.utils": [[692, 3, 0, "-", "assertions"], [693, 3, 0, "-", "backend"], [697, 3, 0, "-", "dynamic_import"], [698, 3, 0, "-", "einsum_parser"], [699, 3, 0, "-", "exceptions"], [700, 3, 0, "-", "inspection"], [701, 3, 0, "-", "logging"], [702, 3, 0, "-", "profiler"], [703, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[692, 2, 1, "", "check_all"], [692, 2, 1, "", "check_all_or_any_fn"], [692, 2, 1, "", "check_any"], [692, 2, 1, "", "check_dev_correct_formatting"], [692, 2, 1, "", "check_dimensions"], [692, 2, 1, "", "check_elem_in_list"], [692, 2, 1, "", "check_equal"], [692, 2, 1, "", "check_exists"], [692, 2, 1, "", "check_false"], [692, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [692, 2, 1, "", "check_gather_input_valid"], [692, 2, 1, "", "check_gather_nd_input_valid"], [692, 2, 1, "", "check_greater"], [692, 2, 1, "", "check_inplace_sizes_valid"], [692, 2, 1, "", "check_isinstance"], [692, 2, 1, "", "check_kernel_padding_size"], [692, 2, 1, "", "check_less"], [692, 2, 1, "", "check_one_way_broadcastable"], [692, 2, 1, "", "check_same_dtype"], [692, 2, 1, "", "check_shape"], [692, 2, 1, "", "check_shapes_broadcastable"], [692, 2, 1, "", "check_true"], [692, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[694, 3, 0, "-", "ast_helpers"], [695, 3, 0, "-", "handler"], [696, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[694, 1, 1, "", "ImportTransformer"], [694, 1, 1, "", "IvyLoader"], [694, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[694, 0, 1, "", "__init__"], [694, 0, 1, "", "impersonate_import"], [694, 0, 1, "", "visit_Import"], [694, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[694, 0, 1, "", "__init__"], [694, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[694, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[695, 1, 1, "", "ContextManager"], [695, 2, 1, "", "choose_random_backend"], [695, 2, 1, "", "convert_from_numpy_to_target_backend"], [695, 2, 1, "", "convert_from_source_backend_to_numpy"], [695, 2, 1, "", "current_backend"], [695, 2, 1, "", "fn_name_from_version_specific_fn_name"], [695, 2, 1, "", "prevent_access_locally"], [695, 2, 1, "", "previous_backend"], [695, 2, 1, "", "set_backend"], [695, 2, 1, "", "set_backend_to_specific_version"], [695, 2, 1, "", "set_jax_backend"], [695, 2, 1, "", "set_mxnet_backend"], [695, 2, 1, "", "set_numpy_backend"], [695, 2, 1, "", "set_paddle_backend"], [695, 2, 1, "", "set_tensorflow_backend"], [695, 2, 1, "", "set_torch_backend"], [695, 2, 1, "", "unset_backend"], [695, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[695, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[696, 2, 1, "", "available_sub_backends"], [696, 2, 1, "", "clear_sub_backends"], [696, 2, 1, "", "find_available_sub_backends"], [696, 2, 1, "", "set_sub_backend"], [696, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[697, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[698, 2, 1, "", "convert_interleaved_input"], [698, 2, 1, "", "convert_subscripts"], [698, 2, 1, "", "find_output_shape"], [698, 2, 1, "", "find_output_str"], [698, 2, 1, "", "gen_unused_symbols"], [698, 2, 1, "", "get_symbol"], [698, 2, 1, "", "has_valid_einsum_chars_only"], [698, 2, 1, "", "is_valid_einsum_char"], [698, 2, 1, "", "legalise_einsum_expr"], [698, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.exceptions": [[699, 7, 1, "", "InplaceUpdateException"], [699, 7, 1, "", "InvalidBackendException"], [699, 7, 1, "", "IvyAttributeError"], [699, 7, 1, "", "IvyBackendException"], [699, 7, 1, "", "IvyBroadcastShapeError"], [699, 7, 1, "", "IvyDeviceError"], [699, 7, 1, "", "IvyDtypePromotionError"], [699, 7, 1, "", "IvyError"], [699, 7, 1, "", "IvyException"], [699, 7, 1, "", "IvyIndexError"], [699, 7, 1, "", "IvyNotImplementedException"], [699, 7, 1, "", "IvyValueError"], [699, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.InvalidBackendException": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[699, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[699, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[700, 2, 1, "", "add_array_specs"], [700, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[701, 2, 1, "", "set_logging_mode"], [701, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[702, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[702, 0, 1, "", "__init__"], [702, 4, 1, "", "print_stats"], [702, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[703, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 742, 747, 758, 763], "compil": [0, 742, 747, 755, 760, 762, 763], "api": [0, 1, 2, 704, 707, 714, 718, 722, 723, 733, 738, 742, 744, 746, 747, 754, 761, 763], "us": [0, 2, 704, 711, 714, 715, 718, 733, 736, 745, 751], "eager": 0, "v": [0, 707, 729, 750], "lazi": 0, "arrai": [0, 51, 54, 77, 321, 707, 718, 719, 723, 730, 744, 754], "cach": 0, "gener": [0, 10, 33, 308, 545, 733, 737, 740], "state": [0, 746, 750], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 704, 710, 726, 730, 733, 736, 740], "set": [1, 20, 43, 319, 556, 704, 715, 720, 739], "up": [1, 704, 715], "ivi": [1, 2, 704, 710, 714, 716, 719, 721, 723, 726, 728, 733, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 749, 763], "folder": 1, "kei": 1, "issu": [1, 714, 716, 729], "question": 1, "transpil": [2, 704, 747], "function": [2, 58, 714, 722, 724, 725, 728, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 742, 747, 750], "librari": [2, 710, 749], "modul": [2, 688, 724, 725, 746], "unifi": [2, 704, 708, 744, 759, 763], "activ": [3, 25, 302, 537, 682], "convers": [4, 27, 732], "creation": [5, 28, 304, 540], "data": [6, 29, 57, 305, 541, 556, 658, 659, 660, 661, 724, 735, 737, 745, 750], "type": [6, 29, 305, 541, 724, 731, 735, 750], "devic": [7, 30, 306, 542, 725, 730, 735], "elementwis": [8, 31, 56, 307, 543], "experiment": [9, 32, 544, 714], "gradient": [11, 34, 286, 309, 546, 733], "imag": [12, 35, 207, 711, 721], "layer": [13, 36, 310, 547, 686], "linear": [14, 37, 311, 548, 571], "algebra": [14, 37, 311, 548], "loss": [15, 38, 312, 549, 687], "manipul": [16, 39, 313, 550], "norm": [17, 40, 316, 553, 689], "random": [18, 41, 317, 554], "search": [19, 42, 318, 555], "sort": [21, 44, 320, 557, 665], "statist": [22, 45, 322, 558], "util": [23, 46, 323, 559, 681], "wrap": [24, 47, 732], "base": [26, 48, 55], "cp": 49, "tensor": [49, 50, 53], "tucker": [50, 373], "contain": [52, 716, 722, 745], "factor": 53, "nest": [54, 315, 552], "class": [57, 680, 719, 728, 735, 744], "gelu": 59, "hardswish": 60, "leaky_relu": 61, "log_softmax": 62, "mish": 63, "relu": 64, "sigmoid": 65, "softmax": 66, "softplu": 67, "softsign": 68, "cast_bool": 69, "cmp_i": 70, "cmp_isnot": 71, "for_loop": 72, "if_els": 73, "try_except": 74, "while_loop": 75, "arang": 76, "asarrai": 78, "asarray_handle_nest": 79, "asarray_infer_devic": 80, "asarray_infer_dtyp": 81, "asarray_inputs_to_native_shap": 82, "asarray_to_native_arrays_and_back": 83, "copy_arrai": 84, "empti": 85, "empty_lik": 86, "ey": 87, "from_dlpack": 88, "note": [88, 540], "frombuff": 89, "full": [90, 736], "full_lik": 91, "linspac": 92, "logspac": 93, "meshgrid": 94, "native_arrai": 95, "one_hot": 96, "ones": 97, "ones_lik": 98, "tril": 99, "triu": 100, "triu_indic": 101, "zero": 102, "zeros_lik": 103, "as_ivy_dtyp": 104, "as_native_dtyp": 105, "astyp": 106, "broadcast_arrai": 107, "broadcast_to": 108, "can_cast": 109, "check_float": 110, "closest_valid_dtyp": 111, "default_complex_dtyp": 112, "default_dtyp": 113, "default_float_dtyp": 114, "default_int_dtyp": 115, "default_uint_dtyp": 116, "dtype": [117, 730], "dtype_bit": 118, "finfo": 119, "function_supported_dtyp": 120, "function_unsupported_dtyp": 121, "iinfo": 122, "infer_default_dtyp": 123, "invalid_dtyp": 124, "is_bool_dtyp": 125, "is_complex_dtyp": 126, "is_float_dtyp": 127, "is_hashable_dtyp": 128, "is_int_dtyp": 129, "is_native_dtyp": 130, "is_uint_dtyp": 131, "promote_typ": 132, "promote_types_of_input": 133, "result_typ": 134, "set_default_complex_dtyp": 135, "set_default_dtyp": 136, "set_default_float_dtyp": 137, "set_default_int_dtyp": 138, "set_default_uint_dtyp": 139, "type_promote_arrai": 140, "unset_default_complex_dtyp": 141, "unset_default_dtyp": 142, "unset_default_float_dtyp": 143, "unset_default_int_dtyp": 144, "unset_default_uint_dtyp": 145, "valid_dtyp": 146, "as_ivy_dev": 147, "as_native_dev": 148, "clear_cached_mem_on_dev": 149, "default_devic": 150, "dev": 151, "dev_util": 152, "function_supported_devic": 153, "function_unsupported_devic": 154, "get_all_ivy_arrays_on_dev": 155, "gpu_is_avail": 156, "handle_soft_device_vari": 157, "num_cpu_cor": 158, "num_gpu": 159, "num_ivy_arrays_on_dev": 160, "percent_used_mem_on_dev": 161, "print_all_ivy_arrays_on_dev": 162, "set_default_devic": 163, "set_soft_device_mod": 164, "paramet": [164, 490, 491, 496, 497, 499, 500, 542, 545, 739], "set_split_factor": 165, "split_factor": 166, "split_func_cal": 167, "to_devic": 168, "total_mem_on_dev": 169, "tpu_is_avail": 170, "unset_default_devic": 171, "unset_soft_device_mod": 172, "used_mem_on_dev": 173, "ab": 174, "aco": 175, "acosh": 176, "add": [177, 726, 736, 763], "angl": 178, "asin": 179, "asinh": 180, "atan": 181, "atan2": 182, "atanh": 183, "bitwise_and": 184, "bitwise_invert": 185, "bitwise_left_shift": 186, "bitwise_or": 187, "bitwise_right_shift": 188, "bitwise_xor": 189, "ceil": 190, "co": 191, "cosh": 192, "deg2rad": 193, "divid": 194, "equal": 195, "erf": 196, "exp": 197, "exp2": 198, "expm1": 199, "floor": 200, "floor_divid": 201, "fmin": 202, "fmod": 203, "gcd": 204, "greater": 205, "greater_equ": 206, "isfinit": 208, "isinf": 209, "isnan": 210, "isreal": 211, "lcm": 212, "less": 213, "less_equ": 214, "log": [215, 701, 715], "log10": 216, "log1p": 217, "log2": 218, "logaddexp": 219, "logaddexp2": 220, "logical_and": 221, "logical_not": 222, "logical_or": 223, "logical_xor": 224, "maximum": 225, "minimum": 226, "multipli": 227, "nan_to_num": 228, "neg": 229, "not_equ": 230, "posit": [231, 730], "pow": 232, "rad2deg": 233, "real": 234, "reciproc": 235, "remaind": 236, "round": 237, "sign": 238, "sin": 239, "sinh": 240, "sqrt": 241, "squar": 242, "subtract": 243, "tan": [244, 726, 736], "tanh": 245, "trapz": 246, "trunc": 247, "trunc_divid": 248, "elu": 249, "logit": 250, "logsigmoid": 251, "prelu": 252, "relu6": 253, "selu": 254, "sequence_length": 255, "silu": 256, "thresholded_relu": 257, "blackman_window": 258, "eye_lik": 259, "hamming_window": 260, "hann_window": 261, "indic": 262, "kaiser_bessel_derived_window": 263, "kaiser_window": 264, "mel_weight_matrix": 265, "ndenumer": 266, "ndindex": 267, "random_cp": 268, "random_tuck": 269, "tril_indic": 270, "trilu": 271, "unsorted_segment_min": 272, "unsorted_segment_sum": 273, "vorbis_window": 274, "allclos": 275, "binar": 276, "conj": 277, "copysign": 278, "count_nonzero": 279, "diff": 280, "digamma": 281, "fix": 282, "float_pow": 283, "fmax": 284, "frexp": 285, "hypot": 287, "isclos": 288, "ldexp": 289, "lerp": 290, "lgamma": 291, "modf": 292, "nansum": 293, "nextaft": 294, "signbit": 295, "sinc": 296, "sparsify_tensor": 297, "xlogi": 298, "zeta": 299, "reduc": 300, "bind_custom_gradient_funct": 301, "constant": [303, 538], "meta": [314, 551], "spars": 321, "adaptive_avg_pool1d": 324, "adaptive_avg_pool2d": 325, "adaptive_max_pool2d": 326, "area_interpol": 327, "avg_pool1d": 328, "avg_pool2d": 329, "avg_pool3d": 330, "dct": 331, "dft": 332, "dropout1d": 333, "dropout2d": 334, "dropout3d": 335, "embed": 336, "fft": 337, "fft2": 338, "generate_einsum_equ": 339, "get_interpolate_kernel": 340, "idct": 341, "ifft": 342, "ifftn": 343, "interp": 344, "interpol": 345, "max_pool1d": 346, "max_pool2d": 347, "max_pool3d": 348, "max_unpool1d": 349, "nearest_interpol": 350, "pool": 351, "reduce_window": 352, "rfftn": 353, "adjoint": 354, "cond": 355, "diagflat": 356, "dot": 357, "eig": [358, 580], "eigh_tridiagon": 359, "eigval": 360, "initialize_tuck": 361, "khatri_rao": 362, "kron": 363, "kroneck": 364, "make_svd_non_neg": 365, "matrix_exp": 366, "mode_dot": 367, "multi_dot": 368, "multi_mode_dot": 369, "partial_tuck": 370, "svd_flip": 371, "truncated_svd": 372, "huber_loss": 374, "l1_loss": 375, "log_poisson_loss": 376, "smooth_l1_loss": 377, "soft_margin_loss": 378, "as_strid": 379, "associative_scan": 380, "atleast_1d": 381, "atleast_2d": 382, "atleast_3d": 383, "broadcast_shap": 384, "choos": 385, "concat_from_sequ": 386, "dsplit": 387, "dstack": 388, "expand": 389, "fill_diagon": 390, "flatten": 391, "fliplr": 392, "flipud": 393, "fold": 394, "heavisid": 395, "hsplit": 396, "hstack": 397, "i0": 398, "matric": 399, "moveaxi": 400, "pad": 401, "partial_fold": 402, "partial_tensor_to_vec": 403, "partial_unfold": 404, "partial_vec_to_tensor": 405, "put_along_axi": 406, "rot90": 407, "soft_threshold": 408, "take_along_axi": 409, "top_k": 410, "unfold": 411, "unique_consecut": 412, "vsplit": 413, "vstack": 414, "batch_norm": 415, "group_norm": 416, "instance_norm": 417, "l1_normal": 418, "l2_normal": 419, "lp_normal": 420, "bernoulli": 421, "beta": 422, "dirichlet": 423, "gamma": 424, "poisson": 425, "unravel_index": 426, "invert_permut": 427, "lexsort": 428, "is_ivy_sparse_arrai": 429, "is_native_sparse_arrai": 430, "native_sparse_arrai": 431, "native_sparse_array_to_indices_values_and_shap": 432, "bincount": 433, "corrcoef": 434, "cov": 435, "cummax": 436, "cummin": 437, "histogram": 438, "igamma": 439, "median": 440, "nanmean": 441, "nanmedian": 442, "nanprod": 443, "quantil": 444, "optional_get_el": 445, "all_equ": 446, "arg_info": 447, "arg_nam": 448, "array_equ": 449, "assert_supports_inplac": 450, "cache_fn": 451, "clip_matrix_norm": 452, "clip_vector_norm": 453, "container_typ": 454, "current_backend_str": 455, "default": 456, "einops_rearrang": 457, "einops_reduc": 458, "einops_repeat": 459, "exist": [460, 711], "fourier_encod": 461, "function_supported_devices_and_dtyp": 462, "function_unsupported_devices_and_dtyp": 463, "gather": 464, "gather_nd": 465, "get_all_arrays_in_memori": 466, "get_item": 467, "get_num_dim": 468, "get_referrers_recurs": 469, "has_nan": 470, "inplace_arrays_support": 471, "inplace_decr": 472, "inplace_incr": 473, "inplace_upd": 474, "inplace_variables_support": 475, "is_arrai": 476, "is_ivy_arrai": 477, "is_ivy_contain": 478, "is_ivy_nested_arrai": 479, "is_native_arrai": 480, "isin": 481, "isscalar": 482, "items": 483, "match_kwarg": 484, "multiprocess": 485, "num_arrays_in_memori": 486, "print_all_arrays_in_memori": 487, "scatter_flat": 488, "scatter_nd": 489, "set_array_mod": 490, "set_exception_trace_mod": 491, "set_inplace_mod": 492, "set_item": 493, "set_min_bas": 494, "set_min_denomin": 495, "set_nestable_mod": 496, "set_precise_mod": 497, "set_queue_timeout": 498, "set_shape_array_mod": 499, "set_show_func_wrapper_trace_mod": 500, "set_tmp_dir": 501, "shape": [502, 556, 658, 659, 660, 661, 732, 750], "stable_divid": 503, "stable_pow": 504, "stride": 505, "supports_inplace_upd": 506, "to_ivy_shap": 507, "to_list": 508, "to_native_shap": 509, "to_numpi": 510, "to_scalar": 511, "try_else_non": 512, "unset_array_mod": 513, "unset_exception_trace_mod": 514, "unset_inplace_mod": 515, "unset_min_bas": 516, "unset_min_denomin": 517, "unset_nestable_mod": 518, "unset_precise_mod": 519, "unset_queue_timeout": 520, "unset_shape_array_mod": 521, "unset_show_func_wrapper_trace_mod": 522, "unset_tmp_dir": 523, "value_is_nan": 524, "vmap": 525, "adam_step": 526, "adam_upd": 527, "execute_with_gradi": [528, 733], "grad": 529, "gradient_descent_upd": 530, "jac": 531, "lamb_upd": 532, "lars_upd": 533, "optimizer_upd": 534, "stop_gradi": 535, "value_and_grad": 536, "control": [539, 750], "flow": [539, 750], "op": 539, "depend": [556, 658, 659, 660, 661], "output": [556, 658, 659, 660, 661], "conv": 560, "conv1d": 561, "conv1d_transpos": 562, "conv2d": 563, "conv2d_transpos": 564, "conv3d": 565, "conv3d_transpos": 566, "conv_general_dil": 567, "conv_general_transpos": 568, "depthwise_conv2d": 569, "dropout": 570, "lstm_updat": 572, "multi_head_attent": 573, "scaled_dot_product_attent": 574, "choleski": 575, "cross": 576, "det": 577, "diag": 578, "diagon": 579, "eigh": 581, "eigvalsh": 582, "inner": 583, "inv": 584, "lu_factor": 585, "matmul": 586, "matrix_norm": 587, "matrix_pow": 588, "matrix_rank": 589, "matrix_transpos": 590, "outer": 591, "pinv": 592, "qr": 593, "slogdet": 594, "solv": 595, "svd": 596, "svdval": 597, "tensordot": 598, "tensorsolv": 599, "trace": [600, 728], "vander": 601, "vecdot": 602, "vector_norm": 603, "vector_to_skew_symmetric_matrix": 604, "binary_cross_entropi": 605, "cross_entropi": 606, "sparse_cross_entropi": 607, "clip": 608, "concat": 609, "constant_pad": 610, "expand_dim": 611, "flip": 612, "permute_dim": 613, "repeat": 614, "reshap": 615, "roll": [616, 726], "split": 617, "squeez": 618, "stack": [619, 728], "swapax": 620, "tile": 621, "unstack": 622, "zero_pad": 623, "fomaml_step": 624, "maml_step": 625, "reptile_step": 626, "all_nested_indic": 627, "copy_nest": 628, "duplicate_array_index_chain": 629, "index_nest": 630, "insert_into_nest_at_index": 631, "insert_into_nest_at_indic": 632, "map": [633, 723], "map_nest_at_index": 634, "map_nest_at_indic": 635, "multi_index_nest": 636, "nested_ani": 637, "nested_argwher": 638, "nested_map": 639, "nested_multi_map": 640, "prune_empti": 641, "prune_nest_at_index": 642, "prune_nest_at_indic": 643, "set_nest_at_index": 644, "set_nest_at_indic": 645, "layer_norm": 646, "multinomi": 647, "randint": 648, "random_norm": 649, "random_uniform": 650, "seed": 651, "shuffl": 652, "argmax": 653, "argmin": 654, "argwher": 655, "nonzero": 656, "where": [657, 714], "unique_al": 658, "unique_count": 659, "unique_invers": 660, "unique_valu": 661, "argsort": 662, "msort": 663, "searchsort": 664, "cumprod": 666, "cumsum": 667, "einsum": [668, 698], "max": 669, "mean": 670, "min": 671, "prod": 672, "std": 673, "sum": 674, "var": 675, "all": 676, "ani": 677, "load": [678, 745], "save": [679, 745], "framework": [680, 704, 733, 736, 743, 757, 760, 763, 764], "convert": [683, 747], "helper": [684, 694, 736, 737, 738], "initi": [685, 746], "optim": [690, 746], "sequenti": 691, "assert": [692, 728], "backend": [693, 696, 704, 714, 720, 724, 733, 738, 742, 750], "ast": 694, "handler": [695, 696, 742], "sub": 696, "dynam": [697, 720, 750], "import": 697, "parser": 698, "except": [699, 728, 732], "inspect": 700, "profil": 702, "verbos": 703, "statu": 704, "ai": 704, "when": 704, "should": 704, "i": [704, 721, 740], "instal": [704, 751], "pip": [704, 751], "docker": [704, 711, 715, 716, 721, 751], "from": [704, 751], "sourc": [704, 751], "multi": [704, 760, 763], "support": [704, 720, 724, 732, 735, 750], "document": 704, "contribut": [704, 709], "commun": 704, "citat": 704, "background": 705, "ml": [706, 759, 763], "explos": 706, "standard": [707, 740, 754, 763], "skeptic": 707, "complimentari": 707, "competit": 707, "do": [707, 737], "work": [707, 753], "The": [707, 716, 721, 733, 735, 744, 750], "why": [708, 737], "No": [708, 715], "more": [708, 715, 740], "re": [708, 737], "implement": [708, 723, 733, 735], "infinit": 708, "shelf": 708, "life": 708, "appli": [710, 749], "introduct": [710, 735, 736], "robot": [710, 749], "build": [711, 721, 742], "doc": [711, 721], "conveni": [711, 721, 731], "script": [711, 721], "hub": 711, "local": [711, 716, 729], "without": [711, 736], "error": [712, 728], "handl": [712, 719, 725, 728, 732, 750], "help": [713, 716], "resourc": 713, "open": 714, "task": 714, "format": [714, 729, 756, 763], "checklist": 714, "frontend": [714, 720, 735, 736, 747], "place": 714, "extend": [714, 737, 740], "creat": 714, "an": [714, 733], "": [714, 721], "github": [714, 715], "templat": 714, "fork": [715, 716], "clone": [715, 723], "repo": 715, "pre": [715, 729], "commit": [715, 716, 723, 729], "pycharm": [715, 716, 729], "virtual": 715, "environ": 715, "miniconda": 715, "venv": 715, "interpret": 715, "window": 715, "maco": 715, "ubuntu": 715, "test": [715, 716, 718, 723, 736, 737], "detail": 715, "hypothesi": [715, 736, 737], "free": 715, "wsl": 715, "codespac": 715, "basic": [716, 735], "get": [716, 751], "todo": 716, "list": 716, "manag": 716, "your": [716, 737], "who": 716, "To": 716, "ask": 716, "With": 716, "command": 716, "line": 716, "browser": 716, "pull": [716, 723], "request": [716, 723], "small": 716, "often": 716, "interact": 716, "run": [716, 718, 721, 737], "most": 716, "out": [716, 730, 732, 734], "id": [716, 718], "deep": 717, "dive": 717, "termin": 718, "regener": 718, "failur": 718, "skip": 718, "nativ": [719, 740], "integr": [719, 723, 729, 737], "custom": [719, 721, 733, 745, 750], "version": [720, 738, 750], "pipelin": [721, 723, 737, 750], "how": [721, 737], "builder": 721, "being": 721, "option": 721, "structur": [721, 733, 750], "index": 721, "rst": 721, "partial_conf": 721, "py": 721, "prebuild": 721, "sh": 721, "extens": [721, 748], "custom_autosummari": 721, "hide": 721, "tabl": 721, "discussion_link": 721, "skippable_funct": 721, "ivy_data": 721, "instanc": [722, 735, 736, 744], "method": [722, 735, 736, 744, 745], "special": [722, 735], "nestabl": [722, 730, 731, 732], "continu": [723, 729], "push": 723, "pr": 723, "trigger": 723, "A": [723, 740], "top": 723, "down": 723, "view": [723, 732, 734], "store": 723, "retriev": 723, "repositori": 723, "nitti": 723, "gritti": 723, "storag": 723, "space": 723, "unifyai": 723, "determin": 723, "coverag": 723, "workflow": 723, "multipl": 723, "runner": 723, "race": 723, "condit": 723, "period": 723, "manual": 723, "dispatch": 723, "ci": 723, "dashboard": 723, "promot": [724, 735], "argument": [724, 725, 730, 732, 734, 735], "other": [724, 725], "unsupport": 724, "bug": 724, "cast": [724, 735], "mode": [724, 728, 739], "superset": [724, 740], "docstr": [726, 727], "configur": [728, 736, 745], "func_wrapp": 728, "prune": 728, "handle_except": 728, "decor": [728, 732, 737], "consist": [728, 737], "lint": 729, "check": [729, 750], "setup": 729, "code": [729, 738], "common": 729, "keyword": 730, "input": 730, "number": 730, "oper": [730, 739, 744, 750], "integ": 730, "sequenc": 730, "primari": 731, "composit": 731, "mix": [731, 732, 737], "partial": [731, 732, 737], "standalon": 731, "order": 732, "wrapper": [732, 763, 764], "infer": 732, "miscellan": 732, "overview": 733, "usag": [733, 740], "signatur": 733, "design": [733, 738, 741], "our": 733, "polici": [733, 735], "specif": [733, 761, 762, 763], "consider": 733, "inplac": 734, "updat": 734, "copi": 734, "write": [735, 737], "short": 735, "unus": 735, "rule": 735, "numpi": [735, 757], "duplic": [735, 740], "valu": 736, "alia": 736, "own": 737, "strategi": 737, "we": 737, "need": 737, "effect": 737, "bonu": 737, "featur": 737, "self": 737, "explicit": 737, "test_array_funct": 737, "fail": 737, "navig": 738, "categor": 738, "submodul": 738, "unpin": 738, "global": 739, "properti": 739, "getter": 739, "attribut": 739, "setter": 739, "set_": 739, "unset_": 739, "behaviour": 740, "what": [740, 763], "non": 740, "balanc": 740, "effici": 740, "maxim": 740, "block": 742, "monkei": 744, "patch": 744, "construct": 745, "represent": 745, "recurs": 745, "built": 745, "ins": 745, "access": 745, "comparison": 745, "case": 745, "compartment": 745, "network": [745, 747], "weight": 745, "role": 747, "model": [747, 750], "mechan": 749, "vision": 749, "gym": 749, "memori": 749, "faq": 750, "maintain": 750, "size": 750, "gpu": 750, "deploy": 750, "auto": 750, "differenti": 750, "replica": 750, "parallel": 750, "altern": 750, "start": 751, "glossari": 752, "relat": 753, "infrastructur": [755, 763], "llvm": 755, "mlir": 755, "oneapi": 755, "exchang": [756, 763], "onnx": 756, "nnef": 756, "coreml": 756, "matlab": 757, "scipi": 757, "torch": [757, 758], "scikit": 757, "learn": 757, "theano": 757, "panda": 757, "julia": 757, "apach": [757, 760], "spark": 757, "mllib": 757, "caff": 757, "chainer": 757, "tensorflow": 757, "1": 757, "mxnet": 757, "cntk": 757, "pytorch": 757, "flux": 757, "jax": 757, "2": 757, "dex": 757, "languag": 757, "tracer": [758, 763], "tf": 758, "jaxpr": 758, "jit": 758, "fx": 758, "compani": [759, 763], "quansight": 759, "modular": 759, "octoml": 759, "vendor": [760, 761, 762, 763], "tvm": 760, "xla": 760, "gcc": 760, "tensorrt": 761, "cuda": 761, "icc": 762, "icx": 762, "nvcc": 762, "doe": 763, "eagerpi": 764, "kera": 764, "thinc": 764, "tensorli": 764, "neuropod": 764}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"as_ivy_dtype": [[104, "as-ivy-dtype"]], "dtype": [[117, "dtype"]], "cmp_isnot": [[71, "cmp-isnot"]], "default_float_dtype": [[114, "default-float-dtype"]], "softmax": [[66, "softmax"]], "arange": [[76, "arange"]], "asarray_to_native_arrays_and_back": [[83, "asarray-to-native-arrays-and-back"]], "eye": [[87, "eye"]], "asarray_inputs_to_native_shapes": [[82, "asarray-inputs-to-native-shapes"]], "softplus": [[67, "softplus"]], "logspace": [[93, "logspace"]], "cast_bool": [[69, "cast-bool"]], "finfo": [[119, "finfo"]], "meshgrid": [[94, "meshgrid"]], "for_loop": [[72, "for-loop"]], "asarray_infer_dtype": [[81, "asarray-infer-dtype"]], "default_uint_dtype": [[116, "default-uint-dtype"]], "from_dlpack": [[88, "from-dlpack"]], "Note": [[88, null], [540, null]], "broadcast_to": [[108, "broadcast-to"]], "closest_valid_dtype": [[111, "closest-valid-dtype"]], "array": [[77, "array"]], "mish": [[63, "mish"]], "astype": [[106, "astype"]], "sigmoid": [[65, "sigmoid"]], "softsign": [[68, "softsign"]], "log_softmax": [[62, "log-softmax"]], "zeros_like": [[103, "zeros-like"]], "dtype_bits": [[118, "dtype-bits"]], "empty_like": [[86, "empty-like"]], "asarray_handle_nestable": [[79, "asarray-handle-nestable"]], "ones_like": [[98, "ones-like"]], "leaky_relu": [[61, "leaky-relu"]], "full": [[90, "full"]], "triu": [[100, "triu"]], "can_cast": [[109, "can-cast"]], "function_unsupported_dtypes": [[121, "function-unsupported-dtypes"]], "full_like": [[91, "full-like"]], "broadcast_arrays": [[107, "broadcast-arrays"]], "check_float": [[110, "check-float"]], "zeros": [[102, "zeros"]], "cmp_is": [[70, "cmp-is"]], "empty": [[85, "empty"]], "linspace": [[92, "linspace"]], "tril": [[99, "tril"]], "default_complex_dtype": [[112, "default-complex-dtype"]], "as_native_dtype": [[105, "as-native-dtype"]], "default_int_dtype": [[115, "default-int-dtype"]], "if_else": [[73, "if-else"]], "function_supported_dtypes": [[120, "function-supported-dtypes"]], "frombuffer": [[89, "frombuffer"]], "ones": [[97, "ones"]], "native_array": [[95, "native-array"]], "relu": [[64, "relu"]], "copy_array": [[84, "copy-array"]], "triu_indices": [[101, "triu-indices"]], "one_hot": [[96, "one-hot"]], "try_except": [[74, "try-except"]], "while_loop": [[75, "while-loop"]], "default_dtype": [[113, "default-dtype"]], "asarray_infer_device": [[80, "asarray-infer-device"]], "asarray": [[78, "asarray"]], "Ivy as a Framework": [[743, "ivy-as-a-framework"]], "Ivy as a Transpiler": [[747, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[747, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[747, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[747, "converting-network-models"]], "Building Blocks": [[742, "building-blocks"]], "Backend Functional APIs \u2705": [[742, "backend-functional-apis"]], "Ivy Functional API \u2705": [[742, "ivy-functional-api"]], "Backend Handler \u2705": [[742, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[742, "graph-compiler"]], "Glossary": [[752, "glossary"]], "Applied Libraries": [[749, "applied-libraries"], [710, "applied-libraries"]], "Ivy Mechanics": [[749, "ivy-mechanics"]], "Ivy Vision": [[749, "ivy-vision"]], "Ivy Robot": [[749, "ivy-robot"]], "Ivy Gym": [[749, "ivy-gym"]], "Ivy Memory": [[749, "ivy-memory"]], "Navigating the Code": [[738, "navigating-the-code"]], "Categorization": [[738, "categorization"]], "Submodule Design": [[738, "submodule-design"]], "Ivy API": [[738, "ivy-api"]], "Backend API": [[738, "backend-api"]], "Submodule Helper Functions": [[738, "submodule-helper-functions"]], "Version Unpinning": [[738, "version-unpinning"]], "Extensions": [[748, "extensions"]], "FAQ": [[750, "faq"]], "Maintaining Backend Versions": [[750, "maintaining-backend-versions"]], "Dynamic Sizes": [[750, "dynamic-sizes"]], "Type and Shape Checking": [[750, "type-and-shape-checking"]], "GPU handling": [[750, "gpu-handling"]], "Model Deployment": [[750, "model-deployment"]], "Dynamic Control Flow": [[750, "dynamic-control-flow"]], "Auto-Differentiation": [[750, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[750, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[750, "support-for-functions"]], "Alternative Data Structures": [[750, "alternative-data-structures"]], "Custom Operations": [[750, "custom-operations"]], "The Pipeline": [[750, "the-pipeline"]], "State": [[750, "state"]], "Ivy Tests": [[737, "ivy-tests"], [723, "ivy-tests"]], "Testing Pipeline": [[737, "testing-pipeline"]], "Hypothesis": [[737, "id1"]], "Data Generation": [[737, "id2"]], "Writing your own strategy": [[737, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[737, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[737, "ivy-test-decorators"]], "Writing Ivy Tests": [[737, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[737, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions?": [[737, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[737, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[737, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[737, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[737, "self-consistent-and-explicit-testing"]], "test_array_function": [[737, "id5"]], "Running Ivy Tests": [[737, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[737, "re-running-failed-ivy-tests"]], "Wrapper Frameworks": [[764, "wrapper-frameworks"], [763, "wrapper-frameworks"]], "EagerPy eagerpy": [[764, "eagerpy-eagerpy"]], "Keras keras": [[764, "keras-keras"]], "Thinc thinc": [[764, "thinc-thinc"]], "TensorLy tensorly": [[764, "tensorly-tensorly"]], "NeuroPod": [[764, "id1"]], "Related Work": [[753, "related-work"]], "Operating Modes": [[739, "operating-modes"]], "Global Parameter Properties": [[739, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[739, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[739, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Multi-Vendor Compiler Frameworks": [[760, "multi-vendor-compiler-frameworks"], [763, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[760, "apache-tvm"]], "XLA": [[760, "xla"]], "GCC": [[760, "gcc"]], "Compiler Infrastructure": [[755, "compiler-infrastructure"], [763, "compiler-infrastructure"]], "LLVM": [[755, "id1"]], "MLIR": [[755, "id2"]], "OneAPI": [[755, "id3"]], "Ivy Frontend Tests": [[736, "ivy-frontend-tests"]], "Introduction": [[736, "introduction"], [735, "introduction"], [710, "introduction"]], "Frontend Test Examples": [[736, "frontend-test-examples"]], "ivy.tan()": [[736, "ivy-tan"]], "ivy.full()": [[736, "ivy-full"]], "Testing Without Using Tests Values": [[736, "testing-without-using-tests-values"]], "Alias functions": [[736, "alias-functions"]], "Frontend Instance Method Tests": [[736, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[736, "frontend-instance-method-test-examples"]], "ivy.add()": [[736, "ivy-add"]], "Hypothesis Helpers": [[736, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[736, "frontend-framework-testing-configuration"]], "Ivy Frontends": [[735, "ivy-frontends"]], "The Frontend Basics": [[735, "the-frontend-basics"]], "Writing Frontend Functions": [[735, "writing-frontend-functions"]], "Short Frontend Implementations": [[735, "short-frontend-implementations"]], "Unused Arguments": [[735, "unused-arguments"]], "Supported Data Types and Devices": [[735, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[735, "id6"]], "Frontend Data Type Promotion Rules": [[735, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[735, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[735, "frontends-duplicate-policy"]], "What does Ivy Add?": [[763, "what-does-ivy-add"]], "API Standards": [[763, "api-standards"], [754, "api-standards"]], "Frameworks": [[763, "frameworks"], [757, "frameworks"]], "Graph Tracers": [[763, "graph-tracers"], [758, "graph-tracers"]], "Exchange Formats": [[763, "exchange-formats"], [756, "exchange-formats"]], "Vendor-Specific APIs": [[763, "vendor-specific-apis"], [761, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[763, "vendor-specific-compilers"], [762, "vendor-specific-compilers"]], "ML-Unifying Companies": [[763, "ml-unifying-companies"], [759, "ml-unifying-companies"]], "Superset Behaviour": [[740, "superset-behaviour"]], "Extending the Standard": [[740, "extending-the-standard"]], "What is the Superset?": [[740, "what-is-the-superset"]], "A Non-Duplicate Superset": [[740, "a-non-duplicate-superset"]], "What is not the Superset?": [[740, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[740, "balancing-generalization-with-efficiency"]], "More Examples": [[740, "more-examples"]], "Maximizing Usage of Native Functionality": [[740, "maximizing-usage-of-native-functionality"]], "MATLAB matlab": [[757, "matlab-matlab"]], "SciPy scipy": [[757, "scipy-scipy"]], "Torch torch": [[757, "torch-torch"]], "NumPy numpy": [[757, "numpy-numpy"]], "SciKit Learn scikit-learn": [[757, "scikit-learn-scikit-learn"]], "Theano theano": [[757, "theano-theano"]], "Pandas pandas": [[757, "pandas-pandas"]], "Julia julia": [[757, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[757, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[757, "caffe-caffe"]], "Chainer chainer": [[757, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[757, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[757, "mxnet-mxnet"]], "CNTK cntk": [[757, "cntk-cntk"]], "PyTorch pytorch": [[757, "pytorch-pytorch"]], "Flux flux": [[757, "flux-flux"]], "JAX jax": [[757, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[757, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[757, "dex-language-dex-language"]], "Quansight": [[759, "id1"]], "Modular": [[759, "id2"]], "OctoML": [[759, "id3"]], "Get Started": [[751, "get-started"]], "Installing using pip": [[751, "installing-using-pip"], [704, "installing-using-pip"]], "Docker": [[751, "docker"], [704, "docker"]], "Installing from source": [[751, "installing-from-source"], [704, "installing-from-source"]], "tf.Graph": [[758, "tf-graph"]], "Jaxpr": [[758, "jaxpr"]], "torch.jit": [[758, "torch-jit"]], "torch.fx": [[758, "torch-fx"]], "Gradients": [[733, "gradients"], [546, "gradients"], [34, "module-ivy.data_classes.container.gradients"], [11, "module-ivy.data_classes.array.gradients"], [309, "gradients"]], "Overview": [[733, "overview"]], "Example Usage of the Gradient API": [[733, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[733, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[733, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[733, "custom-gradient-functions"]], "Design of the Gradient API": [[733, "design-of-the-gradient-api"]], "Our policy on gradients": [[733, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[733, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[733, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[733, "framework-specific-considerations"]], "Function Wrapping": [[732, "function-wrapping"]], "Decorator order": [[732, "decorator-order"]], "Conversion Wrappers": [[732, "conversion-wrappers"]], "Inference Wrappers": [[732, "inference-wrappers"]], "Out Argument Support": [[732, "out-argument-support"]], "Nestable Support": [[732, "nestable-support"]], "Partial Mixed Function Support": [[732, "partial-mixed-function-support"]], "Shape Conversion": [[732, "shape-conversion"]], "View Handling": [[732, "view-handling"]], "Exception Handling": [[732, "exception-handling"], [728, "exception-handling"]], "Miscellaneous Wrappers": [[732, "miscellaneous-wrappers"]], "ONNX onnx": [[756, "onnx-onnx"]], "NNEF nnef": [[756, "nnef-nnef"]], "CoreML coreml": [[756, "coreml-coreml"]], "Ivy Stateful API": [[746, "ivy-stateful-api"]], "Modules": [[746, "modules"]], "Initializers": [[746, "initializers"], [685, "module-ivy.stateful.initializers"]], "Optimizers": [[746, "optimizers"], [690, "module-ivy.stateful.optimizers"]], "TensorRT tensorrt": [[761, "tensorrt-tensorrt"]], "CUDA cuda": [[761, "cuda-cuda"]], "Design": [[741, "design"]], "ICC": [[762, "id1"]], "ICX": [[762, "icx"]], "NVCC": [[762, "nvcc"]], "Array API Standard": [[754, "id1"]], "Ivy Array": [[744, "ivy-array"], [719, "ivy-array"]], "The Array Class": [[744, "the-array-class"]], "Unifying Operators": [[744, "unifying-operators"]], "API Monkey Patching": [[744, "api-monkey-patching"]], "Instance Methods": [[744, "instance-methods"]], "Inplace Updates": [[734, "inplace-updates"]], "out argument": [[734, "out-argument"]], "copy argument": [[734, "copy-argument"]], "Views": [[734, "views"]], "Ivy Container": [[745, "ivy-container"]], "Construction": [[745, "construction"]], "Representation": [[745, "representation"]], "Recursive Methods": [[745, "recursive-methods"]], "Built-ins": [[745, "built-ins"]], "Access": [[745, "access"]], "Saving and Loading": [[745, "saving-and-loading"]], "Comparisons": [[745, "comparisons"]], "Customized Representations": [[745, "customized-representations"]], "Use Cases": [[745, "use-cases"]], "Compartmentalization": [[745, "compartmentalization"]], "Configuration": [[745, "configuration"]], "Data loading": [[745, "data-loading"]], "Network weights": [[745, "network-weights"]], "any": [[677, "any"]], "Helpful Resources": [[713, "helpful-resources"]], "std": [[673, "std"]], "Backend": [[693, "backend"]], "Logging": [[701, "module-ivy.utils.logging"]], "Why Unify?": [[708, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[708, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[708, "infinite-shelf-life"]], "Function Arguments": [[730, "function-arguments"]], "Examples": [[730, "examples"], [704, "examples"], [2, "examples"], [0, "examples"]], "Positional and Keyword Arguments": [[730, "positional-and-keyword-arguments"]], "Input Arrays": [[730, "input-arrays"]], "out Argument": [[730, "out-argument"]], "dtype and device arguments": [[730, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[730, "numbers-in-operator-functions"]], "Integer Sequences": [[730, "integer-sequences"]], "Nestable Functions": [[730, "nestable-functions"], [722, "nestable-functions"], [731, "nestable-functions"]], "Dynamic import": [[697, "module-ivy.utils.dynamic_import"]], "save": [[679, "save"]], "Module": [[688, "module-ivy.stateful.module"]], "Example - Ivy Robot": [[710, "example-ivy-robot"]], "Backend Setting": [[720, "backend-setting"]], "Dynamic Backend Setting": [[720, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[720, "backend-and-frontend-version-support"]], "Building the Docs Pipeline": [[721, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[721, "how-the-doc-builder-is-being-run"]], "The convenience script": [[721, "the-convenience-script"]], "Options": [[721, "options"]], "The Docker image": [[721, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[721, "how-ivy-s-docs-is-structured"]], "index.rst": [[721, "index-rst"]], "partial_conf.py": [[721, "partial-conf-py"]], "prebuild.sh": [[721, "prebuild-sh"]], "Custom Extensions": [[721, "custom-extensions"]], "custom_autosummary": [[721, "custom-autosummary"]], ":hide-table:": [[721, "hide-table"]], "discussion_linker": [[721, "discussion-linker"]], "skippable_function": [[721, "skippable-function"]], "ivy_data": [[721, "ivy-data"]], "Continuous Integration": [[723, "continuous-integration"], [729, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[723, "commit-push-pr-triggered-testing"]], "Implementation": [[723, "implementation"]], "A Top-Down View": [[723, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[723, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[723, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[723, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[723, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[723, "determine-test-coverage-workflow"]], "Multiple Runners": [[723, "multiple-runners"]], "Race Condition": [[723, "race-condition"]], "Array API Tests": [[723, "array-api-tests"], [718, "array-api-tests"]], "Periodic Testing": [[723, "periodic-testing"]], "Manually Dispatched Workflows": [[723, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[723, "ci-pipeline"]], "Push": [[723, "push"]], "Pull Request": [[723, "pull-request"]], "Dashboard": [[723, "dashboard"]], "Assertions": [[692, "module-ivy.utils.assertions"]], "Einsum parser": [[698, "module-ivy.utils.einsum_parser"]], "var": [[675, "var"]], "Setting Up": [[715, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[715, "forking-and-cloning-the-repo"]], "Pre-Commit": [[715, "pre-commit"]], "PyCharm": [[715, "pycharm"], [729, "pycharm"]], "Virtual environments - No Docker": [[715, "virtual-environments-no-docker"]], "Using miniconda": [[715, "using-miniconda"]], "Using venv": [[715, "using-venv"]], "Docker Interpreter with PyCharm": [[715, "docker-interpreter-with-pycharm"]], "Windows": [[715, "windows"], [715, "id6"]], "MacOS": [[715, "macos"]], "Ubuntu": [[715, "ubuntu"], [715, "id8"]], "Setting Up Testing in PyCharm": [[715, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[715, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[715, "setting-up-for-free"]], "WSL": [[715, "wsl"]], "GitHub Codespaces": [[715, "github-codespaces"]], "Ivy Exception Class": [[728, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[728, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[728, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[728, "handle-exceptions-decorator"]], "Consistency in Errors": [[728, "consistency-in-errors"]], "Assertion Function": [[728, "assertion-function"]], "Building the Docs": [[711, "building-the-docs"]], "Building the Docs using Docker": [[711, "building-the-docs-using-docker"]], "Using convenience script": [[711, "using-convenience-script"]], "Using existing image on Docker Hub": [[711, "using-existing-image-on-docker-hub"]], "Building the image locally": [[711, "building-the-image-locally"]], "Building the Docs without Docker": [[711, "building-the-docs-without-docker"]], "Status": [[704, "status"]], "Unified AI": [[704, "unified-ai"]], "Ivy as a transpiler": [[704, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[704, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[704, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[704, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[704, "setting-up-ivy"]], "Using Ivy": [[704, "using-ivy"]], "Multi-backend Support": [[704, "multi-backend-support"]], "Transpilation API": [[704, "transpilation-api"]], "Documentation": [[704, "documentation"]], "Contributing": [[704, "contributing"], [709, "contributing"]], "Community": [[704, "community"]], "Citation": [[704, "citation"]], "Converters": [[683, "module-ivy.stateful.converters"]], "Sub backend handler": [[696, "module-ivy.utils.backend.sub_backend_handler"]], "Ast helpers": [[694, "module-ivy.utils.backend.ast_helpers"]], "Standardization": [[707, "standardization"]], "Skepticism": [[707, "skepticism"]], "Complimentary vs Competitive": [[707, "complimentary-vs-competitive"]], "Do Standards Work?": [[707, "do-standards-work"]], "The Array API Standard": [[707, "the-array-api-standard"]], "Error Handling": [[712, "error-handling"]], "Activations": [[682, "module-ivy.stateful.activations"], [537, "activations"], [3, "module-ivy.data_classes.array.activations"], [25, "module-ivy.data_classes.container.activations"], [302, "activations"]], "prod": [[672, "prod"]], "all": [[676, "all"]], "min": [[671, "min"]], "Running the Tests": [[718, "running-the-tests"]], "Using Terminal": [[718, "using-terminal"]], "Using the IDE": [[718, "using-the-ide"]], "Regenerating Test Failures": [[718, "regenerating-test-failures"]], "Test Skipping": [[718, "test-skipping"]], "Docstrings": [[727, "docstrings"]], "Containers": [[722, "containers"]], "Container Instance Methods": [[722, "container-instance-methods"]], "API Instance Methods": [[722, "api-instance-methods"]], "API Special Methods": [[722, "api-special-methods"]], "Helpers": [[684, "module-ivy.stateful.helpers"]], "sum": [[674, "sum"]], "Background": [[705, "background"]], "Inspection": [[700, "module-ivy.utils.inspection"]], "Open Tasks": [[714, "open-tasks"]], "Function Formatting": [[714, "function-formatting"]], "Formatting checklist": [[714, "formatting-checklist"]], "Frontend APIs": [[714, "frontend-apis"]], "Where to place a frontend function": [[714, "where-to-place-a-frontend-function"]], "Frontend checklist": [[714, "frontend-checklist"]], "Ivy Experimental API": [[714, "ivy-experimental-api"]], "Extending the Ivy API": [[714, "extending-the-ivy-api"]], "Where to place a backend function": [[714, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[714, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Formatting": [[729, "formatting"]], "Lint Checks": [[729, "lint-checks"], [729, "id2"]], "Setup Formatting Locally": [[729, "setup-formatting-locally"]], "Pre-commit": [[729, "pre-commit"]], "VS Code": [[729, "vs-code"]], "Common Issues with Pre-Commit": [[729, "common-issues-with-pre-commit"]], "Lint Formatting": [[729, "lint-formatting"]], "Losses": [[687, "module-ivy.stateful.losses"], [549, "losses"], [38, "module-ivy.data_classes.container.losses"], [15, "module-ivy.data_classes.array.losses"], [312, "losses"]], "Utils": [[681, "utils"]], "Arrays": [[719, "arrays"]], "Native Array": [[719, "native-array"]], "Array Handling": [[719, "array-handling"]], "Integrating custom classes with Ivy": [[719, "integrating-custom-classes-with-ivy"]], "Framework classes": [[680, "framework-classes"]], "Devices": [[725, "devices"]], "Device Module": [[725, "device-module"]], "Arguments in other Functions": [[725, "arguments-in-other-functions"], [724, "arguments-in-other-functions"]], "Device handling": [[725, "device-handling"]], "Function Types": [[731, "function-types"]], "Primary Functions": [[731, "primary-functions"]], "Compositional Functions": [[731, "compositional-functions"]], "Mixed Functions": [[731, "mixed-functions"]], "Partial Mixed Functions": [[731, "partial-mixed-functions"]], "Standalone Functions": [[731, "standalone-functions"]], "Convenience Functions": [[731, "convenience-functions"]], "Layers": [[686, "module-ivy.stateful.layers"], [547, "layers"], [13, "module-ivy.data_classes.array.layers"], [36, "module-ivy.data_classes.container.layers"], [310, "layers"]], "load": [[678, "load"]], "Sequential": [[691, "module-ivy.stateful.sequential"]], "Exceptions": [[699, "module-ivy.utils.exceptions"]], "Data Types": [[724, "data-types"]], "Data Type Module": [[724, "data-type-module"]], "Data Type Promotion": [[724, "data-type-promotion"]], "Supported and Unsupported Data Types": [[724, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[724, "backend-data-type-bugs"]], "Data Type Casting Modes": [[724, "data-type-casting-modes"]], "Superset Data Type Support": [[724, "superset-data-type-support"]], "Verbosity": [[703, "module-ivy.utils.verbosity"]], "ML Explosion": [[706, "ml-explosion"]], "Deep Dive": [[717, "deep-dive"]], "Handler": [[695, "module-ivy.utils.backend.handler"]], "Profiler": [[702, "module-ivy.utils.profiler"]], "The Basics": [[716, "the-basics"]], "Getting Help": [[716, "getting-help"]], "ToDo List Issues": [[716, "todo-list-issues"]], "Managing Your Fork": [[716, "managing-your-fork"]], "Who To Ask": [[716, "who-to-ask"]], "With Command Line:": [[716, "with-command-line"]], "With Browser:": [[716, "with-browser"]], "Pull Requests": [[716, "pull-requests"]], "Small Commits Often": [[716, "small-commits-often"]], "Interactive Ivy Docker Container": [[716, "interactive-ivy-docker-container"]], "Running Tests Locally": [[716, "running-tests-locally"]], "With Docker": [[716, "with-docker"]], "Getting the most out of IDE": [[716, "getting-the-most-out-of-ide"]], "with PyCharm": [[716, "with-pycharm"]], "Norms": [[689, "module-ivy.stateful.norms"], [553, "norms"], [40, "module-ivy.data_classes.container.norms"], [17, "module-ivy.data_classes.array.norms"], [316, "norms"]], "Docstring Examples": [[726, "docstring-examples"]], "ivy.tan": [[726, "ivy-tan"]], "ivy.roll": [[726, "ivy-roll"]], "ivy.add": [[726, "ivy-add"]], "cumsum": [[667, "cumsum"]], "constant_pad": [[610, "constant-pad"]], "multi_index_nest": [[636, "multi-index-nest"]], "randint": [[648, "randint"]], "sort": [[665, "sort"]], "unique_all": [[658, "unique-all"]], "Data-dependent output shape": [[658, null], [659, null], [660, null], [661, null], [556, null], [556, null], [556, null], [556, null]], "mean": [[670, "mean"]], "argmin": [[654, "argmin"]], "layer_norm": [[646, "layer-norm"]], "permute_dims": [[613, "permute-dims"]], "split": [[617, "split"]], "argwhere": [[655, "argwhere"]], "unique_counts": [[659, "unique-counts"]], "argsort": [[662, "argsort"]], "einsum": [[668, "einsum"]], "set_nest_at_indices": [[645, "set-nest-at-indices"]], "expand_dims": [[611, "expand-dims"]], "nested_argwhere": [[638, "nested-argwhere"]], "random_normal": [[649, "random-normal"]], "map": [[633, "map"]], "index_nest": [[630, "index-nest"]], "prune_empty": [[641, "prune-empty"]], "maml_step": [[625, "maml-step"]], "argmax": [[653, "argmax"]], "stack": [[619, "stack"]], "zero_pad": [[623, "zero-pad"]], "copy_nest": [[628, "copy-nest"]], "set_nest_at_index": [[644, "set-nest-at-index"]], "searchsorted": [[664, "searchsorted"]], "shuffle": [[652, "shuffle"]], "unstack": [[622, "unstack"]], "cumprod": [[666, "cumprod"]], "map_nest_at_indices": [[635, "map-nest-at-indices"]], "nested_any": [[637, "nested-any"]], "msort": [[663, "msort"]], "prune_nest_at_index": [[642, "prune-nest-at-index"]], "squeeze": [[618, "squeeze"]], "repeat": [[614, "repeat"]], "prune_nest_at_indices": [[643, "prune-nest-at-indices"]], "unique_inverse": [[660, "unique-inverse"]], "all_nested_indices": [[627, "all-nested-indices"]], "duplicate_array_index_chains": [[629, "duplicate-array-index-chains"]], "max": [[669, "max"]], "where": [[657, "where"]], "reshape": [[615, "reshape"]], "seed": [[651, "seed"]], "insert_into_nest_at_index": [[631, "insert-into-nest-at-index"]], "tile": [[621, "tile"]], "nested_map": [[639, "nested-map"]], "reptile_step": [[626, "reptile-step"]], "unique_values": [[661, "unique-values"]], "swapaxes": [[620, "swapaxes"]], "nonzero": [[656, "nonzero"]], "map_nest_at_index": [[634, "map-nest-at-index"]], "flip": [[612, "flip"]], "random_uniform": [[650, "random-uniform"]], "insert_into_nest_at_indices": [[632, "insert-into-nest-at-indices"]], "multinomial": [[647, "multinomial"]], "roll": [[616, "roll"]], "nested_multi_map": [[640, "nested-multi-map"]], "fomaml_step": [[624, "fomaml-step"]], "matmul": [[586, "matmul"]], "conv1d": [[561, "conv1d"]], "Statistical": [[558, "statistical"], [45, "module-ivy.data_classes.container.statistical"], [22, "module-ivy.data_classes.array.statistical"], [322, "statistical"]], "Set": [[556, "set"], [43, "module-ivy.data_classes.container.set"], [20, "module-ivy.data_classes.array.set"], [319, "module-ivy.functional.ivy.experimental.set"]], "linear": [[571, "linear"]], "cholesky": [[575, "cholesky"]], "matrix_rank": [[589, "matrix-rank"]], "vector_to_skew_symmetric_matrix": [[604, "vector-to-skew-symmetric-matrix"]], "vander": [[601, "vander"]], "svdvals": [[597, "svdvals"]], "det": [[577, "det"]], "inv": [[584, "inv"]], "eig": [[580, "eig"], [358, "eig"]], "vecdot": [[602, "vecdot"]], "Utility": [[559, "utility"], [46, "module-ivy.data_classes.container.utility"], [23, "module-ivy.data_classes.array.utility"], [323, "utility"]], "conv_general_dilated": [[567, "conv-general-dilated"]], "lstm_update": [[572, "lstm-update"]], "Nest": [[552, "nest"], [315, "module-ivy.functional.ivy.experimental.nest"]], "concat": [[609, "concat"]], "trace": [[600, "trace"]], "clip": [[608, "clip"]], "Sorting": [[557, "sorting"], [21, "module-ivy.data_classes.array.sorting"], [44, "module-ivy.data_classes.container.sorting"], [320, "sorting"]], "conv3d": [[565, "conv3d"]], "matrix_power": [[588, "matrix-power"]], "cross_entropy": [[606, "cross-entropy"]], "inner": [[583, "inner"]], "dropout": [[570, "dropout"]], "Searching": [[555, "searching"], [19, "module-ivy.data_classes.array.searching"], [42, "module-ivy.data_classes.container.searching"], [318, "searching"]], "matrix_transpose": [[590, "matrix-transpose"]], "outer": [[591, "outer"]], "Random": [[554, "random"], [41, "module-ivy.data_classes.container.random"], [18, "module-ivy.data_classes.array.random"], [317, "random"]], "conv2d": [[563, "conv2d"]], "eigvalsh": [[582, "eigvalsh"]], "Meta": [[551, "meta"], [314, "module-ivy.functional.ivy.experimental.meta"]], "cross": [[576, "cross"]], "depthwise_conv2d": [[569, "depthwise-conv2d"]], "tensordot": [[598, "tensordot"]], "multi_head_attention": [[573, "multi-head-attention"]], "binary_cross_entropy": [[605, "binary-cross-entropy"]], "Manipulation": [[550, "manipulation"], [39, "module-ivy.data_classes.container.manipulation"], [16, "module-ivy.data_classes.array.manipulation"], [313, "manipulation"]], "lu_factor": [[585, "lu-factor"]], "diagonal": [[579, "diagonal"]], "svd": [[596, "svd"]], "vector_norm": [[603, "vector-norm"]], "qr": [[593, "qr"]], "tensorsolve": [[599, "tensorsolve"]], "diag": [[578, "diag"]], "pinv": [[592, "pinv"]], "scaled_dot_product_attention": [[574, "scaled-dot-product-attention"]], "solve": [[595, "solve"]], "slogdet": [[594, "slogdet"]], "sparse_cross_entropy": [[607, "sparse-cross-entropy"]], "eigh": [[581, "eigh"]], "conv": [[560, "conv"]], "conv_general_transpose": [[568, "conv-general-transpose"]], "conv3d_transpose": [[566, "conv3d-transpose"]], "matrix_norm": [[587, "matrix-norm"]], "conv2d_transpose": [[564, "conv2d-transpose"]], "conv1d_transpose": [[562, "conv1d-transpose"]], "unset_min_denominator": [[517, "unset-min-denominator"]], "value_and_grad": [[536, "value-and-grad"]], "lars_update": [[533, "lars-update"]], "to_native_shape": [[509, "to-native-shape"]], "value_is_nan": [[524, "value-is-nan"]], "shape": [[502, "shape"]], "stable_pow": [[504, "stable-pow"]], "set_inplace_mode": [[492, "set-inplace-mode"]], "Experimental": [[544, "experimental"], [9, "module-ivy.data_classes.array.experimental"], [32, "module-ivy.data_classes.container.experimental"]], "Elementwise": [[543, "elementwise"], [56, "module-ivy.data_classes.nested_array.elementwise"], [31, "module-ivy.data_classes.container.elementwise"], [8, "module-ivy.data_classes.array.elementwise"], [307, "elementwise"]], "supports_inplace_updates": [[506, "supports-inplace-updates"]], "set_queue_timeout": [[498, "set-queue-timeout"]], "set_exception_trace_mode": [[491, "set-exception-trace-mode"]], "Parameter": [[491, "parameter"], [542, "parameter"], [500, "parameter"], [496, "parameter"], [490, "parameter"], [497, "parameter"], [545, "parameter"], [545, "id1"], [545, "id2"], [545, "id3"], [545, "id4"], [545, "id5"], [499, "parameter"], [164, "parameter"]], "Device": [[542, "device"], [7, "module-ivy.data_classes.array.device"], [30, "module-ivy.data_classes.container.device"], [306, "module-ivy.functional.ivy.experimental.device"]], "set_show_func_wrapper_trace_mode": [[500, "set-show-func-wrapper-trace-mode"]], "set_nestable_mode": [[496, "set-nestable-mode"]], "Creation": [[540, "creation"], [28, "module-ivy.data_classes.container.creation"], [5, "module-ivy.data_classes.array.creation"], [304, "creation"]], "execute_with_gradients": [[528, "execute-with-gradients"]], "unset_exception_trace_mode": [[514, "unset-exception-trace-mode"]], "gradient_descent_update": [[530, "gradient-descent-update"]], "adam_step": [[526, "adam-step"]], "stop_gradient": [[535, "stop-gradient"]], "to_numpy": [[510, "to-numpy"]], "unset_array_mode": [[513, "unset-array-mode"]], "Control flow ops": [[539, "control-flow-ops"]], "to_ivy_shape": [[507, "to-ivy-shape"]], "optimizer_update": [[534, "optimizer-update"]], "set_min_base": [[494, "set-min-base"]], "stable_divide": [[503, "stable-divide"]], "unset_precise_mode": [[519, "unset-precise-mode"]], "unset_shape_array_mode": [[521, "unset-shape-array-mode"]], "set_array_mode": [[490, "set-array-mode"]], "set_precise_mode": [[497, "set-precise-mode"]], "unset_min_base": [[516, "unset-min-base"]], "lamb_update": [[532, "lamb-update"]], "jac": [[531, "jac"]], "scatter_flat": [[488, "scatter-flat"]], "to_scalar": [[511, "to-scalar"]], "Data type": [[541, "data-type"], [6, "module-ivy.data_classes.array.data_type"], [29, "module-ivy.data_classes.container.data_type"], [305, "module-ivy.functional.ivy.experimental.data_type"]], "General": [[545, "general"], [10, "module-ivy.data_classes.array.general"], [33, "module-ivy.data_classes.container.general"], [308, "general"]], "scatter_nd": [[489, "scatter-nd"]], "strides": [[505, "strides"]], "vmap": [[525, "vmap"]], "set_item": [[493, "set-item"]], "set_tmp_dir": [[501, "set-tmp-dir"]], "set_min_denominator": [[495, "set-min-denominator"]], "unset_queue_timeout": [[520, "unset-queue-timeout"]], "grad": [[529, "grad"]], "to_list": [[508, "to-list"]], "unset_tmp_dir": [[523, "unset-tmp-dir"]], "adam_update": [[527, "adam-update"]], "unset_nestable_mode": [[518, "unset-nestable-mode"]], "Linear algebra": [[548, "linear-algebra"], [14, "module-ivy.data_classes.array.linear_algebra"], [37, "module-ivy.data_classes.container.linear_algebra"], [311, "linear-algebra"]], "try_else_none": [[512, "try-else-none"]], "unset_inplace_mode": [[515, "unset-inplace-mode"]], "unset_show_func_wrapper_trace_mode": [[522, "unset-show-func-wrapper-trace-mode"]], "Constants": [[538, "module-ivy.functional.ivy.constants"], [303, "module-ivy.functional.ivy.experimental.constants"]], "set_shape_array_mode": [[499, "set-shape-array-mode"]], "multiprocessing": [[485, "multiprocessing"]], "einops_reduce": [[458, "einops-reduce"]], "current_backend_str": [[455, "current-backend-str"]], "is_ivy_sparse_array": [[429, "is-ivy-sparse-array"]], "get_all_arrays_in_memory": [[466, "get-all-arrays-in-memory"]], "has_nans": [[470, "has-nans"]], "inplace_update": [[474, "inplace-update"]], "invert_permutation": [[427, "invert-permutation"]], "is_array": [[476, "is-array"]], "match_kwargs": [[484, "match-kwargs"]], "array_equal": [[449, "array-equal"]], "get_num_dims": [[468, "get-num-dims"]], "isin": [[481, "isin"]], "is_ivy_array": [[477, "is-ivy-array"]], "is_ivy_container": [[478, "is-ivy-container"]], "default": [[456, "default"]], "get_item": [[467, "get-item"]], "function_unsupported_devices_and_dtypes": [[463, "function-unsupported-devices-and-dtypes"]], "exists": [[460, "exists"]], "native_sparse_array": [[431, "native-sparse-array"]], "optional_get_element": [[445, "optional-get-element"]], "nanprod": [[443, "nanprod"]], "corrcoef": [[434, "corrcoef"]], "is_ivy_nested_array": [[479, "is-ivy-nested-array"]], "gather_nd": [[465, "gather-nd"]], "clip_vector_norm": [[453, "clip-vector-norm"]], "native_sparse_array_to_indices_values_and_shape": [[432, "native-sparse-array-to-indices-values-and-shape"]], "container_types": [[454, "container-types"]], "num_arrays_in_memory": [[486, "num-arrays-in-memory"]], "igamma": [[439, "igamma"]], "inplace_variables_supported": [[475, "inplace-variables-supported"]], "median": [[440, "median"]], "fourier_encode": [[461, "fourier-encode"]], "cummax": [[436, "cummax"]], "inplace_increment": [[473, "inplace-increment"]], "lexsort": [[428, "lexsort"]], "all_equal": [[446, "all-equal"]], "get_referrers_recursive": [[469, "get-referrers-recursive"]], "print_all_arrays_in_memory": [[487, "print-all-arrays-in-memory"]], "einops_repeat": [[459, "einops-repeat"]], "quantile": [[444, "quantile"]], "is_native_sparse_array": [[430, "is-native-sparse-array"]], "arg_info": [[447, "arg-info"]], "itemsize": [[483, "itemsize"]], "histogram": [[438, "histogram"]], "cache_fn": [[451, "cache-fn"]], "gather": [[464, "gather"]], "is_native_array": [[480, "is-native-array"]], "isscalar": [[482, "isscalar"]], "inplace_decrement": [[472, "inplace-decrement"]], "assert_supports_inplace": [[450, "assert-supports-inplace"]], "bincount": [[433, "bincount"]], "arg_names": [[448, "arg-names"]], "clip_matrix_norm": [[452, "clip-matrix-norm"]], "cummin": [[437, "cummin"]], "einops_rearrange": [[457, "einops-rearrange"]], "nanmean": [[441, "nanmean"]], "function_supported_devices_and_dtypes": [[462, "function-supported-devices-and-dtypes"]], "inplace_arrays_supported": [[471, "inplace-arrays-supported"]], "nanmedian": [[442, "nanmedian"]], "cov": [[435, "cov"]], "Wrapping": [[24, "module-ivy.data_classes.array.wrapping"], [47, "module-ivy.data_classes.container.wrapping"]], "Array": [[51, "array"]], "Image": [[35, "module-ivy.data_classes.container.image"], [12, "module-ivy.data_classes.array.image"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Sharp bits": [[2, "sharp-bits"], [0, "sharp-bits"]], "Base": [[48, "module-ivy.data_classes.factorized_tensor.base"], [26, "module-ivy.data_classes.container.base"], [55, "module-ivy.data_classes.nested_array.base"]], "Conversions": [[4, "module-ivy.data_classes.array.conversions"], [27, "module-ivy.data_classes.container.conversions"]], "hardswish": [[60, "hardswish"]], "Nested array": [[54, "nested-array"]], "Functions": [[58, "functions"]], "Factorized tensor": [[53, "factorized-tensor"]], "Container": [[52, "container"]], "Cp tensor": [[49, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "gelu": [[59, "gelu"]], "Tucker tensor": [[50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "Data classes": [[57, "data-classes"]], "partial_fold": [[402, "partial-fold"]], "atleast_3d": [[383, "atleast-3d"]], "vstack": [[414, "vstack"]], "multi_dot": [[368, "multi-dot"]], "fill_diagonal": [[390, "fill-diagonal"]], "put_along_axis": [[406, "put-along-axis"]], "expand": [[389, "expand"]], "beta": [[422, "beta"]], "dirichlet": [[423, "dirichlet"]], "unravel_index": [[426, "unravel-index"]], "tucker": [[373, "tucker"]], "smooth_l1_loss": [[377, "smooth-l1-loss"]], "truncated_svd": [[372, "truncated-svd"]], "hsplit": [[396, "hsplit"]], "flipud": [[393, "flipud"]], "broadcast_shapes": [[384, "broadcast-shapes"]], "mode_dot": [[367, "mode-dot"]], "concat_from_sequence": [[386, "concat-from-sequence"]], "huber_loss": [[374, "huber-loss"]], "pad": [[401, "pad"]], "soft_thresholding": [[408, "soft-thresholding"]], "log_poisson_loss": [[376, "log-poisson-loss"]], "dsplit": [[387, "dsplit"]], "gamma": [[424, "gamma"]], "associative_scan": [[380, "associative-scan"]], "l2_normalize": [[419, "l2-normalize"]], "i0": [[398, "i0"]], "rot90": [[407, "rot90"]], "flatten": [[391, "flatten"]], "poisson": [[425, "poisson"]], "soft_margin_loss": [[378, "soft-margin-loss"]], "batch_norm": [[415, "batch-norm"]], "unfold": [[411, "unfold"]], "choose": [[385, "choose"]], "bernoulli": [[421, "bernoulli"]], "svd_flip": [[371, "svd-flip"]], "partial_unfold": [[404, "partial-unfold"]], "fliplr": [[392, "fliplr"]], "heaviside": [[395, "heaviside"]], "partial_tensor_to_vec": [[403, "partial-tensor-to-vec"]], "unique_consecutive": [[412, "unique-consecutive"]], "instance_norm": [[417, "instance-norm"]], "hstack": [[397, "hstack"]], "lp_normalize": [[420, "lp-normalize"]], "group_norm": [[416, "group-norm"]], "l1_loss": [[375, "l1-loss"]], "multi_mode_dot": [[369, "multi-mode-dot"]], "dstack": [[388, "dstack"]], "matrix_exp": [[366, "matrix-exp"]], "atleast_2d": [[382, "atleast-2d"]], "fold": [[394, "fold"]], "as_strided": [[379, "as-strided"]], "moveaxis": [[400, "moveaxis"]], "partial_vec_to_tensor": [[405, "partial-vec-to-tensor"]], "vsplit": [[413, "vsplit"]], "l1_normalize": [[418, "l1-normalize"]], "take_along_axis": [[409, "take-along-axis"]], "top_k": [[410, "top-k"]], "partial_tucker": [[370, "partial-tucker"]], "matricize": [[399, "matricize"]], "atleast_1d": [[381, "atleast-1d"]], "get_interpolate_kernel": [[340, "get-interpolate-kernel"]], "avg_pool3d": [[330, "avg-pool3d"]], "avg_pool1d": [[328, "avg-pool1d"]], "Sparse array": [[321, "sparse-array"]], "dropout2d": [[334, "dropout2d"]], "pool": [[351, "pool"]], "dct": [[331, "dct"]], "khatri_rao": [[362, "khatri-rao"]], "fft": [[337, "fft"]], "generate_einsum_equation": [[339, "generate-einsum-equation"]], "idct": [[341, "idct"]], "kronecker": [[364, "kronecker"]], "adaptive_avg_pool2d": [[325, "adaptive-avg-pool2d"]], "embedding": [[336, "embedding"]], "adaptive_max_pool2d": [[326, "adaptive-max-pool2d"]], "area_interpolate": [[327, "area-interpolate"]], "avg_pool2d": [[329, "avg-pool2d"]], "make_svd_non_negative": [[365, "make-svd-non-negative"]], "ifftn": [[343, "ifftn"]], "max_pool2d": [[347, "max-pool2d"]], "adjoint": [[354, "adjoint"]], "max_pool3d": [[348, "max-pool3d"]], "dft": [[332, "dft"]], "dropout3d": [[335, "dropout3d"]], "nearest_interpolate": [[350, "nearest-interpolate"]], "ifft": [[342, "ifft"]], "diagflat": [[356, "diagflat"]], "reduce_window": [[352, "reduce-window"]], "cond": [[355, "cond"]], "rfftn": [[353, "rfftn"]], "fft2": [[338, "fft2"]], "max_pool1d": [[346, "max-pool1d"]], "eigvals": [[360, "eigvals"]], "interp": [[344, "interp"]], "interpolate": [[345, "interpolate"]], "max_unpool1d": [[349, "max-unpool1d"]], "eigh_tridiagonal": [[359, "eigh-tridiagonal"]], "initialize_tucker": [[361, "initialize-tucker"]], "adaptive_avg_pool1d": [[324, "adaptive-avg-pool1d"]], "dropout1d": [[333, "dropout1d"]], "dot": [[357, "dot"]], "kron": [[363, "kron"]], "ndenumerate": [[266, "ndenumerate"]], "selu": [[254, "selu"]], "diff": [[280, "diff"]], "elu": [[249, "elu"]], "thresholded_relu": [[257, "thresholded-relu"]], "xlogy": [[298, "xlogy"]], "logsigmoid": [[251, "logsigmoid"]], "count_nonzero": [[279, "count-nonzero"]], "ldexp": [[289, "ldexp"]], "float_power": [[283, "float-power"]], "lgamma": [[291, "lgamma"]], "unsorted_segment_sum": [[273, "unsorted-segment-sum"]], "digamma": [[281, "digamma"]], "trunc_divide": [[248, "trunc-divide"]], "zeta": [[299, "zeta"]], "trapz": [[246, "trapz"]], "tan": [[244, "tan"]], "random_cp": [[268, "random-cp"]], "binarizer": [[276, "binarizer"]], "gradient": [[286, "gradient"]], "nansum": [[293, "nansum"]], "modf": [[292, "modf"]], "tril_indices": [[270, "tril-indices"]], "prelu": [[252, "prelu"]], "tanh": [[245, "tanh"]], "signbit": [[295, "signbit"]], "sparsify_tensor": [[297, "sparsify-tensor"]], "trunc": [[247, "trunc"]], "copysign": [[278, "copysign"]], "kaiser_bessel_derived_window": [[263, "kaiser-bessel-derived-window"]], "ndindex": [[267, "ndindex"]], "kaiser_window": [[264, "kaiser-window"]], "random_tucker": [[269, "random-tucker"]], "trilu": [[271, "trilu"]], "mel_weight_matrix": [[265, "mel-weight-matrix"]], "unsorted_segment_min": [[272, "unsorted-segment-min"]], "fmax": [[284, "fmax"]], "silu": [[256, "silu"]], "frexp": [[285, "frexp"]], "sinc": [[296, "sinc"]], "vorbis_window": [[274, "vorbis-window"]], "relu6": [[253, "relu6"]], "logit": [[250, "logit"]], "allclose": [[275, "allclose"]], "hypot": [[287, "hypot"]], "isclose": [[288, "isclose"]], "blackman_window": [[258, "blackman-window"]], "hamming_window": [[260, "hamming-window"]], "lerp": [[290, "lerp"]], "bind_custom_gradient_function": [[301, "bind-custom-gradient-function"]], "reduce": [[300, "reduce"]], "nextafter": [[294, "nextafter"]], "conj": [[277, "conj"]], "fix": [[282, "fix"]], "sequence_length": [[255, "sequence-length"]], "eye_like": [[259, "eye-like"]], "indices": [[262, "indices"]], "hann_window": [[261, "hann-window"]], "set_default_uint_dtype": [[139, "set-default-uint-dtype"]], "set_default_device": [[163, "set-default-device"]], "get_all_ivy_arrays_on_dev": [[155, "get-all-ivy-arrays-on-dev"]], "percent_used_mem_on_dev": [[161, "percent-used-mem-on-dev"]], "set_default_int_dtype": [[138, "set-default-int-dtype"]], "valid_dtype": [[146, "valid-dtype"]], "add": [[177, "add"]], "is_hashable_dtype": [[128, "is-hashable-dtype"]], "unset_default_float_dtype": [[143, "unset-default-float-dtype"]], "asin": [[179, "asin"]], "clear_cached_mem_on_dev": [[149, "clear-cached-mem-on-dev"]], "to_device": [[168, "to-device"]], "total_mem_on_dev": [[169, "total-mem-on-dev"]], "set_soft_device_mode": [[164, "set-soft-device-mode"]], "dev_util": [[152, "dev-util"]], "tpu_is_available": [[170, "tpu-is-available"]], "asinh": [[180, "asinh"]], "unset_default_int_dtype": [[144, "unset-default-int-dtype"]], "split_factor": [[166, "split-factor"]], "is_native_dtype": [[130, "is-native-dtype"]], "set_default_float_dtype": [[137, "set-default-float-dtype"]], "unset_soft_device_mode": [[172, "unset-soft-device-mode"]], "invalid_dtype": [[124, "invalid-dtype"]], "unset_default_device": [[171, "unset-default-device"]], "unset_default_complex_dtype": [[141, "unset-default-complex-dtype"]], "is_int_dtype": [[129, "is-int-dtype"]], "set_default_complex_dtype": [[135, "set-default-complex-dtype"]], "is_complex_dtype": [[126, "is-complex-dtype"]], "num_ivy_arrays_on_dev": [[160, "num-ivy-arrays-on-dev"]], "acosh": [[176, "acosh"]], "set_default_dtype": [[136, "set-default-dtype"]], "function_supported_devices": [[153, "function-supported-devices"]], "unset_default_dtype": [[142, "unset-default-dtype"]], "is_bool_dtype": [[125, "is-bool-dtype"]], "iinfo": [[122, "iinfo"]], "used_mem_on_dev": [[173, "used-mem-on-dev"]], "num_cpu_cores": [[158, "num-cpu-cores"]], "split_func_call": [[167, "split-func-call"]], "is_float_dtype": [[127, "is-float-dtype"]], "infer_default_dtype": [[123, "infer-default-dtype"]], "unset_default_uint_dtype": [[145, "unset-default-uint-dtype"]], "num_gpus": [[159, "num-gpus"]], "result_type": [[134, "result-type"]], "gpu_is_available": [[156, "gpu-is-available"]], "set_split_factor": [[165, "set-split-factor"]], "is_uint_dtype": [[131, "is-uint-dtype"]], "handle_soft_device_variable": [[157, "handle-soft-device-variable"]], "default_device": [[150, "default-device"]], "print_all_ivy_arrays_on_dev": [[162, "print-all-ivy-arrays-on-dev"]], "promote_types_of_inputs": [[133, "promote-types-of-inputs"]], "promote_types": [[132, "promote-types"]], "as_native_dev": [[148, "as-native-dev"]], "atan": [[181, "atan"]], "function_unsupported_devices": [[154, "function-unsupported-devices"]], "acos": [[175, "acos"]], "as_ivy_dev": [[147, "as-ivy-dev"]], "dev": [[151, "dev"]], "type_promote_arrays": [[140, "type-promote-arrays"]], "angle": [[178, "angle"]], "atan2": [[182, "atan2"]], "abs": [[174, "abs"]], "sin": [[239, "sin"]], "pow": [[232, "pow"]], "rad2deg": [[233, "rad2deg"]], "gcd": [[204, "gcd"]], "fmin": [[202, "fmin"]], "greater": [[205, "greater"]], "deg2rad": [[193, "deg2rad"]], "isfinite": [[208, "isfinite"]], "expm1": [[199, "expm1"]], "greater_equal": [[206, "greater-equal"]], "less_equal": [[214, "less-equal"]], "log10": [[216, "log10"]], "bitwise_right_shift": [[188, "bitwise-right-shift"]], "logical_and": [[221, "logical-and"]], "maximum": [[225, "maximum"]], "less": [[213, "less"]], "isreal": [[211, "isreal"]], "not_equal": [[230, "not-equal"]], "log2": [[218, "log2"]], "atanh": [[183, "atanh"]], "log1p": [[217, "log1p"]], "nan_to_num": [[228, "nan-to-num"]], "minimum": [[226, "minimum"]], "real": [[234, "real"]], "bitwise_invert": [[185, "bitwise-invert"]], "bitwise_and": [[184, "bitwise-and"]], "exp": [[197, "exp"]], "fmod": [[203, "fmod"]], "imag": [[207, "imag"]], "negative": [[229, "negative"]], "lcm": [[212, "lcm"]], "isnan": [[210, "isnan"]], "remainder": [[236, "remainder"]], "cosh": [[192, "cosh"]], "sinh": [[240, "sinh"]], "ceil": [[190, "ceil"]], "divide": [[194, "divide"]], "multiply": [[227, "multiply"]], "isinf": [[209, "isinf"]], "positive": [[231, "positive"]], "bitwise_xor": [[189, "bitwise-xor"]], "equal": [[195, "equal"]], "floor_divide": [[201, "floor-divide"]], "bitwise_left_shift": [[186, "bitwise-left-shift"]], "logaddexp2": [[220, "logaddexp2"]], "logical_or": [[223, "logical-or"]], "square": [[242, "square"]], "bitwise_or": [[187, "bitwise-or"]], "cos": [[191, "cos"]], "log": [[215, "log"]], "exp2": [[198, "exp2"]], "logical_xor": [[224, "logical-xor"]], "sign": [[238, "sign"]], "erf": [[196, "erf"]], "sqrt": [[241, "sqrt"]], "round": [[237, "round"]], "logical_not": [[222, "logical-not"]], "reciprocal": [[235, "reciprocal"]], "subtract": [[243, "subtract"]], "floor": [[200, "floor"]], "logaddexp": [[219, "logaddexp"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[3, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[3, "module-ivy.data_classes.array.activations"], [4, "module-ivy.data_classes.array.conversions"], [5, "module-ivy.data_classes.array.creation"], [6, "module-ivy.data_classes.array.data_type"], [7, "module-ivy.data_classes.array.device"], [8, "module-ivy.data_classes.array.elementwise"], [9, "module-ivy.data_classes.array.experimental"], [9, "module-ivy.data_classes.array.experimental.activations"], [9, "module-ivy.data_classes.array.experimental.conversions"], [9, "module-ivy.data_classes.array.experimental.creation"], [9, "module-ivy.data_classes.array.experimental.data_type"], [9, "module-ivy.data_classes.array.experimental.device"], [9, "module-ivy.data_classes.array.experimental.elementwise"], [9, "module-ivy.data_classes.array.experimental.general"], [9, "module-ivy.data_classes.array.experimental.gradients"], [9, "module-ivy.data_classes.array.experimental.image"], [9, "module-ivy.data_classes.array.experimental.layers"], [9, "module-ivy.data_classes.array.experimental.linear_algebra"], [9, "module-ivy.data_classes.array.experimental.losses"], [9, "module-ivy.data_classes.array.experimental.manipulation"], [9, "module-ivy.data_classes.array.experimental.norms"], [9, "module-ivy.data_classes.array.experimental.random"], [9, "module-ivy.data_classes.array.experimental.searching"], [9, "module-ivy.data_classes.array.experimental.set"], [9, "module-ivy.data_classes.array.experimental.sorting"], [9, "module-ivy.data_classes.array.experimental.statistical"], [9, "module-ivy.data_classes.array.experimental.utility"], [10, "module-ivy.data_classes.array.general"], [11, "module-ivy.data_classes.array.gradients"], [12, "module-ivy.data_classes.array.image"], [13, "module-ivy.data_classes.array.layers"], [14, "module-ivy.data_classes.array.linear_algebra"], [15, "module-ivy.data_classes.array.losses"], [16, "module-ivy.data_classes.array.manipulation"], [17, "module-ivy.data_classes.array.norms"], [18, "module-ivy.data_classes.array.random"], [19, "module-ivy.data_classes.array.searching"], [20, "module-ivy.data_classes.array.set"], [21, "module-ivy.data_classes.array.sorting"], [22, "module-ivy.data_classes.array.statistical"], [23, "module-ivy.data_classes.array.utility"], [24, "module-ivy.data_classes.array.wrapping"], [25, "module-ivy.data_classes.container.activations"], [26, "module-ivy.data_classes.container.base"], [27, "module-ivy.data_classes.container.conversions"], [28, "module-ivy.data_classes.container.creation"], [29, "module-ivy.data_classes.container.data_type"], [30, "module-ivy.data_classes.container.device"], [31, "module-ivy.data_classes.container.elementwise"], [32, "module-ivy.data_classes.container.experimental"], [32, "module-ivy.data_classes.container.experimental.activations"], [32, "module-ivy.data_classes.container.experimental.conversions"], [32, "module-ivy.data_classes.container.experimental.creation"], [32, "module-ivy.data_classes.container.experimental.data_type"], [32, "module-ivy.data_classes.container.experimental.device"], [32, "module-ivy.data_classes.container.experimental.elementwise"], [32, "module-ivy.data_classes.container.experimental.general"], [32, "module-ivy.data_classes.container.experimental.gradients"], [32, "module-ivy.data_classes.container.experimental.image"], [32, "module-ivy.data_classes.container.experimental.layers"], [32, "module-ivy.data_classes.container.experimental.linear_algebra"], [32, "module-ivy.data_classes.container.experimental.losses"], [32, "module-ivy.data_classes.container.experimental.manipulation"], [32, "module-ivy.data_classes.container.experimental.norms"], [32, "module-ivy.data_classes.container.experimental.random"], [32, "module-ivy.data_classes.container.experimental.searching"], [32, "module-ivy.data_classes.container.experimental.set"], [32, "module-ivy.data_classes.container.experimental.sorting"], [32, "module-ivy.data_classes.container.experimental.statistical"], [32, "module-ivy.data_classes.container.experimental.utility"], [33, "module-ivy.data_classes.container.general"], [34, "module-ivy.data_classes.container.gradients"], [35, "module-ivy.data_classes.container.image"], [36, "module-ivy.data_classes.container.layers"], [37, "module-ivy.data_classes.container.linear_algebra"], [38, "module-ivy.data_classes.container.losses"], [39, "module-ivy.data_classes.container.manipulation"], [40, "module-ivy.data_classes.container.norms"], [41, "module-ivy.data_classes.container.random"], [42, "module-ivy.data_classes.container.searching"], [43, "module-ivy.data_classes.container.set"], [44, "module-ivy.data_classes.container.sorting"], [45, "module-ivy.data_classes.container.statistical"], [46, "module-ivy.data_classes.container.utility"], [47, "module-ivy.data_classes.container.wrapping"], [48, "module-ivy.data_classes.factorized_tensor.base"], [49, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [51, "module-ivy.data_classes.array.array"], [52, "module-ivy.data_classes.container.container"], [54, "module-ivy.data_classes.nested_array.nested_array"], [55, "module-ivy.data_classes.nested_array.base"], [56, "module-ivy.data_classes.nested_array.elementwise"], [302, "module-ivy.functional.ivy.experimental.activations"], [303, "module-ivy.functional.ivy.experimental.constants"], [304, "module-ivy.functional.ivy.experimental.creation"], [305, "module-ivy.functional.ivy.experimental.data_type"], [306, "module-ivy.functional.ivy.experimental.device"], [307, "module-ivy.functional.ivy.experimental.elementwise"], [308, "module-ivy.functional.ivy.experimental.general"], [309, "module-ivy.functional.ivy.experimental.gradients"], [310, "module-ivy.functional.ivy.experimental.layers"], [311, "module-ivy.functional.ivy.experimental.linear_algebra"], [312, "module-ivy.functional.ivy.experimental.losses"], [313, "module-ivy.functional.ivy.experimental.manipulation"], [314, "module-ivy.functional.ivy.experimental.meta"], [315, "module-ivy.functional.ivy.experimental.nest"], [316, "module-ivy.functional.ivy.experimental.norms"], [317, "module-ivy.functional.ivy.experimental.random"], [318, "module-ivy.functional.ivy.experimental.searching"], [319, "module-ivy.functional.ivy.experimental.set"], [320, "module-ivy.functional.ivy.experimental.sorting"], [321, "module-ivy.functional.ivy.experimental.sparse_array"], [322, "module-ivy.functional.ivy.experimental.statistical"], [323, "module-ivy.functional.ivy.experimental.utility"], [537, "module-ivy.functional.ivy.activations"], [538, "module-ivy.functional.ivy.constants"], [539, "module-ivy.functional.ivy.control_flow_ops"], [540, "module-ivy.functional.ivy.creation"], [541, "module-ivy.functional.ivy.data_type"], [542, "module-ivy.functional.ivy.device"], [543, "module-ivy.functional.ivy.elementwise"], [544, "module-ivy.functional.ivy.experimental"], [545, "module-ivy.functional.ivy.general"], [546, "module-ivy.functional.ivy.gradients"], [547, "module-ivy.functional.ivy.layers"], [548, "module-ivy.functional.ivy.linear_algebra"], [549, "module-ivy.functional.ivy.losses"], [550, "module-ivy.functional.ivy.manipulation"], [551, "module-ivy.functional.ivy.meta"], [552, "module-ivy.functional.ivy.nest"], [553, "module-ivy.functional.ivy.norms"], [554, "module-ivy.functional.ivy.random"], [555, "module-ivy.functional.ivy.searching"], [556, "module-ivy.functional.ivy.set"], [557, "module-ivy.functional.ivy.sorting"], [558, "module-ivy.functional.ivy.statistical"], [559, "module-ivy.functional.ivy.utility"], [682, "module-ivy.stateful.activations"], [683, "module-ivy.stateful.converters"], [684, "module-ivy.stateful.helpers"], [685, "module-ivy.stateful.initializers"], [686, "module-ivy.stateful.layers"], [687, "module-ivy.stateful.losses"], [688, "module-ivy.stateful.module"], [689, "module-ivy.stateful.norms"], [690, "module-ivy.stateful.optimizers"], [691, "module-ivy.stateful.sequential"], [692, "module-ivy.utils.assertions"], [693, "module-ivy.utils.backend"], [694, "module-ivy.utils.backend.ast_helpers"], [695, "module-ivy.utils.backend.handler"], [696, "module-ivy.utils.backend.sub_backend_handler"], [697, "module-ivy.utils.dynamic_import"], [698, "module-ivy.utils.einsum_parser"], [699, "module-ivy.utils.exceptions"], [700, "module-ivy.utils.inspection"], [701, "module-ivy.utils.logging"], [702, "module-ivy.utils.profiler"], [703, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[4, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[5, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[6, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[7, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[7, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[7, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[8, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[9, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[9, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[9, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[9, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[9, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[9, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[9, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[9, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[9, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[9, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[9, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[9, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[9, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[9, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[9, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[9, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[9, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[9, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[9, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[9, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[10, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[11, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[12, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[12, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[12, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[13, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[14, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[15, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[16, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[17, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[18, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[18, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[18, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[19, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[20, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[20, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[20, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[21, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[22, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[23, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[24, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[25, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[26, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[26, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[27, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[28, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[29, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[30, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[30, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[31, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[32, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[32, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[32, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[32, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[32, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[32, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[32, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[32, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[32, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[32, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[32, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[32, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[32, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[32, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[32, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[32, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[32, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[32, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[32, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[32, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[32, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[33, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[34, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[35, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[35, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[35, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[36, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[37, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[38, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[39, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[40, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[41, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[41, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[42, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[43, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[43, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[43, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[44, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[45, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[46, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[47, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[48, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[48, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[49, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[49, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[50, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[50, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[51, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[51, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[51, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[51, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[52, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[52, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[52, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[54, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[54, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[55, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[55, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[56, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[56, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[59, "ivy.gelu"], [537, "ivy.gelu"]], "gelu() (ivy.array method)": [[59, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[59, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[60, "ivy.hardswish"], [537, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[60, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[60, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[61, "ivy.leaky_relu"], [537, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[61, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[61, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[62, "ivy.log_softmax"], [537, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[62, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[62, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[63, "ivy.mish"], [537, "ivy.mish"]], "mish() (ivy.array method)": [[63, "ivy.Array.mish"]], "mish() (ivy.container method)": [[63, "ivy.Container.mish"]], "relu() (in module ivy)": [[64, "ivy.relu"], [537, "ivy.relu"]], "relu() (ivy.array method)": [[64, "ivy.Array.relu"]], "relu() (ivy.container method)": [[64, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[65, "ivy.sigmoid"], [537, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[65, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[65, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[66, "ivy.softmax"], [537, "ivy.softmax"]], "softmax() (ivy.array method)": [[66, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[66, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[67, "ivy.softplus"], [537, "ivy.softplus"]], "softplus() (ivy.array method)": [[67, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[67, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[68, "ivy.softsign"], [537, "ivy.softsign"]], "cast_bool() (in module ivy)": [[69, "ivy.cast_bool"], [539, "ivy.cast_bool"]], "cmp_is() (in module ivy)": [[70, "ivy.cmp_is"], [539, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[71, "ivy.cmp_isnot"], [539, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[72, "ivy.for_loop"], [539, "ivy.for_loop"]], "if_else() (in module ivy)": [[73, "ivy.if_else"], [539, "ivy.if_else"]], "try_except() (in module ivy)": [[74, "ivy.try_except"], [539, "ivy.try_except"]], "while_loop() (in module ivy)": [[75, "ivy.while_loop"], [539, "ivy.while_loop"]], "arange() (in module ivy)": [[76, "ivy.arange"], [540, "ivy.arange"]], "array() (in module ivy)": [[77, "ivy.array"], [540, "ivy.array"]], "asarray() (in module ivy)": [[78, "ivy.asarray"], [540, "ivy.asarray"]], "asarray() (ivy.array method)": [[78, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[78, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[79, "ivy.asarray_handle_nestable"], [540, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[80, "ivy.asarray_infer_device"], [540, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[81, "ivy.asarray_infer_dtype"], [540, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[82, "ivy.asarray_inputs_to_native_shapes"], [540, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[83, "ivy.asarray_to_native_arrays_and_back"], [540, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[84, "ivy.copy_array"], [540, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[84, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[84, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[85, "ivy.empty"], [540, "ivy.empty"]], "empty_like() (in module ivy)": [[86, "ivy.empty_like"], [540, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[86, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[86, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[87, "ivy.eye"], [540, "ivy.eye"]], "from_dlpack() (in module ivy)": [[88, "ivy.from_dlpack"], [540, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[88, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[88, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[89, "ivy.frombuffer"], [540, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[89, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[90, "ivy.full"], [540, "ivy.full"]], "full_like() (in module ivy)": [[91, "ivy.full_like"], [540, "ivy.full_like"]], "full_like() (ivy.array method)": [[91, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[91, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[92, "ivy.linspace"], [540, "ivy.linspace"]], "linspace() (ivy.array method)": [[92, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[92, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[93, "ivy.logspace"], [540, "ivy.logspace"]], "logspace() (ivy.array method)": [[93, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[93, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[94, "ivy.meshgrid"], [540, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[94, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[94, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[95, "ivy.native_array"], [540, "ivy.native_array"]], "native_array() (ivy.array method)": [[95, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[95, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[96, "ivy.one_hot"], [540, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[96, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[96, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[97, "ivy.ones"], [540, "ivy.ones"]], "ones_like() (in module ivy)": [[98, "ivy.ones_like"], [540, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[98, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[98, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[99, "ivy.tril"], [540, "ivy.tril"]], "tril() (ivy.array method)": [[99, "ivy.Array.tril"]], "tril() (ivy.container method)": [[99, "ivy.Container.tril"]], "triu() (in module ivy)": [[100, "ivy.triu"], [540, "ivy.triu"]], "triu() (ivy.array method)": [[100, "ivy.Array.triu"]], "triu() (ivy.container method)": [[100, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[101, "ivy.triu_indices"], [540, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[101, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[102, "ivy.zeros"], [540, "ivy.zeros"]], "zeros_like() (in module ivy)": [[103, "ivy.zeros_like"], [540, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[103, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[103, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[104, "ivy.as_ivy_dtype"], [541, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[105, "ivy.as_native_dtype"], [541, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[106, "ivy.astype"], [541, "ivy.astype"]], "astype() (ivy.array method)": [[106, "ivy.Array.astype"]], "astype() (ivy.container method)": [[106, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[107, "ivy.broadcast_arrays"], [541, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[107, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[107, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[108, "ivy.broadcast_to"], [541, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[108, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[108, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[109, "ivy.can_cast"], [541, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[109, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[109, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[110, "ivy.check_float"], [541, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[111, "ivy.closest_valid_dtype"], [541, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[112, "ivy.default_complex_dtype"], [541, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[113, "ivy.default_dtype"], [541, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[114, "ivy.default_float_dtype"], [541, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[115, "ivy.default_int_dtype"], [541, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[116, "ivy.default_uint_dtype"], [541, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[117, "ivy.dtype"], [541, "ivy.dtype"]], "dtype() (ivy.array method)": [[117, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[117, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[118, "ivy.dtype_bits"], [541, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[119, "ivy.finfo"], [541, "ivy.finfo"]], "finfo() (ivy.array method)": [[119, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[119, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[120, "ivy.function_supported_dtypes"], [541, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[121, "ivy.function_unsupported_dtypes"], [541, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[122, "ivy.iinfo"], [541, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[122, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[122, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[123, "ivy.infer_default_dtype"], [541, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[124, "ivy.invalid_dtype"], [541, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[125, "ivy.is_bool_dtype"], [541, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[125, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[125, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[126, "ivy.is_complex_dtype"], [541, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[126, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[127, "ivy.is_float_dtype"], [541, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[127, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[127, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[128, "ivy.is_hashable_dtype"], [541, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[129, "ivy.is_int_dtype"], [541, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[129, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[129, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[130, "ivy.is_native_dtype"], [541, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[131, "ivy.is_uint_dtype"], [541, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[131, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[131, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[132, "ivy.promote_types"], [541, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[133, "ivy.promote_types_of_inputs"], [541, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[134, "ivy.result_type"], [541, "ivy.result_type"]], "result_type() (ivy.array method)": [[134, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[134, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[135, "ivy.set_default_complex_dtype"], [541, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[136, "ivy.set_default_dtype"], [541, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[137, "ivy.set_default_float_dtype"], [541, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[138, "ivy.set_default_int_dtype"], [541, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[139, "ivy.set_default_uint_dtype"], [541, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[140, "ivy.type_promote_arrays"], [541, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[141, "ivy.unset_default_complex_dtype"], [541, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[142, "ivy.unset_default_dtype"], [541, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[143, "ivy.unset_default_float_dtype"], [541, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[144, "ivy.unset_default_int_dtype"], [541, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[145, "ivy.unset_default_uint_dtype"], [541, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[146, "ivy.valid_dtype"], [541, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[147, "ivy.as_ivy_dev"], [542, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[148, "ivy.as_native_dev"], [542, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[149, "ivy.clear_cached_mem_on_dev"], [542, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[150, "ivy.default_device"], [542, "ivy.default_device"]], "dev() (in module ivy)": [[151, "ivy.dev"], [542, "ivy.dev"]], "dev() (ivy.array method)": [[151, "ivy.Array.dev"]], "dev() (ivy.container method)": [[151, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[152, "ivy.dev_util"], [542, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[153, "ivy.function_supported_devices"], [542, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[154, "ivy.function_unsupported_devices"], [542, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[155, "ivy.get_all_ivy_arrays_on_dev"], [542, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[156, "ivy.gpu_is_available"], [542, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[157, "ivy.handle_soft_device_variable"], [542, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[158, "ivy.num_cpu_cores"], [542, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[159, "ivy.num_gpus"], [542, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[160, "ivy.num_ivy_arrays_on_dev"], [542, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[161, "ivy.percent_used_mem_on_dev"], [542, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[162, "ivy.print_all_ivy_arrays_on_dev"], [542, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[163, "ivy.set_default_device"], [542, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[164, "ivy.set_soft_device_mode"], [542, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[165, "ivy.set_split_factor"], [542, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[166, "ivy.split_factor"], [542, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[167, "ivy.split_func_call"], [542, "ivy.split_func_call"]], "to_device() (in module ivy)": [[168, "ivy.to_device"], [542, "ivy.to_device"]], "to_device() (ivy.array method)": [[168, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[168, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[169, "ivy.total_mem_on_dev"], [542, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[170, "ivy.tpu_is_available"], [542, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[171, "ivy.unset_default_device"], [542, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[172, "ivy.unset_soft_device_mode"], [542, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[173, "ivy.used_mem_on_dev"], [542, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[174, "ivy.abs"], [543, "ivy.abs"]], "abs() (ivy.array method)": [[174, "ivy.Array.abs"]], "abs() (ivy.container method)": [[174, "ivy.Container.abs"]], "acos() (in module ivy)": [[175, "ivy.acos"], [543, "ivy.acos"]], "acos() (ivy.array method)": [[175, "ivy.Array.acos"]], "acos() (ivy.container method)": [[175, "ivy.Container.acos"]], "acosh() (in module ivy)": [[176, "ivy.acosh"], [543, "ivy.acosh"]], "acosh() (ivy.array method)": [[176, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[176, "ivy.Container.acosh"]], "add() (in module ivy)": [[177, "ivy.add"], [543, "ivy.add"]], "add() (ivy.array method)": [[177, "ivy.Array.add"]], "add() (ivy.container method)": [[177, "ivy.Container.add"]], "angle() (in module ivy)": [[178, "ivy.angle"], [543, "ivy.angle"]], "angle() (ivy.array method)": [[178, "ivy.Array.angle"]], "angle() (ivy.container method)": [[178, "ivy.Container.angle"]], "asin() (in module ivy)": [[179, "ivy.asin"], [543, "ivy.asin"]], "asin() (ivy.array method)": [[179, "ivy.Array.asin"]], "asin() (ivy.container method)": [[179, "ivy.Container.asin"]], "asinh() (in module ivy)": [[180, "ivy.asinh"], [543, "ivy.asinh"]], "asinh() (ivy.array method)": [[180, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[180, "ivy.Container.asinh"]], "atan() (in module ivy)": [[181, "ivy.atan"], [543, "ivy.atan"]], "atan() (ivy.array method)": [[181, "ivy.Array.atan"]], "atan() (ivy.container method)": [[181, "ivy.Container.atan"]], "atan2() (in module ivy)": [[182, "ivy.atan2"], [543, "ivy.atan2"]], "atan2() (ivy.array method)": [[182, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[182, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[183, "ivy.atanh"], [543, "ivy.atanh"]], "atanh() (ivy.array method)": [[183, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[183, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[184, "ivy.bitwise_and"], [543, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[184, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[184, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[185, "ivy.bitwise_invert"], [543, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[185, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[185, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[186, "ivy.bitwise_left_shift"], [543, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[186, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[186, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[187, "ivy.bitwise_or"], [543, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[187, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[187, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[188, "ivy.bitwise_right_shift"], [543, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[188, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[188, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[189, "ivy.bitwise_xor"], [543, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[189, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[189, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[190, "ivy.ceil"], [543, "ivy.ceil"]], "ceil() (ivy.array method)": [[190, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[190, "ivy.Container.ceil"]], "cos() (in module ivy)": [[191, "ivy.cos"], [543, "ivy.cos"]], "cos() (ivy.array method)": [[191, "ivy.Array.cos"]], "cos() (ivy.container method)": [[191, "ivy.Container.cos"]], "cosh() (in module ivy)": [[192, "ivy.cosh"], [543, "ivy.cosh"]], "cosh() (ivy.array method)": [[192, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[192, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[193, "ivy.deg2rad"], [543, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[193, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[193, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[194, "ivy.divide"], [543, "ivy.divide"]], "divide() (ivy.array method)": [[194, "ivy.Array.divide"]], "divide() (ivy.container method)": [[194, "ivy.Container.divide"]], "equal() (in module ivy)": [[195, "ivy.equal"], [543, "ivy.equal"]], "equal() (ivy.array method)": [[195, "ivy.Array.equal"]], "equal() (ivy.container method)": [[195, "ivy.Container.equal"]], "erf() (in module ivy)": [[196, "ivy.erf"], [543, "ivy.erf"]], "erf() (ivy.array method)": [[196, "ivy.Array.erf"]], "erf() (ivy.container method)": [[196, "ivy.Container.erf"]], "exp() (in module ivy)": [[197, "ivy.exp"], [543, "ivy.exp"]], "exp() (ivy.array method)": [[197, "ivy.Array.exp"]], "exp() (ivy.container method)": [[197, "ivy.Container.exp"]], "exp2() (in module ivy)": [[198, "ivy.exp2"], [543, "ivy.exp2"]], "exp2() (ivy.array method)": [[198, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[198, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[199, "ivy.expm1"], [543, "ivy.expm1"]], "expm1() (ivy.array method)": [[199, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[199, "ivy.Container.expm1"]], "floor() (in module ivy)": [[200, "ivy.floor"], [543, "ivy.floor"]], "floor() (ivy.array method)": [[200, "ivy.Array.floor"]], "floor() (ivy.container method)": [[200, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[201, "ivy.floor_divide"], [543, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[201, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[201, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[202, "ivy.fmin"], [543, "ivy.fmin"]], "fmin() (ivy.array method)": [[202, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[202, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[203, "ivy.fmod"], [543, "ivy.fmod"]], "fmod() (ivy.array method)": [[203, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[203, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[204, "ivy.gcd"], [543, "ivy.gcd"]], "gcd() (ivy.array method)": [[204, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[204, "ivy.Container.gcd"]], "greater() (in module ivy)": [[205, "ivy.greater"], [543, "ivy.greater"]], "greater() (ivy.array method)": [[205, "ivy.Array.greater"]], "greater() (ivy.container method)": [[205, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[206, "ivy.greater_equal"], [543, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[206, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[206, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[207, "ivy.imag"], [543, "ivy.imag"]], "imag() (ivy.array method)": [[207, "ivy.Array.imag"]], "imag() (ivy.container method)": [[207, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[208, "ivy.isfinite"], [543, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[208, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[208, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[209, "ivy.isinf"], [543, "ivy.isinf"]], "isinf() (ivy.array method)": [[209, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[209, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[210, "ivy.isnan"], [543, "ivy.isnan"]], "isnan() (ivy.array method)": [[210, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[210, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[211, "ivy.isreal"], [543, "ivy.isreal"]], "isreal() (ivy.array method)": [[211, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[211, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[212, "ivy.lcm"], [543, "ivy.lcm"]], "lcm() (ivy.array method)": [[212, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[212, "ivy.Container.lcm"]], "less() (in module ivy)": [[213, "ivy.less"], [543, "ivy.less"]], "less() (ivy.array method)": [[213, "ivy.Array.less"]], "less() (ivy.container method)": [[213, "ivy.Container.less"]], "less_equal() (in module ivy)": [[214, "ivy.less_equal"], [543, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[214, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[214, "ivy.Container.less_equal"]], "log() (in module ivy)": [[215, "ivy.log"], [543, "ivy.log"]], "log() (ivy.array method)": [[215, "ivy.Array.log"]], "log() (ivy.container method)": [[215, "ivy.Container.log"]], "log10() (in module ivy)": [[216, "ivy.log10"], [543, "ivy.log10"]], "log10() (ivy.array method)": [[216, "ivy.Array.log10"]], "log10() (ivy.container method)": [[216, "ivy.Container.log10"]], "log1p() (in module ivy)": [[217, "ivy.log1p"], [543, "ivy.log1p"]], "log1p() (ivy.array method)": [[217, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[217, "ivy.Container.log1p"]], "log2() (in module ivy)": [[218, "ivy.log2"], [543, "ivy.log2"]], "log2() (ivy.array method)": [[218, "ivy.Array.log2"]], "log2() (ivy.container method)": [[218, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[219, "ivy.logaddexp"], [543, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[219, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[219, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[220, "ivy.logaddexp2"], [543, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[220, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[220, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[221, "ivy.logical_and"], [543, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[221, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[221, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[222, "ivy.logical_not"], [543, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[222, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[222, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[223, "ivy.logical_or"], [543, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[223, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[223, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[224, "ivy.logical_xor"], [543, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[224, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[224, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[225, "ivy.maximum"], [543, "ivy.maximum"]], "maximum() (ivy.array method)": [[225, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[225, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[226, "ivy.minimum"], [543, "ivy.minimum"]], "minimum() (ivy.array method)": [[226, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[226, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[227, "ivy.multiply"], [543, "ivy.multiply"]], "multiply() (ivy.array method)": [[227, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[227, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[228, "ivy.nan_to_num"], [543, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[228, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[228, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[229, "ivy.negative"], [543, "ivy.negative"]], "negative() (ivy.array method)": [[229, "ivy.Array.negative"]], "negative() (ivy.container method)": [[229, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[230, "ivy.not_equal"], [543, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[230, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[230, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[231, "ivy.positive"], [543, "ivy.positive"]], "positive() (ivy.array method)": [[231, "ivy.Array.positive"]], "positive() (ivy.container method)": [[231, "ivy.Container.positive"]], "pow() (in module ivy)": [[232, "ivy.pow"], [543, "ivy.pow"]], "pow() (ivy.array method)": [[232, "ivy.Array.pow"]], "pow() (ivy.container method)": [[232, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[233, "ivy.rad2deg"], [543, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[233, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[233, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[234, "ivy.real"], [543, "ivy.real"]], "real() (ivy.array method)": [[234, "ivy.Array.real"]], "real() (ivy.container method)": [[234, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[235, "ivy.reciprocal"], [543, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[235, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[235, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[236, "ivy.remainder"], [543, "ivy.remainder"]], "remainder() (ivy.array method)": [[236, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[236, "ivy.Container.remainder"]], "round() (in module ivy)": [[237, "ivy.round"], [543, "ivy.round"]], "round() (ivy.array method)": [[237, "ivy.Array.round"]], "round() (ivy.container method)": [[237, "ivy.Container.round"]], "sign() (in module ivy)": [[238, "ivy.sign"], [543, "ivy.sign"]], "sign() (ivy.array method)": [[238, "ivy.Array.sign"]], "sign() (ivy.container method)": [[238, "ivy.Container.sign"]], "sin() (in module ivy)": [[239, "ivy.sin"], [543, "ivy.sin"]], "sin() (ivy.array method)": [[239, "ivy.Array.sin"]], "sin() (ivy.container method)": [[239, "ivy.Container.sin"]], "sinh() (in module ivy)": [[240, "ivy.sinh"], [543, "ivy.sinh"]], "sinh() (ivy.array method)": [[240, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[240, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[241, "ivy.sqrt"], [543, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[241, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[241, "ivy.Container.sqrt"]], "square() (in module ivy)": [[242, "ivy.square"], [543, "ivy.square"]], "square() (ivy.array method)": [[242, "ivy.Array.square"]], "square() (ivy.container method)": [[242, "ivy.Container.square"]], "subtract() (in module ivy)": [[243, "ivy.subtract"], [543, "ivy.subtract"]], "subtract() (ivy.array method)": [[243, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[243, "ivy.Container.subtract"]], "tan() (in module ivy)": [[244, "ivy.tan"], [543, "ivy.tan"]], "tan() (ivy.array method)": [[244, "ivy.Array.tan"]], "tan() (ivy.container method)": [[244, "ivy.Container.tan"]], "tanh() (in module ivy)": [[245, "ivy.tanh"], [543, "ivy.tanh"]], "tanh() (ivy.array method)": [[245, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[245, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[246, "ivy.trapz"], [543, "ivy.trapz"]], "trapz() (ivy.array method)": [[246, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[246, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[247, "ivy.trunc"], [543, "ivy.trunc"]], "trunc() (ivy.array method)": [[247, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[247, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[248, "ivy.trunc_divide"], [543, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[248, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[248, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[249, "ivy.elu"], [302, "ivy.elu"]], "elu() (ivy.array method)": [[249, "ivy.Array.elu"]], "elu() (ivy.container method)": [[249, "ivy.Container.elu"]], "logit() (in module ivy)": [[250, "ivy.logit"], [302, "ivy.logit"]], "logit() (ivy.array method)": [[250, "ivy.Array.logit"]], "logit() (ivy.container method)": [[250, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[251, "ivy.logsigmoid"], [302, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[251, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[251, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[252, "ivy.prelu"], [302, "ivy.prelu"]], "prelu() (ivy.array method)": [[252, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[252, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[253, "ivy.relu6"], [302, "ivy.relu6"]], "relu6() (ivy.array method)": [[253, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[253, "ivy.Container.relu6"]], "selu() (in module ivy)": [[254, "ivy.selu"], [302, "ivy.selu"]], "selu() (ivy.array method)": [[254, "ivy.Array.selu"]], "selu() (ivy.container method)": [[254, "ivy.Container.selu"]], "sequence_length() (in module ivy)": [[255, "ivy.sequence_length"], [302, "ivy.sequence_length"]], "silu() (in module ivy)": [[256, "ivy.silu"], [302, "ivy.silu"]], "silu() (ivy.array method)": [[256, "ivy.Array.silu"]], "silu() (ivy.container method)": [[256, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[257, "ivy.thresholded_relu"], [302, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[257, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[257, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[258, "ivy.blackman_window"], [304, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[258, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[258, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[259, "ivy.eye_like"], [304, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[259, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[259, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[260, "ivy.hamming_window"], [304, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[260, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[261, "ivy.hann_window"], [304, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[261, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[262, "ivy.indices"], [304, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[263, "ivy.kaiser_bessel_derived_window"], [304, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[263, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[264, "ivy.kaiser_window"], [304, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[264, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[265, "ivy.mel_weight_matrix"], [304, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[265, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[265, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[266, "ivy.ndenumerate"], [304, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[267, "ivy.ndindex"], [304, "ivy.ndindex"]], "random_cp() (in module ivy)": [[268, "ivy.random_cp"], [304, "ivy.random_cp"]], "random_tucker() (in module ivy)": [[269, "ivy.random_tucker"], [304, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[270, "ivy.tril_indices"], [304, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[270, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[271, "ivy.trilu"], [304, "ivy.trilu"]], "trilu() (ivy.array method)": [[271, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[271, "ivy.Container.trilu"]], "unsorted_segment_min() (in module ivy)": [[272, "ivy.unsorted_segment_min"], [304, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[272, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[272, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[273, "ivy.unsorted_segment_sum"], [304, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[273, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[273, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[274, "ivy.vorbis_window"], [304, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[274, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[275, "ivy.allclose"], [307, "ivy.allclose"]], "allclose() (ivy.array method)": [[275, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[275, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[276, "ivy.binarizer"], [307, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[276, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[276, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[277, "ivy.conj"], [307, "ivy.conj"]], "conj() (ivy.array method)": [[277, "ivy.Array.conj"]], "conj() (ivy.container method)": [[277, "ivy.Container.conj"]], "copysign() (in module ivy)": [[278, "ivy.copysign"], [307, "ivy.copysign"]], "copysign() (ivy.array method)": [[278, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[278, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[279, "ivy.count_nonzero"], [307, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[279, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[279, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[280, "ivy.diff"], [307, "ivy.diff"]], "diff() (ivy.array method)": [[280, "ivy.Array.diff"]], "diff() (ivy.container method)": [[280, "ivy.Container.diff"]], "digamma() (in module ivy)": [[281, "ivy.digamma"], [307, "ivy.digamma"]], "digamma() (ivy.array method)": [[281, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[281, "ivy.Container.digamma"]], "fix() (in module ivy)": [[282, "ivy.fix"], [307, "ivy.fix"]], "fix() (ivy.array method)": [[282, "ivy.Array.fix"]], "fix() (ivy.container method)": [[282, "ivy.Container.fix"]], "float_power() (in module ivy)": [[283, "ivy.float_power"], [307, "ivy.float_power"]], "float_power() (ivy.array method)": [[283, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[283, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[284, "ivy.fmax"], [307, "ivy.fmax"]], "fmax() (ivy.array method)": [[284, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[284, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[285, "ivy.frexp"], [307, "ivy.frexp"]], "frexp() (ivy.array method)": [[285, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[285, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[286, "ivy.gradient"], [307, "ivy.gradient"]], "gradient() (ivy.array method)": [[286, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[286, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[287, "ivy.hypot"], [307, "ivy.hypot"]], "hypot() (ivy.array method)": [[287, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[287, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[288, "ivy.isclose"], [307, "ivy.isclose"]], "isclose() (ivy.array method)": [[288, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[288, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[289, "ivy.ldexp"], [307, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[289, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[289, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[290, "ivy.lerp"], [307, "ivy.lerp"]], "lerp() (ivy.array method)": [[290, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[290, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[291, "ivy.lgamma"], [307, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[291, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[292, "ivy.modf"], [307, "ivy.modf"]], "modf() (ivy.array method)": [[292, "ivy.Array.modf"]], "modf() (ivy.container method)": [[292, "ivy.Container.modf"]], "nansum() (in module ivy)": [[293, "ivy.nansum"], [307, "ivy.nansum"]], "nansum() (ivy.array method)": [[293, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[293, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[294, "ivy.nextafter"], [307, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[294, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[294, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[295, "ivy.signbit"], [307, "ivy.signbit"]], "signbit() (ivy.array method)": [[295, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[295, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[296, "ivy.sinc"], [307, "ivy.sinc"]], "sinc() (ivy.array method)": [[296, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[296, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[297, "ivy.sparsify_tensor"], [307, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[297, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[297, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[298, "ivy.xlogy"], [307, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[298, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[298, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[299, "ivy.zeta"], [307, "ivy.zeta"]], "zeta() (ivy.array method)": [[299, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[299, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[300, "ivy.reduce"], [308, "ivy.reduce"]], "reduce() (ivy.array method)": [[300, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[300, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[301, "ivy.bind_custom_gradient_function"], [309, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[302, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[303, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[304, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[305, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[306, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[307, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[308, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[309, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[310, "ivy.adaptive_avg_pool1d"], [324, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[310, "ivy.adaptive_avg_pool2d"], [325, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[310, "ivy.adaptive_max_pool2d"], [326, "ivy.adaptive_max_pool2d"]], "area_interpolate() (in module ivy)": [[310, "ivy.area_interpolate"], [327, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[310, "ivy.avg_pool1d"], [328, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[310, "ivy.avg_pool2d"], [329, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[310, "ivy.avg_pool3d"], [330, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[310, "ivy.dct"], [331, "ivy.dct"]], "dft() (in module ivy)": [[310, "ivy.dft"], [332, "ivy.dft"]], "dropout1d() (in module ivy)": [[310, "ivy.dropout1d"], [333, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[310, "ivy.dropout2d"], [334, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[310, "ivy.dropout3d"], [335, "ivy.dropout3d"]], "embedding() (in module ivy)": [[310, "ivy.embedding"], [336, "ivy.embedding"]], "fft() (in module ivy)": [[310, "ivy.fft"], [337, "ivy.fft"]], "fft2() (in module ivy)": [[310, "ivy.fft2"], [338, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[310, "ivy.generate_einsum_equation"], [339, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[310, "ivy.get_interpolate_kernel"], [340, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[310, "ivy.idct"], [341, "ivy.idct"]], "ifft() (in module ivy)": [[310, "ivy.ifft"], [342, "ivy.ifft"]], "ifftn() (in module ivy)": [[310, "ivy.ifftn"], [343, "ivy.ifftn"]], "interp() (in module ivy)": [[310, "ivy.interp"], [344, "ivy.interp"]], "interpolate() (in module ivy)": [[310, "ivy.interpolate"], [345, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[310, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[310, "ivy.max_pool1d"], [346, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[310, "ivy.max_pool2d"], [347, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[310, "ivy.max_pool3d"], [348, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[310, "ivy.max_unpool1d"], [349, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[310, "ivy.nearest_interpolate"], [350, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[310, "ivy.pool"], [351, "ivy.pool"]], "reduce_window() (in module ivy)": [[310, "ivy.reduce_window"], [352, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[310, "ivy.rfftn"], [353, "ivy.rfftn"]], "adjoint() (in module ivy)": [[311, "ivy.adjoint"], [354, "ivy.adjoint"]], "cond() (in module ivy)": [[311, "ivy.cond"], [355, "ivy.cond"]], "diagflat() (in module ivy)": [[311, "ivy.diagflat"], [356, "ivy.diagflat"]], "dot() (in module ivy)": [[311, "ivy.dot"], [357, "ivy.dot"]], "eig() (in module ivy)": [[311, "ivy.eig"], [358, "ivy.eig"], [548, "ivy.eig"], [580, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[311, "ivy.eigh_tridiagonal"], [359, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[311, "ivy.eigvals"], [360, "ivy.eigvals"]], "initialize_tucker() (in module ivy)": [[311, "ivy.initialize_tucker"], [361, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[311, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[311, "ivy.khatri_rao"], [362, "ivy.khatri_rao"]], "kron() (in module ivy)": [[311, "ivy.kron"], [363, "ivy.kron"]], "kronecker() (in module ivy)": [[311, "ivy.kronecker"], [364, "ivy.kronecker"]], "make_svd_non_negative() (in module ivy)": [[311, "ivy.make_svd_non_negative"], [365, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[311, "ivy.matrix_exp"], [366, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[311, "ivy.mode_dot"], [367, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[311, "ivy.multi_dot"], [368, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[311, "ivy.multi_mode_dot"], [369, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[311, "ivy.partial_tucker"], [370, "ivy.partial_tucker"]], "svd_flip() (in module ivy)": [[311, "ivy.svd_flip"], [371, "ivy.svd_flip"]], "truncated_svd() (in module ivy)": [[311, "ivy.truncated_svd"], [372, "ivy.truncated_svd"]], "tucker() (in module ivy)": [[311, "ivy.tucker"], [373, "ivy.tucker"]], "huber_loss() (in module ivy)": [[312, "ivy.huber_loss"], [374, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[312, "module-ivy.functional.ivy.experimental.losses"]], "l1_loss() (in module ivy)": [[312, "ivy.l1_loss"], [375, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[312, "ivy.log_poisson_loss"], [376, "ivy.log_poisson_loss"]], "smooth_l1_loss() (in module ivy)": [[312, "ivy.smooth_l1_loss"], [377, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[312, "ivy.soft_margin_loss"], [378, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[313, "ivy.as_strided"], [379, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[313, "ivy.associative_scan"], [380, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[313, "ivy.atleast_1d"], [381, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[313, "ivy.atleast_2d"], [382, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[313, "ivy.atleast_3d"], [383, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[313, "ivy.broadcast_shapes"], [384, "ivy.broadcast_shapes"]], "choose() (in module ivy)": [[313, "ivy.choose"], [385, "ivy.choose"]], "concat_from_sequence() (in module ivy)": [[313, "ivy.concat_from_sequence"], [386, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[313, "ivy.dsplit"], [387, "ivy.dsplit"]], "dstack() (in module ivy)": [[313, "ivy.dstack"], [388, "ivy.dstack"]], "expand() (in module ivy)": [[313, "ivy.expand"], [389, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[313, "ivy.fill_diagonal"], [390, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[313, "ivy.flatten"], [391, "ivy.flatten"]], "fliplr() (in module ivy)": [[313, "ivy.fliplr"], [392, "ivy.fliplr"]], "flipud() (in module ivy)": [[313, "ivy.flipud"], [393, "ivy.flipud"]], "fold() (in module ivy)": [[313, "ivy.fold"], [394, "ivy.fold"]], "heaviside() (in module ivy)": [[313, "ivy.heaviside"], [395, "ivy.heaviside"]], "hsplit() (in module ivy)": [[313, "ivy.hsplit"], [396, "ivy.hsplit"]], "hstack() (in module ivy)": [[313, "ivy.hstack"], [397, "ivy.hstack"]], "i0() (in module ivy)": [[313, "ivy.i0"], [398, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[313, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[313, "ivy.matricize"], [399, "ivy.matricize"]], "moveaxis() (in module ivy)": [[313, "ivy.moveaxis"], [400, "ivy.moveaxis"]], "pad() (in module ivy)": [[313, "ivy.pad"], [401, "ivy.pad"]], "partial_fold() (in module ivy)": [[313, "ivy.partial_fold"], [402, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[313, "ivy.partial_tensor_to_vec"], [403, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[313, "ivy.partial_unfold"], [404, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[313, "ivy.partial_vec_to_tensor"], [405, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[313, "ivy.put_along_axis"], [406, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[313, "ivy.rot90"], [407, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[313, "ivy.soft_thresholding"], [408, "ivy.soft_thresholding"]], "take_along_axis() (in module ivy)": [[313, "ivy.take_along_axis"], [409, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[313, "ivy.top_k"], [410, "ivy.top_k"]], "unfold() (in module ivy)": [[313, "ivy.unfold"], [411, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[313, "ivy.unique_consecutive"], [412, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[313, "ivy.vsplit"], [413, "ivy.vsplit"]], "vstack() (in module ivy)": [[313, "ivy.vstack"], [414, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[314, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[315, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[316, "ivy.batch_norm"], [415, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[316, "ivy.group_norm"], [416, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[316, "ivy.instance_norm"], [417, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[316, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[316, "ivy.l1_normalize"], [418, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[316, "ivy.l2_normalize"], [419, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[316, "ivy.lp_normalize"], [420, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[317, "ivy.bernoulli"], [421, "ivy.bernoulli"]], "beta() (in module ivy)": [[317, "ivy.beta"], [422, "ivy.beta"]], "dirichlet() (in module ivy)": [[317, "ivy.dirichlet"], [423, "ivy.dirichlet"]], "gamma() (in module ivy)": [[317, "ivy.gamma"], [424, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[317, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[317, "ivy.poisson"], [425, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[318, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[318, "ivy.unravel_index"], [426, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[319, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[320, "ivy.invert_permutation"], [427, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[320, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[320, "ivy.lexsort"], [428, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[321, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[321, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[321, "ivy.is_ivy_sparse_array"], [429, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[321, "ivy.is_native_sparse_array"], [430, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[321, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[321, "ivy.native_sparse_array"], [431, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[321, "ivy.native_sparse_array_to_indices_values_and_shape"], [432, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[322, "ivy.bincount"], [433, "ivy.bincount"]], "corrcoef() (in module ivy)": [[322, "ivy.corrcoef"], [434, "ivy.corrcoef"]], "cov() (in module ivy)": [[322, "ivy.cov"], [435, "ivy.cov"]], "cummax() (in module ivy)": [[322, "ivy.cummax"], [436, "ivy.cummax"]], "cummin() (in module ivy)": [[322, "ivy.cummin"], [437, "ivy.cummin"]], "histogram() (in module ivy)": [[322, "ivy.histogram"], [438, "ivy.histogram"]], "igamma() (in module ivy)": [[322, "ivy.igamma"], [439, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[322, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[322, "ivy.median"], [440, "ivy.median"]], "nanmean() (in module ivy)": [[322, "ivy.nanmean"], [441, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[322, "ivy.nanmedian"], [442, "ivy.nanmedian"]], "nanprod() (in module ivy)": [[322, "ivy.nanprod"], [443, "ivy.nanprod"]], "quantile() (in module ivy)": [[322, "ivy.quantile"], [444, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[323, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[323, "ivy.optional_get_element"], [445, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[324, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[324, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[325, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[325, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[326, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[326, "ivy.Container.adaptive_max_pool2d"]], "avg_pool1d() (ivy.array method)": [[328, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[328, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[329, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[329, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[330, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[330, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[331, "ivy.Array.dct"]], "dct() (ivy.container method)": [[331, "ivy.Container.dct"]], "dft() (ivy.array method)": [[332, "ivy.Array.dft"]], "dft() (ivy.container method)": [[332, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[333, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[333, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[334, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[334, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[335, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[335, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[336, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[336, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[337, "ivy.Array.fft"]], "fft() (ivy.container method)": [[337, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[338, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[341, "ivy.Array.idct"]], "idct() (ivy.container method)": [[341, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[342, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[342, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[343, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[343, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[345, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[345, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[346, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[346, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[347, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[347, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[348, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[348, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[352, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[352, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[353, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[353, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[354, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[354, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[355, "ivy.Array.cond"]], "cond() (ivy.container method)": [[355, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[356, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[356, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[357, "ivy.Array.dot"]], "dot() (ivy.container method)": [[357, "ivy.Container.dot"]], "eig() (ivy.array method)": [[358, "ivy.Array.eig"], [580, "ivy.Array.eig"]], "eig() (ivy.container method)": [[358, "ivy.Container.eig"], [580, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[359, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[359, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[360, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[360, "ivy.Container.eigvals"]], "initialize_tucker() (ivy.array method)": [[361, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[361, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[363, "ivy.Array.kron"]], "kron() (ivy.container method)": [[363, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[365, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[365, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[366, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[366, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[367, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[367, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[368, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[368, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[369, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[369, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[370, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[370, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[371, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[371, "ivy.Container.svd_flip"]], "truncated_svd() (ivy.array method)": [[372, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[372, "ivy.Container.truncated_svd"]], "tucker() (ivy.array method)": [[373, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[373, "ivy.Container.tucker"]], "huber_loss() (ivy.array method)": [[374, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[374, "ivy.Container.huber_loss"]], "l1_loss() (ivy.array method)": [[375, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[375, "ivy.Container.l1_loss"]], "smooth_l1_loss() (ivy.array method)": [[377, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[377, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[378, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[378, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[379, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[379, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[380, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[380, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[381, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[381, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[382, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[382, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[383, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[383, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[384, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[386, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[386, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[387, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[387, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[388, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[388, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[389, "ivy.Array.expand"]], "expand() (ivy.container method)": [[389, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[390, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[390, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[391, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[391, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[392, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[392, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[393, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[393, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[394, "ivy.Array.fold"]], "fold() (ivy.container method)": [[394, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[395, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[395, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[396, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[396, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[397, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[397, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[398, "ivy.Array.i0"]], "i0() (ivy.container method)": [[398, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[399, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[399, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[400, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[400, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[401, "ivy.Array.pad"]], "pad() (ivy.container method)": [[401, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[402, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[402, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[403, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[403, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[404, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[404, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[405, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[405, "ivy.Container.partial_vec_to_tensor"]], "rot90() (ivy.array method)": [[407, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[407, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[408, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[408, "ivy.Container.soft_thresholding"]], "take_along_axis() (ivy.array method)": [[409, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[409, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[410, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[410, "ivy.Container.top_k"]], "unfold() (ivy.array method)": [[411, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[411, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[412, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[412, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[413, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[413, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[414, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[414, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[415, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[415, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[416, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[416, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[417, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[417, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[418, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[418, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[419, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[419, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[420, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[420, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[421, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[421, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[422, "ivy.Array.beta"]], "beta() (ivy.container method)": [[422, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[423, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[423, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[424, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[424, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[425, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[425, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[426, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[426, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[427, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[428, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[428, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[433, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[433, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[434, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[434, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[435, "ivy.Array.cov"]], "cov() (ivy.container method)": [[435, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[436, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[436, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[437, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[437, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[438, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[438, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[439, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[439, "ivy.Container.igamma"]], "median() (ivy.array method)": [[440, "ivy.Array.median"]], "median() (ivy.container method)": [[440, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[441, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[441, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[442, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[442, "ivy.Container.nanmedian"]], "nanprod() (ivy.array method)": [[443, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[443, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[444, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[444, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[445, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[445, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[446, "ivy.all_equal"], [545, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[446, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[446, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[447, "ivy.arg_info"], [545, "ivy.arg_info"]], "arg_names() (in module ivy)": [[448, "ivy.arg_names"], [545, "ivy.arg_names"]], "array_equal() (in module ivy)": [[449, "ivy.array_equal"], [545, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[449, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[449, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[450, "ivy.assert_supports_inplace"], [545, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[450, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[450, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[451, "ivy.cache_fn"], [545, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[452, "ivy.clip_matrix_norm"], [545, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[452, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[452, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[453, "ivy.clip_vector_norm"], [545, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[453, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[453, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[454, "ivy.container_types"], [545, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[455, "ivy.current_backend_str"], [545, "ivy.current_backend_str"]], "default() (in module ivy)": [[456, "ivy.default"], [545, "ivy.default"]], "default() (ivy.array method)": [[456, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[457, "ivy.einops_rearrange"], [545, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[457, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[457, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[458, "ivy.einops_reduce"], [545, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[458, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[458, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[459, "ivy.einops_repeat"], [545, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[459, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[459, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[460, "ivy.exists"], [545, "ivy.exists"]], "exists() (ivy.array method)": [[460, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[461, "ivy.fourier_encode"], [545, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[461, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[461, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[462, "ivy.function_supported_devices_and_dtypes"], [545, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[463, "ivy.function_unsupported_devices_and_dtypes"], [545, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[464, "ivy.gather"], [545, "ivy.gather"]], "gather() (ivy.array method)": [[464, "ivy.Array.gather"]], "gather() (ivy.container method)": [[464, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[465, "ivy.gather_nd"], [545, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[465, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[465, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[466, "ivy.get_all_arrays_in_memory"], [545, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[467, "ivy.get_item"], [545, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[468, "ivy.get_num_dims"], [545, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[468, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[468, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[469, "ivy.get_referrers_recursive"], [545, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[470, "ivy.has_nans"], [545, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[470, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[470, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[471, "ivy.inplace_arrays_supported"], [545, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[472, "ivy.inplace_decrement"], [545, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[472, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[472, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[473, "ivy.inplace_increment"], [545, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[473, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[473, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[474, "ivy.inplace_update"], [545, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[474, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[474, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[475, "ivy.inplace_variables_supported"], [545, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[476, "ivy.is_array"], [545, "ivy.is_array"]], "is_array() (ivy.array method)": [[476, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[476, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[477, "ivy.is_ivy_array"], [545, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[477, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[477, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[478, "ivy.is_ivy_container"], [545, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[478, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[479, "ivy.is_ivy_nested_array"], [545, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[480, "ivy.is_native_array"], [545, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[480, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[480, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[481, "ivy.isin"], [545, "ivy.isin"]], "isin() (ivy.array method)": [[481, "ivy.Array.isin"]], "isin() (ivy.container method)": [[481, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[482, "ivy.isscalar"], [545, "ivy.isscalar"]], "itemsize() (in module ivy)": [[483, "ivy.itemsize"], [545, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[483, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[483, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[484, "ivy.match_kwargs"], [545, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[485, "ivy.multiprocessing"], [545, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[486, "ivy.num_arrays_in_memory"], [545, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[487, "ivy.print_all_arrays_in_memory"], [545, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[488, "ivy.scatter_flat"], [545, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[488, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[488, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[489, "ivy.scatter_nd"], [545, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[489, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[489, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[490, "ivy.set_array_mode"], [545, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[491, "ivy.set_exception_trace_mode"], [545, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[492, "ivy.set_inplace_mode"], [545, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[493, "ivy.set_item"], [545, "ivy.set_item"]], "set_min_base() (in module ivy)": [[494, "ivy.set_min_base"], [545, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[495, "ivy.set_min_denominator"], [545, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[496, "ivy.set_nestable_mode"], [545, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[497, "ivy.set_precise_mode"], [545, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[498, "ivy.set_queue_timeout"], [545, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[499, "ivy.set_shape_array_mode"], [545, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[500, "ivy.set_show_func_wrapper_trace_mode"], [545, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[501, "ivy.set_tmp_dir"], [545, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[502, "ivy.shape"], [545, "ivy.shape"]], "shape() (ivy.array method)": [[502, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[503, "ivy.stable_divide"], [545, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[503, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[503, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[504, "ivy.stable_pow"], [545, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[504, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[504, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[505, "ivy.strides"], [545, "ivy.strides"]], "strides() (ivy.array method)": [[505, "ivy.Array.strides"]], "strides() (ivy.container method)": [[505, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[506, "ivy.supports_inplace_updates"], [545, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[506, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[506, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[507, "ivy.to_ivy_shape"], [545, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[508, "ivy.to_list"], [545, "ivy.to_list"]], "to_list() (ivy.array method)": [[508, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[508, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[509, "ivy.to_native_shape"], [545, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[510, "ivy.to_numpy"], [545, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[510, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[510, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[511, "ivy.to_scalar"], [545, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[511, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[511, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[512, "ivy.try_else_none"], [545, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[513, "ivy.unset_array_mode"], [545, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[514, "ivy.unset_exception_trace_mode"], [545, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[515, "ivy.unset_inplace_mode"], [545, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[516, "ivy.unset_min_base"], [545, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[517, "ivy.unset_min_denominator"], [545, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[518, "ivy.unset_nestable_mode"], [545, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[519, "ivy.unset_precise_mode"], [545, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[520, "ivy.unset_queue_timeout"], [545, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[521, "ivy.unset_shape_array_mode"], [545, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[522, "ivy.unset_show_func_wrapper_trace_mode"], [545, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[523, "ivy.unset_tmp_dir"], [545, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[524, "ivy.value_is_nan"], [545, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[524, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[524, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[525, "ivy.vmap"], [545, "ivy.vmap"]], "adam_step() (in module ivy)": [[526, "ivy.adam_step"], [546, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[526, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[526, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[527, "ivy.adam_update"], [546, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[527, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[527, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[528, "ivy.execute_with_gradients"], [546, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[529, "ivy.grad"], [546, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[530, "ivy.gradient_descent_update"], [546, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[530, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[530, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[531, "ivy.jac"], [546, "ivy.jac"]], "lamb_update() (in module ivy)": [[532, "ivy.lamb_update"], [546, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[532, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[532, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[533, "ivy.lars_update"], [546, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[533, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[533, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[534, "ivy.optimizer_update"], [546, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[534, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[534, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[535, "ivy.stop_gradient"], [546, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[535, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[535, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[536, "ivy.value_and_grad"], [546, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[537, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[538, "ivy.e"]], "inf (in module ivy)": [[538, "ivy.inf"]], "ivy.functional.ivy.constants": [[538, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[538, "ivy.nan"]], "newaxis (in module ivy)": [[538, "ivy.newaxis"]], "pi (in module ivy)": [[538, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[539, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[540, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[540, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[541, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[541, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[541, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[541, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[541, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[541, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[542, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[542, "ivy.Profiler"]], "ivy.functional.ivy.device": [[542, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[543, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[544, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[545, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[545, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[545, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[546, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[547, "ivy.conv"], [560, "ivy.conv"]], "conv1d() (in module ivy)": [[547, "ivy.conv1d"], [561, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[547, "ivy.conv1d_transpose"], [562, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[547, "ivy.conv2d"], [563, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[547, "ivy.conv2d_transpose"], [564, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[547, "ivy.conv3d"], [565, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[547, "ivy.conv3d_transpose"], [566, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[547, "ivy.conv_general_dilated"], [567, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[547, "ivy.conv_general_transpose"], [568, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[547, "ivy.depthwise_conv2d"], [569, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[547, "ivy.dropout"], [570, "ivy.dropout"]], "ivy.functional.ivy.layers": [[547, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[547, "ivy.linear"], [571, "ivy.linear"]], "lstm_update() (in module ivy)": [[547, "ivy.lstm_update"], [572, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[547, "ivy.multi_head_attention"], [573, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[547, "ivy.scaled_dot_product_attention"], [574, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[548, "ivy.cholesky"], [575, "ivy.cholesky"]], "cross() (in module ivy)": [[548, "ivy.cross"], [576, "ivy.cross"]], "det() (in module ivy)": [[548, "ivy.det"], [577, "ivy.det"]], "diag() (in module ivy)": [[548, "ivy.diag"], [578, "ivy.diag"]], "diagonal() (in module ivy)": [[548, "ivy.diagonal"], [579, "ivy.diagonal"]], "eigh() (in module ivy)": [[548, "ivy.eigh"], [581, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[548, "ivy.eigvalsh"], [582, "ivy.eigvalsh"]], "inner() (in module ivy)": [[548, "ivy.inner"], [583, "ivy.inner"]], "inv() (in module ivy)": [[548, "ivy.inv"], [584, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[548, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[548, "ivy.lu_factor"], [585, "ivy.lu_factor"]], "matmul() (in module ivy)": [[548, "ivy.matmul"], [586, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[548, "ivy.matrix_norm"], [587, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[548, "ivy.matrix_power"], [588, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[548, "ivy.matrix_rank"], [589, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[548, "ivy.matrix_transpose"], [590, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[548, "ivy.outer"], [591, "ivy.outer"]], "pinv() (in module ivy)": [[548, "ivy.pinv"], [592, "ivy.pinv"]], "qr() (in module ivy)": [[548, "ivy.qr"], [593, "ivy.qr"]], "slogdet() (in module ivy)": [[548, "ivy.slogdet"], [594, "ivy.slogdet"]], "solve() (in module ivy)": [[548, "ivy.solve"], [595, "ivy.solve"]], "svd() (in module ivy)": [[548, "ivy.svd"], [596, "ivy.svd"]], "svdvals() (in module ivy)": [[548, "ivy.svdvals"], [597, "ivy.svdvals"]], "tensordot() (in module ivy)": [[548, "ivy.tensordot"], [598, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[548, "ivy.tensorsolve"], [599, "ivy.tensorsolve"]], "trace() (in module ivy)": [[548, "ivy.trace"], [600, "ivy.trace"]], "vander() (in module ivy)": [[548, "ivy.vander"], [601, "ivy.vander"]], "vecdot() (in module ivy)": [[548, "ivy.vecdot"], [602, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[548, "ivy.vector_norm"], [603, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[548, "ivy.vector_to_skew_symmetric_matrix"], [604, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[549, "ivy.binary_cross_entropy"], [605, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[549, "ivy.cross_entropy"], [606, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[549, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[549, "ivy.sparse_cross_entropy"], [607, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[550, "ivy.clip"], [608, "ivy.clip"]], "concat() (in module ivy)": [[550, "ivy.concat"], [609, "ivy.concat"]], "constant_pad() (in module ivy)": [[550, "ivy.constant_pad"], [610, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[550, "ivy.expand_dims"], [611, "ivy.expand_dims"]], "flip() (in module ivy)": [[550, "ivy.flip"], [612, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[550, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[550, "ivy.permute_dims"], [613, "ivy.permute_dims"]], "repeat() (in module ivy)": [[550, "ivy.repeat"], [614, "ivy.repeat"]], "reshape() (in module ivy)": [[550, "ivy.reshape"], [615, "ivy.reshape"]], "roll() (in module ivy)": [[550, "ivy.roll"], [616, "ivy.roll"]], "split() (in module ivy)": [[550, "ivy.split"], [617, "ivy.split"]], "squeeze() (in module ivy)": [[550, "ivy.squeeze"], [618, "ivy.squeeze"]], "stack() (in module ivy)": [[550, "ivy.stack"], [619, "ivy.stack"]], "swapaxes() (in module ivy)": [[550, "ivy.swapaxes"], [620, "ivy.swapaxes"]], "tile() (in module ivy)": [[550, "ivy.tile"], [621, "ivy.tile"]], "unstack() (in module ivy)": [[550, "ivy.unstack"], [622, "ivy.unstack"]], "zero_pad() (in module ivy)": [[550, "ivy.zero_pad"], [623, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[551, "ivy.fomaml_step"], [624, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[551, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[551, "ivy.maml_step"], [625, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[551, "ivy.reptile_step"], [626, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[552, "ivy.all_nested_indices"], [627, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[552, "ivy.copy_nest"], [628, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[552, "ivy.duplicate_array_index_chains"], [629, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[552, "ivy.index_nest"], [630, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[552, "ivy.insert_into_nest_at_index"], [631, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[552, "ivy.insert_into_nest_at_indices"], [632, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[552, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[552, "ivy.map"], [633, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[552, "ivy.map_nest_at_index"], [634, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[552, "ivy.map_nest_at_indices"], [635, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[552, "ivy.multi_index_nest"], [636, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[552, "ivy.nested_any"], [637, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[552, "ivy.nested_argwhere"], [638, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[552, "ivy.nested_map"], [639, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[552, "ivy.nested_multi_map"], [640, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[552, "ivy.prune_empty"], [641, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[552, "ivy.prune_nest_at_index"], [642, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[552, "ivy.prune_nest_at_indices"], [643, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[552, "ivy.set_nest_at_index"], [644, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[552, "ivy.set_nest_at_indices"], [645, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[553, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[553, "ivy.layer_norm"], [646, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[554, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[554, "ivy.multinomial"], [647, "ivy.multinomial"]], "randint() (in module ivy)": [[554, "ivy.randint"], [648, "ivy.randint"]], "random_normal() (in module ivy)": [[554, "ivy.random_normal"], [649, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[554, "ivy.random_uniform"], [650, "ivy.random_uniform"]], "seed() (in module ivy)": [[554, "ivy.seed"], [651, "ivy.seed"]], "shuffle() (in module ivy)": [[554, "ivy.shuffle"], [652, "ivy.shuffle"]], "argmax() (in module ivy)": [[555, "ivy.argmax"], [653, "ivy.argmax"]], "argmin() (in module ivy)": [[555, "ivy.argmin"], [654, "ivy.argmin"]], "argwhere() (in module ivy)": [[555, "ivy.argwhere"], [655, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[555, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[555, "ivy.nonzero"], [656, "ivy.nonzero"]], "where() (in module ivy)": [[555, "ivy.where"], [657, "ivy.where"]], "ivy.functional.ivy.set": [[556, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[556, "ivy.unique_all"], [658, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[556, "ivy.unique_counts"], [659, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[556, "ivy.unique_inverse"], [660, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[556, "ivy.unique_values"], [661, "ivy.unique_values"]], "argsort() (in module ivy)": [[557, "ivy.argsort"], [662, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[557, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[557, "ivy.msort"], [663, "ivy.msort"]], "searchsorted() (in module ivy)": [[557, "ivy.searchsorted"], [664, "ivy.searchsorted"]], "sort() (in module ivy)": [[557, "ivy.sort"], [665, "ivy.sort"]], "cumprod() (in module ivy)": [[558, "ivy.cumprod"], [666, "ivy.cumprod"]], "cumsum() (in module ivy)": [[558, "ivy.cumsum"], [667, "ivy.cumsum"]], "einsum() (in module ivy)": [[558, "ivy.einsum"], [668, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[558, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[558, "ivy.max"], [669, "ivy.max"]], "mean() (in module ivy)": [[558, "ivy.mean"], [670, "ivy.mean"]], "min() (in module ivy)": [[558, "ivy.min"], [671, "ivy.min"]], "prod() (in module ivy)": [[558, "ivy.prod"], [672, "ivy.prod"]], "std() (in module ivy)": [[558, "ivy.std"], [673, "ivy.std"]], "sum() (in module ivy)": [[558, "ivy.sum"], [674, "ivy.sum"]], "var() (in module ivy)": [[558, "ivy.var"], [675, "ivy.var"]], "all() (in module ivy)": [[559, "ivy.all"], [676, "ivy.all"]], "any() (in module ivy)": [[559, "ivy.any"], [677, "ivy.any"]], "ivy.functional.ivy.utility": [[559, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[559, "ivy.load"], [678, "ivy.load"]], "save() (in module ivy)": [[559, "ivy.save"], [679, "ivy.save"]], "conv1d() (ivy.array method)": [[561, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[561, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[562, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[562, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[563, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[563, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[564, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[564, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[565, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[565, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[566, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[566, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[569, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[569, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[570, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[570, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[571, "ivy.Array.linear"]], "linear() (ivy.container method)": [[571, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[572, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[572, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[573, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[573, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[574, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[574, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[575, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[575, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[576, "ivy.Array.cross"]], "cross() (ivy.container method)": [[576, "ivy.Container.cross"]], "det() (ivy.array method)": [[577, "ivy.Array.det"]], "det() (ivy.container method)": [[577, "ivy.Container.det"]], "diag() (ivy.array method)": [[578, "ivy.Array.diag"]], "diag() (ivy.container method)": [[578, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[579, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[579, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[581, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[581, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[582, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[582, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[583, "ivy.Array.inner"]], "inner() (ivy.container method)": [[583, "ivy.Container.inner"]], "inv() (ivy.array method)": [[584, "ivy.Array.inv"]], "inv() (ivy.container method)": [[584, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[586, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[586, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[587, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[587, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[588, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[588, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[589, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[589, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[590, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[590, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[591, "ivy.Array.outer"]], "outer() (ivy.container method)": [[591, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[592, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[592, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[593, "ivy.Array.qr"]], "qr() (ivy.container method)": [[593, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[594, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[594, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[595, "ivy.Array.solve"]], "solve() (ivy.container method)": [[595, "ivy.Container.solve"]], "svd() (ivy.array method)": [[596, "ivy.Array.svd"]], "svd() (ivy.container method)": [[596, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[597, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[597, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[598, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[598, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[599, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[599, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[600, "ivy.Array.trace"]], "trace() (ivy.container method)": [[600, "ivy.Container.trace"]], "vander() (ivy.array method)": [[601, "ivy.Array.vander"]], "vander() (ivy.container method)": [[601, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[602, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[602, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[603, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[603, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[604, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[604, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[605, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[605, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[606, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[606, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[607, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[607, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[608, "ivy.Array.clip"]], "clip() (ivy.container method)": [[608, "ivy.Container.clip"]], "concat() (ivy.array method)": [[609, "ivy.Array.concat"]], "concat() (ivy.container method)": [[609, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[610, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[610, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[611, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[611, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[612, "ivy.Array.flip"]], "flip() (ivy.container method)": [[612, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[613, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[613, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[614, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[614, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[615, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[615, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[616, "ivy.Array.roll"]], "roll() (ivy.container method)": [[616, "ivy.Container.roll"]], "split() (ivy.array method)": [[617, "ivy.Array.split"]], "split() (ivy.container method)": [[617, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[618, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[618, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[619, "ivy.Array.stack"]], "stack() (ivy.container method)": [[619, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[620, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[620, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[621, "ivy.Array.tile"]], "tile() (ivy.container method)": [[621, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[622, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[622, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[623, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[623, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[646, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[646, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[647, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[647, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[648, "ivy.Array.randint"]], "randint() (ivy.container method)": [[648, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[649, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[649, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[650, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[650, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[652, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[652, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[653, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[653, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[654, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[654, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[655, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[655, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[656, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[656, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[657, "ivy.Array.where"]], "where() (ivy.container method)": [[657, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[658, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[658, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[659, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[659, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[660, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[660, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[661, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[661, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[662, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[662, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[663, "ivy.Array.msort"]], "msort() (ivy.container method)": [[663, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[664, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[664, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[665, "ivy.Array.sort"]], "sort() (ivy.container method)": [[665, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[666, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[666, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[667, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[667, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[668, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[668, "ivy.Container.einsum"]], "max() (ivy.array method)": [[669, "ivy.Array.max"]], "max() (ivy.container method)": [[669, "ivy.Container.max"]], "mean() (ivy.array method)": [[670, "ivy.Array.mean"]], "mean() (ivy.container method)": [[670, "ivy.Container.mean"]], "min() (ivy.array method)": [[671, "ivy.Array.min"]], "min() (ivy.container method)": [[671, "ivy.Container.min"]], "prod() (ivy.array method)": [[672, "ivy.Array.prod"]], "prod() (ivy.container method)": [[672, "ivy.Container.prod"]], "std() (ivy.array method)": [[673, "ivy.Array.std"]], "std() (ivy.container method)": [[673, "ivy.Container.std"]], "sum() (ivy.array method)": [[674, "ivy.Array.sum"]], "sum() (ivy.container method)": [[674, "ivy.Container.sum"]], "var() (ivy.array method)": [[675, "ivy.Array.var"]], "var() (ivy.container method)": [[675, "ivy.Container.var"]], "all() (ivy.array method)": [[676, "ivy.Array.all"]], "all() (ivy.container method)": [[676, "ivy.Container.all"]], "any() (ivy.array method)": [[677, "ivy.Array.any"]], "any() (ivy.container method)": [[677, "ivy.Container.any"]], "elu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[682, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[682, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[682, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[682, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[682, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[682, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[682, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[682, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[682, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[682, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[682, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[682, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[682, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[682, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[682, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[682, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[682, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[682, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[682, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[682, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[683, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[683, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[683, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[683, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[683, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[683, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[683, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[683, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[684, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[684, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[684, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[685, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[685, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[685, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[685, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[685, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[685, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[685, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[685, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[685, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[685, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[685, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[685, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[685, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[685, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[685, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[685, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.FFT"]], "identity (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[686, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[686, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[686, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[686, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[686, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[686, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[686, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[686, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[686, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[686, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[686, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[686, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[686, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[686, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[686, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[686, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[686, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[686, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[686, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[686, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[686, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[686, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[686, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[686, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[686, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[686, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[687, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[687, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[687, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[687, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[687, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[687, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[687, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[688, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[688, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[688, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[688, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.compile"]], "eval() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[688, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[688, "ivy.stateful.module.Module.load"]], "register_buffer() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.register_buffer"]], "save() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.show_graph"]], "train() (ivy.stateful.module.module method)": [[688, "ivy.stateful.module.Module.train"]], "batchnorm2d (class in ivy.stateful.norms)": [[689, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[689, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[689, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[689, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[689, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[690, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[690, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[690, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[690, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[690, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[690, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[690, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[690, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[690, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[690, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[690, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[690, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[690, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[690, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[690, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[690, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[690, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[690, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[690, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[690, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[690, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[691, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[691, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[691, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[692, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[692, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[693, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[694, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[694, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[694, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[694, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[694, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[694, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[694, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[694, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[694, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[694, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[694, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[695, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[695, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[695, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[696, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[696, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[696, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[696, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[696, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[696, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[697, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[697, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[698, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[698, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "inplaceupdateexception": [[699, "ivy.utils.exceptions.InplaceUpdateException"]], "invalidbackendexception": [[699, "ivy.utils.exceptions.InvalidBackendException"]], "ivyattributeerror": [[699, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[699, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[699, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[699, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[699, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[699, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[699, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[699, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[699, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[699, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[699, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.invalidbackendexception method)": [[699, "ivy.utils.exceptions.InvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[699, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[699, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[699, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[699, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[699, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[699, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[699, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[699, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[699, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[699, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[699, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[699, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[700, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[700, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[700, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[701, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[701, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[701, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[702, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[702, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[702, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[702, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[702, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[703, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[703, "module-ivy.utils.verbosity"]], "applied libraries": [[752, "term-Applied-Libraries"]], "automatic code conversions": [[752, "term-Automatic-Code-Conversions"]], "backend handler": [[752, "term-Backend-Handler"]], "compositional functions": [[752, "term-Compositional-Functions"]], "convenience functions": [[752, "term-Convenience-Functions"]], "framework": [[752, "term-Framework"]], "framework handler": [[752, "term-Framework-Handler"]], "graph compiler": [[752, "term-Graph-Compiler"]], "ivy array": [[752, "term-Ivy-Array"]], "ivy backends": [[752, "term-Ivy-Backends"]], "ivy builder": [[752, "term-Ivy-Builder"]], "ivy compiler": [[752, "term-Ivy-Compiler"]], "ivy container": [[752, "term-Ivy-Container"]], "ivy frontends": [[752, "term-Ivy-Frontends"]], "ivy functional api": [[752, "term-Ivy-Functional-API"]], "ivy graph compiler": [[752, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[752, "term-Ivy-Transpiler"]], "mixed functions": [[752, "term-Mixed-Functions"]], "native array": [[752, "term-Native-Array"]], "nestable functions": [[752, "term-Nestable-Functions"]], "pipeline": [[752, "term-Pipeline"]], "primary functions": [[752, "term-Primary-Functions"]], "standalone functions": [[752, "term-Standalone-Functions"]], "submodule helper functions": [[752, "term-Submodule-Helper-Functions"]]}})